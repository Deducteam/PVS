% For HTML <xmp>
%Patch files loaded: patch2 version 2.414
%                    patch2-test version 1.698

$$$pvs-strategies
(defstep use-lemma (lemma &optional subst (if-match best))
  (then (use lemma :subst subst :if-match if-match)
	(if *new-fmla-nums*
	    (let ((fnum (car *new-fmla-nums*)))
	      (spread (split fnum)
		      ((then (let ((fnums *new-fmla-nums*))
			       (flatten fnums))
			     (let ((new-fnums *new-fmla-nums*))
			       (then (replace* new-fnums)
				     (delete new-fnums)))))))
	    (skip)))
  "Introduce LEMMA instance, then does BETA, INST?, and SPLIT on this,
and then on the main branch a REPLACE* followed by a deletion of any
remnants of the lemma."
  "Using and discarding")

(defun cleanup-fnums (fnums)
  (cond ((consp fnums)(loop for fnum in fnums
			    collect (if (stringp fnum)
					(intern fnum)
					fnum)))
	((stringp fnums) (list (intern fnums)))
	((memq fnums '(* + -)) fnums)
	(t (list fnums))))

(defun gather-fnums (sforms yesnums nonums
		       &optional (pred #'(lambda (x) T))
		       (pos 1) (neg -1))
  (let ((yesnums (cleanup-fnums yesnums))
	(nonums (cleanup-fnums nonums)))
    (gather-fnums* sforms yesnums nonums pred pos neg)))

(defun gather-fnums* (seq yesnums nonums
		       pred pos neg)
   (cond ((null seq) nil)
	 ((not-expr? (formula (car seq)))
	  (if (and (in-sformnums? (car seq) pos neg yesnums)
		   (not (in-sformnums? (car seq) pos neg nonums))
		   (funcall pred (car seq)))
	      (cons neg
		    (gather-fnums* (cdr seq) yesnums nonums pred
				pos (1- neg)))
	      (gather-fnums* (cdr seq) yesnums nonums pred pos (1- neg)))) 
	 (t (if (and (in-sformnums? (car seq) pos neg yesnums)
		     (not (in-sformnums? (car seq) pos neg nonums))
		     (funcall pred (car seq)))
	      (cons pos
		    (gather-fnums* (cdr seq) yesnums nonums
				pred (1+ pos) neg))
	      (gather-fnums* (cdr seq) yesnums nonums pred
			  (1+ pos)  neg)))))

(defstep auto-rewrite-antecedents ()
   (let ((fnums (gather-fnums (s-forms (current-goal *ps*))
                              '- nil)))
      (auto-rewrite :names fnums))
    "Help string with examples"
    "Commentary string")


$$$new_pipe.pvs
new_pipe[addr, data, opcodes: TYPE+]: THEORY

  BEGIN
 
   IMPORTING time, signal

   t: VAR time   

   %% Input wires: decoded instruction fields
     opcode: signal[opcodes]

     src1: signal[addr]
     src2: signal[addr]

     dstn: signal[addr]

   %% Controller generated pipeline abort signal to handle control hazards
     stall: signal[bool]

   %% Register file, the only externally visible part of the machine
     regfile: signal[[addr -> data]]
   
   %% Internal registers %%
   
    % The Pipeline registers
      dstnd, dstndd: signal[addr]
      stalld, stalldd: signal[bool]
      opcoded, opcodedd: signal[opcodes]

    % Write back register
      wbreg: signal[data]

    % ALU input registers
      opreg1, opreg2: signal[data]

    % ALU 
      aluop: [opcodes, data, data -> data]
      aluout: signal[data]

  
    %% Specification of constraints on the signals
  
      dstnd_ax: AXIOM dstnd(t+1) = dstn(t)
      dstndd_ax: AXIOM dstndd(t+1)= dstnd(t)

      stalld_ax: AXIOM stalld(t+1) = stall(t)
      stalldd_ax: AXIOM stalldd(t+1) = stalld(t)

      opcoded_ax: AXIOM opcoded(t+1) = opcode(t)
   
      wbreg_ax: AXIOM wbreg(t+1) = aluout(t)

      regfile_ax: AXIOM regfile(t+1) =
                          IF stalldd(t) THEN regfile(t)
                          ELSE regfile(t)
                                 WITH [(dstndd(t)) := wbreg(t)] ENDIF
      opreg1_ax: AXIOM opreg1(t+1) =
                    IF src1(t) = dstnd(t) & NOT stalld(t)
                       THEN aluout(t)
                    ELSIF src1(t) = dstndd(t) & NOT stalldd(t)
                          THEN wbreg(t)
                    ELSE regfile(t)(src1(t)) ENDIF

      opreg2_ax: AXIOM opreg2(t+1) =
                   IF src2(t) = dstnd(t) & NOT stalld(t)
                      THEN aluout(t)
                   ELSIF src2(t) = dstndd(t) & NOT stalldd(t)
                         THEN wbreg(t)
                   ELSE regfile(t)(src2(t)) ENDIF

      ALU_ax: AXIOM aluout(t) = aluop(opcoded(t), opreg1(t), opreg2(t))

   correctness: THEOREM (FORALL t:
    NOT(stall(t)) IMPLIES
        regfile(t+3)(dstn(t)) =
          aluop(opcode(t), regfile(t+2)(src1(t)), regfile(t+2)(src2(t))) )

  END new_pipe

$$$new_pipe.prf
(|new_pipe|
 (|correctness| "" (SKOSIMP)
  (("" (AUTO-REWRITE-THEORY-ALWAYS* ("new_pipe"))
    (("" (APPLY (REPEAT (ASSERT)))
      (("" (APPLY (THEN* (REPEAT (LIFT-IF :UPDATES? NIL)) (ASSERT)))
        NIL))))))))
$$$signal.pvs
signal[val: TYPE]: THEORY

  BEGIN
   IMPORTING time
 
   signal: TYPE = [time -> val]

  END signal

$$$time.pvs
time: THEORY

  BEGIN

   time: TYPE = nat

  END time
