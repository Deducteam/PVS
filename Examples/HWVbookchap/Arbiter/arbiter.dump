<xmp>
%Patch files loaded: patch2 version 2.414
%                    patch2-test version 1.698

$$$pvs-strategies
(defstep use-lemma (lemma &optional subst (if-match best))
  (then (use lemma :subst subst :if-match if-match)
	(if *new-fmla-nums*
	    (let ((fnum (car *new-fmla-nums*)))
	      (spread (split fnum)
		      ((then (let ((fnums *new-fmla-nums*))
			       (flatten fnums))
			     (let ((new-fnums *new-fmla-nums*))
			       (then (replace* new-fnums)
				     (delete new-fnums)))))))
	    (skip)))
  "Introduce LEMMA instance, then does BETA, INST?, and SPLIT on this,
and then on the main branch a REPLACE* followed by a deletion of any
remnants of the lemma."
  "Using and discarding")

(defun cleanup-fnums (fnums)
  (cond ((consp fnums)(loop for fnum in fnums
			    collect (if (stringp fnum)
					(intern fnum)
					fnum)))
	((stringp fnums) (list (intern fnums)))
	((memq fnums '(* + -)) fnums)
	(t (list fnums))))

(defun gather-fnums (sforms yesnums nonums
		       &optional (pred #'(lambda (x) T))
		       (pos 1) (neg -1))
  (let ((yesnums (cleanup-fnums yesnums))
	(nonums (cleanup-fnums nonums)))
    (gather-fnums* sforms yesnums nonums pred pos neg)))

(defun gather-fnums* (seq yesnums nonums
		       pred pos neg)
   (cond ((null seq) nil)
	 ((not-expr? (formula (car seq)))
	  (if (and (in-sformnums? (car seq) pos neg yesnums)
		   (not (in-sformnums? (car seq) pos neg nonums))
		   (funcall pred (car seq)))
	      (cons neg
		    (gather-fnums* (cdr seq) yesnums nonums pred
				pos (1- neg)))
	      (gather-fnums* (cdr seq) yesnums nonums pred pos (1- neg)))) 
	 (t (if (and (in-sformnums? (car seq) pos neg yesnums)
		     (not (in-sformnums? (car seq) pos neg nonums))
		     (funcall pred (car seq)))
	      (cons pos
		    (gather-fnums* (cdr seq) yesnums nonums
				pred (1+ pos) neg))
	      (gather-fnums* (cdr seq) yesnums nonums pred
			  (1+ pos)  neg)))))

(defstep auto-rewrite-antecedents ()
   (let ((fnums (gather-fnums (s-forms (current-goal *ps*))
                              '- nil)))
      (auto-rewrite :names fnums))
    "Help string with examples"
    "Commentary string")


$$$arbiter.pvs
arbiter: THEORY

BEGIN

  % -- Preliminaries

   i, j: VAR below[4]
  

  % -- State

   state: TYPE = [below[4] -> [# request, persistent, token: bool #]]

   s, s0, s1: VAR state

   request(i)(s)   : bool = request(s(i))
   persistent(i)(s): bool = persistent(s(i))
   token(i)(s)     : bool = token(s(i))

   IMPORTING MU@connectives[state]

  % -- Definitions

   override(k: upto[4]): RECURSIVE pred[state] =
     IF k = 4 THEN FALSE
     ELSE override(k + 1) OR (token(k) AND persistent(k)) ENDIF
   MEASURE (LAMBDA (k: upto[4]): 4 - k)

   grant(i): RECURSIVE pred[state] =
     IF i = 0 THEN NOT override(0)
     ELSE grant(i - 1) AND NOT request(i - 1) ENDIF
   MEASURE i

   ack(i): pred[state] = 
     request(i) AND ((persistent(i) AND token(i)) OR grant(i))
   
  % -- Init

   init: pred[state] =   
     NOT persistent(0) AND NOT persistent(1) AND
     NOT persistent(2) AND NOT persistent(3) AND
     token(0) AND NOT token(1) AND NOT token(2) AND NOT token(3)

  % -- Next state

    next(s0, s1): bool =
            token(0)(s1) = token(3)(s0)
     &      token(1)(s1) = token(0)(s0)
     &      token(2)(s1) = token(1)(s0)
     &      token(3)(s1) = token(2)(s0)
     & persistent(0)(s1) = (request(0) AND (persistent(0) OR token(0)))(s0)
     & persistent(1)(s1) = (request(1) AND (persistent(1) OR token(1)))(s0)
     & persistent(2)(s1) = (request(2) AND (persistent(2) OR token(2)))(s0)
     & persistent(3)(s1) = (request(3) AND (persistent(3) OR token(3)))(s0)
      
  % -- Specs

   IMPORTING MU@ctlops[state]

   % No two acknowledge outputs are asserted simultaneously

   th1: THEOREM 
     init(s) IMPLIES
       i /= j IMPLIES AG(next, NOT(ack(i) AND ack(j)))(s)

   % Every persistent request is eventually acknowledged

   th2: THEOREM
     init(s) IMPLIES
       AG(next, AF(next, request(i) IMPLIES ack(i)))(s)

   % Acknowledge is not asserted without request

   th3: THEOREM
     init(s) IMPLIES
       AG(next, ack(i) IMPLIES request(i))(s)  
    
END arbiter

$$$arbiter.prf
(|arbiter| (|override_TCC1| "" (SUBTYPE-TCC) NIL) (|override_TCC2| "" (SUBTYPE-TCC) NIL) (|override_TCC3| "" (TERMINATION-TCC) NIL) (|override_TCC4| "" (SUBTYPE-TCC) NIL) (|grant_TCC1| "" (SUBTYPE-TCC) NIL) (|grant_TCC2| "" (SUBTYPE-TCC) NIL) (|grant_TCC3| "" (TERMINATION-TCC) NIL) (|init_TCC1| "" (SUBTYPE-TCC) NIL) (|init_TCC2| "" (SUBTYPE-TCC) NIL) (|init_TCC3| "" (SUBTYPE-TCC) NIL) (|init_TCC4| "" (SUBTYPE-TCC) NIL) (|th1| "" (APPLY (THEN (SKOSIMP*) (CASE* "i!1 = 0" "i!1 = 1" "i!1 = 2" "i!1 = 3" "j!1 = 0" "j!1 = 1" "j!1 = 2" "j!1 = 3") (ASSERT) (REPLACE*) (MODEL-CHECK))) NIL) (|th2| "" (APPLY (THEN (SKOSIMP*) (CASE* "i!1 = 0" "i!1 = 1" "i!1 = 2" "i!1 = 3") (ASSERT) (REPLACE*) (MODEL-CHECK))) NIL) (|th3| "" (APPLY (THEN (SKOSIMP*) (CASE* "i!1 = 0" "i!1 = 1" "i!1 = 2" "i!1 = 3") (ASSERT) (REPLACE*) (MODEL-CHECK))) NIL))
