(ring_buffer
 (create_TCC1 0
  (create_TCC1-1 nil 3529775796 ("" (subtype-tcc) nil nil) nil nil))
 (create_TCC2 0
  (create_TCC2-1 nil 3529775796 ("" (subtype-tcc) nil nil)
   ((empty? const-decl "bool" ring_buffer nil)) nil))
 (clear_TCC1 0
  (clear_TCC1-1 nil 3529775796 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (push_TCC1 0
  (push_TCC1-1 nil 3529775796 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil ring_buffer nil)
    (ring_buffer type-eq-decl nil ring_buffer nil)
    (nonfull? const-decl "bool" ring_buffer nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (push_TCC2 0
  (push_TCC2-1 nil 3529775796 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil ring_buffer nil)
    (ring_buffer type-eq-decl nil ring_buffer nil)
    (nonfull? const-decl "bool" ring_buffer nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonempty? const-decl "bool" ring_buffer nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (pop_TCC1 0
  (pop_TCC1-1 nil 3529775796 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil ring_buffer nil)
    (ring_buffer type-eq-decl nil ring_buffer nil)
    (nonempty? const-decl "bool" ring_buffer nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (pop_TCC2 0
  (pop_TCC2-1 nil 3529775796 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil ring_buffer nil)
    (ring_buffer type-eq-decl nil ring_buffer nil)
    (nonempty? const-decl "bool" ring_buffer nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (nonfull? const-decl "bool" ring_buffer nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (contents_create 0
  (contents_create-1 nil 3529782297 ("" (grind-with-ext) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil ring_buffer nil)
    (d const-decl "T" ring_buffer nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (TRUE const-decl "bool" booleans nil)
    (create const-decl "(empty?)" ring_buffer nil)
    (contents const-decl "finseq[T]" ring_buffer nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   shostak))
 (contents_clear 0
  (contents_clear-1 nil 3529782306 ("" (grind-with-ext) nil nil)
   ((T formal-nonempty-type-decl nil ring_buffer nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (ring_buffer type-eq-decl nil ring_buffer nil)
    (b!1 skolem-const-decl "ring_buffer" ring_buffer nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (contents const-decl "finseq[T]" ring_buffer nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (clear const-decl "ring_buffer" ring_buffer nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak))
 (contents_head_TCC1 0
  (contents_head_TCC1-1 nil 3529782286 ("" (subtype-tcc) nil nil)
   ((nonempty? const-decl "bool" ring_buffer nil)
    (ring_buffer type-eq-decl nil ring_buffer nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonempty? const-decl "bool" finseq_ops nil)
    (T formal-nonempty-type-decl nil ring_buffer nil)
    (contents const-decl "finseq[T]" ring_buffer nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (contents_head 0
  (contents_head-1 nil 3529782311
   ("" (grind :exclude "mod") (("" (rewrite "mod_lt_nat") nil nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod_lt_nat formula-decl nil mod nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nil application-judgement "below(m)" mod nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (ring_buffer type-eq-decl nil ring_buffer nil)
    (nonempty? const-decl "bool" ring_buffer nil)
    (first const-decl "T" finseq_ops nil)
    (T formal-nonempty-type-decl nil ring_buffer nil)
    (contents const-decl "finseq[T]" ring_buffer nil)
    (head const-decl "T" ring_buffer nil))
   shostak))
 (contents_push 0
  (contents_push-1 nil 3529782436
   ("" (skosimp* :preds? t)
    (("" (expand "push")
      (("" (expand "add")
        (("" (apply-extensionality :hide? t)
          (("1" (grind) nil nil)
           ("2" (apply-extensionality :hide? t)
            (("1" (expand "contents")
              (("1" (ground)
                (("1" (lift-if)
                  (("1" (ground)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (use "mod_inj_plus")
                          (("1" (ground)
                            (("1" (grind :exclude "mod")
                              (("1"
                                (typepred "x!2")
                                (("1"
                                  (expand "contents")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil))
            nil)
           ("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((push const-decl "(nonempty?)" ring_buffer nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (contents const-decl "finseq[T]" ring_buffer nil)
    (nfb!1 skolem-const-decl "(nonfull?)" ring_buffer nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "below(m)" mod nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mod_inj_plus formula-decl nil mod nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (x!1 skolem-const-decl "T" ring_buffer nil)
    (add const-decl "finseq[T]" more_finseq nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil ring_buffer nil)
    (ring_buffer type-eq-decl nil ring_buffer nil)
    (nonfull? const-decl "bool" ring_buffer nil))
   shostak))
 (contents_pop 0
  (contents_pop-1 nil 3529783020
   ("" (grind-with-ext :exclude "mod")
    (("1" (rewrite "mod_lt_nat") nil nil)
     ("2" (apply-extensionality 2 :hide? t)
      (("2" (use "mod_of_mod" :subst ("k" "1 + nb!1`first" "i" "x!1"))
        (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mod_of_mod formula-decl nil mod nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod_lt_nat formula-decl nil mod nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (ring_buffer type-eq-decl nil ring_buffer nil)
    (nonempty? const-decl "bool" ring_buffer nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "below(m)" mod nil)
    (first const-decl "T" finseq_ops nil)
    (rest const-decl "finseq[T]" finseq_ops nil)
    (T formal-nonempty-type-decl nil ring_buffer nil)
    (contents const-decl "finseq[T]" ring_buffer nil)
    (pop const-decl "[T, (nonfull?)]" ring_buffer nil)
    (head const-decl "T" ring_buffer nil))
   shostak))
 (test_TCC1 0
  (test_TCC1-1 nil 3529775796 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil ring_buffer nil)
    (ring_buffer type-eq-decl nil ring_buffer nil)
    (empty? const-decl "bool" ring_buffer nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (create const-decl "(empty?)" ring_buffer nil)
    (nonfull? const-decl "bool" ring_buffer nil))
   nil))
 (test_TCC2 0
  (test_TCC2-1 nil 3529775796
   ("" (skeep :preds? t)
    (("" (skeep :preds? t)
      (("" (assert)
        (("" (expand "nonfull?")
          (("" (expand "push")
            (("" (decompose-equality -4)
              (("1" (expand "create")
                (("1" (assert) (("1" (decompose-equality -7) nil nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "create" +) (("2" (assert) nil nil))
                  nil))
                nil)
               ("3" (hide 2) (("3" (grind) nil nil)) nil)
               ("4" (grind) nil nil) ("5" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonfull? const-decl "bool" ring_buffer nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "below(m)" mod nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil ring_buffer nil)
    (ring_buffer type-eq-decl nil ring_buffer nil)
    (nonempty? const-decl "bool" ring_buffer nil)
    (empty? const-decl "bool" ring_buffer nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (d const-decl "T" ring_buffer nil)
    (create const-decl "(empty?)" ring_buffer nil)
    (push const-decl "(nonempty?)" ring_buffer nil))
   nil))
 (test_TCC3 0
  (test_TCC3-1 nil 3529775796
   ("" (skeep :preds? t)
    (("" (skeep :preds? t)
      (("" (skeep :preds? t)
        (("" (skeep :preds? t)
          (("" (skeep :preds? t)
            (("" (skeep :preds? t) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nonfull? const-decl "bool" ring_buffer nil)
    (/= const-decl "boolean" notequal nil)
    (nonempty? const-decl "bool" ring_buffer nil)
    (empty? const-decl "bool" ring_buffer nil)
    (create const-decl "(empty?)" ring_buffer nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (test 0
       (test-1 nil 3529776391 ("" (grind) nil nil)
        ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
          rationals nil)
         (posrat_div_posrat_is_posrat application-judgement "posrat"
          rationals nil)
         (pop const-decl "[T, (nonfull?)]" ring_buffer nil)
         (head const-decl "T" ring_buffer nil)
         (push const-decl "(nonempty?)" ring_buffer nil)
         (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
         (create const-decl "(empty?)" ring_buffer nil)
         (minus_nzint_is_nzint application-judgement "nzint" integers
          nil)
         (minus_even_is_even application-judgement "even_int" integers
          nil)
         (nonneg_floor_is_nat application-judgement "nat" floor_ceil
          nil)
         (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
          integers nil)
         (even_times_int_is_even application-judgement "even_int"
          integers nil)
         (mult_divides1 application-judgement "(divides(n))" divides
          nil)
         (mult_divides2 application-judgement "(divides(m))" divides
          nil)
         (even_minus_even_is_even application-judgement "even_int"
          integers nil)
         (odd_minus_even_is_odd application-judgement "odd_int"
          integers nil))
        shostak)))

