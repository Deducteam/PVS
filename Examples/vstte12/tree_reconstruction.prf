(tree_reconstruction
 (list_of_depths_rec_TCC1 0
  (list_of_depths_rec_TCC1-1 nil 3529785310
   ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(well_founded?[tree])" tree_reconstruction nil))
   nil))
 (list_of_depths_rec_TCC2 0
  (list_of_depths_rec_TCC2-1 nil 3529785310
   ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(well_founded?[tree])" tree_reconstruction nil))
   nil))
 (build_rec_TCC1 0
  (build_rec_TCC1-1 nil 3529785310 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (build_rec_TCC2 0
  (build_rec_TCC2-1 nil 3529785310 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (build_rec_TCC3 0
  (build_rec_TCC3-1 nil 3529785310 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (build_rec_TCC4 0
  (build_rec_TCC4-1 nil 3529786068 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (< def-decl "bool" ordinals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (build_rec_TCC5 0
  (build_rec_TCC5-1 nil 3529786068 ("" (subtype-tcc) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (build_rec_TCC6 0
  (build_rec_TCC6-1 nil 3529786068 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (< def-decl "bool" ordinals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (list_of_depths_build_rec_TCC1 0
  (list_of_depths_build_rec_TCC1-1 nil 3529785310
   ("" (subtype-tcc) nil nil) nil nil))
 (list_of_depths_build_rec_TCC2 0
  (list_of_depths_build_rec_TCC2-1 nil 3529786484 ("" (grind) nil nil)
   nil shostak))
 (list_of_depths_build_rec_TCC3 0
  (list_of_depths_build_rec_TCC3-1 nil 3529786540 ("" (grind) nil nil)
   nil shostak))
 (list_of_depths_build_rec_TCC4 0
  (list_of_depths_build_rec_TCC4-1 nil 3529786604 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list_of_depths_rec def-decl "list[nat]" tree_reconstruction nil)
    (append def-decl "list[T]" list_props nil))
   shostak))
 (list_of_depths_build_rec_TCC5 0
  (list_of_depths_build_rec_TCC5-1 nil 3529786671
   ("" (skosimp* :preds? t)
    (("" (replace -10 :hide? t)
      (("" (hide -2 -5 -7)
        (("" (grind)
          (("" (name-replace "v1" "v!1(1 + d!1, cons(i!1, N!1))")
            (("" (name-replace "v2" "v!1(1 + d!1, down(v1)`1)")
              (("" (rewrite "append_assoc") (("" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append_assoc formula-decl nil list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (tree type-decl nil tree_reconstruction nil)
    (lift type-decl nil lift_adt nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append def-decl "list[T]" list_props nil)
    (list_of_depths_rec def-decl "list[nat]" tree_reconstruction nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (list_of_depths_build_rec_TCC6 0
  (list_of_depths_build_rec_TCC6-1 nil 3529787034 ("" (grind) nil nil)
   nil shostak))
 (list_of_depths_build_rec_TCC7 0
  (list_of_depths_build_rec_TCC7-1 nil 3529787048 ("" (grind) nil nil)
   nil shostak))
 (list_of_depths_build_rec 0
  (list_of_depths_build_rec-1 nil 3529786080 ("" (postpone) nil nil)
   nil shostak))
 (list_of_depths_build_TCC1 0
  (list_of_depths_build_TCC1-1 nil 3529788075
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list_of_depths_build_rec rec-application-judgement
     "{xx: lift[[list[nat], tree]] |
         bottom?(xx) OR
          append(list_of_depths_rec(down(xx)`2, d), down(xx)`1) = M}"
     tree_reconstruction nil))
   nil))
 (list_of_depths_build 0
  (list_of_depths_build-1 nil 3529788075
   ("" (skosimp*)
    (("" (expand "build")
      (("" (typepred "build_rec(0, M!1)")
        (("" (expand "list_of_depths")
          (("" (grind :exclude ("build_rec" "list_of_depths_rec"))
            (("" (case-replace "down(build_rec(0, M!1))`1 = null")
              (("1" (use "append_null[nat]")
                (("1" (assert)
                  (("1" (replace -1) (("1" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((build const-decl "lift[tree]" tree_reconstruction nil)
    (list_of_depths const-decl "list[nat]" tree_reconstruction nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (list_of_depths_build_rec rec-application-judgement
     "{xx: lift[[list[nat], tree]] |
         bottom?(xx) OR
          append(list_of_depths_rec(down(xx)`2, d), down(xx)`1) = M}"
     tree_reconstruction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (tree type-decl nil tree_reconstruction nil)
    (lift type-decl nil lift_adt nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (build_rec def-decl "lift[[{N | length(N) < length(M)}, tree]]"
     tree_reconstruction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append def-decl "list[T]" list_props nil)
    (list_of_depths_rec def-decl "list[nat]" tree_reconstruction nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil))
   shostak))
 (list_of_depths_rec_list 0
  (list_of_depths_rec_list-1 nil 3529788993
   ("" (induct "X")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skosimp*)
      (("3" (expand "list_of_depths_rec" +) (("3" (grind) nil nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (tree_induction formula-decl nil tree_reconstruction nil)
    (list_of_depths_rec def-decl "list[nat]" tree_reconstruction nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tree type-decl nil tree_reconstruction nil))
   shostak))
 (build_rec_list_of_depths_rec 0
  (build_rec_list_of_depths_rec-1 nil 3529788506
   ("" (induct "X")
    (("1" (grind :exclude ("build_rec" "list_of_depths_rec")) nil nil)
     ("2" (grind) nil nil)
     ("3" (skosimp*)
      (("3" (expand "list_of_depths_rec" +)
        (("3" (use "list_of_depths_rec_list")
          (("3" (ground)
            (("1" (flatten)
              (("1" (rewrite "append" +)
                (("1" (lift-if)
                  (("1" (ground)
                    (("1" (expand "build_rec" +)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (lift-if)
                            (("3" (ground)
                              (("1"
                                (inst? -4)
                                (("1"
                                  (inst
                                   -
                                   "append(list_of_depths_rec(node2_var!1, 1 + d!1), N!1)")
                                  (("1"
                                    (name-replace
                                     "lodr_node1"
                                     "list_of_depths_rec
                                    (node1_var!1, 1 + d!1)")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case-replace
                                         "append(cons(car(lodr_node1),
                        append(cdr(lodr_node1),
                               list_of_depths_rec(node2_var!1, 1 + d!1))),
                   N!1) = append(lodr_node1,
                           append(list_of_depths_rec(node2_var!1, 1 + d!1),
                                  N!1))")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (replace -5 :hide? t)
                                            (("1"
                                              (inst?)
                                              (("1" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 7))
                                          (("2"
                                            (grind
                                             :exclude
                                             "list_of_depths_rec")
                                            (("2"
                                              (rewrite "append_assoc")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst? -3)
                                (("2"
                                  (inst
                                   -
                                   "append(list_of_depths_rec(node2_var!1, 1 + d!1), N!1)")
                                  (("2"
                                    (name-replace
                                     "lodr_node1"
                                     "list_of_depths_rec
                                              (node1_var!1, 1 + d!1)")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (case-replace
                                         "append(cons(car(lodr_node1),
                                  append(cdr(lodr_node1),
                                         list_of_depths_rec(node2_var!1, 1 + d!1))),
                             N!1) = append(lodr_node1,
                                     append(list_of_depths_rec(node2_var!1, 1 + d!1),
                                            N!1))")
                                        (("2"
                                          (hide-all-but (1 7))
                                          (("2"
                                            (grind)
                                            (("2"
                                              (rewrite "append_assoc")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (rewrite "append" +)
                  (("2" (expand "append" 1 1)
                    (("2" (expand "build_rec" +)
                      (("2" (lift-if)
                        (("2" (ground)
                          (("1"
                            (inst -
                             "append(list_of_depths_rec(node2_var!1, 1 + d!1), N!1)"
                             "d!1 + 1")
                            (("1" (ground)
                              (("1"
                                (name-replace
                                 "lodr_node1"
                                 "list_of_depths_rec
                                    (node1_var!1, 1 + d!1)")
                                (("1"
                                  (case-replace
                                   "cons(car(lodr_node1),
                        append(append(cdr(lodr_node1),
                               list_of_depths_rec(node2_var!1, 1 + d!1)),
                   N!1)) = append(lodr_node1,
                           append(list_of_depths_rec(node2_var!1, 1 + d!1),
                                  N!1))"
                                   :hide?
                                   t)
                                  (("1"
                                    (replace -6 :hide? t)
                                    (("1"
                                      (inst?)
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-3 1))
                                    (("2"
                                      (grind)
                                      (("2"
                                        (rewrite "append_assoc")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (inst -
                             "append(list_of_depths_rec(node2_var!1, 1 + d!1), N!1)"
                             "d!1 + 1")
                            (("2" (ground)
                              (("2"
                                (name-replace
                                 "lodr_node1"
                                 "list_of_depths_rec
                                    (node1_var!1, 1 + d!1)")
                                (("2"
                                  (case-replace
                                   "cons(car(lodr_node1),
                        append(append(cdr(lodr_node1),
                               list_of_depths_rec(node2_var!1, 1 + d!1)),
                   N!1)) = append(lodr_node1,
                           append(list_of_depths_rec(node2_var!1, 1 + d!1),
                                  N!1))"
                                   :hide?
                                   t)
                                  (("1"
                                    (replace -5 :hide? t)
                                    (("1"
                                      (inst?)
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-2 1))
                                    (("2"
                                      (grind)
                                      (("2"
                                        (rewrite "append_assoc")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3"
                            (inst -
                             "append(list_of_depths_rec(node2_var!1, 1 + d!1), N!1)"
                             "d!1 + 1")
                            (("3" (ground)
                              (("3"
                                (name-replace
                                 "lodr_node1"
                                 "list_of_depths_rec
                                    (node1_var!1, 1 + d!1)")
                                (("3"
                                  (case-replace
                                   "cons(car(lodr_node1),
                        append(append(cdr(lodr_node1),
                               list_of_depths_rec(node2_var!1, 1 + d!1)),
                   N!1)) = append(lodr_node1,
                           append(list_of_depths_rec(node2_var!1, 1 + d!1),
                                  N!1))"
                                   :hide?
                                   t)
                                  (("3"
                                    (hide-all-but (-1 1))
                                    (("3"
                                      (grind)
                                      (("3"
                                        (rewrite "append_assoc")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_of_depths_rec_list formula-decl nil tree_reconstruction nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append_assoc formula-decl nil list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_of_depths_build_rec rec-application-judgement
     "{xx: lift[[list[nat], tree]] |
         bottom?(xx) OR
          append(list_of_depths_rec(down(xx)`2, d), down(xx)`1) = M}"
     tree_reconstruction nil)
    (tree_induction formula-decl nil tree_reconstruction nil)
    (list_of_depths_rec def-decl "list[nat]" tree_reconstruction nil)
    (build_rec def-decl "lift[[{N | length(N) < length(M)}, tree]]"
     tree_reconstruction nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (lift type-decl nil lift_adt nil)
    (append def-decl "list[T]" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tree type-decl nil tree_reconstruction nil))
   shostak))
 (build_list_of_depths 0
  (build_list_of_depths-1 nil 3529792479
   ("" (skosimp*)
    (("" (expand "build")
      (("" (lift-if)
        (("" (expand "list_of_depths")
          ((""
            (use "build_rec_list_of_depths_rec" :subst
                 ("N" "null[nat]"))
            (("" (ground)
              (("1" (flatten) (("1" (rewrite "append_null") nil nil))
                nil)
               ("2" (flatten)
                (("2" (rewrite "append_null")
                  (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((build const-decl "lift[tree]" tree_reconstruction nil)
    (list_of_depths const-decl "list[nat]" tree_reconstruction nil)
    (list_of_depths_build_rec rec-application-judgement
     "{xx: lift[[list[nat], tree]] |
         bottom?(xx) OR
          append(list_of_depths_rec(down(xx)`2, d), down(xx)`1) = M}"
     tree_reconstruction nil)
    (list_of_depths_rec def-decl "list[nat]" tree_reconstruction nil)
    (append_null formula-decl nil list_props nil)
    (tree type-decl nil tree_reconstruction nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (build_rec_list_of_depths_rec formula-decl nil tree_reconstruction
     nil))
   shostak))
 (build_1332_TCC1 0
  (build_1332_TCC1-1 nil 3529804143 ("" (grind) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (build_1332_TCC2 0
  (build_1332_TCC2-1 nil 3529804143 ("" (grind) nil nil)
   ((list_of_depths_build_rec rec-application-judgement
     "{xx: lift[[list[nat], tree]] |
         bottom?(xx) OR
          append(list_of_depths_rec(down(xx)`2, d), down(xx)`1) = M}"
     tree_reconstruction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (build const-decl "lift[tree]" tree_reconstruction nil)
    (build_rec def-decl "lift[[{N | length(N) < length(M)}, tree]]"
     tree_reconstruction nil))
   nil))
 (build_1332 0
  (build_1332-1 nil 3529804152 ("" (grind) nil nil)
   ((list_of_depths_build_rec rec-application-judgement
     "{xx: lift[[list[nat], tree]] |
         bottom?(xx) OR
          append(list_of_depths_rec(down(xx)`2, d), down(xx)`1) = M}"
     tree_reconstruction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (build const-decl "lift[tree]" tree_reconstruction nil)
    (build_rec def-decl "lift[[{N | length(N) < length(M)}, tree]]"
     tree_reconstruction nil))
   shostak))
 (build_1322_TCC1 0
  (build_1322_TCC1-1 nil 3529804186 ("" (grind) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (build_1322 0
  (build_1322-1 nil 3529804160 ("" (grind) nil nil)
   ((build_rec def-decl "lift[[{N | length(N) < length(M)}, tree]]"
     tree_reconstruction nil)
    (build const-decl "lift[tree]" tree_reconstruction nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_of_depths_build_rec rec-application-judgement
     "{xx: lift[[list[nat], tree]] |
         bottom?(xx) OR
          append(list_of_depths_rec(down(xx)`2, d), down(xx)`1) = M}"
     tree_reconstruction nil))
   shostak)))

