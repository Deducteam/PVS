(combinators
 (value?_TCC1 0
  (value?_TCC1-1 nil 3529763653 ("" (grind) nil nil)
   ((<< adt-def-decl "(well_founded?[term])" combinators nil)) nil))
 (value?_TCC2 0
  (value?_TCC2-1 nil 3529763653 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(well_founded?[term])" combinators nil)) nil))
 (reduce_TCC1 0
  (reduce_TCC1-1 nil 3529765670 ("" (grind) nil nil)
   ((K_redex? const-decl "bool" combinators nil)) nil))
 (reduce_TCC2 0
  (reduce_TCC2-1 nil 3529765670 ("" (subtype-tcc) nil nil)
   ((K_redex? const-decl "bool" combinators nil)) nil))
 (reduce_TCC3 0
  (reduce_TCC3-1 nil 3529765670 ("" (grind) nil nil)
   ((S_redex? const-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil))
   nil))
 (reduce_TCC4 0
  (reduce_TCC4-1 nil 3529765670 ("" (grind) nil nil)
   ((S_redex? const-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil))
   nil))
 (reduce_TCC5 0
  (reduce_TCC5-1 nil 3529765670 ("" (subtype-tcc) nil nil)
   ((S_redex? const-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil))
   nil))
 (reduce_TCC6 0
  (reduce_TCC6-1 nil 3529765670 ("" (grind) nil nil)
   ((<< adt-def-decl "(well_founded?[term])" combinators nil)
    (S_redex? const-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil))
   nil))
 (reduce_TCC7 0
  (reduce_TCC7-1 nil 3529765670 ("" (grind) nil nil)
   ((<< adt-def-decl "(well_founded?[term])" combinators nil)
    (S_redex? const-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil))
   nil))
 (size_TCC1 0
  (size_TCC1-1 nil 3529769858 ("" (induct-and-simplify "R") nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (term type-decl nil combinators nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (reduce_nat adt-def-decl "[term -> nat]" combinators nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (term_induction formula-decl nil combinators nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (size_apply 0
  (size_apply-1 nil 3529770046 ("" (grind) nil nil)
   ((restrict const-decl "R" restrict nil)
    (reduce_nat adt-def-decl "[term -> nat]" combinators nil)
    (size const-decl "posnat" combinators nil))
   shostak))
 (reduce_value 0
  (reduce_value-1 nil 3529767653
   ("" (induct "R")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil)
     ("5" (skosimp*)
      (("5" (expand "reduce" +)
        (("5" (lift-if)
          (("5" (split +)
            (("1" (grind) nil nil)
             ("2" (flatten)
              (("2" (split +)
                (("1" (grind)
                  (("1" (decompose-equality -6)
                    (("1"
                      (case "size(apply(arg(apply1_var!1), apply2_var!1)) = size(apply2_var!1)")
                      (("1" (rewrite "size_apply")
                        (("1" (assert) nil nil)) nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind)
                  (("1" (decompose-equality -2) nil nil)
                   ("2" (decompose-equality -4) nil nil)
                   ("3" (decompose-equality -3) nil nil)
                   ("4" (decompose-equality -3) nil nil)
                   ("5" (decompose-equality -2) nil nil)
                   ("6" (decompose-equality -3) nil nil)
                   ("7" (decompose-equality -1) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((size const-decl "posnat" combinators nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size_apply formula-decl nil combinators nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (apply? adt-recognizer-decl "[term -> boolean]" combinators nil)
    (fun adt-accessor-decl "[(apply?) -> term]" combinators nil)
    (apply adt-constructor-decl "[[term, term] -> (apply?)]"
           combinators nil)
    (arg adt-accessor-decl "[(apply?) -> term]" combinators nil)
    (S_redex? const-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil)
    (term_induction formula-decl nil combinators nil)
    (reduce def-decl "term" combinators nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (value? def-decl "bool" combinators nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (term type-decl nil combinators nil))
   shostak))
 (csubst_TCC1 0
  (csubst_TCC1-1 nil 3529866149 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(well_founded?[context])" combinators nil)) nil))
 (csubst_TCC2 0
  (csubst_TCC2-1 nil 3529866149 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil combinators nil)
    (value? def-decl "bool" combinators nil)
    (<< adt-def-decl "(well_founded?[context])" combinators nil))
   nil))
 (redex_reduce_TCC1 0
  (redex_reduce_TCC1-1 nil 3529866149 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil combinators nil)
    (redex? const-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil))
   nil))
 (redex_reduce_TCC2 0
  (redex_reduce_TCC2-1 nil 3529866149 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil combinators nil)
    (redex? const-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil))
   nil))
 (redex_reduce_TCC3 0
  (redex_reduce_TCC3-1 nil 3529866149 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil combinators nil)
    (redex? const-decl "bool" combinators nil)
    (S_redex? const-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil))
   nil))
 (redex_reduce_TCC4 0
  (redex_reduce_TCC4-1 nil 3529866149 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil combinators nil)
    (redex? const-decl "bool" combinators nil)
    (S_redex? const-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil))
   nil))
 (redex_reduce_TCC5 0
  (redex_reduce_TCC5-1 nil 3529866149 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil combinators nil)
    (redex? const-decl "bool" combinators nil)
    (S_redex? const-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil))
   nil))
 (reduce_context_TCC1 0
  (reduce_context_TCC1-1 nil 3529866369
   ("" (grind) (("" (inst + "hole") (("" (grind) nil nil)) nil)) nil)
   ((hole adt-constructor-decl "(hole?)" combinators nil)
    (hole? adt-recognizer-decl "[context -> boolean]" combinators nil)
    (context type-decl nil combinators nil)
    (csubst def-decl "term" combinators nil)
    (term type-decl nil combinators nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (value? def-decl "bool" combinators nil)
    (reduce_rel const-decl "bool" combinators nil)
    (redex_reduce const-decl "term" combinators nil)
    (redex? const-decl "bool" combinators nil)
    (S_redex? const-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil))
   shostak))
 (reduce_context_TCC2 0
  (reduce_context_TCC2-1 nil 3529866398
   ("" (grind) (("" (inst + "hole") (("" (grind) nil nil)) nil)) nil)
   ((hole adt-constructor-decl "(hole?)" combinators nil)
    (hole? adt-recognizer-decl "[context -> boolean]" combinators nil)
    (context type-decl nil combinators nil)
    (csubst def-decl "term" combinators nil)
    (term type-decl nil combinators nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (value? def-decl "bool" combinators nil)
    (reduce_rel const-decl "bool" combinators nil)
    (redex_reduce const-decl "term" combinators nil)
    (redex? const-decl "bool" combinators nil)
    (S_redex? const-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil))
   shostak))
 (reduce_context_TCC3 0
  (reduce_context_TCC3-1 nil 3529866415
   ("" (skosimp*)
    (("" (ground)
      (("1" (typepred "v!1(arg(R!1))") (("1" (grind-with-ext) nil nil))
        nil)
       ("2" (typepred "v!1(arg(R!1))")
        (("2" (case "value?(arg(R!1))")
          (("1" (hide -3 2) (("1" (grind) nil nil)) nil)
           ("2" (assert)
            (("2" (hide -1)
              (("2" (expand "reduce_rel")
                (("2" (skosimp*)
                  (("2" (inst + "r_apply(fun(R!1), C!1)" "X!1")
                    (("2" (hide 4 5)
                      (("2" (grind-with-ext :exclude ("redex_reduce"))
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term_apply_extensionality formula-decl nil combinators nil)
    (apply adt-constructor-decl "[[term, term] -> (apply?)]"
           combinators nil)
    (fun adt-accessor-decl "[(apply?) -> term]" combinators nil)
    (K_redex? const-decl "bool" combinators nil)
    (S_redex? const-decl "bool" combinators nil)
    (redex_reduce const-decl "term" combinators nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil combinators nil)
    (value? def-decl "bool" combinators nil)
    (apply? adt-recognizer-decl "[term -> boolean]" combinators nil)
    (arg adt-accessor-decl "[(apply?) -> term]" combinators nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (reduce_rel const-decl "bool" combinators nil)
    (csubst def-decl "term" combinators nil)
    (context type-decl nil combinators nil)
    (r_apply? adt-recognizer-decl "[context -> boolean]" combinators
     nil)
    (r_apply adt-constructor-decl "[[(value?), context] -> (r_apply?)]"
     combinators nil)
    (redex? const-decl "bool" combinators nil))
   shostak))
 (reduce_context_TCC4 0
  (reduce_context_TCC4-1 nil 3529867416
   ("" (skosimp* :preds? t)
    (("" (typepred "v!1(fun(R!1))")
      (("" (ground)
        (("1" (hide -2 3 4) (("1" (grind-with-ext) nil nil)) nil)
         ("2" (expand "reduce_rel")
          (("2" (skosimp*)
            (("2" (inst + "l_apply(C!1, arg(R!1))" "X!1")
              (("2" (grind-with-ext :exclude ("redex_reduce")) nil
                nil))
              nil))
            nil))
          nil)
         ("3" (hide-all-but (-1 2))
          (("3" (grind)
            (("3" (expand "value?" +)
              (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil))
            nil))
          nil)
         ("4" (expand "reduce_rel")
          (("4" (skosimp*)
            (("4" (inst + "l_apply(C!1, arg(R!1))" "X!1")
              (("4" (grind-with-ext :exclude ("redex_reduce")) nil
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reduce_rel const-decl "bool" combinators nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fun adt-accessor-decl "[(apply?) -> term]" combinators nil)
    (apply? adt-recognizer-decl "[term -> boolean]" combinators nil)
    (value? def-decl "bool" combinators nil)
    (term type-decl nil combinators nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (redex? const-decl "bool" combinators nil)
    (l_apply adt-constructor-decl "[[context, term] -> (l_apply?)]"
     combinators nil)
    (l_apply? adt-recognizer-decl "[context -> boolean]" combinators
     nil)
    (context type-decl nil combinators nil)
    (csubst def-decl "term" combinators nil)
    (redex_reduce const-decl "term" combinators nil)
    (K_redex? const-decl "bool" combinators nil)
    (S_redex? const-decl "bool" combinators nil)
    (arg adt-accessor-decl "[(apply?) -> term]" combinators nil)
    (apply adt-constructor-decl "[[term, term] -> (apply?)]"
           combinators nil)
    (term_apply_extensionality formula-decl nil combinators nil))
   shostak))
 (reduce_context_TCC5 0
  (reduce_context_TCC5-1 nil 3529867835 ("" (grind) nil nil)
   ((value? def-decl "bool" combinators nil)
    (S_redex? const-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil)
    (redex_reduce const-decl "term" combinators nil)
    (reduce_rel const-decl "bool" combinators nil))
   shostak))
 (reduce_context 0
  (reduce_context-1 nil 3529867873
   ("" (grind)
    (("1" (postpone) nil nil) ("2" (postpone) nil nil)
     ("3" (postpone) nil nil) ("4" (postpone) nil nil)
     ("5" (postpone) nil nil) ("6" (postpone) nil nil)
     ("7" (postpone) nil nil) ("8" (postpone) nil nil))
    nil)
   nil shostak))
 (iter_reduce_TCC1 0
  (iter_reduce_TCC1-1 nil 3529767652 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (reduce_context rec-application-judgement
     "{Q | IF value?(R) THEN R = Q ELSE reduce_rel(R, Q) ENDIF}"
     combinators nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil combinators nil)
    (value? def-decl "bool" combinators nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (reduce_rel const-decl "bool" combinators nil))
   nil))
 (iter_reduce_TCC2 0
  (iter_reduce_TCC2-1 nil 3529767652 ("" (termination-tcc) nil nil)
   ((K_redex? const-decl "bool" combinators nil)) nil))
 (iter_reduce_rtc_reduce_rel_TCC1 0
  (iter_reduce_rtc_reduce_rel_TCC1-1 nil 3529868167
   ("" (grind)
    (("" (expand "rtc_reduce_rel") (("" (propax) nil nil)) nil)) nil)
   ((rtc_reduce_rel inductive-decl "bool" combinators nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (iter_reduce_rtc_reduce_rel_TCC2 0
  (iter_reduce_rtc_reduce_rel_TCC2-1 nil 3529868185
   ("" (skosimp* :preds? t)
    (("" (expand "rtc_reduce_rel") (("" (propax) nil nil)) nil)) nil)
   ((rtc_reduce_rel inductive-decl "bool" combinators nil)
    (reduce_rel const-decl "bool" combinators nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (value? def-decl "bool" combinators nil)
    (term type-decl nil combinators nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (iter_reduce_rtc_reduce_rel_TCC3 0
  (iter_reduce_rtc_reduce_rel_TCC3-1 nil 3529869212
   ("" (skosimp* :preds? t)
    (("" (typepred "v!1(n!1 - 1)(Q!1)")
      (("1" (expand "rtc_reduce_rel" +)
        (("1" (flatten)
          (("1" (typepred "reduce(R!1)")
            (("1" (ground)
              (("1" (inst + "Q!1") (("1" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (rtc_reduce_rel inductive-decl "bool" combinators nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (reduce def-decl "term" combinators nil)
    (reduce_context rec-application-judgement
     "{Q | IF value?(R) THEN R = Q ELSE reduce_rel(R, Q) ENDIF}"
     combinators nil)
    (reduce_rel const-decl "bool" combinators nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (value? def-decl "bool" combinators nil)
    (term type-decl nil combinators nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (iter_reduce_rtc_reduce_rel 0
  (iter_reduce_rtc_reduce_rel-1 nil 3529873029
   ("" (recursive-judgement-tcc) nil nil) nil nil))
 (reduction_TCC1 0
  (reduction_TCC1-1 nil 3529770790 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil combinators nil)
    (reducible? const-decl "bool" combinators nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (iter_reduce_rtc_reduce_rel rec-application-judgement
     "{Q | rtc_reduce_rel(R, Q)}" combinators nil))
   nil))
 (reduction_TCC2 0
  (reduction_TCC2-1 nil 3529770790 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil combinators nil)
    (reducible? const-decl "bool" combinators nil)
    (iter_reduce_rtc_reduce_rel rec-application-judgement
     "{Q | rtc_reduce_rel(R, Q)}" combinators nil))
   nil))
 (reduction_rtc_reduce_rel 0
  (reduction_rtc_reduce_rel-1 nil 3529871394
   ("" (skosimp*)
    (("" (expand "reduction")
      ((""
        (typepred
         "iter_reduce(choose! n: value?(iter_reduce(n)(R!1)))(R!1)")
        (("1" (propax) nil nil)
         ("2" (typepred "R!1")
          (("2" (expand "reducible?")
            (("2" (hide 2) (("2" (lazy-grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((iter_reduce_rtc_reduce_rel rec-application-judgement
     "{Q | rtc_reduce_rel(R, Q)}" combinators nil)
    (reduction const-decl "(value?)" combinators nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil combinators nil)
    (rtc_reduce_rel inductive-decl "bool" combinators nil)
    (reducible? const-decl "bool" combinators nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (iter_reduce def-decl "term" combinators nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (value? def-decl "bool" combinators nil))
   nil))
 (S_free?_TCC1 0
  (S_free?_TCC1-1 nil 3529770790 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(well_founded?[term])" combinators nil)) nil))
 (S_free_size 0
  (S_free_size-1 nil 3529770791
   ("" (induct "R")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skosimp*)
      (("3" (expand "reduce" +)
        (("3" (lift-if) (("3" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (value? def-decl "bool" combinators nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (restrict const-decl "R" restrict nil)
    (reduce_nat adt-def-decl "[term -> nat]" combinators nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (reduce_context rec-application-judgement
     "{Q | IF value?(R) THEN R = Q ELSE reduce_rel(R, Q) ENDIF}"
     combinators nil)
    (S_redex? const-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil)
    (term_induction formula-decl nil combinators nil)
    (size const-decl "posnat" combinators nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (reduce def-decl "term" combinators nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (S_free? def-decl "bool" combinators nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (term type-decl nil combinators nil))
   shostak))
 (S_free_reduce 0
  (S_free_reduce-1 nil 3529771693
   ("" (induct-and-simplify "R")
    (("" (grind)
      (("" (expand "reduce" +)
        (("" (ground) (("1" (grind) nil nil) ("2" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((reduce_context rec-application-judgement
     "{Q | IF value?(R) THEN R = Q ELSE reduce_rel(R, Q) ENDIF}"
     combinators nil)
    (S_redex? const-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil)
    (term type-decl nil combinators nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (S_free? def-decl "bool" combinators nil)
    (reduce def-decl "term" combinators nil)
    (term_induction formula-decl nil combinators nil))
   shostak))
 (iter_reduce_reduce 0
  (iter_reduce_reduce-1 nil 3529771434
   ("" (induct-and-simplify "n") nil nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (term type-decl nil combinators nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (reduce def-decl "term" combinators nil)
    (iter_reduce def-decl "term" combinators nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (K_redex? const-decl "bool" combinators nil)
    (iter_reduce_rtc_reduce_rel rec-application-judgement
     "{Q | rtc_reduce_rel(R, Q)}" combinators nil)
    (reduce_context rec-application-judgement
     "{Q | IF value?(R) THEN R = Q ELSE reduce_rel(R, Q) ENDIF}"
     combinators nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (S_free_implies_reducible_step 0
  (S_free_implies_reducible_step-1 nil 3529771023
   ("" (induct "n")
    (("1" (skosimp) (("1" (assert) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "iter_reduce" +)
        (("2" (inst?)
          (("2" (ground)
            (("1" (use "reduce_value") (("1" (ground) nil nil)) nil)
             ("2" (use "reduce_value") (("2" (ground) nil nil)) nil)
             ("3" (use "S_free_size") (("3" (ground) nil nil)) nil)
             ("4" (use "S_free_reduce") (("4" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reduce def-decl "term" combinators nil)
    (S_free_reduce formula-decl nil combinators nil)
    (S_free_size formula-decl nil combinators nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_value formula-decl nil combinators nil)
    (iter_reduce_rtc_reduce_rel rec-application-judgement
     "{Q | rtc_reduce_rel(R, Q)}" combinators nil)
    (reduce_context rec-application-judgement
     "{Q | IF value?(R) THEN R = Q ELSE reduce_rel(R, Q) ENDIF}"
     combinators nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (iter_reduce def-decl "term" combinators nil)
    (value? def-decl "bool" combinators nil)
    (S_free? def-decl "bool" combinators nil)
    (size const-decl "posnat" combinators nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil combinators nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (ks_TCC1 0
  (ks_TCC1-1 nil 3529776800 ("" (grind) nil nil)
   ((S_free? def-decl "bool" combinators nil)) nil))
 (ks_TCC2 0
  (ks_TCC2-1 nil 3529776800 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (ks_TCC3 0
  (ks_TCC3-1 nil 3529869068 ("" (termination-tcc) nil nil) nil nil))
 (ks_TCC4 0
  (ks_TCC4-1 nil 3529869068 ("" (grind) nil nil)
   ((S_free? def-decl "bool" combinators nil)) nil))
 (reduce_iter_reduce 0
  (reduce_iter_reduce-1 nil 3529776802
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (expand "iter_reduce" +)
        (("2" (apply (repeat (lift-if)))
          (("2" (ground)
            (("1" (expand "iter_reduce" +) (("1" (propax) nil nil))
              nil)
             ("2" (inst?) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((iter_reduce_rtc_reduce_rel rec-application-judgement
     "{Q | rtc_reduce_rel(R, Q)}" combinators nil)
    (reduce_context rec-application-judgement
     "{Q | IF value?(R) THEN R = Q ELSE reduce_rel(R, Q) ENDIF}"
     combinators nil)
    (K_redex? const-decl "bool" combinators nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (reduce def-decl "term" combinators nil)
    (iter_reduce def-decl "term" combinators nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil combinators nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (reduce_ks 0
  (reduce_ks-1 nil 3529779048
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (expand "ks" +)
        (("2" (expand "reduce" +)
          (("2" (lift-if)
            (("2" (grind :exclude "reduce")
              (("2" (typepred "ks(j!1)")
                (("2" (grind :exclude "reduce") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (S_redex? const-decl "bool" combinators nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (value? def-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (reduce_context rec-application-judgement
     "{Q | IF value?(R) THEN R = Q ELSE reduce_rel(R, Q) ENDIF}"
     combinators nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ks def-decl "(S_free?)" combinators nil)
    (S_free? def-decl "bool" combinators nil)
    (reduce def-decl "term" combinators nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil combinators nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (iter_reduce_ks 0
  (iter_reduce_ks-1 nil 3529776221
   ("" (induct "n" :name "NAT_induction")
    (("" (skosimp*)
      (("" (case "j!1 = 0")
        (("1" (grind)
          (("1" (rewrite "iter_reduce_reduce") (("1" (grind) nil nil))
            nil))
          nil)
         ("2" (case "j!1 = 1")
          (("1" (grind) nil nil)
           ("2" (use "reduce_ks" :subst ("n" "j!1 - 2"))
            (("1" (expand "iter_reduce" +)
              (("1" (lift-if)
                (("1" (ground)
                  (("1" (hide-all-but (-1 -2))
                    (("1" (name-replace "KK" "reduce(ks(j!1))")
                      (("1" (expand "ks" -1)
                        (("1" (expand "ks" -1)
                          (("1" (assert)
                            (("1" (replace -2)
                              (("1"
                                (case
                                 "size(apply(apply(ks(j!1 - 2), K), K)) = size(ks(j!1 - 2))")
                                (("1" (grind :exclude "ks") nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -1 :hide? t)
                    (("2" (inst - "j!1 - 2")
                      (("2" (ground)
                        (("2" (inst?)
                          (("2" (ground)
                            (("2"
                              (case-replace
                               "even?(j!1) = even?(j!1 - 2)")
                              (("2"
                                (hide-all-but 1)
                                (("2"
                                  (grind :if-match nil)
                                  (("1"
                                    (inst + "j!2 - 1")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (inst + "j!2 + 1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (value? def-decl "bool" combinators nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (reduce_rel const-decl "bool" combinators nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (reduce_nat adt-def-decl "[term -> nat]" combinators nil)
    (restrict const-decl "R" restrict nil)
    (size const-decl "posnat" combinators nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (reduce_ks formula-decl nil combinators nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (iter_reduce_rtc_reduce_rel rec-application-judgement
     "{Q | rtc_reduce_rel(R, Q)}" combinators nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_context rec-application-judgement
     "{Q | IF value?(R) THEN R = Q ELSE reduce_rel(R, Q) ENDIF}"
     combinators nil)
    (reduce def-decl "term" combinators nil)
    (S_redex? const-decl "bool" combinators nil)
    (K_redex? const-decl "bool" combinators nil)
    (iter_reduce_reduce formula-decl nil combinators nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (apply adt-constructor-decl "[[term, term] -> (apply?)]"
           combinators nil)
    (apply? adt-recognizer-decl "[term -> boolean]" combinators nil)
    (K adt-constructor-decl "(K?)" combinators nil)
    (K? adt-recognizer-decl "[term -> boolean]" combinators nil)
    (even? const-decl "bool" integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ks def-decl "(S_free?)" combinators nil)
    (S_free? def-decl "bool" combinators nil)
    (iter_reduce def-decl "term" combinators nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil combinators nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)))

