(BFS
 (path_TCC1 0
  (path_TCC1-1 nil 3529810924 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (member const-decl "bool" sets nil))
   nil))
 (post_TCC1 0
  (post_TCC1-1 nil 3529812562
   ("" (skosimp* :preds? t)
    (("" (expand "is_finite")
      (("" (skosimp*)
        ((""
          (inst + "vertices"
           "(LAMBDA (y: vertex | EXISTS (x: (X!1)): g!1(x)(y)): y)")
          (("" (grind :if-match nil) nil nil)) nil))
        nil))
      nil))
    nil)
   ((graph type-eq-decl nil BFS nil)
    (below type-eq-decl nil nat_types nil)
    (injective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil))
   nil))
 (inc_d_reachable_TCC1 0
  (inc_d_reachable_TCC1-1 nil 3529810988 ("" (subtype-tcc) nil nil) nil
   nil))
 (inc_d_reachable_TCC2 0
  (inc_d_reachable_TCC2-1 nil 3529810988 ("" (subtype-tcc) nil nil) nil
   nil))
 (inc_d_reachable_TCC3 0
  (inc_d_reachable_TCC3-1 nil 3529814955
   ("" (grind :if-match nil :exclude "d_reachable")
    ((""
      (inst + "vertices"
       "(LAMBDA (y: (d_reachable(g!1, d!1, u!1))): y)")
      (("" (grind) nil nil)) nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (graph type-eq-decl nil BFS nil) (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (d_reachable const-decl "bool" BFS nil)
    (below type-eq-decl nil nat_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil)
    (below type-eq-decl nil naturalnumbers nil)
    (is_finite const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil))
   nil))
 (inc_d_reachable 0
  (inc_d_reachable-1 nil 3529810989
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t)
      (("" (grind :if-match nil)
        (("1" (hide -1)
          (("1" (case "length(ll!1) = 1 + d!1")
            (("1" (grind :if-match nil)
              (("1" (inst 2 "car(ll!1)")
                (("1" (expand "path") (("1" (grind) nil nil)) nil)
                 ("2" (expand "path" -)
                  (("2" (lift-if)
                    (("2" (ground)
                      (("2" (inst?) (("2" (grind) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil))
                nil))
              nil)
             ("2" (inst?) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (hide -1) (("2" (inst?) (("2" (grind) nil nil)) nil))
          nil)
         ("3" (hide -1)
          (("3" (inst + "cons(x!2, ll!1)") (("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil)
    (post const-decl "finite_set[vertex]" BFS nil)
    (union const-decl "set" sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (d_reachable const-decl "bool" BFS nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (graph type-eq-decl nil BFS nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (d!1 skolem-const-decl "below(vertices)" BFS nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (u!1 skolem-const-decl "vertex" BFS nil)
    (g!1 skolem-const-decl "graph" BFS nil)
    (path def-decl "bool" BFS nil)
    (ll!1 skolem-const-decl "list[vertex]" BFS nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil))
   shostak))
 (s_reachable_TCC1 0
  (s_reachable_TCC1-1 nil 3529845521 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vertices formal-const-decl "nat" BFS nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (vertex type-eq-decl nil BFS nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (d_reachable const-decl "bool" BFS nil))
   nil))
 (d_reachable_fixpoint_TCC1 0
  (d_reachable_fixpoint_TCC1-1 nil 3529852985
   ("" (skosimp*)
    (("" (expand "is_finite")
      ((""
        (inst + "vertices"
         "(LAMBDA (x: (d_reachable(g!1, d!1, u!1))): x)")
        (("" (lazy-grind) nil nil)) nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (d_reachable const-decl "bool" BFS nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (graph type-eq-decl nil BFS nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil) (vertex type-eq-decl nil BFS nil)
    (< const-decl "bool" reals nil)
    (vertices formal-const-decl "nat" BFS nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (d_reachable_fixpoint_TCC2 0
  (d_reachable_fixpoint_TCC2-1 nil 3529852985
   ("" (subtype-tcc) nil nil) nil nil))
 (d_reachable_fixpoint 0
  (d_reachable_fixpoint-1 nil 3529852985
   ("" (skosimp)
    (("" (induct "e")
      (("" (skosimp*)
        (("" (rewrite "inc_d_reachable")
          (("" (name-replace "R" "d_reachable(g!1, d!1, u!1)")
            (("" (replace*)
              (("" (hide-all-but 1) (("" (grind-with-ext) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (pred type-eq-decl nil defined_types nil)
    (subrange type-eq-decl nil subrange_type nil)
    (< const-decl "bool" reals nil) (vertex type-eq-decl nil BFS nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (graph type-eq-decl nil BFS nil)
    (d_reachable const-decl "bool" BFS nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (vertices formal-const-decl "nat" BFS nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subrange_induction formula-decl nil subrange_inductions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (inc_d_reachable formula-decl nil BFS nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   shostak))
 (card_vertex 0
  (card_vertex-1 nil 3529850393
   ("" (skosimp*)
    (("" (typepred "card(V!1)")
      (("" (use "Card_injection[vertex]" :subst ("n" "vertices"))
        (("" (ground)
          (("" (inst + "(LAMBDA (y: (V!1)): y)") (("" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (vertex type-eq-decl nil BFS nil)
    (vertices formal-const-decl "nat" BFS nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (Card_injection formula-decl nil finite_sets nil))
   shostak))
 (card_vertex_remove 0
  (card_vertex_remove-1 nil 3529850440
   ("" (skosimp*)
    (("" (typepred "card(V!1)")
      (("" (use "Card_injection[vertex]" :subst ("n" "vertices - 1"))
        (("" (ground)
          ((""
            (inst +
             "(LAMBDA (y: (V!1)): IF y = vertices - 1 THEN x!1 ELSE y ENDIF)")
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (vertex type-eq-decl nil BFS nil)
    (vertices formal-const-decl "nat" BFS nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (x!1 skolem-const-decl "vertex" BFS nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (V!1 skolem-const-decl "finite_set[vertex]" BFS nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Card_injection formula-decl nil finite_sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (bfs_rec_TCC1 0
  (bfs_rec_TCC1-1 nil 3529810988
   ("" (skosimp* :preds? t)
    (("" (typepred "card(V!1)")
      (("" (use "Card_injection[vertex]" :subst ("n" "vertices"))
        (("" (ground)
          (("" (inst + "(LAMBDA (y: (V!1)): y)") (("" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (Card_injection formula-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (bfs_rec_TCC2 0
  (bfs_rec_TCC2-1 nil 3529810988
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (use "bfs_rec_TCC1") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bfs_rec_TCC1 subtype-tcc nil BFS nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil BFS nil)
    (d_reachable const-decl "bool" BFS nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (s_reachable const-decl "bool" BFS nil)
    (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (post const-decl "finite_set[vertex]" BFS nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil))
   nil))
 (bfs_rec_TCC3 0
  (bfs_rec_TCC3-1 nil 3529810988
   ("" (skosimp*)
    (("" (typepred "z!1`4")
      (("" (use "card_vertex") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((disjoint? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (post const-decl "finite_set[vertex]" BFS nil)
    (difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (s_reachable const-decl "bool" BFS nil)
    (subset? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (d_reachable const-decl "bool" BFS nil)
    (graph type-eq-decl nil BFS nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (vertex type-eq-decl nil BFS nil)
    (vertices formal-const-decl "nat" BFS nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (card_vertex formula-decl nil BFS nil))
   nil))
 (bfs_rec_TCC4 0
  (bfs_rec_TCC4-1 nil 3529810988
   ("" (skosimp* :preds? t)
    (("" (use "card_vertex") (("" (assert) nil nil)) nil)) nil)
   ((card_vertex formula-decl nil BFS nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil BFS nil)
    (d_reachable const-decl "bool" BFS nil))
   nil))
 (bfs_rec_TCC5 0
  (bfs_rec_TCC5-1 nil 3529810988
   ("" (skosimp* :preds? t)
    (("" (expand "qlift?")
      (("" (expand "subset?")
        (("" (inst?)
          (("" (expand "member") (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((qlift? const-decl "bool" BFS nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil BFS nil)
    (d_reachable const-decl "bool" BFS nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (s_reachable const-decl "bool" BFS nil)
    (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (post const-decl "finite_set[vertex]" BFS nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil))
   nil))
 (bfs_rec_TCC6 0
  (bfs_rec_TCC6-1 nil 3529810988
   ("" (skosimp* :preds? t)
    (("" (hide-all-but (-2 -9 1 2 3))
      (("" (ground)
        (("1" (hide 2)
          (("1" (lazy-grind :exclude "s_reachable") nil nil)) nil)
         ("2" (grind :exclude "s_reachable") nil nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil BFS nil)
    (d_reachable const-decl "bool" BFS nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (s_reachable const-decl "bool" BFS nil)
    (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (post const-decl "finite_set[vertex]" BFS nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil))
   nil))
 (bfs_rec_TCC7 0
  (bfs_rec_TCC7-1 nil 3529810988
   ("" (skosimp* :preds? t)
    (("" (ground)
      (("1" (hide-all-but (-2 -11 1))
        (("1"
          (case-replace
           "post(g!1)(C!1) = union(g!1(x!1), post(g!1)(remove(x!1, C!1)))"
           :hide? t)
          (("1" (lazy-grind :exclude "post")
            (("1" (apply-extensionality :hide? t)
              (("1" (lazy-grind :exclude "post") nil nil)) nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (apply-extensionality :hide? t)
              (("2" (lazy-grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but (-12 1))
        (("2"
          (case-replace "disjoint?[vertex]
              (union[vertex](difference[vertex](g!1(x!1), V!1), N!1), V!1) = (disjoint?(difference[vertex](g!1(x!1), V!1), V!1) AND disjoint?(N!1, V!1))"
           :hide? t)
          (("1" (lazy-grind) nil nil)
           ("2" (hide -1 2) (("2" (lazy-grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil BFS nil)
    (d_reachable const-decl "bool" BFS nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (s_reachable const-decl "bool" BFS nil)
    (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (post const-decl "finite_set[vertex]" BFS nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil))
   nil))
 (bfs_rec_TCC8 0
  (bfs_rec_TCC8-1 nil 3529810988
   ("" (skosimp* :preds? t)
    (("" (rewrite "card_remove")
      (("" (hide-all-but (-13 3))
        (("" (rewrite "nonempty_card") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((card_remove formula-decl nil finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< def-decl "bool" ordinals nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil BFS nil)
    (d_reachable const-decl "bool" BFS nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (s_reachable const-decl "bool" BFS nil)
    (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (post const-decl "finite_set[vertex]" BFS nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil))
   nil))
 (bfs_rec_TCC9 0
  (bfs_rec_TCC9-1 nil 3529810988
   ("" (skosimp* :preds? t)
    (("" (ground)
      (("1" (rewrite "card_union")
        (("1"
          (case-replace "card(intersection(V!1, N!1)) = 0" :hide? t)
          (("1" (rewrite "nonempty_card") (("1" (assert) nil nil)) nil)
           ("2" (expand "disjoint?")
            (("2" (rewrite "card_empty?")
              (("2" (hide-all-but (-10 1)) (("2" (lazy-grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "inc_d_reachable")
        (("1" (name-replace "R" "d_reachable(g!1, d!1, u!1)")
          (("1" (hide-all-but (-5 -9 1 3))
            (("1" (apply-extensionality :hide? t)
              (("1" (replace*)
                (("1" (hide -1 -2)
                  (("1"
                    (case-replace "post(g!1)(C!1) = emptyset" :hide? t)
                    (("1" (grind) nil nil)
                     ("2" (hide 2)
                      (("2" (grind-with-ext :if-match nil)
                        (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but (-4 -10 -11 1))
          (("2" (case "card(V!1) < vertices")
            (("1" (assert) nil nil)
             ("2" (typepred "card(V!1)")
              (("2"
                (use "Card_injection[vertex]" :subst
                     ("n" "vertices - 1"))
                (("2" (expand "nonempty?")
                  (("2" (expand "empty?")
                    (("2" (skosimp*)
                      (("2" (ground)
                        (("2"
                          (inst +
                           "(LAMBDA (y: (V!1)): IF y = vertices - 1 THEN x!1 ELSE y ENDIF)")
                          (("1" (hide-all-but (-4 -3 1))
                            (("1" (lazy-grind) nil nil)) nil)
                           ("2" (grind) nil nil) ("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    (intersection const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (card_empty? formula-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (card_union formula-decl nil finite_sets nil)
    (V!1 skolem-const-decl "finite_set[vertex]" BFS nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "vertex" BFS nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil nat_types nil)
    (injective? const-decl "bool" functions nil)
    (Card_injection formula-decl nil finite_sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonempty? const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (inc_d_reachable formula-decl nil BFS nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil BFS nil)
    (d_reachable const-decl "bool" BFS nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (s_reachable const-decl "bool" BFS nil)
    (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (post const-decl "finite_set[vertex]" BFS nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil))
   nil))
 (bfs_rec_TCC10 0
  (bfs_rec_TCC10-1 nil 3529810988
   ("" (skosimp* :preds? t)
    (("" (ground)
      (("1" (case-replace "post(g!1)(C!1) = emptyset" :hide? t)
        (("1" (expand "s_reachable" +)
          (("1" (expand "subset?" +)
            (("1" (skosimp*)
              (("1" (expand "member")
                (("1" (rewrite "inc_d_reachable")
                  (("1" (name-replace "R" "d_reachable(g!1, d!1, u!1)")
                    (("1" (replace*)
                      (("1" (rewrite "union_empty")
                        (("1" (hide-all-but (-1 -11 1))
                          (("1" (lazy-grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 -5 -11 1))
                    (("2" (case "card(V!1) < vertices")
                      (("1" (assert) nil nil)
                       ("2" (typepred "card(V!1)")
                        (("2"
                          (use "Card_injection[vertex]" :subst
                               ("n" "vertices - 1"))
                          (("2" (ground)
                            (("2"
                              (inst +
                               "(LAMBDA (y: (V!1)): IF y = vertices - 1 THEN x!1 ELSE y ENDIF)")
                              (("1"
                                (hide -1 -3 2 3)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil)
                               ("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but (1 4))
          (("2" (grind-with-ext :if-match nil) (("2" (inst?) nil nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but (-1 1 2)) (("2" (lazy-grind) nil nil)) nil))
      nil))
    nil)
   ((finite_difference application-judgement "finite_set" finite_sets
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonempty? const-decl "bool" sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (inc_d_reachable formula-decl nil BFS nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (union_empty formula-decl nil sets_lemmas nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Card_injection formula-decl nil finite_sets nil)
    (V!1 skolem-const-decl "finite_set[vertex]" BFS nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "vertex" BFS nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil nat_types nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil BFS nil)
    (d_reachable const-decl "bool" BFS nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (s_reachable const-decl "bool" BFS nil)
    (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (post const-decl "finite_set[vertex]" BFS nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil))
   nil))
 (bfs_rec_TCC11 0
  (bfs_rec_TCC11-1 nil 3529810988
   ("" (skosimp* :preds? t)
    (("" (ground)
      (("1"
        (case-replace
         "post(g!1)(union[vertex](V!1, N!1)) = union(post(g!1)(V!1), post(g!1)(N!1))"
         :hide? t)
        (("1" (case-replace "post(g!1)(C!1) = emptyset" :hide? t)
          (("1" (hide-all-but (-9 1))
            (("1" (replace -1 :hide? t)
              (("1" (grind-with-ext) nil nil)) nil))
            nil)
           ("2" (hide-all-but (1 4))
            (("2" (apply (then (grind-with-ext :if-match nil) (grind)))
              nil nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (apply (then (grind-with-ext :if-match nil) (grind)))
            nil nil))
          nil))
        nil)
       ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    (x!2 skolem-const-decl "(union[vertex](V!1, N!1))" BFS nil)
    (N!1 skolem-const-decl "{N |
         post(g!1)(V!1) = union(V!1, union(N, post(g!1)(C!1))) AND
          disjoint?(N, V!1)}" BFS nil)
    (C!1 skolem-const-decl "{C |
         subset?(C, s_reachable(g!1, d!1, u!1)) AND
          NOT member(v!1, difference(V!1, C))}" BFS nil)
    (v!1 skolem-const-decl "vertex" BFS nil)
    (d!1 skolem-const-decl
     "{d: upto(card(V!1)) | V!1 = d_reachable(g!1, d, u!1)}" BFS nil)
    (u!1 skolem-const-decl "vertex" BFS nil)
    (g!1 skolem-const-decl "graph" BFS nil)
    (V!1 skolem-const-decl "finite_set[vertex]" BFS nil)
    (emptyset const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil BFS nil)
    (d_reachable const-decl "bool" BFS nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (s_reachable const-decl "bool" BFS nil)
    (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (post const-decl "finite_set[vertex]" BFS nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil))
   nil))
 (bfs_rec_TCC12 0
  (bfs_rec_TCC12-1 nil 3529850393
   ("" (skosimp* :preds? t)
    (("" (hide-all-but (-4 -10 -11 3))
      (("" (grind :exclude ("lex2" "disjoint?"))
        (("" (use "card_vertex_remove" :subst ("V" "V!1"))
          (("" (ground)
            (("1" (rewrite "lex2_lt") nil nil)
             ("2" (hide 1) (("2" (lazy-grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((card_vertex_remove formula-decl nil BFS nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (intersection const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lex2_lt formula-decl nil lex2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil BFS nil)
    (d_reachable const-decl "bool" BFS nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (s_reachable const-decl "bool" BFS nil)
    (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (post const-decl "finite_set[vertex]" BFS nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil))
   nil))
 (bfs_rec_TCC13 0
  (bfs_rec_TCC13-1 nil 3529850393
   ("" (skosimp* :preds? t)
    (("" (expand "qlift?")
      (("" (skosimp*)
        (("" (expand "s_reachable")
          (("" (flatten)
            (("" (hide -12)
              (("" (expand "nonempty?")
                (("" (assert)
                  (("" (case "V!1(v!1)")
                    (("1" (hide-all-but (-1 -13 1))
                      (("1" (grind) nil nil)) nil)
                     ("2"
                      (case-replace "post(g!1)(C!1) = emptyset" :hide?
                       t)
                      (("1" (case-replace "post(g!1)(V!1) = V!1")
                        (("1" (use "d_reachable_fixpoint")
                          (("1" (ground)
                            (("1" (inst - "y!1")
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "d_reachable" -14)
                                (("2"
                                  (replace -6)
                                  (("2"
                                    (expand "d_reachable" 2)
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-9 -11 1))
                          (("2"
                            (grind-with-ext :exclude "post" :if-match
                             nil)
                            (("2" (inst?) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-12 1))
                        (("2"
                          (apply (then
                                  (grind-with-ext :if-match nil)
                                  (grind)))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((qlift? const-decl "bool" BFS nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_difference application-judgement "finite_set" finite_sets
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (d_reachable_fixpoint formula-decl nil BFS nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (V!1 skolem-const-decl "finite_set[vertex]" BFS nil)
    (g!1 skolem-const-decl "graph" BFS nil)
    (u!1 skolem-const-decl "vertex" BFS nil)
    (d!1 skolem-const-decl
     "{d: upto(card(V!1)) | V!1 = d_reachable(g!1, d, u!1)}" BFS nil)
    (y!1 skolem-const-decl "upto(vertices)" BFS nil)
    (subrange type-eq-decl nil subrange_type nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (graph type-eq-decl nil BFS nil)
    (d_reachable const-decl "bool" BFS nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (s_reachable const-decl "bool" BFS nil)
    (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (post const-decl "finite_set[vertex]" BFS nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil))
   nil))
 (bfs_TCC1 0
  (bfs_TCC1-1 nil 3529873390
   ("" (grind)
    (("" (expand "d_reachable")
      (("" (grind-with-ext)
        (("1" (inst + "null") (("1" (grind) nil nil)) nil)
         ("2" (hide -1)
          (("2" (expand "path") (("2" (grind) nil nil)) nil)) nil)
         ("3" (hide -1)
          (("3" (expand "path") (("3" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((d_reachable const-decl "bool" BFS nil)
    (member const-decl "bool" sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (path def-decl "bool" BFS nil) (<= const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (nonempty_extend application-judgement "(nonempty?[T])"
     extend_set_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (graph type-eq-decl nil BFS nil))
   nil))
 (bfs_TCC2 0
  (bfs_TCC2-1 nil 3529873390
   ("" (grind) (("" (inst + "null") (("" (grind) nil nil)) nil)) nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (path def-decl "bool" BFS nil)
    (length def-decl "nat" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (graph type-eq-decl nil BFS nil)
    (difference const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (s_reachable const-decl "bool" BFS nil)
    (d_reachable const-decl "bool" BFS nil)
    (member const-decl "bool" sets nil)
    (extend const-decl "R" extend nil)
    (singleton const-decl "(singleton?)" sets nil))
   nil))
 (bfs_TCC3 0
  (bfs_TCC3-1 nil 3529873390
   ("" (grind)
    (("" (grind-with-ext :exclude "post")
      (("" (expand "extend")
        (("" (expand "post") (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((post const-decl "finite_set[vertex]" BFS nil)
    (FALSE const-decl "bool" booleans nil)
    (singleton? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (nonempty_extend application-judgement "(nonempty?[T])"
     extend_set_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vertices formal-const-decl "nat" BFS nil)
    (vertex type-eq-decl nil BFS nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (graph type-eq-decl nil BFS nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (extend const-decl "R" extend nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil))
   nil)))

