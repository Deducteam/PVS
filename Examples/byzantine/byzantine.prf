(byzantine
 (npos 0
  (npos-1 nil 3446683121 3506928863
   ("" (use "mn_prop") (("" (assert) nil)) nil) proved
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mn_prop formula-decl nil byzantine nil))
   210 80 nil nil))
 (id_TCC1 0
  (id_TCC1-1 nil 3446683121 3506928864 ("" (subtype-tcc) nil nil)
   proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (proc type-eq-decl nil byzantine nil)
    (n formal-const-decl "nat" byzantine nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   237 84 nil nil))
 (IMP_card_set_TCC1 0
  (IMPORTING1_TCC1-1 nil 3446683121 3506928864
   ("" (use "npos") nil nil) proved
   ((npos formula-decl nil byzantine nil)) 68 -4 nil nil))
 (allset_card 0
  (allset_card-1 nil 3446683121 3506928864
   ("" (use "fullset_fincard")
    (("" (expand "allprocs") (("" (propax) nil)))) nil)
   proved
   ((allprocs const-decl "procset" byzantine nil)
    (id const-decl "(bijective?[proc, proc])" byzantine nil)
    (bijective? const-decl "bool" functions nil)
    (proc type-eq-decl nil byzantine nil)
    (n formal-const-decl "nat" byzantine nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fullset_fincard formula-decl nil card_set "./cardinality/"))
   43 10 nil nil))
 (remove_lemma 0
  (remove_lemma-1 nil 3446683121 3506928864
   ("" (auto-rewrite "npos" "member")
    (("" (skosimp) (("" (use "fincard_remove") (("" (ground) nil))))))
    nil)
   proved
   ((member const-decl "bool" sets nil)
    (procset type-eq-decl nil byzantine nil)
    (setof type-eq-decl nil defined_types nil)
    (id const-decl "(bijective?[proc, proc])" byzantine nil)
    (bijective? const-decl "bool" functions nil)
    (proc type-eq-decl nil byzantine nil)
    (n formal-const-decl "nat" byzantine nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fincard_remove formula-decl nil card_set "./cardinality/"))
   221 46 nil nil))
 (nok_lemma1 0
  (nok_lemma1-1 nil 3446683121 3506928864
   ("" (skosimp)
    (("" (use "fincard_remove")
      (("" (ground)
        ((""
          (case-replace "nok(remove(p!1, caucus!1)) = nok(caucus!1)")
          (("" (hide -2 2)
            (("" (apply-extensionality :hide? t)
              (("" (expand "nok") (("" (grind) nil))))))))))))))
    nil)
   proved
   ((fincard_remove formula-decl nil card_set "./cardinality/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (n formal-const-decl "nat" byzantine nil)
    (proc type-eq-decl nil byzantine nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[proc, proc])" byzantine nil)
    (ok const-decl "procset" byzantine nil)
    (procset type-eq-decl nil byzantine nil)
    (setof type-eq-decl nil defined_types nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (nok const-decl "procset" byzantine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   298 100 nil nil))
 (nok_lemma3 0
  (nok_lemma3-1 nil 3446683121 3506928864
   ("" (skosimp)
    ((""
      (case "nok(remove(p!1, caucus!1)) = remove(p!1, nok(caucus!1))")
      (("1" (replace -1 :hide? t)
        (("1" (lemma "fincard_remove")
          (("1" (inst -1 "p!1" "nok(caucus!1)")
            (("1" (ground)
              (("1" (expand "nok") (("1" (propax) nil)))))))))))
       ("2" (hide 3)
        (("2" (apply-extensionality :hide? t) (("2" (grind) nil))))))))
    nil)
   proved
   ((remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (nok const-decl "procset" byzantine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (procset type-eq-decl nil byzantine nil)
    (proc type-eq-decl nil byzantine nil)
    (n formal-const-decl "nat" byzantine nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fincard_remove formula-decl nil card_set "./cardinality/")
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[proc, proc])" byzantine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (setof type-eq-decl nil defined_types nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil))
   260 95 nil nil))
 (OMBG_TCC1 0
  (OMBG_TCC1-1 nil 3446683121 3506928865 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "nat" byzantine nil)
    (proc type-eq-decl nil byzantine nil)
    (<= const-decl "bool" reals nil)
    (m formal-const-decl "nat" byzantine nil)
    (rounds type-eq-decl nil byzantine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil))
   161 68 nil nil))
 (OMBG_TCC2 0
  (OMBG_TCC2-1 nil 3446683121 3506928865 ("" (termination-tcc) nil nil)
   proved ((member const-decl "bool" sets nil)) 58 20 nil nil))
 (C2 0
  (C2-1 nil 3446683121 3506928865
   ("" (auto-rewrite "send_ax" "distr" "remove_lemma" "nok_lemma1")
    (("" (induct "r")
      (("1" (assert)
        (("1" (expand "C2_prop")
          (("1" (skosimp)
            (("1" (expand "OMBG") (("1" (ground) nil)))))))))
       ("2" (skosimp)
        (("2" (expand "C2_prop" +)
          (("2" (skosimp)
            (("2" (expand "OMBG")
              (("2" (smash)
                (("2" (rewrite "maj_ax")
                  (("2" (hide -7 3)
                    (("2" (skosimp)
                      (("2" (expand "C2_prop")
                        (("2" (inst?)
                          (("2" (ground)
                            (("1" (assert) nil)
                             ("2" (grind) nil))))))))))))))))))))))))))
    nil)
   proved
   ((<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (rounds type-eq-decl nil byzantine nil)
    (C2_prop const-decl "bool" byzantine nil)
    (m formal-const-decl "nat" byzantine nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (OMBG def-decl "T" byzantine nil)
    (send_ax formula-decl nil byzantine nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (send const-decl "[T, proc, proc -> T]" byzantine nil)
    (vector type-eq-decl nil byzantine nil)
    (T formal-nonempty-type-decl nil byzantine nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (procset type-eq-decl nil byzantine nil)
    (proc type-eq-decl nil byzantine nil)
    (n formal-const-decl "nat" byzantine nil)
    (< const-decl "bool" reals nil)
    (maj_ax formula-decl nil byzantine nil)
    (remove_lemma formula-decl nil byzantine nil)
    (nok_lemma1 formula-decl nil byzantine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (member const-decl "bool" sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   652 337 nil nil))
 (C2_final_TCC1 0
  (C2_final_TCC1-1 nil 3446683121 3506928865 ("" (tcc) nil nil) proved
   nil 46 0 nil nil))
 (C2_final 0
  (C2_final-1 nil 3446683121 3506928866
   ("" (skosimp)
    (("" (lemma "C2")
      (("" (expand "C2_prop")
        (("" (inst?)
          (("" (ground)
            (("1" (grind) nil) ("2" (grind) nil)
             ("3" (rewrite "allset_card")
              (("3" (lemma "max_faults")
                (("3" (lemma "mn_prop")
                  (("3" (assert) nil))))))))))))))))
    nil)
   proved
   ((C2 formula-decl nil byzantine nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (m formal-const-decl "nat" byzantine nil)
    (rounds type-eq-decl nil byzantine nil)
    (allprocs const-decl "procset" byzantine nil)
    (procset type-eq-decl nil byzantine nil)
    (T formal-nonempty-type-decl nil byzantine nil)
    (proc type-eq-decl nil byzantine nil)
    (n formal-const-decl "nat" byzantine nil)
    (< const-decl "bool" reals nil)
    (allset_card formula-decl nil byzantine nil)
    (mn_prop formula-decl nil byzantine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_faults formula-decl nil byzantine nil)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (C2_prop const-decl "bool" byzantine nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   337 194 nil nil))
 (C1 0
  (C1-1 nil 3446683121 3506928866
   ("" (auto-rewrite "send_ax" "distr")
    (("" (induct "r")
      (("1" (expand "C1_prop")
        (("1" (skosimp)
          (("1" (assert)
            (("1" (case "ok(G!1)")
              (("1" (expand "OMBG") (("1" (assert) nil)))
               ("2" (hide 2)
                (("2" (typepred "fincard(nok(caucus!1))")
                  (("2" (use "fincard_non_empty" :if-match t)
                    (("2" (ground)
                      (("2" (inst 1 "G!1")
                        (("2" (expand "nok")
                          (("2" (propax) nil)))))))))))))))))))))
       ("2" (skosimp)
        (("2" (expand "C1_prop" +)
          (("2" (skosimp)
            (("2" (assert)
              (("2" (case "ok(G!1)")
                (("1" (lemma "C2")
                  (("1" (expand "C2_prop")
                    (("1" (auto-rewrite -1) (("1" (assert) nil)))))))
                 ("2" (expand "OMBG")
                  (("2" (ground)
                    (("2" (rewrite "maj_ext")
                      (("2" (hide 3)
                        (("2" (skosimp)
                          (("2" (expand "C1_prop")
                            (("2" (inst?)
                              (("2"
                                (grind
                                 :exclude
                                 "fincard"
                                 :rewrites
                                 ("remove_lemma" "nok_lemma3"))
                                nil))))))))))))))))))))))))))))
    nil)
   proved
   ((<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (rounds type-eq-decl nil byzantine nil)
    (C1_prop const-decl "bool" byzantine nil)
    (m formal-const-decl "nat" byzantine nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (< const-decl "bool" reals nil)
    (n formal-const-decl "nat" byzantine nil)
    (proc type-eq-decl nil byzantine nil)
    (procset type-eq-decl nil byzantine nil)
    (ok const-decl "procset" byzantine nil)
    (send_ax formula-decl nil byzantine nil)
    (OMBG def-decl "T" byzantine nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[proc, proc])" byzantine nil)
    (fincard const-decl "nat" finite_cardinality "./cardinality/")
    (nok const-decl "procset" byzantine nil)
    (setof type-eq-decl nil defined_types nil)
    (fincard_non_empty formula-decl nil card_set "./cardinality/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (send const-decl "[T, proc, proc -> T]" byzantine nil)
    (vector type-eq-decl nil byzantine nil)
    (T formal-nonempty-type-decl nil byzantine nil)
    (remove const-decl "set" sets nil)
    (maj_ext formula-decl nil byzantine nil)
    (remove_lemma formula-decl nil byzantine nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (nok_lemma3 formula-decl nil byzantine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (C2 formula-decl nil byzantine nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (C2_prop const-decl "bool" byzantine nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   754 436 nil nil))
 (C1_final_TCC1 0
  (C1_final_TCC1-1 nil 3446683121 3506928867 ("" (tcc) nil nil) proved
   nil 70 4 nil nil))
 (C1_final 0
  (C1_final-1 nil 3446683121 3506928867
   ("" (skosimp*)
    (("" (lemma "C1")
      (("" (expand "C1_prop")
        (("" (inst?)
          (("" (ground)
            (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil)
             ("4" (lemma "allset_card")
              (("4" (lemma "mn_prop") (("4" (assert) nil)))))
             ("5" (lemma "max_faults") (("5" (assert) nil))))))))))))
    nil)
   proved
   ((C1 formula-decl nil byzantine nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (m formal-const-decl "nat" byzantine nil)
    (rounds type-eq-decl nil byzantine nil)
    (< const-decl "bool" reals nil)
    (n formal-const-decl "nat" byzantine nil)
    (proc type-eq-decl nil byzantine nil)
    (procset type-eq-decl nil byzantine nil)
    (allprocs const-decl "procset" byzantine nil)
    (T formal-nonempty-type-decl nil byzantine nil)
    (max_faults formula-decl nil byzantine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (allset_card formula-decl nil byzantine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mn_prop formula-decl nil byzantine nil)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (C1_prop const-decl "bool" byzantine nil))
   279 152 nil nil)))

