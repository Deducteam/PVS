(pipe
 (regfile_TCC1 0
  (regfile_TCC1-1 nil 3446684561 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (time type-eq-decl nil time nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (regfile_TCC2 0
  (regfile_TCC2-1 nil 3446684561 ("" (subtype-tcc) nil nil)
   ((stalld const-decl "bool" pipe nil)
    (stalldd const-decl "bool" pipe nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (regfile_TCC3 0
  (regfile_TCC3-1 nil 3446684561 ("" (termination-tcc) nil nil)
   ((pred const-decl "nat" naturalnumbers nil)
    (stalld const-decl "bool" pipe nil)
    (stalldd const-decl "bool" pipe nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (correctness 0
  (correctness-2 "" 3653342535
   ("" (install-rewrites :defs t :theories ("pipe"))
    (("" (skosimp*)
      (("" (apply (repeat (assert)))
        (("" (lift-if)
          (("" (lift-if)
            (("" (lift-if)
              (("" (assert)
                (("" (lift-if)
                  (("" (lift-if)
                    (("" (assert)
                      (("" (prop)
                        (("1" (assert)
                          (("1" (lift-if) (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (lift-if)
                          (("2" (lift-if) (("2" (assert) nil nil))
                            nil))
                          nil)
                         ("3" (lift-if)
                          (("3" (lift-if) (("3" (assert) nil nil))
                            nil))
                          nil)
                         ("4" (lift-if)
                          (("4" (lift-if) (("4" (assert) nil nil))
                            nil))
                          nil)
                         ("5" (lift-if)
                          (("5" (lift-if) (("5" (assert) nil nil))
                            nil))
                          nil)
                         ("6" (lift-if)
                          (("6" (lift-if)
                            (("6" (assert)
                              (("6"
                                (lift-if)
                                (("6"
                                  (assert)
                                  (("6"
                                    (prop)
                                    (("1"
                                      (lift-if)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (lift-if)
                                      (("2" (assert) nil nil))
                                      nil)
                                     ("3"
                                      (lift-if)
                                      (("3" (assert) nil nil))
                                      nil)
                                     ("4"
                                      (lift-if)
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("7" (lift-if)
                          (("7" (lift-if)
                            (("7" (assert)
                              (("7"
                                (lift-if)
                                (("7" (prop) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("8" (lift-if) (("8" (assert) nil nil)) nil)
                         ("9" (lift-if) (("9" (assert) nil nil)) nil)
                         ("10" (lift-if)
                          (("10" (lift-if) (("10" (assert) nil nil))
                            nil))
                          nil)
                         ("11" (lift-if)
                          (("11" (lift-if) (("11" (assert) nil nil))
                            nil))
                          nil)
                         ("12" (lift-if)
                          (("12" (lift-if)
                            (("12" (assert)
                              (("12"
                                (prop)
                                (("1"
                                  (lift-if)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (lift-if)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("13" (lift-if)
                          (("13" (lift-if) (("13" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (correctness-1 nil 3446684561
   ("" (install-rewrites :defs t :theories ("pipe"))
    (("" (skosimp*)
      (("" (apply (repeat (assert)))
        (("" (apply (repeat (lift-if :updates? nil)))
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (wbreg const-decl "data" pipe nil)
    (ALU_ax formula-decl nil pipe nil)
    (opreg2 const-decl "data" pipe nil)
    (opreg1 const-decl "data" pipe nil)
    (opcoded const-decl "opcodes" pipe nil)
    (dstndd const-decl "addr" pipe nil)
    (dstnd const-decl "addr" pipe nil)
    (regfile def-decl "[addr -> data]" pipe nil)
    (stalldd const-decl "bool" pipe nil)
    (stalld const-decl "bool" pipe nil)
    (pred const-decl "nat" naturalnumbers nil))
   nil)))

