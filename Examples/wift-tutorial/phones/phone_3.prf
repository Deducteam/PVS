(phone_3
 (FindAdd 0
  (FindAdd-1 nil 3446684549 3506929897 ("" (grind) nil nil) proved
   ((AddPhone const-decl "B" phone_3 nil)
    (FindPhone const-decl "setof[P]" phone_3 nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil))
   79 10 nil nil))
 (DelAdd 0
  (DelAdd-1 nil 3446684549 3506929898
   ("" (grind)
    (("" (apply-extensionality :hide? t)
      (("" (smash)
        (("" (apply-extensionality :hide? t) (("" (smash) nil))))))))
    nil)
   proved
   ((N type-decl nil phone_3 nil) (P type-decl nil phone_3 nil)
    (boolean nonempty-type-decl nil booleans nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (B type-eq-decl nil phone_3 nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (DelPhoneNum const-decl "B" phone_3 nil)
    (AddPhone const-decl "B" phone_3 nil))
   223 64 nil nil))
 (AddList_TCC1 0
  (AddList_TCC1-1 nil 3446684549 3506929898
   ("" (termination-tcc) nil nil) proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   161 40 nil nil))
 (AddList_member 0
  (AddList_member-1 nil 3446684549 3506929898
   ("" (induct-and-simplify "updates") nil nil) proved
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (B type-eq-decl nil phone_3 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (FindPhone const-decl "setof[P]" phone_3 nil)
    (AddList def-decl "B" phone_3 nil) (P type-decl nil phone_3 nil)
    (N type-decl nil phone_3 nil)
    (list_induction formula-decl nil list_adt nil)
    (AddPhone const-decl "B" phone_3 nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil))
   267 73 nil nil))
 (FindList 0
  (FindList-1 nil 3446684549 3506929898
   ("" (induct-and-simplify "updates") nil nil) proved
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (B type-eq-decl nil phone_3 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FindPhone const-decl "setof[P]" phone_3 nil)
    (AddList def-decl "B" phone_3 nil) (P type-decl nil phone_3 nil)
    (N type-decl nil phone_3 nil)
    (list_induction formula-decl nil list_adt nil)
    (AddPhone const-decl "B" phone_3 nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil))
   286 104 nil nil)))

