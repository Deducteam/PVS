(phone_4
 (emptybook_TCC1 0
  (emptybook_TCC1-1 nil 3446684549 3506929898
   ("" (subtype-tcc) nil nil) proved
   ((/= const-decl "boolean" notequal nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   85 34 nil nil))
 (AddPhone_TCC1 0
  (AddPhone_TCC1-1 nil 3446684549 3506929899
   ("" (grind :if-match nil)
    (("1" (inst - "x!1" "y!1") (("1" (reduce) nil)))
     ("2" (inst - "x!1" "y!1") (("2" (reduce) nil)))
     ("3" (inst - "x!1" "y!1") (("3" (reduce) nil)))
     ("4" (inst - "x!1" "y!1") (("4" (reduce) nil)))
     ("5" (inst - "x!1" "y!1") (("5" (reduce) nil))))
    nil)
   proved
   ((add const-decl "(nonempty?)" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (N type-decl nil phone_4 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (P type-decl nil phone_4 nil) (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (B type-eq-decl nil phone_4 nil) (VB type-eq-decl nil phone_4 nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (UnusedPhoneNum const-decl "bool" phone_4 nil)
    (member const-decl "bool" sets nil)
    (FindPhone const-decl "setof[P]" phone_4 nil))
   521 240 nil nil))
 (DelPhone_TCC1 0
  (DelPhone_TCC1-1 nil 3446684549 3506929899
   ("" (auto-rewrite-defs :explicit? t)
    (("" (assert)
      (("" (skolem-typepred)
        (("" (skolem-typepred)
          (("" (flatten)
            (("" (skolem-typepred)
              (("" (flatten)
                (("" (lift-if :updates? t)
                  (("" (assert)
                    (("" (bddsimp)
                      (("" (inst? :if-match t)
                        (("" (replace*)
                          (("" (assert)
                            (("" (inst? :if-match t)
                              ((""
                                (replace*)
                                ((""
                                  (assert)
                                  nil))))))))))))))))))))))))))))))
    nil)
   proved
   ((disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (emptyset const-decl "set" sets nil)
    (VB type-eq-decl nil phone_4 nil) (B type-eq-decl nil phone_4 nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil) (P type-decl nil phone_4 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (N type-decl nil phone_4 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   153 50 nil nil))
 (DelPhoneNum_TCC1 0
  (DelPhoneNum_TCC1-1 nil 3446684549 3506929899
   ("" (grind :if-match nil)
    (("1" (inst - "x!1" "y!1") (("1" (reduce) nil)))
     ("2" (inst - "x!1" "y!1") (("2" (reduce) nil)))
     ("3" (inst - "x!1" "y!1") (("3" (reduce) nil))))
    nil)
   proved
   ((remove const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (N type-decl nil phone_4 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (P type-decl nil phone_4 nil) (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (B type-eq-decl nil phone_4 nil) (VB type-eq-decl nil phone_4 nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil))
   292 144 nil nil))
 (FindAdd 0
  (FindAdd-1 nil 3446684549 3506929900 ("" (grind) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (N type-decl nil phone_4 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (P type-decl nil phone_4 nil) (set type-eq-decl nil sets nil)
    (disjoint? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (B type-eq-decl nil phone_4 nil) (VB type-eq-decl nil phone_4 nil)
    (FindPhone const-decl "setof[P]" phone_4 nil)
    (member const-decl "bool" sets nil)
    (UnusedPhoneNum const-decl "bool" phone_4 nil)
    (AddPhone const-decl "VB" phone_4 nil)
    (add const-decl "(nonempty?)" sets nil))
   99 18 nil nil))
 (DelAdd 0
  (DelAdd-1 nil 3446684549 3506929900
   ("" (grind)
    (("" (apply-extensionality :hide? t)
      (("" (smash)
        (("" (apply-extensionality :hide? t)
          (("" (bddsimp) (("" (propax) nil))))))))))
    nil)
   proved
   ((remove const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (N type-decl nil phone_4 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (P type-decl nil phone_4 nil) (set type-eq-decl nil sets nil)
    (disjoint? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (B type-eq-decl nil phone_4 nil) (VB type-eq-decl nil phone_4 nil)
    (DelPhoneNum const-decl "VB" phone_4 nil)
    (AddPhone const-decl "VB" phone_4 nil)
    (UnusedPhoneNum const-decl "bool" phone_4 nil)
    (member const-decl "bool" sets nil)
    (FindPhone const-decl "setof[P]" phone_4 nil))
   286 125 nil nil)))

