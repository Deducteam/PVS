(full_adder
 (FA_char 0
  (FA_char-1 nil 3446684537 ("" (grind) nil nil)
   ((odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    (XOR const-decl "bool" xor_def nil)
    (FA const-decl "[# carry: bit, sum: bit #]" full_adder nil)
    (b2n const-decl "nbit" bit nil))
   nil)))
(ripple_adder
 (nth_cin_TCC1 0
  (nth_cin_TCC1-1 nil 3446684537 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" ripple_adder nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (nth_cin subtype "(number_fields.-)(ripple_adder.j, 1)"
    "naturalnumbers.below(ripple_adder.N)")))
 (nth_cin_TCC2 0
  (nth_cin_TCC2-1 nil 3446684537 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" ripple_adder nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (nth_cin subtype "(number_fields.-)(ripple_adder.j, 1)" "upto[N]")))
 (nth_cin_TCC3 0
  (nth_cin_TCC3-1 nil 3446684537 ("" (subtype-tcc) nil nil) nil nil
   (nth_cin termination
    "ripple_adder.nth_cin((number_fields.-)(ripple_adder.j, 1), ripple_adder.bv1, ripple_adder.bv2)"
    "nil")))
 (adder_TCC1 0
  (adder_TCC1-1 nil 3446684537 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (adder subtype "ripple_adder.N" "upto[N]")))
 (adder_TCC2 0
  (adder_TCC2-1 nil 3446684537 ("" (subtype-tcc) nil nil) nil nil
   (adder subtype "ripple_adder.n" "upto[N]")))
 (adder_invariant 0
  (adder_invariant-1 nil 3446684537
   ("" (induct-and-simplify "j" :exclude "FA" :theories "full_adder")
    nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (adder const-decl "[# carry: bit, sum: bvec[N] #]" ripple_adder
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nbit type-eq-decl nil bit nil) (b2n const-decl "nbit" bit nil)
    (nth_cin def-decl "bit" ripple_adder nil)
    (exp2 def-decl "posnat" exp2 nil)
    (N formal-const-decl "posnat" ripple_adder nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (nil application-judgement "above(n)" exp2 nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "bit" bv nil)
    (FA_char formula-decl nil full_adder nil))
   nil))
 (adder_correct_TCC1 0
  (adder_correct_TCC1-1 nil 3749875884
   ("" (skeep)
    (("" (expand "b2n")
      (("" (expand "bv_nat")
        (("" (expand "bv2nat")
          (("" (assert)
            (("" (lift-if)
              (("" (assert)
                (("" (prop)
                  (("1" (expand "adder") (("1" (postpone) nil nil))
                    nil)
                   ("2" (postpone) nil nil) ("3" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (adder_correct subtype
    "(number_fields.-)((number_fields.+)(ripple_adder.bv_nat(ripple_adder.bv1), ripple_adder.bv_nat(ripple_adder.bv2)), number_fields.*(bit.b2n(ripple_adder.adder(ripple_adder.bv1, ripple_adder.bv2)`carry), exp2.exp2(ripple_adder.N)))"
    "naturalnumbers.below(exp2.exp2(ripple_adder.N))")))
 (adder_correct 0
  (adder_correct-1 nil 3446684537
   ("" (lemma "adder_invariant") (("" (grind :exclude "FA") nil nil))
    nil)
   ((upto nonempty-type-eq-decl nil nat_types nil)
    (N formal-const-decl "posnat" ripple_adder nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (adder const-decl "[# carry: bit, sum: bvec[N] #]" ripple_adder
     nil)
    (b2n const-decl "nbit" bit nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (bv_nat const-decl "nat" ripple_adder nil)
    (nil application-judgement "above(n)" exp2 nil)
    (adder_invariant formula-decl nil ripple_adder nil))
   nil)))

