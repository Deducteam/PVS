(phone_4
 (emptybook_TCC1 0
  (emptybook_TCC1-1 nil 3446684131 3506929562
   ("" (subtype-tcc) nil nil) proved
   ((/= const-decl "boolean" notequal nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   50 40 nil nil))
 (AddPhone_TCC1 0
  (AddPhone_TCC1-1 nil 3446684131 3506929563
   ("" (grind :if-match nil)
    (("1" (inst - "x!1" "y!1") (("1" (reduce) nil nil)) nil)
     ("2" (inst - "x!1" "y!1") (("2" (reduce) nil nil)) nil)
     ("3" (inst - "x!1" "y!1") (("3" (reduce) nil nil)) nil)
     ("4" (inst - "x!1" "y!1") (("4" (reduce) nil nil)) nil)
     ("5" (inst - "x!1" "y!1") (("5" (reduce) nil nil)) nil))
    nil)
   proved
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add const-decl "(nonempty?)" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (N type-decl nil phone_4 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (P type-eq-decl nil phone_4 nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (B type-eq-decl nil phone_4 nil) (VB type-eq-decl nil phone_4 nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (UnusedPhoneNum const-decl "bool" phone_4 nil)
    (member const-decl "bool" sets nil)
    (FindPhone const-decl "setof[P]" phone_4 nil))
   794 476 nil nil))
 (DelPhone_TCC1 0
  (DelPhone_TCC1-1 nil 3446684131 3506929563 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (N type-decl nil phone_4 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (P type-eq-decl nil phone_4 nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (B type-eq-decl nil phone_4 nil) (VB type-eq-decl nil phone_4 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (emptyset const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil))
   207 138 nil nil))
 (DelPhoneNum_TCC1 0
  (DelPhoneNum_TCC1-1 nil 3446684131 3506929563
   ("" (grind :if-match nil)
    (("1" (inst - "x!1" "y!1") (("1" (reduce) nil nil)) nil)
     ("2" (inst - "x!1" "y!1") (("2" (reduce) nil nil)) nil)
     ("3" (inst - "x!1" "y!1") (("3" (reduce) nil nil)) nil))
    nil)
   proved
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (remove const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (N type-decl nil phone_4 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (P type-eq-decl nil phone_4 nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (B type-eq-decl nil phone_4 nil) (VB type-eq-decl nil phone_4 nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil))
   445 292 nil nil))
 (FindAdd 0
  (FindAdd-1 nil 3446684131 3506929563 ("" (grind) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (N type-decl nil phone_4 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (P type-eq-decl nil phone_4 nil)
    (set type-eq-decl nil sets nil)
    (disjoint? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (B type-eq-decl nil phone_4 nil) (VB type-eq-decl nil phone_4 nil)
    (FindPhone const-decl "setof[P]" phone_4 nil)
    (member const-decl "bool" sets nil)
    (UnusedPhoneNum const-decl "bool" phone_4 nil)
    (AddPhone const-decl "VB" phone_4 nil)
    (add const-decl "(nonempty?)" sets nil))
   123 54 nil nil))
 (DelAdd 0
  (DelAdd-1 nil 3446684131 3506929564
   ("" (grind)
    (("" (apply-extensionality :hide? t)
      (("" (smash)
        (("" (apply-extensionality :hide? t) (("" (bddsimp) nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((remove const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (N type-decl nil phone_4 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (P type-eq-decl nil phone_4 nil)
    (set type-eq-decl nil sets nil)
    (disjoint? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (B type-eq-decl nil phone_4 nil) (VB type-eq-decl nil phone_4 nil)
    (DelPhoneNum const-decl "VB" phone_4 nil)
    (AddPhone const-decl "VB" phone_4 nil)
    (UnusedPhoneNum const-decl "bool" phone_4 nil)
    (member const-decl "bool" sets nil)
    (FindPhone const-decl "setof[P]" phone_4 nil))
   316 204 nil nil)))
(phone)

