(FA_axioms
 (BA_1 0
  (BA_1-1 nil 3295886106 3506928718
   ("" (purify-fa :strong t)
    (("" (skosimp*)
      (("" (apply-extensionality)
        (("" (hide 2) (("" (bddsimp) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (sum const-decl "Carrier" FA_semantic nil))
   85 60 nil nil))
 (BA_2 0
  (BA_2-1 nil 3295886106 3506928718
   ("" (purify-fa :strong t)
    (("" (skosimp*)
      (("" (apply-extensionality)
        (("" (hide 2) (("" (bddsimp) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (product const-decl "Carrier" FA_semantic nil))
   97 60 nil nil))
 (BA_3 0
  (BA_3-1 nil 3295886106 3506928718
   ("" (purify-fa :strong t)
    (("" (skosimp*)
      (("" (apply-extensionality)
        (("" (hide 2) (("" (bddsimp) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (sum const-decl "Carrier" FA_semantic nil))
   98 60 nil nil))
 (BA_4 0
  (BA_4-1 nil 3295886106 3506928718
   ("" (purify-fa :strong t)
    (("" (skosimp*)
      (("" (apply-extensionality)
        (("" (hide 2) (("" (bddsimp) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (product const-decl "Carrier" FA_semantic nil))
   81 60 nil nil))
 (BA_5 0
  (BA_5-1 nil 3295886106 3506928718 ("" (purify-fa :strong t) nil nil)
   proved ((sum const-decl "Carrier" FA_semantic nil)) 81 40 nil nil))
 (BA_6 0
  (BA_6-1 nil 3295886106 3506928719 ("" (purify-fa :strong t) nil nil)
   proved ((product const-decl "Carrier" FA_semantic nil)) 83 50 nil
   nil))
 (BA_7 0
  (BA_7-1 nil 3295886106 3506928719
   ("" (purify-fa :strong t)
    (("" (skosimp*)
      (("" (apply-extensionality)
        (("" (hide 2) (("" (bddsimp) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (product const-decl "Carrier" FA_semantic nil)
    (sum const-decl "Carrier" FA_semantic nil))
   86 60 nil nil))
 (BA_8 0
  (BA_8-1 nil 3295886106 3506928719
   ("" (purify-fa :strong t)
    (("" (skosimp*)
      (("" (apply-extensionality)
        (("" (hide 2) (("" (bddsimp) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (sum const-decl "Carrier" FA_semantic nil)
    (product const-decl "Carrier" FA_semantic nil))
   96 60 nil nil))
 (BA_9 0
  (BA_9-1 nil 3295886106 3506928719
   ("" (purify-fa :strong t)
    (("" (skosimp*)
      (("" (apply-extensionality)
        (("" (hide 2) (("" (bddsimp) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (sum const-decl "Carrier" FA_semantic nil)
    (product const-decl "Carrier" FA_semantic nil))
   115 70 nil nil))
 (BA_10 0
  (BA_10-1 nil 3295886106 3506928719
   ("" (purify-fa :strong t)
    (("" (skosimp*)
      (("" (apply-extensionality)
        (("" (hide 2) (("" (bddsimp) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (product const-decl "Carrier" FA_semantic nil)
    (sum const-decl "Carrier" FA_semantic nil))
   89 80 nil nil))
 (BA_11 0
  (BA_11-1 nil 3295886106 3506928719 ("" (purify-fa :strong t) nil nil)
   proved
   ((product const-decl "Carrier" FA_semantic nil)
    (zero const-decl "Carrier" FA_semantic nil))
   54 30 nil nil))
 (BA_12 0
  (BA_12-1 nil 3295886106 3506928719 ("" (purify-fa :strong t) nil nil)
   proved
   ((sum const-decl "Carrier" FA_semantic nil)
    (one const-decl "Carrier" FA_semantic nil))
   90 30 nil nil))
 (BA_13 0
  (BA_13-1 nil 3295886106 3506928719
   ("" (purify-fa :strong t)
    (("" (skosimp*)
      (("" (apply-extensionality) (("" (bddsimp) nil nil)) nil)) nil))
    nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (zero const-decl "Carrier" FA_semantic nil)
    (complement const-decl "Carrier" FA_semantic nil)
    (product const-decl "Carrier" FA_semantic nil))
   103 60 nil nil))
 (BA_14 0
  (BA_14-1 nil 3295886106 3506928719
   ("" (purify-fa :strong t)
    (("" (skosimp*)
      (("" (apply-extensionality)
        (("" (hide 2) (("" (bddsimp) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (one const-decl "Carrier" FA_semantic nil)
    (complement const-decl "Carrier" FA_semantic nil)
    (sum const-decl "Carrier" FA_semantic nil))
   126 60 nil nil))
 (RA_1 0
  (RA_1-1 nil 3295886106 3506928719
   ("" (purify-fa :strong t)
    (("" (skosimp*)
      (("" (apply-extensionality)
        (("" (hide 2)
          (("" (bddsimp)
            (("1" (skosimp*)
              (("1" (inst?)
                (("1" (prop) (("1" (inst?) (("1" (prop) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst?)
                (("2" (prop) (("2" (inst?) (("2" (prop) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (composition const-decl "Carrier" FA_semantic nil))
   168 100 nil nil))
 (RA_2 0
  (RA_2-1 nil 3295886106 3506928720
   ("" (purify-fa :strong t)
    (("" (skosimp*)
      (("" (apply-extensionality)
        (("" (hide 2)
          (("" (bddsimp)
            (("1" (skosimp*)
              (("1" (prop)
                (("1" (inst?) (("1" (prop) nil nil)) nil)
                 ("2" (inst?)
                  (("2" (prop)
                    (("2" (inst?) (("2" (prop) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*) (("2" (inst?) (("2" (prop) nil nil)) nil))
              nil)
             ("3" (skosimp*) (("3" (inst?) (("3" (prop) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (sum const-decl "Carrier" FA_semantic nil)
    (composition const-decl "Carrier" FA_semantic nil))
   131 100 nil nil))
 (RA_3 0
  (RA_3-1 nil 3295886106 3506928720 ("" (purify-fa :strong t) nil nil)
   proved
   ((converse const-decl "Carrier" FA_semantic nil)
    (sum const-decl "Carrier" FA_semantic nil))
   100 40 nil nil))
 (RA_4 0
  (RA_4-1 nil 3295886106 3506928720
   ("" (purify-fa :strong t)
    (("" (skosimp*)
      (("" (apply-extensionality)
        (("" (hide 2)
          (("" (bddsimp)
            (("1" (skosimp*) (("1" (inst?) (("1" (prop) nil nil)) nil))
              nil)
             ("2" (skosimp*) (("2" (inst?) (("2" (prop) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (composition const-decl "Carrier" FA_semantic nil)
    (converse const-decl "Carrier" FA_semantic nil))
   124 70 nil nil))
 (RA_5 0
  (RA_5-1 nil 3295886106 3506928720
   ("" (purify-fa :strong t)
    (("" (skosimp*) (("" (apply-extensionality) nil nil)) nil)) nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (converse const-decl "Carrier" FA_semantic nil))
   112 50 nil nil))
 (RA_6 0
  (RA_6-2 "Needed :quant-simp? t for smash" 3295888123 3506928720
   ("" (purify-fa :strong t)
    (("" (skosimp*)
      (("" (apply-extensionality)
        (("" (assert :quant-simp? t) nil nil)) nil))
      nil))
    nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (one_prime const-decl "Carrier" FA_semantic nil)
    (composition const-decl "Carrier" FA_semantic nil))
   108 60 t shostak)
  (RA_6-1 nil 3295886106 3295887184
   ("" (purify-fa :strong t)
    (("" (skosimp*) (("" (apply-extensionality) nil nil)) nil)) nil)
   proved
   ((bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (one_prime const-decl "Carrier" FA_semantic nil)
    (composition const-decl "Carrier" FA_semantic nil))
   144 120 nil nil))
 (RA_7 0
  (RA_7-1 nil 3295886106 3506928720
   ("" (purify-fa :strong t)
    (("" (skosimp*)
      (("" (prop)
        (("1" (apply-extensionality)
          (("1" (decompose-equality -2)
            (("1" (skosimp*)
              (("1" (inst?)
                (("1" (prop) (("1" (inst?) (("1" (prop) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (apply-extensionality)
          (("2" (decompose-equality -2)
            (("2" (skosimp*)
              (("2" (inst?)
                (("2" (prop) (("2" (inst?) (("2" (prop) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (apply-extensionality)
          (("3" (decompose-equality -2)
            (("3" (skosimp*)
              (("3" (inst?)
                (("3" (prop) (("3" (inst?) (("3" (prop) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (apply-extensionality)
          (("4" (decompose-equality -2)
            (("4" (skosimp*)
              (("4" (inst?)
                (("4" (prop) (("4" (inst?) (("4" (prop) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (FALSE const-decl "bool" booleans nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (converse const-decl "Carrier" FA_semantic nil)
    (zero const-decl "Carrier" FA_semantic nil)
    (composition const-decl "Carrier" FA_semantic nil)
    (product const-decl "Carrier" FA_semantic nil))
   391 250 nil nil))
 (FA_1 0
  (FA_1-2 "Needed :quant-simp? t for smash" 3295888060 3506928721
   ("" (purify-fa :strong t)
    (("" (skosimp*)
      (("" (apply-extensionality)
        (("" (hide 2)
          (("" (bddsimp)
            (("1" (expand "extend")
              (("1" (case "pair?(x!3)")
                (("1" (smash :quant-simp? t) nil nil)
                 ("2" (smash :quant-simp? t) nil nil))
                nil))
              nil)
             ("2" (expand "extend")
              (("2" (case "pair?(x!3)")
                (("1" (smash :quant-simp? t) nil nil)
                 ("2" (smash :quant-simp? t) nil nil))
                nil))
              nil)
             ("3" (skosimp*)
              (("3" (expand "extend")
                (("3" (case "pair?(x!3)")
                  (("1" (smash :quant-simp? t) nil nil)
                   ("2" (smash :quant-simp? t) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((pair? adt-recognizer-decl "[FA_Element -> boolean]" FA_Element_adt
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (el0 adt-accessor-decl "[(pair?) -> FA_Element]" FA_Element_adt
     nil)
    (el1 adt-accessor-decl "[(pair?) -> FA_Element]" FA_Element_adt
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (one const-decl "Carrier" FA_semantic nil)
    (one_prime const-decl "Carrier" FA_semantic nil)
    (composition const-decl "Carrier" FA_semantic nil)
    (product const-decl "Carrier" FA_semantic nil)
    (fork const-decl "Carrier" FA_semantic nil))
   271 190 t shostak)
  (FA_1-1 nil 3295886106 3295887185
   ("" (purify-fa :strong t)
    (("" (skosimp*)
      (("" (apply-extensionality)
        (("" (hide 2)
          (("" (bddsimp)
            (("1" (expand "extend")
              (("1" (case "pair?(x!3)")
                (("1" (smash) nil nil) ("2" (smash) nil nil)) nil))
              nil)
             ("2" (expand "extend")
              (("2" (case "pair?(x!3)")
                (("1" (smash) nil nil) ("2" (smash) nil nil)) nil))
              nil)
             ("3" (skosimp*)
              (("3" (expand "extend")
                (("3" (case "pair?(x!3)")
                  (("1" (smash) nil nil) ("2" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((pair? adt-recognizer-decl "[FA_Element -> boolean]" FA_Element_adt
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (el0 adt-accessor-decl "[(pair?) -> FA_Element]" FA_Element_adt
     nil)
    (el1 adt-accessor-decl "[(pair?) -> FA_Element]" FA_Element_adt
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (one const-decl "Carrier" FA_semantic nil)
    (one_prime const-decl "Carrier" FA_semantic nil)
    (composition const-decl "Carrier" FA_semantic nil)
    (product const-decl "Carrier" FA_semantic nil)
    (fork const-decl "Carrier" FA_semantic nil))
   508 390 nil nil))
 (FA_2 0
  (FA_2-1 nil 3295886106 3506928721
   ("" (skosimp*)
    (("" (purify-fa :strong t)
      (("" (apply-extensionality)
        (("" (hide 2)
          (("" (bddsimp)
            (("1" (skosimp*)
              (("1" (expand "extend")
                (("1" (case "pair?(x!4)")
                  (("1" (smash)
                    (("1" (inst?) (("1" (prop) nil nil)) nil)) nil)
                   ("2" (smash) nil nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (expand "extend")
                (("2" (case "pair?(x!4)")
                  (("1" (smash)
                    (("1" (inst?) (("1" (prop) nil nil)) nil)) nil)
                   ("2" (smash) nil nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp*)
              (("3" (inst 1 "pair(x!4, x!5)")
                (("3" (expand "extend") (("3" (prop) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((composition const-decl "Carrier" FA_semantic nil)
    (fork const-decl "Carrier" FA_semantic nil)
    (converse const-decl "Carrier" FA_semantic nil)
    (product const-decl "Carrier" FA_semantic nil)
    (pair adt-constructor-decl "[[FA_Element, FA_Element] -> (pair?)]"
     FA_Element_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pair? adt-recognizer-decl "[FA_Element -> boolean]" FA_Element_adt
     nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (PRED type-eq-decl nil defined_types nil)
    (Carrier_pred const-decl
     "[[[FA_Element[Element], FA_Element[Element]] -> boolean] -> boolean]"
     FA_semantic nil)
    (Carrier type-from-decl nil FA_semantic nil)
    (el0 adt-accessor-decl "[(pair?) -> FA_Element]" FA_Element_adt
     nil)
    (el1 adt-accessor-decl "[(pair?) -> FA_Element]" FA_Element_adt
     nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (boolean nonempty-type-decl nil booleans nil))
   278 190 nil nil))
 (FA_3 0
  (FA_3-1 nil 3295886106 3506928721
   ("" (purify-fa :strong t)
    (("" (apply-extensionality)
      (("" (hide 2)
        (("" (bddsimp)
          (("" (expand "extend")
            (("" (case "pair?(x!2)")
              (("1" (smash)
                (("1" (case-replace "x!1 = pair(el0(x!1), el1(x!1))")
                  (("1" (case-replace "x!2 = pair(el0(x!2), el1(x!2))")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil)
                   ("2" (apply-extensionality) nil nil))
                  nil))
                nil)
               ("2" (smash) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (FA_Element type-decl nil FA_Element_adt nil)
    (Element nonempty-type-decl nil FA_semantic nil)
    (el1 adt-accessor-decl "[(pair?) -> FA_Element]" FA_Element_adt
     nil)
    (el0 adt-accessor-decl "[(pair?) -> FA_Element]" FA_Element_adt
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (pair? adt-recognizer-decl "[FA_Element -> boolean]" FA_Element_adt
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pair adt-constructor-decl "[[FA_Element, FA_Element] -> (pair?)]"
     FA_Element_adt nil)
    (FA_Element_pair_extensionality formula-decl nil FA_Element_adt
     nil)
    (one const-decl "Carrier" FA_semantic nil)
    (one_prime const-decl "Carrier" FA_semantic nil)
    (converse const-decl "Carrier" FA_semantic nil)
    (fork const-decl "Carrier" FA_semantic nil)
    (sum const-decl "Carrier" FA_semantic nil))
   219 190 nil nil)))

