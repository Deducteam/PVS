FODL_lemmas[Constant: TYPE, 
            Metavariable: TYPE, 
            Variable: TYPE,
            Predicate: TYPE, sigPredicate: [Predicate -> nat], 
            Function_: TYPE, sigFunction_: [Function_ -> nat],
            TypePred: TYPE,
            TPMetavariable: [Metavariable -> TypePred], 
            TPVariable: [Variable -> TypePred],
            Carrier: TYPE+, 
            mTypePred: [TypePred -> [Carrier -> bool]],
            mConstant: [Constant -> Carrier], 
            mPredicate: [P: Predicate -> 
                           [{l: list[Carrier] | sigPredicate(P) = length(l)} -> 
                              bool]],
            mFunction_: [F: Function_ ->
                           [{l: list[Carrier] | sigFunction_(F) = length(l)} ->
                              Carrier]]]: THEORY

  BEGIN

    ASSUMING
      non_empty_types: ASSUMPTION
         FORALL (t: TypePred): EXISTS (c: (mTypePred(t))): TRUE 
    ENDASSUMING

    IMPORTING FODL_axioms[Constant, 
                          Metavariable,
                          Variable, 
                          Predicate, sigPredicate,
                          Function_, sigFunction_,
                          TypePred,
                          TPMetavariable, TPVariable,
                          Carrier,
                          mTypePred,
                          mConstant, 
                          mPredicate, 
                          mFunction_],
              FODL_conversions[Constant, 
                               Metavariable,
                               Variable, 
                               Predicate, sigPredicate,
                               Function_, sigFunction_,
                               TypePred,
                               TPMetavariable, TPVariable,
                               Carrier,
                               mTypePred,
                               mConstant, 
                               mPredicate, 
                               mFunction_]

   PDL_2_box_form: LEMMA
     FORALL (f_0, f_1: wf_Formula_, P: wf_Program_):
       (□(P, f_0) OR □(P, f_1)) IMPLIES □(P, f_0 OR f_1)

   PDL_2_and_form: LEMMA
     FORALL (f_0, f_1: wf_Formula_, P: wf_Program_):
       ◇(P, f_0 AND f_1) IMPLIES (◇(P, f_0) AND ◇(P, f_1))

   PDL_2_box_and_form: LEMMA
     FORALL (f_0, f_1: wf_Formula_, P: wf_Program_):
       □(P, f_0 AND f_1) IFF (□(P, f_0) AND □(P, f_1))

   PDL_3_box_form: LEMMA
     FORALL (f: wf_Formula_, P_0, P_1: wf_Program_):
       □(P_0 + P_1, f) IFF (□(P_0, f) AND □(P_1, f))

   PDL_4_box_form: LEMMA
     FORALL (f: wf_Formula_, P_0, P_1: wf_Program_):
       □(P_0 // P_1, f) IFF □(P_0, □(P_1, f))

   PDL_5_box_form: LEMMA
     FORALL (f_0: {f: wf_Formula_ | no_metavariable(f)}, f_1: wf_Formula_):
       □(T?(f_0), f_1) IFF (f_0 IMPLIES f_1)

   PDL_6_box_form: LEMMA
     FORALL (f: wf_Formula_, P: wf_Program_):
       (f AND □(*(P), f IMPLIES □(P, f))) IMPLIES □(*(P), f)

   PDL_7_box_form: LEMMA
     FORALL (f: wf_Formula_, P: wf_Program_):
       □(*(P), f) IMPLIES (f AND □(P, □(*(P), f)))

   PDL_lemma_1: LEMMA
     FORALL (f_0, f_1: wf_Formula_, P: wf_Program_):
       □(P, f_0 AND f_1) IFF (□(P, f_0) AND □(P, f_1))

   PDL_lemma_2: LEMMA
     FORALL (f_0, f_1: wf_Formula_, P: wf_Program_):
       □(P, f_0 IMPLIES f_1) IMPLIES (□(P, f_0) IMPLIES □(P, f_1))

  END FODL_lemmas
