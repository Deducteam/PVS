(rel_as_fun
 (null_inj_TCC1 0
  (null_inj_TCC1-1 nil 3386560094 ("" (subtype-tcc) nil nil)
   ((emptyset const-decl "set" sets nil)
    (functional const-decl "bool" rel_as_fun nil)
    (injective const-decl "bool" rel_as_fun nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   nil))
 (reldel_1_TCC1 0
  (reldel_1_TCC1-1 nil 3386560094
   ("" (grind :if-match nil)
    (("1" (hide -1 1 2) (("1" (reduce) nil nil)) nil)
     ("2" (hide -2 1) (("2" (reduce) nil nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (A formal-type-decl nil rel_as_fun nil)
    (B formal-type-decl nil rel_as_fun nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (injective const-decl "bool" rel_as_fun nil)
    (functional const-decl "bool" rel_as_fun nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (reldel_2_TCC1 0
  (reldel_2_TCC1-1 nil 3386560094
   ("" (grind :if-match nil)
    (("1" (hide -1 1) (("1" (reduce) nil nil)) nil)
     ("2" (hide -2 1 2) (("2" (reduce) nil nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (A formal-type-decl nil rel_as_fun nil)
    (B formal-type-decl nil rel_as_fun nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (injective const-decl "bool" rel_as_fun nil)
    (functional const-decl "bool" rel_as_fun nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (apply_TCC1 0
  (apply_TCC1-1 nil 3386560094 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (A formal-type-decl nil rel_as_fun nil)
    (B formal-type-decl nil rel_as_fun nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (setof type-eq-decl nil defined_types nil)
    (domain const-decl "setof[A]" rel_as_fun nil)
    (R!1 skolem-const-decl "(part_inj)" rel_as_fun nil)
    (x!1 skolem-const-decl "B" rel_as_fun nil)
    (injective const-decl "bool" rel_as_fun nil)
    (functional const-decl "bool" rel_as_fun nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (range const-decl "setof[B]" rel_as_fun nil))
   nil))
 (invapply_TCC1 0
  (invapply_TCC1-1 nil 3386560094 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (A formal-type-decl nil rel_as_fun nil)
    (B formal-type-decl nil rel_as_fun nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (setof type-eq-decl nil defined_types nil)
    (range const-decl "setof[B]" rel_as_fun nil)
    (a!1 skolem-const-decl "A" rel_as_fun nil)
    (R!1 skolem-const-decl "(part_inj)" rel_as_fun nil)
    (injective const-decl "bool" rel_as_fun nil)
    (functional const-decl "bool" rel_as_fun nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (domain const-decl "setof[A]" rel_as_fun nil))
   nil))
 (update_ok_TCC1 0
  (update_ok_TCC1-2 "" 3386562149
   ("" (skosimp) (("" (grind) nil nil)) nil)
   ((range const-decl "setof[B]" rel_as_fun nil)
    (member const-decl "bool" sets nil)
    (domain const-decl "setof[A]" rel_as_fun nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (injective const-decl "bool" rel_as_fun nil)
    (functional const-decl "bool" rel_as_fun nil)
    (add const-decl "(nonempty?)" sets nil)
    (A formal-type-decl nil rel_as_fun nil)
    (B formal-type-decl nil rel_as_fun nil))
   shostak)
  (update_ok_TCC1-1 nil 3386560094
   ("" (skosimp) (("" (hide -2 -3 1 2) (("" (grind) nil nil)) nil))
    nil)
   ((range const-decl "setof[B]" rel_as_fun nil)
    (member const-decl "bool" sets nil)
    (domain const-decl "setof[A]" rel_as_fun nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (injective const-decl "bool" rel_as_fun nil)
    (functional const-decl "bool" rel_as_fun nil)
    (add const-decl "(nonempty?)" sets nil)
    (A formal-type-decl nil rel_as_fun nil)
    (B formal-type-decl nil rel_as_fun nil))
   nil))
 (update_ok_TCC2 0
  (update_ok_TCC2-2 "" 3386562231 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (A formal-type-decl nil rel_as_fun nil)
    (B formal-type-decl nil rel_as_fun nil)
    (set type-eq-decl nil sets nil)
    (a!1 skolem-const-decl "A" rel_as_fun nil)
    (R!1 skolem-const-decl "rel" rel_as_fun nil)
    (x!1 skolem-const-decl "B" rel_as_fun nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (newR!1 skolem-const-decl "(nonempty?[[A, B]])" rel_as_fun nil)
    (setof type-eq-decl nil defined_types nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (choose const-decl "(p)" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (apply const-decl "(range(R))" rel_as_fun nil)
    (functional const-decl "bool" rel_as_fun nil)
    (injective const-decl "bool" rel_as_fun nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (domain const-decl "setof[A]" rel_as_fun nil)
    (range const-decl "setof[B]" rel_as_fun nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   shostak)
  (update_ok_TCC2-1 nil 3386560094
   ("" (skosimp) (("" (hide -2 -3 -4 1 2) (("" (grind) nil nil)) nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (B formal-type-decl nil rel_as_fun nil)
    (A formal-type-decl nil rel_as_fun nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (setof type-eq-decl nil defined_types nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (empty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (choose const-decl "(p)" sets nil)
    (apply const-decl "(range(R))" rel_as_fun nil)
    (functional const-decl "bool" rel_as_fun nil)
    (injective const-decl "bool" rel_as_fun nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (domain const-decl "setof[A]" rel_as_fun nil)
    (member const-decl "bool" sets nil)
    (range const-decl "setof[B]" rel_as_fun nil))
   nil))
 (update_ok 0
  (update_ok-2 "" 3463207160
   ("" (stew :lazy-match t :if-match all)
    (("1"
      (typepred
       "choose! (a_1: (domain(add((a!1, x!1), R!1)))): a!1 = a_1 OR R!1(a_1, x!1)")
      (("1" (reduce) nil nil) ("2" (reduce) nil nil)) nil)
     ("2"
      (typepred
       "choose! (x_1: (range(add((a!1, x!1), R!1)))): x!1 = x_1 OR R!1(a!1, x_1)")
      (("1" (reduce :if-match all) nil nil)
       ("2" (reduce :if-match all) nil nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (R!1 skolem-const-decl "rel" rel_as_fun nil)
    (x!1 skolem-const-decl "B" rel_as_fun nil)
    (a!1 skolem-const-decl "A" rel_as_fun nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (choose const-decl "(p)" sets nil)
    (A formal-type-decl nil rel_as_fun nil)
    (B formal-type-decl nil rel_as_fun nil)
    (invapply const-decl "(domain(R))" rel_as_fun nil)
    (apply const-decl "(range(R))" rel_as_fun nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (injective const-decl "bool" rel_as_fun nil)
    (functional const-decl "bool" rel_as_fun nil)
    (range const-decl "setof[B]" rel_as_fun nil)
    (domain const-decl "setof[A]" rel_as_fun nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   shostak)
  (update_ok-1 nil 3386560094
   ("" (stew :lazy-match t :if-match all)
    (("1" (use "epsilon_ax[(domain(add((a!1, x!1), R!1)))]")
      (("1" (reduce) nil nil)
       ("2" (inst 1 "a!1") (("2" (reduce) nil nil)) nil))
      nil)
     ("2" (use "epsilon_ax[(range(add((a!1, x!1), R!1)))]")
      (("1" (reduce :if-match all) nil nil)
       ("2" (inst 1 "x!1") (("2" (reduce) nil nil)) nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (choose const-decl "(p)" sets nil)
    (A formal-type-decl nil rel_as_fun nil)
    (B formal-type-decl nil rel_as_fun nil)
    (invapply const-decl "(domain(R))" rel_as_fun nil)
    (apply const-decl "(range(R))" rel_as_fun nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (injective const-decl "bool" rel_as_fun nil)
    (functional const-decl "bool" rel_as_fun nil)
    (range const-decl "setof[B]" rel_as_fun nil)
    (domain const-decl "setof[A]" rel_as_fun nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   nil)))
(new_flight_db
 (seats_on_plane_TCC1 0
  (seats_on_plane_TCC1-1 nil 3386560094
   ("" (inst 1 "lambda (x:planes): fullset[seats]")
    (("" (grind) (("" (inst -1 "epsilon! (x:seats): true") nil)))) nil)
   ((member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (seats nonempty-type-decl nil new_flight_db nil)
    (planes nonempty-type-decl nil new_flight_db nil))
   nil))
 (pref_filled_TCC1 0
  (pref_filled_TCC1-1 nil 3386560094 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (flights nonempty-type-decl nil new_flight_db nil)
    (seats nonempty-type-decl nil new_flight_db nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (seats_on_flight const-decl "(nonempty?[seats])" new_flight_db nil)
    (passengers nonempty-type-decl nil new_flight_db nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (flight_db type-eq-decl nil new_flight_db nil))
   nil))
 (Next_seat_TCC1 0
  (Next_seat_TCC1-1 nil 3386560094 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (flights nonempty-type-decl nil new_flight_db nil)
    (seats nonempty-type-decl nil new_flight_db nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (seats_on_flight const-decl "(nonempty?[seats])" new_flight_db
     nil))
   nil))
 (Next_seat_TCC2 0
  (Next_seat_TCC2-1 nil 3386560094
   (""
    (inst 1 "lambda
 (db, flt, (pref: {p:preferences| not pref_filled(db,flt,p)})):
      choose! (s: (seats_on_flight(flt))):
      meets_pref(aircraft(flt), pref)(s)
          AND NOT seat_filled_on_flight(flt, db, s)")
    (("1" (grind) nil) ("2" (grind) nil)) nil)
   ((domain const-decl "setof[A]" rel_as_fun nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (functional const-decl "bool" rel_as_fun nil)
    (injective const-decl "bool" rel_as_fun nil)
    (choose const-decl "(p)" sets nil)
    (seat_filled_on_flight const-decl "bool" new_flight_db nil)
    (aircraft const-decl "planes" new_flight_db nil)
    (meets_pref const-decl "setof[(seats_on_plane(p))]" new_flight_db
     nil)
    (setof type-eq-decl nil defined_types nil)
    (seats_on_plane const-decl "(nonempty?[seats])" new_flight_db nil)
    (planes nonempty-type-decl nil new_flight_db nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pref_filled const-decl "bool" new_flight_db nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (preferences nonempty-type-decl nil new_flight_db nil)
    (flight_db type-eq-decl nil new_flight_db nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (passengers nonempty-type-decl nil new_flight_db nil)
    (seats_on_flight const-decl "(nonempty?[seats])" new_flight_db nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (seats nonempty-type-decl nil new_flight_db nil)
    (flights nonempty-type-decl nil new_flight_db nil))
   nil))
 (Next_seat_ax 0
  (Next_seat_ax-1 nil 3386560094
   ("" (expand "member") (("" (propax) nil)) nil)
   ((member const-decl "bool" sets nil)) nil))
 (Next_seat_ax_2 0
  (Next_seat_ax_2-1 nil 3386560094 ("" (reduce) nil nil)
   ((flight_db type-eq-decl nil new_flight_db nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (passengers nonempty-type-decl nil new_flight_db nil)
    (seats_on_flight const-decl "(nonempty?[seats])" new_flight_db nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (seats nonempty-type-decl nil new_flight_db nil)
    (flights nonempty-type-decl nil new_flight_db nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (Next_seat_ax_3_TCC1 0
  (Next_seat_ax_3_TCC1-1 nil 3386560094
   ("" (use "Next_seat_ax")
    (("" (expand "seats_on_flight")
      (("" (expand "member") (("" (propax) nil))))))
    nil)
   ((seats_on_flight const-decl "(nonempty?[seats])" new_flight_db nil)
    (member const-decl "bool" sets nil)
    (Next_seat_ax formula-decl nil new_flight_db nil))
   nil))
 (Next_seat_ax_3 0
  (Next_seat_ax_3-1 nil 3386560094 ("" (reduce) nil nil) nil nil))
 (Make_assn_TCC1 0
  (Make_assn_TCC1-2 "" 3386562543
   ("" (skosimp)
    (("" (typepred "db!1(flt!1)")
      ((""
        (stew :exclude ("domain" "range" "apply" "invapply" "part_inj")
         :lemmas ("update_ok[(seats_on_flight(flt!1)),passengers]"))
        ((""
          (stew :exclude
           ("domain" "range" "apply" "invapply" "part_inj") :lemmas
           ("update_ok[(seats_on_flight(flt!1)),passengers]"
            "Next_seat_ax_2"))
          nil nil))
        nil))
      nil))
    nil)
   ((flight_db type-eq-decl nil new_flight_db nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (passengers nonempty-type-decl nil new_flight_db nil)
    (seats_on_flight const-decl "(nonempty?[seats])" new_flight_db nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (flights nonempty-type-decl nil new_flight_db nil)
    (seats nonempty-type-decl nil new_flight_db nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Next_seat_ax_2 formula-decl nil new_flight_db nil)
    (member const-decl "bool" sets nil)
    (pass_on_flight const-decl "bool" new_flight_db nil)
    (update_ok formula-decl nil rel_as_fun nil)
    (Next_seat const-decl "{s: (seats_on_flight(flt)) |
         meets_pref(aircraft(flt), pref)(s) AND
          NOT seat_filled_on_flight(flt, db, s)}" new_flight_db nil)
    (seat_filled_on_flight const-decl "bool" new_flight_db nil)
    (aircraft const-decl "planes" new_flight_db nil)
    (meets_pref const-decl "setof[(seats_on_plane(p))]" new_flight_db
     nil)
    (setof type-eq-decl nil defined_types nil)
    (seats_on_plane const-decl "(nonempty?[seats])" new_flight_db nil)
    (planes nonempty-type-decl nil new_flight_db nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pref_filled const-decl "bool" new_flight_db nil)
    (preferences nonempty-type-decl nil new_flight_db nil))
   shostak)
  (Make_assn_TCC1-1 nil 3386560094 ("" (subtype-tcc) nil nil)
   ((flight_db type-eq-decl nil new_flight_db nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (passengers nonempty-type-decl nil new_flight_db nil)
    (seats_on_flight const-decl "(nonempty?[seats])" new_flight_db nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (flights nonempty-type-decl nil new_flight_db nil)
    (seats nonempty-type-decl nil new_flight_db nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Next_seat_ax_2 formula-decl nil new_flight_db nil)
    (member const-decl "bool" sets nil)
    (pass_on_flight const-decl "bool" new_flight_db nil)
    (update_ok formula-decl nil rel_as_fun nil)
    (Next_seat const-decl "{s: (seats_on_flight(flt)) |
         meets_pref(aircraft(flt), pref)(s) AND
          NOT seat_filled_on_flight(flt, db, s)}" new_flight_db nil)
    (seat_filled_on_flight const-decl "bool" new_flight_db nil)
    (aircraft const-decl "planes" new_flight_db nil)
    (meets_pref const-decl "setof[(seats_on_plane(p))]" new_flight_db
     nil)
    (setof type-eq-decl nil defined_types nil)
    (seats_on_plane const-decl "(nonempty?[seats])" new_flight_db nil)
    (planes nonempty-type-decl nil new_flight_db nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pref_filled const-decl "bool" new_flight_db nil)
    (preferences nonempty-type-decl nil new_flight_db nil))
   nil))
 (Make_Cancel 0
  (Make_Cancel-1 nil 3386560094
   ("" (skosimp)
    (("" (apply-extensionality :hide? t)
      (("" (apply-extensionality :hide? t)
        (("" (typepred "x!2") (("" (grind) nil))))))))
    nil)
   ((flights nonempty-type-decl nil new_flight_db nil)
    (seats nonempty-type-decl nil new_flight_db nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (seats_on_flight const-decl "(nonempty?[seats])" new_flight_db nil)
    (passengers nonempty-type-decl nil new_flight_db nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (Make_assn const-decl "flight_db" new_flight_db nil)
    (preferences nonempty-type-decl nil new_flight_db nil)
    (Cancel_assn const-decl "flight_db" new_flight_db nil)
    (flight_db type-eq-decl nil new_flight_db nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (domain const-decl "setof[A]" rel_as_fun nil)
    (member const-decl "bool" sets nil)
    (seat_filled_on_flight const-decl "bool" new_flight_db nil)
    (pref_filled const-decl "bool" new_flight_db nil)
    (range const-decl "setof[B]" rel_as_fun nil)
    (pass_on_flight const-decl "bool" new_flight_db nil)
    (planes nonempty-type-decl nil new_flight_db nil)
    (seats_on_plane const-decl "(nonempty?[seats])" new_flight_db nil)
    (aircraft const-decl "planes" new_flight_db nil)
    (flt!1 skolem-const-decl "flights" new_flight_db nil)
    (x!1 skolem-const-decl "flights" new_flight_db nil)
    (x!2 skolem-const-decl "(seats_on_flight(x!1))" new_flight_db nil)
    (add const-decl "(nonempty?)" sets nil)
    (reldel_2 const-decl "(part_inj)" rel_as_fun nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (Cancel_putative 0
  (Cancel_putative-1 nil 3386560094 ("" (grind) nil nil)
   ((Cancel_assn const-decl "flight_db" new_flight_db nil)
    (reldel_2 const-decl "(part_inj)" rel_as_fun nil)
    (range const-decl "setof[B]" rel_as_fun nil)
    (member const-decl "bool" sets nil)
    (pass_on_flight const-decl "bool" new_flight_db nil))
   nil))
 (Make_putative 0
  (Make_putative-3 "" 3595446567
   ("" (grind :if-match nil)
    (("1" (inst?)
      (("1" (inst?) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
      nil)
     ("2" (inst? 3 :where 3) (("2" (reduce) nil nil)) nil))
    nil)
   nil shostak)
  (Make_putative-2 "" 3386562988
   ("" (grind :if-match nil)
    (("1" (inst?) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
     ("2" (inst? 3 :where 3) (("2" (reduce) nil nil)) nil))
    nil)
   ((preferences nonempty-type-decl nil new_flight_db nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (planes nonempty-type-decl nil new_flight_db nil)
    (seats_on_plane const-decl "(nonempty?[seats])" new_flight_db nil)
    (setof type-eq-decl nil defined_types nil)
    (meets_pref const-decl "setof[(seats_on_plane(p))]" new_flight_db
     nil)
    (aircraft const-decl "planes" new_flight_db nil)
    (Next_seat const-decl "{s: (seats_on_flight(flt)) |
         meets_pref(aircraft(flt), pref)(s) AND
          NOT seat_filled_on_flight(flt, db, s)}" new_flight_db nil)
    (db!1 skolem-const-decl "flight_db" new_flight_db nil)
    (pref!1 skolem-const-decl "preferences" new_flight_db nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (flt!1 skolem-const-decl "flights" new_flight_db nil)
    (injective const-decl "bool" rel_as_fun nil)
    (functional const-decl "bool" rel_as_fun nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (flights nonempty-type-decl nil new_flight_db nil)
    (seats nonempty-type-decl nil new_flight_db nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (seats_on_flight const-decl "(nonempty?[seats])" new_flight_db nil)
    (passengers nonempty-type-decl nil new_flight_db nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (flight_db type-eq-decl nil new_flight_db nil)
    (add const-decl "(nonempty?)" sets nil)
    (Make_assn const-decl "flight_db" new_flight_db nil)
    (pass_on_flight const-decl "bool" new_flight_db nil)
    (range const-decl "setof[B]" rel_as_fun nil)
    (pref_filled const-decl "bool" new_flight_db nil)
    (seat_filled_on_flight const-decl "bool" new_flight_db nil)
    (member const-decl "bool" sets nil)
    (domain const-decl "setof[A]" rel_as_fun nil))
   shostak)
  (Make_putative-1 nil 3386560094
   ("" (grind :if-match nil)
    (("1" (inst?) (("1" (inst?) (("1" (assert) nil)))))
     ("2" (inst? 3 :where 3) (("1" (assert) nil) ("2" (reduce) nil))))
    nil)
   ((rel type-eq-decl nil rel_as_fun nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (flight_db type-eq-decl nil new_flight_db nil)
    (preferences nonempty-type-decl nil new_flight_db nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (planes nonempty-type-decl nil new_flight_db nil)
    (seats_on_plane const-decl "(nonempty?[seats])" new_flight_db nil)
    (setof type-eq-decl nil defined_types nil)
    (meets_pref const-decl "setof[(seats_on_plane(p))]" new_flight_db
     nil)
    (aircraft const-decl "planes" new_flight_db nil)
    (Next_seat const-decl "{s: (seats_on_flight(flt)) |
         meets_pref(aircraft(flt), pref)(s) AND
          NOT seat_filled_on_flight(flt, db, s)}" new_flight_db nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (passengers nonempty-type-decl nil new_flight_db nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (flights nonempty-type-decl nil new_flight_db nil)
    (seats nonempty-type-decl nil new_flight_db nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (seats_on_flight const-decl "(nonempty?[seats])" new_flight_db nil)
    (add const-decl "(nonempty?)" sets nil)
    (Make_assn const-decl "flight_db" new_flight_db nil)
    (pass_on_flight const-decl "bool" new_flight_db nil)
    (range const-decl "setof[B]" rel_as_fun nil)
    (pref_filled const-decl "bool" new_flight_db nil)
    (seat_filled_on_flight const-decl "bool" new_flight_db nil)
    (member const-decl "bool" sets nil)
    (domain const-decl "setof[A]" rel_as_fun nil))
   nil))
 (Lookup_TCC1 0
  (Lookup_TCC1-1 nil 3386560094 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (passengers nonempty-type-decl nil new_flight_db nil)
    (flights nonempty-type-decl nil new_flight_db nil)
    (seats nonempty-type-decl nil new_flight_db nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (seats_on_flight const-decl "(nonempty?[seats])" new_flight_db nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (flight_db type-eq-decl nil new_flight_db nil)
    (pass_on_flight const-decl "bool" new_flight_db nil)
    (member const-decl "bool" sets nil)
    (range const-decl "setof[B]" rel_as_fun nil))
   nil))
 (Lookup_putative_TCC1 0
  (Lookup_putative_TCC1-1 nil 3386560094
   ("" (skosimp) (("" (use "Make_putative") (("" (assert) nil)))) nil)
   ((Make_putative formula-decl nil new_flight_db nil)
    (preferences nonempty-type-decl nil new_flight_db nil)
    (flight_db type-eq-decl nil new_flight_db nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (passengers nonempty-type-decl nil new_flight_db nil)
    (seats_on_flight const-decl "(nonempty?[seats])" new_flight_db nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (seats nonempty-type-decl nil new_flight_db nil)
    (flights nonempty-type-decl nil new_flight_db nil))
   nil))
 (Lookup_putative_TCC2 0
  (Lookup_putative_TCC2-1 nil 3386560094
   ("" (skosimp)
    ((""
      (typepred "Lookup(flt!1,
                                               pass!1,
                                               Make_assn(flt!1,
                                                         pass!1,
                                                         pref!1, db!1))")
      (("1" (expand "seats_on_flight") (("1" (propax) nil)))
       ("2" (use "Make_putative") (("2" (assert) nil))))))
    nil)
   ((Make_assn const-decl "flight_db" new_flight_db nil)
    (preferences nonempty-type-decl nil new_flight_db nil)
    (Lookup const-decl "(seats_on_flight(flt))" new_flight_db nil)
    (pass_on_flight const-decl "bool" new_flight_db nil)
    (flight_db type-eq-decl nil new_flight_db nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (passengers nonempty-type-decl nil new_flight_db nil)
    (seats_on_flight const-decl "(nonempty?[seats])" new_flight_db nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (seats nonempty-type-decl nil new_flight_db nil)
    (flights nonempty-type-decl nil new_flight_db nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (Lookup_putative 0
  (Lookup_putative-1 nil 3386560094
   ("" (skosimp)
    (("" (typepred "db!1(flt!1)")
      (("" (typepred "Next_seat(db!1, flt!1, pref!1)")
        (("1"
          (stew :exclude
           ("domain" "range" "apply" "invapply" "part_inj") :lemmas
           ("update_ok[(seats_on_flight(flt!1)),passengers]"))
          nil nil)
         ("2" (propax) nil nil))
        nil))
      nil))
    nil)
   ((flight_db type-eq-decl nil new_flight_db nil)
    (part_inj const-decl "bool" rel_as_fun nil)
    (rel type-eq-decl nil rel_as_fun nil)
    (passengers nonempty-type-decl nil new_flight_db nil)
    (seats_on_flight const-decl "(nonempty?[seats])" new_flight_db nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (flights nonempty-type-decl nil new_flight_db nil)
    (seats nonempty-type-decl nil new_flight_db nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (update_ok formula-decl nil rel_as_fun nil)
    (Lookup const-decl "(seats_on_flight(flt))" new_flight_db nil)
    (Make_assn const-decl "flight_db" new_flight_db nil)
    (pass_on_flight const-decl "bool" new_flight_db nil)
    (member const-decl "bool" sets nil)
    (preferences nonempty-type-decl nil new_flight_db nil)
    (pref_filled const-decl "bool" new_flight_db nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (planes nonempty-type-decl nil new_flight_db nil)
    (seats_on_plane const-decl "(nonempty?[seats])" new_flight_db nil)
    (setof type-eq-decl nil defined_types nil)
    (meets_pref const-decl "setof[(seats_on_plane(p))]" new_flight_db
     nil)
    (aircraft const-decl "planes" new_flight_db nil)
    (seat_filled_on_flight const-decl "bool" new_flight_db nil)
    (Next_seat const-decl "{s: (seats_on_flight(flt)) |
         meets_pref(aircraft(flt), pref)(s) AND
          NOT seat_filled_on_flight(flt, db, s)}" new_flight_db nil))
   nil)))

