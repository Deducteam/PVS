(ops
 (Cancel_assn_inv 0
  (Cancel_assn_inv-1 nil 3386558315 ("" (lazy-grind) nil nil)
   ((Cancel_assn const-decl "flt_db" ops nil)
    (/= const-decl "boolean" notequal nil)
    (db_invariant const-decl "bool" ops nil)
    (uniqueness const-decl "bool" ops nil)
    (existence const-decl "bool" ops nil)
    (member const-decl "bool" sets nil)
    (passenger nonempty-type-decl nil basic_defs nil)
    (row type-eq-decl nil basic_defs nil)
    (position type-eq-decl nil basic_defs nil)
    (seat_assignment type-eq-decl nil basic_defs nil)
    (flight type-decl nil basic_defs nil))
   nil))
 (MAe 0
  (MAe-1 nil 3386558315
   ("" (stew :lazy-match? t :lemmas "Next_seat_ax") nil nil)
   ((Next_seat_ax formula-decl nil ops nil)
    (flt_db type-eq-decl nil basic_defs nil)
    (flight_assignments type-eq-decl nil basic_defs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (seat_assignment type-eq-decl nil basic_defs nil)
    (position type-eq-decl nil basic_defs nil)
    (row type-eq-decl nil basic_defs nil)
    (passenger nonempty-type-decl nil basic_defs nil)
    (flight type-decl nil basic_defs nil)
    (preference type-decl nil basic_defs nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (pref_filled const-decl "bool" ops nil)
    (existence const-decl "bool" ops nil)
    (pass_on_flight const-decl "bool" ops nil)
    (Make_assn const-decl "flt_db" ops nil))
   nil))
 (MAu 0
  (MAu-1 nil 3386558315 ("" (stew :lazy-match t) nil nil)
   ((Make_assn const-decl "flt_db" ops nil)
    (pass_on_flight const-decl "bool" ops nil)
    (pref_filled const-decl "bool" ops nil)
    (uniqueness const-decl "bool" ops nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (Next_seat const-decl
     "[flt_db, flight, preference -> [row, position]]" ops nil)
    (nposits const-decl "posnat" basic_defs nil)
    (nrows const-decl "posnat" basic_defs nil)
    (<= const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (preference type-decl nil basic_defs nil)
    (flt_db type-eq-decl nil basic_defs nil)
    (flight_assignments type-eq-decl nil basic_defs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (flight type-decl nil basic_defs nil)
    (seat_assignment type-eq-decl nil basic_defs nil)
    (position type-eq-decl nil basic_defs nil)
    (row type-eq-decl nil basic_defs nil)
    (passenger nonempty-type-decl nil basic_defs nil))
   nil))
 (Make_assn_inv 0
  (Make_assn_inv-1 nil 3386558315
   ("" (grind :defs nil :rewrites ("db_invariant" "MAu" "MAe")) nil
    nil)
   ((MAu formula-decl nil ops nil) (MAe formula-decl nil ops nil)
    (db_invariant const-decl "bool" ops nil))
   nil))
 (initial_state_inv 0
  (initial_state_inv-1 nil 3386558315 ("" (grind) nil nil)
   ((initial_state const-decl "flight_assignments" basic_defs nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (existence const-decl "bool" ops nil)
    (uniqueness const-decl "bool" ops nil)
    (db_invariant const-decl "bool" ops nil))
   nil))
 (Cancel_inv_one_per_seat 0
  (Cancel_inv_one_per_seat-1 nil 3386558315 ("" (grind) nil nil)
   ((passenger nonempty-type-decl nil basic_defs nil)
    (row type-eq-decl nil basic_defs nil)
    (position type-eq-decl nil basic_defs nil)
    (seat_assignment type-eq-decl nil basic_defs nil)
    (flight type-decl nil basic_defs nil)
    (member const-decl "bool" sets nil)
    (one_per_seat const-decl "bool" ops nil)
    (/= const-decl "boolean" notequal nil)
    (Cancel_assn const-decl "flt_db" ops nil))
   nil))
 (Make_inv_one_per_seat 0
  (Make_inv_one_per_seat-1 nil 3386558315
   ("" (stew :lazy-match t :if-match all :lemmas "Next_seat_ax_2") nil
    nil)
   ((Next_seat_ax_2 formula-decl nil ops nil)
    (flt_db type-eq-decl nil basic_defs nil)
    (flight_assignments type-eq-decl nil basic_defs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (seat_assignment type-eq-decl nil basic_defs nil)
    (position type-eq-decl nil basic_defs nil)
    (row type-eq-decl nil basic_defs nil)
    (passenger nonempty-type-decl nil basic_defs nil)
    (flight type-decl nil basic_defs nil)
    (preference type-decl nil basic_defs nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (nrows const-decl "posnat" basic_defs nil)
    (nposits const-decl "posnat" basic_defs nil)
    (Next_seat const-decl
     "[flt_db, flight, preference -> [row, position]]" ops nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (pref_filled const-decl "bool" ops nil)
    (one_per_seat const-decl "bool" ops nil)
    (pass_on_flight const-decl "bool" ops nil)
    (Make_assn const-decl "flt_db" ops nil))
   nil))
 (initial_one_per_seat 0
  (initial_one_per_seat-1 nil 3386558315 ("" (grind) nil nil)
   ((initial_state const-decl "flight_assignments" basic_defs nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (one_per_seat const-decl "bool" ops nil))
   nil))
 (Make_Cancel 0
  (Make_Cancel-1 nil 3386558315
   (""
    (grind :defs nil :rewrites
     ("Cancel_assn" "pass_on_flight" "Make_assn"))
    (("" (apply-extensionality :hide? t)
      (("" (apply-extensionality :hide? t)
        (("" (stew :lazy-match t) nil))))))
    nil)
   ((flight type-decl nil basic_defs nil)
    (passenger nonempty-type-decl nil basic_defs nil)
    (row type-eq-decl nil basic_defs nil)
    (position type-eq-decl nil basic_defs nil)
    (seat_assignment type-eq-decl nil basic_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Make_assn const-decl "flt_db" ops nil)
    (flt_db type-eq-decl nil basic_defs nil)
    (flight_assignments type-eq-decl nil basic_defs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (preference type-decl nil basic_defs nil)
    (pref_filled const-decl "bool" ops nil)
    (add const-decl "(nonempty?)" sets nil)
    (Cancel_assn const-decl "flt_db" ops nil)
    (pass_on_flight const-decl "bool" ops nil))
   nil))
 (Cancel_putative 0
  (Cancel_putative-1 nil 3386558315 ("" (grind) nil nil)
   ((member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (Cancel_assn const-decl "flt_db" ops nil))
   nil))
 (Make_putative 0
  (Make_putative-2 "" 3594920043
   ("" (grind :if-match nil)
    (("" (case "(EXISTS a: pass(a) = pas!1 AND db!1(flt!1)(a))")
      (("1" (grind) nil nil)
       ("2"
        (inst 3 "(# seat := Next_seat(db!1, flt!1, pref!1),
                    pass := pas!1 #)")
        (("2" (grind) nil nil)) nil))
      nil))
    nil)
   nil shostak)
  (Make_putative-1 nil 3386558315 ("" (grind) nil nil)
   ((flt_db type-eq-decl nil basic_defs nil)
    (flight_assignments type-eq-decl nil basic_defs nil)
    (flight type-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (seat_assignment type-eq-decl nil basic_defs nil)
    (position type-eq-decl nil basic_defs nil)
    (row type-eq-decl nil basic_defs nil)
    (passenger nonempty-type-decl nil basic_defs nil)
    (Next_seat const-decl
     "[flt_db, flight, preference -> [row, position]]" ops nil)
    (nposits const-decl "posnat" basic_defs nil)
    (nrows const-decl "posnat" basic_defs nil)
    (<= const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (preference type-decl nil basic_defs nil)
    (add const-decl "(nonempty?)" sets nil)
    (Make_assn const-decl "flt_db" ops nil)
    (pass_on_flight const-decl "bool" ops nil)
    (pref_filled const-decl "bool" ops nil)
    (member const-decl "bool" sets nil))
   nil))
 (Lookup_putative 0
  (Lookup_putative-3 "" 3594919151
   ("" (grind :if-match nil)
    (("" (use "epsilon_ax[seat_assignment]")
      (("" (ground)
        (("1" (grind) nil nil)
         ("2" (replace -1 :dir rl :hide? t)
          (("2" (beta *)
            (("2" (use "Next_seat_ax_3") (("2" (ground) nil nil)) nil))
            nil))
          nil)
         ("3" (grind) nil nil) ("4" (grind) nil nil))
        nil))
      nil))
    nil)
   nil shostak)
  (Lookup_putative-2 "" 3386558501
   ("" (grind :if-match nil)
    (("1" (grind) nil nil)
     ("2" (use "epsilon_ax[seat_assignment]")
      (("2" (ground)
        (("1" (replace -1 :dir rl :hide? t)
          (("1" (beta *)
            (("1" (use "Next_seat_ax_3")
              (("1" (ground) (("1" (inst?) (("1" (prop) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil) ("3" (grind) nil nil))
        nil))
      nil))
    nil)
   ((seat_assignment type-eq-decl nil basic_defs nil)
    (position type-eq-decl nil basic_defs nil)
    (row type-eq-decl nil basic_defs nil)
    (passenger nonempty-type-decl nil basic_defs nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (Next_seat const-decl
     "[flt_db, flight, preference -> [row, position]]" ops nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (flt_db type-eq-decl nil basic_defs nil)
    (flight_assignments type-eq-decl nil basic_defs nil)
    (aircraft const-decl "[flight -> plane]" basic_defs nil)
    (flight type-decl nil basic_defs nil)
    (meets_pref const-decl "pred[[plane, [row, position], preference]]"
     basic_defs nil)
    (preference type-decl nil basic_defs nil)
    (plane nonempty-type-decl nil basic_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nposits const-decl "posnat" basic_defs nil)
    (nrows const-decl "posnat" basic_defs nil)
    (<= const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (Next_seat_ax_3 formula-decl nil ops nil)
    (Lookup const-decl "[row, position]" ops nil)
    (add const-decl "(nonempty?)" sets nil)
    (Make_assn const-decl "flt_db" ops nil)
    (pass_on_flight const-decl "bool" ops nil)
    (pref_filled const-decl "bool" ops nil)
    (member const-decl "bool" sets nil))
   shostak)
  (Lookup_putative-1 nil 3386558315
   ("" (grind :if-match nil)
    (("1" (grind) nil nil)
     ("2" (use "epsilon_ax[seat_assignment]")
      (("2" (ground)
        (("1" (ground)
          (("1" (replace -1 :dir rl :hide? t)
            (("1" (beta *)
              (("1" (use "Next_seat_ax_3")
                (("1" (ground)
                  (("1" (inst?) (("1" (prop) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((epsilon_ax formula-decl nil epsilons nil)
    (Next_seat const-decl
     "[flt_db, flight, preference -> [row, position]]" ops nil)
    (preference type-decl nil basic_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Next_seat_ax_3 formula-decl nil ops nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (nrows const-decl "posnat" basic_defs nil)
    (nposits const-decl "posnat" basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (flt_db type-eq-decl nil basic_defs nil)
    (flight_assignments type-eq-decl nil basic_defs nil)
    (flight type-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (seat_assignment type-eq-decl nil basic_defs nil)
    (position type-eq-decl nil basic_defs nil)
    (row type-eq-decl nil basic_defs nil)
    (passenger nonempty-type-decl nil basic_defs nil)
    (Lookup const-decl "[row, position]" ops nil)
    (add const-decl "(nonempty?)" sets nil)
    (Make_assn const-decl "flt_db" ops nil)
    (pass_on_flight const-decl "bool" ops nil)
    (pref_filled const-decl "bool" ops nil)
    (member const-decl "bool" sets nil))
   nil))
 (Lookup_putative2_TCC1 0
  (Lookup_putative2_TCC1-1 nil 3386558315
   ("" (stew :lemmas "Next_seat_ax_3") nil nil)
   ((Next_seat_ax_3 formula-decl nil ops nil)
    (preference type-decl nil basic_defs nil)
    (flt_db type-eq-decl nil basic_defs nil)
    (flight_assignments type-eq-decl nil basic_defs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (seat_assignment type-eq-decl nil basic_defs nil)
    (position type-eq-decl nil basic_defs nil)
    (row type-eq-decl nil basic_defs nil)
    (passenger nonempty-type-decl nil basic_defs nil)
    (flight type-decl nil basic_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (nrows const-decl "posnat" basic_defs nil)
    (nposits const-decl "posnat" basic_defs nil)
    (Next_seat const-decl
     "[flt_db, flight, preference -> [row, position]]" ops nil)
    (add const-decl "(nonempty?)" sets nil)
    (Make_assn const-decl "flt_db" ops nil)
    (pass_on_flight const-decl "bool" ops nil)
    (pref_filled const-decl "bool" ops nil)
    (member const-decl "bool" sets nil))
   nil))
 (Lookup_putative2 0
  (Lookup_putative2-2 "" 3459650221
   ("" (stew :lemmas ("Next_seat_ax_3" "epsilon_ax[seat_assignment]"))
    nil nil)
   ((Next_seat_ax_3 formula-decl nil ops nil)
    (preference type-decl nil basic_defs nil)
    (flt_db type-eq-decl nil basic_defs nil)
    (flight_assignments type-eq-decl nil basic_defs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (seat_assignment type-eq-decl nil basic_defs nil)
    (position type-eq-decl nil basic_defs nil)
    (row type-eq-decl nil basic_defs nil)
    (passenger nonempty-type-decl nil basic_defs nil)
    (flight type-decl nil basic_defs nil)
    (member const-decl "bool" sets nil)
    (pref_filled const-decl "bool" ops nil)
    (pass_on_flight const-decl "bool" ops nil)
    (Make_assn const-decl "flt_db" ops nil)
    (add const-decl "(nonempty?)" sets nil)
    (Lookup2 const-decl "[row, position]" ops nil)
    (epsilon const-decl "T" epsilons nil)
    (Next_seat const-decl
     "[flt_db, flight, preference -> [row, position]]" ops nil)
    (nposits const-decl "posnat" basic_defs nil)
    (nrows const-decl "posnat" basic_defs nil)
    (<= const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon_ax formula-decl nil epsilons nil))
   shostak)
  (Lookup_putative2-1 nil 3386558315
   (""
    (stew :lemmas ("Next_seat_ax_3" "choose_member[seat_assignment]"))
    nil nil)
   ((Next_seat_ax_3 formula-decl nil ops nil)
    (preference type-decl nil basic_defs nil)
    (flt_db type-eq-decl nil basic_defs nil)
    (flight_assignments type-eq-decl nil basic_defs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (seat_assignment type-eq-decl nil basic_defs nil)
    (position type-eq-decl nil basic_defs nil)
    (row type-eq-decl nil basic_defs nil)
    (passenger nonempty-type-decl nil basic_defs nil)
    (flight type-decl nil basic_defs nil)
    (pref_filled const-decl "bool" ops nil)
    (pass_on_flight const-decl "bool" ops nil)
    (Make_assn const-decl "flt_db" ops nil)
    (add const-decl "(nonempty?)" sets nil)
    (Lookup2 const-decl "[row, position]" ops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (Next_seat const-decl
     "[flt_db, flight, preference -> [row, position]]" ops nil)
    (nposits const-decl "posnat" basic_defs nil)
    (nrows const-decl "posnat" basic_defs nil)
    (<= const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (Next_seat_th 0
  (Next_seat_th-2 "" 3386558819
   ("" (skosimp)
    (("" (expand* "pref_filled" "Next_seat_defn")
      (("" (skosimp)
        (("" (use "epsilon_ax[[row,position]]")
          (("" (ground)
            (("" (hide 3)
              (("" (inst 1 "seat!1")
                (("" (prop)
                  (("1" (use "new_ax") (("1" (prop) nil nil)) nil)
                   ("2" (skolem!)
                    (("2" (inst?) (("2" (prop) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Next_seat_defn const-decl "[row, position]" ops nil)
    (pref_filled const-decl "bool" ops nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (nrows const-decl "posnat" basic_defs nil)
    (row type-eq-decl nil basic_defs nil)
    (nposits const-decl "posnat" basic_defs nil)
    (position type-eq-decl nil basic_defs nil)
    (meets_pref const-decl "pred[[plane, [row, position], preference]]"
     basic_defs nil)
    (preference type-decl nil basic_defs nil)
    (/= const-decl "boolean" notequal nil)
    (flt_db type-eq-decl nil basic_defs nil)
    (flight_assignments type-eq-decl nil basic_defs nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (seat_assignment type-eq-decl nil basic_defs nil)
    (passenger nonempty-type-decl nil basic_defs nil)
    (aircraft const-decl "[flight -> plane]" basic_defs nil)
    (flight type-decl nil basic_defs nil)
    (seat_exists const-decl "pred[[plane, [row, position]]]" basic_defs
     nil)
    (plane nonempty-type-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (new_ax formula-decl nil ops nil))
   shostak)
  (Next_seat_th-1 nil 3386558315
   ("" (skosimp)
    (("" (expand* "pref_filled" "Next_seat_defn")
      (("" (skosimp)
        (("" (use "epsilon_ax[[row,position]]")
          (("" (ground)
            (("1" (ground) nil)
             ("2" (hide 3)
              (("2" (inst 1 "seat!1")
                (("2" (prop)
                  (("1" (use "new_ax") (("1" (prop) nil)))
                   ("2" (skolem!)
                    (("2" (inst?) (("2" (prop) nil))))))))))))))))))))
    nil)
   ((Next_seat_defn const-decl "[row, position]" ops nil)
    (pref_filled const-decl "bool" ops nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (nrows const-decl "posnat" basic_defs nil)
    (row type-eq-decl nil basic_defs nil)
    (nposits const-decl "posnat" basic_defs nil)
    (position type-eq-decl nil basic_defs nil)
    (meets_pref const-decl "pred[[plane, [row, position], preference]]"
     basic_defs nil)
    (preference type-decl nil basic_defs nil)
    (/= const-decl "boolean" notequal nil)
    (flt_db type-eq-decl nil basic_defs nil)
    (flight_assignments type-eq-decl nil basic_defs nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (seat_assignment type-eq-decl nil basic_defs nil)
    (passenger nonempty-type-decl nil basic_defs nil)
    (aircraft const-decl "[flight -> plane]" basic_defs nil)
    (flight type-decl nil basic_defs nil)
    (seat_exists const-decl "pred[[plane, [row, position]]]" basic_defs
     nil)
    (plane nonempty-type-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (new_ax formula-decl nil ops nil))
   nil))
 (Next_seat_th_2 0
  (Next_seat_th_2-1 nil 3386558315
   ("" (grind :if-match nil)
    (("" (use "epsilon_ax[[row,position]]")
      (("" (ground)
        (("1" (reduce) nil)
         ("2" (inst?)
          (("2" (ground)
            (("1" (use "new_ax") (("1" (assert) nil)))
             ("2" (skosimp)
              (("2" (inst?) (("2" (assert) nil))))))))))))))
    nil)
   ((epsilon_ax formula-decl nil epsilons nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (nrows const-decl "posnat" basic_defs nil)
    (row type-eq-decl nil basic_defs nil)
    (nposits const-decl "posnat" basic_defs nil)
    (position type-eq-decl nil basic_defs nil)
    (meets_pref const-decl "pred[[plane, [row, position], preference]]"
     basic_defs nil)
    (preference type-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (flt_db type-eq-decl nil basic_defs nil)
    (flight_assignments type-eq-decl nil basic_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (seat_assignment type-eq-decl nil basic_defs nil)
    (passenger nonempty-type-decl nil basic_defs nil)
    (aircraft const-decl "[flight -> plane]" basic_defs nil)
    (flight type-decl nil basic_defs nil)
    (seat_exists const-decl "pred[[plane, [row, position]]]" basic_defs
     nil)
    (plane nonempty-type-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (new_ax formula-decl nil ops nil)
    (Next_seat_defn const-decl "[row, position]" ops nil)
    (/= const-decl "boolean" notequal nil)
    (pref_filled const-decl "bool" ops nil)
    (member const-decl "bool" sets nil))
   nil))
 (Next_seat_th_3 0
  (Next_seat_th_3-1 nil 3386558315
   ("" (grind)
    (("" (use "epsilon_ax[[row,position]]")
      (("" (ground)
        (("" (inst?) (("" (use "new_ax") (("" (reduce) nil))))))))))
    nil)
   ((epsilon_ax formula-decl nil epsilons nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (nrows const-decl "posnat" basic_defs nil)
    (row type-eq-decl nil basic_defs nil)
    (nposits const-decl "posnat" basic_defs nil)
    (position type-eq-decl nil basic_defs nil)
    (meets_pref const-decl "pred[[plane, [row, position], preference]]"
     basic_defs nil)
    (preference type-decl nil basic_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (flt_db type-eq-decl nil basic_defs nil)
    (flight_assignments type-eq-decl nil basic_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (seat_assignment type-eq-decl nil basic_defs nil)
    (passenger nonempty-type-decl nil basic_defs nil)
    (aircraft const-decl "[flight -> plane]" basic_defs nil)
    (flight type-decl nil basic_defs nil)
    (seat_exists const-decl "pred[[plane, [row, position]]]" basic_defs
     nil)
    (plane nonempty-type-decl nil basic_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (new_ax formula-decl nil ops nil)
    (Next_seat_defn const-decl "[row, position]" ops nil)
    (/= const-decl "boolean" notequal nil)
    (pref_filled const-decl "bool" ops nil)
    (member const-decl "bool" sets nil))
   nil)))

