half: THEORY

BEGIN

  even_nat: TYPE = {i:nat | EXISTS (j:nat): i = 2*j}

% +(p,q:even_nat): even_nat = p+q

%  JUDGEMENT + HAS_TYPE [even_nat, even_nat ->  even_nat]
%  JUDGEMENT 2 HAS_TYPE even_nat
%  JUDGEMENT * HAS_TYPE [nat,      even_nat ->  even_nat]
%  JUDGEMENT * HAS_TYPE [even_nat, nat      ->  even_nat]
  JUDGEMENT +(i,j : even_nat)  HAS_TYPE even_nat
  JUDGEMENT 2 HAS_TYPE even_nat
  JUDGEMENT *(i : nat, j : even_nat)  HAS_TYPE even_nat
  JUDGEMENT *(i : even_nat, j : nat)  HAS_TYPE even_nat

  ee: VAR even_nat

  half(ee): RECURSIVE nat =
     IF ee=0 THEN 0 ELSE half(ee-2) + 1 ENDIF
  MEASURE ee

  i: VAR nat
  half_twice: LEMMA  half(2 * i) = i

  half_halves: THEOREM 2 * half(ee) = ee

  test: THEOREM half(ee + ee) = ee

  even_int?(k: int): bool = EXISTS (j: int): k = 2*j
  even_int: TYPE = (even_int?)
  ii: VAR even_int

  even_prop: THEOREM forall (k:int): even_int?(k) OR even_int?(k-1)

  even_prop2: THEOREM forall (k:int): NOT (even_int?(k) AND even_int?(k-1))

  ihalf(ii): int = IF ii >= 0 THEN half(ii) ELSE -half(-ii) ENDIF

  JUDGEMENT even_nat SUBTYPE_OF even_int

  another_test: THEOREM 2 * ihalf(ee) = ee

  ghalf(n: int): int = IF even_int?(n) THEN ihalf(n) ELSE ihalf(n-1) ENDIF

  still_another: THEOREM ghalf(5) =2

  nhalf(i): RECURSIVE nat =
      IF i < 2 THEN 0 ELSE nhalf(i - 2) + 1 ENDIF
        MEASURE i

  twice_nhalf: THEOREM 2*nhalf(i) = i OR 2*nhalf(i) = i-1

END half
