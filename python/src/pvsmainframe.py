# -*- coding: US-ASCII -*-
#
# generated by wxGlade HG on Thu Jul  5 15:43:21 2012
#

import wx
from constants import LABEL_NEW, LABEL_OPEN, LABEL_SAVE, LABEL_SAVEALL, LABEL_SAVEAS, LABEL_QUIT, DOTDOTDOT, PVS_U
from constants import LABEL_UNDO, LABEL_SELECTALL, LABEL_COPY, LABEL_CUT, LABEL_PASTE, EMPTY_STRING, LABEL_FILE , LABEL_EDIT
from constants import LABEL_STARTPVS, LABEL_TYPECHECK, FRAME_TITLE, TAB_FILES, TAB_BUFFERS, LABEL_PROOF_PANEL, LABEL_PVS_CONSOLE
from images import *
from filesbuffersmanager import FilesAndBuffersManager
from filestreemanager import FilesTreeManager
from pvsricheditor import PVSRichEditor
from editornotebook import PVSNotebookManager
import wx.stc as stc

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

class PVSMainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PVSMainFrame.__init__
        kwds["style"] = wx.ICONIZE | wx.CAPTION | wx.MINIMIZE | wx.CLOSE_BOX | wx.MINIMIZE_BOX | wx.MAXIMIZE_BOX | wx.SYSTEM_MENU | wx.RESIZE_BORDER | wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)

        # Menu Bar
        self.pvsmainframemenubar = wx.MenuBar()
        fileMenu = wx.Menu()
        newFileMenuItem = fileMenu.Append(wx.ID_ANY, LABEL_NEW + DOTDOTDOT, EMPTY_STRING, wx.ITEM_NORMAL)
        openFileMenuItem = fileMenu.Append(wx.ID_ANY, LABEL_OPEN + DOTDOTDOT, EMPTY_STRING, wx.ITEM_NORMAL)
        saveFileMenuItem = fileMenu.Append(wx.ID_ANY, LABEL_SAVE, EMPTY_STRING, wx.ITEM_NORMAL)
        saveFileAsMenuItem = fileMenu.Append(wx.ID_ANY, LABEL_SAVEAS + DOTDOTDOT, EMPTY_STRING, wx.ITEM_NORMAL)
        quitMenuItem = fileMenu.Append(wx.ID_ANY, LABEL_QUIT, EMPTY_STRING, wx.ITEM_NORMAL)
        self.pvsmainframemenubar.Append(fileMenu, LABEL_FILE)
        editMenu = wx.Menu()
        undoMenuItem = editMenu.Append(wx.ID_ANY, LABEL_UNDO, EMPTY_STRING, wx.ITEM_NORMAL)
        selectAllMenuItem = editMenu.Append(wx.ID_ANY, LABEL_SELECTALL, EMPTY_STRING, wx.ITEM_NORMAL)
        cutMenuItem = editMenu.Append(wx.ID_ANY, LABEL_CUT, EMPTY_STRING, wx.ITEM_NORMAL)
        copyMenuItem = editMenu.Append(wx.ID_ANY, LABEL_COPY, EMPTY_STRING, wx.ITEM_NORMAL)
        pasteMenuItem = editMenu.Append(wx.ID_ANY, LABEL_PASTE, EMPTY_STRING, wx.ITEM_NORMAL)
        self.pvsmainframemenubar.Append(editMenu, LABEL_EDIT)
        pvsMenu = wx.Menu()
        changeContextMenuItem =  pvsMenu.Append(wx.ID_ANY, "Change Context...", EMPTY_STRING, wx.ITEM_NORMAL)
        restoreContextMenuItem = pvsMenu.Append(wx.ID_ANY, "Restore Context Automatically", EMPTY_STRING, wx.ITEM_CHECK)
        pvsMenu.AppendSeparator()
        startPVSMenuItem = pvsMenu.Append(wx.ID_ANY, LABEL_STARTPVS, EMPTY_STRING, wx.ITEM_NORMAL)
        typecheckMenuItem = pvsMenu.Append(wx.ID_ANY, LABEL_TYPECHECK, EMPTY_STRING, wx.ITEM_NORMAL)
        pvsMenu.AppendSeparator()
        setPVSLocationMenuItem = pvsMenu.Append(wx.ID_ANY, "Set PVS Location...", EMPTY_STRING, wx.ITEM_NORMAL)
        self.pvsmainframemenubar.Append(pvsMenu, PVS_U)
        self.SetMenuBar(self.pvsmainframemenubar)
        # Menu Bar end
        self.pvsmainframestatusbar = self.CreateStatusBar(1, 0)
        
        # Tool Bar
        self.pvsmainframetoolbar = wx.ToolBar(self, -1)
        self.SetToolBar(self.pvsmainframetoolbar)
        createNewFileToolbarItem = self.pvsmainframetoolbar.AddLabelTool(wx.ID_ANY, LABEL_NEW, getNewImage(), wx.NullBitmap, wx.ITEM_NORMAL, "Create a new pvs file", EMPTY_STRING)
        openFileToolbarItem = self.pvsmainframetoolbar.AddLabelTool(wx.ID_ANY, LABEL_OPEN, getOpenImage(), wx.NullBitmap, wx.ITEM_NORMAL, "Open a pvs file", EMPTY_STRING)
        saveFileToolbarItem = self.pvsmainframetoolbar.AddLabelTool(wx.ID_ANY, LABEL_SAVE, getSaveImage(), wx.NullBitmap, wx.ITEM_NORMAL, "Save the file", EMPTY_STRING)
        saveallFileToolbarItem = self.pvsmainframetoolbar.AddLabelTool(wx.ID_ANY, LABEL_SAVEALL, getSaveAllImage(), wx.NullBitmap, wx.ITEM_NORMAL, "Save All Files", EMPTY_STRING)
        self.pvsmainframetoolbar.AddSeparator()
        cutToolbarItem = self.pvsmainframetoolbar.AddLabelTool(wx.ID_ANY, LABEL_CUT, getCutImage(), wx.NullBitmap, wx.ITEM_NORMAL, "Cut text", EMPTY_STRING)
        copyToolbarItem = self.pvsmainframetoolbar.AddLabelTool(wx.ID_ANY, LABEL_COPY, getCopyImage(), wx.NullBitmap, wx.ITEM_NORMAL, "Copy text", EMPTY_STRING)
        pasteToolbarItem = self.pvsmainframetoolbar.AddLabelTool(wx.ID_ANY, LABEL_PASTE, getPasteImage(), wx.NullBitmap, wx.ITEM_NORMAL, "Paste text here", EMPTY_STRING)
        self.pvsmainframetoolbar.AddSeparator()
        startPVSToolbarItem = self.pvsmainframetoolbar.AddLabelTool(wx.ID_ANY, LABEL_STARTPVS, getStartPVSImage(), getStopPVSImage(), wx.ITEM_NORMAL, "Start pvs", EMPTY_STRING)
        typecheckToolbarItem = self.pvsmainframetoolbar.AddLabelTool(wx.ID_ANY, LABEL_TYPECHECK, getTypecheckImage(), wx.NullBitmap, wx.ITEM_NORMAL, "Parse and typecheck file", EMPTY_STRING)
        # Tool Bar end
        self.window_1 = wx.SplitterWindow(self, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER)
        self.window_1_pane_1 = wx.Panel(self.window_1, wx.ID_ANY)
        self.notebook_4 = wx.Notebook(self.window_1_pane_1, wx.ID_ANY, style=0)
        self.notebook_4_pane_1 = wx.Panel(self.notebook_4, wx.ID_ANY)
        self.filestree = wx.TreeCtrl(self.notebook_4_pane_1, wx.ID_ANY, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
        self.notebook_4_pane_2 = wx.Panel(self.notebook_4, wx.ID_ANY)
        self.bufferstree = wx.TreeCtrl(self.notebook_4_pane_2, wx.ID_ANY, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
        self.window_1_pane_2 = wx.Panel(self.window_1, wx.ID_ANY)
        self.prooflabel = wx.StaticText(self.window_1_pane_2, wx.ID_ANY, LABEL_PROOF_PANEL)
        self.prooftree = wx.TreeCtrl(self.window_1_pane_2, wx.ID_ANY, style=wx.TR_HAS_BUTTONS | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
        self.panel_2 = wx.Panel(self, wx.ID_ANY)
        
        self.pvsNotebookManager = PVSNotebookManager(self.panel_2, wx.ID_ANY, style=0)
        ##self.panel_3 = wx.Panel(self.pvsNotebookManager, wx.ID_ANY)
        ##self.pvseditor = PVSRichEditor(self.panel_3, wx.ID_ANY, style=wx.TE_MULTILINE | wx.HSCROLL | wx.TE_RICH | wx.TE_RICH2, markers = True)
        
        #self.pvseditor = wx.TextCtrl(self.pvsNotebookManager, wx.ID_ANY, EMPTY_STRING, style=wx.TE_MULTILINE | wx.HSCROLL | wx.TE_RICH | wx.TE_RICH2)
        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, LABEL_PVS_CONSOLE)
        self.panel_4 = wx.Panel(self.panel_1, wx.ID_ANY)
        self.pvsconsole = PVSRichEditor(self.panel_4, wx.ID_ANY)
        #self.pvsconsole = wx.TextCtrl(self.panel_4, wx.ID_ANY, EMPTY_STRING, style=wx.TE_PROCESS_ENTER | wx.TE_MULTILINE | wx.HSCROLL | wx.TE_RICH)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.onCreateNewFile, newFileMenuItem)
        self.Bind(wx.EVT_MENU, self.onOpenFile, openFileMenuItem)
        self.Bind(wx.EVT_MENU, self.onSaveFile, saveFileMenuItem)
        self.Bind(wx.EVT_MENU, self.onSaveAsFile, saveFileAsMenuItem)
        self.Bind(wx.EVT_MENU, self.onQuitFrame, quitMenuItem)
        self.Bind(wx.EVT_MENU, self.onUndo, undoMenuItem)
        self.Bind(wx.EVT_MENU, self.onSelectAll, selectAllMenuItem)
        self.Bind(wx.EVT_MENU, self.onCutText, cutMenuItem)
        self.Bind(wx.EVT_MENU, self.onCopyText, copyMenuItem)
        self.Bind(wx.EVT_MENU, self.onPasteText, pasteMenuItem)
        self.Bind(wx.EVT_MENU, self.onChangeContext, changeContextMenuItem)
        self.Bind(wx.EVT_MENU, self.onRestoreContextAutomatically, restoreContextMenuItem)
        self.Bind(wx.EVT_MENU, self.onStartPVS, startPVSMenuItem)
        self.Bind(wx.EVT_MENU, self.onTypecheck, typecheckMenuItem)
        self.Bind(wx.EVT_MENU, self.onSetPVSLocation, setPVSLocationMenuItem)
        
        self.Bind(wx.EVT_TOOL, self.onCreateNewFile, createNewFileToolbarItem)
        self.Bind(wx.EVT_TOOL, self.onOpenFile, openFileToolbarItem)
        self.Bind(wx.EVT_TOOL, self.onSaveFile, saveFileToolbarItem)
        self.Bind(wx.EVT_TOOL, self.onSaveAllFiles, saveallFileToolbarItem)
        self.Bind(wx.EVT_TOOL, self.onCutText, cutToolbarItem)
        self.Bind(wx.EVT_TOOL, self.onCoptText, copyToolbarItem)
        self.Bind(wx.EVT_TOOL, self.onPasteText, pasteToolbarItem)
        self.Bind(wx.EVT_TOOL, self.onStartPVS, startPVSToolbarItem)
        self.Bind(wx.EVT_TOOL, self.onTypecheck, typecheckToolbarItem)
        
        self.Bind(wx.EVT_TEXT_ENTER, self.onPVSConsoleTextEntered, self.pvsconsole)
        self.Bind(wx.EVT_TEXT, self.onPVSConsoleText, self.pvsconsole)
        # end wxGlade
        
        self.fileBufferManager = FilesAndBuffersManager(self)
        self.filesTreeManager = FilesTreeManager(self)


    def __set_properties(self):
        # begin wxGlade: PVSMainFrame.__set_properties
        self.SetTitle(FRAME_TITLE)
        self.SetSize((1000, 800))
        self.pvsmainframestatusbar.SetStatusWidths([-1])
        # statusbar fields
        pvsmainframestatusbar_fields = ["PVS Mode: Prover"]
        for i in range(len(pvsmainframestatusbar_fields)):
            self.pvsmainframestatusbar.SetStatusText(pvsmainframestatusbar_fields[i], i)
        self.pvsmainframetoolbar.Realize()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PVSMainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        ##sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(self.filestree, 1, wx.EXPAND, 0)
        self.notebook_4_pane_1.SetSizer(sizer_4)
        sizer_5.Add(self.bufferstree, 1, wx.EXPAND, 0)
        self.notebook_4_pane_2.SetSizer(sizer_5)
        self.notebook_4.AddPage(self.notebook_4_pane_1, TAB_FILES)
        self.notebook_4.AddPage(self.notebook_4_pane_2, TAB_BUFFERS)
        sizer_3.Add(self.notebook_4, 1, wx.EXPAND, 0)
        self.window_1_pane_1.SetSizer(sizer_3)
        sizer_6.Add(self.prooflabel, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_6.Add(self.prooftree, 1, wx.EXPAND, 0)
        self.window_1_pane_2.SetSizer(sizer_6)
        self.window_1.SplitHorizontally(self.window_1_pane_1, self.window_1_pane_2)
        sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)
        
        ##self.pvsNotebookManager.AddPage(self.panel_3, "tab1")
        sizer_8.Add(self.pvsNotebookManager, 1, wx.EXPAND, 0)
        self.panel_2.SetSizer(sizer_8)
        
        sizer_2.Add(self.panel_2, 3, wx.EXPAND, 0)
        sizer_7.Add(self.label_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        #sizer_7.Add(self.pvsconsole, 1, wx.EXPAND, 0)
        sizer_7.Add(self.panel_4, 1, wx.EXPAND, 0)
        self.panel_1.SetSizer(sizer_7)
        ###sizer_9.Add(self.pvseditor, 1, wx.EXPAND, 0)
        sizer_10.Add(self.pvsconsole, 1, wx.EXPAND, 0)
        self.panel_4.SetSizer(sizer_10)        
        ###self.panel_3.SetSizer(sizer_9) 
        sizer_2.Add(self.panel_1, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 3, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        self.Centre()
        # end wxGlade

    def onCreateNewFile(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        self.fileBufferManager.createNewFile()
        #event.Skip()

    def onOpenFile(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        self.fileBufferManager.openFile()
       # event.Skip()

    def onSaveFile(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onSaveFile' not implemented!"
        #event.Skip()

    def onSaveAsFile(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onSaveAsFile' not implemented!"
        #event.Skip()

    def onQuitFrame(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        self.Close()

    def onUndo(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onUndo' not implemented!"
        #event.Skip()

    def onSelectAll(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onSelectAll' not implemented!"
        #event.Skip()

    def onCutText(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onCutText' not implemented!"
        #event.Skip()

    def onCopyText(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onCopyText' not implemented!"
        #event.Skip()

    def onPasteText(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onPasteText' not implemented!"
        #event.Skip()

    def onChangeContext(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onChangeContext' not implemented!"
        #event.Skip()

    def onRestoreContextAutomatically(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onRestoreContextAutomatically' not implemented!"
        #event.Skip()

    def onStartPVS(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onStartPVS' not implemented!"
        #event.Skip()

    def onTypecheck(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onTypecheck' not implemented!"
        #event.Skip()

    def onSetPVSLocation(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onSetPVSLocation' not implemented!"
        #event.Skip()

    def onSaveFileAs(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onSaveFileAs' not implemented!"
        #event.Skip()

    def onCoptText(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onCoptText' not implemented!"
        #event.Skip()

    def onPVSConsoleEntered(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onPVSConsoleEntered' not implemented!"
        #event.Skip()

    def onPVSConsoleChanged(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onPVSConsoleChanged' not implemented!"
        #event.Skip()

    def onSaveAllFiles(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        self.fileBufferManager.saveAllFiles()

    def onPVSConsoleTextEntered(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onPVSConsoleTextEntered' not implemented"
        #event.Skip()

    def onPVSConsoleText(self, event):  # wxGlade: PVSMainFrame.<event_handler>
        print "Event handler `onPVSConsoleText' not implemented"
        #event.Skip()

# end of class PVSMainFrame
