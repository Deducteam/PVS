;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; -*- Mode: Lisp -*- ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pvs.system -- 
;; Author          : Sam Owre
;; Created On      : Thu Dec 23 14:43:02 1993
;; Last Modified By: Sam Owre
;; Last Modified On: Wed Dec 30 23:49:59 1998
;; Update Count    : 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package "USER")

#+allegro
(eval-when (eval load)
  (setq *record-source-file-info* t
	*load-source-file-info* t
	*record-xref-info* t
	*ignore-package-name-case* t))

(eval-when (eval load)
  (defparameter *pvs-path* "")
  #+allegro (chdir *pvs-path*))

(eval-when (eval load)
  (defvar *pvs-binary-type*
    #+(and allegro sparc) "fasl"	; Sun4
    #+(and allegro rios) "rfasl"	; PowerPC/RS6000
    #+(and allegro hpux) "hfasl"	; HP 9000
    #+(and allegro x86) "lfasl"         ; Intel x86
    #+(and lucid lcl4.1 sparc) "sbin"	; Sun4 new Lucid
    #+(and lucid (not lcl4.1) sparc) "obin" ; Sun4 old Lucid
    #+(and lucid rios) "rbin"		; PowerPC/RS6000
    #+(and lucid mips) "mbin"		; DEC
    ;;; These are experimental
    #+gcl "o"
    #+cmu "sparcf"
    #+harlequin-common-lisp "wfasl"
    ))

#+allegro
(eval-when (eval load)
  (setq excl:*fasl-default-type* *pvs-binary-type*)
  (setq system:*load-search-list*
	(list #p"" (make-pathname :type *pvs-binary-type*)
	      #p(:type "cl") #p(:type "lisp"))))

(setq *cltl1-in-package-compatibility-p* t)

(defpackage "ILISP")
(defpackage "DP")

(unless (find-package "MAKE")
  (let ((*enable-package-locked-errors* nil))
    (load (format nil "~a/src/defsystem" *pvs-path*))))

(in-package "MAKE")

(component-operation :lf 'load-and-compile-if-needed-operation)
(component-operation 'lf 'load-and-compile-if-needed-operation)

(defun load-and-compile-if-needed-operation (component force)
  (let ((changed (compile-file-operation component
					 :new-source-and-dependents)))
    (load-file-operation component :all)
    changed))

#+gcl
(in-package :pcl)
#+gcl
(defun structure-slotd-reader-function (structure-slot-description)
  (second structure-slot-description))
#+gcl
(compile 'structure-slotd-reader-function)

(in-package 'user)

(unless (or (find-package "CLOS") (find-package "PCL"))
  #+(and lcl4.0 (not lcl4.1)) (load "/usr/subsys/lisp/clos")
  #+lcl4.1 (load "/usr/global/lisp/lucid/dbcs/clos"))

#-gcl
(defpackage pvs (:use #+lucid "LUCID-COMMON-LISP" "LISP"
		      #-gcl "CLOS" #+gcl "PCL" "MAKE"))

#+gcl
(unless (find-package :pvs)
  (make-package :pvs :use '("LISP" "PCL" "MAKE")))

#+gcl
(eval-when (eval compile load)
  (unless (fboundp 'pcl::structure-slotd-reader-function)
    (defun pcl::structure-slotd-reader-function (slotd)
      (second slotd))))

(defvar pvs::*pvs-path* *pvs-path*)
(defvar pvs::*pvs-binary-type* *pvs-binary-type*)

(defvar *pvs-system-loaded* nil)

(defvar *load-pvs-classes* #-allegro nil #+allegro t)


(defsystem pvs
  :source-pathname *pvs-path*
  :source-extension "lisp"
  :binary-extension #.*pvs-binary-type*
  :initially-do (unless *pvs-system-loaded*
		  #+(and lcl4.0 (not lcl4.1))
		  (when (probe-file "/usr/subsys/lisp/patches/")
		    (load-patches :directory "/usr/subsys/lisp/patches/"))
		  #+lcl4.1
		  (when (probe-file "/usr/global/lisp/lucid/dbcs/patches")
		    (load-patches :directory
				  "/usr/global/lisp/lucid/dbcs/patches")
		    (load "/usr/global/lisp/lucid/dbcs/patches/bug-7186.sbin"))
		  #-gcl
		  (proclaim '(optimize (compilation-speed 0) (space 1)
				       (safety 1) (speed 3)
				       #+allegro (debug 1)))
		  #+gcl
		  (proclaim '(optimize (compilation-speed 0) (space 1)
				       (safety 3) (speed 0)))
		  #+lucid
		  (change-memory-management
		   :expand 128
		   :growth-limit 4092	; # of 64Kb segments
		   :growth-rate 100	; # segs added when memory is expanded
		   :reclamation-ratio 0.33
		   )
		  #+gcl (setq compiler::*split-files* 100000)
		  #+(and lcl4.0 (not lcl4.1))
		  (setq *load-binary-pathname-types*
			(list user::*pvs-binary-type*))
		  (unless (boundp '*print-pprint-dispatch*)
		    #-gcl
		    (load (format nil "~a/src/xp" *pvs-path*))
		    #+gcl
		    (load (format nil "~a/src/xp-code" *pvs-path*))
		    (apply (find-symbol "INSTALL" :xp) :package :pvs nil))
		  (load (format nil "~a/ess/dist-ess.lisp" *pvs-path*))
		  #-gcl
		  (generate-ess ergolisp)
		  #+gcl
		  (load (format nil "~a/ess/allegro-runtime.lisp" *pvs-path*))
		  #+allegro (require :loop)
		  #+gcl (load (format nil "~a/src/loop" *pvs-path*))
		  (in-package 'pvs)
		  (use-package '("ERGOLISP" "OPER" "OCC" "TERM" "SORT"
				 "SB-RUNTIME" "LANG" "NEWATTR"))
		  #+gcl (defmacro ignore-errors (&body forms)
			  `(progn ,@forms))
		  #+(and allegro dlfcn)
		  (let* ((platform #+(and sun4 sunos4) "sun4-SunOS4"
				   #+(and sun4 (not sunos4)) "sun4-SunOS5"
				   #+(and x86 redhat5) "ix86-redhat5"
				   #+(and x86 redhat4) "ix86-redhat4")
			 (bddpath (concatenate 'string
				    *pvs-path* "/BDD/" platform))
			 (polypath (concatenate 'string
				     *pvs-path*
				     "/src/decision-procedures/polylib/"
				     platform)))
		    (load (format nil "~a/bdd.so" bddpath))
		    (load (format nil "~a/mu.so" bddpath))
		    (load (format nil "~a/polylib.so" polypath)))
		  (setq *pvs-system-loaded* t))
  :finally-do (progn
		#+lucid (precompile-generic-functions)
		#+lcl4.1 (clos::flush-pv-caches)
		(pvs::bdd_init)
		(pvs::load-prelude)
		#+allegro
		(let ((optfile (format nil "~a/src/closopt" *pvs-path*)))
		  (compile-file optfile)
		  (load optfile))
		(pvs::remove-typecheck-caches))
  :components
  ((:module ground-prover
     :source-pathname "src/ground-prover/"
     :components ((:file "prmacros")
		  (:file "interface"
			 :depends-on ("prmacros"))
		  (:file "prglobals"
			 :depends-on ("prmacros"))
		  (:file "process"
			 :depends-on ("prmacros"))
		  (:file "arrays"
			 :depends-on ("prmacros"))
		  (:file "tuples"
			 :depends-on ("prmacros"))
		  (:file "arith"
			 :depends-on ("prmacros"))
		  (:file "q"
			 :depends-on ("prmacros"))
		  (:file "nonlin"
			 :depends-on ("prmacros"))
		  (:file "pvs-patch"
			 :depends-on ("prmacros"))))
   (:module classes
     :source-pathname "src/"
     :components ((:file "store-object")
		  (:file "defcl")
		  (:file "classes-expr"
			 :depends-on ("defcl"))
		  (:file "classes-decl"
			 :depends-on ("defcl"))
		  (:file "prover/estructures"
			 :depends-on ("defcl"))
		  (:file "pvs-methods"
			 :initially-do
			 (pvs::write-deferred-methods-to-file))))
   (:module utils
     :source-pathname "src/utils"
     :components (#+allegro-v4.2 (:file "hash")
				 (:file "hashfn")))
   (:module language
     :source-pathname "src/"
     :components ((:file "ergo-runtime-fixes")
		  (:file "ergo-tex-fixes")
		  (:file "pvs-lang-def")
		  (:file "pvs-lexer")
		  (:file "pvs-parser")
		  (:file "pvs-unparser")
		  (:file "pvs-sorts")
		  (:file "pvs-parse-fixes"))
     :depends-on (classes))
   (:module basic
     :source-pathname "src/"
     :components ((:file "macros")
		  (:file "prover/checker-macros")
		  (:file "globals")
		  (:file "optimize")
		  (:file "makes" :depends-on ("macros"))
		  (:file "parse" :depends-on ("macros"))
		  (:file "unparse" :depends-on ("macros"))
		  (:file "pp")
		  (:file "print-object")
		  (:file "equalities")
		  (:file "utils")
		  (:file "gensubst")
		  (:file "substit"))
     :depends-on (language))
   (:module dc-structure
     :source-pathname "src/decision-procedures"
     :components ((:file "types")
		  (:file "node-structures"
			 :depends-on ("types"))))
   (:module emacs-interface
     :source-pathname "src/interface"
     :components ((:file "pvs-emacs")
		  (:file "emacs-calls")
		  (:file "ilisp-pkg")
		  (:file "cl-ilisp")
		  (:file "allegro")))
   (:module typechecker
     :source-pathname "src/"
     :components ((:file "freeparams")
		  (:file "subst-mod-params")
		  (:file "tc-unify")
		  (:file "resolve")
		  (:file "tcc-gen")
		  (:file "set-type")
		  ;;(:file "check-for-tccs")
		  (:file "tcexprs")
		  (:file "tcdecls")
		  (:file "judgements")
		  (:file "xref")
		  (:file "occurs-in")
		  (:file "context")
		  (:file "datatype")
		  (:file "typecheck")
		  (:file "tclib"))
     :depends-on (basic))
   (:module user-interface
     :source-pathname "src/"
     :components (;;(:file "restore-types")
		  (:file "compare")
		  (:file "untypecheck")
		  (:file "copy-lex")
		  (:file "save-theories")
		  (:file "pvs")
		  (:file "status-cmds")
		  (:file "add-decl")
		  (:file "list-decls")
		  (:file "tex-support"))
     :depends-on (basic))
   (:module proof-checker
     :source-pathname "src/prover/"
     :components ((:file "translate-to-prove")
		  (:file "eproofcheck")
		  (:file "proofrules")
		  (:file "equantifiers")
		  (:file "freevars")
		  (:file "rewrites")
		  (:file "assert")
		  (:file "beta-reduce")
		  (:file "replace")
		  (:file "expand")
		  (:file "match")
		  (:file "rules")
		  (:file "strategies")
		  (:file "wish"))
     :depends-on (typechecker))
   (:module bdd
     :source-pathname "BDD"
     :components ((:file "bdd"))
     :depends-on (proof-checker))
   (:module mu-simplifier
     :source-pathname "BDD"
     :components ((:file "mu")
		  (:file "strategies"))
     :depends-on (proof-checker))
   (:module dc-interface
     :source-pathname "src/decision-procedures"
     :components (;;(:file "dc-pvs")
		  ;;(:file "translate-from-prove")
		  (:file "translate-to-dc")
		  (:file "translate-from-dc")))
   (:module polylib
     :source-pathname "/src/decision-procedures/polylib"
     :components ((:file "foreign"))
     :depends-on ("dc-structure"))
   (:module dc-prototypes
     :source-pathname "src/decision-procedures"
     :components ((:file "integer")
		  (:file "arithmetic")
		  (:file "arrays")
		  (:file "shostak")
		  (:file "shostak-interp")
		  (:file "arith-solve")
		  (:file "polyhedron"))
     :depends-on ("dc-structure"))
   (:module rewrite
     :source-pathname "src/decision-procedures"
     :components ((:file "rewrite")
		  ;;(:file "rewrite-2")
		  (:file "rewrite-pvs")
		  (:file "datatypes-pvs")
		  (:file "records")
		  (:file "rewrite-optimize")
		  (:file "simplify"))
     :depends-on ("dc-structure"))
   (:module forward-chain
     :source-pathname "src/decision-procedures"
     :components ((:file "forward-chain-pvs")
		  (:file "forward-chain"))
     :depends-on ("dc-structure"))
;   (:module groundeval
;     :source-pathname "src/groundeval"
;     :components ((:file "eval-macros")
;		  (:file "eval-utils")
;		  (:file "groundp")
;		  (:file "static-update")
;		  (:file "pvseval-update")
;		  (:file "cl2pvs")))
   ))
