/* 16-bit counter */

domain = {
Y[0],
W[0],
@Y[0],

Y[1],
W[1],
@Y[1],

Y[2],
W[2],
@Y[2],

Y[3],
W[3],
@Y[3],

Y[4],
W[4],
@Y[4],

Y[5],
W[5],
@Y[5],

Y[6],
W[6],
@Y[6],

Y[7],
W[7],
@Y[7],

Y[8],
W[8],
@Y[8],

Y[9],
W[9],
@Y[9],

Y[10],
W[10],
@Y[10],

Y[11],
W[11],
@Y[11],

Y[12],
W[12],
@Y[12],

Y[13],
W[13],
@Y[13],

Y[14],
W[14],
@Y[14],

Y[15],
W[15],
@Y[15]

};

/* Init: */
Let S0 = L
C[15], C[14], C[13], C[12], C[11], C[10], C[9], C[8],
C[7], C[6], C[5], C[4], C[3], C[2], C[1], C[0] .
none_of (
C[15], C[14], C[13], C[12], C[11], C[10], C[9], C[8],
C[7], C[6], C[5], C[4], C[3], C[2], C[1], C[0])
;

let N = L

Y[0], Y[1], Y[2], Y[3], Y[4], Y[5], Y[6], Y[7],
Y[8], Y[9], Y[10], Y[11], Y[12], Y[13], Y[14], Y[15],
@Y[0], @Y[1], @Y[2], @Y[3], @Y[4], @Y[5], @Y[6], @Y[7],
@Y[8], @Y[9], @Y[10], @Y[11], @Y[12], @Y[13], @Y[14], @Y[15] .

E in, E[0], E[1], E[2], E[3] .

(E[0] == Y[12] & Y[13] & Y[14] & Y[15])
&
(E[1] == Y[9] & Y[10] & Y[11] & E[0])
&
(E[2] == Y[6] & Y[7] & Y[8] & E[1])
&
(E[3] == Y[3] & Y[4] & Y[5] & E[2])
&
(@Y[0] == in & (Y[0] * Y[1] & Y[2] & E[3]) + !in & Y[0])
&
(@Y[1] == in & (Y[1] * Y[2] & E[3]) + !in & Y[1])
&
(@Y[2] == in & (Y[2] * E[3]) + !in & Y[2])
&
(@Y[3] == in & (Y[3] * Y[4] & Y[5] & E[2]) + !in & Y[3])
&
(@Y[4] == in & (Y[4] * Y[5] & E[2]) + !in & Y[4])
&
(@Y[5] == in & (Y[5] * E[2]) + !in & Y[5])
&
(@Y[6] == in & (Y[6] * Y[7] & Y[8] & E[1]) + !in & Y[6])
&
(@Y[7] == in & (Y[7] * Y[8] & E[1]) + !in & Y[7])
&
(@Y[8] == in & (Y[8] * E[1]) + !in & Y[8])
&
(@Y[9] == in & (Y[9] * Y[10] & Y[11] & E[0]) + !in & Y[9])
&
(@Y[10] == in & (Y[10] * Y[11] & E[0]) + !in & Y[10])
&
(@Y[11] == in & (Y[11] * E[0]) + !in & Y[11])
&
(@Y[12] == in & (Y[12] * Y[13] & Y[14] & Y[15]) + !in & Y[12])
&
(@Y[13] == in & (Y[13] * Y[14] & Y[15]) + !in & Y[13])
&
(@Y[14] == in & (Y[14] * Y[15]) + !in & Y[14])
&
(@Y[15] == (in * Y[15]))
;

/* Using iterative squaring. */
let Nplus =

mu Z . N +

[ L
Y[0], Y[1], Y[2], Y[3], Y[4], Y[5], Y[6], Y[7],
Y[8], Y[9], Y[10], Y[11], Y[12], Y[13], Y[14], Y[15]
,
@Y[0], @Y[1], @Y[2], @Y[3], @Y[4], @Y[5], @Y[6], @Y[7],
@Y[8], @Y[9], @Y[10], @Y[11], @Y[12], @Y[13], @Y[14], @Y[15]
.
E
W[0], W[1], W[2], W[3], W[4], W[5], W[6], W[7],
W[8], W[9], W[10], W[11], W[12], W[13], W[14], W[15]
.
Z (
Y[0], Y[1], Y[2], Y[3], Y[4], Y[5], Y[6], Y[7],
Y[8], Y[9], Y[10], Y[11], Y[12], Y[13], Y[14], Y[15]
,
W[0], W[1], W[2], W[3], W[4], W[5], W[6], W[7],
W[8], W[9], W[10], W[11], W[12], W[13], W[14], W[15]
)
&
Z (
W[0], W[1], W[2], W[3], W[4], W[5], W[6], W[7],
W[8], W[9], W[10], W[11], W[12], W[13], W[14], W[15]
,
@Y[0], @Y[1], @Y[2], @Y[3], @Y[4], @Y[5], @Y[6], @Y[7],
@Y[8], @Y[9], @Y[10], @Y[11], @Y[12], @Y[13], @Y[14], @Y[15]
)
];

write ("States reachable from initial state are:\n");

S0
(
Y[0], Y[1], Y[2], Y[3], Y[4], Y[5], Y[6], Y[7],
Y[8], Y[9], Y[10], Y[11], Y[12], Y[13], Y[14], Y[15]
)
+
(
E
@Y[0], @Y[1], @Y[2], @Y[3], @Y[4], @Y[5], @Y[6], @Y[7],
@Y[8], @Y[9], @Y[10], @Y[11], @Y[12], @Y[13], @Y[14], @Y[15]
.
S0
(
@Y[0], @Y[1], @Y[2], @Y[3], @Y[4], @Y[5], @Y[6], @Y[7],
@Y[8], @Y[9], @Y[10], @Y[11], @Y[12], @Y[13], @Y[14], @Y[15]
)
&
Nplus
(
@Y[0], @Y[1], @Y[2], @Y[3], @Y[4], @Y[5], @Y[6], @Y[7],
@Y[8], @Y[9], @Y[10], @Y[11], @Y[12], @Y[13], @Y[14], @Y[15],
Y[0], Y[1], Y[2], Y[3], Y[4], Y[5], Y[6], Y[7],
Y[8], Y[9], Y[10], Y[11], Y[12], Y[13], Y[14], Y[15]
));

/*
let Reach =
mu Z .
S0 +
[ L
Y[0], Y[1], Y[2], Y[3], Y[4], Y[5], Y[6], Y[7],
Y[8], Y[9], Y[10], Y[11], Y[12], Y[13], Y[14], Y[15]
.
E
W[0], W[1], W[2], W[3], W[4], W[5], W[6], W[7],
W[8], W[9], W[10], W[11], W[12], W[13], W[14], W[15]
.
Z (
W[0], W[1], W[2], W[3], W[4], W[5], W[6], W[7],
W[8], W[9], W[10], W[11], W[12], W[13], W[14], W[15]
)
&
N (
W[0], W[1], W[2], W[3], W[4], W[5], W[6], W[7],
W[8], W[9], W[10], W[11], W[12], W[13], W[14], W[15]
,
Y[0], Y[1], Y[2], Y[3], Y[4], Y[5], Y[6], Y[7],
Y[8], Y[9], Y[10], Y[11], Y[12], Y[13], Y[14], Y[15]
)
]
;

write ("States reachable from initial state are:\n");
Reach (
Y[0], Y[1], Y[2], Y[3], Y[4], Y[5], Y[6], Y[7],
Y[8], Y[9], Y[10], Y[11], Y[12], Y[13], Y[14], Y[15]
);
*/
