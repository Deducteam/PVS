/* 4-bit Synchronous Arbiter */

/*
domain = {

req[3],
T[3],
W[3],
@W[3],
@T[3],

req[2],
T[2],
W[2],
@W[2],
@T[2],

req[1],
T[1],
W[1],
@W[1],
@T[1],

req[0],
T[0],
W[0],
@W[0],
@T[0]

req[0],
T[0],
W[0],
@W[0],
@T[0],

req[1],
T[1],
W[1],
@W[1],
@T[1],

req[2],
T[2],
W[2],
@W[2],
@T[2],

req[3],
T[3],
W[3],
@W[3],
@T[3],

};
*/

/*
  (@T[1] == T[0])
& (@T[2] == T[1])
& (@T[3] == T[2])
& (@T[0] == T[3])
& (@W[0] == (W[0] + T[0]) & req[0])
& (@W[1] == (W[1] + T[1]) & req[1])
& (@W[2] == (W[2] + T[2]) & req[2])
& (@W[3] == (W[3] + T[3]) & req[3]);
*/

/* Init: */
Let S0 = L
T[0],
T[1],
T[2],
T[3],
W[0],
W[1],
W[2],
W[3]
.
   one_of (T[0], T[1], T[2], T[3])
& none_of (W[0], W[1], W[2], W[3])
;

let N = L

T[0],
T[1],
T[2],
T[3],
W[0],
W[1],
W[2],
W[3],

@T[0],
@T[1],
@T[2],
@T[3],
@W[0],
@W[1],
@W[2],
@W[3]
.

E
req[0],
req[1],
req[2],
req[3]
.
  (@T[1] == T[0])
& (@T[2] == T[1])
& (@T[3] == T[2])
& (@T[0] == T[3])
& (@W[0] == (W[0] + T[0]) & req[0])
& (@W[1] == (W[1] + T[1]) & req[1])
& (@W[2] == (W[2] + T[2]) & req[2])
& (@W[3] == (W[3] + T[3]) & req[3]);

write ("States reachable from initial state are:\n");

Reachable (N, S0)
(
T[0],
T[1],
T[2],
T[3],
W[0],
W[1],
W[2],
W[3]
);
