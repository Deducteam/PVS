(in-package :pvs)

(defstep inst-by-unif (&optional (fnums *)
				 (where *)
				 copy?
				 verbose?
				 (inst? T))
  (let ((sforms (s-forms (current-goal *ps*)))
	(inst-sforms (gather-seq sforms fnums nil
				 (compose #'existential? #'formula)))
	(inst-fnums (gather-fnums sforms fnums nil
				  (compose #'existential? #'formula))))
    (if (null inst-sforms)
	(skip-msg "Could not find a suitable quantified formula.")
      (let ((inst-fmlas (mapcar #'formula inst-sforms))
	    (where-fmlas (mapcar #'formula
			   (select-seq sforms where)))
	    (insts (let ((*verbose* verbose?)
			 (*all*))
		     (declare (special *verbose*)
			      (special *all*))
		     (ignore-errors
		       (search-for-instantiations inst-fnums
						  inst-fmlas
						  (remove-if #'(lambda (fmla)
								 (member fmla
									 inst-fmlas
									 :test #'tc-eq))
						    where-fmlas))))))
	(if insts
	    (let ((inst-rule (make-inst-rules insts copy?)))
	      inst-rule)
	  (if inst?
	      (inst? :fnums fnums
		     :where where
		     :copy? copy?)
	    (skip-msg "No suitable instantiation found"))))))
  "Tries to find instantiations for the top-level, existentially
   quantifying variables in the formulas specified by 'fnums'.
   First, a full case split for the formulas specified by 'fnums' and
   'where' is computed; e.g. a formula in the hypothesis of the form
   'FORALL (x: { y: T | P(y)}): Q(x) => R(x)' gives rise to three
   sequents in the split. Then, a set of candidate substitutions is
   generated by unifying complementary pairs in the resulting sequents.
   If there are several such candidates, the procedures chooses some
   supposedly best substitution, whereby the measure for each substitution
   consists of a list of numbers, where each number roughly corresponds to the
   number of complementary pairs in a sequent of the full case split.
   The 'copy?' argument specifies if the formulas to be instantiated
   are copied, 'verbose?' set to true provides some additional output,
   and 'inst?' directs the strategy to apply the inst? strategy in case
   the search for an instantiation fails.

   CAVEAT: This strategy is only included for experimental purposes
   and its functionality (and speed!) is most likely to change in future
   releases. Thus, proof scripts that are using it are likely to break
   in the future!"
  "Instantiating quantified variables")

;; Construct a PVS rule from instantiations of the form;
;; e.g.  ((1 (e1 e2 e3)) (-4 (f1 f2))) indicates 3 instantiations
;; for the top-level bindings of the sequence formula numbered 1
;;  and two instantiations for the sequent formula -4.

(defmethod make-inst-rules ((insts null) copy?)
  (declare (ignore copy?))
  '(skip))

(defmethod make-inst-rules ((insts cons) copy?)
  (let ((inst (car insts)))
    `(then* (instantiate ,(car inst) ,@(cdr inst) :copy? ,copy?)
	    ,(make-inst-rules (cdr insts) copy?))))

;; Splits a set of formulas into a list of arguments of negated
;;   formulas (negative formulas, hypotheses) and a list of
;;   (positive) formulas (conclusions)

(defun search-for-instantiations (fnums inst-fmlas where-fmlas &optional (state *dp-state*))
   (let ((*start-state* state))
     (declare (special *start-state*))
     (multiple-value-bind (list-of-bndngs lvars bodies)
	 (destructure-inst-fmlas inst-fmlas)
       (let ((fmlas (union bodies where-fmlas :test #'tc-eq))
	     (renamings (initial-renamings list-of-bndngs lvars)))
	 (multiple-value-bind (trms new-lvars new-renamings)
	     (herbrandize fmlas lvars renamings)
	   (declare (ignore new-renamings))
	   (let* ((*lvars* new-lvars))
	     (declare (special *lvars*))
	     (let ((subst (search-for-subst new-lvars hfmlas))) 
	       (if (or (fail? subst) (null subst))
		   nil
		   (construct-instantiate-input fnums list-of-bndngs subst renamings)))))))))
		   
(defun initial-renamings (list-of-bndngs lvars)
  (pairlis (mapcan #'identity list-of-bndngs) lvars))

(defun destructure-inst-fmlas (fmlas &optional list-of-bndngs lvars bodies)
  (if (null fmlas)
      (values (nreverse list-of-bndngs) (nreverse lvars) (nreverse bodies))
    (multiple-value-bind (bndngs body)
	(destructure-existential (car fmlas))
      (let ((new-lvars (mk-new-lvars bndngs)))
	(destructure-inst-fmlas  (cdr fmlas)
				 (cons bndngs list-of-bndngs)
				 (append new-lvars lvars)
				 (cons body bodies))))))

(defun construct-instantiate-input (fnums list-of-bndngs subst renamings)
  (loop for fnum in fnums
	as bndngs in list-of-bndngs
	collect (list fnum
		      (reverse
		      (loop for bndng in bndngs
			    collect (let ((lvar (cdr (assoc bndng renamings
							    :test #'tc-eq))))
				      (if lvar
					  (cdr (assoc lvar subst :test #'tc-eq))
					  "_")))))))



