(sqrt (sqrt_TCC1 0
       (sqrt_TCC1-1 nil 3434737810 nil
        ("" (lemma "sqrt_exists") (("" (propax) nil nil)) nil)
        unchecked nil nil nil nil nil))
      (sqrt_pos 0
       (sqrt_pos-1 nil 3434737810 nil ("" (grind-arith) nil nil)
        unchecked nil nil nil nil nil))
      (sqrt_0 0
       (sqrt_0-1 nil 3434737810 nil
        ("" (grind-arith)
         (("" (typepred "sqrt(0)") (("" (grind-arith) nil nil)) nil))
         nil)
        untried nil nil nil nil nil))
      (sqrt_1 0
       (sqrt_1-1 nil 3434737810 nil
        ("" (typepred "sqrt(1)") (("" (grind-arith) nil nil)) nil)
        untried nil nil nil nil nil))
      (sqrt_eq_0 0
       (sqrt_eq_0-1 nil 3434737810 nil
        ("" (skosimp*)
         (("" (typepred "sqrt(nnx!1)") (("" (grind-arith) nil nil))
           nil))
         nil)
        untried nil nil nil nil nil))
      (sqrt_lem 0
       (sqrt_lem-1 nil 3434737810 nil
        ("" (skosimp*)
         (("" (ground)
           (("" (typepred "sqrt(nny!1)")
             (("" (replace -2 - rl)
               (("" (hide -1 -2)
                 (("" (lemma "both_sides_expt2")
                   (("" (inst -1 "2" "_" "_")
                     (("" (expand "^")
                       (("" (expand "expt")
                         (("" (expand "expt")
                           (("" (expand "expt")
                             (("" (case-replace "nnz!1 = 0")
                               (("1"
                                 (lemma "zero_times3")
                                 (("1"
                                   (hide -2 -3)
                                   (("1"
                                     (inst
                                      -1
                                      "sqrt(nny!1)"
                                      "sqrt(nny!1)")
                                     (("1" (ground) nil nil))
                                     nil))
                                   nil))
                                 nil)
                                ("2"
                                 (case-replace "sqrt(nny!1) = 0")
                                 (("1"
                                   (hide -1)
                                   (("1"
                                     (lemma "zero_times3")
                                     (("1"
                                       (hide -2)
                                       (("1"
                                         (inst?)
                                         (("1" (ground) nil nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil)
                                  ("2"
                                   (inst?)
                                   (("1" (ground) nil nil)
                                    ("2" (assert) nil nil)
                                    ("3" (assert) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        untried nil nil nil nil nil))
      (sqrt_def 0
       (sqrt_def-1 nil 3434737810 nil
        ("" (grind :theories ("sqrt" "real_props")) nil nil) untried
        nil nil nil nil nil))
      (sqrt_square 0
       (sqrt_square-1 nil 3434737810 nil
        ("" (grind :theories ("sqrt" "real_props")) nil nil) untried
        nil nil nil nil nil))
      (sqrt_sq 0
       (sqrt_sq-1 nil 3434737810 nil
        ("" (grind :theories ("sqrt" "real_props")) nil nil) untried
        nil nil nil nil nil))
      (sqrt_sq_abs 0
       (sqrt_sq_abs-1 nil 3434737810 nil
        ("" (grind :theories ("sqrt" "real_props")) nil nil) untried
        nil nil nil nil nil))
      (sq_sqrt 0
       (sq_sqrt-1 nil 3434737810 nil
        ("" (grind :theories ("sqrt" "real_props")) nil nil) untried
        nil nil nil nil nil))
      (sqrt_times 0
       (sqrt_times-1 nil 3434737810 nil
        ("" (grind :theories ("sqrt" "real_props")) nil nil) untried
        nil nil nil nil nil))
      (sqrt_div_TCC1 0
       (sqrt_div_TCC1-1 nil 3434737810 nil ("" (grind-arith) nil nil)
        unchecked nil nil nil nil nil))
      (sqrt_div_TCC2 0
       (sqrt_div_TCC2-1 nil 3434737810 nil ("" (subtype-tcc) nil nil)
        unchecked nil nil nil nil nil))
      (sqrt_div 0
       (sqrt_div-1 nil 3434737810 nil
        ("" (grind :theories ("sqrt" "real_props")) nil nil) untried
        nil nil nil nil nil))
      (sqrt_lt 0
       (sqrt_lt-1 nil 3434737810 3434910865
        ("" (skosimp)
         (("" (ground)
           (("1" (grind-arith)
             (("1" (use "sq_lt") (("1" (grind-arith) nil nil)) nil))
             nil)
            ("2" (typepred "sqrt(nny!1)")
             (("2" (replace -2 - rl)
               (("2" (hide -2)
                 (("2" (typepred "sqrt(nnz!1)")
                   (("2" (replace -2 - rl)
                     (("2" (hide -1 -2 -3)
                       (("2" (lemma "both_sides_expt_pos_lt_aux")
                         (("2"
                           (inst -1 "1" "sqrt(nny!1)" "sqrt(nnz!1)")
                           (("2" (grind) nil nil)) nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        proved
        ((real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (sqrt_nnr application-judgement "nonneg_real" sqrt nil)
         (sq_lt formula-decl nil sq nil)
         (sqrt const-decl "{nnz | nnz * nnz = nnx}" sqrt nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields
            nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (>= const-decl "bool" reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (sq const-decl "nonneg_real" sq nil)
         (lt_times_lt_pos2 formula-decl nil real_props nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
          real_types nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (nat nonempty-type-eq-decl nil naturalnumbers nil)
         (> const-decl "bool" reals nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (expt def-decl "real" exponentiation nil)
         (odd_minus_odd_is_even application-judgement "even_int"
          integers nil)
         (even_minus_odd_is_odd application-judgement "odd_int"
          integers nil)
         (odd_plus_odd_is_even application-judgement "even_int"
          integers nil)
         (posint_plus_nnint_is_posint application-judgement "posint"
          integers nil)
         (nnreal_expt application-judgement "nnreal" exponentiation
          nil)
         (both_sides_expt_pos_lt_aux formula-decl nil exponentiation
          nil)
         (NOT const-decl "[bool -> bool]" booleans nil))
        182284 570 t nil))
      (sqrt_le 0
       (sqrt_le-1 nil 3434737810 3434910679
        ("" (skosimp)
         (("" (use "sqrt_lt" :if-match all) (("" (ground) nil nil))
           nil))
         nil)
        proved
        ((sqrt_lt formula-decl nil sqrt nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (>= const-decl "bool" reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (sqrt const-decl "{nnz | nnz * nnz = nnx}" sqrt nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields
            nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (sqrt_nnr application-judgement "nonneg_real" sqrt nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil))
        6478 400 t nil))
      (sqrt_gt 0
       (sqrt_gt-1 nil 3434737810 nil
        ("" (skosimp)
         (("" (use "sqrt_lt" :if-match all) (("" (ground) nil nil))
           nil))
         nil)
        untried nil nil nil nil nil))
      (sqrt_ge 0
       (sqrt_ge-1 nil 3434737810 nil
        ("" (skosimp*)
         (("" (use "sqrt_lt" :if-match all) (("" (ground) nil nil))
           nil))
         nil)
        untried nil nil nil nil nil))
      (sqrt_eq 0
       (sqrt_eq-1 nil 3434737810 nil ("" (grind) nil nil) untried nil
        nil nil nil nil))
      (sqrt_less 0
       (sqrt_less-1 nil 3434737810 nil
        ("" (skosimp*)
         (("" (typepred "sqrt(nnx!1)")
           (("" (lemma "both_sides_expt_pos_gt_aux")
             (("" (inst -1 "1" "nnx!1" "sqrt(nnx!1)")
               (("1" (grind)
                 (("1" (lemma "both_sides_times_pos_gt1")
                   (("1" (inst -1 "nnx!1" "nnx!1" "1")
                     (("1" (assert) nil nil)) nil))
                   nil))
                 nil)
                ("2" (assert) nil nil) ("3" (assert) nil nil))
               nil))
             nil))
           nil))
         nil)
        untried nil nil nil nil nil))
      (sqrt_more 0
       (sqrt_more-1 nil 3434737810 nil
        ("" (skosimp*)
         (("" (typepred "sqrt(nnx!1)")
           (("" (lemma "both_sides_expt_pos_gt_aux")
             (("" (inst -1 "1" "sqrt(nnx!1)" "nnx!1")
               (("1" (grind-arith)
                 (("1" (lemma "both_sides_times_pos_gt1")
                   (("1" (inst -1 "nnx!1" "1" "nnx!1")
                     (("1" (assert) nil nil)) nil))
                   nil))
                 nil)
                ("2" (assert) nil nil))
               nil))
             nil))
           nil))
         nil)
        untried nil nil nil nil nil)))

