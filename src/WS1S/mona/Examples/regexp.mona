var1 $;
lastpos $;

defaultwhere1(p) = p <= $+1;
defaultwhere2(P) = P sub {0,...,$+1};

# we declare a string of 8-bit vectors
var2 bit0 where bit0 sub {0,...,$}; var2 bit1 where bit1 sub {0,...,$};
var2 bit2 where bit2 sub {0,...,$}; var2 bit3 where bit3 sub {0,...,$};
var2 bit4 where bit4 sub {0,...,$}; var2 bit5 where bit5 sub {0,...,$};
var2 bit6 where bit6 sub {0,...,$}; var2 bit7 where bit7 sub {0,...,$};

macro consecutive_in_set(var1 p, var1 q, var2 P) =
p < q & p in P & q in P & all1 r: p < r & r < q => r notin P;

# ASCII 'a' is 97, which is 1100001
macro is_a(var1 p, var1 q) =
q = p + 1 & 
p in bit0 & p notin bit1 & p notin bit2 & p notin bit3 &
p notin bit4 & p in bit5 & p in bit6 & p notin bit7;

# ASCII 'b' is 98, which is 1100010
macro is_b(var1 p, var1 q) =
q = p + 1 & 
p notin bit0 & p in bit1 & p notin bit2 & p notin bit3 &
p notin bit4 & p in bit5 & p in bit6 & p notin bit7;

# we concatenate by guessing the intermediate position where
# the string parsed according to the first regular expression 
# (in this case "a") ends and the string parsed according to 
# the second (in this case "b") starts

macro is_ab(var1 p, var1 q) =
ex1 r: is_a(p, r) & is_b(r, q);

# a star expression is handled by guessing the set of
# intermediate positions
macro is_ab_star(var1 p, var1 q) =
ex2 P: p in P & q in P &
       all1 r, r': consecutive_in_set(r, r', P) => is_ab(r, r');

macro is_a_star(var1 p, var1 q) =
ex2 P: p in P & q in P &
       all1 r, r': consecutive_in_set(r, r', P) => is_a(r, r');

macro is_a_star_ab_star(var1 p, var1 q) =
ex1 r: is_a_star(p, r) & is_ab_star(r, q);

is_a_star_ab_star(0, $+1);
