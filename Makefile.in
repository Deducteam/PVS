########################### -*- Mode: Makefile -*- ###########################
## Makefile -- Main Makefile for PVS; requires GNU Make
## Author          : Sam Owre, Joseph Kiniry
## Created On      : Wed Dec 30 19:29:47 1998
## Last Modified By: Sam Owre
## Last Modified On: Thu May 20 22:26:02 2004
## Update Count    : 23
## Status          : Stable
###############################################################################
## PVS
## Copyright (C) 2006, SRI International.  All Rights Reserved.

## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation; either version 2
## of the License, or (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
## --------------------------------------------------------------------

# This Makefile consists of several parts
#  Initialization
#  External libraries and files
#  PVS grammar files
#  PVS methods file
#  PVS Lisp compilation
#  PVS Lisp image
#  PVS Emacs prelude info file
#  PVS Emacs compilation
#  PVS tarfiles
#  Clean

# Initialization
# Initializes variables and performs some checks before invoking rules

ifneq (,)
This makefile requires GNU Make.
endif

.SUFFIXES:
.SUFFIXES: .c .o
SHELL=/bin/sh

# Should test for existence of platform dependent Makefiles

ETAGS = @ETAGS@
TAR = @TAR@
MKDIR = @MKDIR@
TARFLAGS = -cvohz --mode="u+rw" --atime-preserve --exclude=CVS

PLATFORM := $(shell $(PVSPATH)bin/pvs-platform)
export PLATFORM

bindir = $(TARGETPATH)bin/$(PLATFORM)

SYSTEM ?= pvs

ifneq ($(ALLEGRO_HOME),)
ALLEGROEXE = $(ALLEGRO_HOME)/mlisp8
LD_LIaBRARY_PATH = $(ALLEGRO_HOME):$LD_LIBRARY_PATH
pvsdevel += $(bindir)/devel/$(SYSTEM)-allegro
pvsrt += $(bindir)/runtime/$(SYSTEM)-allegro
endif

ifneq ($(CMULISP_HOME),)
# Check that CMULISP_HOME looks OK
CMULISPEXE = $(CMULISP_HOME)/bin/lisp
ifeq ($(shell if [ -x "$(CMULISPEXE)" ]; then echo OK; fi),OK)
CMUVERSION = $(shell $(CMULISP_HOME)/bin/lisp -batch -eval '(progn (format t "~a" (lisp-implementation-version)) (terpri) (quit))')
$(warning "CMU Version $(CMUVERSION)")
pvsdevel += $(bindir)/devel/$(SYSTEM)-cmulisp
pvsrt += $(bindir)/runtime/$(SYSTEM)-cmulisp
else
$(error "$(LISPEXE) is not executable")
endif
endif

ifneq ($(SBCL_HOME),)
# Check that the given SBCL_HOME works
SBCLISPEXE = $(SBCL_HOME)/bin/lisp
ifeq ($(shell if [ -x "$(SBCLISPEXE)" ]; then echo OK; fi),OK)
SBCLVERSION = $(shell $(SBCL_HOME)/bin/lisp -batch -eval '(progn (format t "~a" (lisp-implementation-version)) (terpri) (quit))')
$(warning "SBCL Version $(SBCLVERSION)")
pvsdevel += $(bindir)/devel/$(SYSTEM)-sbclisp
pvsrt += $(bindir)/runtime/$(SYSTEM)-sbclisp
else
$(error "$(SBCLISPEXE) is not executable")
endif
endif


LOAD-FOREIGN-EXTENSION=so
export LD_LIBRARY_PATH
ifeq ($(PLATFORM),powerpc-MacOSX7)
  LOAD-FOREIGN-EXTENSION=dylib
else
ifeq ($(PLATFORM),powerpc-MacOSX8)
  LOAD-FOREIGN-EXTENSION=dylib
else
ifeq ($(PLATFORM),ix86-MacOSX8)
  LOAD-FOREIGN-EXTENSION=dylib
endif
endif
endif

ifndef EMACS
EMACS = "$(shell which emacs)"
endif
ifndef EMACS
EMACS = "$(shell which xemacs)"
endif
ifndef EMACS
$(error "No Emacs or Xemacs found")
endif

emacsversion = $(shell expr "`$(EMACS) --version 2> /dev/null`" \
                            : '[^X]*\(X*Emacs [0-9][0-9]\)')


ifeq ($(emacsversion),Emacs 22)
EMACSSUBDIR = emacs22
else
ifeq ($(emacsversion),Emacs 21)
EMACSSUBDIR = emacs20
else
ifeq ($(emacsversion),XEmacs 21)
EMACSSUBDIR = xemacs21
else
ifeq ($(emacsversion),Emacs 20)
EMACSSUBDIR = emacs20
else
ifeq ($(emacsversion),XEmacs 20)
EMACSSUBDIR = xemacs20
else
ifeq ($(emacsversion),Emacs 19)
EMACSSUBDIR = emacs19
else
$(error "Unknown version of (X)Emacs: $(emacsversion)")
endif
endif
endif
endif
endif
endif

pvs-make-files = pvs.system src/defsystem.lisp src/make-pvs.lisp \
		 src/make-allegro-pvs.lisp src/closopt.lisp

pvs-emacs-src = $(wildcard $(PVSPATH)emacs/emacs-src/*.el) \
                $(PVSPATH)emacs/emacs-src/pvs-prelude-files-and-regions.el
ilisp-emacs-src = $(wildcard $(PVSPATH)emacs/emacs-src/ilisp/*.el)

emacs-src = $(pvs-emacs-src) $(ilisp-emacs-src)

pvs-emacs-sub-src = $(addprefix $(PVSPATH)emacs/$(EMACSSUBDIR)/,$(notdir $(pvs-emacs-src)))

ilisp-emacs-sub-src = $(addprefix $(PVSPATH)emacs/$(EMACSSUBDIR)/,$(notdir $(ilisp-emacs-src)))

emacs-sub-src = $(pvs-emacs-sub-src) $(ilisp-emacs-sub-src)

emacs-elc = $(emacs-sub-src:.el=.elc)

ff-files = src/utils/$(PLATFORM)/file_utils.$(LOAD-FOREIGN-EXTENSION) \
           src/utils/$(PLATFORM)/b64 \
           BDD/$(PLATFORM)/mu.$(LOAD-FOREIGN-EXTENSION)

ifneq ($(ALLEGRO_HOME),)
  ff-files += src/WS1S/$(PLATFORM)/ws1s.$(LOAD-FOREIGN-EXTENSION)
endif

ess = ess/dist-ess.lisp \
	ess/init-load.lisp \
	ess/sys/ergolisp/rel/ergolisp.lisp \
	ess/sys/ergolisp/rel/ergolisp-exports.lisp \
	ess/sys/ergolisp/rel/ergo-system.lisp \
	ess/sys/ergolisp/rel/ergo-types.lisp \
	ess/sys/ergolisp/rel/type-check.lisp \
	ess/sys/ergolisp/rel/tdefun.lisp \
	ess/sys/tools/rel/retry.lisp \
	ess/sys/tools/rel/box-system.lisp \
	ess/sys/tools/rel/box.lisp \
	ess/box-defs.lisp \
	ess/sys/tools/rel/regression-test.lisp \
	ess/sys/tools/rel/clet.lisp \
	ess/sys/tools/rel/box-lib.lisp \
	ess/sys/tools/rel/print-utils.lisp \
	ess/sys/ergolisp/rel/dlambda.lisp \
	ess/sys/ergolisp/rel/dlambda-lib.lisp \
	ess/term/language/rel/languages.lisp \
	ess/term/terms/rel/opers.lisp \
	ess/term/terms/rel/occur.lisp \
	ess/term/terms/rel/sorts.lisp \
	ess/term/trep/rel/attr-prims.lisp \
	ess/term/trep/rel/gterm.lisp \
	ess/term/terms/rel/terms.lisp \
	ess/term/terms/rel/termop.lisp \
	ess/lang/sb-term/rel/access.lisp \
	ess/lang/sb-term/rel/access-par.lisp \
	ess/lang/sb-term/rel/aux-funs.lisp \
	ess/lang/sb-term/rel/sb-lexer.lisp \
	ess/lang/sb-term/rel/sb-parser.lisp \
	ess/lang/sb-term/rel/sb-sorts.lisp \
	ess/lang/sb-term/rel/sb-unparser.lisp \
	ess/lang/sb-term/rel/sb-unparsing-aux.lisp \
	ess/lang/sb-term/rel/pre-process.lisp \
	ess/lang/sb-term/rel/inter-phase.lisp \
	ess/lang/sb-term/rel/sort-gen.lisp \
	ess/lang/sb-term/rel/lexer-gen.lisp \
	ess/lang/sb-term/rel/flatten.lisp \
	ess/lang/sb-term/rel/look-ahead.lisp \
	ess/lang/sb-term/rel/compare.lisp \
	ess/lang/sb-term/rel/phase-three.lisp \
	ess/lang/sb-term/rel/top-parse.lisp \
	ess/lang/sb-term/rel/unp-code-revise.lisp \
	ess/lang/sb-term/rel/unparse-gen.lisp \
	ess/lang/sb-term/rel/sbrt-lang-def.lisp \
	ess/lang/sb-term/rel/sbrt-sorting.lisp \
	ess/lang/sb-term/rel/rt-structs.lisp \
	ess/lang/sb-term/rel/rt-unp-structs.lisp \
	ess/lang/sb-term/rel/rt-lex.lisp \
	ess/lang/sb-term/rel/rt-term.lisp \
	ess/lang/sb-term/rel/rt-parse-mac.lisp \
	ess/lang/sb-term/rel/rt-parse.lisp \
	ess/lang/sb-term/rel/rt-unparse.lisp \
	ess/lang/sb-term/rel/top.lisp \
	ess/term/attr/rel/attr-lang-lib.lisp \
	ess/term/attr/rel/attr-sort.lisp \
	ess/term/attr/rel/attr-lang.lisp \
	ess/term/attr/rel/attr-global.lisp \
	ess/lang/sb-term/rel/rt-unp-attr.lisp \
	ess/lang/sb-term/rel/rt-format.lisp \
	ess/lang/sb-term/rel/rt-unp-tex.lisp \
	ess/lang/sb-term/rel/rt-unp-top.lisp \
	ess/term/attr/rel/attr-lib.lisp \
	ess/term/attr/rel/attr-gsort.lisp \
	ess/term/attr/rel/attr-occ.lisp \
	ess/lang/sb-term/rel/sbrt-lang-def.lisp \
	ess/lang/sb-term/rel/sbrt-sorting.lisp \
	ess/lang/sb-term/rel/rt-structs.lisp \
	ess/lang/sb-term/rel/rt-unp-structs.lisp \
	ess/lang/sb-term/rel/rt-lex.lisp \
	ess/lang/sb-term/rel/rt-term.lisp \
	ess/lang/sb-term/rel/rt-parse-mac.lisp \
	ess/lang/sb-term/rel/rt-parse.lisp \
	ess/lang/sb-term/rel/rt-unparse.lisp \
	ess/lang/sb-term/rel/rt-unp-attr.lisp \
	ess/lang/sb-term/rel/rt-format.lisp \
	ess/lang/sb-term/rel/rt-unp-tex.lisp \
	ess/lang/sb-term/rel/rt-unp-top.lisp \
	ess/lang/ab-term/rel/af-runtime.lisp \
	ess/sys/constr/rel/constr.lisp \
	ess/sys/constr/rel/constr-term-rep.lisp \
	ess/sys/constr/rel/constr-sorts.lisp \
	ess/sys/constr/rel/constr-lexer.lisp \
	ess/sys/constr/rel/constr-parser.lisp \
	ess/sys/constr/rel/defsconstr.lisp

pvs-parser-in = src/make-pvs-parser.lisp \
             src/pvs-gr.txt \
             src/ergo-runtime-fixes.lisp \
             src/ergo-gen-fixes.lisp \
             src/pvs-lang-def.lisp \
             src/pvs-parse-fixes.lisp

pvs-parser-out = src/pvs-lexer.lisp \
             src/pvs-parser.lisp \
             src/pvs-sorts.lisp

ground-prover = src/ground-prover/prmacros.lisp \
		src/ground-prover/interface.lisp \
		src/ground-prover/prglobals.lisp \
		src/ground-prover/process.lisp \
		src/ground-prover/arrays.lisp \
		src/ground-prover/tuples.lisp \
		src/ground-prover/arith.lisp \
		src/ground-prover/q.lisp

pvs-src = src/closopt.lisp \
          src/store-object.lisp \
	  src/defcl.lisp \
          src/classes-expr.lisp \
          src/classes-decl.lisp \
          src/prover/estructures.lisp \
          src/pvs-methods.lisp \
          src/utils/hashfn.lisp \
          src/macros.lisp \
          src/linked-hash-table.lisp \
          src/globals.lisp \
          src/optimize.lisp \
	  src/makes.lisp \
	  src/parse.lisp \
	  src/pp.lisp \
          src/pp-tex.lisp \
          src/pp-html.lisp \
          src/print-object.lisp \
	  src/equalities.lisp \
          src/utils.lisp \
          src/gensubst.lisp \
	  src/substit.lisp \
	  src/freeparams.lisp \
	  src/subst-mod-params.lisp \
	  src/tc-unify.lisp \
	  src/resolve.lisp \
	  src/tcc-gen.lisp \
	  src/set-type.lisp \
	  src/check-for-tccs.lisp \
          src/tcexprs.lisp \
	  src/tcdecls.lisp \
	  src/conversions.lisp \
	  src/judgements.lisp \
	  src/xref.lisp \
	  src/occurs-in.lisp \
	  src/context.lisp \
	  src/datatype.lisp \
	  src/typecheck.lisp \
	  src/tclib.lisp \
          src/compare.lisp \
	  src/untypecheck.lisp \
	  src/copy-lex.lisp \
	  src/save-theories.lisp \
          src/pvs.lisp \
          src/status-cmds.lisp \
	  src/add-decl.lisp \
	  src/list-decls.lisp \
	  src/tex-support.lisp \
          src/raw-api.lisp

ifneq ($(ALLEGRO_HOME),)
   pvs-src += src/utils/file-utils.lisp
endif
ifeq ($(LISP),cmulisp)
   pvs-src += src/utils/file-utils-cmu.lisp
endif

emacs-interface = src/interface/pvs-emacs.lisp \
		  src/interface/emacs-calls.lisp #\
		  #src/interface/cl-ilisp.lisp \
		  #src/interface/allegro.lisp \
		  #src/interface/ilisp-pkg.lisp

pvs-prover = src/prover/checker-macros.lisp \
         src/prover/decision-procedure-interface.lisp \
         src/prover/translate-to-prove.lisp \
         src/prover/eproofcheck.lisp \
         src/prover/proofrules.lisp \
	 src/prover/equantifiers.lisp \
	 src/prover/freevars.lisp \
	 src/prover/rewrites.lisp \
	 src/prover/assert.lisp \
	 src/prover/beta-reduce.lisp \
	 src/prover/replace.lisp \
	 src/prover/expand.lisp \
	 src/prover/match.lisp \
	 src/prover/rules.lisp \
         src/prover/strategies.lisp \
         src/prover/wish.lisp \
	 src/prover/translate-to-yices.lisp

ifeq ($(LISP),allegro)
  bddlisp = BDD/bdd.lisp BDD/mu.lisp
endif
ifeq ($(LISP),cmulisp)
  bddlisp = BDD/bdd-cmu.lisp BDD/mu-cmu.lisp
endif

PVSiolisp = src/PVSio/pvs-lib.lisp src/PVSio/defattach.lisp \
            src/PVSio/eval.lisp src/PVSio/pvsio.lisp

ws1slisp = src/WS1S/lisp/dfa-foreign.lisp src/WS1S/lisp/dfa.lisp \
           src/WS1S/lisp/pvs-utils.lisp src/WS1S/lisp/symtab.lisp \
           src/WS1S/lisp/signature.lisp src/WS1S/lisp/pvs2dfa.lisp \
           src/WS1S/lisp/ws1s-strategy.lisp \
           src/WS1S/lisp/presburger.lisp

abstractionlisp = src/abstraction/abstract.lisp

groundevallisp = src/groundeval/eval-macros.lisp \
		 src/groundeval/eval-utils.lisp \
		 src/groundeval/ground-expr.lisp \
		 src/groundeval/static-update.lisp \
		 src/groundeval/pvseval-update.lisp \
		 src/groundeval/cl2pvs.lisp \
		 src/groundeval/generate-lisp-for-theory.lisp \
                 src/groundeval/random-test.lisp \
                 src/groundeval/pvs2clean.lisp

inst-by-unif-lisp = src/inst-by-unif/unify.lisp \
                    src/inst-by-unif/herbrandize.lisp \
                    src/inst-by-unif/gensubsts.lisp \
                    src/inst-by-unif/inst-by-unif.lisp

lisp-files = $(pvs-parser-out) $(ground-prover) $(pvs-src) \
	     $(emacs-interface) $(pvs-prover) $(bddlisp) \
	     $(PVSiolisp) $(ws1slisp) $(groundevallisp) \
             $(abstractionlisp)

builddeps = pvs.system src/make-allegro-pvs.lisp \
            ess/dist-ess.lisp ess/allegro-runtime.lisp

ifneq ($(PVSPATH),)
pvs-make-files := $(patsubst %,$(PVSPATH)%,$(pvs-make-files))
ff-files := $(patsubst %,$(PVSPATH)%,$(ff-files))
ess := $(patsubst %,$(PVSPATH)%,$(ess))
pvs-parser-in := $(patsubst %,$(PVSPATH)%,$(pvs-parser-in))
pvs-parser-out := $(patsubst %,$(PVSPATH)%,$(pvs-parser-out))
ground-prover := $(patsubst %,$(PVSPATH)%,$(ground-prover))
pvs-src := $(patsubst %,$(PVSPATH)%,$(pvs-src))
emacs-interface := $(patsubst %,$(PVSPATH)%,$(emacs-interface))
pvs-prover := $(patsubst %,$(PVSPATH)%,$(pvs-prover))
bddlisp := $(patsubst %,$(PVSPATH)%,$(bddlisp))
PVSIOlisp := $(patsubst %,$(PVSPATH)%,$(PVSiolisp))
ws1slisp := $(patsubst %,$(PVSPATH)%,$(ws1slisp))
abstractionlisp := $(patsubst %,$(PVSPATH)%,$(abstractionlisp))
groundevallisp := $(patsubst %,$(PVSPATH)%,$(groundevallisp))
inst-by-unif-lisp := $(patsubst %,$(PVSPATH)%,$(inst-by-unif-lisp))
builddeps := $(patsubst %,$(PVSPATH)%,$(builddeps))
endif

all-lisp-files = $(ess) $(pvs-parser-in) $(lisp-files)

.PHONY : all devel runtime parser

ifeq ($(pvsdevel),)
$(error "Must set CMULISP_HOME or ALLEGRO_HOME")
else
all : devel runtime
endif

devel : $(image-deps) $(pvsdevel)

runtime : $(image-deps) $(pvsrt)

parser : pvs-parser-out

image-deps = makefileutils makebdd

ifeq ($(LISP),allegro)
image-deps += makews1s
endif

image-deps += $(pvsdevel)

emacs = $(PVSPATH)emacs/$(EMACSSUBDIR)/pvs-load.elc

image-deps += $(emacs)

# Here are the rules for building the PVS grammar, pvs-methods file, and
# devel and runtime images.

ifeq ($(LISP),cmulisp)

$(PVSPATH)src/pvs-lexer.lisp : $(pvs-parser-in)
	umask 002; \
	$(CMULISPEXE) -load src/make-pvs-parser

$(PVSPATH)src/pvs-methods.lisp : $(PVSPATH)src/make-pvs-methods.lisp \
                       $(PVSPATH)src/defcl.lisp \
                       $(PVSPATH)src/classes-expr.lisp \
                       $(PVSPATH)src/classes-decl.lisp
	umask 002; \
	$(LISPEXE) -eval '(defvar *pvs-path* "@PVSPATH@")' \
		   -load src/make-pvs-methods.lisp

$(pvsdevel) $(pvsrt) : $(pvs-make-files) $(ess) $(ff-files) $(lisp-files) \
	  lib/prelude.pvs lib/prelude.prf
	$(MKDIR) -p $(subst $(SYSTEM)-$(LISP),,$@)
	$(LISPEXE) -eval '(load "pvs.system" :verbose t) \
                          (pvs::operate-on-system :pvs :compile) \
                          (quit)'
	$(LISPEXE) -eval '(load "pvs.system" :verbose t) \
                          (unwind-protect \
                              (pvs::operate-on-system :pvs :compile) \
                            (save-lisp "$@.core" \
                                :init-function (function startup-pvs) \
                               ))'
	-rm $(PVSPATH)BDD/$(PLATFORM)/bdd-cmu-load.*
	cp $(PVSPATH)BDD/$(PLATFORM)/mu.$(LOAD-FOREIGN-EXTENSION) $(subst $(SYSTEM)-$(LISP),,$@)
	cp $(PVSPATH)BDD/bdd-cmu-load.lisp $(PVSPATH)BDD/mu-cmu-load.lisp $(subst $(SYSTEM)-$(LISP),,$@)
	cp $(PVSPATH)src/utils/$(PLATFORM)/b64 $(bindir)
	echo "#!/bin/sh" > $@
	echo "$(LISPEXE) -core \`dirname \$$0\`/\`basename \$$0\`.core \$\*" >> $(pvsdevel)
	chmod a+x $@
endif

ifneq ($(ALLEGRO_HOME),)
$(pvsdevel) $(pvsrt) : $(pvs-make-files) $(ess) $(ff-files) $(libics-file) $(lisp-files) \
             $(PVSPATH)lib/prelude.pvs $(PVSPATH)lib/prelude.prf
	$(MKDIR) -p $(subst $(SYSTEM)-$(LISP),,$@)
	rm -rf /tmp/pvs-allegro-build
	umask 002; \
	$(LISPEXE) -e '(load "$(PVSPATH)pvs.system")' \
		-e "(let ((code 1)) \
                      (unwind-protect \
                          (multiple-value-bind (v err) \
                            (ignore-errors (operate-on-system :pvs :compile)) \
                               (if err \
                                   (let ((*print-readably* nil)) \
                                     (format t \"~a\" err)) \
                                   (setq code 0)))) \
                        (excl:exit code)))"
	cp $(PVSPATH)src/utils/$(PLATFORM)/b64 $(bindir)
	umask 002; $(ETAGS) $(lisp-files) $(pvs-emacs-src)
	umask 002; \
	$(LISPEXE) -e '(defvar *runtime* $(if $(findstring runtime,$@),t,nil))' \
		-L $(PVSPATH)src/make-pvs.lisp
	touch $@

$(PVSPATH)src/pvs-lexer.lisp : $(pvs-parser-in)
	umask 002; \
	$(LISPEXE) -L $(PVSPATH)src/make-pvs-parser

$(PVSPATH)src/pvs-methods.lisp : $(PVSPATH)src/make-pvs-methods.lisp \
                       $(PVSPATH)src/defcl.lisp \
                       $(PVSPATH)src/classes-expr.lisp \
                       $(PVSPATH)src/classes-decl.lisp
	umask 002; \
	$(LISPEXE) -e '(defvar *pvs-path* "@PVSPATH@")' \
		-L $(PVSPATH)src/make-pvs-methods.lisp
endif

$(LISP) :
	@echo "Need to set the LISP variable in Makefile to a valid"
	@echo "Common Lisp executable for this platform."

.PHONY: all makefileutils makebdd makews1s make-release-notes clean
makefileutils :
	umask 002; \
	$(MAKE) -C $(PVSPATH)src/utils/$(PLATFORM)
makebdd :
	umask 002; \
	$(MAKE) -C $(PVSPATH)BDD/$(PLATFORM)
makews1s :
	umask 002; \
	(cd $(PVSPATH)src/WS1S ; rm -rf mona ; ln -s mona-1.4 mona);\
	$(MAKE) -C $(PVSPATH)src/WS1S/$(PLATFORM)

make-release-notes :
	$(MAKE) -C $(PVSPATH)doc/release-notes

#
# Release files.
#

runtime-image-tar = pvs-$(PLATFORM).tgz

devel-image-tar = pvs-devel-$(PLATFORM).tgz

system-tar = pvs-system.tgz

emacs19-tar = pvs-emacs19.tgz

source-tar = pvs-source.tgz

libraries-tar = pvs-libraries.tgz

tarfiles : $(release-notes) $(runtime-image-tar) $(devel-image-tar) \
           $(system-tar) $(emacs19-tar) $(source-tar) $(libraries-tar)

runtime-image-files = $(wildcard $(bindir)/runtime/*)

devel-image-files = $(wildcard $(bindir)/devel/*)

release-notes = doc/release-notes/pvs-release-notes.info \
                doc/release-notes/pvs-release-notes.html \
                doc/release-notes/pvs-release-notes.ps \
                doc/release-notes/pvs-release-notes.pdf

system-files = README pvs pvsio pvs-tex.sub pvs.sty bin/relocate \
               bin/pvs-platform bin/tar-b64-mail Examples \
               lib/prelude.pvs lib/prelude.prf lib/list_adt.pvs \
               lib/ordstruct_adt.pvs lib/character_adt.pvs \
	       lib/union_adt.pvs lib/lift_adt.pvs \
               lib/pvs-language.help lib/pvs-prover.help lib/pvs.help \
               lib/pvs.grammar lib/pvs.bnf wish/pvs-support.tcl \
               lib/strategies.lisp lib/pvs-style.css $(release-notes) \
               wish/gray.xbm wish/sequent.xbm \
               emacs/README emacs/go-pvs.el $(pvs-emacs-src) \
               emacs/emacs-src/pvs.xpm \
               $(ilisp-emacs-src) emacs/emacs20 emacs/xemacs21 \
               lib/PVSio

library-files = lib/PVSio/.pvscontext lib/finite_sets/.pvscontext \
                lib/bitvectors/.pvscontext

configure-files = Makefile.in README README.configure configure.in \
                  pvs.in

bdd-sources = BDD/bdd-ld-table BDD/mu-ld-table \
              BDD/bdd_interface.c BDD/mu_interface.c \
              BDD/ix86-Linux/Makefile BDD/sun4-SunOS5/Makefile \
              BDD/bdd BDD/mu

ws1s-sources = src/WS1S/README src/WS1S/ws1s-ld-table \
               src/WS1S/ws1s_extended_interface.c src/WS1S/mona-1.4 \
               src/WS1S/ix86-Linux/Makefile src/WS1S/sun4-SunOS5/Makefile

emacs19-files = emacs/emacs19

lib/strategies.lisp : src/prover/strategies.lisp
	(cd lib; ln -sf ../src/prover/strategies.lisp strategies.lisp)

$(runtime-image-tar) : $(pvsrt) $(bindir)/b64
	$(TAR) $(TARFLAGS) -f $(runtime-image-tar) $(runtime-image-files) $(bindir)/b64

$(devel-image-tar) : $(pvsdevel) $(bindir)/b64
	$(TAR) $(TARFLAGS) -f $(devel-image-tar) $(devel-image-files) $(bindir)/b64

$(system-tar) : $(system-files)
	$(TAR) $(TARFLAGS) -f $(system-tar) $(system-files)

$(emacs19-tar) : $(emacs19-files)
	$(TAR) $(TARFLAGS) -f $(emacs19-tar) $(emacs19-files)

$(source-tar) : $(pvs-make-files) $(configure-files) \
                src/make-allegro-pvs.lisp src/make-pvs.lisp \
                src/metering.lisp src/utils/utils-ld-table \
                src/utils/file_utils.c src/utils/b64.c wish \
                $(ff-files) $(ess) ess/README ess/allegro-runtime.lisp \
                ess/dist-ess.lisp ess/term/terms/rel/*.txt \
                $(pvs-parser-in) $(lisp-files) \
                $(bdd-sources) $(ws1s-sources)
	$(TAR) $(TARFLAGS) -f $@ $^ --exclude CVS

$(libraries-tar) : lib/finite_sets lib/bitvectors lib/PVSio
	$(TAR) $(TARFLAGS) -f $@ $^ --exclude CVS

tar : $(devel-image-tar) $(runtime-image-tar) $(system-tar) \
      $(emacs19-tar) $(source-tar) $(libraries-tar)

install:
	@echo "target install is not used for PVS - see INSTALL"

clean : 
	rm -f *.*fasl *.sbin *.obin *.rbin *.mbin *.x86f *.ppcf *.sparcf \
              *.x8664s *.x86s *.ppcs *.sparcs *.clfasl
	$(MAKE) -C $(PVSPATH)src/utils/$(PLATFORM) clean
	$(MAKE) -C $(PVSPATH)BDD/$(PLATFORM) clean
	$(MAKE) -C $(PVSPATH)src/WS1S/$(PLATFORM) clean
	$(MAKE) -C $(PVSPATH)doc/release-notest clean

$(PVSPATH)emacs/emacs-src/pvs-prelude-files-and-regions.el : lib/prelude.pvs $(pvsdevel)
	-./pvs -batch -l emacs/emacs-src/pvs-set-prelude-info.el \
                        -f set-prelude-files-and-regions

$(PVSPATH)emacs/$(EMACSSUBDIR)/pvs-prelude-files-and-regions.el : $(PVSPATH)emacs/emacs-src/pvs-prelude-files-and-regions.el
	(cd emacs/$(EMACSSUBDIR) ; ln -sf ../emacs-src/$(@F) . )

$(PVSPATH)emacs/$(EMACSSUBDIR)/%.el : $(PVSPATH)emacs/emacs-src/%.el
	$(MKDIR) -p emacs/$(EMACSSUBDIR)
	(cd emacs/$(EMACSSUBDIR) ; ln -sf ../emacs-src/$(@F) .)

$(PVSPATH)emacs/$(EMACSSUBDIR)/%.el : $(PVSPATH)emacs/emacs-src/ilisp/%.el
	$(MKDIR) -p emacs/$(EMACSSUBDIR)
	(cd emacs/$(EMACSSUBDIR) ; ln -sf ../emacs-src/ilisp/$(@F) .)

$(PVSPATH)emacs/$(EMACSSUBDIR)/pvs-load.elc : $(pvs-emacs-sub-src) $(ilisp-emacs-sub-src)
	(cd emacs/$(EMACSSUBDIR); $(EMACS) -batch -l pvs-byte-compile.el)
