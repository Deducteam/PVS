(obt (ordered?_TCC1 0 (ordered?_TCC1-1 nil 3386618414 3386618434 ("" (termination-tcc) nil nil) proved ((reduce_nat adt-def-decl "[binary_tree -> nat]" binary_tree_adt nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (size const-decl "nat" obt nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 694 320 nil nil)) (ordered?_TCC2 0 (ordered?_TCC2-1 nil 3386618414 3386618435 ("" (termination-tcc) nil nil) proved ((reduce_nat adt-def-decl "[binary_tree -> nat]" binary_tree_adt nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (size const-decl "nat" obt nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 300 230 nil nil)) (insert_TCC1 0 (insert_TCC1-1 nil 3386618414 3386618435 ("" (termination-tcc) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (reduce_nat adt-def-decl "[binary_tree -> nat]" binary_tree_adt nil) (size const-decl "nat" obt nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 249 200 nil nil)) (insert_TCC2 0 (insert_TCC2-1 nil 3386618414 3386618435 ("" (termination-tcc) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (reduce_nat adt-def-decl "[binary_tree -> nat]" binary_tree_adt nil) (size const-decl "nat" obt nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 252 190 nil nil)) (ordered?_insert_step 0 (ordered?_insert_step-1 nil 3386621172 3386621180 ("" (induct-and-simplify "A") nil nil) proved ((binary_tree type-decl nil binary_tree_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" binary_tree_adt nil) (insert def-decl "binary_tree[T]" obt nil) (T formal-type-decl nil obt nil) (binary_tree_induction formula-decl nil binary_tree_adt nil)) 7230 240 t shostak)) (ordered?_insert 0 (ordered?_insert-2 "" 3386621159 3386621159 ("" (induct-and-simplify "A" :rewrites "ordered?_insert_step") (("" (rewrite "ordered?_insert_step") (("" (typepred "<=") (("" (grind :if-match all) nil nil)) nil)) nil)) nil) proved nil 90560 750 t shostak) (ordered?_insert-1 nil 3386620246 3386620674 ("" (induct "A") (("1" (skosimp) (("1" (expand "insert") (("1" (expand "ordered?" +) (("1" (assert) (("1" (expand "every") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "insert" +) (("2" (prop) (("1" (inst?) (("1" (expand "ordered?" (-4 1)) (("1" (prop) (("1" (rewrite "ordered?_insert_step") nil nil)) nil)) nil)) nil) ("2" (inst? -2) (("2" (expand "ordered?" (-3 2)) (("2" (prop) (("2" (rewrite "ordered?_insert_step") (("2" (typepred "<=") (("2" (expand "total_order?") (("2" (flatten) (("2" (expand "dichotomous?") (("2" (inst?) (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((<= formal-const-decl "(total_order?[T])" obt nil) (total_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil) (dichotomous? const-decl "bool" orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (ordered?_insert_step formula-decl nil obt nil) (every adt-def-decl "boolean" binary_tree_adt nil) (binary_tree type-decl nil binary_tree_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (ordered? def-decl "bool" obt nil) (insert def-decl "binary_tree[T]" obt nil) (T formal-type-decl nil obt nil) (binary_tree_induction formula-decl nil binary_tree_adt nil)) 428250 290 t shostak)) (search_insert 0 (search_insert-1 nil 3386621197 3386621202 ("" (induct-and-simplify "A") nil nil) proved ((binary_tree type-decl nil binary_tree_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (search def-decl "bool" obt nil) (insert def-decl "binary_tree[T]" obt nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (T formal-type-decl nil obt nil) (binary_tree_induction formula-decl nil binary_tree_adt nil)) 4208 390 t shostak)))
