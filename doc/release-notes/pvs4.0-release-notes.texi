@node PVS 4.0 Release Notes
@unnumbered PVS 4.0 Release Notes

PVS 4.0 is available at @url{http://pvs.csl.sri.com/download.shtml}.

Release notes for PVS version 4.0.@footnote{These started as the
release notes for PVS 3.3, but this was changed to a major release
when we made PVS open source.}  The major difference from earlier
versions of PVS is that this release is open source, under the
@url{http:@///www@/.gnu@/.org@//copyleft/gpl.html,GPL license}.  In addition,
there is now a @url{http:@///pvs-wiki@/.csl.sri.com, PVS Wiki page}.

@ifnottex
@menu
* 4.0 Installation Notes::
* 4.0 New Features::
* 4.0 Bug Fixes::
* 4.0 Incompatibilities::
@end menu
@end ifnottex

@node    4.0 Installation Notes
@section Installation Notes

Installation of binaries is the same as before; the only difference is
that only one file needs to be downloaded.  This leads to slightly
more overhead when downloading for multiple platforms, but simplifies
the overall process.  Simply create a directory, untar the downloaded
file(s) there, and run @code{bin/relocate}.

If you have received patches from SRI that you have put into your
@code{~/.pvs.lisp} file, they should be (re)moved.  If you anticipate
wanting to try the newer and older versions together, you can do this
by using @code{#-pvs4.0} in front of forms in your patches.  This is a
directive to the Lisp reader, and causes the following s-expression to
be ignored unless it is an earlier version of PVS.

@node 4.0 New Features
@section New Features

@menu
* Open Source::
* Record and Tuple Type Extensions::
* Structural Subtypes::
* Empty and Singleton Record and Tuple Types::
* PVSio::
* Random Testing::
* Yices::
* Recursive Judgements TCCs::
* Prelude Additions::
* Decimal Representation for Numbers::
* Unary plus::
@end menu

@node Open Source
@subsection Open Source

PVS is now open source, under the under the
@url{http:@///www@/.gnu@/.org@//copyleft/gpl.html,GPL license}.  It
currently builds with Allegro and CMU Common Lisps, and we are working
on porting it to SBCL.  Feel free to join in if your favorite Lisp or
platform is not yet supported.  See
@url{http:@///pvs-wiki@/.csl.sri.com, the PVS Wiki page} for details.

@node Record and Tuple Type Extensions
@subsection Record and Tuple Type Extensions

Record and tuple types may now be extended using the @code{WITH}
keyword.  Thus, one may create colored points and moving points from
simple points as follows.
@example
  point: TYPE = [@kbd{#} x, y: real @kbd{#}]
  colored_point: TYPE = point WITH [# color: Color #]
  moving_point: TYPE = point WITH [# vx, vy: real #]
@end example
Similarly, tuples may be extended:
@example
  R3: TYPE = [real, real, real]
  R5: TYPE = R3 WITH [real, real]
@end example
For record types, it is an error to extend with new field names that
match any field names in the base record type.  The extensions may not
be dependent on the base type, though they may introduce dependencies
within themselves.
@example
  dep_bad: TYPE = point WITH [# z: @{r: real | x*x + y*y < 1@} #]
  dep_ok: TYPE = point WITH [# a: int, b: below(a) #]
@end example
Note that the extension is a type expression, and may appear anywhere
that a type is allowed.


@node Structural Subtypes
@subsection Structural Subtypes

PVS now has support for structural subtyping for record and tuple
types.  A record type @code{S} is a structural subtype of record type
@code{R} if every field of @code{R} occurs in @code{S}, and similarly,
a tuple type @code{T} is a structural subtype of a tuple type forming
a prefix of @code{T}.  Section @ref{Record and Tuple Type
Extensions} gives examples, as @code{colored_point} is a structural
subtype of @code{point}, and @code{R5} is a structural subtype of
@code{R3}.  Structural subtypes are akin to the class hierarchy of
object-oriented systems, where the fields of a record can be viewed as
the slots of a class instance.  The PVS equivalent of setting a slot
value is the override expression (sometimes called update), and this
has been modified to work with structural subtypes, allowing the
equivalent of generic methods to be defined.  Here is an example.
@example
points: THEORY
BEGIN
 point: TYPE+ = [# x, y: real #]
END points

genpoints[(IMPORTING points) gpoint: TYPE <: point]: THEORY
BEGIN
 move(p: gpoint)(dx, dy: real): gpoint =
  p WITH [`x := p`x + dx, `y := p`y + dy]
END genpoints

colored_points: THEORY
BEGIN
 IMPORTING points
 Color: TYPE = @{red, green, blue@}
 colored_point: TYPE = point WITH [# color: Color #]
 IMPORTING genpoints[colored_point]
 p: colored_point
 move0: LEMMA move(p)(0, 0) = p
END colored_points
@end example
The declaration for @code{gpoint} uses the structural subtype operator
@code{<:}.  This is analogous to the @code{FROM} keyword, which
introduces a (predicate) subtype.  This example also serves to explain
why we chose to separate structural and predicate subtyping.  If they
were treated uniformly, then @code{gpoint} could be instantiated with
the unit disk; but in that case the @code{move} operator would not
necessarily return a @code{gpoint}.  The TCC could not be generated
for the @code{move} declaration, but would have to be generated when
the @code{move} was referenced.  This both complicates typechecking,
and makes TCCs and error messages more inscrutable.  If both are
desired, simply include a structural subtype followed by a predicate
subtype, for example:
@example
genpoints[(IMPORTING points) gpoint: TYPE <: point,
          spoint: TYPE FROM gpoint]: THEORY
@end example
Now @code{move} may be applied to @code{gpoint}s, but if applied to a
@code{spoint} an unprovable TCC will result.

Structural subtypes are a work in progress.  In particular, structural
subtyping could be extended to function and datatypes.  And to have
real object-oriented PVS, we must be able to support a form of method
invocation.

@node Empty and Singleton Record and Tuple Types
@subsection Empty and Singleton Record and Tuple Types

Empty and singleton record and tuple types are now allowed in PVS.
Thus the following are valid declarations:
@example
Tup0: TYPE = [ ]
Tup1: TYPE = [int]
Rec0: TYPE = [# #]
@end example
Note that the space is important in the empty tuple type, as otherwise
it is taken to be an operator (the box operator).

@node PVSio
@subsection PVSio

C@'esar Mu@~noz has kindly provided lisp code for PVSio, which has
been fully incorporated into PVS.  Thus for PVS 4.0 there is no need
to download the package.  See the @code{doc/PVSio-2.d.pdf} manual for
details, and the PVSio web page
@url{http://research.nianet.org/~munoz/PVSio/} for updates.

@node Random Testing
@subsection Random Testing

We have developed a capability for random test generation in PVS,
based, in part, on work done in Haskell and Isabelle.  Random tests
may be generated for universally quantified formulas in the ground
evaluator or in the prover.  In each case, the purpose is to try and
find a counter example to the given formula, by evaluating a number of
instances until one of them returns @code{FALSE}.  The falsifying
instance is then displayed.

This is a good way to test a specification before attempting a proof.
Unlike model checking, it is inherently incomplete; on the other hand,
there is no requirement for all types to be finite, only that all involved
types and constants have interpretations.

For the prover, random testing is invoked with the @code{random-test} rule:
@example
  (random-test &optional (fnum *) (count 10) (size 100)
               (dtsize 10) all? verbose? instance
               (subtype-gen-bound 1000))
@end example

In the ground evaluator, we added the @code{test} command:
@example
  (test expr &optional (count 10) (size 100) (dtsize 10)
               all? verbose? instance)
@end example
Note one important difference: the optional arguments in the
@code{test} command are @strong{not} keywords.  To set the @code{all?}
flag you would need to invoke @code{test} as
@example
  (test "foo" 10 100 10 t)
@end example
In general, random testing is most easily used in the prover.  Note
that you can get an arbitrary expression into the sequent by using the
@code{case} command.

The @code{count} argument controls how many random tests to try.
The @code{size} and @code{dtsize} control the possible
ranges of random values, as described below.  Normally the tests stop when
a counter example is found; setting the @code{all?} flag to
@code{t} causes further tests to be run until @code{count} is
reached.  The @code{verbose?} flag indicates that all random
test values should be displayed.  This is often useful to understand why a
given test seems to always be true.  The @code{instance} argument
allows formals and uninterpreted types and constants to be given as a
theory instance with actuals and mappings.  The current theory may also be
instantiated this way.  For example, @code{th[int, 0]@{@{T := bool, c :=
true@}@}} may be a theory instance, providing actuals and mappings for the
terms involved in the given formula.  The
@code{subtype-gen-bound} is used to control how many random
values to generate in attempting to satisfy a subtype predicate, as
described below.

In the prover, the universal formula is generated from the formulas
specified by the @code{fnum} argument, first creating an implication from
the conjunction of antecedents to the disjunction of consequents.  Any
Skolem constants are then universally quantified and the result passed to
the random tester.  This is useful for checking if the given sequent is
worth proving; if it comes back with a counter example, then it may not be
worth trying to prove.  Of course, it may just be that a lemma is needed,
or relevant formulas were hidden, and that it isn't a real counter
example.

The random values are generated per type.  For numeric types, the builtin
Lisp @code{random} function is used:
@itemize @bullet
@item
@code{nat} uses random(0..@code{size})
@item
@code{int} uses random(-@code{size}..@code{size})
@item
@code{rat} creates two random @code{int}s, the second nonzero,
and returns the quotient
@item
@code{real} and above just use @code{rat} values
@end itemize
All other subtypes create a random value for the supertype, and then check
if it satisfies the subtype predicate.  It stops after
@code{subtype-gen-bound} attempts.  Higher-order subtypes such as
@code{surjective?} are not currently supported.  Function types
generate a lazy function, so that, e.g.,
@example
    FORALL (f: [int -> int], x, y, z: int):
       f(x) + f(f(y)) > f(f(f(z)))
@end example
creates a function that memoizes its values.
Other types (e.g., record and tuple types) are built up recursively from
their component types.

Datatypes are controlled by @code{dtsize}.  For example, with
@code{size} and @code{dtsize} set to their defaults (@code{100} and
@code{10}, respectively), a variable of type @code{list[int]} will
generate lists of length between 0 and 10, with integer values between
-100 and 100.

More details may be found in the paper
@url{http://fm.csl.sri.com/AFM06/papers/5-Owre.pdf,Random Testing in
PVS}, which was presented at @url{http://fm.csl.sri.com/AFM06/,AFM
2006}.

@node Yices
@subsection Yices

New prover commands are available that invoke the Yices SMT solver.
See @url{http:@///yices@/.csl@/.sri@/.com} for details on Yices and its
capabilities.  You must download Yices from there and include it in
your @code{PATH}, as it is not included with PVS.  You will get a
warning on starting PVS if Yices is not found in your path, but this
can safely be ignored if you will not be using Yices.

The @code{yices} rule is an endgame solver; if it does not prove (the
specified formulas of) the sequent, it acts as a @code{skip}.  In
addition to the primitive @code{yices} rule, the strategies
@code{yices-with-rewrites} and @code{ygrind} have been added.  Use
@code{help} (e.g., @code{(help ygrind)}) for details.


@node Recursive Judgements TCCs
@subsection Recursive Judgements TCCs

Judgements on recursive functions often lead to difficult proofs, as
one generally has to prove the resulting obligation using tedious
induction.  For example, here is a definition of append on lists of
integer, and a judgement that it is closed on lists of natural
numbers (note that this example is artificial; append is defined
polymorphically in the prelude):
@example
 append_int(l1, l2: list[int]): RECURSIVE list[int] =
    CASES l1 OF
      null: l2,
      cons(x, y): cons(x, append_int(y, l2))
    ENDCASES
    MEASURE length(l1)
    
 append_nat: JUDGEMENT append_int(a, b: list[nat]) HAS_TYPE list[nat]
@end example
This yields the TCC
@example
append_nat: OBLIGATION
  FORALL (a, b: list[nat]):
    every[int](@{i: int | i >= 0@})(append_int(a, b));
@end example
Which is difficult to prove automatically (or even manually).

By adding the keyword @code{RECURSIVE} to the judgement, the TCCs are
generated by
@itemize @bullet
@item creating the predicate on the top-level call to the function,
in this case @code{every(@{i: int | i >= 0@})(append_int(a, b))}.
@item substituting the variables into the body of the recursive
definition
@item typechecking the substituted body against the expected result
type (@code{list[nat]}), with the predicate as a condition.
@end itemize
With these changes, the TCC becomes
@example
append_nat_TCC1: OBLIGATION
  FORALL (a, b: list[nat], x: int, y: list[int]):
    every(@{i: int | i >= 0@})(append_int(a, b)) AND a = cons(x, y)
      IMPLIES
     every[int](@{i: int | i >= 0@})(cons[int](x, append_int(y, b)));
@end example
and this is easily discharged automatically (e.g., with @code{grind}).

Note that recursive judgements are used in exactly the same way as the
non-recursive form; the only difference is in the generated TCCs.

Recursive judgements are only allowed on recursive functions, and they
are only for closure conditions (i.e., arguments must be provided).
If a non-recursive judgement is given where a recursive judgement
would apply, then a warning is output.  In general, recursive
judgements are preferred.  In fact, we considered making it the
default behavior for judgements on recursive functions, but this would
make existing proofs fail.


@c @node Quantified Type Expressions
@c @subsection Quantified Type Expressions

@c @node Dependent Types in Formal Parameters
@c @subsection Dependent Types in Formal Parameters

@node Prelude Additions
@subsection Prelude Additions

To support the Yices interface, several operators from the bitvector
library have been moved to the prelude.  These are in the new theories
@code{floor_div_props}, @code{mod}, @code{bv_arith_nat_defs},
@code{bv_int_defs}, @code{bv_arithmetic_defs}, and
@code{bv_extend_defs}.  The @code{floor_div_props} and @code{mod}
theories have been moved completely, the rest have only had the
operators added to the prelude - the rest of the theory, along with
lemmas and other useful declarations, is still in the bitvector
library - just drop the @code{_def} for the corresponding theory.

Note that this can have some side effects.  For example, the WIFT
tutorial @code{adder} example expects conversions to be used in a
certain way because there were no arithmetic operators on bit
vectors.  Now that there are such operators, conversions no longer are
needed, and proofs obviously fail.

@node Decimal Representation for Numbers
@subsection Decimal Representation for Numbers

PVS now has support for decimal representation of numbers, for
example, @code{3.1416}.  Internally, this is treated as a fraction, in
this case @code{31416/10000}.  So there is no floating point
arithmetic involved, and the results are exact, since Common Lisp
represents fractions exactly.  The decimal representation must start
with an integer, i.e., @code{0.007} rather than @code{.007}.

@node Unary plus
@subsection Unary @code{+}

The @code{+} operator may now be used as a unary operator.  Note that
there is no definition for unary @code{+}, for example, @code{+1} will
lead to a type error.  This was added primarily for user declarations.

@c @node Library Declarations in Formals
@c @subsection Library Declarations in Formals

@node 4.0 Bug Fixes
@section Bug Fixes

This version fixes many (though not all) bugs.  Generally those marked as
@code{analyzed} in the PVS bugs list have been fixed, and most have
been incorporated into our validation suite.

@node 4.0 Incompatibilities
@section Incompatibilities
There were some improvements made to judgements and TCC generation,
that in some cases lead to different forms of TCCs.  In the validation
suite, these were all easily detected and the proofs were not
difficult to repair.

It was noted in bug number 920 that the instantiator only looks for
matches within the sequent, though often there are matches from the
Skolem constants that are not visible.  The @code{inst?} command was
modified to look in the Skolem constants as a last resort, so earlier
proofs would still work.  Unfortunately, @code{grind} and similar
strategies use @code{inst?} eagerly, and may now find a Skolem
constant match that is incorrect, rather than waiting for a better
match after further processing.  This is exactly the problem that
@code{lazy-grind} was created for.  In our validation suite only a
few formulas needed to be repaired, and those generally could be fixed
simply by replacing @code{grind} by @code{lazy-grind}.  Since hidden
Skolem constants are difficult for a new user to deal with, we feel
that this is a worthwhile change.
