dnl PVS autoconf input
dnl davesc Feb 2001

dnl make sure we are using a recent autoconf version
AC_PREREQ(2.52)

dnl If it doesn't look like GNU Make is being used, give a friendly warning
tem=`make --version -f /dev/null 2>&1 | grep GNU`
if test "x$tem" = "x"; then
  AC_MSG_WARN([You need to use GNU Make when compiling])
fi

dnl This file must exist for configure to run
AC_MSG_CHECKING(for existence of src/pvs.lisp)
AC_INIT(src/pvs.lisp)
	
dnl Check user has given icspath.  
AC_MSG_CHECKING(path to ics decision procedure)
AC_ARG_WITH(ics, [ --with-ics=/path/to/ics ])
if test "x$with_ics" = "x"; then
   echo
   AC_MSG_ERROR(Please specify --with-ics=/path/to/ics)
fi
if ! test -f $with_ics/src/ics.ml ; then
   echo
   AC_MSG_ERROR(ICS file $with_ics/src/ics.ml not found)
fi
if ! test -f $with_ics/config.guess ; then
   echo
   AC_MSG_ERROR(ICS file $with_ics/config.guess not found)
fi
ICSPATH=$with_ics
AC_MSG_RESULT($ICSPATH)
ICSARCH=`$ICSPATH/config.guess`
ICSLIB=$ICSPATH/lib/$ICSARCH
ICSOBJ=$ICSPATH/obj/$ICSARCH
AC_SUBST(ICSPATH)
AC_SUBST(ICSLIB)
AC_SUBST(ICSOBJ)

dnl Check for allegro path
AC_MSG_CHECKING(allegropath)
AC_ARG_WITH(allegropath, [ --with-allegro=/path/to/allegro ])
if test "x$with_allegro" = "x"; then
   ALLEGRODIR=/csl/allegro/allegro6.2
else
   ALLEGRODIR=$with_allegro
fi
if test -d $ALLEGRODIR; then
   AC_MSG_RESULT($ALLEGRODIR)
else
   AC_MSG_ERROR(cannot find $ALLEGRODIR: please specify --with-allegro=/path/to/allegro)
fi	
ALLEGROLIB=`ls $ALLEGRODIR | grep "libacl[[0-9]]*\.so$" | cut -c 4- | cut -d"." -f 1`
if test "x$ALLEGROLIB" = "x"; then
   ALLEGROLIB=`ls $ALLEGRODIR | grep "libacl[[0-9]]*\.so$" | cut -c 4- | cut -d"." -f 1`
fi
if test -f $ALLEGRODIR/mlisp8 ; then
   LISPEXE=mlisp8
else   
   if test -f $ALLEGRODIR/lisp  ; then
   LISPEXE=lisp
   else
   echo
   AC_MSG_ERROR(Invalid allegropath - can't find $ALLEGRODIR/libacl[[0-9]]\*.so)
   fi
fi
AC_MSG_CHECKING(lisp verson)
LISPVERSION=`$ALLEGRODIR/$LISPEXE -e '(format t "~a" (lisp-implementation-version))' -kill | tail -1 | cut -d" " -f 1`
LISP=allegro$LISPVERSION				  
AC_MSG_RESULT($LISP)
AC_SUBST(ALLEGRODIR)
AC_SUBST(ALLEGROLIB)
AC_SUBST(LISP)
AC_SUBST(LISPEXE)
	
dnl Giving pvspath is optional
AC_MSG_CHECKING(pvspath)
AC_ARG_WITH(pvspath, [ --with-pvspath=/path/to/pvs ])
if test "x$with_pvspath" = "x"; then
  PVSPATH=`pwd`
else
  PVSPATH=$with_pvspath
fi
if test -f $PVSPATH/pvs.in; then
  AC_MSG_RESULT(found $PVSPATH/pvs.in)
else
  AC_MSG_ERROR(Invalid pvspath)
fi
AC_SUBST(PVSPATH)

dnl Check for ICS library
AC_MSG_CHECKING(libics.so)    
if test -f $ICSLIB/libics.so ; then
   AC_MSG_RESULT($ICSLIB/libics.so)
else
   AC_MSG_ERROR(Cannot find $ICSLIB/libics.so; may need to rebuild ICS)
fi

dnl Check for autogenerated ICS lisp interface
AC_MSG_CHECKING(ics.lisp)    
if ! test -f $ICSOBJ/ics.lisp ; then
   AC_MSG_ERROR(Cannot find $ICSOBJ/ics.lisp; may need to rebuild ICS)
fi

dnl Check for programs required to build PVS
AC_PROG_CC    
if test "$GCC" != yes ; then
	AC_MSG_ERROR(Cannot find gcc)
fi
AC_MSG_CHECKING(for $CC version >= 2.95)
gcc_version=`$CC --version | head -n 1 | sed -e 's,[[^0-9.]],,g'`
maj_gcc_version=`echo $gcc_version | cut -d. -f 1`
min_gcc_version=`echo $gcc_version | cut -d. -f 2`
if test $maj_gcc_version -lt 2 -o \( $maj_gcc_version -eq 2 -a $min_gcc_version -lt 95 \); then
   AC_MSG_ERROR(found $gcc_version)
else
   AC_MSG_RESULT(found $gcc_version)
fi

AC_CHECK_PROG(LD,ld,ld,no)
if test "$LD" = no ; then
	AC_MSG_ERROR(Cannot find ld)
fi
AC_MSG_CHECKING(for $LD version >= 2.11)
ld_version=`$LD --version | head -n 1 | sed -e 's,[[^0-9.]],,g'`
maj_ld_version=`echo $ld_version | cut -d. -f 1`
min_ld_version=`echo $ld_version | cut -d. -f 2`
if test $maj_ld_version -lt 2 -o \( $maj_ld_version -eq 2 -a $min_ld_version -lt 11 \); then
   AC_MSG_ERROR(found $ld_version)
else
   AC_MSG_RESULT(found $ld_version)
fi

AC_CHECK_PROG(AR,ar,ar,no)
if test "$AR" = no ; then
	AC_MSG_ERROR(Cannot find ar)
fi

AC_PROG_RANLIB	

AC_CHECK_PROG(EMACS,emacs,emacs,no)
AC_CHECK_PROG(XEMACS,xemacs,xemacs,no)
if test \( "$EMACS" = no \) -a \( "$XEMACS" = no \); then
	AC_MSG_ERROR(Cannot find emacs or xemacs)
fi
if test "$EMACS" != no; then
   AC_MSG_CHECKING(for $EMACS version >= 19)
   emacs_version=`$EMACS --version | head -n 1 | sed -e 's,[[^0-9.]],,g'`
   maj_emacs_version=`echo $emacs_version | cut -d. -f 1`
   min_emacs_version=`echo $emacs_version | cut -d. -f 2`
   if test $maj_emacs_version -lt 19; then
      AC_MSG_ERROR(found $emacs_version)
   else
      AC_MSG_RESULT(found $emacs_version)
   fi
fi
dnl Don't need to check the xemacs version	

AC_CHECK_PROG(ETAGS,etags,etags,no)
if test "$ETAGS" = no ; then
	AC_MSG_ERROR(Cannot find etags)
fi

AC_CHECK_PROG(TAR,tar,tar,no)
if test "$TAR" = no ; then
	AC_MSG_ERROR(Cannot find tar)
fi
AC_MSG_CHECKING(for GNU $TAR version >= 1.11)
tar_version=`$TAR --version | head -n 1 | grep GNU | sed -e 's,[[^0-9.]],,g'`
maj_tar_version=`echo $tar_version | cut -d. -f 1`
min_tar_version=`echo $tar_version | cut -d. -f 2`
if test \( "x$tar_version" != "x" \) -a \( $maj_tar_version -lt 1 -o \( $maj_tar_version -eq 1 -a $min_tar_version -lt 12 \) \); then
   AC_MSG_ERROR(found $tar_version)
else
   AC_MSG_RESULT(found $tar_version)
fi


AC_CHECK_PROG(RM,rm,rm,no)
if test "$RM" = no ; then
	AC_MSG_ERROR(Cannot find rm)
fi

dnl Get the platform to determine relevant Makefiles to update

PLATFORM=`./bin/pvs-platform`
export PLATFORM

# Finally create all the generated files
AC_OUTPUT(Makefile pvs src/make-allegro-pvs.lisp src/make-pvs.lisp pvs.system ess/dist-ess.lisp ess/allegro-runtime.lisp emacs/emacs-src/pvs-set-prelude-info.el doc/user-guide/Makefile doc/language/Makefile doc/language/pvs-doc.el doc/prover/Makefile)

chmod a+x pvs
