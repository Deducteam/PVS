#!/bin/sh
# Script for starting PVS
# This script starts up Emacs, which in turn invokes the PVS lisp image.
# The image is in the main PVS directory, and is named
#   pvs-PVSLISP-PVSARCH
# where PVSLISP reflects the lisp name and version, and PVSARCH is determined
# from the system on which PVS is invoked.

# command line arguments:
#   -h | -help | --help  prints a help line and exits
#   -version | --version prints the PVS version
#   -emacs       emacs, xemacs, or pathname
#   -load-after  emacs file name
#   -lisp        lisp image name
#   -runtime             use the runtime image
#   -decision-procedures  set the default decision procedures
#                                         (ics, shostak, or cyrluk)
#   -force-decision-procedures  forces the decision procedures to be used
#   -patchlevel  indicates the patch level:
#       0 (none). No patches
#       1 (rel).  Released patches (patch2.lisp)
#       2 (test). Test patches (patch2-test.lisp) (the default)
#       3 (exp).  Experimental patches (patch2-exp.lisp)
#   -batch       run in batch mode
#   -timeout     seconds to timeout commands or proofs - only allowed in batch
#   -nobg        don't run PVS in the background
#   -raw         run PVS without Emacs
#   -v           the (verbose) level number - 0-3
#   any emacs parameters (e.g. -q -batch -l foo)
#   any X window parameters (e.g. -geometry 80x60+0-0)
#
# If the corresponding command line argument is not given, the following
# environment variables are used if set:
#   PVSLISP       - corresponds to the -lisp argument
#   PVSEMACS      - corresponds to the -emacs argument
#   PVSPATCHLEVEL - corresponds to the -patchlevel argument
#   PVSXINIT      - X window parameters; e.g., "-g '-0-0'"
#   PVSVERBOSE    - corresponds to the -v argument
#
# The following environment variables are used by PVS, and are set below:
#   PVSPATH     pvs system path - this should not normally be set by the user  
#   PVSARCH	sun4 or ix86
#
# The PVS binary paths are appended to the front of the PATH variable 

# PVSPATH should be set after installation by <PVS>/bin/relocate or by hand
# to the location of the PVS installation
PVSPATH=@PVSPATH@

#-------------------------------------------------
# Nothing below this line should need modification


# get the command-line options
opsys=`uname -s`
flags=
batch=
rawmode=
PVSINEMACS=t
getversion=
nobg=
if [ -f $HOME/.emacs ]
  then dotemacs="-l $HOME/.emacs"
  else dotemacs=
fi
PVSXINIT=${PVSXINIT:-""}
PVSFORCEDP=nil
pvsruntime=
while [ $# -gt 0 ]
do
   case $1 in
     -emacs) PVSEMACS="$2"
             shift;;
     -lisp)  PVSLISP="$2"
             shift;;
     -load-after) loadafter=$loadafter" -load $2"
                  shift;;
     -runtime) pvsruntime=1;;
     -decision-procedures)
        case $2 in
	  ics)     PVSDEFAULTDP=ics;;
	  shostak) PVSDEFAULTDP=shostak;;
	  *) echo "The decision-procedures argument must be ics or shostak"
	     exit 1;;
	esac
	shift;;
     -force-decision-procedures)
        case $2 in
	  ics) PVSFORCEDP=:ics;;
	  shostak) PVSFORCEDP=:shostak;;
	  *) echo "The force-decision-procedures argument must be ics or shostak"
	     exit 1;;
	esac
	shift;;
     -nw)    nowin=1
             flags="$flags $1";;
     -nobg)  nobg=1;;
     -patchlevel)
        case $2 in
	  none) PVSPATCHLEVEL=0;;
	  rel)  PVSPATCHLEVEL=1;;
	  test) PVSPATCHLEVEL=2;;
	  exp)  PVSPATCHLEVEL=3;;
	  0|1|2|3) PVSPATCHLEVEL=$2;;
	  *) echo "The patchlevel must be none, rel, test, exp, or 0-3"
             exit 1;;
	esac
        shift;;
     -batch) PVSNONINTERACTIVE=t
             batch="$1";;
     -timeout) PVSTIMEOUT=$2
         if expr $PVSTIMEOUT : '\([0-9]*\)' != $PVSTIMEOUT > /dev/null; then
	   echo "The -timeout must be an integer"
	   exit 1
	 fi
	 shift;;
     -raw) unset PVSINEMACS
           rawmode="yes";;
     -v) case $2 in
           0|1|2|3) PVSVERBOSE=$2
                    shift;;
	   *) echo "The -v argument must be in the range 0-3"
              exit 1;;
	 esac;;
     -name|-title|-xrm) PVSXINIT="$PVSXINIT $1 $2"
                        shift;;
     -q|-no-init-file) flags="$flags $1"
                       PVSMINUSQ="-q"
		       dotemacs= ;;
     -where|--where) echo $PVSPATH
                     exit 0;;
     -version|--version) getversion="yes";;
     -h|-help|--help)  echo "usage:
       pvs [-options ...] [file]
where options include:
  -h | -help | --help  print out this message
  -version | --version show the PVS version number
  -emacs emacspath     emacs to use (e.g., emacs, xemacs, /usr/local/bin/emacs)
  -lisp lispversion  lisp image to use (e.g., allegro6.0)
  -load-after        emacs file
  -runtime           use the runtime image
  -decision-procedures  set default decision procedures (ics or shostak)
  -force-decision-procedures  forces the decision procedures (ics or shostak)
  -patchlevel level  patchlevel (none, rel, test, exp)
  -batch             run in batch mode
  -timeout number    use a timeout for commands or proofs in batch mode
  -raw               run PVS without Emacs
  -nobg              don't put PVS in the background
  -v number          verbosity level for batch mode (0-3)
  and any Emacs or X window options
To change the title and icon names, use -title and -xrm, for example,
  pvs -title foo -xrm \"pvs*iconName:bar\""
	            exit 0;;
     *)      flags="$flags $1";;
   esac
   shift
done

PVSEMACS=${PVSEMACS:-"emacs"}

# Determine the system type and set PVSARCH accordingly
case $opsys in
  SunOS) majvers=`uname -r | cut -d"." -f1`
	 if [ $majvers = 4 ]
	    then echo "PVS 3.3 only runs under Mac OS X, Linux, FreeBSD, or Solaris"; exit 1
	 fi
	 PVSARCH=sun4;;
  Linux) # If Linux, we need to determine the Redhat version to use.
	 opsys=redhat
	 majvers=5
	 othervers=4 
	 PVSARCH=ix86
	 # Allegro does not work with Linux's New Posix Thread Library (NPTL)
	 # used in newer Red Hat kernels and 2.6 kernels.  This will force
	 # the old thread-implementation.
	 export LD_ASSUME_KERNEL=2.4.19;
	 # See if setting this leads to problems - if it does, then
	 # uname exits with an error and we unset it.
	 uname -a > /dev/null 2>&1 || unset LD_ASSUME_KERNEL
	 ;;
  FreeBSD) opsys=redhat
	   majvers=5
	   othervers=4 
	   PVSARCH=ix86
	   # Allegro does not work with Linux's New Posix Thread Library (NPTL)
	   # used in newer Red Hat kernels and 2.6 kernels.  This will force
	   # the old thread-implementation.
	   export LD_ASSUME_KERNEL=2.4.19;
	   # See if setting this leads to problems - if it does, then
	   # uname exits with an error and we unset it.
	   uname -a > /dev/null 2>&1 || unset LD_ASSUME_KERNEL
           ;;
  Darwin) opsys=MacOSX
          majvers=7
	  PVSARCH=powerpc
	  ;;
  *) echo "PVS 3.3 only runs under Solaris, Linux, FreeBSD (linux-enabled), or Mac (Darwin 7.4)"; exit 1
esac

if [ ! "$PVSLISP" ]
   then PVSLISP=pvs-@LISP@
fi

binpath=$PVSPATH/bin/$PVSARCH-$opsys${majvers}

if [ -d $binpath/full -a -x $binpath/full/$PVSIMAGE -a ! "$pvsruntime" ]
   then PATH=$binpath/full:$binpath:$PVSPATH/bin:$PATH
    LD_LIBRARY_PATH=$binpath/full:$LD_LIBRARY_PATH
elif [ -d $binpath/runtime -a -x $binpath/runtime/$PVSIMAGE ]
   then PATH=$binpath/runtime:$binpath:$PVSPATH/bin:$PATH
    LD_LIBRARY_PATH=$binpath/runtime:$LD_LIBRARY_PATH
   else echo "Cannot find $binpath/runtime/$PVSIMAGE"
        echo "Check the values of PVSPATH and PVSLISP"
	exit 1
fi

ALLEGRO_CL_HOME=$PVSPATH/bin/$PVSARCH-$opsys${majvers}/home
PVSPATCHLEVEL=${PVSPATCHLEVEL:-2}

case $PVSPATCHLEVEL in
    none) PVSPATCHLEVEL=0;;
    rel)  PVSPATCHLEVEL=1;;
    test) PVSPATCHLEVEL=2;;
    exp)  PVSPATCHLEVEL=3;;
esac

if [ "$PVSVERBOSE" -a ! "$batch" ]
 then echo "The -verbose flag is used only with -batch; it will be ignored"
fi

if [ "$PVSTIMEOUT" -a ! "$batch" ]
 then echo "The -timeout flag is used only with -batch; it will be ignored"
fi

PVSVERBOSE=${PVSVERBOSE:-0}
PVSIMAGE="$PVSLISP"

export ALLEGRO_CL_HOME DISPLAY LD_LIBRARY_PATH
export PVSARCH PVSIMAGE PVSPATH PATH PVSLISP PVSVERBOSE PVSTIMEOUT
export PVSPATCHLEVEL PVSMINUSQ PVSFORCEDP PVSDEFAULTDP
export PVSNONINTERACTIVE PVSINEMACS

pvsemacsinit="-load $PVSPATH/emacs/go-pvs.el $loadafter"

if [ ! "$getversion" -a ! "$rawmode" -a ! "$batch" -a "$DISPLAY" != "" -a "$nowin" != 1 ]
 then
  HOST=${HOST:-`uname -n`}

  # Now try to determine which version of Emacs we're running, and set
  # PVSXINIT accordingly.

  case $PVSEMACS in
    *[xl]emacs*) \
      if [ $nobg ] ; then
        ($PVSEMACS $flags -name pvs -in PVS@$HOST -wn PVS@$HOST \
                   $PVSXINIT $pvsemacsinit )
      else
        ($PVSEMACS $flags -name pvs -in PVS@$HOST -wn PVS@$HOST \
                   $PVSXINIT $pvsemacsinit &)
      fi;;
    *) \
      if [ $nobg ] ; then
        ($PVSEMACS $flags -name pvs -xrm "pvs*title:PVS@$HOST
                                          pvs*iconName:PVS@$HOST" \
		   $PVSXINIT $pvsemacsinit)
      else
        ($PVSEMACS $flags -name pvs -xrm "pvs*title:PVS@$HOST
                                          pvs*iconName:PVS@$HOST" \
		   $PVSXINIT $pvsemacsinit &)
      fi;;
  esac
elif [ $getversion ]
  then
    $PVSIMAGE -qq -e "(progn (format t \"PVS version ~a~%\" pvs::*pvs-version*) (excl:exit nil :quiet t))"
elif [ $rawmode ]
  then
    $PVSIMAGE -qq $flags
elif [ $batch ]
  then
    $PVSEMACS $batch $dotemacs $pvsemacsinit $flags 2>&1
else
  $PVSEMACS $pvsemacsinit $flags
fi
