(card_def (inj_set_TCC1 0 (inj_set_TCC1-1 nil 3236534052 3236534101 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp*) (("" (expand "nonempty?") (("" (expand "empty?") (("" (expand "member") (("" (inst -2 "N!1") (("" (inst?) nil)))))))))))))) nil) proved ((nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (number nonempty-type-decl nil numbers nil) (empty? const-decl "bool" sets nil) (finite_set type-eq-decl nil finite_sets_def nil) (is_finite const-decl "bool" finite_sets_def nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil card_def nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 687 150 nil nil)) (inj_Card 0 (inj_Card-1 nil 3236534052 3236534102 ("" (skosimp) (("" (expand "Card") (("" (rewrite "min_def") (("" (expand "minimum?") (("" (flatten) (("" (expand "inj_set") (("" (propax) nil)))))))))))) nil) proved ((Card const-decl "nat" card_def nil) (minimum? const-decl "bool" min_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (inj_set const-decl "(nonempty?[nat])" card_def nil) (finite_set type-eq-decl nil finite_sets_def nil) (is_finite const-decl "bool" finite_sets_def nil) (T formal-type-decl nil card_def nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (min_def formula-decl nil min_nat nil)) 745 150 nil nil)) (reduce_inj_TCC1 0 (reduce_inj_TCC1-1 nil 3236534052 3236534102 ("" (assert) nil nil) proved nil 92 30 nil nil)) (reduce_inj 0 (reduce_inj-1 nil 3236534052 3236534120 ("" (skosimp) (("" (grind :if-match nil) (("" (inst 2 "LAMBDA (x : (S!1)) : IF f!1(x) = p!1 - 1 THEN y!1 ELSE f!1(x) ENDIF") (("1" (beta) (("1" (skosimp) (("1" (inst -2 "x1!1" "x2!1") (("1" (lift-if) (("1" (lift-if) (("1" (assert) (("1" (prop) (("1" (inst?) nil) ("2" (inst 3 "x2!1") (("2" (assert) nil))))))))))))))))) ("2" (skosimp) (("2" (assert) nil))) ("3" (skosimp) (("3" (inst 2 "x!1") (("3" (assert) nil)))))))))) nil) proved ((injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (below type-eq-decl nil nat_types nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (T formal-type-decl nil card_def nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets_def nil) (finite_set type-eq-decl nil finite_sets_def nil) (S!1 skolem-const-decl "finite_set[T]" card_def nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (p!1 skolem-const-decl "posnat" card_def nil) (f!1 skolem-const-decl "[(S!1) -> below[p!1]]" card_def nil) (- const-decl "[real, real -> real]" reals nil) (y!1 skolem-const-decl "below[p!1]" card_def nil)) 17686 540 nil nil)) (Card_injection 0 (Card_injection-1 nil 3236534052 3236534121 ("" (skosimp*) (("" (expand "Card") (("" (typepred "min(inj_set(S!1))") (("" (inst?) (("" (assert) (("" (expand "inj_set") (("" (inst?) nil)))))))))))) nil) proved ((Card const-decl "nat" card_def nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil card_def nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets_def nil) (finite_set type-eq-decl nil finite_sets_def nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonempty? const-decl "bool" sets nil) (inj_set const-decl "(nonempty?[nat])" card_def nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat nil)) 968 190 nil nil)) (Card_surjection 0 (Card_surjection-1 nil 3236534052 3236537321 ("" (skosimp*) (("" (name "CS" "Card(S!1)") (("" (replace -1) (("" (forward-chain "inj_Card") (("" (skolem!) (("" (rewrite "injection_n_to_m") (("" (copy -3) (("" (expand "surjective?" -1) (("" (inst -1 "0") (("" (skosimp*) (("" (inst 1 "f!2 o inverse(f!1)") (("1" (hide -3 2) (("1" (forward-chain "inj_inv[(S!1),below[n!1]]") (("1" (hide -4) (("1" (grind :if-match nil :exclude inverse) (("1" (inst -6 "epsilon! (x: (S!1)): f!1(x) = x1!1" "epsilon! (x: (S!1)): f!1(x) = x2!1") (("1" (inst -3 "x1!1" "x2!1") (("1" (assert) (("1" (expand "inverse") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Card const-decl "nat" card_def nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (finite_set type-eq-decl nil finite_sets_def nil) (is_finite const-decl "bool" finite_sets_def nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (T formal-type-decl nil card_def nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (inj_Card formula-decl nil card_def nil) (injection_n_to_m formula-decl nil nat_fun_props nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (inj_inv formula-decl nil function_inverse nil) (O const-decl "T3" function_props nil) (inverse const-decl "D" function_inverse nil) (TRUE const-decl "bool" booleans nil) (S!1 skolem-const-decl "finite_set[T]" card_def nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (surjective? const-decl "bool" functions nil)) 279106 28510 t nil)) (Card_bijection 0 (Card_bijection-1 nil 3236534052 3236534128 ("" (skolem!) (("" (prop) (("1" (forward-chain "inj_Card") (("1" (skolem!) (("1" (inst?) (("1" (expand "bijective?") (("1" (assert) (("1" (case "n!1 = 0") (("1" (delete -2 -3) (("1" (grind) nil))) ("2" (assert) (("2" (forward-chain "reduce_inj") (("2" (forward-chain "Card_injection") (("2" (assert) nil))))))))))))))))))) ("2" (expand "bijective?") (("2" (skosimp) (("2" (lemma "Card_injection" ("S" "S!1" "n" "n!1")) (("2" (split) (("1" (lemma "Card_surjection" ("S" "S!1" "n" "n!1")) (("1" (ground) (("1" (inst?) nil))))) ("2" (inst?) nil)))))))))))) nil) proved ((bijective? const-decl "bool" functions nil) (= const-decl "[T, T -> boolean]" equalities nil) (surjective? const-decl "bool" functions nil) (reduce_inj formula-decl nil card_def nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (Card_injection formula-decl nil card_def nil) (- const-decl "[real, real -> real]" reals nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets_def nil) (is_finite const-decl "bool" finite_sets_def nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil card_def nil) (inj_Card formula-decl nil card_def nil) (Card_surjection formula-decl nil card_def nil)) 2357 400 nil nil)) (Card_disj_union 0 (Card_disj_union-1 nil 3236534052 3236534140 ("" (skosimp) (("" (name-replace "N1" "Card(S!1)" :hide? nil) (("" (name-replace "N2" "Card(S2!1)" :hide? nil) (("" (auto-rewrite "Card_bijection") (("" (do-rewrite) (("" (skosimp*) (("" (inst 1 "LAMBDA (x : (union(S!1, S2!1))) : IF S!1(x) THEN f!2(x) ELSE N1 + f!1(x) ENDIF") (("1" (expand "bijective?") (("1" (prop) (("1" (delete -2 -4) (("1" (grind) nil))) ("2" (delete -1 -3) (("2" (grind :if-match nil) (("2" (inst -3 "y!1") (("1" (skolem!) (("1" (inst? 1) (("1" (assert) nil))))) ("2" (assert) (("2" (inst -2 "y!1 - N1") (("2" (skolem!) (("2" (grind) nil))))))))))))))))) ("2" (skosimp) (("2" (assert) nil))) ("3" (delete -1 -2) (("3" (grind) nil))) ("4" (skosimp) (("4" (assert) nil)))))))))))))))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (T formal-type-decl nil card_def nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets_def nil) (finite_set type-eq-decl nil finite_sets_def nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (Card const-decl "nat" card_def nil) (bijective? const-decl "bool" functions nil) (y!1 skolem-const-decl "below[N1 + N2]" card_def nil) (- const-decl "[real, real -> real]" reals nil) (surjective? const-decl "bool" functions nil) (x2!1 skolem-const-decl "(union(S!1, S2!1))" card_def nil) (x1!1 skolem-const-decl "(union(S!1, S2!1))" card_def nil) (disjoint? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (injective? const-decl "bool" functions nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (f!1 skolem-const-decl "[(S2!1) -> below[N2]]" card_def nil) (NOT const-decl "[bool -> bool]" booleans nil) (union const-decl "set" sets nil) (S!1 skolem-const-decl "finite_set[T]" card_def nil) (S2!1 skolem-const-decl "finite_set[T]" card_def nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (N1 skolem-const-decl "nat" card_def nil) (below type-eq-decl nil nat_types nil) (f!2 skolem-const-decl "[(S!1) -> below[N1]]" card_def nil) (+ const-decl "[real, real -> real]" reals nil) (N2 skolem-const-decl "nat" card_def nil) (Card_bijection formula-decl nil card_def nil)) 12569 3230 nil nil)) (card_TCC1 0 (card_TCC1-1 nil 3236534052 3236534141 ("" (inst 1 "(LAMBDA S: Card(S))") nil nil) proved ((Card const-decl "nat" card_def nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets_def nil) (is_finite const-decl "bool" finite_sets_def nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil card_def nil)) 233 30 nil nil)) (card_def 0 (card_def-1 nil 3236534052 3236534141 ("" (skosimp*) (("" (assert) nil)) nil) proved nil 86 30 nil nil)))
