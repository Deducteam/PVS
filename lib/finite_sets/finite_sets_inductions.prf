(finite_sets_inductions (cardinal_induction 0 (cardinal_induction-1 nil 3290220005 3290223421 ("" (grind :defs nil) nil nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (T formal-type-decl nil finite_sets_inductions nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil)) 196 170 nil nil)) (finite_set_induction 0 (finite_set_induction-1 nil 3290220005 3290223807 ("" (skosimp) (("" (case "(FORALL n, S: card(S) = n IMPLIES P!1(S))") (("1" (assert) (("1" (skosimp) (("1" (inst -1 "card(S!1)" "S!1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (induct "n") (("1" (skosimp) (("1" (rewrite "empty_card" :dir rl) (("1" (rewrite "emptyset_is_empty?") (("1" (expand "emptyset") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (use "nonempty_card") (("2" (assert) (("2" (rewrite "nonempty_member") (("2" (skolem!) (("2" (inst -2 "remove(x!1, S!1)") (("2" (inst -5 "x!1" "remove(x!1, S!1)") (("2" (auto-rewrite "card_remove" "add_remove_member") (("2" (assert) (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pred type-eq-decl nil defined_types nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets_inductions nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nat_induction formula-decl nil naturalnumbers nil) (empty_card formula-decl nil finite_sets nil) (emptyset const-decl "set" sets nil) (emptyset_is_empty? formula-decl nil sets_lemmas nil) (nonempty_card formula-decl nil finite_sets nil) (nonempty_member formula-decl nil sets_lemmas nil) (remove const-decl "set" sets nil) (member const-decl "bool" sets nil) (add_remove_member formula-decl nil sets_lemmas nil) (card_remove formula-decl nil finite_sets nil)) 170830 3460 t nil)) (finite_set_ind_modified 0 (finite_set_ind_modified-1 nil 3290220005 3290223422 ("" (skosimp*) (("" (lemma "finite_set_induction") (("" (inst?) (("" (split -1) (("1" (inst -1 "S!1") nil nil) ("2" (propax) nil nil) ("3" (skosimp*) (("3" (inst -3 "e!1" "S!2") (("3" (assert) (("3" (case-replace "add(e!1, S!2) = S!2") (("3" (apply-extensionality 1 :hide? t) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((finite_set_induction formula-decl nil finite_sets_inductions nil) (= const-decl "[T, T -> boolean]" equalities nil) (nonempty? const-decl "bool" sets nil) (add const-decl "(nonempty?)" sets nil) (member const-decl "bool" sets nil) (pred type-eq-decl nil defined_types nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets_inductions nil)) 246 180 nil nil)) (finite_set_induction_rest 0 (finite_set_induction_rest-1 nil 3290220005 3290223866 ("" (skosimp) (("" (case "(FORALL n, S: card(S) = n IMPLIES P!1(S))") (("1" (skosimp) (("1" (inst -1 "card(S!1)" "S!1") nil nil)) nil) ("2" (hide 2) (("2" (induct "n") (("1" (skosimp*) (("1" (hide -3) (("1" (case-replace "S!1 = emptyset") (("1" (rewrite "card_empty?") (("1" (rewrite "emptyset_is_empty?") nil nil)) nil)) nil)) nil)) nil) ("2" (auto-rewrite "card_rest" "nonempty?") (("2" (skosimp*) (("2" (use "nonempty_card") (("2" (assert) (("2" (inst? -4) (("2" (inst -1 "rest(S!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pred type-eq-decl nil defined_types nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets_inductions nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nat_induction formula-decl nil naturalnumbers nil) (card_empty? formula-decl nil finite_sets nil) (emptyset_is_empty? formula-decl nil sets_lemmas nil) (emptyset const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil) (rest const-decl "set" sets nil) (card_rest formula-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" sets nil) (non_empty_finite_set type-eq-decl nil finite_sets nil) (nonempty_card formula-decl nil finite_sets nil)) 42785 3090 t nil)) (finite_set_induction_union 0 (finite_set_induction_union-1 nil 3290220005 3290223423 ("" (skosimp) (("" (rewrite "finite_set_induction") (("" (skosimp) (("" (inst? -3) (("" (auto-rewrite "add_as_union" "singleton") (("" (inst -4 "S!1" "singleton(e!1)") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((finite_set_induction formula-decl nil finite_sets_inductions nil) (T formal-type-decl nil finite_sets_inductions nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (pred type-eq-decl nil defined_types nil) (singleton? const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (add_as_union formula-decl nil sets_lemmas nil)) 199 160 nil nil)) (finite_set_induction_gen 0 (finite_set_induction_gen-1 nil 3290220005 3290223914 ("" (skosimp) (("" (case "(FORALL n, S: card(S) = n IMPLIES P!1(S))") (("1" (skosimp) (("1" (inst -1 "card(S!1)" "S!1") nil nil)) nil) ("2" (hide 2) (("2" (induct "n" 1 "NAT_induction") (("2" (skosimp*) (("2" (inst -3 "S!1") (("2" (split -3) (("1" (propax) nil nil) ("2" (skosimp*) (("2" (inst -2 "card(S2!1)") (("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pred type-eq-decl nil defined_types nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets_inductions nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (NAT_induction formula-decl nil naturalnumbers nil)) 31572 1720 t nil)) (nonempty_card_induction_TCC1 0 (nonempty_card_induction_TCC1-1 nil 3290220005 3290223423 ("" (skosimp) (("" (rewrite "empty_card") (("" (assert) nil nil)) nil)) nil) proved ((empty_card formula-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (T formal-type-decl nil finite_sets_inductions nil)) 65 50 nil nil)) (nonempty_card_induction 0 (nonempty_card_induction-1 nil 3290220005 3290223424 ("" (skolem!) (("" (prop) (("1" (skosimp) (("1" (inst? -1) (("1" (rewrite "empty_card") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp :preds? t) (("2" (rewrite "empty_card") (("2" (inst -2 "U!1" "card(U!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil finite_sets_inductions nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" sets nil) (non_empty_finite_set type-eq-decl nil finite_sets nil) (S!1 skolem-const-decl "finite_set[T]" finite_sets_inductions nil) (empty_card formula-decl nil finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil)) 152 110 nil nil)) (nonempty_finite_set_induct 0 (nonempty_finite_set_induct-1 nil 3290220005 3290223424 ("" (skosimp*) (("" (case "FORALL S : empty?(S) OR Q!1(S)") (("1" (inst? -1) (("1" (assert) nil nil)) nil) ("2" (auto-rewrite "emptyset_is_empty?[T]" "Emptyset" "Singleton" "singleton_as_add") (("2" (rewrite "finite_set_ind_modified") (("2" (hide 2 3) (("2" (skosimp*) (("2" (split -1) (("1" (assert) (("1" (inst? -2) (("1" (assert) nil nil)) nil)) nil) ("2" (ground) (("2" (inst?) (("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pred type-eq-decl nil defined_types nil) (non_empty_finite_set type-eq-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" sets nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets_inductions nil) (finite_set_ind_modified formula-decl nil finite_sets_inductions nil) (singleton_as_add formula-decl nil sets_lemmas nil) (emptyset_is_empty? formula-decl nil sets_lemmas nil) (= const-decl "[T, T -> boolean]" equalities nil) (S!1 skolem-const-decl "finite_set[T]" finite_sets_inductions nil) (emptyset const-decl "set" sets nil)) 275 220 nil nil)))
