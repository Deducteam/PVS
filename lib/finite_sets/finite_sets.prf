(|finite_sets| (|card_emptyset| "" (REWRITE "card_def") (("" (REWRITE "Card_bijection") (("" (INST 1 "LAMBDA (x : {x: T | FALSE}) : 0") (("1" (EXPAND "bijective?") (("1" (PROP) (("1" (EXPAND "injective?") (("1" (SKOSIMP*) (("1" (TYPEPRED "x1!1") (("1" (EXPAND "emptyset") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "surjective?") (("2" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "emptyset") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) (|empty_card| "" (SKOLEM!) (("" (PROP) (("1" (REWRITE "emptyset_is_empty?[T]") (("1" (REPLACE -1) (("1" (USE "card_emptyset") NIL NIL)) NIL)) NIL) ("2" (REWRITE "card_def") (("2" (REWRITE "Card_bijection") (("2" (SKOLEM!) (("2" (DELETE -) (("2" (GRIND) (("2" (TYPEPRED "f!1(x!1)") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|card_empty?| "" (SKOSIMP*) (("" (REWRITE "empty_card") NIL NIL)) NIL) (|card_is_0| "" (SKOSIMP*) (("" (REWRITE "card_empty?") (("" (REWRITE "emptyset_is_empty?") NIL NIL)) NIL)) NIL) (|nonempty_card| "" (SKOSIMP) (("" (EXPAND "nonempty?") (("" (REWRITE "empty_card") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) (|card_singleton| "" (SKOSIMP*) (("" (REWRITE "card_def") (("" (REWRITE "Card_bijection") (("" (INST 1 "LAMBDA (y : (singleton(x!1))) : 0") (("" (GRIND) (("" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|card_one| "" (SKOSIMP*) (("" (REWRITE "card_def") (("" (PROP) (("1" (REWRITE "Card_bijection") (("1" (SKOLEM!) (("1" (GRIND :IF-MATCH NIL) (("1" (INST -2 "0") (("1" (SKOLEM!) (("1" (INST? 1) (("1" (APPLY-EXTENSIONALITY :HIDE? T) (("1" (IFF) (("1" (GROUND) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "card_def" :DIR RL) (("2" (REWRITE "card_singleton") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|card_disj_union| "" (SKOSIMP*) (("" (REWRITE "card_def") (("" (REWRITE "card_def") (("" (REWRITE "card_def") (("" (REWRITE "Card_disj_union") NIL NIL)) NIL)) NIL)) NIL)) NIL) (|card_diff_subset| "" (SKOSIMP) (("" (FORWARD-CHAIN "union_diff_subset") (("" (LEMMA "card_disj_union") (("" (INST?) (("" (ASSERT) (("" (REWRITE "difference_disjoint") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|card_subset| "" (SKOSIMP) (("" (FORWARD-CHAIN "card_diff_subset") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|card_plus| "" (AUTO-REWRITE "union_subset1[T]" "intersection_subset1[T]") (("" (SKOLEM!) (("" (LEMMA "card_diff_subset") (("" (INST-CP -1 "A!1" "union(A!1, B!1)") (("" (REWRITE "diff_union_inter[T]") (("" (INST? -1) (("" (GROUND) (("" (REWRITE "intersection_commutative" 1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|card_union| "" (SKOSIMP*) (("" (LEMMA "card_plus") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|card_add| "" (SKOSIMP*) (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "member_add") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (REWRITE "add_as_union") (("2" (REWRITE "singleton" :DIR RL) (("2" (REWRITE "union_commutative") (("2" (REWRITE "card_disj_union") (("1" (REWRITE "card_singleton") (("1" (ASSERT) (("1" (EXPAND "singleton") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "singleton_disjoint") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|card_remove| "" (SKOLEM!) (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "remove_as_difference") (("1" (REWRITE "card_diff_subset") (("1" (REWRITE "card_singleton") NIL NIL) ("2" (LEMMA "singleton_subset[T]") (("2" (INST?) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "member_remove") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|card_rest| "" (SKOSIMP) (("" (EXPAND "rest") (("" (REWRITE "card_remove") (("1" (LEMMA "choose_member[T]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|same_card_subset| "" (SKOSIMP) (("" (CASE "EXISTS x : member(x, B!1) AND subset?(A!1, remove(x, B!1))") (("1" (SKOSIMP) (("1" (EXPAND "member") (("1" (FORWARD-CHAIN "card_subset") (("1" (REWRITE "card_remove") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND :EXCLUDE "Card" :IF-MATCH NIL) (("1" (INST? -) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST? +) (("2" (ASSERT) (("2" (SKOSIMP) (("2" (ASSERT) (("2" (INST - "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|smaller_card_subset| "" (SKOSIMP) (("" (FORWARD-CHAIN "card_subset") (("" (CASE-REPLACE "A!1 = B!1") (("1" (ASSERT) NIL NIL) ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|card_1_has_1| "" (SKOSIMP*) (("" (USE "card_empty?") (("" (IFF) (("" (FLATTEN) (("" (ASSERT) (("" (EXPAND "empty?") (("" (SKOSIMP*) (("" (EXPAND "member") (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|card_2_has_2| "" (SKOSIMP*) (("" (LEMMA "card_1_has_1") (("" (INST?) (("" (ASSERT) (("" (SKOSIMP*) (("" (LEMMA "card_1_has_1") (("" (INST -1 "remove(x!1,S!1)") (("" (REWRITE "card_remove") (("" (LIFT-IF) (("" (ASSERT) (("" (SKOSIMP*) (("" (EXPAND "remove") (("" (EXPAND "member") (("" (FLATTEN) (("" (INST 2 "x!1" "x!2") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|card_intersection_le| "" (SKOSIMP*) (("" (CASE "subset?(intersection(A!1, B!1),A!1) AND
             subset?(intersection(A!1, B!1),B!1)") (("1" (FLATTEN) (("1" (LEMMA "card_subset") (("1" (SPLIT 1) (("1" (INST -1 "intersection(A!1, B!1)" "A!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -1 "intersection(A!1, B!1)" "B!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "subset?") (("2" (EXPAND "intersection") (("2" (EXPAND "member") (("2" (SPLIT 1) (("1" (SKOSIMP*) NIL NIL) ("2" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|card_bij| "" (SKOSIMP*) (("" (REWRITE "card_def") (("" (REWRITE "Card_bijection") NIL NIL)) NIL)) NIL) (|bij_exists| "" (SKOSIMP*) (("" (LEMMA "card_bij") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL))
