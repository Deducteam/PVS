(finite_cross (is_finite_cross 0 (is_finite_cross-2 "" 3308519703 3308519703 ("" (skosimp*) (("" (expand "is_finite_type") (("" (skosimp*) (("" (inst + "N!1*N!2+N!2" "LAMBDA (x:T1,y:T2): g!1(x)*N!2+g!2(y)") (("1" (expand "injective?") (("1" (skosimp* t) (("1" (case "g!1(x1!1`1) = g!1(x2!1`1) & g!2(x1!1`2) = g!2(x2!1`2)") (("1" (flatten) (("1" (inst?) (("1" (inst?) (("1" (assert) (("1" (decompose-equality 1) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2 -2 -1) (("2" (typepred "g!1(x1!1`1)" "g!2(x1!1`2)" "g!1(x2!1`1)" "g!2(x2!1`2)") (("2" (use "unique_division") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "g!1(x!1)" "g!2(y!1)") (("2" (use "both_sides_times_pos_lt1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 196814 6680 t shostak) (is_finite_cross-1 nil 3270493088 3308519450 ("" (skosimp*) (("" (expand "is_finite_type") (("" (skosimp*) (("" (inst + "N!1*N!2+N!2" "LAMBDA (x:T1,y:T2): g!1(x)*N!2+g!2(y)") (("1" (expand "injective?") (("1" (skosimp* t) (("1" (case "g!1(x1!1`1) = g!1(x2!1`1) & g!2(x1!1`2) = g!2(x2!1`2)") (("1" (flatten) (("1" (inst?) (("1" (inst?) (("1" (assert) (("1" (decompose-equality 1) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2 -2 -1) (("2" (typepred "g!1(x1!1`1)" "g!2(x1!1`2)" "g!1(x2!1`1)" "g!2(x2!1`2)") (("2" (use "unique_division") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "g!1(x!1)" "g!2(y!1)") (("2" (mult-by -1 "N!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((is_finite_type const-decl "bool" finite_sets nil) (g!1 skolem-const-decl "[T1 -> below[N!1]]" finite_cross nil) (N!1 skolem-const-decl "nat" finite_cross nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (g!2 skolem-const-decl "[T2 -> below[N!2]]" finite_cross nil) (below type-eq-decl nil nat_types nil) (N!2 skolem-const-decl "nat" finite_cross nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (T2 formal-type-decl nil finite_cross nil) (T1 formal-type-decl nil finite_cross nil) (unique_division formula-decl nil euclidean_division nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (> const-decl "bool" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 5186 2840 t shostak)))
