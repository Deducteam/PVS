(|finite_sets_int| (|finite_subrng| "" (SKOSIMP*) (("" (EXPAND "in_subrng") (("" (EXPAND "is_finite") (("" (INST 1 "abs(j!1-i!1+1)" "(LAMBDA (x: {x: int | i!1 <= x AND x <= j!1}): x - i!1)") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|finite_subrng_subset| "" (SKOSIMP*) (("" (CASE "subset?({x: int | in_subrng(x, i!1, j!1) AND p!1(x)},{x: int | in_subrng(x, i!1, j!1)})") (("1" (LEMMA "finite_subset") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 2) (("2" (REWRITE "finite_subrng") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "subset?") (("2" (EXPAND "member") (("2" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|card_subrng_TCC1| "" (SKOSIMP*) (("" (REWRITE "finite_subrng") NIL NIL)) NIL) (|card_subrng| "" (SKOSIMP*) (("" (CASE "i!1 > j!1") (("1" (ASSERT) (("1" (CASE "{x: int | in_subrng(x, i!1, j!1)} = emptyset") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "card_emptyset") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "card_bij") (("2" (INST -1 "abs(j!1-i!1+1)" "{x | in_subrng(x, i!1, j!1)}") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (INST 2 "(LAMBDA (x: {x | in_subrng(x, i!1, j!1)}): abs(x -i!1))") (("1" (EXPAND "bijective?") (("1" (PROP) (("1" (EXPAND "injective?") (("1" (SKOSIMP*) (("1" (TYPEPRED "x1!1") (("1" (TYPEPRED "x2!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "surjective?") (("2" (SKOSIMP*) (("2" (TYPEPRED "y!1") (("2" (INST 1 "y!1+i!1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "x!1") (("2" (EXPAND "in_subrng") (("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (REWRITE "finite_subrng") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|finite_int_subrange| "" (SKOSIMP*) (("" (EXPAND "is_finite") (("" (INST 1 "abs(j!1-i!1+1)" "(LAMBDA (x: (extend[int, subrange(i!1, j!1), bool,
                 FALSE]({x: subrange(i!1, j!1) | TRUE}))): x - i!1)") (("1" (EXPAND "injective?") (("1" (SKOSIMP*) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "abs") (("2" (GROUND) (("1" (TYPEPRED "x!1") (("1" (EXPAND "extend") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (GROUND) (("1" (TYPEPRED "x!1") (("1" (EXPAND "extend") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (EXPAND "extend") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|finite_int_subrange_pred| "" (SKOSIMP*) (("" (CASE "is_finite({x: subrange(i!1, j!1) | TRUE})") (("1" (LEMMA "finite_subset") (("1" (INST -1 "{x: subrange(i!1, j!1) | TRUE}" "{x: subrange(i!1, j!1) | p!1(x)}") (("1" (ASSERT) (("1" (HIDE -1 2) (("1" (EXPAND "subset?") (("1" (SKOSIMP*) (("1" (EXPAND "member") (("1" (EXPAND "extend") (("1" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "is_finite") (("2" (SKOSIMP) (("2" (INST 1 "N!1" "LAMBDA (x: (extend[int, subrange(i!1, j!1), bool, FALSE]
                      ({x: subrange(i!1, j!1) | TRUE}))): IF i!1 <= x and x <= j!1 then f!1(x) ELSE 0 ENDIF") (("1" (GRIND :IF-MATCH NIL) (("1" (INST -6 "x1!1" "x2!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (TYPEPRED "x!1") (("2" (EXPAND "extend") (("2" (ASSERT) (("2" (REPLACE 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "finite_int_subrange") (("2" (INST?) (("2" (EXPAND "is_finite") (("2" (SKOSIMP*) (("2" (INST 1 "N!1" "lambda (x: ({x: subrange(i!1, j!1) | TRUE})): f!1(x)") (("1" (GRIND :IF-MATCH NIL) (("1" (INST -5 "x1!1" "x2!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|card_int_subrange_TCC1| "" (SKOSIMP*) (("" (REWRITE "finite_int_subrange") NIL NIL)) NIL) (|card_int_subrange| "" (SKOSIMP*) (("" (CASE "i!1 > j!1") (("1" (ASSERT) (("1" (CASE "extend[int, subrange(i!1, j!1),
                       bool, FALSE]({x: subrange(i!1, j!1)
                                    | TRUE}) = emptyset") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "card_emptyset") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "extend") (("2" (APPLY-EXTENSIONALITY) (("2" (LIFT-IF) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "card_bij") (("2" (INST -1 "abs(j!1-i!1+1)" "extend[int, subrange(i!1, j!1),
                       bool, FALSE]({x: subrange(i!1, j!1)
                                    | TRUE})") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (INST 2 "(LAMBDA (x: (extend[int, subrange(i!1, j!1), bool,
                        FALSE]({x: subrange(i!1, j!1) | TRUE}))): abs(x -i!1))") (("1" (EXPAND "bijective?") (("1" (PROP) (("1" (EXPAND "injective?") (("1" (SKOSIMP*) (("1" (TYPEPRED "x1!1") (("1" (TYPEPRED "x2!1") (("1" (EXPAND "extend") (("1" (EXPAND "abs") (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "surjective?") (("2" (SKOSIMP*) (("2" (INST 1 "y!1+i!1") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "extend") (("2" (ASSERT) (("2" (PROP) (("2" (TYPEPRED "y!1") (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "abs") (("2" (TYPEPRED "x!1") (("2" (EXPAND "extend") (("2" (PROP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "finite_int_subrange") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL))
