(|finite_sets_nat|
 (|finite_bounded| "" (SKOSIMP*)
  (("" (EXPAND "is_finite")
    (("" (INST 1 "N!1" "(lambda (x: below(N!1)): x)")
      (("" (EXPAND "injective?") (("" (SKOSIMP*) NIL)))))))))
 (|card_bounded_TCC1| "" (SKOSIMP*)
  (("" (ASSERT)
    (("" (EXPAND "is_finite")
      (("" (INST 1 "N!1" "(lambda (x: below(N!1)): x)")
        (("" (EXPAND "injective?") (("" (SKOSIMP*) NIL)))))))))))
 (|card_bounded| "" (SKOSIMP*)
  (("" (REWRITE "card_bij")
    (("1" (INST 1 "(lambda (x:below(N!1)):x)")
      (("1" (EXPAND "bijective?")
        (("1" (SPLIT 1)
          (("1" (EXPAND "injective?") (("1" (SKOSIMP*) NIL)))
           ("2" (EXPAND "surjective?")
            (("2" (SKOSIMP*) (("2" (INST 1 "y!1") NIL)))))))))))
     ("2" (REWRITE "finite_bounded") NIL)))))
 (|finite_bounded_subset| "" (SKOSIMP*)
  (("" (LEMMA "finite_subset")
    (("" (INST -1 "{j: nat | j < N!1}" "{j: nat | j < N!1 AND p!1(j)}")
      (("1" (ASSERT)
        (("1" (HIDE 2)
          (("1" (EXPAND "subset?")
            (("1" (EXPAND "member") (("1" (SKOSIMP*) NIL)))))))))
       ("2" (REWRITE "finite_bounded") NIL)))))))
 (|card_bounded_subset_TCC1| "" (SKOSIMP*)
  (("" (LEMMA "finite_bounded_subset") (("" (INST?) NIL)))))
 (|card_bounded_subset| "" (SKOSIMP*)
  (("" (LEMMA "card_bounded")
    (("" (INST -1 "N!1")
      (("" (LEMMA "card_subset")
        ((""
          (INST -1 "{j: nat | j < N!1 AND p!1(j)}"
           "{j: nat | j < N!1}")
          (("1" (SPLIT -1)
            (("1" (ASSERT) NIL)
             ("2" (HIDE -1 2)
              (("2" (EXPAND "subset?")
                (("2" (SKOSIMP*)
                  (("2" (EXPAND "member") (("2" (ASSERT) NIL)))))))))))
           ("2" (REWRITE "finite_bounded") NIL)
           ("3" (REWRITE "finite_bounded_subset") NIL)))))))))))
 (|finite_nat_below| "" (SKOSIMP*)
  (("" (EXPAND "is_finite")
    ((""
      (INST 1 "n!1"
       "(LAMBDA (x: (extend[nat, below(n!1), bool, FALSE]({x: below(n!1) | TRUE}))): x)")
      (("1" (EXPAND "injective?") (("1" (SKOSIMP*) NIL)))
       ("2" (SKOSIMP*)
        (("2" (ASSERT)
          (("2" (TYPEPRED "x!1")
            (("2" (EXPAND "extend") (("2" (PROPAX) NIL)))))))))))))))
 (|card_nat_below_TCC1| "" (SKOSIMP*)
  (("" (LEMMA "finite_nat_below") (("" (INST?) NIL)))))
 (|card_nat_below| "" (SKOSIMP*)
  (("" (LEMMA "card_bij")
    ((""
      (INST -1 "n!1"
       "extend[nat, below(n!1), bool, FALSE]({x: below(n!1) | TRUE})")
      (("1" (REPLACE -1)
        (("1" (HIDE -1)
          (("1"
            (INST 1
             "(LAMBDA (x: (extend[nat, below(n!1), bool, FALSE]({x: below(n!1) | TRUE}))): x)")
            (("1" (EXPAND "bijective?")
              (("1" (PROP)
                (("1" (EXPAND "injective?") (("1" (SKOSIMP*) NIL)))
                 ("2" (EXPAND "surjective?")
                  (("2" (SKOSIMP*)
                    (("2" (INST 1 "y!1")
                      (("2" (EXPAND "extend")
                        (("2" (PROPAX) NIL)))))))))))))
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "x!1")
                (("2" (EXPAND "extend") (("2" (ASSERT) NIL)))))))))))))
       ("2" (LEMMA "finite_nat_below") (("2" (INST?) NIL)))))))))
 (|finite_nat_upto| "" (SKOSIMP*)
  (("" (EXPAND "is_finite")
    ((""
      (INST 1 "n!1+1"
       "(LAMBDA (x: (extend[nat, upto(n!1), bool, FALSE]({x: upto(n!1) | TRUE}))): x)")
      (("1" (EXPAND "injective?") (("1" (SKOSIMP*) NIL)))
       ("2" (SKOSIMP*)
        (("2" (TYPEPRED "x!1")
          (("2" (EXPAND "extend") (("2" (ASSERT) NIL)))))))))))))
 (|card_nat_upto_TCC1| "" (SKOSIMP*)
  (("" (LEMMA "finite_nat_upto") (("" (INST?) NIL)))))
 (|card_nat_upto| "" (SKOSIMP*)
  (("" (LEMMA "card_bij")
    ((""
      (INST -1 "n!1+1"
       "extend[nat, upto(n!1), bool, FALSE]({x: upto(n!1) | TRUE})")
      (("1" (REPLACE -1)
        (("1" (HIDE -1)
          (("1" (INST 1 "(LAMBDA (x: {x: upto(n!1) | TRUE}): x)")
            (("1" (EXPAND "bijective?")
              (("1" (PROP)
                (("1" (EXPAND "injective?") (("1" (SKOSIMP*) NIL)))
                 ("2" (EXPAND "surjective?")
                  (("2" (SKOSIMP*)
                    (("2" (INST 1 "y!1")
                      (("2" (EXPAND "extend")
                        (("2" (PROPAX) NIL)))))))))))))
             ("2" (SKOSIMP*)
              (("2" (PROP)
                (("1" (EXPAND "extend") (("1" (ASSERT) NIL)))
                 ("2" (EXPAND "extend") (("2" (ASSERT) NIL)))))))
             ("3" (SKOSIMP*)
              (("3" (EXPAND "extend") (("3" (PROPAX) NIL)))))))))))
       ("2" (LEMMA "finite_nat_upto") (("2" (INST?) NIL)))))))))
 (|finite_nat_subrange| "" (SKOSIMP*)
  (("" (EXPAND "is_finite")
    ((""
      (INST 1 "j!1+1" "(LAMBDA (x: (restrict[int, nat,
                   bool](extend[int, subrange(i!1, j!1), bool,
                                FALSE]({x: subrange(i!1, j!1) | TRUE})))): x)")
      (("1" (EXPAND "injective?") (("1" (SKOSIMP*) NIL)))
       ("2" (SKOSIMP*)
        (("2" (ASSERT)
          (("2" (TYPEPRED "x!1")
            (("2" (EXPAND "restrict")
              (("2" (EXPAND "extend")
                (("2" (PROPAX) NIL)))))))))))))))))
 (|card_nat_subrange_TCC1| "" (SKOSIMP*)
  (("" (LEMMA "finite_nat_subrange") (("" (INST?) NIL)))))
 (|card_nat_subrange| "" (SKOSIMP*)
  (("" (LEMMA "card_bij")
    (("" (INST?)
      (("1" (REPLACE -1)
        (("1" (HIDE -1)
          (("1"
            (INST 1 "(LAMBDA (x: (restrict[int, nat,
                          bool](extend[int, subrange(i!1, j!1), bool,
                                       FALSE]({x: subrange(i!1, j!1) | TRUE})))): 
                        IF i!1 <= j!1 THEN x-i!1 ELSE 0 ENDIF)")
            (("1" (EXPAND "bijective?")
              (("1" (PROP)
                (("1" (EXPAND "injective?")
                  (("1" (SKOSIMP*)
                    (("1" (TYPEPRED "x1!1")
                      (("1" (TYPEPRED "x2!1")
                        (("1" (GRIND) NIL)))))))))
                 ("2" (EXPAND "surjective?")
                  (("2" (SKOSIMP*)
                    (("2" (INST 1 "y!1+i!1")
                      (("1" (TYPEPRED "y!1") (("1" (GRIND) NIL)))
                       ("2" (TYPEPRED "y!1")
                        (("2" (GRIND) NIL)))))))))))))
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "x!1") (("2" (GRIND) NIL)))))
             ("3" (SKOSIMP*)
              (("3" (TYPEPRED "x!1") (("3" (GRIND) NIL)))))))))))
       ("2" (HIDE 2) (("2" (REWRITE "finite_nat_subrange") NIL)))
       ("3" (HIDE 2) (("3" (FLATTEN) (("3" (ASSERT) NIL))))))))))))
