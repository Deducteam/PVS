(finite_sets_nat (finite_bounded 0 (finite_bounded-1 nil 3249288222 3306569282 ("" (skosimp*) (("" (expand "is_finite") (("" (inst 1 "N!1" "(lambda (x: below(N!1)): x)") (("" (expand "injective?") (("" (skosimp*) nil)))))))) nil) proved ((is_finite const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 229 140 nil nil)) (card_bounded_TCC1 0 (card_bounded_TCC1-1 nil 3249288222 3306569283 ("" (skosimp*) (("" (assert) (("" (expand "is_finite") (("" (inst 1 "N!1" "(lambda (x: below(N!1)): x)") (("" (expand "injective?") (("" (skosimp*) nil)))))))))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (below type-eq-decl nil naturalnumbers nil) (injective? const-decl "bool" functions nil) (is_finite const-decl "bool" finite_sets nil)) 245 140 nil nil)) (card_bounded 0 (card_bounded-1 nil 3249288222 3306569283 ("" (skosimp*) (("" (rewrite "card_bij") (("1" (inst 1 "(lambda (x:below(N!1)):x)") (("1" (expand "bijective?") (("1" (split 1) (("1" (expand "injective?") (("1" (skosimp*) nil))) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (inst 1 "y!1") nil))))))))))) ("2" (rewrite "finite_bounded") nil)))) nil) proved ((card_bij formula-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (< const-decl "bool" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (below type-eq-decl nil nat_types nil) (below type-eq-decl nil naturalnumbers nil) (finite_bounded formula-decl nil finite_sets_nat nil)) 469 280 nil nil)) (finite_bounded_subset 0 (finite_bounded_subset-1 nil 3249288222 3306569283 ("" (skosimp*) (("" (lemma "finite_subset") (("" (inst -1 "{j: nat | j < N!1}" "{j: nat | j < N!1 AND p!1(j)}") (("1" (assert) (("1" (hide 2) (("1" (expand "subset?") (("1" (expand "member") (("1" (skosimp*) nil))))))))) ("2" (rewrite "finite_bounded") nil)))))) nil) proved ((nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (finite_subset formula-decl nil finite_sets nil) (finite_bounded formula-decl nil finite_sets_nat nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (pred type-eq-decl nil defined_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (finite_set type-eq-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (< const-decl "bool" reals nil) (N!1 skolem-const-decl "nat" finite_sets_nat nil)) 236 130 nil nil)) (card_bounded_subset_TCC1 0 (card_bounded_subset_TCC1-1 nil 3249288222 3306569283 ("" (skosimp*) (("" (lemma "finite_bounded_subset") (("" (inst?) nil)))) nil) proved ((finite_bounded_subset formula-decl nil finite_sets_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil)) 79 30 nil nil)) (card_bounded_subset 0 (card_bounded_subset-1 nil 3249288222 3306569284 ("" (skosimp*) (("" (lemma "card_bounded") (("" (inst -1 "N!1") (("" (lemma "card_subset") (("" (inst -1 "{j: nat | j < N!1 AND p!1(j)}" "{j: nat | j < N!1}") (("1" (split -1) (("1" (assert) (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (expand "subset?") (("2" (skosimp*) (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "finite_bounded") nil nil) ("3" (rewrite "finite_bounded_subset") nil nil)) nil)) nil)) nil)) nil)) nil) proved ((card_bounded formula-decl nil finite_sets_nat nil) (card_subset formula-decl nil finite_sets nil) (finite_bounded_subset formula-decl nil finite_sets_nat nil) (finite_bounded formula-decl nil finite_sets_nat nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (finite_set type-eq-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (N!1 skolem-const-decl "nat" finite_sets_nat nil) (pred type-eq-decl nil defined_types nil) (p!1 skolem-const-decl "pred[nat]" finite_sets_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 440 290 t nil)) (finite_nat_below 0 (finite_nat_below-1 nil 3249288222 3306569284 ("" (skosimp*) (("" (expand "is_finite") (("" (inst 1 "n!1" "(LAMBDA (x: (extend[nat, below(n!1), bool, FALSE]({x: below(n!1) | TRUE}))): x)") (("1" (expand "injective?") (("1" (skosimp*) nil))) ("2" (skosimp*) (("2" (assert) (("2" (typepred "x!1") (("2" (expand "extend") (("2" (propax) nil)))))))))))))) nil) proved ((is_finite const-decl "bool" finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (below type-eq-decl nil nat_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (n!1 skolem-const-decl "nat" finite_sets_nat nil) (below type-eq-decl nil naturalnumbers nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (TRUE const-decl "bool" booleans nil)) 369 230 nil nil)) (card_nat_below_TCC1 0 (card_nat_below_TCC1-1 nil 3249288222 3306569284 ("" (skosimp*) (("" (lemma "finite_nat_below") (("" (inst?) nil)))) nil) proved ((finite_nat_below formula-decl nil finite_sets_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 81 40 nil nil)) (card_nat_below 0 (card_nat_below-1 nil 3249288222 3306569285 ("" (skosimp*) (("" (lemma "card_bij") (("" (inst -1 "n!1" "extend[nat, below(n!1), bool, FALSE]({x: below(n!1) | TRUE})") (("1" (replace -1) (("1" (hide -1) (("1" (inst 1 "(LAMBDA (x: (extend[nat, below(n!1), bool, FALSE]({x: below(n!1) | TRUE}))): x)") (("1" (expand "bijective?") (("1" (prop) (("1" (expand "injective?") (("1" (skosimp*) nil))) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (inst 1 "y!1") (("2" (expand "extend") (("2" (propax) nil))))))))))))) ("2" (skosimp*) (("2" (typepred "x!1") (("2" (expand "extend") (("2" (assert) nil))))))))))))) ("2" (lemma "finite_nat_below") (("2" (inst?) nil)))))))) nil) proved ((nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (card_bij formula-decl nil finite_sets nil) (n!1 skolem-const-decl "nat" finite_sets_nat nil) (below type-eq-decl nil nat_types nil) (injective? const-decl "bool" functions nil) (y!1 skolem-const-decl "below[n!1]" finite_sets_nat nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (TRUE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil)) 671 430 nil nil)) (finite_nat_upto 0 (finite_nat_upto-1 nil 3249288222 3306569286 ("" (skosimp*) (("" (expand "is_finite") (("" (inst 1 "n!1+1" "(LAMBDA (x: (extend[nat, upto(n!1), bool, FALSE]({x: upto(n!1) | TRUE}))): x)") (("1" (expand "injective?") (("1" (skosimp*) nil))) ("2" (skosimp*) (("2" (typepred "x!1") (("2" (expand "extend") (("2" (assert) nil)))))))))))) nil) proved ((is_finite const-decl "bool" finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (below type-eq-decl nil nat_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (n!1 skolem-const-decl "nat" finite_sets_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (TRUE const-decl "bool" booleans nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)) 864 660 nil nil)) (card_nat_upto_TCC1 0 (card_nat_upto_TCC1-1 nil 3249288222 3306569286 ("" (skosimp*) (("" (lemma "finite_nat_upto") (("" (inst?) nil)))) nil) proved ((finite_nat_upto formula-decl nil finite_sets_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 81 40 nil nil)) (card_nat_upto 0 (card_nat_upto-1 nil 3249288222 3306569287 ("" (skosimp*) (("" (lemma "card_bij") (("" (inst -1 "n!1+1" "extend[nat, upto(n!1), bool, FALSE]({x: upto(n!1) | TRUE})") (("1" (replace -1) (("1" (hide -1) (("1" (inst 1 "(LAMBDA (x: {x: upto(n!1) | TRUE}): x)") (("1" (expand "bijective?") (("1" (prop) (("1" (expand "injective?") (("1" (skosimp*) nil))) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (inst 1 "y!1") (("2" (expand "extend") (("2" (propax) nil))))))))))))) ("2" (skosimp*) (("2" (prop) (("1" (expand "extend") (("1" (assert) nil))) ("2" (expand "extend") (("2" (assert) nil))))))) ("3" (skosimp*) (("3" (expand "extend") (("3" (propax) nil))))))))))) ("2" (lemma "finite_nat_upto") (("2" (inst?) nil)))))))) nil) proved ((nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (card_bij formula-decl nil finite_sets nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (n!1 skolem-const-decl "nat" finite_sets_nat nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (injective? const-decl "bool" functions nil) (y!1 skolem-const-decl "below[1 + n!1]" finite_sets_nat nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (TRUE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil)) 1003 740 nil nil)) (finite_nat_subrange 0 (finite_nat_subrange-1 nil 3249288222 3306569288 ("" (skosimp*) (("" (expand "is_finite") (("" (inst 1 "j!1+1" "(LAMBDA (x: (restrict[int, nat,
                   bool](extend[int, subrange(i!1, j!1), bool,
                                FALSE]({x: subrange(i!1, j!1) | TRUE})))): x)") (("1" (expand "injective?") (("1" (skosimp*) nil))) ("2" (skosimp*) (("2" (assert) (("2" (typepred "x!1") (("2" (expand "restrict") (("2" (expand "extend") (("2" (propax) nil)))))))))))))))) nil) proved ((is_finite const-decl "bool" finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (below type-eq-decl nil nat_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (restrict const-decl "R" restrict nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (i!1 skolem-const-decl "nat" finite_sets_nat nil) (j!1 skolem-const-decl "nat" finite_sets_nat nil) (subrange type-eq-decl nil integers nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (TRUE const-decl "bool" booleans nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)) 973 700 nil nil)) (card_nat_subrange_TCC1 0 (card_nat_subrange_TCC1-1 nil 3249288222 3306569288 ("" (skosimp*) (("" (lemma "finite_nat_subrange") (("" (inst?) nil)))) nil) proved ((finite_nat_subrange formula-decl nil finite_sets_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 51 40 nil nil)) (card_nat_subrange 0 (card_nat_subrange-2 "" 3306570572 3306570572 ("" (skosimp*) (("" (lemma "card_bij") (("" (inst?) (("1" (replace -1) (("1" (hide -1) (("1" (inst 1 "(LAMBDA (x: (restrict[int, nat,
                              bool](extend[int, subrange(i!1, j!1), bool,
                                           FALSE]({x: subrange(i!1, j!1) | TRUE})))):
                            IF i!1 <= j!1 THEN x-i!1 ELSE 0 ENDIF)") (("1" (expand "bijective?") (("1" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (typepred "x1!1") (("1" (typepred "x2!1") (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (inst 1 "y!1+i!1") (("1" (typepred "y!1") (("1" (grind) nil nil)) nil) ("2" (typepred "y!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "x!1") (("2" (grind) nil nil)) nil)) nil) ("3" (skosimp*) (("3" (typepred "x!1") (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 80220 5480 t shostak) (card_nat_subrange-1 nil 3249288222 3306569291 ("" (skosimp*) (("" (lemma "card_bij") (("" (inst?) (("1" (replace -1) (("1" (hide -1) (("1" (inst 1 "(LAMBDA (x: (restrict[int, nat,
                          bool](extend[int, subrange(i!1, j!1), bool,
                                       FALSE]({x: subrange(i!1, j!1) | TRUE})))): 
                        IF i!1 <= j!1 THEN x-i!1 ELSE 0 ENDIF)") (("1" (expand "bijective?") (("1" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (typepred "x1!1") (("1" (typepred "x2!1") (("1" (grind) nil))))))))) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (inst 1 "y!1+i!1") (("1" (typepred "y!1") (("1" (grind) nil))) ("2" (typepred "y!1") (("2" (grind) nil))))))))))))) ("2" (skosimp*) (("2" (typepred "x!1") (("2" (grind) nil))))) ("3" (skosimp*) (("3" (typepred "x!1") (("3" (grind) nil))))))))))) ("2" (hide 2) (("2" (rewrite "finite_nat_subrange") nil))) ("3" (hide 2) (("3" (flatten) (("3" (assert) nil)))))))))) nil) proved ((nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (card_bij formula-decl nil finite_sets nil) (< const-decl "bool" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (below type-eq-decl nil nat_types nil) (injective? const-decl "bool" functions nil) (y!1 skolem-const-decl "below[IF i!1 <= j!1 THEN 1 - i!1 + j!1 ELSE 0 ENDIF]" finite_sets_nat nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (TRUE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (subrange type-eq-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (restrict const-decl "R" restrict nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (i!1 skolem-const-decl "nat" finite_sets_nat nil) (j!1 skolem-const-decl "nat" finite_sets_nat nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil)) 2591 1970 nil nil)))
