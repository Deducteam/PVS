(finite_sets_below (finite_below 0 (finite_below-1 nil 3290220023 3290224396 ("" (skosimp*) (("" (expand "is_finite") (("" (inst 1 "N" "(LAMBDA (i:(BS!1)): i)") (("" (expand "injective?") (("" (skosimp*) nil nil)) nil)) nil)) nil)) nil) proved ((is_finite const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil) (below type-eq-decl nil nat_types nil) (set type-eq-decl nil sets nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" finite_sets_below nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 41796 690 t nil)) (card_below_fullset_TCC1 0 (card_below_fullset_TCC1-1 nil 3290220023 3290223456 ("" (rewrite "finite_below") nil nil) proved ((fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" finite_sets_below nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (finite_below formula-decl nil finite_sets_below nil)) 26 10 nil nil)) (card_below_fullset 0 (card_below_fullset-1 nil 3290220023 3290224479 ("" (expand "fullset") (("" (lemma "card_bij[below(N)]") (("" (inst -1 "N" "{x: below(N) | TRUE}") (("1" (replace -1) (("1" (hide -1) (("1" (inst 1 "(LAMBDA (x: {x: below(N) | TRUE}): x)") (("1" (expand "bijective?") (("1" (prop) (("1" (expand "injective?") (("1" (skosimp) nil nil)) nil) ("2" (expand "surjective?") (("2" (skosimp) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "finite_below") nil nil)) nil)) nil)) nil) proved ((below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" finite_sets_below nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (card_bij formula-decl nil finite_sets nil) (finite_below formula-decl nil finite_sets_below nil) (below type-eq-decl nil nat_types nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (finite_set type-eq-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (TRUE const-decl "bool" booleans nil) (fullset const-decl "set" sets nil)) 58659 1870 t nil)) (card_below_TCC1 0 (card_below_TCC1-1 nil 3290220023 3290223456 ("" (skosimp*) (("" (rewrite "finite_below") nil nil)) nil) proved ((finite_below formula-decl nil finite_sets_below nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" finite_sets_below nil) (below type-eq-decl nil naturalnumbers nil) (set type-eq-decl nil sets nil)) 29 20 nil nil)) (card_below 0 (card_below-1 nil 3290220023 3290223456 ("" (skosimp*) (("" (lemma "card_subset[below(N)]") (("" (inst -1 "BS!1" "fullset[below(N)]") (("1" (lemma "card_below_fullset") (("1" (replace -1) (("1" (hide -1) (("1" (assert) (("1" (hide 2) (("1" (expand "subset?") (("1" (expand "fullset") (("1" (expand "member") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "finite_below") nil nil) ("3" (rewrite "finite_below") nil nil)) nil)) nil)) nil) proved ((below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" finite_sets_below nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (card_subset formula-decl nil finite_sets nil) (finite_below formula-decl nil finite_sets_below nil) (card_below_fullset formula-decl nil finite_sets_below nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (finite_set type-eq-decl nil finite_sets nil) (fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (BS!1 skolem-const-decl "set[below(N)]" finite_sets_below nil)) 162 130 nil nil)) (finite_upto 0 (finite_upto-1 nil 3290220023 3290224504 ("" (skosimp*) (("" (expand "is_finite") (("" (inst 1 "N+1" "(LAMBDA (i:(US!1)): i)") (("" (expand "injective?") (("" (skosimp*) nil nil)) nil)) nil)) nil)) nil) proved ((is_finite const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (set type-eq-decl nil sets nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (N formal-const-decl "nat" finite_sets_below nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 14526 920 t nil)) (card_upto_fullset_TCC1 0 (card_upto_fullset_TCC1-1 nil 3290220023 3290223457 ("" (rewrite "finite_upto") nil nil) proved ((fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" finite_sets_below nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (finite_upto formula-decl nil finite_sets_below nil)) 22 20 nil nil)) (card_upto_fullset 0 (card_upto_fullset-1 nil 3290220023 3290224546 ("" (expand "fullset") (("" (lemma "card_bij[upto(N)]") (("" (inst -1 "N+1" "{x: upto(N) | TRUE}") (("1" (replace -1) (("1" (hide -1) (("1" (inst 1 "(LAMBDA (x: {x: upto(N) | TRUE}): x)") (("1" (expand "bijective?") (("1" (prop) (("1" (expand "injective?") (("1" (skosimp*) nil nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "finite_upto") nil nil)) nil)) nil)) nil) proved ((upto nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" finite_sets_below nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (card_bij formula-decl nil finite_sets nil) (finite_upto formula-decl nil finite_sets_below nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (finite_set type-eq-decl nil finite_sets nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (TRUE const-decl "bool" booleans nil) (fullset const-decl "set" sets nil)) 38383 2320 t nil)) (card_upto_TCC1 0 (card_upto_TCC1-1 nil 3290220023 3290223457 ("" (skosimp*) (("" (rewrite "finite_upto") nil nil)) nil) proved ((finite_upto formula-decl nil finite_sets_below nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (N formal-const-decl "nat" finite_sets_below nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (set type-eq-decl nil sets nil)) 31 20 nil nil)) (card_upto 0 (card_upto-1 nil 3290220023 3290223458 ("" (skosimp*) (("" (lemma "card_subset[upto(N)]") (("" (inst -1 "US!1" "fullset[upto(N)]") (("1" (lemma "card_upto_fullset") (("1" (replace -1) (("1" (hide -1) (("1" (assert) (("1" (hide 2) (("1" (expand "subset?") (("1" (expand "fullset") (("1" (expand "member") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "finite_upto") nil nil) ("3" (rewrite "finite_upto") nil nil)) nil)) nil)) nil) proved ((upto nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" finite_sets_below nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (card_subset formula-decl nil finite_sets nil) (finite_upto formula-decl nil finite_sets_below nil) (card_upto_fullset formula-decl nil finite_sets_below nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (finite_set type-eq-decl nil finite_sets nil) (fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (US!1 skolem-const-decl "set[upto(N)]" finite_sets_below nil)) 376 320 nil nil)) (pidgeon_hole_TCC1 0 (pidgeon_hole_TCC1-1 nil 3290220023 3290223458 ("" (skosimp*) (("" (rewrite "finite_intersection") (("1" (rewrite "finite_below") nil nil) ("2" (rewrite "finite_below") nil nil)) nil)) nil) proved ((finite_intersection formula-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" finite_sets_below nil) (below type-eq-decl nil naturalnumbers nil) (finite_below formula-decl nil finite_sets_below nil)) 731 670 nil nil)) (pidgeon_hole 0 (pidgeon_hole-1 nil 3290220023 3290223460 ("" (skosimp*) (("" (lemma "card_union[below(N)]") (("" (inst?) (("1" (lemma "card_below") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (rewrite "finite_below") nil nil) ("3" (rewrite "finite_below") nil nil)) nil)) nil)) nil) proved ((below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" finite_sets_below nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (card_union formula-decl nil finite_sets nil) (finite_below formula-decl nil finite_sets_below nil) (card_below formula-decl nil finite_sets_below nil) (union const-decl "set" sets nil) (finite_set type-eq-decl nil finite_sets nil) (B!1 skolem-const-decl "set[below(N)]" finite_sets_below nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (A!1 skolem-const-decl "set[below(N)]" finite_sets_below nil)) 1271 1180 nil nil)))
