simple: THEORY
BEGIN
  naturals: TYPE
  nat: TYPE = naturals
  zero: nat
  succ: [nat -> nat]
  plus: [nat, nat -> nat]

  curryfication: [nat, [nat, nat -> nat] -> nat]

  z_not_succ: AXIOM FORALL (n: nat): succ(n) /= zero

  nznat: TYPE = { n: nat | n /= zero }

  n, m: VAR nat
  z_not_succ2: AXIOM succ(n) /= zero
  plus2(n): nat = succ(succ(n))
END simple

funs[d: TYPE, r: TYPE]: THEORY
BEGIN
  f: [d -> r]
END funs

complex: THEORY
BEGIN
  complex: TYPE+ FROM numfield
  i: complex
  i_axm: AXIOM i * i = -1
  z: VAR complex
  re(z): real
  im(z): real
  cartesian: AXIOM z = re(z) + i * im(z)
  conjugate(z): complex = re(z) - i * im(z)
  module(z): posreal = z * conjugate(z)
END complex

groups[T: TYPE]: THEORY
BEGIN
  group: TYPE
END groups
