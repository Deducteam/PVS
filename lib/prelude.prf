(|booleans|)(|equalities|)(|notequal|)(|if_def| (IF_TCC1 "" (INST 1 "LAMBDA (x: [boolean, T, T]): PROJ_2(x)") NIL NIL))(|boolean_props| (|bool_exclusive| "" (IFF) (("" (PROP) NIL NIL)) NIL) (|bool_inclusive| "" (SKOLEM!) (("" (PROP) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL) (|not_def| "" (SKOSIMP) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL) (|and_def| "" (SKOLEM!) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL) (|syand_def| "" (PROPAX) NIL NIL) (|or_def| "" (SKOLEM!) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL) (|implies_def| "" (SKOLEM!) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL) (|syimplies_def| "" (PROPAX) NIL NIL) (|when_def| "" (SKOLEM!) NIL NIL) (|iff_def| "" (SKOLEM!) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL) (|syiff_def| "" (PROPAX) NIL NIL) (|excluded_middle| "" (GRIND) NIL NIL))(|xor_def| (|xor_def| "" (GRIND) NIL NIL))(|quantifier_props| (|not_exists| "" (SKOLEM!) (("" (IFF) (("" (PROP) (("1" (SKOLEM!) (("1" (INST?) NIL NIL)) NIL) ("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|exists_not| "" (GRIND) NIL NIL) (|exists_or| "" (GRIND) NIL NIL) (|exists_implies| "" (GRIND) NIL NIL) (|exists_and| "" (GRIND) NIL NIL) (|not_forall| "" (GRIND) NIL NIL) (|forall_not| "" (GRIND) NIL NIL) (|forall_and| "" (GRIND) NIL NIL) (|forall_or| "" (GRIND) NIL NIL))(|defined_types|)(|exists1| (|unique_lem| "" (SKOLEM!) (("" (FLATTEN) (("" (EXPAND "unique?") (("" (SKOLEM!) (("" (FLATTEN) (("" (INST-CP -1 "x!1") (("" (INST -1 "y!1") (("" (INST - "x!1" "y!1") (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|exists1_lem| "" (SKOLEM!) (("" (FLATTEN) (("" (EXPAND "exists1") (("" (PROP) NIL NIL)) NIL)) NIL)) NIL))(|equality_props| (|IF_true| "" (GRIND) NIL NIL) (|IF_false| "" (GRIND) NIL NIL) (|IF_same| "" (GRIND) NIL NIL) (|reflexivity_of_equals| "" (SKOLEM!) NIL NIL) (|transitivity_of_equals| "" (SKOLEM!) (("" (FLATTEN) (("" (REPLACE -1) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) (|symmetry_of_equals| "" (SKOLEM!) (("" (FLATTEN) (("" (REPLACE -1) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL))(|if_props| (|lift_if1| "" (GRIND) NIL NIL) (|lift_if2| "" (GRIND) NIL NIL))(|functions| (|extensionality_postulate| "" (SKOSIMP) (("" (PROP) (("1" (APPLY-EXTENSIONALITY) NIL NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|extensionality| "" (SKOLEM!) (("" (FLATTEN) (("" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL) (|congruence| "" (GRIND) NIL NIL) (|eta| "" (SKOLEM!) (("" (APPLY-EXTENSIONALITY) NIL NIL)) NIL) (|bij_is_inj| "" (SUBTYPE-TCC) NIL NIL) (|bij_is_surj| "" (SUBTYPE-TCC) NIL NIL))(|functions_alt|)(|restrict| (|injective_restrict| "" (EXPAND "injective?") (("" (SKOSIMP*) (("" (GRIND) NIL NIL)) NIL)) NIL) (|restrict_of_inj_is_inj| "" (SUBTYPE-TCC) NIL NIL))(|extend| (|restrict_extend| "" (GRIND) (("" (APPLY-EXTENSIONALITY) NIL NIL)) NIL))(|extend_bool|)(|K_conversion|)(|K_props| (|K_preserves| "" (SUBTYPE-TCC) NIL NIL) (|K_preserves1| "" (SUBTYPE-TCC) NIL NIL))(|identity| (I_TCC1 "" (GRIND) NIL NIL))(|identity_props| (|I_preserves| "" (SUBTYPE-TCC) NIL NIL) (|id_preserves| "" (SUBTYPE-TCC) NIL NIL) (|identity_preserves| "" (SUBTYPE-TCC) NIL NIL))(|relations| (|equiv_is_reflexive| "" (SUBTYPE-TCC) NIL NIL) (|equiv_is_symmetric| "" (SKOLEM-TYPEPRED) (("" (EXPAND "equivalence?") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|equiv_is_transitive| "" (SKOLEM-TYPEPRED) (("" (EXPAND "equivalence?") (("" (ASSERT) NIL NIL)) NIL)) NIL))(|orders| (|preorder_is_reflexive| "" (SUBTYPE-TCC) NIL NIL) (|preorder_is_transitive| "" (SKOLEM-TYPEPRED) (("" (EXPAND "preorder?") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|equiv_is_preorder| "" (SUBTYPE-TCC) NIL NIL) (|po_is_preorder| "" (SUBTYPE-TCC) NIL NIL) (|po_is_antisymmetric| "" (SUBTYPE-TCC) NIL NIL) (|strict_is_irreflexive| "" (SUBTYPE-TCC) NIL NIL) (|strict_is_transitive| "" (SKOLEM-TYPEPRED) (("" (EXPAND "strict_order?") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|total_is_po| "" (SUBTYPE-TCC) NIL NIL) (|total_is_dichotomous| "" (SKOLEM-TYPEPRED) (("" (EXPAND "total_order?") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|linear_is_total| "" (SUBTYPE-TCC) NIL NIL) (|total_is_linear| "" (SUBTYPE-TCC) NIL NIL) (|strict_total_is_strict| "" (SUBTYPE-TCC) NIL NIL) (|strict_total_is_trichotomous| "" (SKOLEM-TYPEPRED) (("" (EXPAND "strict_total_order?") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|well_ordered_is_strict_total| "" (SUBTYPE-TCC) NIL NIL) (|well_ordered_is_well_founded| "" (SUBTYPE-TCC) NIL NIL))(|orders_alt| (|least_upper_bound_is_upper_bound| "" (SUBTYPE-TCC) NIL NIL) (|greatest_lower_bound_is_lower_bound| "" (SUBTYPE-TCC) NIL NIL))(|wf_induction| (|wf_induction| "" (SKOSIMP) (("" (SKOSIMP) (("" (TYPEPRED "<") (("" (EXPAND "well_founded?") (("" (INST -1 "{z:T|NOT p!1(z)}") (("" (ASSERT) (("" (SPLIT) (("1" (SKOSIMP) (("1" (INST -2 "y!1") (("1" (SPLIT) (("1" (TYPEPRED "y!1") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -2 "y!2") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|measure_induction| (|measure_induction| "" (LEMMA "wf_induction[T,(LAMBDA (x, y: T): m(x) < m(y))]") (("1" (SKOSIMP*) (("1" (INST -1 "p!1") (("1" (SPLIT) (("1" (INST -1 "x!1") NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "well_founded?") (("2" (TYPEPRED "<") (("2" (EXPAND "well_founded?") (("2" (SKOSIMP*) (("2" (INST -1 "(LAMBDA (y:M): (exists (z:T): m(z) = y AND p!1(z)))") (("2" (SPLIT) (("1" (SKOSIMP*) (("1" (TYPEPRED "y!2") (("1" (SKOSIMP*) (("1" (INST 1 "z!1") (("1" (SKOSIMP*) (("1" (INST -3 "m(x!1)") (("1" (ASSERT) NIL NIL) ("2" (INST 1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 2 "y!1") (("2" (SKOSIMP*) (("2" (INST 1 "m(y!1)") (("2" (INST 1 "y!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|epsilons|)(|sets| (|singleton_TCC1| "" (SKOSIMP) (("" (EXPAND "singleton?") (("" (INST 1 "x!1") NIL NIL)) NIL)) NIL) (|add_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|choose_TCC1| "" (SKOLEM-TYPEPRED) (("" (GRIND) NIL NIL)) NIL) (|choose_TCC2| "" (SKOLEM-TYPEPRED) (("" (GRIND) (("" (REWRITE "epsilon_ax[T]") (("1" (INST 1 "x!1") NIL NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL) (|the_TCC1| "" (EXISTENCE-TCC) NIL NIL) (|the_TCC2| "" (SKOLEM-TYPEPRED) (("" (GRIND) (("" (REWRITE "epsilon_ax[T]") (("1" (INST?) NIL NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL) (|rest_TCC1| "" (SKOLEM!) (("" (FLATTEN) (("" (EXPAND "nonempty?") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) (|nonempty_singleton| "" (SUBTYPE-TCC) NIL NIL) (|nonempty_union1| "" (SUBTYPE-TCC) NIL NIL) (|nonempty_union2| "" (SUBTYPE-TCC) NIL NIL))(|sets_lemmas| (|extensionality| "" (SKOLEM!) (("" (FLATTEN) (("" (APPLY-EXTENSIONALITY) (("" (INST?) (("" (EXPAND "member") (("" (IFF) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|emptyset_is_empty?| "" (SKOLEM!) (("" (EXPAND "empty?") (("" (EXPAND "emptyset") (("" (EXPAND "member") (("" (PROP) (("1" (APPLY-EXTENSIONALITY) (("1" (INST?) NIL NIL)) NIL) ("2" (SKOLEM!) (("2" (REPLACE -1) (("2" (BETA) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|empty_no_members| "" (GRIND) NIL NIL) (|emptyset_min| "" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (INST?) NIL NIL)) NIL)) NIL) (|nonempty_member| "" (TCC) NIL NIL) (|fullset_member| "" (GRIND) NIL NIL) (|fullset_max| "" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (INST?) NIL NIL)) NIL)) NIL) (|nonempty_exists| "" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (SKOSIMP*) (("" (SPLIT) (("1" (SKOSIMP*) (("1" (INST * "x!1") NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SKOLEM * "x!1") (("2" (INST * "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|subset_reflexive| "" (GRIND) NIL NIL) (|subset_antisymmetric| "" (SKOSIMP) (("" (EXPAND "subset?") (("" (EXPAND "member") (("" (APPLY-EXTENSIONALITY) (("" (INST?) (("" (INST?) (("" (PROP) (("1" (IFF) (("1" (PROP) NIL NIL)) NIL) ("2" (IFF) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|subset_transitive| "" (GRIND) NIL NIL) (|subset_partial_order| "" (EXPAND "partial_order?") (("" (EXPAND "preorder?") (("" (EXPAND "reflexive?") (("" (PROP) (("1" (SKOSIMP) (("1" (EXPAND "subset?") (("1" (EXPAND "member") (("1" (SKOSIMP) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "transitive?") (("2" (SKOSIMP) (("2" (EXPAND "subset?") (("2" (SKOSIMP) (("2" (INST?) (("2" (INST?) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "antisymmetric?") (("3" (SKOSIMP) (("3" (EXPAND "subset?") (("3" (APPLY-EXTENSIONALITY) (("3" (INST?) (("3" (INST?) (("3" (EXPAND "member") (("3" (IFF) (("3" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|subset_emptyset| "" (GRIND) NIL NIL) (|subset_fullset| "" (GRIND) NIL NIL) (|union_idempotent| "" (SKOSIMP) (("" (EXPAND "union") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|union_commutative| "" (SKOSIMP) (("" (EXPAND "union") (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|union_associative| "" (SKOSIMP) (("" (EXPAND "union") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|union_empty| "" (SKOSIMP) (("" (EXPAND "union") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (EXPAND "emptyset") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|union_full| "" (SKOSIMP) (("" (EXPAND "fullset") (("" (EXPAND "union") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|union_subset1| "" (SKOSIMP) (("" (EXPAND "subset?") (("" (EXPAND "union") (("" (SKOSIMP) (("" (EXPAND "member") (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|union_subset2| "" (SKOSIMP) (("" (EXPAND "subset?") (("" (EXPAND "union") (("" (APPLY-EXTENSIONALITY) (("" (INST?) (("" (IFF) (("" (EXPAND "member") (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|union_upper_bound| "" (GRIND) NIL NIL) (|union_difference| "" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) (|union_diff_subset| "" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) (|intersection_idempotent| "" (SKOSIMP) (("" (EXPAND "intersection") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|intersection_commutative| "" (SKOSIMP) (("" (EXPAND "intersection") (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|intersection_associative| "" (SKOSIMP) (("" (EXPAND "intersection") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|intersection_empty| "" (SKOSIMP) (("" (EXPAND "intersection") (("" (EXPAND "emptyset") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|intersection_full| "" (SKOSIMP) (("" (EXPAND "intersection") (("" (EXPAND "fullset") (("" (EXPAND "member") (("" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|intersection_subset1| "" (SKOSIMP) (("" (EXPAND "intersection") (("" (EXPAND "subset?") (("" (SKOSIMP) (("" (EXPAND "member") (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|intersection_subset2| "" (SKOSIMP) (("" (EXPAND "intersection") (("" (EXPAND "subset?") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (INST?) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|intersection_lower_bound| "" (GRIND) NIL NIL) (|distribute_intersection_union| "" (SKOSIMP) (("" (EXPAND "intersection") (("" (EXPAND "union") (("" (EXPAND "member") (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|distribute_union_intersection| "" (SKOSIMP) (("" (EXPAND "intersection") (("" (EXPAND "union") (("" (EXPAND "member") (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|complement_emptyset| "" (EXPAND "complement") (("" (EXPAND "emptyset") (("" (EXPAND "fullset") (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|complement_fullset| "" (EXPAND "complement") (("" (EXPAND "emptyset") (("" (EXPAND "fullset") (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|complement_complement| "" (SKOSIMP) (("" (EXPAND "complement") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|subset_complement| "" (SKOSIMP) (("" (EXPAND "complement") (("" (EXPAND "subset?") (("" (EXPAND "member") (("" (PROP) (("1" (SKOSIMP) (("1" (INST?) (("1" (PROP) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST?) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|demorgan1| "" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|demorgan2| "" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|difference_emptyset1| "" (SKOSIMP) (("" (EXPAND "difference") (("" (EXPAND "emptyset") (("" (EXPAND "member") (("" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|difference_emptyset2| "" (SKOSIMP) (("" (EXPAND "difference") (("" (EXPAND "emptyset") (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|difference_fullset1| "" (SKOSIMP) (("" (EXPAND "difference") (("" (EXPAND "emptyset") (("" (EXPAND "fullset") (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|difference_fullset2| "" (SKOSIMP) (("" (EXPAND "difference") (("" (EXPAND "fullset") (("" (EXPAND "complement") (("" (APPLY-EXTENSIONALITY) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|difference_intersection| "" (SKOSIMP) (("" (EXPAND "difference") (("" (EXPAND "intersection") (("" (EXPAND "complement") (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|difference_difference1| "" (SKOSIMP) (("" (EXPAND "difference") (("" (EXPAND "member") (("" (EXPAND "union") (("" (EXPAND "member") (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|difference_difference2| "" (SKOSIMP) (("" (EXPAND "difference") (("" (EXPAND "union") (("" (EXPAND "intersection") (("" (EXPAND "member") (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|difference_subset| "" (GRIND) NIL NIL) (|difference_disjoint| "" (GRIND) NIL NIL) (|diff_union_inter| "" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) (|nonempty_add| "" (GRIND) NIL NIL) (|member_add| "" (SKOSIMP*) (("" (EXPAND "add") (("" (APPLY-EXTENSIONALITY) (("" (HIDE 2) (("" (IFF) (("" (EXPAND "member") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|member_remove| "" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY) (("" (HIDE 3) (("" (EXPAND "remove") (("" (EXPAND "member") (("" (IFF) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|add_remove_member| "" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) (|remove_add_member| "" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) (|subset_add| "" (GRIND) NIL NIL) (|add_as_union| "" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) (|singleton_as_add| "" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) (|subset_remove| "" (GRIND) NIL NIL) (|remove_as_difference| "" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) (|remove_member_singleton| "" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) (|choose_rest_TCC1| "" (GRIND) NIL NIL) (|choose_rest| "" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY) (("1" (HIDE 3) (("1" (EXPAND "add") (("1" (HIDE 2) (("1" (IFF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "member") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "rest") (("2" (EXPAND "remove") (("2" (FLATTEN) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "member") (("2" (EXPAND "rest") (("2" (EXPAND "remove") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) (|choose_member| "" (GRIND) (("" (REWRITE "epsilon_ax[T]") (("1" (INST?) NIL NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL) (|choose_not_member| "" (SKOSIMP*) (("" (EXPAND "member") (("" (EXPAND "rest") (("" (ASSERT) (("" (EXPAND "remove") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|rest_not_equal| "" (SKOSIMP) (("" (EXPAND "rest") (("" (REPLACE 1) (("" (EXPAND "remove") (("" (EXPAND "empty?") (("" (SKOSIMP) (("" (EXPAND "member") (("" (TYPEPRED "choose(a!1)") (("1" (REPLACE -3 -1 :DIR RL) (("1" (BETA) (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|rest_member| "" (TCC :DEFS !) NIL NIL) (|rest_subset| "" (GRIND) NIL NIL) (|choose_add| "" (GRIND) (("" (TYPEPRED " choose(add(x!1, a!1))") (("" (EXPAND "add" -1 1) (("" (EXPAND "member") (("" (EXPAND "choose") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|choose_rest_or_TCC1| "" (TCC :DEFS !) NIL NIL) (|choose_rest_or| "" (TCC :DEFS !) NIL NIL) (|choose_singleton_TCC1| "" (TCC :DEFS !) NIL NIL) (|choose_singleton| "" (SKOSIMP*) (("" (TYPEPRED "choose(singleton(x!1))") (("1" (EXPAND "singleton") (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|rest_singleton| "" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (EXPAND "rest") (("" (EXPAND "singleton") (("" (EXPAND "remove") (("" (LIFT-IF) (("" (EXPAND "emptyset") (("" (PROP) (("1" (EXPAND "empty?") (("1" (INST -1 "x!1") (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "member") (("2" (EXPAND "choose") (("2" (USE "epsilon_ax[T]") (("1" (ASSERT) NIL NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|singleton_subset| "" (GRIND) NIL NIL) (|rest_empty_lem| "" (SKOSIMP*) (("" (EXPAND "extend") (("" (APPLY-EXTENSIONALITY) (("1" (HIDE 3) (("1" (LIFT-IF) (("1" (EXPAND "singleton") (("1" (EXPAND "empty?") (("1" (SKOSIMP*) (("1" (EXPAND "member") (("1" (SPLIT) (("1" (FLATTEN) (("1" (TYPEPRED "choose(a!1)") (("1" (INST -4 "x!1") (("1" (EXPAND "rest") (("1" (EXPAND "remove") (("1" (EXPAND "member") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "nonempty?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|singleton_disjoint| "" (GRIND) NIL NIL) (|disjoint_remove_left| "" (GRIND) NIL NIL) (|disjoint_remove_right| "" (GRIND) NIL NIL) (|union_disj_remove_left| "" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL) (|union_disj_remove_right| "" (GRIND) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL NIL)) NIL)) NIL))(|function_inverse| (|unique_bijective_inverse| "" (SKOLEM-TYPEPRED) (("" (GRIND :IF-MATCH NIL) (("" (INST? -2) (("" (SKOSIMP) (("" (REPLACE -2 :DIR RL) (("" (USE "epsilon_ax[D]") (("" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|bijective_inverse_is_bijective| "" (SKOLEM-TYPEPRED) (("" (GRIND :IF-MATCH NIL) (("1" (INST 1 "f!1(y!1)") (("1" (USE "epsilon_ax[D]") (("1" (ASSERT) (("1" (SPLIT) (("1" (INST? -2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "epsilon_ax[D]") (("2" (SPLIT) (("1" (LEMMA "epsilon_ax[D]") (("1" (INST -1 "lambda (x: D): f!1(x) = x2!1") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (INST -3 "x2!1") NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "x1!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) (|surjective_inverse| "" (SKOSIMP) (("" (EXPAND "inverse") (("" (LEMMA "epsilon_ax[D]") (("" (INST -1 "LAMBDA (x:D): f!1(x) = y!1") (("" (PROP) (("1" (REPLACE -2) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "f!1") (("2" (EXPAND "surjective?") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|injective_inverse| "" (SKOSIMP) (("" (EXPAND "inverse") (("" (TYPEPRED "f!1") (("" (EXPAND "injective?") (("" (LEMMA "epsilon_ax[D]") (("" (INST -1 "LAMBDA (x:D): f!1(x) = y!1") (("" (PROP) (("1" (REPLACE -3) (("1" (INST?) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|bijective_inverse| "" (SKOSIMP) (("" (SPLIT) (("1" (REWRITE "surjective_inverse") (("1" (TYPEPRED "f!1") (("1" (EXPAND "bijective?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "injective_inverse") (("2" (TYPEPRED "f!1") (("2" (EXPAND "bijective?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|bij_inv_is_bij| "" (SKOSIMP*) (("" (EXPAND "bijective?") (("" (EXPAND "injective?") (("" (EXPAND "surjective?") (("" (FLATTEN) (("" (SPLIT) (("1" (SKOSIMP*) (("1" (LEMMA "bijective_inverse") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "inverse" -1) (("1" (LEMMA "epsilon_ax[D]") (("1" (INST?) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (INST -4 "x2!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "bijective?") (("2" (EXPAND "injective?") (("2" (ASSERT) (("2" (REPLACE -2) (("2" (EXPAND "surjective?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST 1 "f!1(y!1)") (("2" (REWRITE "injective_inverse") (("2" (EXPAND "injective?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|surj_right| "" (GRIND) (("" (LEMMA "epsilon_ax[D]") (("" (INST?) (("" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|inj_left| "" (SKOSIMP) (("" (PROP) (("1" (GRIND) (("1" (LEMMA "epsilon_ax[D]") (("1" (INST?) (("1" (ASSERT) (("1" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "left_inverse?") (("2" (EXPAND "inverse") (("2" (EXPAND "injective?") (("2" (SKOSIMP) (("2" (INST-CP -1 "x1!1") (("2" (INST -1 "x2!1") (("2" (ASSERT) (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|inj_inv| "" (SKOSIMP) (("" (EXPAND "surjective?") (("" (EXPAND "injective?") (("" (EXPAND "inverse") (("" (SKOSIMP) (("" (INST-CP -1 "x1!1") (("" (INST -1 "x2!1") (("" (SKOSIMP) (("" (SKOSIMP) (("" (LEMMA "epsilon_ax[D]") (("" (INST-CP -1 "LAMBDA (x:D): f!1(x)=x1!1") (("" (INST -1 "LAMBDA (x:D): f!1(x)=x2!1") (("" (PROP) (("1" (REPLACE -5) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (INST?) NIL NIL) ("3" (INST?) NIL NIL) ("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|surj_inv| "" (SKOSIMP) (("" (EXPAND "surjective?") (("" (EXPAND "injective?") (("" (SKOSIMP) (("" (EXPAND "inverse") (("" (INST -1 "y!1" _) (("" (INST 1 "f!1(y!1)") (("" (INST -1 "(epsilon ! (x_5: D): f!1(x_5) = f!1(y!1))") (("" (PROP) (("1" (REPLACE -1) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -1 :DIR RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "epsilon_ax[D]") (("2" (INST?) (("2" (PROP) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (INST 1 "y!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|inv_inj_is_surj| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "f!1(y!1)") (("" (INST? -1) (("" (ASSERT) (("" (LEMMA "epsilon_ax[D]") (("" (INST?) (("" (ASSERT) (("" (INST 1 "y!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|inv_surj_is_inj| "" (GRIND :IF-MATCH NIL) (("" (INST-CP -1 "x1!1") (("" (INST -1 "x2!1") (("" (SKOSIMP*) (("" (LEMMA "epsilon_ax[D]") (("" (LEMMA "epsilon_ax[D]") (("" (INST?) (("" (INST -2 "LAMBDA (x: D): f!1(x) = x2!1") (("" (ASSERT) (("" (PROP) (("1" (ASSERT) NIL NIL) ("2" (INST 1 "x!1") NIL NIL) ("3" (INST 1 "x!2") NIL NIL) ("4" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|comp_inverse_right_surj| "" (GRIND :IF-MATCH NIL) (("" (USE "epsilon_ax[D]") (("" (ASSERT) (("" (INST? -1) NIL NIL)) NIL)) NIL)) NIL) (|comp_inverse_left_inj| "" (GRIND :IF-MATCH NIL) (("" (USE "epsilon_ax[D]") (("" (SPLIT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST 1 "x!1") NIL NIL)) NIL)) NIL)) NIL) (|comp_inverse_right| "" (SKOSIMP) (("" (LEMMA "comp_inverse_right_surj") (("" (INST?) (("" (TYPEPRED "f!1") (("" (EXPAND "bijective?") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|comp_inverse_left| "" (SKOLEM-TYPEPRED) (("" (EXPAND "bijective?") (("" (LEMMA "comp_inverse_left_inj") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL))(|function_image| (|fun_exists| "" (FLATTEN) (("" (SPLIT) (("1" (SKOSIMP) (("1" (INST 1 "LAMBDA (x:D): y!1") NIL NIL)) NIL) ("2" (INST 2 "LAMBDA (x:D): epsilon! (y:R): TRUE") (("2" (SKOLEM-TYPEPRED) (("2" (INST 2 "x1!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) (|image_inverse_image| "" (GRIND) NIL NIL) (|inverse_image_image| "" (GRIND) NIL NIL) (|image_subset| "" (GRIND) NIL NIL) (|inverse_image_subset| "" (GRIND) NIL NIL) (|image_union| "" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|image_intersection| "" (GRIND) NIL NIL) (|inverse_image_union| "" (GRIND) (("" (APPLY-EXTENSIONALITY) NIL NIL)) NIL) (|inverse_image_intersection| "" (GRIND) (("" (APPLY-EXTENSIONALITY) NIL NIL)) NIL) (|inverse_image_complement| "" (GRIND) (("" (APPLY-EXTENSIONALITY) NIL NIL)) NIL))(|function_props| (|composition_injective| "" (SUBTYPE-TCC) NIL NIL) (|composition_surjective| "" (SUBTYPE-TCC) NIL NIL) (|composition_bijective| "" (SUBTYPE-TCC) NIL NIL) (|image_composition| "" (GRIND) (("" (APPLY-EXTENSIONALITY) (("" (GRIND) NIL NIL)) NIL)) NIL) (|preserves_composition| "" (GRIND) NIL NIL) (|inverts_composition1| "" (GRIND) NIL NIL) (|inverts_composition2| "" (GRIND) NIL NIL))(|function_props_alt| (|composition_preserves| "" (SUBTYPE-TCC) NIL NIL) (|composition_inverts1| "" (SUBTYPE-TCC) NIL NIL) (|composition_inverts2| "" (SUBTYPE-TCC) NIL NIL))(|function_props2| (|assoc| "" (SKOLEM 1 ("f!1" "g!1" "h!1")) (("" (EXPAND "o") (("" (PROPAX) NIL NIL)) NIL)) NIL))(|relation_defs|)(|relation_props| (|total_composition| "" (GRIND) NIL NIL) (|onto_composition| "" (GRIND) NIL NIL) (|composition_total| "" (SUBTYPE-TCC) NIL NIL) (|composition_onto| "" (SUBTYPE-TCC) NIL NIL))(|relation_props2| (|assoc| "" (SKOSIMP) (("" (APPLY-EXTENSIONALITY) (("" (HIDE 2) (("" (EXPAND "o") (("" (IFF) (("" (PROP) (("1" (SKOSIMP) (("1" (SKOSIMP) (("1" (INST?) (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|operator_defs|)(|numbers|)(|reals| (|nonzero_real_TCC1| "" (GRIND) NIL NIL) (|reals_totally_ordered| "" (GRIND) NIL NIL))(|real_axioms| (|commutative_add| "" (GRIND) NIL NIL) (|associative_add| "" (GRIND) NIL NIL) (|identity_add| "" (GRIND) NIL NIL) (|inverse_add| "" (GRIND) NIL NIL) (|minus_add| "" (GRIND) NIL NIL) (|commutative_mult| "" (GRIND) NIL NIL) (|associative_mult| "" (GRIND) NIL NIL) (|identity_mult| "" (GRIND) NIL NIL) (|inverse_mult| "" (GRIND) NIL NIL) (|div_def| "" (GRIND) NIL NIL) (|distributive| "" (GRIND) NIL NIL) (|posreal_add_closed| "" (GRIND) NIL NIL) (|posreal_neg| "" (GRIND) NIL NIL) (|trichotomy| "" (GRIND) NIL NIL))(|bounded_real_defs| (|real_lower_complete| "" (LEMMA "real_complete") (("" (SKOSIMP) (("" (INST -1 "{x: real | S!1(-x)}") (("1" (SKOSIMP) (("1" (SPLIT) (("1" (SKOSIMP) (("1" (EXPAND "least_upper_bound?") (("1" (INST 1 "-y!2") (("1" (EXPAND "greatest_lower_bound?") (("1" (HIDE -2) (("1" (PROP) (("1" (EXPAND "upper_bound?") (("1" (EXPAND "lower_bound?") (("1" (SKOSIMP) (("1" (INST -1 "-s!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -3 "-y!3") (("2" (HIDE -2) (("2" (EXPAND "lower_bound?") (("2" (EXPAND "upper_bound?") (("2" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP) (("2" (INST -1 "-s!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INST 1 "-y!1") (("2" (EXPAND "upper_bound?") (("2" (SKOSIMP) (("2" (EXPAND "lower_bound?") (("2" (INST -1 "-s!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "S!1") (("2" (HIDE -2 2) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (SKOSIMP) (("2" (EXPAND "member") (("2" (INST -2 "-x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|lub_exists| "" (SKOLEM-TYPEPRED) (("" (USE "real_complete") (("" (ASSERT) (("" (REPLACE 1) (("" (ASSERT) (("" (EXPAND "bounded_above?") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|lub_TCC1| "" (USE "real_complete") (("" (INST 1 "LAMBDA (S:(bounded_above?)): epsilon! (x:real): least_upper_bound?(x, S)") (("" (SKOSIMP) (("" (USE "epsilon_ax[real]") (("" (ASSERT) (("" (INST? -1) (("" (TYPEPRED "S!1") (("" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "bounded_above?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|lub_lem| "" (SKOSIMP) (("" (TYPEPRED "lub(SA!1)") (("" (ASSERT) (("" (PROP) (("1" (ASSERT) NIL NIL) ("2" (GRIND :IF-MATCH NIL) (("2" (INST -2 "lub(SA!1)") (("2" (INST -4 "x!1") (("2" (REPLACE -1) (("2" (REPLACE -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|glb_exists| "" (SKOSIMP) (("" (USE "real_lower_complete") (("" (ASSERT) (("" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (TYPEPRED "SB!1") (("2" (EXPAND "bounded_below?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|glb_TCC1| "" (INST 1 "LAMBDA (S:(bounded_below?)): epsilon! (x:real): greatest_lower_bound?(x, S)") (("" (SKOLEM-TYPEPRED) (("" (USE "epsilon_ax[real]") (("" (ASSERT) (("" (EXPAND "bounded_below?") (("" (USE "real_lower_complete") (("" (ASSERT) (("" (REPLACE -3) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|glb_lem| "" (SKOSIMP) (("" (TYPEPRED "glb(SB!1)") (("" (PROP) (("1" (ASSERT) NIL NIL) ("2" (GRIND :IF-MATCH NIL) (("2" (INST -2 "glb(SB!1)") (("2" (INST -4 "x!1") (("2" (PROP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|bounded_real_defs_alt| (S_TCC1 "" (INST 1 "singleton(0)") (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (INST -1 "0") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|lub_is_upper_bound| "" (SUBTYPE-TCC) NIL NIL) (|glb_is_lower_bound| "" (SUBTYPE-TCC) NIL NIL))(|real_types| (|posreal_is_nzreal| "" (SUBTYPE-TCC) NIL NIL) (|negreal_is_nzreal| "" (SUBTYPE-TCC) NIL NIL) (|nonneg_real_add_closed| "" (GRIND) NIL NIL) (|nonpos_real_add_closed| "" (GRIND) NIL NIL) (|negreal_add_closed| "" (GRIND) NIL NIL) (|nonneg_real_mult_closed| "" (GRIND) (("" (CASE "nnx!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (CASE "nny!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "posreal_mult_closed") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|nzreal_times_nzreal_is_nzreal| "" (LEMMA "posreal_mult_closed") (("" (SKOSIMP) (("" (CASE "nzx!1 > 0") (("1" (CASE "nzy!1 > 0") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -2 "nzx!1" "-nzy!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "nzy!1 > 0") (("1" (INST -2 "-nzx!1" "nzy!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST -1 "-nzx!1" "-nzy!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|nzreal_div_nzreal_is_nzreal| "" (LEMMA "nzreal_times_nzreal_is_nzreal") (("" (SKOSIMP) (("" (INST -1 "nzx!1" "1/nzy!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (LEMMA "inverse_mult") (("2" (INST?) (("2" (PROP) (("2" (REPLACE -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|minus_nzreal_is_nzreal| "" (SUBTYPE-TCC) NIL NIL) (|nnreal_plus_nnreal_is_nnreal| "" (SUBTYPE-TCC) NIL NIL) (|nnreal_times_nnreal_is_nnreal| "" (SKOSIMP) (("" (LEMMA "posreal_mult_closed") (("" (CASE "nnx!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (CASE "nny!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|nnreal_div_posreal_is_nnreal| "" (GRIND) (("" (LEMMA "posreal_mult_closed") (("" (CASE "nnx!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (INST -1 "nnx!1" "1/py!1") (("2" (ASSERT) (("2" (LEMMA "inverse_mult") (("2" (INST -1 "py!1") (("2" (ASSERT) (("2" (NAME-REPLACE "a" "1/py!1") (("2" (ASSERT) (("2" (LEMMA "posreal_mult_closed") (("2" (CASE-REPLACE "a = 0") (("1" (ASSERT) NIL NIL) ("2" (INST -1 "py!1" "-a") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|nnreal_div_negreal_is_npreal| "" (SKOSIMP) (("" (LEMMA "nnreal_div_posreal_is_nnreal") (("" (INST -1 "nnx!1" "-ny!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|npreal_plus_npreal_is_npreal| "" (SUBTYPE-TCC) NIL NIL) (|npreal_times_npreal_is_nnreal| "" (SKOSIMP) (("" (LEMMA "posreal_mult_closed") (("" (INST -1 "-npx!1" "-npy!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|npreal_div_posreal_is_npreal| "" (SKOSIMP) (("" (LEMMA "nnreal_div_posreal_is_nnreal") (("" (INST -1 "-npx!1" "py!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|npreal_div_negreal_is_nnreal| "" (SKOSIMP) (("" (LEMMA "npreal_div_posreal_is_npreal") (("" (INST -1 "npx!1" "-ny!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|posreal_plus_nnreal_is_posreal| "" (SUBTYPE-TCC) NIL NIL) (|nnreal_plus_posreal_is_posreal| "" (SUBTYPE-TCC) NIL NIL) (|posreal_times_posreal_is_posreal| "" (SKOSIMP) (("" (LEMMA "posreal_mult_closed") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|posreal_div_posreal_is_posreal| "" (SKOSIMP) (("" (LEMMA "posreal_mult_closed") (("" (INST -1 "px!1" "1/py!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|negreal_plus_negreal_is_negreal| "" (SUBTYPE-TCC) NIL NIL) (|negreal_times_negreal_is_posreal| "" (SKOSIMP) (("" (LEMMA "posreal_mult_closed") (("" (INST -1 "-nx!1" "-ny!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|negreal_div_negreal_is_posreal| "" (LEMMA "posreal_div_posreal_is_posreal") (("" (SKOSIMP) (("" (INST -1 "-nx!1" "-ny!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL))(|rationals| (|nonzero_rational_TCC1| "" (TCC :DEFS !) NIL NIL) (|rat_plus_rat_is_rat| "" (LEMMA "closed_plus") (("" (PROPAX) NIL NIL)) NIL) (|rat_minus_rat_is_rat| "" (LEMMA "closed_minus") (("" (PROPAX) NIL NIL)) NIL) (|rat_times_rat_is_rat| "" (LEMMA "closed_times") (("" (PROPAX) NIL NIL)) NIL) (|rat_div_nzrat_is_rat| "" (LEMMA "closed_divides") (("" (PROPAX) NIL NIL)) NIL) (|minus_rat_is_rat| "" (LEMMA "closed_neg") (("" (PROPAX) NIL NIL)) NIL) (|posrat_is_nzrat| "" (SUBTYPE-TCC) NIL NIL) (|negrat_is_nzrat| "" (SUBTYPE-TCC) NIL NIL) (|nzrat_times_nzrat_is_nzrat| "" (SUBTYPE-TCC) NIL NIL) (|nzrat_div_nzrat_is_nzrat| "" (SUBTYPE-TCC) NIL NIL) (|minus_nzrat_is_nzrat| "" (SUBTYPE-TCC) NIL NIL) (|nnrat_plus_nnrat_is_nnrat| "" (SUBTYPE-TCC) NIL NIL) (|nnrat_times_nnrat_is_nnrat| "" (SUBTYPE-TCC) NIL NIL) (|nnrat_div_posrat_is_nnrat| "" (SUBTYPE-TCC) NIL NIL) (|nnrrat_div_negrat_is_nprat| "" (SUBTYPE-TCC) NIL NIL) (|nprat_plus_nprat_is_nprat| "" (SUBTYPE-TCC) NIL NIL) (|nprat_times_nprat_is_nnrat| "" (SUBTYPE-TCC) NIL NIL) (|nprat_div_posrat_is_nprat| "" (SUBTYPE-TCC) NIL NIL) (|nprat_div_negrat_is_nnrat| "" (SUBTYPE-TCC) NIL NIL) (|posrat_plus_nnrat_is_posrat| "" (SUBTYPE-TCC) NIL NIL) (|nnrat_plus_posrat_is_posrat| "" (SUBTYPE-TCC) NIL NIL) (|posrat_times_posrat_is_posrat| "" (SUBTYPE-TCC) NIL NIL) (|posrat_div_posrat_is_posrat| "" (SUBTYPE-TCC) NIL NIL) (|negrat_plus_negrat_is_negrat| "" (SUBTYPE-TCC) NIL NIL) (|negrat_times_negrat_is_posrat| "" (SUBTYPE-TCC) NIL NIL) (|negrat_div_negrat_is_posrat| "" (SUBTYPE-TCC) NIL NIL))(|integers| (|nonzero_integer_TCC1| "" (TCC :DEFS !) NIL NIL) (|upfrom_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|above_TCC1| "" (LEMMA "closed_plus") (("" (SKOSIMP) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|int_plus_int_is_int| "" (LEMMA "closed_plus") (("" (PROPAX) NIL NIL)) NIL) (|int_minus_int_is_int| "" (LEMMA "closed_minus") (("" (PROPAX) NIL NIL)) NIL) (|int_times_int_is_int| "" (LEMMA "closed_times") (("" (PROPAX) NIL NIL)) NIL) (|minus_int_is_int| "" (LEMMA "closed_neg") (("" (PROPAX) NIL NIL)) NIL) (|minus_nzint_is_nzint| "" (SUBTYPE-TCC) NIL NIL) (|posint_is_nzint| "" (SUBTYPE-TCC) NIL NIL) (|negint_is_nzint| "" (SUBTYPE-TCC) NIL NIL) (|nzint_times_nzint_is_nzint| "" (SUBTYPE-TCC) NIL NIL) (|nnint_plus_nnint_is_nnint| "" (SUBTYPE-TCC) NIL NIL) (|nnint_times_nnint_is_nnint| "" (SUBTYPE-TCC) NIL NIL) (|npint_plus_npint_is_npint| "" (SUBTYPE-TCC) NIL NIL) (|npint_times_npint_is_nnint| "" (SUBTYPE-TCC) NIL NIL) (|posint_plus_nnint_is_posint| "" (SUBTYPE-TCC) NIL NIL) (|nnint_plus_posint_is_posint| "" (SUBTYPE-TCC) NIL NIL) (|posint_times_posint_is_posint| "" (SUBTYPE-TCC) NIL NIL) (|negint_plus_negint_is_negint| "" (SUBTYPE-TCC) NIL NIL) (|negint_times_negint_is_posint| "" (SUBTYPE-TCC) NIL NIL) (|even_int_TCC1| "" (EXPAND "even?") (("" (INST 1 "0") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|odd_int_TCC1| "" (EXPAND "odd?") (("" (INST 1 "0") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|odd_is_nzint| "" (SUBTYPE-TCC) NIL NIL) (|even_plus_even_is_even| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "j!1 + j!2") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|even_minus_even_is_even| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "j!1 - j!2") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|odd_plus_odd_is_even| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "1 + j!1 + j!2") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|odd_minus_odd_is_even| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "j!1 - j!2") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|odd_plus_even_is_odd| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "j!1 + j!2") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|odd_minus_even_is_odd| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "j!2 - j!1") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|even_plus_odd_is_odd| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "j!1 + j!2") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|even_minus_odd_id_odd| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "-1 + j!1 - j!2") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|even_times_int_is_even| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "i!1 * j!1") NIL NIL)) NIL) (|int_times_even_is_even| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "i!1 * j!1") NIL NIL)) NIL) (|odd_times_odd_is_odd| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "j!1 + j!2 + 2 * j!1 * j!2") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|minus_even_is_even| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "-j!1") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|minus_odd_is_odd| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "-1 - j!1") (("" (ASSERT) NIL NIL)) NIL)) NIL))(|naturalnumbers| (|upfrom_nat_is_nat| "" (SUBTYPE-TCC) NIL NIL) (|upfrom_posnat_is_posnat| "" (SUBTYPE-TCC) NIL NIL) (|above_nat_is_posnat| "" (SUBTYPE-TCC) NIL NIL) (|subrange_nat_is_nat| "" (SUBTYPE-TCC) NIL NIL) (|subrange_posnat_is_posnat| "" (SUBTYPE-TCC) NIL NIL) (|upto_TCC1| "" (TCC :DEFS !) NIL NIL) (|pred_TCC1| "" (TCC :DEFS !) NIL NIL) (|tilde_TCC1| "" (TCC :DEFS !) NIL NIL) (|nat_induction| "" (LEMMA "wf_induction[nat, (LAMBDA (m,n:nat): m < n)]") (("1" (BETA) (("1" (SKOSIMP*) (("1" (INST -1 "p!1") (("1" (SPLIT) (("1" (INST -1 "i!1") NIL NIL) ("2" (SKOSIMP*) (("2" (CASE "x!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (INST -1 "x!1 - 1") (("1" (INST -3 "x!1 - 1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DELETE 2) (("2" (LEMMA "wf_nat") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) (|NAT_induction| "" (LEMMA "nat_induction") (("" (SKOSIMP*) (("" (INST -1 "(LAMBDA (n:nat): (FORALL (m:nat): m <= n IMPLIES p!1(m)))") (("" (SPLIT) (("1" (INST -1 "i!1") (("1" (INST -1 "i!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -2 "0") (("2" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (INST -3 "m!1") (("3" (ASSERT) (("3" (SKOSIMP*) (("3" (INST -1 "k!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|min_nat| (|min_TCC1| "" (INST + "lambda S: epsilon(lambda (n: nat): T_pred(n) AND S(n) AND
                                    FORALL x: S(x) IMPLIES n <= x)") (("" (SKOLEM!) (("" (USE "epsilon_ax[nat]") (("" (SPLIT -) (("1" (PROPAX) NIL NIL) ("2" (DELETE 2) (("2" (ASSERT) (("2" (LEMMA "wf_nat") (("2" (EXPAND "well_founded?") (("2" (INST - "lambda (x: nat): T_pred(x) AND S!1(x)") (("2" (GROUND) (("1" (SKOLEM!) (("1" (INST? +) (("1" (ASSERT) (("1" (SKOSIMP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DELETE 2) (("2" (TYPEPRED "S!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|min_def| "" (SKOLEM!) (("" (TYPEPRED "min(S!1)") (("" (EXPAND "minimum?") (("" (GROUND) (("1" (REPLACE*) NIL NIL) ("2" (INST? -2 :WHERE -4) (("2" (INST? - :WHERE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|real_defs| (|abs_TCC1| "" (GRIND) NIL NIL) (|abs_TCC2| "" (GRIND) NIL NIL) (|nonzero_abs_is_pos| "" (SUBTYPE-TCC) NIL NIL) (|rat_abs_is_nonneg| "" (SKOSIMP) (("" (EXPAND "abs") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|nzrat_abs_is_pos| "" (SUBTYPE-TCC) NIL NIL) (|int_abs_is_nonneg| "" (SKOSIMP) (("" (EXPAND "abs") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|nzint_abs_is_pos| "" (SUBTYPE-TCC) NIL NIL) (|max_TCC1| "" (GRIND) NIL NIL) (|max_TCC2| "" (GRIND) NIL NIL) (|min_TCC1| "" (GRIND) NIL NIL) (|min_TCC2| "" (GRIND) NIL NIL) (|nzreal_max| "" (SKOSIMP) (("" (EXPAND "max") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|nzreal_min| "" (SKOSIMP) (("" (EXPAND "min") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|nonneg_real_max| "" (SUBTYPE-TCC) NIL NIL) (|nonneg_real_min| "" (SKOSIMP) (("" (EXPAND "min") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|posreal_max| "" (SUBTYPE-TCC) NIL NIL) (|posreal_min| "" (SUBTYPE-TCC) NIL NIL) (|rat_max| "" (SKOSIMP) (("" (EXPAND "max") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|rat_min| "" (SKOSIMP) (("" (EXPAND "min") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|nzrat_max| "" (SUBTYPE-TCC) NIL NIL) (|nzrat_min| "" (SUBTYPE-TCC) NIL NIL) (|nonneg_rat_max| "" (SUBTYPE-TCC) NIL NIL) (|nonneg_rat_min| "" (SUBTYPE-TCC) NIL NIL) (|posrat_max| "" (SUBTYPE-TCC) NIL NIL) (|posrat_min| "" (SUBTYPE-TCC) NIL NIL) (|int_max| "" (SKOSIMP) (("" (EXPAND "max") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|int_min| "" (SKOSIMP) (("" (EXPAND "min") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|nzint_max| "" (SUBTYPE-TCC) NIL NIL) (|nzint_min| "" (SUBTYPE-TCC) NIL NIL) (|nat_max| "" (SUBTYPE-TCC) NIL NIL) (|nat_min| "" (SUBTYPE-TCC) NIL NIL) (|posint_max| "" (SUBTYPE-TCC) NIL NIL) (|posint_min| "" (SUBTYPE-TCC) NIL NIL))(|real_props| (|inv_ne_0| "" (GRIND) NIL NIL) (|both_sides_plus1| "" (TCC :DEFS !) NIL NIL) (|both_sides_plus2| "" (TCC :DEFS !) NIL NIL) (|both_sides_minus1| "" (TCC :DEFS !) NIL NIL) (|both_sides_minus2| "" (TCC :DEFS !) NIL NIL) (|both_sides_times1| "" (GRIND) NIL NIL) (|both_sides_times2| "" (LEMMA "both_sides_times1") (("" (SKOSIMP*) (("" (PROP) (("1" (INST -2 "n0z!1" "x!1" "y!1") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div1| "" (GRIND) (("" (LEMMA "both_sides_times1") (("" (INST -1 "1/n0z!1" "x!1" "y!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div2| "" (GRIND) (("" (LEMMA "both_sides_times1") (("" (INST-CP -1 "n0x!1" "n0z!1/n0x!1" "n0z!1/n0y!1") (("" (FLATTEN) (("" (DELETE -2) (("" (SPLIT) (("1" (CASE "n0z!1 = (n0z!1/n0x!1) * n0x!1") (("1" (REPLACE -1 :DIR RL) (("1" (DELETE -1) (("1" (DELETE -3) (("1" (INST -2 "n0y!1" "n0z!1" "(n0z!1/n0y!1)*n0x!1") (("1" (FLATTEN) (("1" (DELETE -2) (("1" (SPLIT) (("1" (CASE "(n0z!1 / n0y!1) * n0x!1 * n0y!1 = n0z!1 * n0x!1") (("1" (REPLACE -1) (("1" (REWRITE "both_sides_times2") NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2 3 4 5) (("2" (USE "div_def") (("2" (REPLACE -1) (("2" (USE "associative_mult") (("2" (REPLACE -1 :DIR RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|times_plus| "" (GRIND) NIL NIL) (|times_div1| "" (GRIND) NIL NIL) (|times_div2| "" (GRIND) NIL NIL) (|div_times| "" (GRIND) NIL NIL) (|div_eq_zero| "" (GRIND) (("" (LEMMA "both_sides_times1") (("" (INST -1 "n0z!1" "x!1/n0z!1" "0") (("" (FLATTEN) (("" (DELETE -1) (("" (SPLIT) (("1" (DELETE -2) (("1" (ASSERT) (("1" (REWRITE "commutative_mult") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|div_simp| "" (GRIND) NIL NIL) (|div_cancel1| "" (GRIND) NIL NIL) (|div_cancel2| "" (GRIND) NIL NIL) (|div_cancel3| "" (TCC :DEFS !) NIL NIL) (|cross_mult| "" (GRIND) NIL NIL) (|add_div| "" (GRIND) NIL NIL) (|minus_div1| "" (GRIND) NIL NIL) (|minus_div2| "" (GRIND) NIL NIL) (|div_distributes| "" (GRIND) NIL NIL) (|div_distributes_minus| "" (GRIND) NIL NIL) (|div_div1| "" (GRIND) NIL NIL) (|div_div2| "" (GRIND) NIL NIL) (|idem_add_is_zero| "" (GRIND) NIL NIL) (|zero_times1| "" (GRIND) NIL NIL) (|zero_times2| "" (GRIND) NIL NIL) (|zero_times3| "" (SKOSIMP*) (("" (PROP) (("1" (LEMMA "trichotomy") (("1" (INST-CP -1 "x!1") (("1" (INST -1 "y!1") (("1" (ASSERT) (("1" (PROP) (("1" (LEMMA "posreal_mult_closed") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "posreal_mult_closed") (("2" (INST -1 "-x!1" "y!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "posreal_mult_closed") (("3" (INST -1 "x!1" "-y!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (LEMMA "posreal_mult_closed") (("4" (INST -1 "-x!1" "-y!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) (|neg_times_neg| "" (GRIND) NIL NIL) (|zero_is_neg_zero| "" (GRIND) NIL NIL) (|strict_lt| "" (GRIND) NIL NIL) (|trich_lt| "" (GRIND) NIL NIL) (|tri_unique_lt1| "" (GRIND) NIL NIL) (|tri_unique_lt2| "" (GRIND) NIL NIL) (|zero_not_lt_zero| "" (GRIND) NIL NIL) (|neg_lt| "" (GRIND) NIL NIL) (|pos_times_lt| "" (GRIND) (("1" (LEMMA "posreal_mult_closed") (("1" (CASE "x!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (CASE "y!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (INST -1 "x!1" "-y!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (CASE "y!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "posreal_mult_closed") (("2" (INST -1 "-x!1" "y!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "posreal_mult_closed") (("3" (INST -1 "x!1" "y!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (LEMMA "posreal_mult_closed") (("4" (INST -1 "-x!1" "-y!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|neg_times_lt| "" (SKOSIMP*) (("" (LEMMA "pos_times_lt") (("" (INST -1 "x!1" "-y!1") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|quotient_pos_lt| "" (SKOSIMP*) (("" (LEMMA "inverse_mult") (("" (INST?) (("" (LEMMA "pos_times_lt") (("" (INST -1 "n0x!1" "1/n0x!1") (("" (REPLACE -2) (("" (ASSERT) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|quotient_neg_lt| "" (SKOSIMP*) (("" (LEMMA "quotient_pos_lt") (("" (INST -1 "-n0x!1") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|pos_div_lt| "" (SKOSIMP*) (("" (LEMMA "pos_times_lt") (("" (INST -1 "x!1" "1/n0y!1") (("" (LEMMA "quotient_pos_lt") (("" (INST -1 "n0y!1") (("" (LEMMA "quotient_neg_lt") (("" (INST -1 "n0y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|neg_div_lt| "" (SKOSIMP*) (("" (LEMMA "pos_div_lt") (("" (INST -1 "n0y!1" "-x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|div_mult_pos_lt1| "" (GRIND) (("1" (LEMMA "posreal_mult_closed") (("1" (INST -1 "x!1 - (z!1/py!1)" "py!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "posreal_mult_closed") (("2" (INST -1 "x!1*py!1 - z!1" "1/py!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|div_mult_pos_lt2| "" (LEMMA "div_mult_pos_lt1") (("" (SKOSIMP) (("" (INST -1 "py!1" "-x!1" "-z!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|div_mult_neg_lt1| "" (LEMMA "div_mult_pos_lt2") (("" (SKOSIMP) (("" (INST -1 "-ny!1" "-x!1" "z!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|div_mult_neg_lt2| "" (SKOSIMP) (("" (LEMMA "div_mult_pos_lt1") (("" (INST -1 "-ny!1" "-x!1" "z!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_plus_lt1| "" (TCC :DEFS !) NIL NIL) (|both_sides_plus_lt2| "" (TCC :DEFS !) NIL NIL) (|both_sides_minus_lt1| "" (TCC :DEFS !) NIL NIL) (|both_sides_minus_lt2| "" (TCC :DEFS !) NIL NIL) (|both_sides_times_pos_lt1| "" (GRIND) (("1" (LEMMA "posreal_mult_closed") (("1" (INST -1 "(y!1 - x!1) * pz!1" "1/pz!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "posreal_mult_closed") (("2" (INST -1 "y!1-x!1" "pz!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_times_pos_lt2| "" (LEMMA "both_sides_times_pos_lt1") (("" (SKOSIMP) (("" (INST -1 "pz!1" "x!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_times_neg_lt1| "" (LEMMA "both_sides_times_pos_lt1") (("" (SKOSIMP) (("" (INST -1 "-nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_times_neg_lt2| "" (LEMMA "both_sides_times_neg_lt1") (("" (SKOSIMP) (("" (INST -1 "nz!1" "x!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_pos_lt1| "" (LEMMA "both_sides_times_pos_lt1") (("" (SKOSIMP) (("" (INST -1 "1/pz!1" "x!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_pos_lt2| "" (SKOSIMP*) (("" (LEMMA "both_sides_times_pos_lt1") (("" (INST -1 "px!1 * py!1" "pz!1 / px!1" "pz!1 / py!1") (("" (ASSERT) (("" (GRIND) (("1" (CASE "pz!1 / px!1 * (px!1 * py!1) = pz!1 * py!1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CASE "pz!1 / py!1 * (px!1 * py!1) = pz!1 * px!1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "both_sides_times_pos_lt2") NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (CASE "pz!1 / px!1 * (px!1 * py!1) = pz!1 * py!1") (("1" (CASE "pz!1 / py!1 * (px!1 * py!1) = pz!1 * px!1") (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (HIDE -1 -2) (("1" (LEMMA "both_sides_times_pos_lt2") (("1" (INST?) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_div_pos_lt3| "" (SKOSIMP*) (("" (LEMMA "both_sides_div_pos_lt2") (("" (INST -1 "py!1" "px!1" "-nz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_neg_lt1| "" (LEMMA "both_sides_div_pos_lt1") (("" (SKOSIMP) (("" (INST -1 "-nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_neg_lt2| "" (LEMMA "both_sides_div_pos_lt2") (("" (SKOSIMP) (("" (INST -1 "-ny!1" "-nx!1" "pz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_neg_lt3| "" (LEMMA "both_sides_div_pos_lt3") (("" (SKOSIMP) (("" (INST -1 "nz!1" "-ny!1" "-nx!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|lt_plus_lt1| "" (GRIND) NIL NIL) (|lt_plus_lt2| "" (GRIND) NIL NIL) (|lt_minus_lt1| "" (GRIND) NIL NIL) (|lt_minus_lt2| "" (GRIND) NIL NIL) (|lt_times_lt_pos1| "" (SKOSIMP*) (("" (CASE "nnz!1 = 0") (("1" (ASSERT) (("1" (LEMMA "pos_times_lt") (("1" (INST -1 "y!1" "w!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "both_sides_times_pos_lt1") (("2" (INST-CP -1 "nnz!1" "px!1" "y!1") (("1" (INST -1 "y!1" "nnz!1" "w!1") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|lt_times_lt_pos2| "" (SKOSIMP*) (("" (CASE "nnx!1 = 0") (("1" (ASSERT) (("1" (LEMMA "pos_times_lt") (("1" (INST -1 "y!1" "w!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "both_sides_times_pos_lt1") (("2" (INST-CP -1 "pz!1" "nnx!1" "y!1") (("2" (INST -1 "y!1" "pz!1" "w!1") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|lt_div_lt_pos1_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|lt_div_lt_pos1| "" (GRIND) (("" (DELETE -5 -6) (("" (LEMMA "both_sides_div_pos_lt1") (("" (INST -1 "w!1" "px!1" "y!1") (("" (LEMMA "both_sides_div_pos_lt2") (("" (INST -1 "w!1" "pz!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|lt_div_lt_pos2_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|lt_div_lt_pos2| "" (GRIND) (("" (DELETE -4 -5) (("" (LEMMA "both_sides_div_pos_lt1") (("" (INST -1 "w!1" "nnx!1" "y!1") (("" (LEMMA "both_sides_div_pos_lt2") (("" (INST -1 "w!1" "pz!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|lt_times_lt_neg1| "" (LEMMA "lt_times_lt_pos1") (("" (SKOSIMP) (("" (INST -1 "-npw!1" "-ny!1" "-z!1" "-x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|lt_times_lt_neg2| "" (LEMMA "lt_times_lt_pos2") (("" (SKOSIMP) (("" (INST -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|lt_div_lt_neg1_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|lt_div_lt_neg1| "" (LEMMA "lt_div_lt_pos1") (("" (SKOSIMP) (("" (INST -1 "-ny!1" "-nw!1" "-z!1" "-x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|lt_div_lt_neg2_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|lt_div_lt_neg2| "" (LEMMA "lt_div_lt_pos2") (("" (SKOSIMP) (("" (INST -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|total_le| "" (TCC :DEFS !) NIL NIL) (|dich_le| "" (TCC :DEFS !) NIL NIL) (|zero_le_zero| "" (TCC :DEFS !) NIL NIL) (|neg_le| "" (TCC :DEFS !) NIL NIL) (|pos_times_le| "" (LEMMA "pos_times_lt") (("" (SKOSIMP) (("" (CASE "x!1 = 0") (("1" (GRIND) NIL NIL) ("2" (CASE "y!1 = 0") (("1" (GRIND) NIL NIL) ("2" (INST?) (("2" (LEMMA "zero_times3") (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|neg_times_le| "" (LEMMA "pos_times_le") (("" (SKOSIMP) (("" (INST -1 "x!1" "-y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|quotient_pos_le| "" (LEMMA "quotient_pos_lt") (("" (SKOSIMP) (("" (INST?) (("" (LEMMA "inv_ne_0") (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|quotient_neg_le| "" (LEMMA "quotient_pos_le") (("" (SKOSIMP) (("" (INST -1 "-n0x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|pos_div_le| "" (LEMMA "pos_div_lt") (("" (SKOSIMP) (("" (CASE "x!1 = 0") (("1" (GRIND) NIL NIL) ("2" (INST?) (("2" (LEMMA "zero_times3") (("2" (INST -1 "x!1" "1/n0y!1") (("2" (LEMMA "inv_ne_0") (("2" (INST -1 "n0y!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|neg_div_le| "" (LEMMA "pos_div_le") (("" (SKOSIMP) (("" (INST -1 "-n0y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|div_mult_pos_le1| "" (LEMMA "div_mult_pos_lt1") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) (("" (CASE-REPLACE "z!1 = x!1 * py!1") (("1" (ASSERT) (("1" (CASE-REPLACE "x!1 * py!1 / py!1 = x!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2 3 4) (("2" (USE "div_def") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|div_mult_pos_le2| "" (LEMMA "div_mult_pos_lt2") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) (("" (CASE-REPLACE "z!1 = x!1 * py!1") (("1" (ASSERT) (("1" (CASE-REPLACE "x!1 * py!1 / py!1 = x!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2 3 4) (("2" (USE "div_def") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|div_mult_neg_le1| "" (LEMMA "div_mult_neg_lt1") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) (("" (CASE-REPLACE "z!1 = x!1 * ny!1") (("1" (ASSERT) (("1" (CASE-REPLACE "x!1 * ny!1 / ny!1 = x!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2 3 4) (("2" (USE "div_def") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|div_mult_neg_le2| "" (LEMMA "div_mult_neg_lt2") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) (("" (CASE-REPLACE "z!1 = x!1 * ny!1") (("1" (ASSERT) (("1" (CASE-REPLACE "x!1 * ny!1 / ny!1 = x!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2 3 4) (("2" (USE "div_def") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_plus_le1| "" (GRIND) NIL NIL) (|both_sides_plus_le2| "" (GRIND) NIL NIL) (|both_sides_minus_le1| "" (GRIND) NIL NIL) (|both_sides_minus_le2| "" (GRIND) NIL NIL) (|both_sides_times_pos_le1| "" (LEMMA "both_sides_times_pos_lt1") (("" (SKOSIMP) (("" (INST?) (("" (INST -1 "y!1") (("" (GRIND) (("" (LEMMA "both_sides_times1") (("" (INST?) (("" (INST -1 "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_times_pos_le2| "" (LEMMA "both_sides_times_pos_le1") (("" (SKOSIMP) (("" (INST -1 "pz!1" "x!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_times_neg_le1| "" (LEMMA "both_sides_times_pos_le1") (("" (SKOSIMP) (("" (INST -1 "-nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_times_neg_le2| "" (LEMMA "both_sides_times_neg_le1") (("" (SKOSIMP) (("" (INST -1 "nz!1" "x!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_pos_le1| "" (LEMMA "both_sides_div_pos_lt1") (("" (SKOSIMP) (("" (INST?) (("" (INST -1 "y!1") (("" (GRIND) (("" (LEMMA "both_sides_times_pos_le1") (("" (INST -1 "1/pz!1" "x!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_div_pos_le2| "" (LEMMA "both_sides_div_pos_lt2") (("" (SKOSIMP) (("" (INST?) (("" (INST -1 "py!1") (("" (GRIND) (("" (LEMMA "both_sides_div2") (("" (INST?) (("" (INST -1 "py!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_div_pos_le3| "" (LEMMA "both_sides_div_pos_le2") (("" (SKOSIMP) (("" (INST -1 "py!1" "px!1" "-nz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_neg_le1| "" (LEMMA "both_sides_div_pos_le1") (("" (SKOSIMP) (("" (INST -1 "-nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_neg_le2| "" (LEMMA "both_sides_div_pos_le2") (("" (SKOSIMP) (("" (INST -1 "-ny!1" "-nx!1" "pz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_neg_le3| "" (LEMMA "both_sides_div_pos_le3") (("" (SKOSIMP) (("" (INST -1 "nz!1" "-ny!1" "-nx!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|le_plus_le| "" (GRIND) NIL NIL) (|le_minus_le| "" (GRIND) NIL NIL) (|le_times_le_pos| "" (LEMMA "lt_times_lt_pos1") (("" (SKOSIMP) (("" (CASE "nnz!1 = w!1") (("1" (LEMMA "both_sides_times_pos_le1") (("1" (INST -1 "w!1" "nnx!1" "y!1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (INST -1 "nnz!1" "nnx!1" "w!1" "y!1") (("1" (GRIND) NIL NIL) ("2" (GRIND) (("2" (LEMMA "pos_times_le") (("2" (INST -1 "y!1" "w!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|le_div_le_pos_TCC1| "" (GRIND) NIL NIL) (|le_div_le_pos| "" (LEMMA "le_times_le_pos") (("" (SKOSIMP) (("" (INST -1 "nnx!1" "1/w!1" "1/pz!1" "y!1") (("1" (GRIND) (("1" (REWRITE "both_sides_div_pos_le2") NIL NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "quotient_pos_lt") (("2" (INST -1 "w!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|le_times_le_neg| "" (LEMMA "le_times_le_pos") (("" (SKOSIMP) (("" (INST -1 "-npy!1" "-npw!1" "-z!1" "-x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|le_div_le_neg_TCC1| "" (GRIND) NIL NIL) (|le_div_le_neg| "" (LEMMA "le_div_le_pos") (("" (SKOSIMP) (("" (INST -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|strict_gt| "" (TCC :DEFS !) NIL NIL) (|trich_gt| "" (TCC :DEFS !) NIL NIL) (|tri_unique_gt1| "" (TCC :DEFS !) NIL NIL) (|tri_unique_gt2| "" (TCC :DEFS !) NIL NIL) (|zero_not_gt_zero| "" (TCC :DEFS !) NIL NIL) (|neg_gt| "" (TCC :DEFS !) NIL NIL) (|pos_times_gt| "" (LEMMA "pos_times_lt") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|neg_times_gt| "" (LEMMA "neg_times_lt") (("" (SKOSIMP) (("" (INST -1 "x!1" "y!1") (("" (ASSERT) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|quotient_pos_gt| "" (LEMMA "quotient_pos_lt") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|quotient_neg_gt| "" (LEMMA "quotient_neg_lt") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|pos_div_gt| "" (LEMMA "pos_div_lt") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|neg_div_gt| "" (LEMMA "neg_div_lt") (("" (SKOSIMP) (("" (INST?) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) (|div_mult_pos_gt1| "" (LEMMA "div_mult_pos_lt1") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|div_mult_pos_gt2| "" (LEMMA "div_mult_pos_lt2") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|div_mult_neg_gt1| "" (LEMMA "div_mult_neg_lt1") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|div_mult_neg_gt2| "" (LEMMA "div_mult_neg_lt2") (("" (SKOSIMP) (("" (GRIND) NIL NIL)) NIL)) NIL) (|both_sides_plus_gt1| "" (GRIND) NIL NIL) (|both_sides_plus_gt2| "" (GRIND) NIL NIL) (|both_sides_minus_gt1| "" (GRIND) NIL NIL) (|both_sides_minus_gt2| "" (GRIND) NIL NIL) (|both_sides_times_pos_gt1| "" (LEMMA "both_sides_times_pos_lt1") (("" (SKOSIMP) (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_times_pos_gt2| "" (LEMMA "both_sides_times_pos_lt2") (("" (SKOSIMP) (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_times_neg_gt1| "" (LEMMA "both_sides_times_neg_lt1") (("" (SKOSIMP) (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_times_neg_gt2| "" (LEMMA "both_sides_times_neg_lt2") (("" (SKOSIMP) (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_pos_gt1| "" (LEMMA "both_sides_div_pos_lt1") (("" (SKOSIMP) (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_pos_gt2| "" (LEMMA "both_sides_div_pos_lt2") (("" (SKOSIMP) (("" (INST -1 "py!1" "px!1" "pz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_pos_gt3| "" (LEMMA "both_sides_div_pos_lt3") (("" (SKOSIMP) (("" (INST -1 "nz!1" "py!1" "px!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_neg_gt1| "" (LEMMA "both_sides_div_neg_lt1") (("" (SKOSIMP) (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_neg_gt2| "" (LEMMA "both_sides_div_neg_lt2") (("" (SKOSIMP) (("" (INST -1 "ny!1" "nx!1" "pz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_neg_gt3| "" (LEMMA "both_sides_div_neg_lt3") (("" (SKOSIMP) (("" (INST -1 "ny!1" "nx!1" "nz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|gt_plus_gt1| "" (GRIND) NIL NIL) (|gt_plus_gt2| "" (GRIND) NIL NIL) (|gt_minus_gt1| "" (GRIND) NIL NIL) (|gt_minus_gt2| "" (GRIND) NIL NIL) (|gt_times_gt_pos1| "" (LEMMA "lt_times_lt_pos1") (("" (SKOSIMP) (("" (INST -1 "nnw!1" "py!1" "z!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|gt_times_gt_pos2| "" (LEMMA "lt_times_lt_pos2") (("" (SKOSIMP) (("" (INST -1 "nny!1" "pw!1" "z!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|gt_div_gt_pos1_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|gt_div_gt_pos1| "" (LEMMA "lt_div_lt_pos1") (("" (SKOSIMP) (("" (INST -1 "py!1" "pw!1" "z!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|gt_div_gt_pos2_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|gt_div_gt_pos2| "" (LEMMA "lt_div_lt_pos2") (("" (SKOSIMP) (("" (INST -1 "nny!1" "pw!1" "z!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|gt_times_gt_neg1| "" (LEMMA "lt_times_lt_neg1") (("" (SKOSIMP) (("" (INST -1 "npz!1" "nx!1" "y!1" "w!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|gt_times_gt_neg2| "" (LEMMA "lt_times_lt_neg2") (("" (SKOSIMP) (("" (INST -1 "npx!1" "nz!1" "y!1" "w!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|gt_div_gt_neg1_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|gt_div_gt_neg1| "" (LEMMA "lt_div_lt_neg1") (("" (SKOSIMP) (("" (INST -1 "nz!1" "nx!1" "y!1" "w!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|gt_div_gt_neg2_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|gt_div_gt_neg2| "" (LEMMA "lt_div_lt_neg2") (("" (SKOSIMP) (("" (INST -1 "npx!1" "nz!1" "y!1" "w!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|strict_ge| "" (TCC :DEFS !) NIL NIL) (|dich_ge| "" (TCC :DEFS !) NIL NIL) (|zero_ge_zero| "" (TCC :DEFS !) NIL NIL) (|neg_ge| "" (TCC :DEFS !) NIL NIL) (|pos_times_ge| "" (LEMMA "pos_times_le") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|neg_times_ge| "" (LEMMA "neg_times_le") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|quotient_pos_ge| "" (LEMMA "quotient_pos_le") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|quotient_neg_ge| "" (LEMMA "quotient_neg_le") (("" (SKOSIMP) (("" (GRIND) NIL NIL)) NIL)) NIL) (|pos_div_ge| "" (LEMMA "pos_div_le") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|neg_div_ge| "" (LEMMA "neg_div_le") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|div_mult_pos_ge1| "" (LEMMA "div_mult_pos_le2") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|div_mult_pos_ge2| "" (LEMMA "div_mult_pos_le1") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|div_mult_neg_ge1| "" (LEMMA "div_mult_neg_le2") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|div_mult_neg_ge2| "" (LEMMA "div_mult_neg_le1") (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_plus_ge1| "" (GRIND) NIL NIL) (|both_sides_plus_ge2| "" (GRIND) NIL NIL) (|both_sides_minus_ge1| "" (GRIND) NIL NIL) (|both_sides_minus_ge2| "" (GRIND) NIL NIL) (|both_sides_times_pos_ge1| "" (LEMMA "both_sides_times_pos_le1") (("" (SKOSIMP) (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_times_pos_ge2| "" (LEMMA "both_sides_times_pos_le2") (("" (SKOSIMP) (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_times_neg_ge1| "" (LEMMA "both_sides_times_neg_le1") (("" (SKOSIMP) (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_times_neg_ge2| "" (LEMMA "both_sides_times_neg_le2") (("" (SKOSIMP) (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_pos_ge1| "" (LEMMA "both_sides_div_pos_le1") (("" (SKOSIMP) (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_pos_ge2| "" (LEMMA "both_sides_div_pos_le2") (("" (SKOSIMP) (("" (INST -1 "py!1" "px!1" "pz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_pos_ge3| "" (LEMMA "both_sides_div_pos_le3") (("" (SKOSIMP) (("" (INST -1 "nz!1" "py!1" "px!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_neg_ge1| "" (LEMMA "both_sides_div_neg_le1") (("" (SKOSIMP) (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_neg_ge2| "" (LEMMA "both_sides_div_neg_le2") (("" (SKOSIMP) (("" (INST -1 "ny!1" "nx!1" "pz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_div_neg_ge3| "" (LEMMA "both_sides_div_neg_le3") (("" (SKOSIMP) (("" (INST -1 "ny!1" "nx!1" "nz!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|ge_plus_ge| "" (GRIND) NIL NIL) (|ge_minus_ge| "" (GRIND) NIL NIL) (|ge_times_ge_pos| "" (LEMMA "le_times_le_pos") (("" (SKOSIMP) (("" (INST -1 "nny!1" "nnw!1" "z!1" "x!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|ge_div_ge_pos_TCC1| "" (TCC :DEFS EXPLICIT) NIL NIL) (|ge_div_ge_pos| "" (LEMMA "le_div_le_pos") (("" (SKOSIMP) (("" (INST -1 "nny!1" "pw!1" "z!1" "x!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|ge_times_ge_neg| "" (LEMMA "le_times_le_neg") (("" (SKOSIMP) (("" (INST -1 "npz!1" "npx!1" "y!1" "w!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|ge_div_ge_neg_TCC1| "" (TCC :DEFS EXPLICIT) NIL NIL) (|ge_div_ge_neg| "" (LEMMA "le_div_le_neg") (("" (SKOSIMP*) (("" (INST -1 "npx!1" "nz!1" "y!1" "w!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|nonzero_times1| "" (LEMMA "zero_times3") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|nonzero_times2| "" (LEMMA "zero_times3") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|nonzero_times3| "" (LEMMA "zero_times3") (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|eq1_gt| "" (SKOSIMP) (("" (LEMMA "div_cancel3") (("" (INST -1 "y!1" "1" "x!1") (("1" (ASSERT) (("1" (HIDE -3) (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -1) (("1" (LEMMA "div_mult_pos_gt2") (("1" (INST -1 "y!1" "1" "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "zero_times3") (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|eq1_ge| "" (LEMMA "eq1_gt") (("" (SKOSIMP) (("" (CASE "x!1 = 1") (("1" (ASSERT) NIL NIL) ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|eqm1_gt| "" (SKOSIMP) (("" (LEMMA "eq1_gt") (("" (INST -1 "x!1" "-y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|eqm1_ge| "" (LEMMA "eq1_ge") (("" (SKOSIMP) (("" (INST -1 "x!1" "-y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|eqm1_lt| "" (SKOSIMP) (("" (LEMMA "eq1_gt") (("" (INST -1 "-x!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|eqm1_le| "" (LEMMA "eq1_ge") (("" (SKOSIMP) (("" (INST -1 "-x!1" "y!1") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|sqrt_1| "" (SKOSIMP*) (("" (GROUND) (("" (CASE "abs(x!1)>1") (("1" (LEMMA "eq1_gt") (("1" (INST -1 "abs(x!1)" "abs(x!1)") (("1" (ASSERT) (("1" (EXPAND "abs" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "div_mult_pos_ge1") (("2" (INST -1 "abs(x!1)" "1" "1") (("1" (GROUND) (("1" (LEMMA "eq1_ge") (("1" (INST -1 "1/abs(x!1)" "1/abs(x!1)") (("1" (ASSERT) (("1" (SPLIT) (("1" (CASE "abs(x!1) = 1") (("1" (ASSERT) (("1" (EXPAND "abs" -1) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) (("2" (REWRITE "div_mult_pos_le1") (("2" (EXPAND "abs" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE "x!1 = 0") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "abs" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (REWRITE "div_times") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "div_times") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1 = 0") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "abs" 2) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1 = 0") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "abs" 2) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|sqrt_1_lt| "" (SKOSIMP*) (("" (CASE-REPLACE "x!1 * x!1 - 1 < 0") (("1" (HIDE -2) (("1" (CASE-REPLACE "x!1 * x!1 - 1 = (x!1 + 1)*(x!1 - 1)") (("1" (HIDE -1) (("1" (LEMMA "pos_times_lt") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) (|sqrt_1_le| "" (SKOSIMP*) (("" (CASE-REPLACE "x!1 * x!1 - 1 <= 0") (("1" (HIDE -2) (("1" (CASE-REPLACE "x!1 * x!1 - 1 = (x!1 + 1)*(x!1 - 1)") (("1" (HIDE -1) (("1" (LEMMA "neg_times_le") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) (|idem_mult| "" (SKOSIMP*) (("" (GROUND) (("" (LEMMA "div_cancel3") (("" (INST -1 "x!1" "x!1" "x!1") (("" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|product_1| "" (SKOSIMP) (("" (CASE "i!1 = 0") (("1" (GRIND) NIL NIL) ("2" (CASE "j!1 = 0") (("1" (GRIND) NIL NIL) ("2" (LEMMA "eq1_ge") (("2" (INST?) (("2" (LEMMA "eq1_ge") (("2" (INST -1 "j!1" "i!1") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|product_m1| "" (SKOSIMP) (("" (LEMMA "product_1") (("" (INST -1 "i!1" "-j!1") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|triangle| "" (GRIND) NIL NIL) (|abs_mult| "" (SKOSIMP) (("" (LEMMA "neg_times_lt") (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|abs_div| "" (SKOSIMP*) (("" (LEMMA "pos_div_gt") (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) (|abs_abs| "" (SKOSIMP*) (("" (EXPAND "abs") (("" (LIFT-IF) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) (|abs_square| "" (SKOSIMP*) (("" (EXPAND "abs") (("" (PROPAX) NIL NIL)) NIL)) NIL) (|abs_limits| "" (GRIND) NIL NIL) (|axiom_of_archimedes| "" (LEMMA "real_complete") (("" (INST -1 "{x:real|EXISTS (z : int) : z=x}") (("1" (GRIND :IF-MATCH NIL) (("1" (INST -4 "y!1 - 1") (("1" (REDUCE :IF-MATCH NIL) (("1" (INST - "s!1 + 1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "int_plus_int_is_int") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REDUCE) NIL NIL)) NIL) ("2" (DELETE 2) (("2" (GRIND) (("2" (INST - "0") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|archimedean| "" (SKOLEM!) (("" (LEMMA "axiom_of_archimedes" ("x" "1/px!1")) (("" (SKOLEM!) (("" (ASSERT) (("" (INST + "i!1") (("" (REWRITE "div_mult_pos_lt1") (("" (REWRITE "div_mult_pos_lt1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|rational_props| (|density_positive| "" (SKOSIMP) (("" (ASSERT) (("" (LEMMA "archimedean" ("px" "y!1 - x!1")) (("" (SKOLEM!) (("" (LEMMA "posreal_mult_closed" ("x" "y!1" "y" "n!1")) (("" (GROUND) (("" (LEMMA "wf_nat") (("" (EXPAND "well_founded?") (("" (INST -1 "LAMBDA (n : nat) : y!1 * n!1 <= n") (("" (REDUCE :IF-MATCH NIL) (("1" (AUTO-REWRITE "div_mult_pos_lt1" "div_mult_pos_lt2") (("1" (INST + "(y!2 - 1)/n!1") (("1" (ASSERT) (("1" (INST - "y!2 -1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "axiom_of_archimedes" ("x" "y!1 * n!1")) (("2" (SKOLEM!) (("2" (ASSERT) (("2" (INST + "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|density| "" (LEMMA "density_positive") (("" (SKOSIMP) (("" (CASE "x!1 >= 0") (("1" (INST? -) (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "axiom_of_archimedes" ("x" "-x!1")) (("2" (SKOSIMP) (("2" (INST -2 "i!1 + x!1" "i!1 + y!1") (("2" (ASSERT) (("2" (SKOSIMP) (("2" (INST 2 "r!1 - i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|integer_props| (|integer_pred_ax| "" (SKOSIMP*) (("" (CASE "i!1 >= 0") (("1" (INST 1 "i!1") NIL NIL) ("2" (INST 2 "-i!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|div_simple| "" (GRIND :IF-MATCH NIL) (("" (INST 2 "i!1/n0j!1") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|lub_nat_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|lub_nat| "" (INDUCT "m") (("1" (SKOSIMP*) (("1" (EXPAND "upper_bound?") (("1" (TYPEPRED "N!1") (("1" (EXPAND "nonempty?") (("1" (EXPAND "empty?") (("1" (SKOSIMP*) (("1" (EXPAND "member") (("1" (INST 1 "x!1") (("1" (EXPAND "least_upper_bound?") (("1" (SPLIT) (("1" (EXPAND "upper_bound?") (("1" (SKOSIMP*) (("1" (INST -2 "s!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "upper_bound?") (("2" (INST -1 "x!1") (("2" (EXPAND "extend") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -1 "N!1") (("2" (ASSERT) (("2" (REPLACE 1) (("2" (ASSERT) (("2" (EXPAND "upper_bound?") (("2" (SKOSIMP*) (("2" (INST 2 "s!1") (("1" (EXPAND "least_upper_bound?") (("1" (SPLIT) (("1" (EXPAND "upper_bound?") (("1" (SKOSIMP*) (("1" (INST -1 "s!2") (("1" (ASSERT) (("1" (CASE "forall (i, j: int): i < j iff i + 1 <= j") (("1" (INST -1 "s!1" "s!2") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "s!2") (("2" (EXPAND "extend") (("2" (PROP) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "s!1") (("3" (EXPAND "extend") (("3" (PROP) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND "upper_bound?") (("2" (INST -1 "s!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "s!1") (("2" (EXPAND "extend") (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP) (("3" (SKOSIMP) (("3" (EXPAND "nonempty?") (("3" (EXPAND "empty?") (("3" (TYPEPRED "N!1") (("3" (EXPAND "nonempty?") (("3" (EXPAND "empty?") (("3" (SKOSIMP) (("3" (INST -3 "x!1") (("3" (EXPAND "member") (("3" (EXPAND "extend") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP) (("4" (TYPEPRED "N!1") (("4" (EXPAND "nonempty?") (("4" (EXPAND "empty?") (("4" (SKOSIMP) (("4" (EXPAND "member") (("4" (INST -2 "x!1") (("4" (EXPAND "extend") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|lub_int_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|lub_int| "" (SKOSIMP*) (("" (TYPEPRED "I!1") (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (SKOSIMP*) (("" (LEMMA "lub_nat") (("" (EXPAND "member") (("" (INST - "{n|I!1(n+x!1)}" "i!1-x!1") (("1" (PROP) (("1" (SKOSIMP*) (("1" (INST + "n!1+x!1") (("1" (ASSERT) (("1" (EXPAND "least_upper_bound?") (("1" (PROP) (("1" (EXPAND "upper_bound?") (("1" (SKOSIMP*) (("1" (ASSERT) (("1" (INST - "s!1-x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (EXPAND "extend") (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (TYPEPRED "s!1") (("1" (EXPAND "extend") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "s!1") (("2" (EXPAND "extend") (("2" (PROP) (("1" (LEMMA "rat_minus_rat_is_rat") (("1" (INST?) NIL NIL)) NIL) ("2" (LEMMA "int_minus_int_is_int") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST - "y!1-x!1") (("2" (ASSERT) (("2" (EXPAND "upper_bound?") (("2" (SKOSIMP*) (("2" (INST?) (("2" (EXPAND "extend") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "upper_bound?") (("2" (SKOSIMP*) (("2" (TYPEPRED "s!1") (("2" (EXPAND "extend" -1) (("2" (PROP) (("2" (INST - "s!1+x!1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "extend" 1) (("2" (PROP) (("1" (LEMMA "rat_plus_rat_is_rat") (("1" (INST?) NIL NIL)) NIL) ("2" (LEMMA "int_plus_int_is_int") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "upper_bound?") (("2" (INST -2 "x!1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "extend") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "nonempty?") (("3" (EXPAND "empty?") (("3" (INST -1 "0") (("3" (EXPAND "member") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|glb_nat| "" (LEMMA "lub_int") (("" (SKOSIMP*) (("" (INST -1 "{i: nonpos_int | N!1(-i)}" "0") (("1" (GRIND :IF-MATCH NIL) (("1" (INST 1 "-j!1") (("1" (PROP) (("1" (SKOSIMP*) (("1" (INST -3 "-s!1") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "s!1") (("2" (EXPAND "extend") (("2" (ASSERT) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) (("3" (LEMMA "minus_rat_is_rat") (("3" (INST -1 "s!1") NIL NIL)) NIL)) NIL) ("4" (LEMMA "minus_int_is_int") (("4" (INST -1 "s!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3) (("2" (SKOSIMP*) (("2" (INST -4 "-y!1") (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (INST -1 "-s!1") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "s!1") (("2" (EXPAND "extend") (("2" (PROP) (("1" (LEMMA "minus_rat_is_rat") (("1" (INST -1 "s!1") NIL NIL)) NIL) ("2" (LEMMA "minus_int_is_int") (("2" (INST -1 "s!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "extend") (("2" (TYPEPRED "N!1") (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (SKOSIMP*) (("2" (INST -2 "-x!1") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|glb_int| "" (LEMMA "lub_int") (("" (SKOSIMP*) (("" (INST -1 "{i: int | I!1(-i)}" "-i!1") (("1" (PROP) (("1" (SKOSIMP*) (("1" (GRIND :IF-MATCH NIL) (("1" (INST 1 "-j!1") (("1" (PROP) (("1" (SKOSIMP*) (("1" (INST -1 "-s!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2) (("2" (TYPEPRED "s!1") (("2" (EXPAND "extend") (("2" (ASSERT) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (LEMMA "minus_rat_is_rat") (("2" (INST -1 "s!1") NIL NIL)) NIL) ("3" (LEMMA "minus_int_is_int") (("3" (INST -1 "s!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -3 "-y!1") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -1 "-s!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2 3) (("2" (TYPEPRED "s!1") (("2" (EXPAND "extend") (("2" (ASSERT) (("2" (GROUND) (("1" (LEMMA "minus_rat_is_rat") (("1" (INST -1 "s!1") NIL NIL)) NIL) ("2" (LEMMA "minus_int_is_int") (("2" (INST -1 "s!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND :IF-MATCH NIL) (("2" (INST -4 "-s!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 -3 2) (("2" (TYPEPRED "s!1") (("2" (EXPAND "extend") (("2" (GROUND) (("1" (LEMMA "minus_rat_is_rat") (("1" (INST -1 "s!1") NIL NIL)) NIL) ("2" (LEMMA "minus_int_is_int") (("2" (INST -1 "s!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (TYPEPRED "I!1") (("2" (GRIND :IF-MATCH NIL) (("2" (INST -3 "-x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|floor_ceil| (|floor_exists| "" (SKOSIMP*) (("" (LEMMA "lub_int") (("" (LEMMA "axiom_of_archimedes") (("" (INST?) (("" (SKOSIMP*) (("" (INST - "{i|i<=x!1}" "i!1") (("1" (PROP) (("1" (EXPAND "least_upper_bound?") (("1" (SKOLEM-TYPEPRED) (("1" (INST?) (("1" (PROP) (("1" (EXPAND "upper_bound?") (("1" (INST - "j!1+1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "extend") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "upper_bound?") (("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "extend") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "nonempty_exists") (("2" (LEMMA "axiom_of_archimedes") (("2" (INST - "abs(x!1)") (("2" (SKOSIMP*) (("2" (INST + "-i!2") (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|ceiling_exists| "" (SKOSIMP*) (("" (CASE "integer?(x!1)") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (EXPAND "integer?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "floor_exists") (("2" (INST?) (("2" (SKOSIMP*) (("2" (INST + "i!1+1") (("2" (ASSERT) (("2" (EXPAND "integer?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|floor_TCC1| "" (INST + "lambda x: choose( {i: integer | i <= x & x < 1 + i})") (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (LEMMA "floor_exists") (("" (SKOSIMP*) (("" (INST?) (("" (SKOSIMP*) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|fractional_TCC1| "" (TCC) NIL NIL) (|ceiling_TCC1| "" (INST + "lambda x: choose( {i: integer | x <= i & i < x + 1})") (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (LEMMA "ceiling_exists") (("" (SKOSIMP*) (("" (INST - "x!1") (("" (SKOSIMP*) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|floor_def| "" (GRIND) NIL NIL) (|ceiling_def| "" (GRIND) NIL NIL) (|floor_ceiling_reflect1| "" (GRIND) NIL NIL) (|floor_ceiling_reflect2| "" (GRIND) NIL NIL) (|nonneg_floor_is_nat| "" (SUBTYPE-TCC) NIL NIL) (|nonneg_ceiling_is_nat| "" (SUBTYPE-TCC) NIL NIL) (|floor_int| "" (GRIND) NIL NIL) (|ceiling_int| "" (GRIND) NIL NIL) (|floor_plus_int| "" (SKOLEM!) (("" (NAME "j!1" "floor(x!1+i!1)") (("" (NAME "k!1" "floor(x!1)") (("" (TYPEPRED "floor(i!1 + x!1)") (("" (TYPEPRED "floor(x!1)") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|ceiling_plus_int| "" (SKOLEM!) (("" (LEMMA "ceiling_def") (("" (INST-CP - "x!1+i!1") (("" (FLATTEN) (("" (NAME "j!1" "ceiling(x!1)") (("" (NAME "k!1" "ceiling(x!1+i!1)") (("" (REPLACE -1) (("" (REPLACE -2) (("" (INST - "x!1") (("" (REPLACE -2) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|floor_ceiling_nonint| "" (GRIND) NIL NIL) (|floor_ceiling_int| "" (GRIND) NIL NIL) (|floor_neg| "" (SKOSIMP*) (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "floor_int") (("1" (REWRITE "floor_int") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "closed_neg") (("1" (ASSERT) (("1" (EXPAND "integer?") (("1" (FLATTEN) (("1" (REWRITE "closed_neg") NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "integer?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "integer?") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "integer?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|real_parts| "" (EXPAND "fractional") (("" (PROPAX) NIL NIL)) NIL) (|floor_plus| "" (SKOLEM!) (("" (EXPAND "fractional") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|ceiling_plus| "" (SKOLEM!) (("" (EXPAND "fractional") (("" (LEMMA "ceiling_plus_int") (("" (INST-CP -1 "-floor(x!1) - floor(y!1)" "x!1 + y!1") (("" (REPLACE -2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|floor_split| "" (GRIND) NIL NIL) (|floor_within_1| "" (GRIND) NIL NIL) (|ceiling_within_1| "" (GRIND) NIL NIL) (|floor_val| "" (GRIND :IF-MATCH NIL) (("" (TYPEPRED "floor(i!1/j!1)") (("" (CASE "j!1 > 0") (("1" (CASE "i!1/j!1 >= k!1" "i!1/j!1 < k!1 + 1") (("1" (NAME-REPLACE "q" "i!1/j!1") (("1" (HIDE -3 -6 -7 -8 -9 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -1 -2 -3 -4 -5 -6 -7 2 3) (("2" (ASSERT) (("2" (USE "div_mult_pos_lt1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -2 -3 -4 -5 -7 2 3) (("3" (USE "div_mult_pos_ge1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|floor_small| "" (SKOSIMP) (("" (LIFT-IF) (("" (PROP) (("1" (CASE "i!1/j!1 < 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (CASE "(j!1 - i!1)/j!1 > 0") (("1" (ASSERT) NIL NIL) ("2" (GRIND) (("1" (USE "pos_div_gt") (("1" (ASSERT) NIL NIL)) NIL) ("2" (USE "pos_div_gt") (("2" (ASSERT) NIL NIL)) NIL) ("3" (USE "pos_div_gt") (("3" (ASSERT) NIL NIL)) NIL) ("4" (USE "pos_div_gt") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "floor(i!1/j!1)") (("2" (CASE "i!1/j!1 >= -1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2 3) (("2" (CASE "(i!1 + j!1)/j!1 >= 0") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (GRIND :IF-MATCH NIL) (("1" (USE "pos_div_ge") (("1" (ASSERT) NIL NIL)) NIL) ("2" (USE "pos_div_ge") (("2" (ASSERT) NIL NIL)) NIL) ("3" (USE "pos_div_ge") (("3" (ASSERT) NIL NIL)) NIL) ("4" (USE "pos_div_ge") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|floor_eq_0| "" (SKOSIMP) (("" (TYPEPRED "floor(x!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL))(|exponentiation| (|expt_TCC1| "" (GRIND) NIL NIL) (|expt_TCC2| "" (GRIND) NIL NIL) (|expt_pos_aux| "" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (INST?) (("2" (REWRITE "pos_times_gt") NIL NIL)) NIL)) NIL)) NIL)) NIL) (|expt_nonzero_aux| "" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" -2) (("2" (INST?) (("2" (REWRITE "zero_times3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|nnreal_expt| "" (INDUCT "n") (("1" (SKOSIMP) (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (INST -1 "x!1") (("2" (ASSERT) (("2" (LEMMA "pos_times_ge") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|posreal_expt| "" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (INST -1 "x!1") (("2" (EXPAND "expt" +) (("2" (ASSERT) (("2" (LEMMA "pos_times_gt") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|nzreal_expt| "" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" -2) (("2" (INST -1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|rat_expt| "" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (INST -1 "x!1") (("2" (EXPAND "expt" +) (("2" (LEMMA "rat_times_rat_is_rat") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|nnrat_expt| "" (SUBTYPE-TCC) NIL NIL) (|posrat_expt| "" (SUBTYPE-TCC) NIL NIL) (|int_expt| "" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (INST -1 "x!1") (("2" (EXPAND "expt" +) (("2" (LEMMA "int_times_int_is_int") (("2" (INST -1 "x!1" "expt(x!1, j!1)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|nat_expt| "" (SUBTYPE-TCC) NIL NIL) (|posnat_expt| "" (SUBTYPE-TCC) NIL NIL) (|caret_TCC1| "" (GRIND) NIL NIL) (|caret_TCC2| "" (SKOLEM!) (("" (TYPEPRED "i!1") (("" (REWRITE "expt_nonzero_aux") NIL NIL)) NIL)) NIL) (|expt_pos_TCC1| "" (TCC :DEFS !) NIL NIL) (|expt_pos| "" (SKOSIMP*) (("" (EXPAND "^") (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "expt_pos_aux") NIL NIL) ("2" (REWRITE "quotient_pos_gt") (("2" (REWRITE "expt_pos_aux") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|expt_nonzero_TCC1| "" (GRIND) NIL NIL) (|expt_nonzero| "" (SKOSIMP*) (("" (EXPAND "^") (("" (LIFT-IF) (("" (PROP) (("1" (LEMMA "expt_nonzero_aux") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "inv_ne_0") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|nnreal_exp| "" (SKOLEM-TYPEPRED) (("" (EXPAND "^") (("" (LIFT-IF) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE-REPLACE "x!1 = 0") (("1" (EXPAND "expt") (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (USE "expt_pos_aux") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "x!1 = 0") (("1" (EXPAND "expt") (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (USE "expt_pos_aux") (("1" (LEMMA "quotient_pos_gt") (("1" (INST -1 "expt(x!1, -i!1)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|posreal_exp| "" (SKOLEM-TYPEPRED) (("" (EXPAND "^") (("" (LIFT-IF) (("" (PROP) (("1" (USE "expt_pos_aux") NIL NIL) ("2" (USE "expt_pos_aux") (("1" (LEMMA "quotient_pos_gt") (("1" (INST -1 "expt(x!1, -i!1)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|nzreal_exp| "" (SKOSIMP*) (("" (EXPAND "^") (("" (LIFT-IF) (("" (PROP) (("1" (LEMMA "nzreal_expt") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "nzreal_expt") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|rat_exp| "" (SKOLEM-TYPEPRED) (("" (EXPAND "^") (("" (PROPAX) NIL NIL)) NIL)) NIL) (|nnrat_exp| "" (SUBTYPE-TCC) NIL NIL) (|posrat_exp_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|posrat_exp| "" (SUBTYPE-TCC) NIL NIL) (|int_exp_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|int_exp| "" (SUBTYPE-TCC) NIL NIL) (|nat_exp_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|nat_exp| "" (SUBTYPE-TCC) NIL NIL) (|posint_exp_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|posint_exp| "" (SUBTYPE-TCC) NIL NIL) (|expt_x0_aux| "" (TCC :DEFS !) NIL NIL) (|expt_x1_aux| "" (TCC :DEFS !) NIL NIL) (|expt_1n_aux| "" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|increasing_expt_aux| "" (INDUCT "m") (("1" (SKOSIMP*) (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (LEMMA "both_sides_times_pos_gt1") (("1" (INST -1 "gt1x!1" "gt1x!1" "1") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) (("2" (EXPAND "expt" 1) (("2" (LEMMA "div_mult_pos_gt1") (("2" (INST -1 "gt1x!1" "expt(gt1x!1, j!1 + 2)" "gt1x!1") (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|decreasing_expt_aux| "" (INDUCT "m") (("1" (SKOSIMP) (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (LEMMA "div_mult_pos_lt2") (("1" (INST -1 "lt1x!1" "lt1x!1" "lt1x!1") (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) (("2" (EXPAND "expt" +) (("2" (LEMMA "div_mult_pos_gt2") (("2" (INST -1 "lt1x!1" "expt(lt1x!1, 2 + j!1)" "lt1x!1") (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|expt_1_aux| "" (INDUCT "n") (("1" (SKOSIMP*) (("1" (PROP) (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (INST -1 "px!1") (("2" (EXPAND "expt" +) (("2" (GROUND) (("2" (CASE "j!1 = 0") (("1" (REPLACE -1) (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (ASSERT) (("1" (REWRITE "sqrt_1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "px!1 > 1") (("1" (LEMMA "increasing_expt_aux") (("1" (INST -1 "px!1" "j!1-1") (("1" (ASSERT) (("1" (LEMMA "eq1_gt") (("1" (INST -1 "px!1" "expt(px!1, 1 + j!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "decreasing_expt_aux") (("2" (INST -1 "px!1" "j!1-1") (("1" (LEMMA "eq1_gt") (("1" (INST -1 "1/px!1" "1/expt(px!1, 1 + j!1)") (("1" (ASSERT) (("1" (SPLIT) (("1" (REWRITE "div_mult_pos_lt1") NIL NIL) ("2" (ASSERT) (("2" (REWRITE "div_mult_pos_gt2") NIL NIL)) NIL) ("3" (ASSERT) (("3" (REWRITE "div_times") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|expt_plus_aux| "" (INDUCT "n") (("1" (SKOSIMP*) (("1" (EXPAND "expt" 1 3) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" 1 3) (("2" (EXPAND "expt" 1 1) (("2" (INST -1 "m!1" "n0x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|expt_minus_aux_TCC1| "" (TCC :DEFS !) NIL NIL) (|expt_minus_aux| "" (INDUCT "m") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (CASE "j!1 + 1 = n!1") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "expt" 2 1) (("2" (EXPAND "expt" 2 2) (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) (("2" (REPLACE -1) (("2" (REWRITE "times_div1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL) (|expt_times_aux| "" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" 1 2) (("2" (EXPAND "expt" 1 1) (("2" (LIFT-IF) (("2" (INST -1 "m!1" "n0x!1") (("2" (REPLACE -1 :DIR RL) (("2" (PROP) (("1" (ASSERT) (("1" (CASE "m!1 = 0") (("1" (REPLACE -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "j!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "posreal_mult_closed") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (CASE "m!1 = 0") (("1" (GRIND) NIL NIL) ("2" (CASE "j!1 = 0") (("1" (REPLACE -1) (("1" (EXPAND "expt" 3 3) (("1" (EXPAND "expt" 3 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "expt_plus_aux") (("2" (INST -1 "m!1" "m!1 * j!1" "n0x!1") (("2" (REPLACE -1 :DIR RL) (("2" (EXPAND "expt" 3 2) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (ASSERT) (("2" (PROP) (("2" (LEMMA "zero_times3") (("2" (INST -1 "m!1" "j!1 + 1") (("2" (REPLACE -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|expt_divide_aux| "" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" 1 2) (("2" (INST?) (("2" (REPLACE -1 :DIR RL) (("2" (CASE "expt(n0x!1, j!1 * m!1 + m!1) = expt(n0x!1, m!1) * expt(n0x!1, m!1 * j!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (REWRITE "expt_plus_aux") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt1_aux| "" (INDUCT "m") (("1" (SKOSIMP) (("1" (EXPAND "expt") (("1" (EXPAND "expt" 1 1) (("1" (GROUND) (("1" (CASE "px!1 > 1") (("1" (LEMMA "increasing_expt_aux") (("1" (INST -1 "px!1" "n!1-1") (("1" (EXPAND "expt" -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "decreasing_expt_aux") (("2" (INST -1 "px!1" "n!1-1") (("1" (EXPAND "expt" -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "expt") (("2" (PROPAX) NIL NIL)) NIL) ("3" (REPLACE -1) (("3" (REWRITE "expt_1n_aux") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (EXPAND "expt" 1 1) (("2" (EXPAND "expt" 1 2) (("2" (CASE "n!1 = 0") (("1" (REPLACE -1) (("1" (GROUND) (("1" (EXPAND "expt" -1 2) (("1" (CASE "px!1 >1") (("1" (LEMMA "increasing_expt_aux") (("1" (INST -1 "px!1" "j!1") (("1" (EXPAND "expt" -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "decreasing_expt_aux") (("2" (INST -1 "px!1" "j!1") (("1" (EXPAND "expt" -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (REWRITE "expt_1n_aux") (("2" (REWRITE "expt_1n_aux") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (INST -2 "n!1-1" "px!1") (("1" (ASSERT) (("1" (REWRITE "both_sides_times2") NIL NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (REWRITE "expt_1n_aux") (("2" (REWRITE "expt_1n_aux") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt2_aux| "" (INDUCT "pm") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKOSIMP) (("3" (SKOSIMP) (("3" (SPLIT) (("1" (EXPAND "expt" +) (("1" (INST -1 "px!1" "py!1") (("1" (GROUND) (("1" (HIDE 1) (("1" (HIDE -2) (("1" (CASE "FORALL (m:nat), (px, py: posreal): px > py IMPLIES expt(px,m+1) > expt(py, m+1)") (("1" (CASE "px!1>py!1") (("1" (INST -2 "j!1-1" "px!1" "py!1") (("1" (ASSERT) (("1" (LEMMA "gt_times_gt_pos1") (("1" (INST -1 "expt(py!1, j!1)" "py!1" "px!1" "expt(px!1, j!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "expt" +) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "j!1-1" "py!1" "px!1") (("1" (ASSERT) (("1" (LEMMA "gt_times_gt_pos1") (("1" (INST -1 "expt(px!1, j!1)" "px!1" "py!1" "expt(py!1, j!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2 3) (("2" (INDUCT "m") (("1" (SKOSIMP*) (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "expt" +) (("2" (REWRITE "gt_times_gt_pos1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt_pos_lt_aux| "" (INDUCT "m") (("1" (SKOSIMP) (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -1 "px!1" "py!1") (("2" (EXPAND "expt" 1) (("2" (GROUND) (("1" (REWRITE "lt_times_lt_pos1") NIL NIL) ("2" (LEMMA "ge_times_ge_pos") (("2" (INST -1 "expt(py!1, 1 + j!1)" "py!1" "px!1" "expt(px!1, 1 + j!1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt_gt1_lt_aux| "" (INDUCT "m") (("1" (SKOSIMP*) (("1" (EXPAND "expt") (("1" (EXPAND "expt" 1 1) (("1" (GROUND) (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "increasing_expt_aux") (("2" (INST -1 "gt1x!1" "n!1 - 1") (("2" (EXPAND "expt" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (GROUND) (("1" (CASE "n!1 = 0") (("1" (REPLACE -1) (("1" (EXPAND "expt" -2 2) (("1" (LEMMA "increasing_expt_aux") (("1" (INST -1 "gt1x!1" "j!1") (("1" (EXPAND "expt" -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "gt1x!1" "n!1-1") (("1" (GROUND) (("1" (REWRITE "both_sides_times_pos_lt2") NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -2 "gt1x!1" "n!1-1") (("2" (ASSERT) (("2" (REWRITE "both_sides_times_pos_lt2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt_lt1_lt_aux| "" (INDUCT "m") (("1" (SKOSIMP*) (("1" (EXPAND "expt" 1 1) (("1" (EXPAND "expt" -1 1) (("1" (GROUND) (("1" (LEMMA "decreasing_expt_aux") (("1" (INST -1 "lt1x!1" "n!1-1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (INST -1 "lt1x!1" "n!1 - 1") (("1" (GROUND) (("1" (REWRITE "both_sides_times_pos_lt2") NIL NIL) ("2" (REWRITE "both_sides_times_pos_lt2") NIL NIL)) NIL) ("2" (GROUND) (("2" (EXPAND "expt" 1 2) (("2" (LEMMA "decreasing_expt_aux") (("2" (INST -1 "lt1x!1" "j!1") (("2" (EXPAND "expt" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt_pos_le_aux| "" (SKOSIMP) (("" (GROUND) (("1" (LEMMA "both_sides_expt_pos_lt_aux") (("1" (INST -1 "m!1" "py!1" "px!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "both_sides_expt_pos_lt_aux") (("2" (INST -1 "m!1" "py!1" "px!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt_gt1_le_aux| "" (SKOSIMP) (("" (LEMMA "both_sides_expt_gt1_lt_aux") (("" (INST -1 "gt1x!1" "n!1" "m!1") (("" (ASSERT) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt_lt1_le_aux| "" (LEMMA "both_sides_expt_lt1_lt_aux") (("" (SKOSIMP) (("" (INST -1 "lt1x!1" "n!1" "m!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_expt_pos_gt_aux| "" (LEMMA "both_sides_expt_pos_lt_aux") (("" (SKOSIMP) (("" (INST -1 "m!1" "py!1" "px!1") (("" (ASSERT) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt_gt1_gt_aux| "" (LEMMA "both_sides_expt_gt1_lt_aux") (("" (SKOSIMP) (("" (INST -1 "gt1x!1" "n!1" "m!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_expt_lt1_gt_aux| "" (LEMMA "both_sides_expt_lt1_lt_aux") (("" (SKOSIMP) (("" (INST -1 "lt1x!1" "n!1" "m!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_expt_pos_ge_aux| "" (LEMMA "both_sides_expt_pos_le_aux") (("" (SKOSIMP) (("" (INST -1 "m!1" "py!1" "px!1") (("" (ASSERT) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt_gt1_ge_aux| "" (LEMMA "both_sides_expt_gt1_le_aux") (("" (SKOSIMP) (("" (INST -1 "gt1x!1" "n!1" "m!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_expt_lt1_ge_aux| "" (LEMMA "both_sides_expt_lt1_le_aux") (("" (SKOSIMP) (("" (INST -1 "lt1x!1" "n!1" "m!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) (|expt_of_mult| "" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|expt_of_div| "" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|expt_of_inv| "" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|expt_of_abs| "" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (INST?) (("2" (ASSERT) (("2" (REPLACE -1 :HIDE? T) (("2" (GRIND) (("1" (LEMMA "negreal_times_negreal_is_posreal") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "nnreal_times_nnreal_is_nnreal") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|abs_of_expt_inv| "" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "div_times") (("2" (INST -1 "abs(n0x!1)" "expt(abs(n0x!1), j!1)" "1" "1") (("2" (REPLACE -1 :DIR RL) (("2" (REPLACE -2 :DIR RL) (("2" (HIDE -1 -2) (("2" (GRIND) (("1" (LEMMA "quotient_neg_lt") (("1" (INST-CP -1 "n0x!1 * expt(n0x!1, j!1)") (("1" (INST -1 "expt(n0x!1, j!1)") (("1" (ASSERT) (("1" (HIDE -3 -5) (("1" (LEMMA "negreal_times_negreal_is_posreal") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "quotient_neg_lt") (("2" (INST-CP -1 "expt(n0x!1, j!1)") (("2" (INST -1 "n0x!1 * expt(n0x!1, j!1)") (("2" (ASSERT) (("2" (HIDE -2 3) (("2" (LEMMA "nnreal_times_nnreal_is_nnreal") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "quotient_neg_lt") (("3" (INST-CP -1 "expt(n0x!1, j!1)") (("3" (INST -1 "n0x!1 * expt(n0x!1, j!1)") (("3" (ASSERT) (("3" (HIDE 3 4) (("3" (LEMMA "posreal_mult_closed") (("3" (INST -1 "-n0x!1" "expt(n0x!1, j!1)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "quotient_neg_lt") (("4" (INST-CP -1 "expt(n0x!1, j!1)") (("4" (INST -1 "n0x!1 * expt(n0x!1, j!1)") (("4" (ASSERT) (("4" (HIDE -2 2) (("4" (LEMMA "posreal_mult_closed") (("4" (INST -1 "n0x!1" "-expt(n0x!1, j!1)") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|expt_x0_TCC1| "" (GRIND) NIL NIL) (|expt_x0| "" (GRIND) NIL NIL) (|expt_x1_TCC1| "" (TCC :DEFS !) NIL NIL) (|expt_x1| "" (GRIND) NIL NIL) (|expt_1i| "" (SKOSIMP*) (("" (EXPAND "^") (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "expt_1n_aux") NIL NIL) ("2" (REWRITE "expt_1n_aux") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|expt_plus_TCC1| "" (TCC :DEFS !) NIL NIL) (|expt_plus| "" (SKOSIMP*) (("" (EXPAND "^") (("" (LIFT-IF) (("" (LIFT-IF) (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "expt_plus_aux") NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "expt_minus_aux") (("3" (INST -1 "j!1" "-i!1" "n0x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (LEMMA "cross_mult") (("4" (INST -1 "expt(n0x!1, -(i!1 + j!1))" "expt(n0x!1, -i!1)" "1" "expt(n0x!1, j!1)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (REPLACE 2) (("1" (LEMMA "expt_plus_aux") (("1" (INST -1 "j!1" "-(i!1 + j!1)" "n0x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (LEMMA "expt_minus_aux") (("5" (INST -1 "i!1" "-j!1" "n0x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (ASSERT) (("6" (LEMMA "cross_mult") (("6" (INST -1 "expt(n0x!1, -(i!1 + j!1))" "expt(n0x!1, -j!1)" "1" "expt(n0x!1, i!1)") (("6" (FLATTEN) (("6" (HIDE -1) (("6" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (LEMMA "expt_plus_aux") (("2" (INST -1 "i!1" "-(i!1 + j!1)" "n0x!1") (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (ASSERT) NIL NIL) ("8" (CASE "expt(n0x!1, -(i!1 + j!1)) = expt(n0x!1, -i!1) * expt(n0x!1, -j!1)") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (LEMMA "div_times") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "expt_plus_aux") (("2" (INST -1 "-i!1" "-j!1" "n0x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|expt_times_TCC1| "" (TCC :DEFS !) NIL NIL) (|expt_times| "" (SKOSIMP*) (("" (EXPAND "^") (("" (LIFT-IF) (("" (LIFT-IF) (("" (PROP) (("1" (REWRITE "expt_times_aux") NIL NIL) ("2" (ASSERT) (("2" (REWRITE "pos_times_ge") NIL NIL)) NIL) ("3" (REWRITE "pos_times_ge") (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (LEMMA "expt_divide_aux") (("4" (INST -1 "-i!1" "j!1" "n0x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (LEMMA "pos_times_ge") (("5" (INST?) (("5" (ASSERT) (("5" (GRIND) (("5" (REWRITE "expt_1n_aux") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (CASE "expt(n0x!1, -(i!1 * j!1)) = expt(expt(n0x!1, i!1), -j!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (LEMMA "expt_times_aux") (("2" (INST -1 "i!1" "-j!1" "n0x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (PROPAX) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL) ("7" (LEMMA "expt_divide_aux") (("7" (INST -1 "-i!1" "-j!1" "n0x!1") (("1" (REPLACE -1 :DIR RL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("8" (LEMMA "pos_times_ge") (("8" (INST?) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|expt_inverse_TCC1| "" (GRIND) NIL NIL) (|expt_inverse| "" (SKOSIMP*) (("" (EXPAND "^") (("" (LIFT-IF) (("" (LIFT-IF) (("" (PROP) (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|expt_div_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|expt_div| "" (SKOSIMP) (("" (LEMMA "expt_inverse") (("" (INST -1 "j!1" "n0x!1") (("" (LEMMA "expt_plus") (("" (INST -1 "i!1" "-j!1" "n0x!1") (("" (ASSERT) (("" (REPLACE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt1_TCC1| "" (TCC :DEFS EXPLICIT) NIL NIL) (|both_sides_expt1| "" (LEMMA "both_sides_expt1_aux") (("" (SKOSIMP) (("" (EXPAND "^") (("" (LIFT-IF) (("" (SPLIT) (("1" (FLATTEN) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (INST -3 "n0i!1 - 1" "n0j!1 - 1" "px!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("1" (LEMMA "div_cancel3") (("1" (INST -1 "expt(px!1, -n0j!1)" "1" "expt(px!1, n0i!1)") (("1" (PROP) (("1" (HIDE -1 -3) (("1" (REWRITE "expt_plus_aux" :DIR RL) (("1" (LEMMA "expt_1_aux") (("1" (INST -1 "-n0j!1 + n0i!1 - 1" "px!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (REWRITE "expt_1n_aux") (("2" (REWRITE "expt_1n_aux") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF) (("2" (PROP) (("1" (LEMMA "div_cancel3") (("1" (INST -1 "expt(px!1, -n0i!1)" "1" "expt(px!1, n0j!1)") (("1" (PROP) (("1" (HIDE -1 -3) (("1" (REWRITE "expt_plus_aux" :DIR RL) (("1" (LEMMA "expt_1_aux") (("1" (INST -1 "n0j!1 - n0i!1 - 1" "px!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "expt" 1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (REPLACE -1) (("3" (REWRITE "expt_1n_aux") (("3" (REWRITE "expt_1n_aux") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (REWRITE "cross_mult") (("4" (INST -2 "-n0j!1-1" "-n0i!1-1" "px!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (REPLACE -1) (("5" (PROPAX) NIL NIL)) NIL) ("6" (REPLACE -1) (("6" (REWRITE "expt_1n_aux") (("6" (REWRITE "expt_1n_aux") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt2| "" (SKOSIMP) (("" (EXPAND "^") (("" (LEMMA "both_sides_expt2_aux") (("" (LIFT-IF) (("" (PROP) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (INST -2 "-n0i!1" "px!1" "py!1") (("1" (ASSERT) (("1" (REWRITE "cross_mult") NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("4" (INST -2 "-n0i!1" "px!1" "py!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|pos_expt_gt_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|pos_expt_gt| "" (INDUCT "n") (("1" (SKOSIMP) (("1" (REWRITE "expt_x0") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_x1") (("2" (INST?) (("2" (CASE "FORALL (a, b, c, d: nat): a < c & b < d => a + b < c * d") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (INDUCT "c") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (CASE "a!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (INST -1 "a!1-1" "b!2" "d!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|expt_ge1| "" (INDUCT-AND-REWRITE "n" 1 "expt_plus" "expt_x0" "expt_x1") (("" (LEMMA "ge_times_ge_pos") (("" (INST?) (("" (INST - "1" "1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt_pos_lt_TCC1| "" (TCC :DEFS EXPLICIT) NIL NIL) (|both_sides_expt_pos_lt| "" (SKOSIMP) (("" (EXPAND "^") (("" (LEMMA "both_sides_expt_pos_lt_aux") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt_gt1_lt_TCC1| "" (TCC :DEFS EXPLICIT) NIL NIL) (|both_sides_expt_gt1_lt| "" (SKOSIMP*) (("" (GROUND) (("1" (CASE "j!1<=i!1") (("1" (CASE "gt1x!1 ^ j!1 <= gt1x!1 ^ i!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -2 2) (("2" (CASE "forall (n:nat): gt1x!1^j!1<=gt1x!1^(j!1+n)") (("1" (INST - "i!1-j!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (INDUCT "n") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus") (("2" (INST -1 "1" "j!1 + j!2" "gt1x!1") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "expt_x1") (("2" (LEMMA "le_times_le_pos") (("2" (INST - "1" "gt1x!1 ^ j!1" "gt1x!1 ^ (j!1 + j!2)" "gt1x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (CASE "forall (n:nat): gt1x!1^i!1<gt1x!1^(1+i!1+n)") (("1" (INST - "j!1-(i!1+1)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (INDUCT "n") (("1" (ASSERT) (("1" (REWRITE "expt_plus") (("1" (REWRITE "expt_x1") (("1" (LEMMA "both_sides_times_pos_lt1") (("1" (INST - "gt1x!1 ^ i!1" "1" "gt1x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus") (("2" (INST - "1" "(1 + i!1 + j!2)" "gt1x!1") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "expt_x1") (("2" (LEMMA "lt_times_lt_pos1") (("2" (INST - "gt1x!1^i!1" "1" "gt1x!1^(1+i!1+j!2)" "gt1x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt_lt1_lt_TCC1| "" (TCC :DEFS EXPLICIT) NIL NIL) (|both_sides_expt_lt1_lt| "" (SKOSIMP*) (("" (GROUND) (("1" (CASE "FORALL (n:nat): lt1x!1^(i!1+n) <= lt1x!1^i!1") (("1" (INST -1 "j!1-i!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (INDUCT "n") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus") (("2" (INST - "1" "i!1 + j!2" "lt1x!1") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "expt_x1") (("2" (LEMMA "le_times_le_pos") (("2" (INST - "lt1x!1" "lt1x!1^(i!1+j!2)" "lt1x!1^i!1" "1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (n:nat): lt1x!1^(j!1+n+1) < lt1x!1^j!1") (("1" (INST -1 "i!1 -j!1 -1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (INDUCT "n") (("1" (ASSERT) (("1" (REWRITE "expt_plus") (("1" (REWRITE "expt_x1") (("1" (LEMMA "both_sides_times_pos_lt1") (("1" (INST -1 "lt1x!1 ^ j!1" "lt1x!1" "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus") (("2" (INST -1 "1" "1 + j!1 + j!2" "lt1x!1") (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (REWRITE "expt_x1") (("2" (LEMMA "lt_times_lt_pos1") (("2" (INST -1 "lt1x!1 ^ (j!1 + j!2 + 1)" "lt1x!1" "lt1x!1 ^ j!1" "1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt_pos_le| "" (SKOSIMP) (("" (EXPAND "^") (("" (LEMMA "both_sides_expt_pos_le_aux") (("" (INST?) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt_gt1_le| "" (SKOSIMP*) (("" (CASE "i!1 = j!1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "both_sides_expt_gt1_lt") (("2" (INST -1 "gt1x!1" "j!1" "i!1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt_lt1_le| "" (SKOSIMP*) (("" (LEMMA "both_sides_expt_lt1_lt") (("" (INST -1 "j!1" "i!1" "lt1x!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_expt_pos_gt| "" (SKOSIMP) (("" (EXPAND "^") (("" (LEMMA "both_sides_expt_pos_gt_aux") (("" (INST?) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt_gt1_gt| "" (SKOSIMP*) (("" (LEMMA "both_sides_expt_gt1_lt") (("" (INST -1 "gt1x!1" "j!1" "i!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_expt_lt1_gt| "" (SKOSIMP*) (("" (LEMMA "both_sides_expt_lt1_lt") (("" (INST -1 "j!1" "i!1" "lt1x!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_expt_pos_ge| "" (SKOSIMP) (("" (EXPAND "^") (("" (LEMMA "both_sides_expt_pos_ge_aux") (("" (INST?) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|both_sides_expt_gt1_ge| "" (SKOSIMP*) (("" (LEMMA "both_sides_expt_gt1_le") (("" (INST -1 "gt1x!1" "j!1" "i!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) (|both_sides_expt_lt1_ge| "" (SKOSIMP*) (("" (LEMMA "both_sides_expt_lt1_le") (("" (INST -1 "j!1" "i!1" "lt1x!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) (|expt_gt1_pos_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|expt_gt1_pos| "" (INDUCT "pm") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKOSIMP*) (("3" (SPLIT) (("1" (REWRITE "expt_plus") (("1" (REWRITE "expt_x1") (("1" (INST?) (("1" (LEMMA "both_sides_times_pos_ge1") (("1" (INST -1 "gt1x!1" "gt1x!1 ^ j!1" "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|expt_gt1_neg_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|expt_gt1_neg| "" (SKOSIMP) (("" (CASE "gt1x!1^(-pm!1) * gt1x!1^pm!1 < gt1x!1^pm!1") (("1" (LEMMA "both_sides_times_pos_lt1") (("1" (INST -1 "gt1x!1 ^ pm!1" "gt1x!1 ^ (-pm!1)" "1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REWRITE "expt_plus" :DIR RL) (("2" (HIDE 2) (("2" (LEMMA "expt_gt1_pos") (("2" (INST -1 "gt1x!1" "pm!1") (("2" (ASSERT) (("2" (EXPAND "^" 1 1) (("2" (EXPAND "expt") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|expt_gt1_nonpos_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|expt_gt1_nonpos| "" (SKOSIMP) (("" (CASE "m!1 = 0") (("1" (GRIND) NIL NIL) ("2" (LEMMA "expt_gt1_neg") (("2" (INST -1 "gt1x!1" "m!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|mult_expt_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|mult_expt| "" (SKOSIMP) (("" (EXPAND "^") (("" (LIFT-IF) (("" (LEMMA "expt_of_mult") (("" (PROP) (("1" (INST?) NIL NIL) ("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|div_expt_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|div_expt| "" (SKOSIMP) (("" (EXPAND "^") (("" (LEMMA "expt_of_div") (("" (LIFT-IF) (("" (PROP) (("1" (INST?) NIL NIL) ("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|inv_expt_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|inv_expt| "" (SKOSIMP) (("" (EXPAND "^") (("" (LIFT-IF) (("" (LEMMA "expt_of_inv") (("" (PROP) (("1" (INST?) NIL NIL) ("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|abs_expt_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|abs_expt| "" (SKOSIMP) (("" (EXPAND "^") (("" (LIFT-IF) (("" (LEMMA "expt_of_abs") (("" (PROP) (("1" (INSTANTIATE -2 ("i!1" "n0x!1")) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (INST?) (("1" (LEMMA "abs_div") (("1" (INST -1 "expt(n0x!1, -i!1)" "1") (("1" (REPLACE -1) (("1" (EXPAND "abs" 2 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|expt_lt1_bound1| "" (INDUCT-AND-SIMPLIFY "n") (("" (USE "both_sides_times_pos_le2" ("pz" "lt1x!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL) (|expt_lt1_bound2| "" (SKOLEM!) (("" (USE "expt_lt1_bound1") (("" (USE "expt_1_aux") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|expt_gt1_bound1| "" (SKOLEM 1 ("a!1" _)) (("" (INDUCT-AND-SIMPLIFY "n") (("" (LEMMA "both_sides_times_pos_le2") (("" (INST -1 "expt(a!1, j!1)" "1" "a!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|expt_gt1_bound2| "" (SKOLEM!) (("" (USE "expt_gt1_bound1" ("n" "pn!1 - 1")) (("" (EXPAND "expt" +) (("" (LEMMA "both_sides_times_pos_le1") (("" (ASSERT) (("" (INST -1 "gt1x!1" "1" "expt(gt1x!1, pn!1-1)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|large_expt| "" (SKOSIMP) (("" (ASSERT) (("" (AUTO-REWRITE-THEORY "sets[real]") (("" (LEMMA "real_complete" ("S" "{x:real | EXISTS (n : nat) : x = expt(px!1, n)}")) (("1" (HIDE 1) (("1" (SPLIT -1) (("1" (SKOSIMP*) (("1" (EXPAND "least_upper_bound?") (("1" (FLATTEN) (("1" (INST -2 "y!1/px!1") (("1" (CASE "y!1 > 0") (("1" (GROUND) (("1" (LEMMA "both_sides_div_pos_le2" ("px" "1" "py" "px!1" "pz" "y!1")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "upper_bound?") (("2" (SKOSIMP*) (("2" (INST - "s!1*px!1") (("1" (REWRITE "div_mult_pos_le2") NIL NIL) ("2" (TYPEPRED "s!1") (("2" (SKOSIMP*) (("2" (INST 1 "n!1+1") (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DELETE -2) (("2" (EXPAND "upper_bound?") (("2" (INST - "1") (("1" (ASSERT) NIL NIL) ("2" (INST 1 "0") (("2" (EXPAND "expt") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL 1) (("2" (SKOLEM!) (("2" (INST 2 "py!1") (("2" (EXPAND "upper_bound?") (("2" (SKOSIMP*) (("2" (TYPEPRED "s!1") (("2" (SKOSIMP*) (("2" (INST 1 "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -1 "1") (("2" (INST 1 "0") (("2" (EXPAND "expt") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|small_expt| "" (SKOSIMP*) (("" (LEMMA "large_expt" ("px" "1/px!1")) (("" (REWRITE "div_mult_pos_lt2") (("" (ASSERT) (("" (INST -1 "1/py!1") (("" (SKOLEM!) (("" (INST 1 "n!1") (("" (REWRITE "expt_of_inv") (("" (REWRITE "both_sides_div_pos_lt2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|exponent_adjust_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|exponent_adjust_TCC2| "" (SUBTYPE-TCC) NIL NIL) (|exponent_adjust_TCC3| "" (SUBTYPE-TCC) NIL NIL) (|exponent_adjust| "" (SKOSIMP*) (("" (LEMMA "both_sides_expt_gt1_lt") (("" (INST - "b!1" "i!1 - pm!1" "i!1") (("" (GROUND) (("" (REWRITE "expt_plus") (("" (REWRITE "expt_x1") (("" (LEMMA "both_sides_times_pos_le1") (("" (INST - "b!1 ^ i!1" "2" "b!1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|exp_of_exists| "" (SKOSIMP*) (("" (LEMMA "lub_int") (("" (CASE "py!1<1") (("1" (INST - "{i|b!1^i<=py!1}" "-1") (("1" (PROP) (("1" (EXPAND "least_upper_bound?") (("1" (SKOSIMP*) (("1" (HIDE -2) (("1" (INST + "j!1") (("1" (ASSERT) (("1" (EXPAND "upper_bound?") (("1" (INST - "j!1+1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "extend") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "upper_bound?") (("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "extend") (("2" (CASE "s!1>=0") (("1" (LEMMA "expt_ge1") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROP) (("2" (ASSERT) (("2" (CASE "EXISTS (x:int): 0 > x & x > -1") (("1" (SKOSIMP) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST 1 "s!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "nonempty_exists") (("2" (LEMMA "axiom_of_archimedes") (("2" (INST - "1/py!1") (("2" (SKOSIMP*) (("2" (INST + "-i!1") (("2" (REWRITE "expt_inverse") (("2" (REWRITE "div_mult_pos_le1") (("2" (LEMMA "pos_expt_gt") (("2" (INST?) (("1" (REWRITE "div_mult_pos_lt1") (("1" (LEMMA "both_sides_times_pos_lt2") (("1" (INST - "py!1" "i!1" "b!1^i!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "axiom_of_archimedes") (("2" (INST?) (("2" (SKOSIMP*) (("2" (INST - "{i|b!1^i<=py!1}" "i!1") (("1" (PROP) (("1" (EXPAND "least_upper_bound?") (("1" (SKOSIMP*) (("1" (HIDE -2) (("1" (INST + "j!1") (("1" (ASSERT) (("1" (EXPAND "upper_bound?") (("1" (INST - "j!1+1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "extend") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "upper_bound?") (("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "extend") (("2" (PROP) (("2" (LEMMA "pos_expt_gt") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "nonempty_exists") (("2" (INST + "0") (("2" (REWRITE "expt_x0") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|euclidean_division| (|mod_TCC1| "" (SKOLEM-TYPEPRED) (("" (INST 1 "0") NIL NIL)) NIL) (|euclid_nat| "" (SKOLEM 1 (_ "b!1")) (("" (INDUCT "a") (("1" (INST + "0" "0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE "r!1 = b!1-1") (("1" (INST + "q!1+1" "0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST + "q!1" "r!1+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|euclid_int| "" (SKOLEM!) (("" (CASE "n!1 >= 0") (("1" (USE "euclid_nat" ("a" "n!1")) (("1" (SKOLEM!) (("1" (INST?) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (USE "euclid_nat" ("a" "- n!1")) (("2" (SKOLEM!) (("2" (CASE "r!1 = 0") (("1" (INST + "-q!1" "0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST + "- q!1 - 1" "b!1 - r!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|unique_quotient| "" (SKOSIMP) (("" (ASSERT) (("" (CASE "q1!1 > q2!1") (("1" (CASE "b!1 * (q1!1 - q2!1) = r2!1 - r1!1") (("1" (CASE "b!1 * (q1!1 - q2!1) >= b!1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "both_sides_times_pos_ge2") (("2" (INST -1 "b!1" "q1!1 - q2!1" "1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (CASE "b!1 * (q2!1 - q1!1) = r1!1 - r2!1") (("1" (CASE "b!1 * (q2!1 - q1!1) >= b!1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "both_sides_times_pos_ge2") (("2" (INST -1 "b!1" "q2!1 - q1!1" "1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|unique_remainder| "" (LEMMA "unique_quotient") (("" (SKOSIMP) (("" (INST?) (("" (ASSERT) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|unique_division| "" (LEMMA "unique_quotient") (("" (LEMMA "unique_remainder") (("" (SKOSIMP) (("" (INST?) (("" (ASSERT) (("" (INST -2 "b!1" "q1!1" "q2!1" "r1!1" "r2!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|divides| (|mult_divides1| "" (SUBTYPE-TCC) NIL NIL) (|mult_divides2| "" (SKOSIMP) (("" (GRIND :IF-MATCH NIL) (("" (INST 1 "n!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|divides_sum| "" (SKOSIMP) (("" (EXPAND "divides") (("" (SKOSIMP) (("" (SKOSIMP) (("" (INST 1 "x!2 + x!3") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|divides_diff| "" (SKOSIMP) (("" (EXPAND "divides") (("" (SKOSIMP*) (("" (INST 1 "x!2 - x!3") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|divides_opposite| "" (SKOSIMP*) (("" (PROP) (("1" (EXPAND "divides") (("1" (SKOSIMP*) (("1" (INST 1 "-x!2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "divides") (("2" (SKOSIMP*) (("2" (INST 1 "-x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|opposite_divides| "" (SKOSIMP*) (("" (EXPAND "divides") (("" (PROP) (("1" (SKOSIMP*) (("1" (INST 1 "-x!2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST 1 "-x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|divides_prod1| "" (SKOSIMP*) (("" (EXPAND "divides") (("" (SKOSIMP*) (("" (INST 1 "x!2 * m!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|divides_prod2| "" (SKOSIMP*) (("" (EXPAND "divides") (("" (SKOSIMP*) (("" (INST 1 "x!2 * m!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|divides_prod_elim1| "" (SKOSIMP*) (("" (EXPAND "divides") (("" (PROP) (("1" (SKOSIMP*) (("1" (INST 1 "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST 1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|divides_prod_elim2| "" (SKOSIMP*) (("" (LEMMA "divides_prod_elim1") (("" (INST -1 "m!1" "n!1" "nz!1") (("" (REPLACE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|divides_reflexive| "" (SKOSIMP*) (("" (EXPAND "divides") (("" (INST 1 "1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|divides_transitive| "" (SKOSIMP*) (("" (EXPAND "divides") (("" (SKOSIMP*) (("" (INST 1 "x!1 * x!2") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|product_one| "" (SKOSIMP) (("" (SPLIT) (("1" (FLATTEN) (("1" (LEMMA "eq1_gt") (("1" (LEMMA "pos_times_lt") (("1" (INST -1 "x!1" "y!1") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (CASE "x!1 > 1") (("1" (INST -4 "x!1" "y!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "y!1 > 1") (("1" (INST -4 "y!1" "x!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "x!1 < -1") (("1" (INST -4 "-x!1" "-y!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "y!1 < -1") (("1" (INST -4 "-y!1" "-x!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) (|mutual_divisors| "" (EXPAND "divides") (("" (SKOSIMP*) (("" (CASE "n!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (LEMMA "both_sides_times1" ("n0z" "n!1" "x" "x!1 * x!2" "y" "1")) (("2" (GROUND) (("2" (REWRITE "product_one") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|mutual_divisors_nat| "" (SKOSIMP) (("" (FORWARD-CHAIN "mutual_divisors") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|one_divides| "" (GRIND) NIL NIL) (|divides_zero| "" (GRIND :IF-MATCH ALL) NIL NIL) (|zero_div_zero| "" (GRIND :IF-MATCH ALL) NIL NIL) (|divisors_of_one| "" (AUTO-REWRITE "one_divides" "opposite_divides") (("" (REDUCE) (("" (EXPAND "divides") (("" (SKOLEM!) (("" (USE "product_one") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|one_div_one| "" (SKOLEM!) (("" (REWRITE "divisors_of_one") NIL NIL)) NIL) (|divisor_smaller| "" (EXPAND "divides") (("" (SKOSIMP*) (("" (ASSERT) (("" (USE "pos_times_lt") (("" (GROUND) (("" (USE "both_sides_times_pos_le1" ("pz" "p!1" "x" "1" "y" "x!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|modulo_arithmetic| (|rem_TCC1| "" (LEMMA "euclid_int") (("" (INST 1 "lambda (b: posnat): (lambda (x: int): (epsilon! (r: mod(b)): (EXISTS (q: int): x = r + b * q)))") (("" (SKOLEM!) (("" (INST -1 "b!1" "x!1") (("" (SKOLEM!) (("" (USE "epsilon_ax[mod(b!1)]") (("" (PROP) (("" (HIDE 2) (("" (INST 1 "r!1") (("" (INST 1 "q!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|rem_def| "" (SKOLEM!) (("" (CASE "EXISTS q: x!1 = b!1 * q + rem(b!1)(x!1)") (("1" (GROUND) (("1" (SKOSIMP*) (("1" (USE "unique_remainder") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (DELETE 2) (("2" (TYPEPRED "rem(b!1)(x!1)") (("2" (SKOSIMP) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|rem_def2| "" (SKOLEM!) (("" (REWRITE "rem_def") (("" (EXPAND "divides") (("" (GROUND) (("1" (SKOLEM!) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOLEM!) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|rem_def3| "" (SKOLEM!) (("" (REWRITE "rem_def2") (("" (GROUND) (("1" (REWRITE "divides_opposite" :DIR RL) NIL NIL) ("2" (REWRITE "divides_opposite" :DIR RL) NIL NIL)) NIL)) NIL)) NIL) (|rem_mod| "" (AUTO-REWRITE "divides_zero") (("" (SKOLEM!) (("" (REWRITE "rem_def2") NIL NIL)) NIL)) NIL) (|rem_mod2| "" (SKOSIMP) (("" (ASSERT) (("" (REWRITE "rem_mod") NIL NIL)) NIL)) NIL) (|rem_zero| "" (AUTO-REWRITE "divides_zero" "rem_def2") (("" (SKOLEM!) (("" (ASSERT) NIL NIL)) NIL)) NIL) (|rem_self| "" (AUTO-REWRITE "divides_reflexive" "rem_def2") (("" (SKOLEM!) (("" (ASSERT) NIL NIL)) NIL)) NIL) (|rem_multiple1| "" (AUTO-REWRITE "divides_prod1" "divides_prod2" "divides_reflexive" "rem_def2") (("" (SKOLEM!) (("" (ASSERT) NIL NIL)) NIL)) NIL) (|rem_multiple2| "" (AUTO-REWRITE "divides_prod1" "divides_prod2" "divides_reflexive" "rem_def2") (("" (SKOLEM!) (("" (ASSERT) NIL NIL)) NIL)) NIL) (|rem_one| "" (SKOSIMP) (("" (REWRITE "rem_def") (("" (INST + "0") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|rem_minus_one| "" (SKOLEM!) (("" (REWRITE "rem_def") (("" (INST + "-1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|same_remainder| "" (SKOLEM!) (("" (NAME-REPLACE "r!1" "rem(b!1)(y!1)" :HIDE? NIL) (("" (REWRITE "rem_def2") (("" (REWRITE "rem_def2") (("" (GROUND) (("1" (USE "divides_diff" ("n" "x!1 - r!1" "m" "y!1 - r!1")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (USE "divides_sum" ("n" "x!1 - y!1" "m" "y!1 - r!1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|rem_rem| "" (SKOLEM!) (("" (REWRITE "same_remainder") (("" (NAME-REPLACE "r!1" "rem(b!1)(x!1)" :HIDE? NIL) (("" (REWRITE "rem_def3") NIL NIL)) NIL)) NIL)) NIL) (|rem_sum| "" (AUTO-REWRITE "same_remainder") (("" (SKOSIMP) (("" (ASSERT) (("" (USE "divides_sum" ("n" "x!1 - y!1" "m" "z!1 - t!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|rem_sum1| "" (SKOLEM!) (("" (REWRITE "same_remainder") (("" (REWRITE "rem_def3" :DIR RL) NIL NIL)) NIL)) NIL) (|rem_sum2| "" (SKOLEM!) (("" (USE "rem_sum1" ("x" "y!1" "y" "x!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL) (|rem_diff| "" (AUTO-REWRITE "same_remainder") (("" (SKOSIMP) (("" (ASSERT) (("" (USE "divides_diff" ("n" "x!1 - y!1" "m" "z!1 - t!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|rem_diff1| "" (SKOLEM!) (("" (REWRITE "same_remainder") (("" (REWRITE "rem_def3" :DIR RL) NIL NIL)) NIL)) NIL) (|rem_diff2| "" (SKOLEM!) (("" (REWRITE "same_remainder") (("" (REWRITE "rem_def2" :DIR RL) NIL NIL)) NIL)) NIL) (|rem_prod1| "" (SKOLEM!) (("" (REWRITE "same_remainder") (("" (USE "divides_prod1" ("n" "rem(b!1)(x!1) - x!1" "m" "y!1")) (("" (ASSERT) (("" (REWRITE "rem_def3" :DIR RL) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|rem_prod2| "" (SKOLEM!) (("" (USE "rem_prod1" ("x" "y!1" "y" "x!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL) (|rem_prod| "" (SKOSIMP) (("" (AUTO-REWRITE "rem_prod1" "rem_prod2") (("" (CASE "rem(b!1)(rem(b!1)(x!1) * rem(b!1)(z!1)) = rem(b!1)(y!1 * t!1)") (("1" (ASSERT) NIL NIL) ("2" (REPLACE*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|rem_expt| "" (SKOLEM 1 ("b!1" _ "x!1" "y!1")) (("" (INDUCT-AND-SIMPLIFY "n" :EXCLUDE "rem" :REWRITES ("rem_prod")) NIL NIL)) NIL) (|rem_expt1| "" (SKOLEM!) (("" (REWRITE "rem_expt") (("" (REWRITE "rem_rem") NIL NIL)) NIL)) NIL) (|rem_sum_elim1| "" (AUTO-REWRITE "same_remainder") (("" (SKOLEM!) (("" (ASSERT) NIL NIL)) NIL)) NIL) (|rem_sum_elim2| "" (AUTO-REWRITE "same_remainder") (("" (SKOLEM!) (("" (ASSERT) NIL NIL)) NIL)) NIL) (|rem_diff_elim1| "" (AUTO-REWRITE "same_remainder") (("" (SKOLEM!) (("" (ASSERT) (("" (PROP) (("1" (REWRITE "divides_opposite" :DIR RL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "divides_opposite" :DIR RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|rem_diff_elim2| "" (AUTO-REWRITE "same_remainder") (("" (SKOLEM!) (("" (ASSERT) NIL NIL)) NIL)) NIL) (|rem_opposite_elim| "" (AUTO-REWRITE "same_remainder") (("" (SKOLEM!) (("" (ASSERT) (("" (REWRITE "divides_opposite" :DIR RL) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|ndiv_TCC1| "" (INST 1 "lambda (d: [int, posnat]): (epsilon! (q: int): d`1 = rem(d`2)(d`1) + d`2 * q)") (("" (SKOLEM!) (("" (USE "epsilon_ax[int]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|ndiv_lt| "" (SKOSIMP*) (("" (TYPEPRED "ndiv(x!1, b!1)") (("" (CASE-REPLACE "x!1 - rem(b!1)(x!1) = b!1 * ndiv(x!1, b!1)") (("1" (HIDE -2) (("1" (CASE "x!1/b!1 - rem(b!1)(x!1)/b!1 = ndiv(x!1, b!1)") (("1" (HIDE -2) (("1" (REPLACE -1 * RL) (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "both_sides_div1") (("2" (INST -1 "b!1" "x!1 - rem(b!1)(x!1)" "b!1 * ndiv(x!1, b!1)") (("2" (CASE-REPLACE "b!1 * ndiv(x!1, b!1) / b!1 = ndiv(x!1, b!1)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|ndiv_TCC2| "" (SKOSIMP*) (("" (LEMMA "ndiv_lt") (("" (INST?) (("" (CASE "n!1/b!1 <= n!1") (("1" (ASSERT) (("1" (HIDE -1) (("1" (TYPEPRED "ndiv(n!1, b!1)") (("1" (CASE "n!1 < rem(b!1)(n!1)") (("1" (LEMMA "rem_mod2") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "b!1 * ndiv(n!1, b!1) >= 0") (("1" (LEMMA "both_sides_times_pos_ge1") (("1" (INST -1 "b!1" "ndiv(n!1, b!1)" "0") (("1" (REPLACE -1 2 RL T) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE -1) (("2" (LEMMA "le_div_le_pos") (("2" (INST -1 "n!1" "1" "b!1" "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|subrange_inductions| (|subrange_induction_TCC1| "" (ASSERT) (("" (TYPEPRED "j") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|subrange_induction_TCC2| "" (TCC :DEFS !) NIL NIL) (|subrange_induction| "" (LEMMA "nat_induction") (("" (SKOSIMP*) (("" (INST -1 "lambda (n:nat): n <= j - i IMPLIES p!1(n+i)") (("1" (PROP) (("1" (INST -1 "k!1 - i") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (SKOSIMP*) (("3" (INST -4 "j!1 + i") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|SUBRANGE_induction| "" (SKOSIMP) (("" (SKOSIMP) (("" (LEMMA "NAT_induction") (("" (INST -1 "lambda (n:nat): n <= j - i IMPLIES p!1(n+i)") (("1" (SPLIT) (("1" (INST -2 "k!1") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (INST -1 "m!1-i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST -3 "j!1+i") (("1" (ASSERT) (("1" (SKOSIMP) (("1" (INST -1 "m!1-i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|bounded_int_inductions| (|upfrom_induction_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|upfrom_induction_TCC2| "" (SUBTYPE-TCC) NIL NIL) (|upfrom_induction| "" (LEMMA "nat_induction") (("" (SKOSIMP*) (("" (INST -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (PROP) (("1" (INST -1 "jf!1-m") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (SPLIT) (("1" (INST -5 "j!1+m") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST 1 "j!1+m") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|UPFROM_induction| "" (SKOSIMP*) (("" (LEMMA "NAT_induction") (("" (INST -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (PROP) (("1" (INST -1 "jf!1-m") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (INST 1 "jf!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -4 "j!1+m") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -1 "kf!1-m") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|above_induction_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|above_induction_TCC2| "" (SUBTYPE-TCC) NIL NIL) (|above_induction| "" (SKOSIMP*) (("" (LEMMA "nat_induction") (("" (INST -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (PROP) (("1" (INST -1 "ja!1-m") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (SPLIT) (("1" (INST -5 "j!1+m") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST 1 "j!1+m") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|ABOVE_induction| "" (SKOSIMP*) (("" (LEMMA "NAT_induction") (("" (INST -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (PROP) (("1" (INST -1 "ja!1-m") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (INST 1 "ja!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -4 "j!1+m") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST -1 "ka!1-m") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL))(|bounded_nat_inductions| (|upto_induction_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|upto_induction_TCC2| "" (SUBTYPE-TCC) NIL NIL) (|upto_induction| "" (SKOSIMP*) (("" (LEMMA "nat_induction") (("" (INST -1 "lambda (n:nat): n <= m IMPLIES pt!1(n)") (("" (PROP) (("1" (INST -1 "jt!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -4 "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|UPTO_induction| "" (SKOSIMP*) (("" (LEMMA "NAT_induction") (("" (INST -1 "lambda (n:nat): n <= m IMPLIES pt!1(n)") (("" (PROP) (("1" (INST -1 "jt!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -3 "j!1") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -1 "kt!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|below_induction_TCC1| "" (SUBTYPE-TCC) NIL NIL) (|below_induction_TCC2| "" (SUBTYPE-TCC) NIL NIL) (|below_induction| "" (SKOSIMP*) (("" (LEMMA "nat_induction") (("" (INST -1 "lambda (n:nat): n < m IMPLIES pb!1(n)") (("" (PROP) (("1" (INST -2 "jb!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (SKOSIMP*) (("4" (INST -4 "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|BELOW_induction| "" (SKOSIMP*) (("" (LEMMA "NAT_induction") (("" (INST -1 "lambda (n:nat): n < m IMPLIES pb!1(n)") (("" (PROP) (("1" (INST -1 "jb!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -3 "j!1") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -1 "kb!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|subrange_type|)(|int_types|)(|nat_types|)(|finite_sets_def| (|finite_set_TCC1| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "0" "LAMBDA (x:(emptyset[T])): 0") (("1" (SKOLEM-TYPEPRED) (("1" (EXPAND "emptyset") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "emptyset") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|is_finite_surj| "" (SKOLEM!) (("" (FLATTEN) (("" (SKOLEM!) (("" (EXPAND "is_finite") (("" (INST 1 "N!1" "lambda (x: (S!1)): epsilon! (n: below[N!1]): x = f!1(n)") (("1" (EXPAND "injective?") (("1" (SKOSIMP*) (("1" (USE "epsilon_ax[below[N!1]]") (("1" (PROP) (("1" (LEMMA "epsilon_ax[below[N!1]]") (("1" (INST -1 "LAMBDA (n: below[N!1]): x2!1 = f!1(n)") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "surjective?") (("2" (INST? -2) (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST 1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "0") NIL NIL)) NIL) ("2" (EXPAND "surjective?") (("2" (INST? -1) (("2" (SKOSIMP*) (("2" (INST 1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|finite_subset| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1" "lambda (x: (S!1)): f!1(x)") (("1" (SKOSIMP) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "x2!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "x1!1") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (INST? -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|finite_intersection| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1" "lambda (x: (intersection(A!1, B!1))): f!1(x)") (("1" (SKOLEM-TYPEPRED) (("1" (INST?) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) (|finite_add| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1 + 1" "lambda (x: (add(x!1, A!1))): if x = x!1 then N!1 else f!1(x) endif") (("1" (GRIND :IF-MATCH NIL) (("1" (INST -4 "x1!1" "x2!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GRIND :IF-MATCH NIL) NIL NIL) ("3" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)) NIL) (|nonempty_finite_is_nonempty| "" (SUBTYPE-TCC) NIL NIL) (|finite_singleton| "" (SKOSIMP) (("" (EXPAND "is_finite") (("" (INST 1 "1" "lambda (x: (singleton[T](x!1))): 0") (("" (EXPAND "injective?") (("" (SKOLEM-TYPEPRED) (("" (EXPAND "singleton") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|finite_union| "" (SKOLEM-TYPEPRED) (("" (EXPAND "is_finite") (("" (SKOSIMP*) (("" (INST 1 "N!1 + N!2" "lambda (x: (union[T](A!1, B!1))): if A!1(x) then f!1(x) else f!2(x)+N!1 endif") (("1" (EXPAND "injective?") (("1" (SKOSIMP*) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (PROP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (INST -3 "x1!1" "x2!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (TYPEPRED "x2!1") (("2" (EXPAND "union") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "x1!1") (("3" (EXPAND "union") (("3" (EXPAND "member") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (TYPEPRED "x!1") (("3" (EXPAND "union") (("3" (EXPAND "member") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|finite_intersection1| "" (SKOLEM-TYPEPRED) (("" (EXPAND "is_finite") (("" (SKOSIMP) (("" (INST 1 "N!1" "lambda (x: (intersection[T](S!1, A!1))): f!1(x)") (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (EXPAND "intersection") (("1" (EXPAND "member") (("1" (FLATTEN) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "intersection") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|finite_intersection2| "" (SKOLEM-TYPEPRED) (("" (EXPAND "is_finite") (("" (SKOSIMP) (("" (INST 1 "N!1" "lambda (x: (intersection[T](A!1, S!1))): f!1(x)") (("1" (EXPAND "injective?") (("1" (SKOSIMP) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "x2!1") (("2" (EXPAND "intersection") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "x1!1") (("3" (EXPAND "intersection") (("3" (EXPAND "member") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "intersection") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|finite_difference| "" (SKOLEM-TYPEPRED) (("" (EXPAND "is_finite") (("" (SKOSIMP) (("" (INST 1 "N!1" "lambda (x :(difference[T](A!1, S!1))): f!1(x)") (("1" (EXPAND "injective?") (("1" (SKOSIMP) (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "x2!1") (("2" (EXPAND "difference") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "x1!1") (("3" (EXPAND "difference") (("3" (EXPAND "member") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "difference") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|nonempty_finite_union1| "" (SUBTYPE-TCC) NIL NIL) (|nonempty_finite_union2| "" (SUBTYPE-TCC) NIL NIL) (|nonempty_add_finite| "" (SKOLEM-TYPEPRED) (("" (EXPAND "is_finite") (("" (SKOSIMP) (("" (SPLIT) (("1" (INST 1 "N!1+1" "lambda (x: (add[T](x!1, A!1))): if x = x!1 then N!1 else f!1(x) endif") (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (INST -4 "x1!1" "x2!1") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "add") (("2" (ASSERT) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "add") (("3" (EXPAND "member") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKOLEM-TYPEPRED) (("3" (FLATTEN) (("3" (ASSERT) (("3" (EXPAND "add") (("3" (EXPAND "member") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "empty?") (("2" (INST -1 "x!1") (("2" (EXPAND "member") (("2" (EXPAND "add") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|finite_remove| "" (SKOLEM-TYPEPRED) (("" (EXPAND "is_finite") (("" (SKOSIMP) (("" (INST 1 "N!1" "lambda (x: (remove[T](x!1, A!1))): f!1(x)") (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (INST?) (("1" (EXPAND "remove") (("1" (EXPAND "member") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "remove") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "remove") (("2" (EXPAND "member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|finite_rest| "" (SKOLEM-TYPEPRED) (("" (EXPAND "is_finite") (("" (SKOSIMP) (("" (INST 1 "N!1" "lambda (x: (rest[T](A!1))): f!1(x)") (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (INST?) (("1" (EXPAND "rest") (("1" (ASSERT) (("1" (HIDE -1) (("1" (PROP) (("1" (EXPAND "empty?") (("1" (SKOSIMP) (("1" (EXPAND "member") (("1" (EXPAND "remove") (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rest") (("2" (ASSERT) (("2" (HIDE -2) (("2" (PROP) (("2" (EXPAND "remove") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "rest") (("2" (ASSERT) (("2" (PROP) (("2" (EXPAND "remove") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|finite_emptyset| "" (EXPAND "is_finite") (("" (INST 1 "0" "LAMBDA (x:(emptyset[T])): 0") (("1" (EXPAND "injective?") (("1" (SKOLEM-TYPEPRED) (("1" (EXPAND "emptyset") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM-TYPEPRED) (("2" (EXPAND "emptyset") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|nonempty_singleton_finite| "" (SUBTYPE-TCC) NIL NIL) (|finite_full| "" (GRIND :IF-MATCH NIL) (("1" (INST 1 "N!1" "g!1") (("1" (GRIND) NIL NIL)) NIL) ("2" (INST 1 "N!1" "f!1") (("2" (GRIND) NIL NIL)) NIL)) NIL) (|finite_type_set| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1" "g!1") (("" (GRIND) NIL NIL)) NIL)) NIL) (|finite_complement| "" (GRIND :IF-MATCH NIL) (("" (INST 1 "N!1" "g!1") (("" (GRIND :IF-MATCH NIL) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL))(|function_iterate| (|iterate_TCC1| "" (TCC :DEFS !) NIL NIL) (|iterate_TCC2| "" (TCC :DEFS !) NIL NIL) (|iterate_add| "" (INDUCT "m") (("1" (SKOSIMP) (("1" (EXPAND "iterate" 1 1) (("1" (EXPAND "o") (("1" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (EXPAND "iterate" 1 1) (("2" (EXPAND "iterate" 1 3) (("2" (INST -1 "f!1" "n!1") (("2" (EXPAND "o") (("2" (APPLY-EXTENSIONALITY) (("2" (REPLACE -1 :DIR RL) (("2" (BETA) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|iterate_add_applied| "" (INDUCT-AND-SIMPLIFY "m") NIL NIL) (|iterate_add_one| "" (INDUCT-AND-SIMPLIFY "n") NIL NIL) (|iterate_mult| "" (INDUCT "m") (("1" (INDUCT "n") (("1" (SKOSIMP) (("1" (EXPAND "iterate") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (INST?) (("2" (EXPAND "iterate" 1 1) (("2" (APPLY-EXTENSIONALITY) (("2" (REPLACE -1) (("2" (EXPAND "iterate" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INDUCT "n" :NAME "NAT_induction") (("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (CASE "j!2 = 0") (("1" (REPLACE -1) (("1" (EXPAND "iterate" 1 1) (("1" (EXPAND "iterate" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "iterate" 2 1) (("2" (EXPAND "iterate" 2 4) (("2" (APPLY-EXTENSIONALITY 2) (("2" (HIDE 3) (("2" (INST-CP -1 "j!2-1") (("2" (ASSERT) (("2" (INST? -2) (("2" (REPLACE -2) (("2" (LEMMA "iterate_add") (("2" (INST -1 "f!1" "1+j!1" "-1 - j!1 + j!1 * j!2 + j!2") (("1" (EXPAND "o") (("1" (CASE "iterate(f!1, 1 + j!1)(iterate(f!1, -1 - j!1 + j!1 * j!2 + j!2)(x!1)) = iterate(f!1, j!1 * j!2 + j!2)(x!1)") (("1" (HIDE -2) (("1" (REPLACE -1) (("1" (EXPAND "iterate" 1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 :DIR RL) (("2" (BETA) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE -1 -2 -3 -4 2) (("3" (CASE "j!1 * j!2 >= j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE "j!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "div_mult_pos_ge2") (("2" (INST -1 "j!1" "j!2" "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (CASE "j!1 * j!2 >= j!1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "div_mult_pos_ge2") (("2" (INST -1 "j!1" "j!2" "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|iterate_invariant| "" (INDUCT "n") (("1" (SKOSIMP*) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL))(|sequences| (|insert_TCC1| "" (TCC :DEFS !) NIL NIL) (|insert_delete| "" (SKOLEM 1 ("n!1" "seq!1")) (("" (EXPAND "insert") (("" (APPLY-EXTENSIONALITY 1) (("1" (DELETE 2) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "delete") (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "delete") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (APPLY-EXTENSIONALITY 4) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|add_first_rest| "" (SKOLEM 1 ("seq!1")) (("" (EXPAND "add") (("" (EXPAND "insert") (("" (APPLY-EXTENSIONALITY 1) (("1" (DELETE 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "first") (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "rest") (("2" (EXPAND "suffix") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (APPLY-EXTENSIONALITY 3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|sequence_induction| "" (LEMMA "nat_induction") (("" (SKOSIMP) (("" (INST -1 "(lambda (n:nat): p!1(nth(seq!1, n)))") (("" (ASSERT) (("" (SPLIT) (("1" (ASSERT) (("1" (EXPAND "every") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|seq_functions|)(|finite_sequences| (|empty_seq_TCC1| "" (EXISTENCE-TCC) NIL NIL) (|oh_TCC1| "" (TCC :DEFS !) NIL NIL) (|oh_TCC2| "" (TCC :DEFS !) NIL NIL) (|caret_TCC1| "" (GRIND :IF-MATCH NIL) NIL NIL) (|caret_TCC2| "" (TCC :DEFS EXPLICIT) NIL NIL) (|caret_TCC3| "" (SKOSIMP) (("" (BETA) (("" (LIFT-IF) (("" (ASSERT) (("" (GROUND) (("" (EXPAND "min") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|extract1_TCC1| "" (TCC :DEFS !) NIL NIL) (|o_assoc| "" (SKOSIMP) (("" (EXPAND "o") (("" (APPLY-EXTENSIONALITY) (("1" (HIDE 2) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKOSIMP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|ordstruct|)(|ordinals| (|lessp_TCC1| "" (GRIND) NIL NIL) (|lessp_TCC2| "" (SKOSIMP*) (("" (REPLACE -1) (("" (EXPAND "size") (("" (EXPAND "reduce" 3 2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|ordinal?_TCC1| "" (SKOSIMP*) (("" (REPLACE -1) (("" (EXPAND "size") (("" (EXPAND "reduce" 1 2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|ordinal?_TCC2| "" (SKOSIMP*) (("" (REPLACE -1) (("" (EXPAND "size") (("" (EXPAND "reduce" 1 2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|ordinal_TCC1| "" (INST 1 "zero") (("" (ASSERT) (("" (EXPAND "ordinal?") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) (|ordinal_irreflexive| "" (INDUCT "r") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "<") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (EXPAND "<" -4) (("3" (SPLIT -4) (("1" (ASSERT) (("1" (EXPAND "ordinal?" -3) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "ordinal?" -4) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|ordinal_antisym| "" (INDUCT "r") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (SKOSIMP*) (("2" (EXPAND "<") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (EXPAND "ordinal?" -3) (("3" (FLATTEN) (("3" (ASSERT) (("3" (INDUCT "s") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "<" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (EXPAND "ordinal?" -3) (("3" (FLATTEN) (("3" (ASSERT) (("3" (EXPAND "<" -6) (("3" (SPLIT -6) (("1" (INST -8 "add2_var!2") (("1" (ASSERT) (("1" (EXPAND "<" -7) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "<" -8) (("2" (ASSERT) (("2" (REPLACE -1) (("2" (LEMMA "ordinal_irreflexive") (("2" (INST -1 "add2_var!2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (EXPAND "<" -9) (("3" (REPLACE -1) (("3" (REPLACE -2) (("3" (LEMMA "ordinal_irreflexive") (("3" (INST-CP -1 "add2_var!2") (("3" (ASSERT) (("3" (INST -12 "add3_var!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|ordinal_antisymmetric| "" (SKOSIMP) (("" (EXPAND "<=") (("" (SPLIT) (("1" (SPLIT) (("1" (LEMMA "ordinal_antisym") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) (|ordinal_transitive| "" (INDUCT "s") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (SKOSIMP) (("2" (EXPAND "<" -2) (("2" (LIFT-IF -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (EXPAND "ordinal?" -3) (("3" (FLATTEN) (("3" (ASSERT) (("3" (HIDE -3 -4) (("3" (SKOSIMP) (("3" (EXPAND "<" -4) (("3" (LIFT-IF) (("3" (SPLIT -4) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "<" -5) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "<" 2) (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "<" 3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (ASSERT) (("1" (PROP) (("1" (ASSERT) (("1" (EXPAND "<" 4) (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST -4 "exp(r!1)" "exp(t!1)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (TYPEPRED "t!1") (("2" (EXPAND "ordinal?" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "r!1") (("3" (EXPAND "ordinal?" -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "<" 4) (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "<" 4) (("3" (ASSERT) NIL NIL)) NIL) ("4" (EXPAND "<" 5) (("4" (ASSERT) (("4" (INST -4 "exp(r!1)" "exp(t!1)") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "t!1") (("2" (EXPAND "ordinal?" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "r!1") (("3" (EXPAND "ordinal?" -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "<" 5) (("5" (ASSERT) NIL NIL)) NIL) ("6" (EXPAND "<" 5) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SPLIT -5) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (HIDE -6) (("2" (PROP) (("1" (ASSERT) (("1" (EXPAND "<" 4) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "<" 4) (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "<" 4) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "<" 3) (("3" (ASSERT) (("3" (HIDE -4) (("3" (SPLIT -4) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -8 "rest(r!1)" "rest(t!1)") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "t!1") (("2" (EXPAND "ordinal?" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "r!1") (("3" (EXPAND "ordinal?" -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|ordinal_trichotomy| "" (INDUCT "r") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (INDUCT "s") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP) (("2" (EXPAND "ordinal?" -3) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "<" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (EXPAND "ordinal?" -3) (("3" (FLATTEN) (("3" (ASSERT) (("3" (INDUCT "s") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "<" 3) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) (("3" (EXPAND "ordinal?" -3) (("3" (FLATTEN) (("3" (ASSERT) (("3" (EXPAND "<" 1) (("3" (FLATTEN) (("3" (EXPAND "<" 5) (("3" (FLATTEN) (("3" (INST -6 "add2_var!2") (("3" (ASSERT) (("3" (REPLACE -6) (("3" (ASSERT) (("3" (HIDE -3 -4 1 5) (("3" (HIDE -6 -7) (("3" (INST -5 "add3_var!2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|well_founded_le| "" (EXPAND "well_founded?") (("" (LEMMA "ordinal_induction") (("" (SKOSIMP) (("" (SKOSIMP) (("" (INST -1 "LAMBDA (x:ordinal): NOT p!1(x)") (("" (SPLIT) (("1" (INST -1 "y!1") NIL NIL) ("2" (SKOSIMP) (("2" (INST 1 "r!1") (("2" (SKOSIMP) (("2" (INST -1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|lex2| (|lex2_TCC1| "" (SUBTYPE-TCC) (("" (GRIND) NIL NIL)) NIL) (|lex2_TCC2| "" (SUBTYPE-TCC) NIL NIL) (|lex2_TCC3| "" (SUBTYPE-TCC) (("" (GRIND) NIL NIL)) NIL) (|lex2_TCC4| "" (SUBTYPE-TCC) NIL NIL) (|lex2_TCC5| "" (GRIND) NIL NIL) (|lex2_TCC6| "" (SUBTYPE-TCC) NIL NIL) (|lex2_TCC7| "" (SUBTYPE-TCC) NIL NIL) (|lex2_TCC8| "" (GRIND) NIL NIL) (|lex2_lt| "" (GRIND) NIL NIL))(|list|)(|list_props| (|length_TCC1| "" (TCC :DEFS !) NIL NIL) (|member_TCC1| "" (TCC :DEFS !) NIL NIL) (|member_null| "" (GRIND :IF-MATCH NIL) NIL NIL) (|nth_TCC1| "" (SKOSIMP) (("" (TYPEPRED "n!1") (("" (EXPAND "length") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|nth_TCC2| "" (SKOSIMP) (("" (TYPEPRED "n!1") (("" (EXPAND "length") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (|nth_TCC3| "" (INDUCT "l") (("1" (SKOSIMP*) (("1" (TYPEPRED "n!1") (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (TYPEPRED "n!1") (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (TYPEPRED "n!1") (("3" (EXPAND "length" -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|nth_TCC4| "" (INDUCT "l") (("1" (SKOSIMP*) (("1" (TYPEPRED "n!1") (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "length" 2 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (TYPEPRED "n!1") (("3" (EXPAND "length" -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|append_TCC1| "" (TCC :DEFS !) NIL NIL) (|append_null| "" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) (("2" (EXPAND "append" +) (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) (|append_assoc| "" (INDUCT-AND-SIMPLIFY "l1") NIL NIL) (|reverse_append| "" (INDUCT-AND-SIMPLIFY "l1") (("1" (REWRITE "append_null") NIL NIL) ("2" (REPLACE -1) (("2" (REWRITE "append_assoc" :DIR RL) NIL NIL)) NIL)) NIL) (|reverse_reverse| "" (INDUCT "l") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) (("2" (EXPAND "reverse" 1 2) (("2" (REWRITE "reverse_append") (("2" (EXPAND "reverse" 1 1) (("2" (REPLACE -1) (("2" (EXPAND "reverse" 1 1) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "append" 1 1) (("2" (EXPAND "append" 1 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|length_append| "" (INDUCT-AND-SIMPLIFY "l1") NIL NIL) (|length_reverse| "" (INDUCT-AND-SIMPLIFY "l") (("" (REWRITE "length_append") (("" (ASSERT) NIL NIL)) NIL)) NIL) (|list_rep| "" (ASSERT) NIL NIL) (|every_append| "" (INDUCT-AND-SIMPLIFY "l1") NIL NIL) (|every_disjunct1| "" (INDUCT-AND-SIMPLIFY "l") NIL NIL) (|every_disjunct2| "" (INDUCT-AND-SIMPLIFY "l") NIL NIL) (|every_conjunct| "" (INDUCT-AND-SIMPLIFY "l") NIL NIL) (|every_member| "" (INDUCT-AND-SIMPLIFY "l") (("" (REWRITE "every_disjunct2") NIL NIL)) NIL))(|map_props| (|map_list_composition| "" (INDUCT "l") (("1" (SKOSIMP) (("1" (EXPAND "map") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (INST?) (("2" (EXPAND "map" +) (("2" (REPLACE -1) (("2" (EXPAND "o" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|map_seq_composition| "" (SKOSIMP) (("" (EXPAND "map") (("" (APPLY-EXTENSIONALITY) (("" (HIDE 2) (("" (EXPAND "o") (("" (CASE "nth((LAMBDA (n: nat): f1!1(nth(s!1, n))), x!1) = f1!1(nth(s!1, x!1))") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "nth" 1 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL))(|filters| (|filter_TCC1| "" (TCC :DEFS !) NIL NIL) (|filter_TCC2| "" (SKOSIMP) (("" (REPLACE -1) (("" (EXPAND "length" 2 2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL))(|list2finseq| (|finseq2list_rec_TCC1| "" (TCC :DEFS EXPLICIT) NIL NIL) (|finseq2list_rec_TCC2| "" (TCC :DEFS !) NIL NIL) (|finseq2list_rec_TCC3| "" (TCC :DEFS !) NIL NIL) (|finseq2list_TCC1| "" (TCC :DEFS EXPLICIT) NIL NIL))(|list2set| (|list2set_TCC1| "" (TCC :DEFS !) NIL NIL))(|disjointness| (|pairwise_disjoint?_TCC1| "" (TERMINATION-TCC) NIL NIL))(|character|)(|strings| (|string_rep| "" (PROPAX) NIL NIL) (|fseq_lem| "" (INDUCT "l1") (("1" (INDUCT "l2") (("1" (GRIND) NIL NIL)) NIL) ("2" (SKOSIMP) (("2" (SKOSIMP) (("2" (INST -1 "cdr(l2!1)") (("1" (IFF) (("1" (PROP) (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY) (("1" (EXPAND "list2finseq" -1) (("1" (FLATTEN) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "0") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "list2finseq" -1) (("2" (FLATTEN) (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (EXPAND "list2finseq" -1) (("3" (EXPAND "list2finseq" 3) (("3" (FLATTEN) (("3" (SPLIT) (("1" (EXPAND "length" -1) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST -1 "x!1+1") (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (EXPAND "length" -1) (("2" (LIFT-IF) (("2" (SPLIT -1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (EXPAND "length" -1) (("3" (LIFT-IF) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "length" -1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (IFF) (("2" (PROP) (("1" (EXPAND "list2finseq") (("1" (FLATTEN) (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (|cons_lem| "" (GRIND :IF-MATCH NIL) (("1" (DECOMPOSE-EQUALITY -3) NIL NIL) ("2" (DECOMPOSE-EQUALITY -3) NIL NIL)) NIL) (|char_lem| "" (GRIND :IF-MATCH NIL) (("" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL))(|lift|)(|union|)(|mucalculus|)(|ctlops|)(|fairctlops|)(|Fairctlops| (|CheckFair_TCC1| "" (TERMINATION-TCC) NIL NIL))
