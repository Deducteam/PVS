(booleans)(equalities)(notequal)(if_def (IF_TCC1 0 (IF_TCC1-1 nil 3237052399 3237077560 ("" (inst 1 "LAMBDA (x: [boolean, T, T]): PROJ_2(x)") nil nil) proved ((T formal-type-decl nil if_def nil) (boolean nonempty-type-decl nil booleans nil)) 16 10 nil nil)))(boolean_props (bool_exclusive 0 (bool_exclusive-1 nil 3237052399 3237077560 ("" (iff) (("" (prop) nil nil)) nil) proved nil 9 0 nil nil)) (bool_inclusive 0 (bool_inclusive-1 nil 3237052399 3237077561 ("" (skolem!) (("" (prop) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil) proved nil 138 10 nil nil)) (not_def 0 (not_def-1 nil 3237052399 3237077561 ("" (skosimp) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 19 20 nil nil)) (and_def 0 (and_def-1 nil 3237052399 3237077561 ("" (skolem!) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 110 30 nil nil)) (syand_def 0 (syand_def-1 nil 3237052399 3237077561 ("" (propax) nil nil) proved nil 4 10 nil nil)) (or_def 0 (or_def-1 nil 3237052399 3237077561 ("" (skolem!) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 26 20 nil nil)) (implies_def 0 (implies_def-1 nil 3237052399 3237077561 ("" (skolem!) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 128 30 nil nil)) (syimplies_def 0 (syimplies_def-1 nil 3237052399 3237077562 ("" (propax) nil nil) proved nil 3 0 nil nil)) (when_def 0 (when_def-1 nil 3237052399 3237077562 ("" (skolem!) nil nil) proved nil 101 10 nil nil)) (iff_def 0 (iff_def-1 nil 3237052399 3237077562 ("" (skolem!) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 38 30 nil nil)) (syiff_def 0 (syiff_def-1 nil 3237052399 3237077562 ("" (propax) nil nil) proved nil 3 10 nil nil)) (excluded_middle 0 (excluded_middle-1 nil 3237052399 3237077563 ("" (grind) nil nil) proved nil 275 30 nil nil)))(xor_def (xor_def 0 (xor_def-1 nil 3237052399 3237077563 ("" (grind) nil nil) proved ((/= const-decl "boolean" notequal nil) (XOR const-decl "bool" xor_def nil)) 161 90 nil nil)))(quantifier_props (not_exists 0 (not_exists-1 nil 3237052399 3237077563 ("" (skolem!) (("" (iff) (("" (prop) (("1" (skolem!) (("1" (inst?) nil nil)) nil) ("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil) proved ((t formal-type-decl nil quantifier_props nil)) 56 40 nil nil)) (exists_not 0 (exists_not-1 nil 3237052399 3237077564 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 474 130 nil nil)) (exists_or 0 (exists_or-1 nil 3237052399 3237077565 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 874 230 nil nil)) (exists_implies 0 (exists_implies-1 nil 3237052399 3237077565 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 564 210 nil nil)) (exists_and 0 (exists_and-1 nil 3237052399 3237077566 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 388 80 nil nil)) (not_forall 0 (not_forall-1 nil 3237052399 3237077566 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 221 130 nil nil)) (forall_not 0 (forall_not-1 nil 3237052399 3237077567 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 378 120 nil nil)) (forall_and 0 (forall_and-1 nil 3237052399 3237077567 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 580 200 nil nil)) (forall_or 0 (forall_or-1 nil 3237052399 3237077568 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 220 60 nil nil)))(defined_types)(exists1 (unique_lem 0 (unique_lem-1 nil 3237052399 3237077568 ("" (skolem!) (("" (flatten) (("" (expand "unique?") (("" (skolem!) (("" (flatten) (("" (inst-cp -1 "x!1") (("" (inst -1 "y!1") (("" (inst - "x!1" "y!1") (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil exists1 nil) (unique? const-decl "bool" exists1 nil)) 208 60 nil nil)) (exists1_lem 0 (exists1_lem-1 nil 3237052399 3237077568 ("" (skolem!) (("" (flatten) (("" (expand "exists1") (("" (prop) nil nil)) nil)) nil)) nil) proved ((exists1 const-decl "bool" exists1 nil)) 41 20 nil nil)))(equality_props (IF_true 0 (IF_true-1 nil 3237052399 3237077568 ("" (grind) nil nil) proved nil 22 10 nil nil)) (IF_false 0 (IF_false-1 nil 3237052399 3237077568 ("" (grind) nil nil) proved nil 12 10 nil nil)) (IF_same 0 (IF_same-1 nil 3237052399 3237077568 ("" (grind) nil nil) proved nil 13 20 nil nil)) (reflexivity_of_equals 0 (reflexivity_of_equals-1 nil 3237052399 3237077568 ("" (skolem!) nil nil) proved nil 38 10 nil nil)) (transitivity_of_equals 0 (transitivity_of_equals-1 nil 3237052399 3237077569 ("" (skolem!) (("" (flatten) (("" (replace -1) (("" (propax) nil nil)) nil)) nil)) nil) proved nil 18 10 nil nil)) (symmetry_of_equals 0 (symmetry_of_equals-1 nil 3237052399 3237077569 ("" (skolem!) (("" (flatten) (("" (replace -1) (("" (propax) nil nil)) nil)) nil)) nil) proved nil 39 10 nil nil)))(if_props (lift_if1 0 (lift_if1-1 nil 3237052399 3237077569 ("" (grind) nil nil) proved nil 16 20 nil nil)) (lift_if2 0 (lift_if2-1 nil 3237052399 3237077569 ("" (grind) nil nil) proved nil 169 90 nil nil)))(functions (extensionality_postulate 0 (extensionality_postulate-1 nil 3237052399 3237077569 ("" (skosimp) (("" (prop) (("1" (apply-extensionality) nil nil) ("2" (skosimp) (("2" (assert) nil nil)) nil)) nil)) nil) proved ((R formal-type-decl nil functions nil) (D formal-type-decl nil functions nil)) 199 60 nil nil)) (extensionality 0 (extensionality-1 nil 3237052399 3237077569 ("" (skolem!) (("" (flatten) (("" (apply-extensionality) nil nil)) nil)) nil) proved ((R formal-type-decl nil functions nil) (D formal-type-decl nil functions nil)) 131 40 nil nil)) (congruence 0 (congruence-1 nil 3237052399 3237077569 ("" (grind) nil nil) proved nil 27 20 nil nil)) (eta 0 (eta-1 nil 3237052399 3237077570 ("" (skolem!) (("" (apply-extensionality) nil nil)) nil) proved ((D formal-type-decl nil functions nil) (R formal-type-decl nil functions nil)) 133 30 nil nil)) (bij_is_inj 0 (bij_is_inj-1 nil 3237052399 3237077570 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil functions nil) (R formal-type-decl nil functions nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil)) 351 130 nil nil)) (bij_is_surj 0 (bij_is_surj-1 nil 3237052399 3237077570 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil functions nil) (R formal-type-decl nil functions nil) (bijective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil)) 463 120 nil nil)))(functions_alt)(restrict (injective_restrict 0 (injective_restrict-1 nil 3237052399 3237077571 ("" (expand "injective?") (("" (skosimp*) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil restrict nil) (boolean nonempty-type-decl nil booleans nil) (S_pred const-decl "[T -> boolean]" restrict nil) (S formal-subtype-decl nil restrict nil) (restrict const-decl "R" restrict nil) (injective? const-decl "bool" functions nil)) 324 100 nil nil)) (restrict_of_inj_is_inj 0 (restrict_of_inj_is_inj-1 nil 3237052399 3237077571 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil restrict nil) (R formal-type-decl nil restrict nil) (S formal-subtype-decl nil restrict nil) (S_pred const-decl "[T -> boolean]" restrict nil) (restrict const-decl "R" restrict nil) (injective? const-decl "bool" functions nil)) 399 140 nil nil)))(extend (restrict_extend 0 (restrict_extend-1 nil 3237052399 3237077572 ("" (grind) (("" (apply-extensionality) nil nil)) nil) proved ((restrict const-decl "R" restrict nil) (extend const-decl "R" extend nil) (T formal-type-decl nil extend nil) (boolean nonempty-type-decl nil booleans nil) (S_pred const-decl "[T -> boolean]" extend nil) (S formal-subtype-decl nil extend nil) (R formal-type-decl nil extend nil)) 364 90 nil nil)))(extend_bool)(K_conversion)(K_props (K_preserves 0 (K_preserves-1 nil 3237052399 3237077572 ("" (subtype-tcc) nil nil) proved ((K_conversion const-decl "T1" K_conversion nil)) 41 20 nil nil)) (K_preserves1 0 (K_preserves1-1 nil 3237052399 3237077572 ("" (subtype-tcc) nil nil) proved ((K_conversion const-decl "T1" K_conversion nil)) 40 20 nil nil)))(identity (I_TCC1 0 (I_TCC1-1 nil 3237052399 3237077572 ("" (grind) nil nil) proved ((injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil)) 75 50 nil nil)))(identity_props (I_preserves 0 (I_preserves-1 nil 3237052399 3237077572 ("" (subtype-tcc) nil nil) proved ((I const-decl "(bijective?[T, T])" identity nil)) 42 20 nil nil)) (id_preserves 0 (id_preserves-1 nil 3237052399 3237077572 ("" (subtype-tcc) nil nil) proved ((id const-decl "(bijective?[T, T])" identity nil)) 43 10 nil nil)) (identity_preserves 0 (identity_preserves-1 nil 3237052399 3237077572 ("" (subtype-tcc) nil nil) proved ((identity const-decl "(bijective?[T, T])" identity nil)) 121 20 nil nil)))(relations (equiv_is_reflexive 0 (equiv_is_reflexive-1 nil 3237052399 3237077573 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil relations nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 266 100 nil nil)) (equiv_is_symmetric 0 (equiv_is_symmetric-1 nil 3237052399 3237077573 ("" (skolem-typepred) (("" (expand "equivalence?") (("" (assert) nil nil)) nil)) nil) proved ((equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (T formal-type-decl nil relations nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 44 20 nil nil)) (equiv_is_transitive 0 (equiv_is_transitive-1 nil 3237052399 3237077573 ("" (skolem-typepred) (("" (expand "equivalence?") (("" (assert) nil nil)) nil)) nil) proved ((equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (T formal-type-decl nil relations nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 118 20 nil nil)))(orders (preorder_is_reflexive 0 (preorder_is_reflexive-1 nil 3237052399 3237077573 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (preorder? const-decl "bool" orders nil) (transitive? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 243 100 nil nil)) (preorder_is_transitive 0 (preorder_is_transitive-1 nil 3237052399 3237077573 ("" (skolem-typepred) (("" (expand "preorder?") (("" (assert) nil nil)) nil)) nil) proved ((preorder? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 103 20 nil nil)) (equiv_is_preorder 0 (equiv_is_preorder-1 nil 3237052399 3237077574 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil)) 248 110 nil nil)) (po_is_preorder 0 (po_is_preorder-1 nil 3237052399 3237077574 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (partial_order? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil)) 161 110 nil nil)) (po_is_antisymmetric 0 (po_is_antisymmetric-1 nil 3237052399 3237077575 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (partial_order? const-decl "bool" orders nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil)) 535 310 nil nil)) (strict_is_irreflexive 0 (strict_is_irreflexive-1 nil 3237052399 3237077576 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (strict_order? const-decl "bool" orders nil) (transitive? const-decl "bool" relations nil) (irreflexive? const-decl "bool" relations nil)) 258 100 nil nil)) (strict_is_transitive 0 (strict_is_transitive-1 nil 3237052399 3237077576 ("" (skolem-typepred) (("" (expand "strict_order?") (("" (assert) nil nil)) nil)) nil) proved ((strict_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 103 30 nil nil)) (total_is_po 0 (total_is_po-1 nil 3237052399 3237077576 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (total_order? const-decl "bool" orders nil) (dichotomous? const-decl "bool" orders nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil)) 373 160 nil nil)) (total_is_dichotomous 0 (total_is_dichotomous-1 nil 3237052399 3237077576 ("" (skolem-typepred) (("" (expand "total_order?") (("" (assert) nil nil)) nil)) nil) proved ((total_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 101 30 nil nil)) (linear_is_total 0 (linear_is_total-1 nil 3237052399 3237077577 ("" (subtype-tcc) nil nil) proved ((linear_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil) (dichotomous? const-decl "bool" orders nil) (total_order? const-decl "bool" orders nil)) 400 170 nil nil)) (total_is_linear 0 (total_is_linear-1 nil 3237052399 3237077577 ("" (subtype-tcc) nil nil) proved ((linear_order? const-decl "bool" orders nil)) 58 30 nil nil)) (strict_total_is_strict 0 (strict_total_is_strict-1 nil 3237052399 3237077577 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (strict_total_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (strict_order? const-decl "bool" orders nil)) 309 120 nil nil)) (strict_total_is_trichotomous 0 (strict_total_is_trichotomous-1 nil 3237052399 3237077577 ("" (skolem-typepred) (("" (expand "strict_total_order?") (("" (assert) nil nil)) nil)) nil) proved ((strict_total_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 58 30 nil nil)) (well_ordered_is_strict_total 0 (well_ordered_is_strict_total-1 nil 3237052399 3237077578 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (well_ordered? const-decl "bool" orders nil) (well_founded? const-decl "bool" orders nil) (irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (strict_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (strict_total_order? const-decl "bool" orders nil)) 383 160 nil nil)) (well_ordered_is_well_founded 0 (well_ordered_is_well_founded-1 nil 3237052399 3237077579 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (well_ordered? const-decl "bool" orders nil) (strict_total_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (strict_order? const-decl "bool" orders nil) (transitive? const-decl "bool" relations nil) (irreflexive? const-decl "bool" relations nil) (well_founded? const-decl "bool" orders nil)) 1161 470 nil nil)))(orders_alt (least_upper_bound_is_upper_bound 0 (least_upper_bound_is_upper_bound-1 nil 3237052399 3237077581 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders_alt nil) (least_upper_bound? const-decl "[T -> bool]" orders_alt nil) (pe formal-const-decl "nonempty_pred[T]" orders_alt nil) (nonempty_pred type-eq-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (least_upper_bound? const-decl "bool" orders nil) (least_upper_bound? const-decl "bool" orders nil) (upper_bound? const-decl "[T -> bool]" orders_alt nil) (upper_bound? const-decl "bool" orders nil) (upper_bound? const-decl "bool" orders nil)) 240 160 nil nil)) (greatest_lower_bound_is_lower_bound 0 (greatest_lower_bound_is_lower_bound-1 nil 3237052399 3237077582 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders_alt nil) (greatest_lower_bound? const-decl "[T -> bool]" orders_alt nil) (pe formal-const-decl "nonempty_pred[T]" orders_alt nil) (nonempty_pred type-eq-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (greatest_lower_bound? const-decl "bool" orders nil) (greatest_lower_bound? const-decl "bool" orders nil) (lower_bound? const-decl "[T -> bool]" orders_alt nil) (lower_bound? const-decl "bool" orders nil) (lower_bound? const-decl "bool" orders nil)) 291 150 nil nil)))(wf_induction (wf_induction 0 (wf_induction-1 nil 3237052399 3237077582 ("" (skosimp) (("" (skosimp) (("" (typepred "<") (("" (expand "well_founded?") (("" (inst -1 "{z:T|NOT p!1(z)}") (("" (assert) (("" (split) (("1" (skosimp) (("1" (inst -2 "y!1") (("1" (split) (("1" (typepred "y!1") (("1" (propax) nil nil)) nil) ("2" (skosimp) (("2" (inst -2 "y!2") nil nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((y!2 skolem-const-decl "T" wf_induction nil) (p!1 skolem-const-decl "pred[T]" wf_induction nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil wf_induction nil) (pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (< formal-const-decl "(well_founded?[T])" wf_induction nil)) 360 100 nil nil)))(measure_induction (measure_induction 0 (measure_induction-1 nil 3237052399 3237077583 ("" (lemma "wf_induction[T,(LAMBDA (x, y: T): m(x) < m(y))]") (("1" (skosimp*) (("1" (inst -1 "p!1") (("1" (split) (("1" (inst -1 "x!1") nil nil) ("2" (propax) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "well_founded?") (("2" (typepred "<") (("2" (expand "well_founded?") (("2" (skosimp*) (("2" (inst -1 "(LAMBDA (y:M): (exists (z:T): m(z) = y AND p!1(z)))") (("2" (split) (("1" (skosimp*) (("1" (typepred "y!2") (("1" (skosimp*) (("1" (inst 1 "z!1") (("1" (skosimp*) (("1" (inst -3 "m(x!1)") (("1" (assert) nil nil) ("2" (inst 1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 2 "y!1") (("2" (skosimp*) (("2" (inst 1 "m(y!1)") (("2" (inst 1 "y!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (p!1 skolem-const-decl "pred[T]" measure_induction nil) (z!1 skolem-const-decl "T" measure_induction nil) (x!1 skolem-const-decl "(p!1)" measure_induction nil) (y!1 skolem-const-decl "T" measure_induction nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (wf_induction formula-decl nil wf_induction nil) (T formal-type-decl nil measure_induction nil) (M formal-type-decl nil measure_induction nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (< formal-const-decl "(well_founded?[M])" measure_induction nil) (m formal-const-decl "[T -> M]" measure_induction nil)) 744 240 nil nil)))(epsilons)(sets (singleton_TCC1 0 (singleton_TCC1-1 nil 3237052399 3237077586 ("" (skosimp) (("" (expand "singleton?") (("" (inst 1 "x!1") nil nil)) nil)) nil) proved ((singleton? const-decl "bool" sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets nil)) 78 20 nil nil)) (add_TCC1 0 (add_TCC1-1 nil 3237052399 3237077586 ("" (subtype-tcc) nil nil) proved ((T formal-type-decl nil sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 185 100 nil nil)) (choose_TCC1 0 (choose_TCC1-1 nil 3237052399 3237077586 ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 215 70 nil nil)) (choose_TCC2 0 (choose_TCC2-1 nil 3237052399 3237077587 ("" (skolem-typepred) (("" (grind) (("" (rewrite "epsilon_ax[T]") (("1" (inst 1 "x!1") nil nil) ("2" (inst?) nil nil)) nil)) nil)) nil) proved ((empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (TRUE const-decl "bool" booleans nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 435 130 nil nil)) (the_TCC1 0 (the_TCC1-1 nil 3237052399 3237077587 ("" (existence-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets nil) (set type-eq-decl nil sets nil) (singleton? const-decl "bool" sets nil)) 314 90 nil nil)) (the_TCC2 0 (the_TCC2-1 nil 3237052399 3237077588 ("" (skolem-typepred) (("" (grind) (("" (rewrite "epsilon_ax[T]") (("1" (inst?) nil nil) ("2" (inst?) nil nil)) nil)) nil)) nil) proved ((pred type-eq-decl nil defined_types nil) (epsilon_ax formula-decl nil epsilons nil) (TRUE const-decl "bool" booleans nil) (singleton? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 453 140 nil nil)) (rest_TCC1 0 (rest_TCC1-1 nil 3237052399 3237077588 ("" (skolem!) (("" (flatten) (("" (expand "nonempty?") (("" (propax) nil nil)) nil)) nil)) nil) proved ((nonempty? const-decl "bool" sets nil)) 24 10 nil nil)) (nonempty_singleton 0 (nonempty_singleton-1 nil 3237052399 3237077588 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets nil) (set type-eq-decl nil sets nil) (singleton? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 467 140 nil nil)) (nonempty_union1 0 (nonempty_union1-1 nil 3237052399 3237077589 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (union const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 370 130 nil nil)) (nonempty_union2 0 (nonempty_union2-1 nil 3237052399 3237077589 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (union const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 478 160 nil nil)))(sets_lemmas (extensionality 0 (extensionality-1 nil 3237052399 3237077590 ("" (skolem!) (("" (flatten) (("" (apply-extensionality) (("" (inst?) (("" (expand "member") (("" (iff) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 284 90 nil nil)) (emptyset_is_empty? 0 (emptyset_is_empty?-1 nil 3237052399 3237077590 ("" (skolem!) (("" (expand "empty?") (("" (expand "emptyset") (("" (expand "member") (("" (prop) (("1" (apply-extensionality) (("1" (inst?) nil nil)) nil) ("2" (skolem!) (("2" (replace -1) (("2" (beta) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (FALSE const-decl "bool" booleans nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (emptyset const-decl "set" sets nil)) 422 120 nil nil)) (empty_no_members 0 (empty_no_members-1 nil 3237052399 3237077590 ("" (grind) nil nil) proved ((emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil)) 43 20 nil nil)) (emptyset_min 0 (emptyset_min-1 nil 3237052399 3237077591 ("" (grind) (("" (apply-extensionality) (("" (inst?) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (subset? const-decl "bool" sets nil) (emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil)) 537 150 nil nil)) (nonempty_member 0 (nonempty_member-1 nil 3237052399 3237077591 ("" (tcc) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 466 180 nil nil)) (fullset_member 0 (fullset_member-1 nil 3237052399 3237077591 ("" (grind) nil nil) proved ((fullset const-decl "set" sets nil) (member const-decl "bool" sets nil)) 44 20 nil nil)) (fullset_max 0 (fullset_max-1 nil 3237052399 3237077592 ("" (grind) (("" (apply-extensionality) (("" (inst?) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (fullset const-decl "set" sets nil)) 513 140 nil nil)) (nonempty_exists 0 (nonempty_exists-1 nil 3237052399 3237077592 ("" (expand "nonempty?") (("" (expand "empty?") (("" (expand "member") (("" (skosimp*) (("" (split) (("1" (skosimp*) (("1" (inst * "x!1") nil nil)) nil) ("2" (flatten) (("2" (skolem * "x!1") (("2" (inst * "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((empty? const-decl "bool" sets nil) (a!1 skolem-const-decl "set[T]" sets_lemmas nil) (x!1 skolem-const-decl "T" sets_lemmas nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 318 90 nil nil)) (subset_reflexive 0 (subset_reflexive-1 nil 3237052399 3237077593 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 211 70 nil nil)) (subset_antisymmetric 0 (subset_antisymmetric-1 nil 3237052399 3237077593 ("" (skosimp) (("" (expand "subset?") (("" (expand "member") (("" (apply-extensionality) (("" (inst?) (("" (inst?) (("" (prop) (("1" (iff) (("1" (prop) nil nil)) nil) ("2" (iff) (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((subset? const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 304 110 nil nil)) (subset_transitive 0 (subset_transitive-1 nil 3237052399 3237077594 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 524 190 nil nil)) (subset_partial_order 0 (subset_partial_order-1 nil 3237052399 3237077594 ("" (expand "partial_order?") (("" (expand "preorder?") (("" (expand "reflexive?") (("" (prop) (("1" (skosimp) (("1" (expand "subset?") (("1" (expand "member") (("1" (skosimp) nil nil)) nil)) nil)) nil) ("2" (expand "transitive?") (("2" (skosimp) (("2" (expand "subset?") (("2" (skosimp) (("2" (inst?) (("2" (inst?) (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "antisymmetric?") (("3" (skosimp) (("3" (expand "subset?") (("3" (apply-extensionality) (("3" (inst?) (("3" (inst?) (("3" (expand "member") (("3" (iff) (("3" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((preorder? const-decl "bool" orders nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (antisymmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil)) 807 260 nil nil)) (subset_emptyset 0 (subset_emptyset-1 nil 3237052399 3237077595 ("" (grind) nil nil) proved ((emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 64 40 nil nil)) (subset_fullset 0 (subset_fullset-1 nil 3237052399 3237077595 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (fullset const-decl "set" sets nil) (subset? const-decl "bool" sets nil)) 64 30 nil nil)) (union_idempotent 0 (union_idempotent-1 nil 3237052399 3237077595 ("" (skosimp) (("" (expand "union") (("" (apply-extensionality) (("" (expand "member") (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((union const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 252 90 nil nil)) (union_commutative 0 (union_commutative-1 nil 3237052399 3237077596 ("" (skosimp) (("" (expand "union") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil) proved ((union const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 380 80 nil nil)) (union_associative 0 (union_associative-1 nil 3237052399 3237077596 ("" (skosimp) (("" (expand "union") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((union const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 473 140 nil nil)) (union_empty 0 (union_empty-1 nil 3237052399 3237077596 ("" (skosimp) (("" (expand "union") (("" (apply-extensionality) (("" (expand "member") (("" (expand "emptyset") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((union const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (emptyset const-decl "set" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 268 90 nil nil)) (union_full 0 (union_full-1 nil 3237052399 3237077597 ("" (skosimp) (("" (expand "fullset") (("" (expand "union") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((fullset const-decl "set" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (union const-decl "set" sets nil)) 284 80 nil nil)) (union_subset1 0 (union_subset1-1 nil 3237052399 3237077597 ("" (skosimp) (("" (expand "subset?") (("" (expand "union") (("" (skosimp) (("" (expand "member") (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (union const-decl "set" sets nil)) 169 50 nil nil)) (union_subset2 0 (union_subset2-1 nil 3237052399 3237077597 ("" (skosimp) (("" (expand "subset?") (("" (expand "union") (("" (apply-extensionality) (("" (inst?) (("" (iff) (("" (expand "member") (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((subset? const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (union const-decl "set" sets nil)) 371 110 nil nil)) (union_upper_bound 0 (union_upper_bound-1 nil 3237052399 3237077598 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (union const-decl "set" sets nil)) 642 220 nil nil)) (union_difference 0 (union_difference-1 nil 3237052399 3237077599 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (difference const-decl "set" sets nil) (union const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 518 150 nil nil)) (union_diff_subset 0 (union_diff_subset-1 nil 3237052399 3237077599 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (difference const-decl "set" sets nil) (union const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 806 250 nil nil)) (intersection_idempotent 0 (intersection_idempotent-1 nil 3237052399 3237077600 ("" (skosimp) (("" (expand "intersection") (("" (apply-extensionality) (("" (expand "member") (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 261 90 nil nil)) (intersection_commutative 0 (intersection_commutative-1 nil 3237052399 3237077600 ("" (skosimp) (("" (expand "intersection") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 263 80 nil nil)) (intersection_associative 0 (intersection_associative-1 nil 3237052399 3237077601 ("" (skosimp) (("" (expand "intersection") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 474 140 nil nil)) (intersection_empty 0 (intersection_empty-1 nil 3237052399 3237077601 ("" (skosimp) (("" (expand "intersection") (("" (expand "emptyset") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (FALSE const-decl "bool" booleans nil) (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (emptyset const-decl "set" sets nil)) 281 80 nil nil)) (intersection_full 0 (intersection_full-1 nil 3237052399 3237077601 ("" (skosimp) (("" (expand "intersection") (("" (expand "fullset") (("" (expand "member") (("" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)) 187 50 nil nil)) (intersection_subset1 0 (intersection_subset1-1 nil 3237052399 3237077601 ("" (skosimp) (("" (expand "intersection") (("" (expand "subset?") (("" (skosimp) (("" (expand "member") (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 217 50 nil nil)) (intersection_subset2 0 (intersection_subset2-1 nil 3237052399 3237077602 ("" (skosimp) (("" (expand "intersection") (("" (expand "subset?") (("" (apply-extensionality) (("" (expand "member") (("" (inst?) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (subset? const-decl "bool" sets nil)) 295 110 nil nil)) (intersection_lower_bound 0 (intersection_lower_bound-1 nil 3237052399 3237077602 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (intersection const-decl "set" sets nil)) 598 210 nil nil)) (distribute_intersection_union 0 (distribute_intersection_union-1 nil 3237052399 3237077603 ("" (skosimp) (("" (expand "intersection") (("" (expand "union") (("" (expand "member") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil)) 535 170 nil nil)) (distribute_union_intersection 0 (distribute_union_intersection-1 nil 3237052399 3237077604 ("" (skosimp) (("" (expand "intersection") (("" (expand "union") (("" (expand "member") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil)) 451 160 nil nil)) (complement_emptyset 0 (complement_emptyset-1 nil 3237052399 3237077604 ("" (expand "complement") (("" (expand "emptyset") (("" (expand "fullset") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil) (fullset const-decl "set" sets nil) (complement const-decl "set" sets nil)) 63 30 nil nil)) (complement_fullset 0 (complement_fullset-1 nil 3237052399 3237077604 ("" (expand "complement") (("" (expand "emptyset") (("" (expand "fullset") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil) (fullset const-decl "set" sets nil) (complement const-decl "set" sets nil)) 148 40 nil nil)) (complement_complement 0 (complement_complement-1 nil 3237052399 3237077604 ("" (skosimp) (("" (expand "complement") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((complement const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 291 90 nil nil)) (subset_complement 0 (subset_complement-1 nil 3237052399 3237077605 ("" (skosimp) (("" (expand "complement") (("" (expand "subset?") (("" (expand "member") (("" (prop) (("1" (skosimp) (("1" (inst?) (("1" (prop) nil nil)) nil)) nil) ("2" (skosimp) (("2" (inst?) (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((complement const-decl "set" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (subset? const-decl "bool" sets nil)) 300 90 nil nil)) (demorgan1 0 (demorgan1-1 nil 3237052399 3237077605 ("" (grind) (("" (apply-extensionality) (("" (iff) (("" (grind) nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (intersection const-decl "set" sets nil) (union const-decl "set" sets nil) (complement const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 467 180 nil nil)) (demorgan2 0 (demorgan2-1 nil 3237052399 3237077606 ("" (grind) (("" (apply-extensionality) (("" (iff) (("" (grind) nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil) (intersection const-decl "set" sets nil) (complement const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 487 170 nil nil)) (difference_emptyset1 0 (difference_emptyset1-1 nil 3237052399 3237077606 ("" (skosimp) (("" (expand "difference") (("" (expand "emptyset") (("" (expand "member") (("" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (emptyset const-decl "set" sets nil)) 256 60 nil nil)) (difference_emptyset2 0 (difference_emptyset2-1 nil 3237052399 3237077606 ("" (skosimp) (("" (expand "difference") (("" (expand "emptyset") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (member const-decl "bool" sets nil) (emptyset const-decl "set" sets nil)) 89 40 nil nil)) (difference_fullset1 0 (difference_fullset1-1 nil 3237052399 3237077606 ("" (skosimp) (("" (expand "difference") (("" (expand "emptyset") (("" (expand "fullset") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (fullset const-decl "set" sets nil) (member const-decl "bool" sets nil) (emptyset const-decl "set" sets nil)) 141 60 nil nil)) (difference_fullset2 0 (difference_fullset2-1 nil 3237052399 3237077607 ("" (skosimp) (("" (expand "difference") (("" (expand "fullset") (("" (expand "complement") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (complement const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (TRUE const-decl "bool" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (fullset const-decl "set" sets nil)) 327 120 nil nil)) (difference_intersection 0 (difference_intersection-1 nil 3237052399 3237077607 ("" (skosimp) (("" (expand "difference") (("" (expand "intersection") (("" (expand "complement") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (complement const-decl "set" sets nil) (member const-decl "bool" sets nil) (intersection const-decl "set" sets nil)) 184 70 nil nil)) (difference_difference1 0 (difference_difference1-1 nil 3237052399 3237077607 ("" (skosimp) (("" (expand "difference") (("" (expand "member") (("" (expand "union") (("" (expand "member") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (union const-decl "set" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 469 180 nil nil)) (difference_difference2 0 (difference_difference2-1 nil 3237052399 3237077608 ("" (skosimp) (("" (expand "difference") (("" (expand "union") (("" (expand "intersection") (("" (expand "member") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (intersection const-decl "set" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil) (union const-decl "set" sets nil)) 515 190 nil nil)) (difference_subset 0 (difference_subset-1 nil 3237052399 3237077608 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (difference const-decl "set" sets nil) (subset? const-decl "bool" sets nil)) 244 90 nil nil)) (difference_disjoint 0 (difference_disjoint-1 nil 3237052399 3237077609 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (difference const-decl "set" sets nil) (intersection const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (disjoint? const-decl "bool" sets nil)) 316 110 nil nil)) (diff_union_inter 0 (diff_union_inter-1 nil 3237052399 3237077609 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (intersection const-decl "set" sets nil) (union const-decl "set" sets nil) (difference const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 471 160 nil nil)) (nonempty_add 0 (nonempty_add-1 nil 3237052399 3237077609 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (add const-decl "(nonempty?)" sets nil) (empty? const-decl "bool" sets nil)) 310 120 nil nil)) (member_add 0 (member_add-1 nil 3237052399 3237077610 ("" (skosimp*) (("" (expand "add") (("" (apply-extensionality) (("" (hide 2) (("" (iff) (("" (expand "member") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((add const-decl "(nonempty?)" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 319 80 nil nil)) (member_remove 0 (member_remove-1 nil 3237052399 3237077610 ("" (skosimp*) (("" (apply-extensionality) (("" (hide 3) (("" (expand "remove") (("" (expand "member") (("" (iff) (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 252 100 nil nil)) (add_remove_member 0 (add_remove_member-1 nil 3237052399 3237077611 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil)) 530 190 nil nil)) (remove_add_member 0 (remove_add_member-1 nil 3237052399 3237077611 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil)) 532 200 nil nil)) (subset_add 0 (subset_add-1 nil 3237052399 3237077612 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (add const-decl "(nonempty?)" sets nil) (subset? const-decl "bool" sets nil)) 371 110 nil nil)) (add_as_union 0 (add_as_union-1 nil 3237052399 3237077612 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (union const-decl "set" sets nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 498 190 nil nil)) (singleton_as_add 0 (singleton_as_add-1 nil 3237052399 3237077613 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (emptyset const-decl "set" sets nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 463 160 nil nil)) (subset_remove 0 (subset_remove-1 nil 3237052399 3237077613 ("" (grind) nil nil) proved ((/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil) (remove const-decl "set" sets nil) (subset? const-decl "bool" sets nil)) 276 110 nil nil)) (remove_as_difference 0 (remove_as_difference-1 nil 3237052399 3237077614 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (difference const-decl "set" sets nil) (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil)) 531 210 nil nil)) (remove_member_singleton 0 (remove_member_singleton-1 nil 3237052399 3237077614 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (emptyset const-decl "set" sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil)) 433 160 nil nil)) (choose_rest_TCC1 0 (choose_rest_TCC1-1 nil 3237052399 3237077614 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 207 70 nil nil)) (choose_rest 0 (choose_rest-1 nil 3237052399 3237077615 ("" (skosimp*) (("" (apply-extensionality) (("1" (hide 3) (("1" (expand "add") (("1" (hide 2) (("1" (iff) (("1" (split) (("1" (flatten) (("1" (expand "member") (("1" (split) (("1" (assert) nil nil) ("2" (expand "rest") (("2" (expand "remove") (("2" (flatten) (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "member") (("2" (expand "rest") (("2" (expand "remove") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "nonempty?") (("2" (propax) nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (rest const-decl "set" sets nil) (choose const-decl "(p)" sets nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (a!1 skolem-const-decl "set[T]" sets_lemmas nil) (remove const-decl "set" sets nil) (member const-decl "bool" sets nil)) 519 160 nil nil)) (choose_member 0 (choose_member-1 nil 3237052399 3237077615 ("" (grind) (("" (rewrite "epsilon_ax[T]") (("1" (inst?) nil nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil) proved ((TRUE const-decl "bool" booleans nil) (epsilon_ax formula-decl nil epsilons nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (choose const-decl "(p)" sets nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 466 140 nil nil)) (choose_not_member 0 (choose_not_member-1 nil 3237052399 3237077616 ("" (skosimp*) (("" (expand "member") (("" (expand "rest") (("" (assert) (("" (expand "remove") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (remove const-decl "set" sets nil) (rest const-decl "set" sets nil)) 106 50 nil nil)) (rest_not_equal 0 (rest_not_equal-1 nil 3237052399 3237077616 ("" (skosimp) (("" (expand "rest") (("" (replace 1) (("" (expand "remove") (("" (expand "empty?") (("" (skosimp) (("" (expand "member") (("" (typepred "choose(a!1)") (("1" (replace -3 -1 :dir rl) (("1" (beta) (("1" (flatten) (("1" (replace -2) (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((rest const-decl "set" sets nil) (remove const-decl "set" sets nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)) 440 160 nil nil)) (rest_member 0 (rest_member-1 nil 3237052399 3237077616 ("" (tcc :defs !) nil nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (rest const-decl "set" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil)) 387 150 nil nil)) (rest_subset 0 (rest_subset-1 nil 3237052399 3237077617 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (rest const-decl "set" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil) (subset? const-decl "bool" sets nil)) 456 170 nil nil)) (choose_add 0 (choose_add-1 nil 3237052399 3237077617 ("" (grind) (("" (typepred " choose(add(x!1, a!1))") (("" (expand "add" -1 1) (("" (expand "member") (("" (expand "choose") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (member const-decl "bool" sets nil) (choose const-decl "(p)" sets nil)) 368 150 nil nil)) (choose_rest_or_TCC1 0 (choose_rest_or_TCC1-1 nil 3237052399 3237077618 ("" (tcc :defs !) nil nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (rest const-decl "set" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil)) 388 150 nil nil)) (choose_rest_or 0 (choose_rest_or-1 nil 3237052399 3237077618 ("" (tcc :defs !) nil nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (rest const-decl "set" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil)) 387 160 nil nil)) (choose_singleton_TCC1 0 (choose_singleton_TCC1-1 nil 3237052399 3237077619 ("" (tcc :defs !) nil nil) proved ((singleton const-decl "(singleton?)" sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 101 60 nil nil)) (choose_singleton 0 (choose_singleton-1 nil 3237052399 3237077619 ("" (skosimp*) (("" (typepred "choose(singleton(x!1))") (("1" (expand "singleton") (("1" (propax) nil nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil) proved ((choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)) 223 80 nil nil)) (rest_singleton 0 (rest_singleton-1 nil 3237052399 3237077620 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (expand "rest") (("" (expand "singleton") (("" (expand "remove") (("" (lift-if) (("" (expand "emptyset") (("" (prop) (("1" (expand "empty?") (("1" (inst -1 "x!1") (("1" (expand "member") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (expand "member") (("2" (expand "choose") (("2" (use "epsilon_ax[T]") (("1" (assert) nil nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (emptyset const-decl "set" sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (rest const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (TRUE const-decl "bool" booleans nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (choose const-decl "(p)" sets nil) (remove const-decl "set" sets nil)) 682 250 nil nil)) (singleton_subset 0 (singleton_subset-1 nil 3237052399 3237077620 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (subset? const-decl "bool" sets nil)) 101 50 nil nil)) (rest_empty_lem 0 (rest_empty_lem-1 nil 3237052399 3237077621 ("" (skosimp*) (("" (expand "extend") (("" (apply-extensionality) (("1" (hide 3) (("1" (lift-if) (("1" (expand "singleton") (("1" (expand "empty?") (("1" (skosimp*) (("1" (expand "member") (("1" (split) (("1" (flatten) (("1" (typepred "choose(a!1)") (("1" (inst -4 "x!1") (("1" (expand "rest") (("1" (expand "remove") (("1" (expand "member") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "nonempty?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((extend const-decl "R" extend nil) (NOT const-decl "[bool -> bool]" booleans nil) (rest const-decl "set" sets nil) (remove const-decl "set" sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (a!1 skolem-const-decl "set[T]" sets_lemmas nil) (set type-eq-decl nil sets nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (singleton? const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (choose const-decl "(p)" sets nil) (FALSE const-decl "bool" booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 799 260 nil nil)) (singleton_disjoint 0 (singleton_disjoint-1 nil 3237052399 3237077621 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (intersection const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (disjoint? const-decl "bool" sets nil)) 297 110 nil nil)) (disjoint_remove_left 0 (disjoint_remove_left-1 nil 3237052399 3237077622 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (disjoint? const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil)) 551 190 nil nil)) (disjoint_remove_right 0 (disjoint_remove_right-1 nil 3237052399 3237077622 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (disjoint? const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil)) 522 220 nil nil)) (union_disj_remove_left 0 (union_disj_remove_left-1 nil 3237052399 3237077623 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (remove const-decl "set" sets nil) (union const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (T formal-type-decl nil sets_lemmas nil) (disjoint? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (member const-decl "bool" sets nil)) 744 280 nil nil)) (union_disj_remove_right 0 (union_disj_remove_right-1 nil 3237052399 3237077624 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (remove const-decl "set" sets nil) (union const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (T formal-type-decl nil sets_lemmas nil) (disjoint? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (member const-decl "bool" sets nil)) 806 290 nil nil)) (subset_powerset 0 (subset_powerset-1 nil 3237053513 3237077624 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (powerset const-decl "setofsets" sets nil)) 98 50 t shostak)) (empty_powerset 0 (empty_powerset-1 nil 3237053527 3237077625 ("" (grind :if-match nil) (("1" (inst 1 "emptyset") (("1" (skolem-typepred) (("1" (grind :if-match nil) (("1" (apply-extensionality) (("1" (inst -2 "x!1") (("1" (inst -3 "x!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (inst-cp -3 "emptyset") (("1" (inst -3 "a!1") (("1" (replace -3 :hide? t) (("1" (decompose-equality) (("1" (hide -2) (("1" (inst -1 "x!1") (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (emptyset const-decl "set" sets nil) (a!1 skolem-const-decl "set[T]" sets_lemmas nil) (subset? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (set type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (singleton? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 1516 540 t shostak)) (nonempty_powerset 0 (nonempty_powerset-1 nil 3237054070 3237077626 ("" (grind :if-match nil) (("" (inst -1 "emptyset") (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (emptyset const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (powerset const-decl "setofsets" sets nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 398 150 t shostak)))(function_inverse (unique_bijective_inverse 0 (unique_bijective_inverse-1 nil 3237052399 3237077627 ("" (skolem-typepred) (("" (grind :if-match nil) (("" (inst? -2) (("" (skosimp) (("" (replace -2 :dir rl) (("" (use "epsilon_ax[D]") (("" (split) (("1" (propax) nil nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((inverse const-decl "D" function_inverse nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (bijective? const-decl "bool" functions nil) (R formal-type-decl nil function_inverse nil) (D formal-nonempty-type-decl nil function_inverse nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 587 220 nil nil)) (bijective_inverse_is_bijective 0 (bijective_inverse_is_bijective-1 nil 3237052399 3237077628 ("" (skolem-typepred) (("" (grind :if-match nil) (("1" (inst 1 "f!1(y!1)") (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (split) (("1" (inst? -2) (("1" (assert) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (use "epsilon_ax[D]") (("2" (split) (("1" (lemma "epsilon_ax[D]") (("1" (inst -1 "lambda (x: D): f!1(x) = x2!1") (("1" (split) (("1" (assert) nil nil) ("2" (inst -3 "x2!1") nil nil)) nil)) nil)) nil) ("2" (inst -2 "x1!1") nil nil)) nil)) nil)) nil)) nil) proved ((inverse const-decl "D" function_inverse nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon const-decl "T" epsilons nil) (bijective? const-decl "bool" functions nil) (R formal-type-decl nil function_inverse nil) (D formal-nonempty-type-decl nil function_inverse nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 1440 500 nil nil)) (surjective_inverse 0 (surjective_inverse-1 nil 3237052399 3237077628 ("" (skosimp) (("" (expand "inverse") (("" (lemma "epsilon_ax[D]") (("" (inst -1 "LAMBDA (x:D): f!1(x) = y!1") (("" (prop) (("1" (replace -2) (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil) ("2" (typepred "f!1") (("2" (expand "surjective?") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((inverse const-decl "D" function_inverse nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (R formal-type-decl nil function_inverse nil) (= const-decl "[T, T -> boolean]" equalities nil) (surjective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (epsilon_ax formula-decl nil epsilons nil) (D formal-nonempty-type-decl nil function_inverse nil)) 196 70 nil nil)) (injective_inverse 0 (injective_inverse-1 nil 3237052399 3237077629 ("" (skosimp) (("" (expand "inverse") (("" (typepred "f!1") (("" (expand "injective?") (("" (lemma "epsilon_ax[D]") (("" (inst -1 "LAMBDA (x:D): f!1(x) = y!1") (("" (prop) (("1" (replace -3) (("1" (inst?) (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (inst?) (("2" (replace -2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((inverse const-decl "D" function_inverse nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (epsilon_ax formula-decl nil epsilons nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (injective? const-decl "bool" functions nil)) 345 90 nil nil)) (bijective_inverse 0 (bijective_inverse-1 nil 3237052399 3237077629 ("" (skosimp) (("" (split) (("1" (rewrite "surjective_inverse") (("1" (typepred "f!1") (("1" (expand "bijective?") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (rewrite "injective_inverse") (("2" (typepred "f!1") (("2" (expand "bijective?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (R formal-type-decl nil function_inverse nil) (D formal-nonempty-type-decl nil function_inverse nil) (surjective_inverse formula-decl nil function_inverse nil) (injective? const-decl "bool" functions nil) (injective_inverse formula-decl nil function_inverse nil)) 366 80 nil nil)) (bij_inv_is_bij 0 (bij_inv_is_bij-1 nil 3237052399 3237077630 ("" (skosimp*) (("" (expand "bijective?") (("" (expand "injective?") (("" (expand "surjective?") (("" (flatten) (("" (split) (("1" (skosimp*) (("1" (lemma "bijective_inverse") (("1" (inst?) (("1" (assert) (("1" (expand "inverse" -1) (("1" (lemma "epsilon_ax[D]") (("1" (inst?) (("1" (split) (("1" (assert) nil nil) ("2" (inst -4 "x2!1") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "bijective?") (("2" (expand "injective?") (("2" (assert) (("2" (replace -2) (("2" (expand "surjective?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst 1 "f!1(y!1)") (("2" (rewrite "injective_inverse") (("2" (expand "injective?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective_inverse formula-decl nil function_inverse nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (inverse const-decl "D" function_inverse nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (f!1 skolem-const-decl "[D -> R]" function_inverse nil) (injective_inverse formula-decl nil function_inverse nil) (injective? const-decl "bool" functions nil)) 738 260 nil nil)) (surj_right 0 (surj_right-1 nil 3237052399 3237077631 ("" (grind) (("" (lemma "epsilon_ax[D]") (("" (inst?) (("" (split) (("1" (propax) nil nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (R formal-type-decl nil function_inverse nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (right_inverse? const-decl "bool" function_inverse nil) (inverse const-decl "D" function_inverse nil) (surjective? const-decl "bool" functions nil)) 835 300 nil nil)) (inj_left 0 (inj_left-1 nil 3237052399 3237077632 ("" (skosimp) (("" (prop) (("1" (grind) (("1" (lemma "epsilon_ax[D]") (("1" (inst?) (("1" (assert) (("1" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil) ("2" (expand "left_inverse?") (("2" (expand "inverse") (("2" (expand "injective?") (("2" (skosimp) (("2" (inst-cp -1 "x1!1") (("2" (inst -1 "x2!1") (("2" (assert) (("2" (replace -3) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (D formal-nonempty-type-decl nil function_inverse nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (R formal-type-decl nil function_inverse nil) (= const-decl "[T, T -> boolean]" equalities nil) (left_inverse? const-decl "bool" function_inverse nil) (inverse const-decl "D" function_inverse nil) (injective? const-decl "bool" functions nil)) 824 320 nil nil)) (inj_inv 0 (inj_inv-1 nil 3237052399 3237077632 ("" (skosimp) (("" (expand "surjective?") (("" (expand "injective?") (("" (expand "inverse") (("" (skosimp) (("" (inst-cp -1 "x1!1") (("" (inst -1 "x2!1") (("" (skosimp) (("" (skosimp) (("" (lemma "epsilon_ax[D]") (("" (inst-cp -1 "LAMBDA (x:D): f!1(x)=x1!1") (("" (inst -1 "LAMBDA (x:D): f!1(x)=x2!1") (("" (prop) (("1" (replace -5) (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil) ("2" (inst?) nil nil) ("3" (inst?) nil nil) ("4" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((surjective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil) (R formal-type-decl nil function_inverse nil) (epsilon_ax formula-decl nil epsilons nil) (D formal-nonempty-type-decl nil function_inverse nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (injective? const-decl "bool" functions nil)) 498 160 nil nil)) (surj_inv 0 (surj_inv-1 nil 3237052399 3237077633 ("" (skosimp) (("" (expand "surjective?") (("" (expand "injective?") (("" (skosimp) (("" (expand "inverse") (("" (inst -1 "y!1" _) (("" (inst 1 "f!1(y!1)") (("" (inst -1 "(epsilon ! (x_5: D): f!1(x_5) = f!1(y!1))") (("" (prop) (("1" (replace -1) (("1" (replace -1 :dir rl) (("1" (replace -1 :dir rl) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (lemma "epsilon_ax[D]") (("2" (inst?) (("2" (prop) (("1" (replace -1) (("1" (propax) nil nil)) nil) ("2" (inst 1 "y!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((surjective? const-decl "bool" functions nil) (D formal-nonempty-type-decl nil function_inverse nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon_ax formula-decl nil epsilons nil) (R formal-type-decl nil function_inverse nil) (inverse const-decl "D" function_inverse nil) (injective? const-decl "bool" functions nil)) 317 110 nil nil)) (inv_inj_is_surj 0 (inv_inj_is_surj-1 nil 3237052399 3237077633 ("" (grind :if-match nil) (("" (inst 1 "f!1(y!1)") (("" (inst? -1) (("" (assert) (("" (lemma "epsilon_ax[D]") (("" (inst?) (("" (assert) (("" (inst 1 "y!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil)) 508 190 nil nil)) (inv_surj_is_inj 0 (inv_surj_is_inj-1 nil 3237052399 3237077634 ("" (grind :if-match nil) (("" (inst-cp -1 "x1!1") (("" (inst -1 "x2!1") (("" (skosimp*) (("" (lemma "epsilon_ax[D]") (("" (lemma "epsilon_ax[D]") (("" (inst?) (("" (inst -2 "LAMBDA (x: D): f!1(x) = x2!1") (("" (assert) (("" (prop) (("1" (assert) nil nil) ("2" (inst 1 "x!1") nil nil) ("3" (inst 1 "x!2") nil nil) ("4" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon_ax formula-decl nil epsilons nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil)) 697 270 nil nil)) (comp_inverse_right_surj 0 (comp_inverse_right_surj-1 nil 3237052399 3237077634 ("" (grind :if-match nil) (("" (use "epsilon_ax[D]") (("" (assert) (("" (inst? -1) nil nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (surjective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil)) 396 150 nil nil)) (comp_inverse_left_inj 0 (comp_inverse_left_inj-1 nil 3237052399 3237077635 ("" (grind :if-match nil) (("" (use "epsilon_ax[D]") (("" (split) (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon const-decl "T" epsilons nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (injective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil)) 479 190 nil nil)) (comp_inverse_right 0 (comp_inverse_right-1 nil 3237052399 3237077635 ("" (skosimp) (("" (lemma "comp_inverse_right_surj") (("" (inst?) (("" (typepred "f!1") (("" (expand "bijective?") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((comp_inverse_right_surj formula-decl nil function_inverse nil) (NOT const-decl "[bool -> bool]" booleans nil) (f!1 skolem-const-decl "(bijective?[D, R])" function_inverse nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil)) 153 50 nil nil)) (comp_inverse_left 0 (comp_inverse_left-1 nil 3237052399 3237077635 ("" (skolem-typepred) (("" (expand "bijective?") (("" (lemma "comp_inverse_left_inj") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((injective? const-decl "bool" functions nil) (f!1 skolem-const-decl "(bijective?[D, R])" function_inverse nil) (comp_inverse_left_inj formula-decl nil function_inverse nil) (bijective? const-decl "bool" functions nil) (R formal-type-decl nil function_inverse nil) (D formal-nonempty-type-decl nil function_inverse nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 137 50 nil nil)))(function_image (fun_exists 0 (fun_exists-1 nil 3237052399 3237077636 ("" (flatten) (("" (split) (("1" (skosimp) (("1" (inst 1 "LAMBDA (x:D): y!1") nil nil)) nil) ("2" (inst 2 "LAMBDA (x:D): epsilon! (y:R): TRUE") (("2" (skolem-typepred) (("2" (inst 2 "x1!1") nil nil)) nil)) nil)) nil)) nil) unfinished nil 128 40 nil nil)) (image_inverse_image 0 (image_inverse_image-1 nil 3237052399 3237077636 ("" (grind) nil nil) proved ((inverse_image const-decl "set[D]" function_image nil) (set type-eq-decl nil sets nil) (R formal-type-decl nil function_image nil) (D formal-type-decl nil function_image nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (image const-decl "set[R]" function_image nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 337 110 nil nil)) (inverse_image_image 0 (inverse_image_image-1 nil 3237052399 3237077636 ("" (grind) nil nil) proved ((D formal-type-decl nil function_image nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (image const-decl "set[R]" function_image nil) (inverse_image const-decl "set[D]" function_image nil) (subset? const-decl "bool" sets nil)) 305 110 nil nil)) (image_subset 0 (image_subset-1 nil 3237052399 3237077637 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil function_image nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (image const-decl "set[R]" function_image nil)) 613 180 nil nil)) (inverse_image_subset 0 (inverse_image_subset-1 nil 3237052399 3237077637 ("" (grind) nil nil) proved ((D formal-type-decl nil function_image nil) (R formal-type-decl nil function_image nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (inverse_image const-decl "set[D]" function_image nil)) 353 140 nil nil)) (image_union 0 (image_union-1 nil 3237052399 3237077639 ("" (grind) (("" (apply-extensionality) (("" (iff) (("" (grind) nil nil)) nil)) nil)) nil) proved ((R formal-type-decl nil function_image nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil) (image const-decl "set[R]" function_image nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (D formal-type-decl nil function_image nil) (member const-decl "bool" sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (x!2 skolem-const-decl "(union(X1!1, X2!1))" function_image nil) (X2!1 skolem-const-decl "set[D]" function_image nil) (X1!1 skolem-const-decl "set[D]" function_image nil)) 1375 550 nil nil)) (image_intersection 0 (image_intersection-1 nil 3237052399 3237077640 ("" (grind) nil nil) proved ((X2!1 skolem-const-decl "set[D]" function_image nil) (X1!1 skolem-const-decl "set[D]" function_image nil) (x!2 skolem-const-decl "(intersection(X1!1, X2!1))" function_image nil) (set type-eq-decl nil sets nil) (D formal-type-decl nil function_image nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (image const-decl "set[R]" function_image nil) (member const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (subset? const-decl "bool" sets nil)) 652 200 nil nil)) (inverse_image_union 0 (inverse_image_union-1 nil 3237052399 3237077640 ("" (grind) (("" (apply-extensionality) nil nil)) nil) proved ((R formal-type-decl nil function_image nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (inverse_image const-decl "set[D]" function_image nil) (union const-decl "set" sets nil) (member const-decl "bool" sets nil) (D formal-type-decl nil function_image nil) (boolean nonempty-type-decl nil booleans nil)) 448 160 nil nil)) (inverse_image_intersection 0 (inverse_image_intersection-1 nil 3237052399 3237077641 ("" (grind) (("" (apply-extensionality) nil nil)) nil) proved ((R formal-type-decl nil function_image nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (inverse_image const-decl "set[D]" function_image nil) (intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (D formal-type-decl nil function_image nil) (boolean nonempty-type-decl nil booleans nil)) 431 160 nil nil)) (inverse_image_complement 0 (inverse_image_complement-1 nil 3237052399 3237077641 ("" (grind) (("" (apply-extensionality) nil nil)) nil) proved ((R formal-type-decl nil function_image nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (inverse_image const-decl "set[D]" function_image nil) (complement const-decl "set" sets nil) (member const-decl "bool" sets nil) (D formal-type-decl nil function_image nil) (boolean nonempty-type-decl nil booleans nil)) 427 150 nil nil)))(function_props (composition_injective 0 (composition_injective-1 nil 3237052399 3237077642 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil function_props nil) (T2 formal-type-decl nil function_props nil) (T3 formal-type-decl nil function_props nil) (O const-decl "T3" function_props nil) (injective? const-decl "bool" functions nil)) 518 200 nil nil)) (composition_surjective 0 (composition_surjective-1 nil 3237052399 3237077642 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil function_props nil) (T2 formal-type-decl nil function_props nil) (T3 formal-type-decl nil function_props nil) (O const-decl "T3" function_props nil) (surjective? const-decl "bool" functions nil)) 614 220 nil nil)) (composition_bijective 0 (composition_bijective-1 nil 3237052399 3237077645 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil function_props nil) (T2 formal-type-decl nil function_props nil) (T3 formal-type-decl nil function_props nil) (O const-decl "T3" function_props nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil)) 2565 1170 nil nil)) (image_composition 0 (image_composition-1 nil 3237052399 3237077646 ("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil) proved ((T3 formal-type-decl nil function_props nil) (boolean nonempty-type-decl nil booleans nil) (O const-decl "T3" function_props nil) (T1 formal-type-decl nil function_props nil) (image const-decl "set[R]" function_image nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (T2 formal-type-decl nil function_props nil) (x!2 skolem-const-decl "(X!1)" function_props nil) (f1!1 skolem-const-decl "[T1 -> T2]" function_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (X!1 skolem-const-decl "set[T1]" function_props nil) (NOT const-decl "[bool -> bool]" booleans nil)) 1340 470 nil nil)) (preserves_composition 0 (preserves_composition-1 nil 3237052399 3237077647 ("" (grind) nil nil) proved ((T1 formal-type-decl nil function_props nil) (T2 formal-type-decl nil function_props nil) (preserves const-decl "bool" functions nil) (O const-decl "T3" function_props nil)) 927 260 nil nil)) (inverts_composition1 0 (inverts_composition1-1 nil 3237052399 3237077648 ("" (grind) nil nil) proved ((T1 formal-type-decl nil function_props nil) (T2 formal-type-decl nil function_props nil) (preserves const-decl "bool" functions nil) (inverts const-decl "bool" functions nil) (O const-decl "T3" function_props nil)) 696 240 nil nil)) (inverts_composition2 0 (inverts_composition2-1 nil 3237052399 3237077649 ("" (grind) nil nil) proved ((T1 formal-type-decl nil function_props nil) (T2 formal-type-decl nil function_props nil) (inverts const-decl "bool" functions nil) (preserves const-decl "bool" functions nil) (O const-decl "T3" function_props nil)) 803 290 nil nil)))(function_props_alt (composition_preserves 0 (composition_preserves-1 nil 3237052399 3237077650 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil function_props_alt nil) (T2 formal-type-decl nil function_props_alt nil) (PRED type-eq-decl nil defined_types nil) (R1 formal-const-decl "PRED[[T1, T1]]" function_props_alt nil) (R2 formal-const-decl "PRED[[T2, T2]]" function_props_alt nil) (T3 formal-type-decl nil function_props_alt nil) (R3 formal-const-decl "PRED[[T3, T3]]" function_props_alt nil) (preserves const-decl "[[D -> R] -> bool]" functions_alt nil) (O const-decl "T3" function_props nil) (preserves const-decl "bool" functions nil) (preserves const-decl "bool" functions nil)) 784 270 nil nil)) (composition_inverts1 0 (composition_inverts1-1 nil 3237052399 3237077651 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil function_props_alt nil) (T2 formal-type-decl nil function_props_alt nil) (PRED type-eq-decl nil defined_types nil) (R1 formal-const-decl "PRED[[T1, T1]]" function_props_alt nil) (R2 formal-const-decl "PRED[[T2, T2]]" function_props_alt nil) (T3 formal-type-decl nil function_props_alt nil) (R3 formal-const-decl "PRED[[T3, T3]]" function_props_alt nil) (preserves const-decl "[[D -> R] -> bool]" functions_alt nil) (preserves const-decl "bool" functions nil) (preserves const-decl "bool" functions nil) (inverts const-decl "[[D -> R] -> bool]" functions_alt nil) (O const-decl "T3" function_props nil) (inverts const-decl "bool" functions nil) (inverts const-decl "bool" functions nil)) 856 280 nil nil)) (composition_inverts2 0 (composition_inverts2-1 nil 3237052399 3237077651 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil function_props_alt nil) (T2 formal-type-decl nil function_props_alt nil) (PRED type-eq-decl nil defined_types nil) (R1 formal-const-decl "PRED[[T1, T1]]" function_props_alt nil) (R2 formal-const-decl "PRED[[T2, T2]]" function_props_alt nil) (preserves const-decl "[[D -> R] -> bool]" functions_alt nil) (T3 formal-type-decl nil function_props_alt nil) (R3 formal-const-decl "PRED[[T3, T3]]" function_props_alt nil) (preserves const-decl "bool" functions nil) (preserves const-decl "bool" functions nil) (inverts const-decl "[[D -> R] -> bool]" functions_alt nil) (O const-decl "T3" function_props nil) (inverts const-decl "bool" functions nil) (inverts const-decl "bool" functions nil)) 684 280 nil nil)))(function_props2 (assoc 0 (assoc-1 nil 3237052399 3237077652 ("" (skolem 1 ("f!1" "g!1" "h!1")) (("" (expand "o") (("" (propax) nil nil)) nil)) nil) proved ((O const-decl "T3" function_props nil)) 124 20 nil nil)))(relation_defs)(relation_props (total_composition 0 (total_composition-1 nil 3237052399 3237077652 ("" (grind) nil nil) proved ((T2 formal-type-decl nil relation_props nil) (T3 formal-type-decl nil relation_props nil) (T1 formal-type-decl nil relation_props nil) (total? const-decl "bool" relation_defs nil) (O const-decl "bool" relation_props nil)) 577 220 nil nil)) (onto_composition 0 (onto_composition-1 nil 3237052399 3237077653 ("" (grind) nil nil) proved ((T2 formal-type-decl nil relation_props nil) (T1 formal-type-decl nil relation_props nil) (T3 formal-type-decl nil relation_props nil) (onto? const-decl "bool" relation_defs nil) (O const-decl "bool" relation_props nil)) 634 210 nil nil)) (composition_total 0 (composition_total-1 nil 3237052399 3237077653 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil relation_props nil) (T2 formal-type-decl nil relation_props nil) (pred type-eq-decl nil defined_types nil) (T3 formal-type-decl nil relation_props nil) (O const-decl "bool" relation_props nil) (total? const-decl "bool" relation_defs nil)) 627 210 nil nil)) (composition_onto 0 (composition_onto-1 nil 3237052399 3237077654 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil relation_props nil) (T2 formal-type-decl nil relation_props nil) (pred type-eq-decl nil defined_types nil) (T3 formal-type-decl nil relation_props nil) (O const-decl "bool" relation_props nil) (onto? const-decl "bool" relation_defs nil)) 551 200 nil nil)))(relation_props2 (assoc 0 (assoc-1 nil 3237052399 3237077655 ("" (skosimp) (("" (apply-extensionality) (("" (hide 2) (("" (expand "o") (("" (iff) (("" (prop) (("1" (skosimp) (("1" (skosimp) (("1" (inst?) (("1" (assert) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (assert) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T1 formal-type-decl nil relation_props2 nil) (T4 formal-type-decl nil relation_props2 nil) (boolean nonempty-type-decl nil booleans nil) (T2 formal-type-decl nil relation_props2 nil) (O const-decl "bool" relation_props nil) (pred type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (T3 formal-type-decl nil relation_props2 nil)) 614 240 nil nil)))(indexed_sets (IUnion_Union 0 (IUnion_Union-1 nil 3237054186 3237077656 ("" (grind) (("" (apply-extensionality :hide? t) (("" (iff) (("" (prop) (("1" (skolem-typepred) (("1" (inst 1 "A!1(i!1)") (("1" (inst 1 "i!1") nil nil)) nil)) nil) ("2" (skolem-typepred) (("2" (grind :if-match nil) (("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (fullset const-decl "set" sets nil) (image const-decl "set[R]" function_image nil) (Union const-decl "set" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (IUnion const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (A!1 skolem-const-decl "[index -> set[T]]" indexed_sets nil) (i!1 skolem-const-decl "index" indexed_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (image const-decl "set[R]" function_image nil)) 984 300 t shostak)) (IIntersection_Intersection 0 (IIntersection_Intersection-1 nil 3237054338 3237077657 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) (("" (iff) (("" (prop) (("1" (skolem-typepred) (("1" (grind :if-match nil) (("1" (inst -3 "x!2") nil nil)) nil)) nil) ("2" (skolem-typepred) (("2" (inst -1 "A!1(i!1)") (("2" (inst 1 "i!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (fullset const-decl "set" sets nil) (image const-decl "set[R]" function_image nil) (Intersection const-decl "set" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (IIntersection const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (A!1 skolem-const-decl "[index -> set[T]]" indexed_sets nil) (i!1 skolem-const-decl "index" indexed_sets nil) (image const-decl "set[R]" function_image nil)) 1132 330 t shostak)) (IUnion_union 0 (IUnion_union-1 nil 3237054431 3237077658 ("" (skolem-typepred) (("" (apply-extensionality :hide? t) (("" (iff) (("" (grind :if-match nil) (("1" (inst 1 "i!1") nil nil) ("2" (inst 2 "i!1") nil nil) ("3" (inst 1 "i!1") (("3" (assert) nil nil)) nil) ("4" (inst 1 "i!1") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil) (IUnion const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (member const-decl "bool" sets nil)) 1213 390 t shostak)) (IIntersection_intersection 0 (IIntersection_intersection-1 nil 3237054514 3237077660 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) (("" (grind :if-match nil) (("1" (inst -1 "i!1") (("1" (assert) nil nil)) nil) ("2" (inst -1 "i!1") (("2" (assert) nil nil)) nil) ("3" (inst -2 "i!1") nil nil) ("4" (inst -1 "i!1") nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (intersection const-decl "set" sets nil) (IIntersection const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (member const-decl "bool" sets nil)) 1545 500 t shostak)) (IUnion_intersection 0 (IUnion_intersection-1 nil 3237054595 3237077661 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) (("" (grind :if-match nil) (("" (inst 1 "i!1") nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (intersection const-decl "set" sets nil) (IUnion const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (member const-decl "bool" sets nil)) 732 240 t shostak)) (IIntersection_union 0 (IIntersection_union-1 nil 3237054623 3237077661 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) (("" (grind :if-match nil) (("" (inst?) nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil) (IIntersection const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (member const-decl "bool" sets nil)) 747 250 t shostak)))(operator_defs)(numbers)(reals (nonzero_real_TCC1 0 (nonzero_real_TCC1-1 nil 3237052399 3237077662 ("" (grind) nil nil) proved ((/= const-decl "boolean" notequal nil)) 39 20 nil nil)) (reals_totally_ordered 0 (reals_totally_ordered-1 nil 3237052399 3237077662 ("" (grind) nil nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (strict_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (strict_total_order? const-decl "bool" orders nil)) 528 170 nil nil)))(real_axioms (commutative_add 0 (commutative_add-1 nil 3237052399 3237077662 ("" (grind) nil nil) proved nil 32 10 nil nil)) (associative_add 0 (associative_add-1 nil 3237052399 3237077662 ("" (grind) nil nil) proved nil 52 20 nil nil)) (identity_add 0 (identity_add-1 nil 3237052399 3237077662 ("" (grind) nil nil) proved nil 34 20 nil nil)) (inverse_add 0 (inverse_add-1 nil 3237052399 3237077663 ("" (grind) nil nil) proved nil 34 20 nil nil)) (minus_add 0 (minus_add-1 nil 3237052399 3237077663 ("" (grind) nil nil) proved nil 37 20 nil nil)) (commutative_mult 0 (commutative_mult-1 nil 3237052399 3237077663 ("" (grind) nil nil) proved nil 57 20 nil nil)) (associative_mult 0 (associative_mult-1 nil 3237052399 3237077663 ("" (grind) nil nil) proved nil 95 10 nil nil)) (identity_mult 0 (identity_mult-1 nil 3237052399 3237077663 ("" (grind) nil nil) proved nil 42 20 nil nil)) (inverse_mult 0 (inverse_mult-1 nil 3237052399 3237077663 ("" (grind) nil nil) proved nil 17 10 nil nil)) (div_def 0 (div_def-1 nil 3237052399 3237077663 ("" (grind) nil nil) proved nil 18 20 nil nil)) (distributive 0 (distributive-1 nil 3237052399 3237077663 ("" (grind) nil nil) proved nil 20 20 nil nil)) (posreal_add_closed 0 (posreal_add_closed-1 nil 3237052399 3237077663 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 165 80 nil nil)) (posreal_neg 0 (posreal_neg-1 nil 3237052399 3237077664 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 178 50 nil nil)) (trichotomy 0 (trichotomy-1 nil 3237052399 3237077664 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 149 60 nil nil)))(bounded_real_defs (real_lower_complete 0 (real_lower_complete-1 nil 3237052399 3237077665 ("" (lemma "real_complete") (("" (skosimp) (("" (inst -1 "{x: real | S!1(-x)}") (("1" (skosimp) (("1" (split) (("1" (skosimp) (("1" (expand "least_upper_bound?") (("1" (inst 1 "-y!2") (("1" (expand "greatest_lower_bound?") (("1" (hide -2) (("1" (prop) (("1" (expand "upper_bound?") (("1" (expand "lower_bound?") (("1" (skosimp) (("1" (inst -1 "-s!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -3 "-y!3") (("2" (hide -2) (("2" (expand "lower_bound?") (("2" (expand "upper_bound?") (("2" (split) (("1" (assert) nil nil) ("2" (skosimp) (("2" (inst -1 "-s!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (inst 1 "-y!1") (("2" (expand "upper_bound?") (("2" (skosimp) (("2" (expand "lower_bound?") (("2" (inst -1 "-s!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "S!1") (("2" (hide -2 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (skosimp) (("2" (expand "member") (("2" (inst -2 "-x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (upper_bound? const-decl "bool" bounded_real_defs nil) (lower_bound? const-decl "bool" bounded_real_defs nil) (greatest_lower_bound? const-decl "bool" bounded_real_defs nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) (S!1 skolem-const-decl "(nonempty?[real])" bounded_real_defs nil) (- const-decl "[real -> real]" reals nil) (real_complete formula-decl nil bounded_real_defs nil)) 996 260 nil nil)) (lub_exists 0 (lub_exists-1 nil 3237052399 3237077665 ("" (skolem-typepred) (("" (use "real_complete") (("" (assert) (("" (replace 1) (("" (assert) (("" (expand "bounded_above?") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real_complete formula-decl nil bounded_real_defs nil) (bounded_above? const-decl "bool" bounded_real_defs nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 176 50 nil nil)) (lub_TCC1 0 (lub_TCC1-1 nil 3237052399 3237077666 ("" (use "real_complete") (("" (inst 1 "LAMBDA (S:(bounded_above?)): epsilon! (x:real): least_upper_bound?(x, S)") (("" (skosimp) (("" (use "epsilon_ax[real]") (("" (assert) (("" (inst? -1) (("" (typepred "S!1") (("" (split) (("1" (propax) nil nil) ("2" (expand "bounded_above?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) (bounded_above? const-decl "bool" bounded_real_defs nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (epsilon_ax formula-decl nil epsilons nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_complete formula-decl nil bounded_real_defs nil)) 399 120 nil nil)) (lub_lem 0 (lub_lem-1 nil 3237052399 3237077666 ("" (skosimp) (("" (typepred "lub(SA!1)") (("" (assert) (("" (prop) (("1" (assert) nil nil) ("2" (grind :if-match nil) (("2" (inst -2 "lub(SA!1)") (("2" (inst -4 "x!1") (("2" (replace -1) (("2" (replace -3) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs nil) (bounded_above? const-decl "bool" bounded_real_defs nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (upper_bound? const-decl "bool" bounded_real_defs nil)) 666 270 nil nil)) (glb_exists 0 (glb_exists-1 nil 3237052399 3237077667 ("" (skosimp) (("" (use "real_lower_complete") (("" (assert) (("" (split) (("1" (propax) nil nil) ("2" (typepred "SB!1") (("2" (expand "bounded_below?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real_lower_complete formula-decl nil bounded_real_defs nil) (bounded_below? const-decl "bool" bounded_real_defs nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil)) 199 60 nil nil)) (glb_TCC1 0 (glb_TCC1-1 nil 3237052399 3237077667 ("" (inst 1 "LAMBDA (S:(bounded_below?)): epsilon! (x:real): greatest_lower_bound?(x, S)") (("" (skolem-typepred) (("" (use "epsilon_ax[real]") (("" (assert) (("" (expand "bounded_below?") (("" (use "real_lower_complete") (("" (assert) (("" (replace -3) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (real_lower_complete formula-decl nil bounded_real_defs nil) (epsilon_ax formula-decl nil epsilons nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (greatest_lower_bound? const-decl "bool" bounded_real_defs nil) (bounded_below? const-decl "bool" bounded_real_defs nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 323 130 nil nil)) (glb_lem 0 (glb_lem-1 nil 3237052399 3237077668 ("" (skosimp) (("" (typepred "glb(SB!1)") (("" (prop) (("1" (assert) nil nil) ("2" (grind :if-match nil) (("2" (inst -2 "glb(SB!1)") (("2" (inst -4 "x!1") (("2" (prop) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((glb const-decl "{x | greatest_lower_bound?(x, SB)}" bounded_real_defs nil) (bounded_below? const-decl "bool" bounded_real_defs nil) (greatest_lower_bound? const-decl "bool" bounded_real_defs nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (lower_bound? const-decl "bool" bounded_real_defs nil)) 691 250 nil nil)))(bounded_real_defs_alt (S_TCC1 0 (S_TCC1-1 nil 3237052399 3237077668 ("" (inst 1 "singleton(0)") (("" (expand "nonempty?") (("" (expand "empty?") (("" (inst -1 "0") (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 174 50 nil nil)) (lub_is_upper_bound 0 (lub_is_upper_bound-1 nil 3237052399 3237077668 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (least_upper_bound? const-decl "[real -> bool]" bounded_real_defs_alt nil) (S formal-const-decl "(nonempty?[real])" bounded_real_defs_alt nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (upper_bound? const-decl "[real -> bool]" bounded_real_defs_alt nil) (upper_bound? const-decl "bool" bounded_real_defs nil) (upper_bound? const-decl "bool" bounded_real_defs nil)) 299 120 nil nil)) (glb_is_lower_bound 0 (glb_is_lower_bound-1 nil 3237052399 3237077669 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (greatest_lower_bound? const-decl "[real -> bool]" bounded_real_defs_alt nil) (S formal-const-decl "(nonempty?[real])" bounded_real_defs_alt nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (greatest_lower_bound? const-decl "bool" bounded_real_defs nil) (greatest_lower_bound? const-decl "bool" bounded_real_defs nil) (lower_bound? const-decl "[real -> bool]" bounded_real_defs_alt nil) (lower_bound? const-decl "bool" bounded_real_defs nil) (lower_bound? const-decl "bool" bounded_real_defs nil)) 280 110 nil nil)))(real_types (posreal_is_nzreal 0 (posreal_is_nzreal-1 nil 3237052399 3237077669 ("" (subtype-tcc) nil nil) proved nil 36 20 nil nil)) (negreal_is_nzreal 0 (negreal_is_nzreal-1 nil 3237052399 3237077669 ("" (subtype-tcc) nil nil) proved nil 101 20 nil nil)) (nonneg_real_add_closed 0 (nonneg_real_add_closed-1 nil 3237052399 3237077669 ("" (grind) nil nil) proved nil 39 20 nil nil)) (nonpos_real_add_closed 0 (nonpos_real_add_closed-1 nil 3237052399 3237077669 ("" (grind) nil nil) proved nil 50 20 nil nil)) (negreal_add_closed 0 (negreal_add_closed-1 nil 3237052399 3237077669 ("" (grind) nil nil) proved nil 21 20 nil nil)) (nonneg_real_mult_closed 0 (nonneg_real_mult_closed-1 nil 3237052399 3237077670 ("" (grind) (("" (case "nnx!1 = 0") (("1" (assert) nil nil) ("2" (case "nny!1 = 0") (("1" (assert) nil nil) ("2" (lemma "posreal_mult_closed") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (posreal_mult_closed formula-decl nil real_axioms nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil)) 317 130 nil nil)) (nzreal_times_nzreal_is_nzreal 0 (nzreal_times_nzreal_is_nzreal-1 nil 3237052399 3237077670 ("" (lemma "posreal_mult_closed") (("" (skosimp) (("" (case "nzx!1 > 0") (("1" (case "nzy!1 > 0") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (inst -2 "nzx!1" "-nzy!1") (("2" (assert) nil nil)) nil)) nil) ("2" (case "nzy!1 > 0") (("1" (inst -2 "-nzx!1" "nzy!1") (("1" (assert) nil nil)) nil) ("2" (inst -1 "-nzx!1" "-nzy!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((- const-decl "[real -> real]" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil) (posreal_mult_closed formula-decl nil real_axioms nil)) 373 120 nil nil)) (nzreal_div_nzreal_is_nzreal 0 (nzreal_div_nzreal_is_nzreal-1 nil 3237052399 3237077671 ("" (lemma "nzreal_times_nzreal_is_nzreal") (("" (skosimp) (("" (inst -1 "nzx!1" "1/nzy!1") (("1" (assert) nil nil) ("2" (assert) (("2" (lemma "inverse_mult") (("2" (inst?) (("2" (prop) (("2" (replace -2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((inverse_mult formula-decl nil real_axioms nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (/ const-decl "[real, nzreal -> real]" reals nil) (nzy!1 skolem-const-decl "nzreal" real_types nil) (nzreal_times_nzreal_is_nzreal subtype-tcc nil real_types nil)) 285 100 nil nil)) (minus_nzreal_is_nzreal 0 (minus_nzreal_is_nzreal-1 nil 3237052399 3237077671 ("" (subtype-tcc) nil nil) proved nil 29 10 nil nil)) (nnreal_plus_nnreal_is_nnreal 0 (nnreal_plus_nnreal_is_nnreal-1 nil 3237052399 3237077671 ("" (subtype-tcc) nil nil) proved nil 39 20 nil nil)) (nnreal_times_nnreal_is_nnreal 0 (nnreal_times_nnreal_is_nnreal-1 nil 3237052399 3237077671 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (case "nnx!1 = 0") (("1" (assert) nil nil) ("2" (case "nny!1 = 0") (("1" (assert) nil nil) ("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil)) 221 80 nil nil)) (nnreal_div_posreal_is_nnreal 0 (nnreal_div_posreal_is_nnreal-1 nil 3237052399 3237077672 ("" (grind) (("" (lemma "posreal_mult_closed") (("" (case "nnx!1 = 0") (("1" (assert) nil nil) ("2" (inst -1 "nnx!1" "1/py!1") (("2" (assert) (("2" (lemma "inverse_mult") (("2" (inst -1 "py!1") (("2" (assert) (("2" (name-replace "a" "1/py!1") (("2" (assert) (("2" (lemma "posreal_mult_closed") (("2" (case-replace "a = 0") (("1" (assert) nil nil) ("2" (inst -1 "py!1" "-a") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil) (/ const-decl "[real, nzreal -> real]" reals nil) (inverse_mult formula-decl nil real_axioms nil) (- const-decl "[real -> real]" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 769 290 nil nil)) (nnreal_div_negreal_is_npreal 0 (nnreal_div_negreal_is_npreal-1 nil 3237052399 3237077672 ("" (skosimp) (("" (lemma "nnreal_div_posreal_is_nnreal") (("" (inst -1 "nnx!1" "-ny!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((nnreal_div_posreal_is_nnreal subtype-tcc nil real_types nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 170 50 nil nil)) (npreal_plus_npreal_is_npreal 0 (npreal_plus_npreal_is_npreal-1 nil 3237052399 3237077672 ("" (subtype-tcc) nil nil) proved nil 63 30 nil nil)) (npreal_times_npreal_is_nnreal 0 (npreal_times_npreal_is_nnreal-1 nil 3237052399 3237077672 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (inst -1 "-npx!1" "-npy!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (- const-decl "[real -> real]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 276 70 nil nil)) (npreal_div_posreal_is_npreal 0 (npreal_div_posreal_is_npreal-1 nil 3237052399 3237077673 ("" (skosimp) (("" (lemma "nnreal_div_posreal_is_nnreal") (("" (inst -1 "-npx!1" "py!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((nnreal_div_posreal_is_nnreal subtype-tcc nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 206 70 nil nil)) (npreal_div_negreal_is_nnreal 0 (npreal_div_negreal_is_nnreal-1 nil 3237052399 3237077673 ("" (skosimp) (("" (lemma "npreal_div_posreal_is_npreal") (("" (inst -1 "npx!1" "-ny!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((npreal_div_posreal_is_npreal subtype-tcc nil real_types nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 192 70 nil nil)) (posreal_plus_nnreal_is_posreal 0 (posreal_plus_nnreal_is_posreal-1 nil 3237052399 3237077673 ("" (subtype-tcc) nil nil) proved nil 77 40 nil nil)) (nnreal_plus_posreal_is_posreal 0 (nnreal_plus_posreal_is_posreal-1 nil 3237052399 3237077673 ("" (subtype-tcc) nil nil) proved nil 71 30 nil nil)) (posreal_times_posreal_is_posreal 0 (posreal_times_posreal_is_posreal-1 nil 3237052399 3237077673 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 208 40 nil nil)) (posreal_div_posreal_is_posreal 0 (posreal_div_posreal_is_posreal-1 nil 3237052399 3237077674 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (inst -1 "px!1" "1/py!1") (("" (assert) nil nil)) nil)) nil)) nil) unfinished nil 225 80 nil nil)) (negreal_plus_negreal_is_negreal 0 (negreal_plus_negreal_is_negreal-1 nil 3237052399 3237077674 ("" (subtype-tcc) nil nil) proved nil 61 30 nil nil)) (negreal_times_negreal_is_posreal 0 (negreal_times_negreal_is_posreal-1 nil 3237052399 3237077674 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (inst -1 "-nx!1" "-ny!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (- const-decl "[real -> real]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 164 60 nil nil)) (negreal_div_negreal_is_posreal 0 (negreal_div_negreal_is_posreal-1 nil 3237052399 3237077674 ("" (lemma "posreal_div_posreal_is_posreal") (("" (skosimp) (("" (inst -1 "-nx!1" "-ny!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (posreal_div_posreal_is_posreal subtype-tcc nil real_types nil)) 187 80 nil nil)))(rationals (nonzero_rational_TCC1 0 (nonzero_rational_TCC1-1 nil 3237052399 3237077674 ("" (tcc :defs !) nil nil) proved ((/= const-decl "boolean" notequal nil)) 91 20 nil nil)) (rat_plus_rat_is_rat 0 (rat_plus_rat_is_rat-1 nil 3237052399 3237077675 ("" (lemma "closed_plus") (("" (propax) nil nil)) nil) proved ((closed_plus formula-decl nil rationals nil)) 9 10 nil nil)) (rat_minus_rat_is_rat 0 (rat_minus_rat_is_rat-1 nil 3237052399 3237077675 ("" (lemma "closed_minus") (("" (propax) nil nil)) nil) proved ((closed_minus formula-decl nil rationals nil)) 13 10 nil nil)) (rat_times_rat_is_rat 0 (rat_times_rat_is_rat-1 nil 3237052399 3237077675 ("" (lemma "closed_times") (("" (propax) nil nil)) nil) proved ((closed_times formula-decl nil rationals nil)) 46 10 nil nil)) (rat_div_nzrat_is_rat 0 (rat_div_nzrat_is_rat-1 nil 3237052399 3237077675 ("" (lemma "closed_divides") (("" (propax) nil nil)) nil) proved ((closed_divides formula-decl nil rationals nil)) 36 10 nil nil)) (minus_rat_is_rat 0 (minus_rat_is_rat-1 nil 3237052399 3237077675 ("" (lemma "closed_neg") (("" (propax) nil nil)) nil) proved ((closed_neg formula-decl nil rationals nil)) 33 10 nil nil)) (posrat_is_nzrat 0 (posrat_is_nzrat-1 nil 3237052399 3237077675 ("" (subtype-tcc) nil nil) proved nil 25 20 nil nil)) (negrat_is_nzrat 0 (negrat_is_nzrat-1 nil 3237052399 3237077675 ("" (subtype-tcc) nil nil) proved nil 25 20 nil nil)) (nzrat_times_nzrat_is_nzrat 0 (nzrat_times_nzrat_is_nzrat-1 nil 3237052399 3237077675 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nzrat nonempty-type-eq-decl nil rationals nil) (/= const-decl "boolean" notequal nil)) 228 120 nil nil)) (nzrat_div_nzrat_is_nzrat 0 (nzrat_div_nzrat_is_nzrat-1 nil 3237052399 3237077676 ("" (subtype-tcc) nil nil) proved nil 35 30 nil nil)) (minus_nzrat_is_nzrat 0 (minus_nzrat_is_nzrat-1 nil 3237052399 3237077676 ("" (subtype-tcc) nil nil) proved nil 126 40 nil nil)) (nnrat_plus_nnrat_is_nnrat 0 (nnrat_plus_nnrat_is_nnrat-1 nil 3237052399 3237077676 ("" (subtype-tcc) nil nil) proved nil 44 40 nil nil)) (nnrat_times_nnrat_is_nnrat 0 (nnrat_times_nnrat_is_nnrat-1 nil 3237052399 3237077676 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil)) 289 110 nil nil)) (nnrat_div_posrat_is_nnrat 0 (nnrat_div_posrat_is_nnrat-1 nil 3237052399 3237077677 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil)) 341 150 nil nil)) (nnrrat_div_negrat_is_nprat 0 (nnrrat_div_negrat_is_nprat-1 nil 3237052399 3237077677 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (<= const-decl "bool" reals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil) (< const-decl "bool" reals nil) (negrat nonempty-type-eq-decl nil rationals nil)) 349 140 nil nil)) (nprat_plus_nprat_is_nprat 0 (nprat_plus_nprat_is_nprat-1 nil 3237052399 3237077677 ("" (subtype-tcc) nil nil) proved nil 139 50 nil nil)) (nprat_times_nprat_is_nnrat 0 (nprat_times_nprat_is_nnrat-1 nil 3237052399 3237077678 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil)) 323 150 nil nil)) (nprat_div_posrat_is_nprat 0 (nprat_div_posrat_is_nprat-1 nil 3237052399 3237077678 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil) (>= const-decl "bool" reals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil)) 368 160 nil nil)) (nprat_div_negrat_is_nnrat 0 (nprat_div_negrat_is_nnrat-1 nil 3237052399 3237077678 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil) (< const-decl "bool" reals nil) (negrat nonempty-type-eq-decl nil rationals nil)) 423 170 nil nil)) (posrat_plus_nnrat_is_posrat 0 (posrat_plus_nnrat_is_posrat-1 nil 3237052399 3237077679 ("" (subtype-tcc) nil nil) proved nil 122 60 nil nil)) (nnrat_plus_posrat_is_posrat 0 (nnrat_plus_posrat_is_posrat-1 nil 3237052399 3237077679 ("" (subtype-tcc) nil nil) proved nil 131 70 nil nil)) (posrat_times_posrat_is_posrat 0 (posrat_times_posrat_is_posrat-1 nil 3237052399 3237077679 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil)) 393 130 nil nil)) (posrat_div_posrat_is_posrat 0 (posrat_div_posrat_is_posrat-1 nil 3237052399 3237077680 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil)) 385 160 nil nil)) (negrat_plus_negrat_is_negrat 0 (negrat_plus_negrat_is_negrat-1 nil 3237052399 3237077680 ("" (subtype-tcc) nil nil) proved nil 150 70 nil nil)) (negrat_times_negrat_is_posrat 0 (negrat_times_negrat_is_posrat-1 nil 3237052399 3237077680 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil) (< const-decl "bool" reals nil) (negrat nonempty-type-eq-decl nil rationals nil)) 361 160 nil nil)) (negrat_div_negrat_is_posrat 0 (negrat_div_negrat_is_posrat-1 nil 3237052399 3237077681 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil) (< const-decl "bool" reals nil) (negrat nonempty-type-eq-decl nil rationals nil)) 420 170 nil nil)))(integers (nonzero_integer_TCC1 0 (nonzero_integer_TCC1-1 nil 3237052399 3237077681 ("" (tcc :defs !) nil nil) proved ((/= const-decl "boolean" notequal nil)) 39 20 nil nil)) (upfrom_TCC1 0 (upfrom_TCC1-1 nil 3237052399 3237077681 ("" (subtype-tcc) nil nil) proved nil 36 20 nil nil)) (above_TCC1 0 (above_TCC1-1 nil 3237052399 3237077681 ("" (lemma "closed_plus") (("" (skosimp) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil) proved ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (closed_plus formula-decl nil integers nil)) 138 40 nil nil)) (int_plus_int_is_int 0 (int_plus_int_is_int-1 nil 3237052399 3237077681 ("" (lemma "closed_plus") (("" (propax) nil nil)) nil) proved ((closed_plus formula-decl nil integers nil)) 19 10 nil nil)) (int_minus_int_is_int 0 (int_minus_int_is_int-1 nil 3237052399 3237077681 ("" (lemma "closed_minus") (("" (propax) nil nil)) nil) proved ((closed_minus formula-decl nil integers nil)) 29 10 nil nil)) (int_times_int_is_int 0 (int_times_int_is_int-1 nil 3237052399 3237077681 ("" (lemma "closed_times") (("" (propax) nil nil)) nil) proved ((closed_times formula-decl nil integers nil)) 19 10 nil nil)) (minus_int_is_int 0 (minus_int_is_int-1 nil 3237052399 3237077682 ("" (lemma "closed_neg") (("" (propax) nil nil)) nil) proved ((closed_neg formula-decl nil integers nil)) 101 20 nil nil)) (minus_nzint_is_nzint 0 (minus_nzint_is_nzint-1 nil 3237052399 3237077682 ("" (subtype-tcc) nil nil) proved nil 83 30 nil nil)) (posint_is_nzint 0 (posint_is_nzint-1 nil 3237052399 3237077682 ("" (subtype-tcc) nil nil) proved nil 88 30 nil nil)) (negint_is_nzint 0 (negint_is_nzint-1 nil 3237052399 3237077682 ("" (subtype-tcc) nil nil) proved nil 105 40 nil nil)) (nzint_times_nzint_is_nzint 0 (nzint_times_nzint_is_nzint-1 nil 3237052399 3237077682 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil)) 454 150 nil nil)) (nnint_plus_nnint_is_nnint 0 (nnint_plus_nnint_is_nnint-1 nil 3237052399 3237077683 ("" (subtype-tcc) nil nil) proved nil 171 50 nil nil)) (nnint_times_nnint_is_nnint 0 (nnint_times_nnint_is_nnint-1 nil 3237052399 3237077683 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil)) 460 160 nil nil)) (npint_plus_npint_is_npint 0 (npint_plus_npint_is_npint-1 nil 3237052399 3237077683 ("" (subtype-tcc) nil nil) proved nil 247 50 nil nil)) (npint_times_npint_is_nnint 0 (npint_times_npint_is_nnint-1 nil 3237052399 3237077684 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonpos_int nonempty-type-eq-decl nil integers nil)) 513 190 nil nil)) (posint_plus_nnint_is_posint 0 (posint_plus_nnint_is_posint-1 nil 3237052399 3237077684 ("" (subtype-tcc) nil nil) proved nil 228 80 nil nil)) (nnint_plus_posint_is_posint 0 (nnint_plus_posint_is_posint-1 nil 3237052399 3237077684 ("" (subtype-tcc) nil nil) proved nil 282 90 nil nil)) (posint_times_posint_is_posint 0 (posint_times_posint_is_posint-1 nil 3237052399 3237077685 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posint nonempty-type-eq-decl nil integers nil)) 499 180 nil nil)) (negint_plus_negint_is_negint 0 (negint_plus_negint_is_negint-1 nil 3237052399 3237077685 ("" (subtype-tcc) nil nil) proved nil 309 90 nil nil)) (negint_times_negint_is_posint 0 (negint_times_negint_is_posint-1 nil 3237052399 3237077686 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonpos_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (negint nonempty-type-eq-decl nil integers nil)) 697 220 nil nil)) (even_int_TCC1 0 (even_int_TCC1-1 nil 3237052399 3237077687 ("" (expand "even?") (("" (inst 1 "0") (("" (assert) nil nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil)) 415 130 nil nil)) (odd_int_TCC1 0 (odd_int_TCC1-1 nil 3237052399 3237077687 ("" (expand "odd?") (("" (inst 1 "0") (("" (assert) nil nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil)) 432 150 nil nil)) (odd_is_nzint 0 (odd_is_nzint-1 nil 3237052399 3237077687 ("" (subtype-tcc) nil nil) proved ((odd? const-decl "bool" integers nil) (/= const-decl "boolean" notequal nil)) 364 130 nil nil)) (even_plus_even_is_even 0 (even_plus_even_is_even-1 nil 3237052399 3237077689 ("" (grind :if-match nil) (("" (inst 1 "j!1 + j!2") (("" (assert) nil nil)) nil)) nil) proved ((+ const-decl "[real, real -> real]" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even_int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil)) 1124 440 nil nil)) (even_minus_even_is_even 0 (even_minus_even_is_even-1 nil 3237052399 3237077690 ("" (grind :if-match nil) (("" (inst 1 "j!1 - j!2") (("" (assert) nil nil)) nil)) nil) proved ((- const-decl "[real, real -> real]" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even_int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil)) 951 350 nil nil)) (odd_plus_odd_is_even 0 (odd_plus_odd_is_even-1 nil 3237052399 3237077691 ("" (grind :if-match nil) (("" (inst 1 "1 + j!1 + j!2") (("" (assert) nil nil)) nil)) nil) proved ((+ const-decl "[real, real -> real]" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil)) 1247 470 nil nil)) (odd_minus_odd_is_even 0 (odd_minus_odd_is_even-1 nil 3237052399 3237077692 ("" (grind :if-match nil) (("" (inst 1 "j!1 - j!2") (("" (assert) nil nil)) nil)) nil) proved ((- const-decl "[real, real -> real]" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil)) 1017 410 nil nil)) (odd_plus_even_is_odd 0 (odd_plus_even_is_odd-1 nil 3237052399 3237077693 ("" (grind :if-match nil) (("" (inst 1 "j!1 + j!2") (("" (assert) nil nil)) nil)) nil) proved ((+ const-decl "[real, real -> real]" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil) (even_int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil)) 1225 480 nil nil)) (odd_minus_even_is_odd 0 (odd_minus_even_is_odd-1 nil 3237052399 3237077694 ("" (grind :if-match nil) (("" (inst 1 "j!2 - j!1") (("" (assert) nil nil)) nil)) nil) proved ((- const-decl "[real, real -> real]" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil) (even_int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil)) 1037 420 nil nil)) (even_plus_odd_is_odd 0 (even_plus_odd_is_odd-1 nil 3237052399 3237077696 ("" (grind :if-match nil) (("" (inst 1 "j!1 + j!2") (("" (assert) nil nil)) nil)) nil) proved ((+ const-decl "[real, real -> real]" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil) (even_int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil)) 1301 530 nil nil)) (even_minus_odd_id_odd 0 (even_minus_odd_id_odd-1 nil 3237052399 3237077697 ("" (grind :if-match nil) (("" (inst 1 "-1 + j!1 - j!2") (("" (assert) nil nil)) nil)) nil) proved ((- const-decl "[real -> real]" reals nil) (+ const-decl "[real, real -> real]" reals nil) (- const-decl "[real, real -> real]" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil) (even_int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil)) 1097 430 nil nil)) (even_times_int_is_even 0 (even_times_int_is_even-1 nil 3237052399 3237077698 ("" (grind :if-match nil) (("" (inst 1 "i!1 * j!1") nil nil)) nil) proved ((* const-decl "[real, real -> real]" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even_int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil)) 1068 420 nil nil)) (int_times_even_is_even 0 (int_times_even_is_even-1 nil 3237052399 3237077699 ("" (grind :if-match nil) (("" (inst 1 "i!1 * j!1") nil nil)) nil) proved ((* const-decl "[real, real -> real]" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even_int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil)) 1084 430 nil nil)) (odd_times_odd_is_odd 0 (odd_times_odd_is_odd-1 nil 3237052399 3237077701 ("" (grind :if-match nil) (("" (inst 1 "j!1 + j!2 + 2 * j!1 * j!2") (("" (assert) nil nil)) nil)) nil) proved ((* const-decl "[real, real -> real]" reals nil) (+ const-decl "[real, real -> real]" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil)) 1398 610 nil nil)) (minus_even_is_even 0 (minus_even_is_even-1 nil 3237052399 3237077701 ("" (grind :if-match nil) (("" (inst 1 "-j!1") (("" (assert) nil nil)) nil)) nil) proved ((- const-decl "[real -> real]" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even_int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil)) 822 310 nil nil)) (minus_odd_is_odd 0 (minus_odd_is_odd-1 nil 3237052399 3237077702 ("" (grind :if-match nil) (("" (inst 1 "-1 - j!1") (("" (assert) nil nil)) nil)) nil) proved ((- const-decl "[real -> real]" reals nil) (- const-decl "[real, real -> real]" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil)) 953 340 nil nil)))(naturalnumbers (upfrom_nat_is_nat 0 (upfrom_nat_is_nat-1 nil 3237052399 3237077703 ("" (subtype-tcc) nil nil) proved nil 18 20 nil nil)) (upfrom_posnat_is_posnat 0 (upfrom_posnat_is_posnat-1 nil 3237052399 3237077703 ("" (subtype-tcc) nil nil) proved nil 41 20 nil nil)) (above_nat_is_posnat 0 (above_nat_is_posnat-1 nil 3237052399 3237077703 ("" (subtype-tcc) nil nil) proved nil 56 20 nil nil)) (subrange_nat_is_nat 0 (subrange_nat_is_nat-1 nil 3237052399 3237077703 ("" (subtype-tcc) nil nil) proved nil 37 30 nil nil)) (subrange_posnat_is_posnat 0 (subrange_posnat_is_posnat-1 nil 3237052399 3237077703 ("" (subtype-tcc) nil nil) proved nil 60 30 nil nil)) (upto_TCC1 0 (upto_TCC1-1 nil 3237052399 3237077703 ("" (tcc :defs !) nil nil) proved nil 98 20 nil nil)) (pred_TCC1 0 (pred_TCC1-1 nil 3237052399 3237077703 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 282 80 nil nil)) (tilde_TCC1 0 (tilde_TCC1-1 nil 3237052399 3237077704 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 363 130 nil nil)) (nat_induction 0 (nat_induction-1 nil 3237052399 3237077705 ("" (lemma "wf_induction[nat, (LAMBDA (m,n:nat): m < n)]") (("1" (beta) (("1" (skosimp*) (("1" (inst -1 "p!1") (("1" (split) (("1" (inst -1 "i!1") nil nil) ("2" (skosimp*) (("2" (case "x!1 = 0") (("1" (assert) nil nil) ("2" (inst -1 "x!1 - 1") (("1" (inst -3 "x!1 - 1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (delete 2) (("2" (lemma "wf_nat") (("2" (propax) nil nil)) nil)) nil)) nil) proved ((wf_nat formula-decl nil naturalnumbers nil) (- const-decl "[real, real -> real]" reals nil) (x!1 skolem-const-decl "nat" naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (wf_induction formula-decl nil wf_induction nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil)) 709 230 nil nil)) (NAT_induction 0 (NAT_induction-1 nil 3237052399 3237077706 ("" (lemma "nat_induction") (("" (skosimp*) (("" (inst -1 "(LAMBDA (n:nat): (FORALL (m:nat): m <= n IMPLIES p!1(m)))") (("" (split) (("1" (inst -1 "i!1") (("1" (inst -1 "i!1") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -2 "0") (("2" (split) (("1" (assert) nil nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (inst -3 "m!1") (("3" (assert) (("3" (skosimp*) (("3" (inst -1 "k!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((<= const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nat_induction formula-decl nil naturalnumbers nil)) 833 280 nil nil)))(min_nat (min_TCC1 0 (min_TCC1-1 nil 3237052399 3237077707 ("" (inst + "lambda S: epsilon(lambda (n: nat): T_pred(n) AND S(n) AND
                                    FORALL x: S(x) IMPLIES n <= x)") (("" (skolem!) (("" (use "epsilon_ax[nat]") (("" (split -) (("1" (propax) nil nil) ("2" (delete 2) (("2" (assert) (("2" (lemma "wf_nat") (("2" (expand "well_founded?") (("2" (inst - "lambda (x: nat): T_pred(x) AND S!1(x)") (("2" (ground) (("1" (skolem!) (("1" (inst? +) (("1" (assert) (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (delete 2) (("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((well_founded? const-decl "bool" orders nil) (x!1 skolem-const-decl "T" min_nat nil) (S!1 skolem-const-decl "(nonempty?[T])" min_nat nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (wf_nat formula-decl nil naturalnumbers nil) (epsilon_ax formula-decl nil epsilons nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (<= const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-subtype-decl nil min_nat nil) (T_pred const-decl "[nat -> boolean]" min_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1167 470 nil nil)) (min_def 0 (min_def-1 nil 3237052399 3237077707 ("" (skolem!) (("" (typepred "min(S!1)") (("" (expand "minimum?") (("" (ground) (("1" (replace*) nil nil) ("2" (inst? -2 :where -4) (("2" (inst? - :where -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat nil) (<= const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-subtype-decl nil min_nat nil) (T_pred const-decl "[nat -> boolean]" min_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (minimum? const-decl "bool" min_nat nil)) 338 140 nil nil)))(real_defs (abs_TCC1 0 (abs_TCC1-1 nil 3237052399 3237077707 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 124 60 nil nil)) (abs_TCC2 0 (abs_TCC2-1 nil 3237052399 3237077708 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 166 60 nil nil)) (nonzero_abs_is_pos 0 (nonzero_abs_is_pos-1 nil 3237052399 3237077708 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 307 110 nil nil)) (rat_abs_is_nonneg 0 (rat_abs_is_nonneg-1 nil 3237052399 3237077708 ("" (skosimp) (("" (expand "abs") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 53 30 nil nil)) (nzrat_abs_is_pos 0 (nzrat_abs_is_pos-1 nil 3237052399 3237077708 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nzrat nonempty-type-eq-decl nil rationals nil)) 281 100 nil nil)) (int_abs_is_nonneg 0 (int_abs_is_nonneg-1 nil 3237052399 3237077709 ("" (skosimp) (("" (expand "abs") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 148 40 nil nil)) (nzint_abs_is_pos 0 (nzint_abs_is_pos-1 nil 3237052399 3237077709 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil)) 325 120 nil nil)) (max_TCC1 0 (max_TCC1-1 nil 3237052399 3237077709 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 245 100 nil nil)) (max_TCC2 0 (max_TCC2-1 nil 3237052399 3237077710 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 246 100 nil nil)) (min_TCC1 0 (min_TCC1-1 nil 3237052399 3237077710 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 230 100 nil nil)) (min_TCC2 0 (min_TCC2-1 nil 3237052399 3237077710 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 242 90 nil nil)) (nzreal_max 0 (nzreal_max-1 nil 3237052399 3237077710 ("" (skosimp) (("" (expand "max") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)) 198 80 nil nil)) (nzreal_min 0 (nzreal_min-1 nil 3237052399 3237077711 ("" (skosimp) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 173 70 nil nil)) (nonneg_real_max 0 (nonneg_real_max-1 nil 3237052399 3237077711 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil)) 418 190 nil nil)) (nonneg_real_min 0 (nonneg_real_min-1 nil 3237052399 3237077711 ("" (skosimp) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 211 80 nil nil)) (posreal_max 0 (posreal_max-1 nil 3237052399 3237077712 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 542 220 nil nil)) (posreal_min 0 (posreal_min-1 nil 3237052399 3237077713 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 551 220 nil nil)) (rat_max 0 (rat_max-1 nil 3237052399 3237077713 ("" (skosimp) (("" (expand "max") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)) 183 90 nil nil)) (rat_min 0 (rat_min-1 nil 3237052399 3237077713 ("" (skosimp) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 223 100 nil nil)) (nzrat_max 0 (nzrat_max-1 nil 3237052399 3237077714 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nzrat nonempty-type-eq-decl nil rationals nil) (/= const-decl "boolean" notequal nil)) 582 230 nil nil)) (nzrat_min 0 (nzrat_min-1 nil 3237052399 3237077715 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nzrat nonempty-type-eq-decl nil rationals nil) (/= const-decl "boolean" notequal nil)) 616 240 nil nil)) (nonneg_rat_max 0 (nonneg_rat_max-1 nil 3237052399 3237077715 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil)) 587 250 nil nil)) (nonneg_rat_min 0 (nonneg_rat_min-1 nil 3237052399 3237077716 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil)) 555 240 nil nil)) (posrat_max 0 (posrat_max-1 nil 3237052399 3237077717 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil)) 672 290 nil nil)) (posrat_min 0 (posrat_min-1 nil 3237052399 3237077717 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil)) 734 330 nil nil)) (int_max 0 (int_max-1 nil 3237052399 3237077718 ("" (skosimp) (("" (expand "max") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)) 435 180 nil nil)) (int_min 0 (int_min-1 nil 3237052399 3237077718 ("" (skosimp) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 420 190 nil nil)) (nzint_max 0 (nzint_max-1 nil 3237052399 3237077719 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil)) 836 380 nil nil)) (nzint_min 0 (nzint_min-1 nil 3237052399 3237077720 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil)) 866 390 nil nil)) (nat_max 0 (nat_max-1 nil 3237052399 3237077721 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 890 380 nil nil)) (nat_min 0 (nat_min-1 nil 3237052399 3237077722 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 937 390 nil nil)) (posint_max 0 (posint_max-1 nil 3237052399 3237077723 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posint nonempty-type-eq-decl nil integers nil)) 990 450 nil nil)) (posint_min 0 (posint_min-1 nil 3237052399 3237077724 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posint nonempty-type-eq-decl nil integers nil)) 1129 490 nil nil)))(real_props (inv_ne_0 0 (inv_ne_0-1 nil 3237052399 3237077725 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil)) 201 100 nil nil)) (both_sides_plus1 0 (both_sides_plus1-1 nil 3237052399 3237077725 ("" (tcc :defs !) nil nil) proved nil 91 20 nil nil)) (both_sides_plus2 0 (both_sides_plus2-1 nil 3237052399 3237077725 ("" (tcc :defs !) nil nil) proved nil 19 20 nil nil)) (both_sides_minus1 0 (both_sides_minus1-1 nil 3237052399 3237077725 ("" (tcc :defs !) nil nil) proved nil 42 20 nil nil)) (both_sides_minus2 0 (both_sides_minus2-1 nil 3237052399 3237077725 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 454 180 nil nil)) (both_sides_times1 0 (both_sides_times1-1 nil 3237052399 3237077726 ("" (grind) nil nil) unfinished nil 707 270 nil nil)) (both_sides_times2 0 (both_sides_times2-1 nil 3237052399 3237077727 ("" (lemma "both_sides_times1") (("" (skosimp*) (("" (prop) (("1" (inst -2 "n0z!1" "x!1" "y!1") (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (/= const-decl "boolean" notequal nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (both_sides_times1 formula-decl nil real_props nil)) 575 250 nil nil)) (both_sides_div1 0 (both_sides_div1-1 nil 3237052399 3237077727 ("" (grind) (("" (lemma "both_sides_times1") (("" (inst -1 "1/n0z!1" "x!1" "y!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil)) 523 220 nil nil)) (both_sides_div2 0 (both_sides_div2-1 nil 3237052399 3237077729 ("" (grind) (("" (lemma "both_sides_times1") (("" (inst-cp -1 "n0x!1" "n0z!1/n0x!1" "n0z!1/n0y!1") (("" (flatten) (("" (delete -2) (("" (split) (("1" (case "n0z!1 = (n0z!1/n0x!1) * n0x!1") (("1" (replace -1 :dir rl) (("1" (delete -1) (("1" (delete -3) (("1" (inst -2 "n0y!1" "n0z!1" "(n0z!1/n0y!1)*n0x!1") (("1" (flatten) (("1" (delete -2) (("1" (split) (("1" (case "(n0z!1 / n0y!1) * n0x!1 * n0y!1 = n0z!1 * n0x!1") (("1" (replace -1) (("1" (rewrite "both_sides_times2") nil nil)) nil) ("2" (assert) nil nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2 3 4 5) (("2" (use "div_def") (("2" (replace -1) (("2" (use "associative_mult") (("2" (replace -1 :dir rl) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_times1 formula-decl nil real_props nil) (associative_mult formula-decl nil real_axioms nil) (div_def formula-decl nil real_axioms nil) (both_sides_times2 formula-decl nil real_props nil) (* const-decl "[real, real -> real]" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzreal nonempty-type-eq-decl nil reals nil) (/ const-decl "[real, nzreal -> real]" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil)) 1499 610 nil nil)) (times_plus 0 (times_plus-1 nil 3237052399 3237077729 ("" (grind) nil nil) proved nil 133 40 nil nil)) (times_div1 0 (times_div1-1 nil 3237052399 3237077729 ("" (grind) nil nil) proved nil 19 20 nil nil)) (times_div2 0 (times_div2-1 nil 3237052399 3237077729 ("" (grind) nil nil) proved nil 39 20 nil nil)) (div_times 0 (div_times-1 nil 3237052399 3237077729 ("" (grind) nil nil) proved nil 51 30 nil nil)) (div_eq_zero 0 (div_eq_zero-1 nil 3237052399 3237077730 ("" (grind) (("" (lemma "both_sides_times1") (("" (inst -1 "n0z!1" "x!1/n0z!1" "0") (("" (flatten) (("" (delete -1) (("" (split) (("1" (delete -2) (("1" (assert) (("1" (rewrite "commutative_mult") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil)) 526 190 nil nil)) (div_simp 0 (div_simp-1 nil 3237052399 3237077730 ("" (grind) nil nil) proved nil 27 20 nil nil)) (div_cancel1 0 (div_cancel1-1 nil 3237052399 3237077730 ("" (grind) nil nil) proved nil 40 20 nil nil)) (div_cancel2 0 (div_cancel2-1 nil 3237052399 3237077730 ("" (grind) nil nil) proved nil 29 10 nil nil)) (div_cancel3 0 (div_cancel3-1 nil 3237052399 3237077731 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil)) 678 280 nil nil)) (cross_mult 0 (cross_mult-1 nil 3237052399 3237077732 ("" (grind) nil nil) unfinished nil 999 400 nil nil)) (add_div 0 (add_div-1 nil 3237052399 3237077732 ("" (grind) nil nil) proved nil 96 20 nil nil)) (minus_div1 0 (minus_div1-1 nil 3237052399 3237077732 ("" (grind) nil nil) proved nil 48 30 nil nil)) (minus_div2 0 (minus_div2-1 nil 3237052399 3237077732 ("" (grind) nil nil) proved nil 68 30 nil nil)) (div_distributes 0 (div_distributes-1 nil 3237052399 3237077732 ("" (grind) nil nil) proved nil 21 20 nil nil)) (div_distributes_minus 0 (div_distributes_minus-1 nil 3237052399 3237077733 ("" (grind) nil nil) proved nil 44 30 nil nil)) (div_div1 0 (div_div1-1 nil 3237052399 3237077733 ("" (grind) nil nil) proved nil 42 20 nil nil)) (div_div2 0 (div_div2-1 nil 3237052399 3237077733 ("" (grind) nil nil) proved nil 120 20 nil nil)) (idem_add_is_zero 0 (idem_add_is_zero-1 nil 3237052399 3237077733 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 205 100 nil nil)) (zero_times1 0 (zero_times1-1 nil 3237052399 3237077733 ("" (grind) nil nil) proved nil 14 0 nil nil)) (zero_times2 0 (zero_times2-1 nil 3237052399 3237077733 ("" (grind) nil nil) proved nil 105 10 nil nil)) (zero_times3 0 (zero_times3-1 nil 3237052399 3237077734 ("" (skosimp*) (("" (prop) (("1" (lemma "trichotomy") (("1" (inst-cp -1 "x!1") (("1" (inst -1 "y!1") (("1" (assert) (("1" (prop) (("1" (lemma "posreal_mult_closed") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "posreal_mult_closed") (("2" (inst -1 "-x!1" "y!1") (("2" (assert) nil nil)) nil)) nil) ("3" (lemma "posreal_mult_closed") (("3" (inst -1 "x!1" "-y!1") (("3" (assert) nil nil)) nil)) nil) ("4" (lemma "posreal_mult_closed") (("4" (inst -1 "-x!1" "-y!1") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (- const-decl "[real -> real]" reals nil) (posreal_mult_closed formula-decl nil real_axioms nil) (trichotomy formula-decl nil real_axioms nil)) 596 200 nil nil)) (neg_times_neg 0 (neg_times_neg-1 nil 3237052399 3237077734 ("" (grind) nil nil) proved nil 36 20 nil nil)) (zero_is_neg_zero 0 (zero_is_neg_zero-1 nil 3237052399 3237077734 ("" (grind) nil nil) proved nil 58 30 nil nil)) (strict_lt 0 (strict_lt-1 nil 3237052399 3237077735 ("" (grind) nil nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (strict_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (strict_total_order? const-decl "bool" orders nil)) 503 190 nil nil)) (trich_lt 0 (trich_lt-1 nil 3237052399 3237077735 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 200 70 nil nil)) (tri_unique_lt1 0 (tri_unique_lt1-1 nil 3237052399 3237077735 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (/= const-decl "boolean" notequal nil)) 205 70 nil nil)) (tri_unique_lt2 0 (tri_unique_lt2-1 nil 3237052399 3237077735 ("" (grind) nil nil) proved nil 47 30 nil nil)) (zero_not_lt_zero 0 (zero_not_lt_zero-1 nil 3237052399 3237077735 ("" (grind) nil nil) proved nil 13 10 nil nil)) (neg_lt 0 (neg_lt-1 nil 3237052399 3237077736 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 249 90 nil nil)) (pos_times_lt 0 (pos_times_lt-1 nil 3237052399 3237077737 ("" (grind) (("1" (lemma "posreal_mult_closed") (("1" (case "x!1 = 0") (("1" (assert) nil nil) ("2" (case "y!1 = 0") (("1" (assert) nil nil) ("2" (inst -1 "x!1" "-y!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (case "x!1 = 0") (("1" (assert) nil nil) ("2" (case "y!1 = 0") (("1" (assert) nil nil) ("2" (lemma "posreal_mult_closed") (("2" (inst -1 "-x!1" "y!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (lemma "posreal_mult_closed") (("3" (inst -1 "x!1" "y!1") (("3" (assert) nil nil)) nil)) nil) ("4" (lemma "posreal_mult_closed") (("4" (inst -1 "-x!1" "-y!1") (("4" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (- const-decl "[real -> real]" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 1270 440 nil nil)) (neg_times_lt 0 (neg_times_lt-1 nil 3237052399 3237077738 ("" (skosimp*) (("" (lemma "pos_times_lt") (("" (inst -1 "x!1" "-y!1") (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((pos_times_lt formula-decl nil real_props nil) (- const-decl "[real -> real]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 590 240 nil nil)) (quotient_pos_lt 0 (quotient_pos_lt-1 nil 3237052399 3237077738 ("" (skosimp*) (("" (lemma "inverse_mult") (("" (inst?) (("" (lemma "pos_times_lt") (("" (inst -1 "n0x!1" "1/n0x!1") (("" (replace -2) (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((inverse_mult formula-decl nil real_axioms nil) (pos_times_lt formula-decl nil real_props nil) (/ const-decl "[real, nzreal -> real]" reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 357 150 nil nil)) (quotient_neg_lt 0 (quotient_neg_lt-1 nil 3237052399 3237077738 ("" (skosimp*) (("" (lemma "quotient_pos_lt") (("" (inst -1 "-n0x!1") (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((quotient_pos_lt formula-decl nil real_props nil) (- const-decl "[real -> real]" reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 320 130 nil nil)) (pos_div_lt 0 (pos_div_lt-1 nil 3237052399 3237077739 ("" (skosimp*) (("" (lemma "pos_times_lt") (("" (inst -1 "x!1" "1/n0y!1") (("" (lemma "quotient_pos_lt") (("" (inst -1 "n0y!1") (("" (lemma "quotient_neg_lt") (("" (inst -1 "n0y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pos_times_lt formula-decl nil real_props nil) (quotient_pos_lt formula-decl nil real_props nil) (quotient_neg_lt formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/ const-decl "[real, nzreal -> real]" reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 712 250 nil nil)) (neg_div_lt 0 (neg_div_lt-1 nil 3237052399 3237077740 ("" (skosimp*) (("" (lemma "pos_div_lt") (("" (inst -1 "n0y!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((pos_div_lt formula-decl nil real_props nil) (- const-decl "[real -> real]" reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 569 260 nil nil)) (div_mult_pos_lt1 0 (div_mult_pos_lt1-1 nil 3237052399 3237077741 ("" (grind) (("1" (lemma "posreal_mult_closed") (("1" (inst -1 "x!1 - (z!1/py!1)" "py!1") (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "posreal_mult_closed") (("2" (inst -1 "x!1*py!1 - z!1" "1/py!1") (("2" (assert) nil nil)) nil)) nil)) nil) proved ((* const-decl "[real, real -> real]" reals nil) (posreal_mult_closed formula-decl nil real_axioms nil) (/ const-decl "[real, nzreal -> real]" reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (- const-decl "[real, real -> real]" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 1195 440 nil nil)) (div_mult_pos_lt2 0 (div_mult_pos_lt2-1 nil 3237052399 3237077742 ("" (lemma "div_mult_pos_lt1") (("" (skosimp) (("" (inst -1 "py!1" "-x!1" "-z!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((- const-decl "[real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_lt1 formula-decl nil real_props nil)) 792 320 nil nil)) (div_mult_neg_lt1 0 (div_mult_neg_lt1-1 nil 3237052399 3237077743 ("" (lemma "div_mult_pos_lt2") (("" (skosimp) (("" (inst -1 "-ny!1" "-x!1" "z!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_lt2 formula-decl nil real_props nil)) 591 230 nil nil)) (div_mult_neg_lt2 0 (div_mult_neg_lt2-1 nil 3237052399 3237077743 ("" (skosimp) (("" (lemma "div_mult_pos_lt1") (("" (inst -1 "-ny!1" "-x!1" "z!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((div_mult_pos_lt1 formula-decl nil real_props nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 597 220 nil nil)) (both_sides_plus_lt1 0 (both_sides_plus_lt1-1 nil 3237052399 3237077744 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 594 220 nil nil)) (both_sides_plus_lt2 0 (both_sides_plus_lt2-1 nil 3237052399 3237077745 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 572 210 nil nil)) (both_sides_minus_lt1 0 (both_sides_minus_lt1-1 nil 3237052399 3237077745 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 435 150 nil nil)) (both_sides_minus_lt2 0 (both_sides_minus_lt2-1 nil 3237052399 3237077746 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 427 140 nil nil)) (both_sides_times_pos_lt1 0 (both_sides_times_pos_lt1-1 nil 3237052399 3237077747 ("" (grind) (("1" (lemma "posreal_mult_closed") (("1" (inst -1 "(y!1 - x!1) * pz!1" "1/pz!1") (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "posreal_mult_closed") (("2" (inst -1 "y!1-x!1" "pz!1") (("2" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (/ const-decl "[real, nzreal -> real]" reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (- const-decl "[real, real -> real]" reals nil) (* const-decl "[real, real -> real]" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 1293 490 nil nil)) (both_sides_times_pos_lt2 0 (both_sides_times_pos_lt2-1 nil 3237052399 3237077748 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst -1 "pz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 875 320 nil nil)) (both_sides_times_neg_lt1 0 (both_sides_times_neg_lt1-1 nil 3237052399 3237077748 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst -1 "-nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 612 240 nil nil)) (both_sides_times_neg_lt2 0 (both_sides_times_neg_lt2-1 nil 3237052399 3237077749 ("" (lemma "both_sides_times_neg_lt1") (("" (skosimp) (("" (inst -1 "nz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_lt1 formula-decl nil real_props nil)) 890 330 nil nil)) (both_sides_div_pos_lt1 0 (both_sides_div_pos_lt1-1 nil 3237052399 3237077750 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst -1 "1/pz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((/ const-decl "[real, nzreal -> real]" reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 468 200 nil nil)) (both_sides_div_pos_lt2 0 (both_sides_div_pos_lt2-1 nil 3237052399 3237077752 ("" (skosimp*) (("" (lemma "both_sides_times_pos_lt1") (("" (inst -1 "px!1 * py!1" "pz!1 / px!1" "pz!1 / py!1") (("" (assert) (("" (grind) (("1" (case "pz!1 / px!1 * (px!1 * py!1) = pz!1 * py!1") (("1" (replace -1) (("1" (hide -1) (("1" (case "pz!1 / py!1 * (px!1 * py!1) = pz!1 * px!1") (("1" (replace -1) (("1" (hide -1) (("1" (rewrite "both_sides_times_pos_lt2") nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "pz!1 / px!1 * (px!1 * py!1) = pz!1 * py!1") (("1" (case "pz!1 / py!1 * (px!1 * py!1) = pz!1 * px!1") (("1" (replace -1) (("1" (replace -2) (("1" (hide -1 -2) (("1" (lemma "both_sides_times_pos_lt2") (("1" (inst?) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_times_pos_lt1 formula-decl nil real_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (both_sides_times_pos_lt2 formula-decl nil real_props nil) (/ const-decl "[real, nzreal -> real]" reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (* const-decl "[real, real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1691 650 nil nil)) (both_sides_div_pos_lt3 0 (both_sides_div_pos_lt3-1 nil 3237052399 3237077752 ("" (skosimp*) (("" (lemma "both_sides_div_pos_lt2") (("" (inst -1 "py!1" "px!1" "-nz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((both_sides_div_pos_lt2 formula-decl nil real_props nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 582 210 nil nil)) (both_sides_div_neg_lt1 0 (both_sides_div_neg_lt1-1 nil 3237052399 3237077753 ("" (lemma "both_sides_div_pos_lt1") (("" (skosimp) (("" (inst -1 "-nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil)) 508 180 nil nil)) (both_sides_div_neg_lt2 0 (both_sides_div_neg_lt2-1 nil 3237052399 3237077754 ("" (lemma "both_sides_div_pos_lt2") (("" (skosimp) (("" (inst -1 "-ny!1" "-nx!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt2 formula-decl nil real_props nil)) 619 230 nil nil)) (both_sides_div_neg_lt3 0 (both_sides_div_neg_lt3-1 nil 3237052399 3237077754 ("" (lemma "both_sides_div_pos_lt3") (("" (skosimp) (("" (inst -1 "nz!1" "-ny!1" "-nx!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((- const-decl "[real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt3 formula-decl nil real_props nil)) 641 240 nil nil)) (lt_plus_lt1 0 (lt_plus_lt1-1 nil 3237052399 3237077755 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 563 210 nil nil)) (lt_plus_lt2 0 (lt_plus_lt2-1 nil 3237052399 3237077756 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 567 210 nil nil)) (lt_minus_lt1 0 (lt_minus_lt1-1 nil 3237052399 3237077756 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 401 130 nil nil)) (lt_minus_lt2 0 (lt_minus_lt2-1 nil 3237052399 3237077757 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 414 120 nil nil)) (lt_times_lt_pos1 0 (lt_times_lt_pos1-1 nil 3237052399 3237077758 ("" (skosimp*) (("" (case "nnz!1 = 0") (("1" (assert) (("1" (lemma "pos_times_lt") (("1" (inst -1 "y!1" "w!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "both_sides_times_pos_lt1") (("2" (inst-cp -1 "nnz!1" "px!1" "y!1") (("1" (inst -1 "y!1" "nnz!1" "w!1") (("1" (grind) nil nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_times_lt formula-decl nil real_props nil) (nnz!1 skolem-const-decl "nonneg_real" real_props nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (y!1 skolem-const-decl "real" real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 1247 440 nil nil)) (lt_times_lt_pos2 0 (lt_times_lt_pos2-1 nil 3237052399 3237077759 ("" (skosimp*) (("" (case "nnx!1 = 0") (("1" (assert) (("1" (lemma "pos_times_lt") (("1" (inst -1 "y!1" "w!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "both_sides_times_pos_lt1") (("2" (inst-cp -1 "pz!1" "nnx!1" "y!1") (("2" (inst -1 "y!1" "pz!1" "w!1") (("1" (grind) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_times_lt formula-decl nil real_props nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (y!1 skolem-const-decl "real" real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 1197 450 nil nil)) (lt_div_lt_pos1_TCC1 0 (lt_div_lt_pos1_TCC1-1 nil 3237052399 3237077759 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 83 50 nil nil)) (lt_div_lt_pos1 0 (lt_div_lt_pos1-1 nil 3237052399 3237077761 ("" (grind) (("" (delete -5 -6) (("" (lemma "both_sides_div_pos_lt1") (("" (inst -1 "w!1" "px!1" "y!1") (("" (lemma "both_sides_div_pos_lt2") (("" (inst -1 "w!1" "pz!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_div_pos_lt2 formula-decl nil real_props nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 1092 390 nil nil)) (lt_div_lt_pos2_TCC1 0 (lt_div_lt_pos2_TCC1-1 nil 3237052399 3237077761 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 145 40 nil nil)) (lt_div_lt_pos2 0 (lt_div_lt_pos2-1 nil 3237052399 3237077762 ("" (grind) (("" (delete -4 -5) (("" (lemma "both_sides_div_pos_lt1") (("" (inst -1 "w!1" "nnx!1" "y!1") (("" (lemma "both_sides_div_pos_lt2") (("" (inst -1 "w!1" "pz!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_div_pos_lt2 formula-decl nil real_props nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 984 360 nil nil)) (lt_times_lt_neg1 0 (lt_times_lt_neg1-1 nil 3237052399 3237077763 ("" (lemma "lt_times_lt_pos1") (("" (skosimp) (("" (inst -1 "-npw!1" "-ny!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_times_lt_pos1 formula-decl nil real_props nil)) 716 290 nil nil)) (lt_times_lt_neg2 0 (lt_times_lt_neg2-1 nil 3237052399 3237077763 ("" (lemma "lt_times_lt_pos2") (("" (skosimp) (("" (inst -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_times_lt_pos2 formula-decl nil real_props nil)) 754 260 nil nil)) (lt_div_lt_neg1_TCC1 0 (lt_div_lt_neg1_TCC1-1 nil 3237052399 3237077764 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 82 40 nil nil)) (lt_div_lt_neg1 0 (lt_div_lt_neg1-1 nil 3237052399 3237077764 ("" (lemma "lt_div_lt_pos1") (("" (skosimp) (("" (inst -1 "-ny!1" "-nw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_div_lt_pos1 formula-decl nil real_props nil)) 554 220 nil nil)) (lt_div_lt_neg2_TCC1 0 (lt_div_lt_neg2_TCC1-1 nil 3237052399 3237077764 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 157 50 nil nil)) (lt_div_lt_neg2 0 (lt_div_lt_neg2-1 nil 3237052399 3237077765 ("" (lemma "lt_div_lt_pos2") (("" (skosimp) (("" (inst -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_div_lt_pos2 formula-decl nil real_props nil)) 603 220 nil nil)) (total_le 0 (total_le-1 nil 3237052399 3237077766 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil) (dichotomous? const-decl "bool" orders nil) (total_order? const-decl "bool" orders nil)) 691 220 nil nil)) (dich_le 0 (dich_le-1 nil 3237052399 3237077766 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 166 60 nil nil)) (zero_le_zero 0 (zero_le_zero-1 nil 3237052399 3237077766 ("" (tcc :defs !) nil nil) proved nil 14 10 nil nil)) (neg_le 0 (neg_le-1 nil 3237052399 3237077766 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 244 80 nil nil)) (pos_times_le 0 (pos_times_le-1 nil 3237052399 3237077768 ("" (lemma "pos_times_lt") (("" (skosimp) (("" (case "x!1 = 0") (("1" (grind) nil nil) ("2" (case "y!1 = 0") (("1" (grind) nil nil) ("2" (inst?) (("2" (lemma "zero_times3") (("2" (inst?) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((zero_times3 formula-decl nil real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (pos_times_lt formula-decl nil real_props nil)) 1533 650 nil nil)) (neg_times_le 0 (neg_times_le-1 nil 3237052399 3237077769 ("" (lemma "pos_times_le") (("" (skosimp) (("" (inst -1 "x!1" "-y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((- const-decl "[real -> real]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_times_le formula-decl nil real_props nil)) 680 270 nil nil)) (quotient_pos_le 0 (quotient_pos_le-1 nil 3237052399 3237077769 ("" (lemma "quotient_pos_lt") (("" (skosimp) (("" (inst?) (("" (lemma "inv_ne_0") (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((inv_ne_0 formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (quotient_pos_lt formula-decl nil real_props nil)) 362 140 nil nil)) (quotient_neg_le 0 (quotient_neg_le-1 nil 3237052399 3237077770 ("" (lemma "quotient_pos_le") (("" (skosimp) (("" (inst -1 "-n0x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((- const-decl "[real -> real]" reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (quotient_pos_le formula-decl nil real_props nil)) 348 140 nil nil)) (pos_div_le 0 (pos_div_le-1 nil 3237052399 3237077773 ("" (lemma "pos_div_lt") (("" (skosimp) (("" (case "x!1 = 0") (("1" (grind) nil nil) ("2" (inst?) (("2" (lemma "zero_times3") (("2" (inst -1 "x!1" "1/n0y!1") (("2" (lemma "inv_ne_0") (("2" (inst -1 "n0y!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((/= const-decl "boolean" notequal nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/ const-decl "[real, nzreal -> real]" reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (inv_ne_0 formula-decl nil real_props nil) (zero_times3 formula-decl nil real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (pos_div_lt formula-decl nil real_props nil)) 3089 1310 nil nil)) (neg_div_le 0 (neg_div_le-1 nil 3237052399 3237077773 ("" (lemma "pos_div_le") (("" (skosimp) (("" (inst -1 "-n0y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((- const-decl "[real -> real]" reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_div_le formula-decl nil real_props nil)) 581 240 nil nil)) (div_mult_pos_le1 0 (div_mult_pos_le1-1 nil 3237052399 3237077774 ("" (lemma "div_mult_pos_lt1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) (("" (case-replace "z!1 = x!1 * py!1") (("1" (assert) (("1" (case-replace "x!1 * py!1 / py!1 = x!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3 4) (("2" (use "div_def") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "[real, real -> real]" reals nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil) (/ const-decl "[real, nzreal -> real]" reals nil) (div_def formula-decl nil real_axioms nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_lt1 formula-decl nil real_props nil)) 1059 410 nil nil)) (div_mult_pos_le2 0 (div_mult_pos_le2-1 nil 3237052399 3237077776 ("" (lemma "div_mult_pos_lt2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) (("" (case-replace "z!1 = x!1 * py!1") (("1" (assert) (("1" (case-replace "x!1 * py!1 / py!1 = x!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3 4) (("2" (use "div_def") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "[real, real -> real]" reals nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil) (/ const-decl "[real, nzreal -> real]" reals nil) (div_def formula-decl nil real_axioms nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_lt2 formula-decl nil real_props nil)) 1022 380 nil nil)) (div_mult_neg_le1 0 (div_mult_neg_le1-1 nil 3237052399 3237077777 ("" (lemma "div_mult_neg_lt1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) (("" (case-replace "z!1 = x!1 * ny!1") (("1" (assert) (("1" (case-replace "x!1 * ny!1 / ny!1 = x!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3 4) (("2" (use "div_def") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "[real, real -> real]" reals nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil) (/ const-decl "[real, nzreal -> real]" reals nil) (div_def formula-decl nil real_axioms nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_lt1 formula-decl nil real_props nil)) 1065 400 nil nil)) (div_mult_neg_le2 0 (div_mult_neg_le2-1 nil 3237052399 3237077778 ("" (lemma "div_mult_neg_lt2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) (("" (case-replace "z!1 = x!1 * ny!1") (("1" (assert) (("1" (case-replace "x!1 * ny!1 / ny!1 = x!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3 4) (("2" (use "div_def") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "[real, real -> real]" reals nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil) (/ const-decl "[real, nzreal -> real]" reals nil) (div_def formula-decl nil real_axioms nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_lt2 formula-decl nil real_props nil)) 1100 420 nil nil)) (both_sides_plus_le1 0 (both_sides_plus_le1-1 nil 3237052399 3237077779 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 627 220 nil nil)) (both_sides_plus_le2 0 (both_sides_plus_le2-1 nil 3237052399 3237077779 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 650 230 nil nil)) (both_sides_minus_le1 0 (both_sides_minus_le1-1 nil 3237052399 3237077780 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 446 150 nil nil)) (both_sides_minus_le2 0 (both_sides_minus_le2-1 nil 3237052399 3237077780 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 388 150 nil nil)) (both_sides_times_pos_le1 0 (both_sides_times_pos_le1-1 nil 3237052399 3237077781 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst?) (("" (inst -1 "y!1") (("" (grind) (("" (lemma "both_sides_times1") (("" (inst?) (("" (inst -1 "y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_times1 formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 868 340 nil nil)) (both_sides_times_pos_le2 0 (both_sides_times_pos_le2-1 nil 3237052399 3237077782 ("" (lemma "both_sides_times_pos_le1") (("" (skosimp) (("" (inst -1 "pz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_le1 formula-decl nil real_props nil)) 926 340 nil nil)) (both_sides_times_neg_le1 0 (both_sides_times_neg_le1-1 nil 3237052399 3237077783 ("" (lemma "both_sides_times_pos_le1") (("" (skosimp) (("" (inst -1 "-nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_le1 formula-decl nil real_props nil)) 577 230 nil nil)) (both_sides_times_neg_le2 0 (both_sides_times_neg_le2-1 nil 3237052399 3237077784 ("" (lemma "both_sides_times_neg_le1") (("" (skosimp) (("" (inst -1 "nz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_le1 formula-decl nil real_props nil)) 860 330 nil nil)) (both_sides_div_pos_le1 0 (both_sides_div_pos_le1-1 nil 3237052399 3237077784 ("" (lemma "both_sides_div_pos_lt1") (("" (skosimp) (("" (inst?) (("" (inst -1 "y!1") (("" (grind) (("" (lemma "both_sides_times_pos_le1") (("" (inst -1 "1/pz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_times_pos_le1 formula-decl nil real_props nil) (/ const-decl "[real, nzreal -> real]" reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil)) 771 290 nil nil)) (both_sides_div_pos_le2 0 (both_sides_div_pos_le2-1 nil 3237052399 3237077785 ("" (lemma "both_sides_div_pos_lt2") (("" (skosimp) (("" (inst?) (("" (inst -1 "py!1") (("" (grind) (("" (lemma "both_sides_div2") (("" (inst?) (("" (inst -1 "py!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_div2 formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt2 formula-decl nil real_props nil)) 758 310 nil nil)) (both_sides_div_pos_le3 0 (both_sides_div_pos_le3-1 nil 3237052399 3237077786 ("" (lemma "both_sides_div_pos_le2") (("" (skosimp) (("" (inst -1 "py!1" "px!1" "-nz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_le2 formula-decl nil real_props nil)) 541 220 nil nil)) (both_sides_div_neg_le1 0 (both_sides_div_neg_le1-1 nil 3237052399 3237077786 ("" (lemma "both_sides_div_pos_le1") (("" (skosimp) (("" (inst -1 "-nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_le1 formula-decl nil real_props nil)) 478 190 nil nil)) (both_sides_div_neg_le2 0 (both_sides_div_neg_le2-1 nil 3237052399 3237077787 ("" (lemma "both_sides_div_pos_le2") (("" (skosimp) (("" (inst -1 "-ny!1" "-nx!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_le2 formula-decl nil real_props nil)) 622 240 nil nil)) (both_sides_div_neg_le3 0 (both_sides_div_neg_le3-1 nil 3237052399 3237077788 ("" (lemma "both_sides_div_pos_le3") (("" (skosimp) (("" (inst -1 "nz!1" "-ny!1" "-nx!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((- const-decl "[real -> real]" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_le3 formula-decl nil real_props nil)) 602 220 nil nil)) (le_plus_le 0 (le_plus_le-1 nil 3237052399 3237077789 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 712 230 nil nil)) (le_minus_le 0 (le_minus_le-1 nil 3237052399 3237077789 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 435 160 nil nil)) (le_times_le_pos 0 (le_times_le_pos-1 nil 3237052399 3237077790 ("" (lemma "lt_times_lt_pos1") (("" (skosimp) (("" (case "nnz!1 = w!1") (("1" (lemma "both_sides_times_pos_le1") (("1" (inst -1 "w!1" "nnx!1" "y!1") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ("2" (inst -1 "nnz!1" "nnx!1" "w!1" "y!1") (("1" (grind) nil nil) ("2" (grind) (("2" (lemma "pos_times_le") (("2" (inst -1 "y!1" "w!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nnx!1 skolem-const-decl "nonneg_real" real_props nil) (pos_times_le formula-decl nil real_props nil) (both_sides_times_pos_le1 formula-decl nil real_props nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (w!1 skolem-const-decl "real" real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (lt_times_lt_pos1 formula-decl nil real_props nil)) 1156 420 nil nil)) (le_div_le_pos_TCC1 0 (le_div_le_pos_TCC1-1 nil 3237052399 3237077790 ("" (grind) nil nil) proved ((/= const-decl "boolean" notequal nil)) 81 40 nil nil)) (le_div_le_pos 0 (le_div_le_pos-1 nil 3237052399 3237077791 ("" (lemma "le_times_le_pos") (("" (skosimp) (("" (inst -1 "nnx!1" "1/w!1" "1/pz!1" "y!1") (("1" (grind) (("1" (rewrite "both_sides_div_pos_le2") nil nil)) nil) ("2" (assert) (("2" (lemma "quotient_pos_lt") (("2" (inst -1 "w!1") (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (quotient_pos_lt formula-decl nil real_props nil) (both_sides_div_pos_le2 formula-decl nil real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (/ const-decl "[real, nzreal -> real]" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (w!1 skolem-const-decl "real" real_props nil) (le_times_le_pos formula-decl nil real_props nil)) 1010 350 nil nil)) (le_times_le_neg 0 (le_times_le_neg-1 nil 3237052399 3237077792 ("" (lemma "le_times_le_pos") (("" (skosimp) (("" (inst -1 "-npy!1" "-npw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (le_times_le_pos formula-decl nil real_props nil)) 825 310 nil nil)) (le_div_le_neg_TCC1 0 (le_div_le_neg_TCC1-1 nil 3237052399 3237077792 ("" (grind) nil nil) proved ((/= const-decl "boolean" notequal nil)) 82 40 nil nil)) (le_div_le_neg 0 (le_div_le_neg-1 nil 3237052399 3237077793 ("" (lemma "le_div_le_pos") (("" (skosimp) (("" (inst -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[real -> real]" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (le_div_le_pos formula-decl nil real_props nil)) 599 230 nil nil)) (strict_gt 0 (strict_gt-1 nil 3237052399 3237077794 ("" (tcc :defs !) nil nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (strict_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (strict_total_order? const-decl "bool" orders nil)) 488 180 nil nil)) (trich_gt 0 (trich_gt-1 nil 3237052399 3237077794 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 185 80 nil nil)) (tri_unique_gt1 0 (tri_unique_gt1-1 nil 3237052399 3237077794 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (/= const-decl "boolean" notequal nil)) 225 80 nil nil)) (tri_unique_gt2 0 (tri_unique_gt2-1 nil 3237052399 3237077794 ("" (tcc :defs !) nil nil) proved nil 48 20 nil nil)) (zero_not_gt_zero 0 (zero_not_gt_zero-1 nil 3237052399 3237077794 ("" (tcc :defs !) nil nil) proved nil 25 10 nil nil)) (neg_gt 0 (neg_gt-1 nil 3237052399 3237077795 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 196 80 nil nil)) (pos_times_gt 0 (pos_times_gt-1 nil 3237052399 3237077796 ("" (lemma "pos_times_lt") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_times_lt formula-decl nil real_props nil)) 809 360 nil nil)) (neg_times_gt 0 (neg_times_gt-1 nil 3237052399 3237077796 ("" (lemma "neg_times_lt") (("" (skosimp) (("" (inst -1 "x!1" "y!1") (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (neg_times_lt formula-decl nil real_props nil)) 704 320 nil nil)) (quotient_pos_gt 0 (quotient_pos_gt-1 nil 3237052399 3237077797 ("" (lemma "quotient_pos_lt") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (quotient_pos_lt formula-decl nil real_props nil)) 280 110 nil nil)) (quotient_neg_gt 0 (quotient_neg_gt-1 nil 3237052399 3237077797 ("" (lemma "quotient_neg_lt") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (quotient_neg_lt formula-decl nil real_props nil)) 222 110 nil nil)) (pos_div_gt 0 (pos_div_gt-1 nil 3237052399 3237077798 ("" (lemma "pos_div_lt") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_div_lt formula-decl nil real_props nil)) 805 350 nil nil)) (neg_div_gt 0 (neg_div_gt-1 nil 3237052399 3237077799 ("" (lemma "neg_div_lt") (("" (skosimp) (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (neg_div_lt formula-decl nil real_props nil)) 910 400 nil nil)) (div_mult_pos_gt1 0 (div_mult_pos_gt1-1 nil 3237052399 3237077799 ("" (lemma "div_mult_pos_lt1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_lt1 formula-decl nil real_props nil)) 561 230 nil nil)) (div_mult_pos_gt2 0 (div_mult_pos_gt2-1 nil 3237052399 3237077800 ("" (lemma "div_mult_pos_lt2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_lt2 formula-decl nil real_props nil)) 519 250 nil nil)) (div_mult_neg_gt1 0 (div_mult_neg_gt1-1 nil 3237052399 3237077801 ("" (lemma "div_mult_neg_lt1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_lt1 formula-decl nil real_props nil)) 560 230 nil nil)) (div_mult_neg_gt2 0 (div_mult_neg_gt2-1 nil 3237052399 3237077802 ("" (lemma "div_mult_neg_lt2") (("" (skosimp) (("" (grind) nil nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_lt2 formula-decl nil real_props nil)) 973 400 nil nil)) (both_sides_plus_gt1 0 (both_sides_plus_gt1-1 nil 3237052399 3237077802 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 549 230 nil nil)) (both_sides_plus_gt2 0 (both_sides_plus_gt2-1 nil 3237052399 3237077803 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 537 210 nil nil)) (both_sides_minus_gt1 0 (both_sides_minus_gt1-1 nil 3237052399 3237077803 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 395 140 nil nil)) (both_sides_minus_gt2 0 (both_sides_minus_gt2-1 nil 3237052399 3237077804 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 386 150 nil nil)) (both_sides_times_pos_gt1 0 (both_sides_times_pos_gt1-1 nil 3237052399 3237077804 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 576 230 nil nil)) (both_sides_times_pos_gt2 0 (both_sides_times_pos_gt2-1 nil 3237052399 3237077805 ("" (lemma "both_sides_times_pos_lt2") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_lt2 formula-decl nil real_props nil)) 547 230 nil nil)) (both_sides_times_neg_gt1 0 (both_sides_times_neg_gt1-1 nil 3237052399 3237077806 ("" (lemma "both_sides_times_neg_lt1") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_lt1 formula-decl nil real_props nil)) 595 210 nil nil)) (both_sides_times_neg_gt2 0 (both_sides_times_neg_gt2-1 nil 3237052399 3237077806 ("" (lemma "both_sides_times_neg_lt2") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_lt2 formula-decl nil real_props nil)) 527 220 nil nil)) (both_sides_div_pos_gt1 0 (both_sides_div_pos_gt1-1 nil 3237052399 3237077807 ("" (lemma "both_sides_div_pos_lt1") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil)) 414 160 nil nil)) (both_sides_div_pos_gt2 0 (both_sides_div_pos_gt2-1 nil 3237052399 3237077807 ("" (lemma "both_sides_div_pos_lt2") (("" (skosimp) (("" (inst -1 "py!1" "px!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt2 formula-decl nil real_props nil)) 500 200 nil nil)) (both_sides_div_pos_gt3 0 (both_sides_div_pos_gt3-1 nil 3237052399 3237077808 ("" (lemma "both_sides_div_pos_lt3") (("" (skosimp) (("" (inst -1 "nz!1" "py!1" "px!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt3 formula-decl nil real_props nil)) 512 190 nil nil)) (both_sides_div_neg_gt1 0 (both_sides_div_neg_gt1-1 nil 3237052399 3237077808 ("" (lemma "both_sides_div_neg_lt1") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_lt1 formula-decl nil real_props nil)) 448 180 nil nil)) (both_sides_div_neg_gt2 0 (both_sides_div_neg_gt2-1 nil 3237052399 3237077809 ("" (lemma "both_sides_div_neg_lt2") (("" (skosimp) (("" (inst -1 "ny!1" "nx!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_lt2 formula-decl nil real_props nil)) 475 200 nil nil)) (both_sides_div_neg_gt3 0 (both_sides_div_neg_gt3-1 nil 3237052399 3237077810 ("" (lemma "both_sides_div_neg_lt3") (("" (skosimp) (("" (inst -1 "ny!1" "nx!1" "nz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_lt3 formula-decl nil real_props nil)) 472 190 nil nil)) (gt_plus_gt1 0 (gt_plus_gt1-1 nil 3237052399 3237077810 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 506 220 nil nil)) (gt_plus_gt2 0 (gt_plus_gt2-1 nil 3237052399 3237077811 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 553 220 nil nil)) (gt_minus_gt1 0 (gt_minus_gt1-1 nil 3237052399 3237077811 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 397 150 nil nil)) (gt_minus_gt2 0 (gt_minus_gt2-1 nil 3237052399 3237077812 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 401 150 nil nil)) (gt_times_gt_pos1 0 (gt_times_gt_pos1-1 nil 3237052399 3237077812 ("" (lemma "lt_times_lt_pos1") (("" (skosimp) (("" (inst -1 "nnw!1" "py!1" "z!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_times_lt_pos1 formula-decl nil real_props nil)) 585 210 nil nil)) (gt_times_gt_pos2 0 (gt_times_gt_pos2-1 nil 3237052399 3237077813 ("" (lemma "lt_times_lt_pos2") (("" (skosimp) (("" (inst -1 "nny!1" "pw!1" "z!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_times_lt_pos2 formula-decl nil real_props nil)) 521 220 nil nil)) (gt_div_gt_pos1_TCC1 0 (gt_div_gt_pos1_TCC1-1 nil 3237052399 3237077813 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 88 50 nil nil)) (gt_div_gt_pos1 0 (gt_div_gt_pos1-1 nil 3237052399 3237077813 ("" (lemma "lt_div_lt_pos1") (("" (skosimp) (("" (inst -1 "py!1" "pw!1" "z!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_div_lt_pos1 formula-decl nil real_props nil)) 444 180 nil nil)) (gt_div_gt_pos2_TCC1 0 (gt_div_gt_pos2_TCC1-1 nil 3237052399 3237077814 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 148 40 nil nil)) (gt_div_gt_pos2 0 (gt_div_gt_pos2-1 nil 3237052399 3237077814 ("" (lemma "lt_div_lt_pos2") (("" (skosimp) (("" (inst -1 "nny!1" "pw!1" "z!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_div_lt_pos2 formula-decl nil real_props nil)) 445 170 nil nil)) (gt_times_gt_neg1 0 (gt_times_gt_neg1-1 nil 3237052399 3237077815 ("" (lemma "lt_times_lt_neg1") (("" (skosimp) (("" (inst -1 "npz!1" "nx!1" "y!1" "w!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_times_lt_neg1 formula-decl nil real_props nil)) 539 220 nil nil)) (gt_times_gt_neg2 0 (gt_times_gt_neg2-1 nil 3237052399 3237077815 ("" (lemma "lt_times_lt_neg2") (("" (skosimp) (("" (inst -1 "npx!1" "nz!1" "y!1" "w!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_times_lt_neg2 formula-decl nil real_props nil)) 519 210 nil nil)) (gt_div_gt_neg1_TCC1 0 (gt_div_gt_neg1_TCC1-1 nil 3237052399 3237077816 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 84 40 nil nil)) (gt_div_gt_neg1 0 (gt_div_gt_neg1-1 nil 3237052399 3237077816 ("" (lemma "lt_div_lt_neg1") (("" (skosimp) (("" (inst -1 "nz!1" "nx!1" "y!1" "w!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_div_lt_neg1 formula-decl nil real_props nil)) 474 160 nil nil)) (gt_div_gt_neg2_TCC1 0 (gt_div_gt_neg2_TCC1-1 nil 3237052399 3237077816 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 92 40 nil nil)) (gt_div_gt_neg2 0 (gt_div_gt_neg2-1 nil 3237052399 3237077817 ("" (lemma "lt_div_lt_neg2") (("" (skosimp) (("" (inst -1 "npx!1" "nz!1" "y!1" "w!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_div_lt_neg2 formula-decl nil real_props nil)) 395 150 nil nil)) (strict_ge 0 (strict_ge-1 nil 3237052399 3237077817 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil) (dichotomous? const-decl "bool" orders nil) (total_order? const-decl "bool" orders nil)) 641 220 nil nil)) (dich_ge 0 (dich_ge-1 nil 3237052399 3237077818 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 193 90 nil nil)) (zero_ge_zero 0 (zero_ge_zero-1 nil 3237052399 3237077818 ("" (tcc :defs !) nil nil) proved nil 76 20 nil nil)) (neg_ge 0 (neg_ge-1 nil 3237052399 3237077818 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 179 90 nil nil)) (pos_times_ge 0 (pos_times_ge-1 nil 3237052399 3237077819 ("" (lemma "pos_times_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_times_le formula-decl nil real_props nil)) 784 320 nil nil)) (neg_times_ge 0 (neg_times_ge-1 nil 3237052399 3237077820 ("" (lemma "neg_times_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (neg_times_le formula-decl nil real_props nil)) 823 360 nil nil)) (quotient_pos_ge 0 (quotient_pos_ge-1 nil 3237052399 3237077820 ("" (lemma "quotient_pos_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (quotient_pos_le formula-decl nil real_props nil)) 310 120 nil nil)) (quotient_neg_ge 0 (quotient_neg_ge-1 nil 3237052399 3237077821 ("" (lemma "quotient_neg_le") (("" (skosimp) (("" (grind) nil nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (quotient_neg_le formula-decl nil real_props nil)) 492 220 nil nil)) (pos_div_ge 0 (pos_div_ge-1 nil 3237052399 3237077821 ("" (lemma "pos_div_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_div_le formula-decl nil real_props nil)) 796 350 nil nil)) (neg_div_ge 0 (neg_div_ge-1 nil 3237052399 3237077822 ("" (lemma "neg_div_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (neg_div_le formula-decl nil real_props nil)) 781 370 nil nil)) (div_mult_pos_ge1 0 (div_mult_pos_ge1-1 nil 3237052399 3237077823 ("" (lemma "div_mult_pos_le2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_le2 formula-decl nil real_props nil)) 542 240 nil nil)) (div_mult_pos_ge2 0 (div_mult_pos_ge2-1 nil 3237052399 3237077824 ("" (lemma "div_mult_pos_le1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_le1 formula-decl nil real_props nil)) 574 220 nil nil)) (div_mult_neg_ge1 0 (div_mult_neg_ge1-1 nil 3237052399 3237077824 ("" (lemma "div_mult_neg_le2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_le2 formula-decl nil real_props nil)) 578 240 nil nil)) (div_mult_neg_ge2 0 (div_mult_neg_ge2-1 nil 3237052399 3237077825 ("" (lemma "div_mult_neg_le1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_le1 formula-decl nil real_props nil)) 558 230 nil nil)) (both_sides_plus_ge1 0 (both_sides_plus_ge1-1 nil 3237052399 3237077825 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 555 220 nil nil)) (both_sides_plus_ge2 0 (both_sides_plus_ge2-1 nil 3237052399 3237077826 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 514 220 nil nil)) (both_sides_minus_ge1 0 (both_sides_minus_ge1-1 nil 3237052399 3237077826 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 425 160 nil nil)) (both_sides_minus_ge2 0 (both_sides_minus_ge2-1 nil 3237052399 3237077827 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 414 160 nil nil)) (both_sides_times_pos_ge1 0 (both_sides_times_pos_ge1-1 nil 3237052399 3237077828 ("" (lemma "both_sides_times_pos_le1") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_le1 formula-decl nil real_props nil)) 539 210 nil nil)) (both_sides_times_pos_ge2 0 (both_sides_times_pos_ge2-1 nil 3237052399 3237077828 ("" (lemma "both_sides_times_pos_le2") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_le2 formula-decl nil real_props nil)) 523 210 nil nil)) (both_sides_times_neg_ge1 0 (both_sides_times_neg_ge1-1 nil 3237052399 3237077829 ("" (lemma "both_sides_times_neg_le1") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_le1 formula-decl nil real_props nil)) 541 230 nil nil)) (both_sides_times_neg_ge2 0 (both_sides_times_neg_ge2-1 nil 3237052399 3237077829 ("" (lemma "both_sides_times_neg_le2") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_le2 formula-decl nil real_props nil)) 554 230 nil nil)) (both_sides_div_pos_ge1 0 (both_sides_div_pos_ge1-1 nil 3237052399 3237077830 ("" (lemma "both_sides_div_pos_le1") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_le1 formula-decl nil real_props nil)) 468 160 nil nil)) (both_sides_div_pos_ge2 0 (both_sides_div_pos_ge2-1 nil 3237052399 3237077830 ("" (lemma "both_sides_div_pos_le2") (("" (skosimp) (("" (inst -1 "py!1" "px!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_le2 formula-decl nil real_props nil)) 457 200 nil nil)) (both_sides_div_pos_ge3 0 (both_sides_div_pos_ge3-1 nil 3237052399 3237077831 ("" (lemma "both_sides_div_pos_le3") (("" (skosimp) (("" (inst -1 "nz!1" "py!1" "px!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_le3 formula-decl nil real_props nil)) 505 210 nil nil)) (both_sides_div_neg_ge1 0 (both_sides_div_neg_ge1-1 nil 3237052399 3237077831 ("" (lemma "both_sides_div_neg_le1") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_le1 formula-decl nil real_props nil)) 416 170 nil nil)) (both_sides_div_neg_ge2 0 (both_sides_div_neg_ge2-1 nil 3237052399 3237077832 ("" (lemma "both_sides_div_neg_le2") (("" (skosimp) (("" (inst -1 "ny!1" "nx!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_le2 formula-decl nil real_props nil)) 495 210 nil nil)) (both_sides_div_neg_ge3 0 (both_sides_div_neg_ge3-1 nil 3237052399 3237077833 ("" (lemma "both_sides_div_neg_le3") (("" (skosimp) (("" (inst -1 "ny!1" "nx!1" "nz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_le3 formula-decl nil real_props nil)) 449 180 nil nil)) (ge_plus_ge 0 (ge_plus_ge-1 nil 3237052399 3237077833 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 563 230 nil nil)) (ge_minus_ge 0 (ge_minus_ge-1 nil 3237052399 3237077834 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 386 140 nil nil)) (ge_times_ge_pos 0 (ge_times_ge_pos-1 nil 3237052399 3237077834 ("" (lemma "le_times_le_pos") (("" (skosimp) (("" (inst -1 "nny!1" "nnw!1" "z!1" "x!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (le_times_le_pos formula-decl nil real_props nil)) 442 170 nil nil)) (ge_div_ge_pos_TCC1 0 (ge_div_ge_pos_TCC1-1 nil 3237052399 3237077834 ("" (tcc :defs explicit) nil nil) proved ((/= const-decl "boolean" notequal nil)) 72 40 nil nil)) (ge_div_ge_pos 0 (ge_div_ge_pos-1 nil 3237052399 3237077835 ("" (lemma "le_div_le_pos") (("" (skosimp) (("" (inst -1 "nny!1" "pw!1" "z!1" "x!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (le_div_le_pos formula-decl nil real_props nil)) 393 150 nil nil)) (ge_times_ge_neg 0 (ge_times_ge_neg-1 nil 3237052399 3237077835 ("" (lemma "le_times_le_neg") (("" (skosimp) (("" (inst -1 "npz!1" "npx!1" "y!1" "w!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (le_times_le_neg formula-decl nil real_props nil)) 454 190 nil nil)) (ge_div_ge_neg_TCC1 0 (ge_div_ge_neg_TCC1-1 nil 3237052399 3237077835 ("" (tcc :defs explicit) nil nil) proved ((/= const-decl "boolean" notequal nil)) 150 50 nil nil)) (ge_div_ge_neg 0 (ge_div_ge_neg-1 nil 3237052399 3237077836 ("" (lemma "le_div_le_neg") (("" (skosimp*) (("" (inst -1 "npx!1" "nz!1" "y!1" "w!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (le_div_le_neg formula-decl nil real_props nil)) 418 150 nil nil)) (nonzero_times1 0 (nonzero_times1-1 nil 3237052399 3237077836 ("" (lemma "zero_times3") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (zero_times3 formula-decl nil real_props nil)) 292 120 nil nil)) (nonzero_times2 0 (nonzero_times2-1 nil 3237052399 3237077837 ("" (lemma "zero_times3") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (zero_times3 formula-decl nil real_props nil)) 276 120 nil nil)) (nonzero_times3 0 (nonzero_times3-1 nil 3237052399 3237077837 ("" (lemma "zero_times3") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (zero_times3 formula-decl nil real_props nil)) 353 130 nil nil)) (eq1_gt 0 (eq1_gt-1 nil 3237052399 3237077838 ("" (skosimp) (("" (lemma "div_cancel3") (("" (inst -1 "y!1" "1" "x!1") (("1" (assert) (("1" (hide -3) (("1" (replace -1 :dir rl) (("1" (hide -1) (("1" (lemma "div_mult_pos_gt2") (("1" (inst -1 "y!1" "1" "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "zero_times3") (("2" (inst?) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((div_cancel3 formula-decl nil real_props nil) (zero_times3 formula-decl nil real_props nil) (div_mult_pos_gt2 formula-decl nil real_props nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (y!1 skolem-const-decl "real" real_props nil)) 531 230 nil nil)) (eq1_ge 0 (eq1_ge-1 nil 3237052399 3237077838 ("" (lemma "eq1_gt") (("" (skosimp) (("" (case "x!1 = 1") (("1" (assert) nil nil) ("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (eq1_gt formula-decl nil real_props nil)) 330 120 nil nil)) (eqm1_gt 0 (eqm1_gt-1 nil 3237052399 3237077838 ("" (skosimp) (("" (lemma "eq1_gt") (("" (inst -1 "x!1" "-y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((eq1_gt formula-decl nil real_props nil) (- const-decl "[real -> real]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 382 170 nil nil)) (eqm1_ge 0 (eqm1_ge-1 nil 3237052399 3237077839 ("" (lemma "eq1_ge") (("" (skosimp) (("" (inst -1 "x!1" "-y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((- const-decl "[real -> real]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (eq1_ge formula-decl nil real_props nil)) 472 170 nil nil)) (eqm1_lt 0 (eqm1_lt-1 nil 3237052399 3237077839 ("" (skosimp) (("" (lemma "eq1_gt") (("" (inst -1 "-x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((eq1_gt formula-decl nil real_props nil) (- const-decl "[real -> real]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 380 170 nil nil)) (eqm1_le 0 (eqm1_le-1 nil 3237052399 3237077840 ("" (lemma "eq1_ge") (("" (skosimp) (("" (inst -1 "-x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((- const-decl "[real -> real]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (eq1_ge formula-decl nil real_props nil)) 426 160 nil nil)) (sqrt_1 0 (sqrt_1-1 nil 3237052399 3237077842 ("" (skosimp*) (("" (ground) (("" (case "abs(x!1)>1") (("1" (lemma "eq1_gt") (("1" (inst -1 "abs(x!1)" "abs(x!1)") (("1" (assert) (("1" (expand "abs" 1) (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "div_mult_pos_ge1") (("2" (inst -1 "abs(x!1)" "1" "1") (("1" (ground) (("1" (lemma "eq1_ge") (("1" (inst -1 "1/abs(x!1)" "1/abs(x!1)") (("1" (assert) (("1" (split) (("1" (case "abs(x!1) = 1") (("1" (assert) (("1" (expand "abs" -1) (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (assert) (("2" (rewrite "div_mult_pos_le1") (("2" (expand "abs" 1) (("2" (lift-if) (("2" (prop) (("1" (assert) nil nil) ("2" (assert) (("2" (case "x!1 = 0") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "abs" 1) (("2" (lift-if) (("2" (prop) (("1" (rewrite "div_times") (("1" (assert) nil nil)) nil) ("2" (rewrite "div_times") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "x!1 = 0") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (expand "abs" 2) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "x!1 = 0") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (expand "abs" 2) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 2309 920 nil nil)) (sqrt_1_lt 0 (sqrt_1_lt-1 nil 3237052399 3237077843 ("" (skosimp*) (("" (case-replace "x!1 * x!1 - 1 < 0") (("1" (hide -2) (("1" (case-replace "x!1 * x!1 - 1 = (x!1 + 1)*(x!1 - 1)") (("1" (hide -1) (("1" (lemma "pos_times_lt") (("1" (inst?) (("1" (assert) (("1" (hide -1) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (< const-decl "bool" reals nil) (- const-decl "[real, real -> real]" reals nil) (* const-decl "[real, real -> real]" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (+ const-decl "[real, real -> real]" reals nil) (pos_times_lt formula-decl nil real_props nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 781 300 nil nil)) (sqrt_1_le 0 (sqrt_1_le-1 nil 3237052399 3237077844 ("" (skosimp*) (("" (case-replace "x!1 * x!1 - 1 <= 0") (("1" (hide -2) (("1" (case-replace "x!1 * x!1 - 1 = (x!1 + 1)*(x!1 - 1)") (("1" (hide -1) (("1" (lemma "neg_times_le") (("1" (inst?) (("1" (assert) (("1" (hide -2) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (<= const-decl "bool" reals nil) (- const-decl "[real, real -> real]" reals nil) (* const-decl "[real, real -> real]" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (+ const-decl "[real, real -> real]" reals nil) (neg_times_le formula-decl nil real_props nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 725 300 nil nil)) (idem_mult 0 (idem_mult-1 nil 3237052399 3237077844 ("" (skosimp*) (("" (ground) (("" (lemma "div_cancel3") (("" (inst -1 "x!1" "x!1" "x!1") (("" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (/= const-decl "boolean" notequal nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (div_cancel3 formula-decl nil real_props nil)) 414 160 nil nil)) (product_1 0 (product_1-1 nil 3237052399 3237077845 ("" (skosimp) (("" (case "i!1 = 0") (("1" (grind) nil nil) ("2" (case "j!1 = 0") (("1" (grind) nil nil) ("2" (lemma "eq1_ge") (("2" (inst?) (("2" (lemma "eq1_ge") (("2" (inst -1 "j!1" "i!1") (("2" (assert) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (eq1_ge formula-decl nil real_props nil)) 539 220 nil nil)) (product_m1 0 (product_m1-1 nil 3237052399 3237077846 ("" (skosimp) (("" (lemma "product_1") (("" (inst -1 "i!1" "-j!1") (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((product_1 formula-decl nil real_props nil) (- const-decl "[real -> real]" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 547 140 nil nil)) (triangle 0 (triangle-1 nil 3237052399 3237077846 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 636 270 nil nil)) (abs_mult 0 (abs_mult-1 nil 3237052399 3237077848 ("" (skosimp) (("" (lemma "neg_times_lt") (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((neg_times_lt formula-decl nil real_props nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1292 550 nil nil)) (abs_div 0 (abs_div-1 nil 3237052399 3237077849 ("" (skosimp*) (("" (lemma "pos_div_gt") (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((pos_div_gt formula-decl nil real_props nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 981 430 nil nil)) (abs_abs 0 (abs_abs-1 nil 3237052399 3237077849 ("" (skosimp*) (("" (expand "abs") (("" (lift-if) (("" (ground) nil nil)) nil)) nil)) nil) proved ((abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 144 50 nil nil)) (abs_square 0 (abs_square-1 nil 3237052399 3237077849 ("" (skosimp*) (("" (expand "abs") (("" (propax) nil nil)) nil)) nil) proved ((abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 34 30 nil nil)) (abs_limits 0 (abs_limits-1 nil 3237052399 3237077850 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 478 190 nil nil)) (axiom_of_archimedes 0 (axiom_of_archimedes-1 nil 3237052399 3237077851 ("" (lemma "real_complete") (("" (inst -1 "{x:real|EXISTS (z : int) : z=x}") (("1" (grind :if-match nil) (("1" (inst -4 "y!1 - 1") (("1" (reduce :if-match nil) (("1" (inst - "s!1 + 1") (("1" (assert) nil nil) ("2" (lemma "int_plus_int_is_int") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (reduce) nil nil)) nil) ("2" (delete 2) (("2" (grind) (("2" (inst - "0") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int nonempty-type-eq-decl nil integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (- const-decl "[real, real -> real]" reals nil) (+ const-decl "[real, real -> real]" reals nil) (s!1 skolem-const-decl "({x: real | rational_pred(x) AND integer_pred(x)})" real_props nil) (int_plus_int_is_int subtype-tcc nil integers nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (NOT const-decl "[bool -> bool]" booleans nil) (upper_bound? const-decl "bool" bounded_real_defs nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (real_complete formula-decl nil bounded_real_defs nil)) 1724 670 nil nil)) (archimedean 0 (archimedean-1 nil 3237052399 3237077852 ("" (skolem!) (("" (lemma "axiom_of_archimedes" ("x" "1/px!1")) (("" (skolem!) (("" (assert) (("" (inst + "i!1") (("" (rewrite "div_mult_pos_lt1") (("" (rewrite "div_mult_pos_lt1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (/ const-decl "[real, nzreal -> real]" reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (axiom_of_archimedes formula-decl nil real_props nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil)) 795 300 nil nil)))(rational_props (density_positive 0 (density_positive-1 nil 3237052399 3237077854 ("" (skosimp) (("" (assert) (("" (lemma "archimedean" ("px" "y!1 - x!1")) (("" (skolem!) (("" (lemma "posreal_mult_closed" ("x" "y!1" "y" "n!1")) (("" (ground) (("" (lemma "wf_nat") (("" (expand "well_founded?") (("" (inst -1 "LAMBDA (n : nat) : y!1 * n!1 <= n") (("" (reduce :if-match nil) (("1" (auto-rewrite "div_mult_pos_lt1" "div_mult_pos_lt2") (("1" (inst + "(y!2 - 1)/n!1") (("1" (assert) (("1" (inst - "y!2 -1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (lemma "axiom_of_archimedes" ("x" "y!1 * n!1")) (("2" (skolem!) (("2" (assert) (("2" (inst + "i!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((well_founded? const-decl "bool" orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (/ const-decl "[real, nzreal -> real]" reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (rat nonempty-type-eq-decl nil rationals nil) (div_mult_pos_lt2 formula-decl nil real_props nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (axiom_of_archimedes formula-decl nil real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (<= const-decl "bool" reals nil) (* const-decl "[real, real -> real]" reals nil) (wf_nat formula-decl nil naturalnumbers nil) (posreal_mult_closed formula-decl nil real_axioms nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (archimedean formula-decl nil real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (- const-decl "[real, real -> real]" reals nil)) 1883 770 nil nil)) (density 0 (density-1 nil 3237052399 3237077855 ("" (lemma "density_positive") (("" (skosimp) (("" (case "x!1 >= 0") (("1" (inst? -) (("1" (assert) nil nil)) nil) ("2" (lemma "axiom_of_archimedes" ("x" "-x!1")) (("2" (skosimp) (("2" (inst -2 "i!1 + x!1" "i!1 + y!1") (("2" (assert) (("2" (skosimp) (("2" (inst 2 "r!1 - i!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((axiom_of_archimedes formula-decl nil real_props nil) (- const-decl "[real -> real]" reals nil) (+ const-decl "[real, real -> real]" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (rat nonempty-type-eq-decl nil rationals nil) (- const-decl "[real, real -> real]" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (density_positive formula-decl nil rational_props nil)) 681 250 nil nil)))(integer_props (integer_pred_ax 0 (integer_pred_ax-1 nil 3237052399 3237077855 ("" (skosimp*) (("" (case "i!1 >= 0") (("1" (inst 1 "i!1") nil nil) ("2" (inst 2 "-i!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (i!1 skolem-const-decl "int" integer_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (- const-decl "[real -> real]" reals nil)) 180 60 nil nil)) (div_simple 0 (div_simple-1 nil 3237052399 3237077856 ("" (grind :if-match nil) (("" (inst 2 "i!1/n0j!1") (("" (assert) nil nil)) nil)) nil) proved ((nzreal nonempty-type-eq-decl nil reals nil) (/ const-decl "[real, nzreal -> real]" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil)) 844 330 nil nil)) (lub_nat_TCC1 0 (lub_nat_TCC1-1 nil 3237052399 3237077857 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (set type-eq-decl nil sets nil) (extend const-decl "R" extend nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 460 180 nil nil)) (lub_nat 0 (lub_nat-1 nil 3237052399 3237077859 ("" (induct "m") (("1" (skosimp*) (("1" (expand "upper_bound?") (("1" (typepred "N!1") (("1" (expand "nonempty?") (("1" (expand "empty?") (("1" (skosimp*) (("1" (expand "member") (("1" (inst 1 "x!1") (("1" (expand "least_upper_bound?") (("1" (split) (("1" (expand "upper_bound?") (("1" (skosimp*) (("1" (inst -2 "s!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "upper_bound?") (("2" (inst -1 "x!1") (("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -1 "N!1") (("2" (assert) (("2" (replace 1) (("2" (assert) (("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (inst 2 "s!1") (("1" (expand "least_upper_bound?") (("1" (split) (("1" (expand "upper_bound?") (("1" (skosimp*) (("1" (inst -1 "s!2") (("1" (assert) (("1" (case "forall (i, j: int): i < j iff i + 1 <= j") (("1" (inst -1 "s!1" "s!2") (("1" (assert) nil nil) ("2" (typepred "s!2") (("2" (expand "extend") (("2" (prop) nil nil)) nil)) nil) ("3" (typepred "s!1") (("3" (expand "extend") (("3" (prop) nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (expand "upper_bound?") (("2" (inst -1 "s!1") nil nil)) nil)) nil)) nil)) nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp) (("3" (skosimp) (("3" (expand "nonempty?") (("3" (expand "empty?") (("3" (typepred "N!1") (("3" (expand "nonempty?") (("3" (expand "empty?") (("3" (skosimp) (("3" (inst -3 "x!1") (("3" (expand "member") (("3" (expand "extend") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp) (("4" (typepred "N!1") (("4" (expand "nonempty?") (("4" (expand "empty?") (("4" (skosimp) (("4" (expand "member") (("4" (inst -2 "x!1") (("4" (expand "extend") (("4" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((IFF const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (+ const-decl "[real, real -> real]" reals nil) (s!2 skolem-const-decl "(extend[real, nat, bool, FALSE](N!1))" integer_props nil) (s!1 skolem-const-decl "(extend[real, nat, bool, FALSE](N!1))" integer_props nil) (N!1 skolem-const-decl "(nonempty?[nat])" integer_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (x!1 skolem-const-decl "nat" integer_props nil) (N!1 skolem-const-decl "(nonempty?[nat])" integer_props nil) (nat_induction formula-decl nil naturalnumbers nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (pred type-eq-decl nil defined_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (upper_bound? const-decl "bool" bounded_real_defs nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil)) 2540 800 nil nil)) (lub_int_TCC1 0 (lub_int_TCC1-1 nil 3237052399 3237077860 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (set type-eq-decl nil sets nil) (extend const-decl "R" extend nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 472 200 nil nil)) (lub_int 0 (lub_int-1 nil 3237052399 3237077862 ("" (skosimp*) (("" (typepred "I!1") (("" (expand "nonempty?") (("" (expand "empty?") (("" (skosimp*) (("" (lemma "lub_nat") (("" (expand "member") (("" (inst - "{n|I!1(n+x!1)}" "i!1-x!1") (("1" (prop) (("1" (skosimp*) (("1" (inst + "n!1+x!1") (("1" (assert) (("1" (expand "least_upper_bound?") (("1" (prop) (("1" (expand "upper_bound?") (("1" (skosimp*) (("1" (assert) (("1" (inst - "s!1-x!1") (("1" (assert) nil nil) ("2" (assert) (("2" (expand "extend") (("2" (split 1) (("1" (flatten) (("1" (typepred "s!1") (("1" (expand "extend") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (prop) (("1" (lemma "rat_minus_rat_is_rat") (("1" (inst?) nil nil)) nil) ("2" (lemma "int_minus_int_is_int") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "y!1-x!1") (("2" (assert) (("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (inst?) (("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (typepred "s!1") (("2" (expand "extend" -1) (("2" (prop) (("2" (inst - "s!1+x!1") (("1" (assert) nil nil) ("2" (expand "extend" 1) (("2" (prop) (("1" (lemma "rat_plus_rat_is_rat") (("1" (inst?) nil nil)) nil) ("2" (lemma "int_plus_int_is_int") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (expand "upper_bound?") (("2" (inst -2 "x!1") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("3" (expand "nonempty?") (("3" (expand "empty?") (("3" (inst -1 "0") (("3" (expand "member") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (empty? const-decl "bool" sets nil) (lub_nat formula-decl nil integer_props nil) (x!1 skolem-const-decl "int" integer_props nil) (+ const-decl "[real, real -> real]" reals nil) (I!1 skolem-const-decl "(nonempty?[int])" integer_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (- const-decl "[real, real -> real]" reals nil) (i!1 skolem-const-decl "int" integer_props nil) (int_plus_int_is_int subtype-tcc nil integers nil) (rat_plus_rat_is_rat subtype-tcc nil rationals nil) (s!1 skolem-const-decl "(extend[real, nat, bool, FALSE]({n | I!1(n + x!1)}))" integer_props nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (s!1 skolem-const-decl "(extend[real, int, bool, FALSE](I!1))" integer_props nil) (rat nonempty-type-eq-decl nil rationals nil) (rat_minus_rat_is_rat subtype-tcc nil rationals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (int_minus_int_is_int subtype-tcc nil integers nil) (upper_bound? const-decl "bool" bounded_real_defs nil) (n!1 skolem-const-decl "({n | I!1(n + x!1)})" integer_props nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (member const-decl "bool" sets nil)) 2614 1010 nil nil)) (glb_nat 0 (glb_nat-1 nil 3237052399 3237077865 ("" (lemma "lub_int") (("" (skosimp*) (("" (inst -1 "{i: nonpos_int | N!1(-i)}" "0") (("1" (grind :if-match nil) (("1" (inst 1 "-j!1") (("1" (prop) (("1" (skosimp*) (("1" (inst -3 "-s!1") (("1" (assert) nil nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (assert) (("2" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) (("3" (lemma "minus_rat_is_rat") (("3" (inst -1 "s!1") nil nil)) nil)) nil) ("4" (lemma "minus_int_is_int") (("4" (inst -1 "s!1") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -3) (("2" (skosimp*) (("2" (inst -4 "-y!1") (("2" (prop) (("1" (assert) nil nil) ("2" (skosimp*) (("2" (inst -1 "-s!1") (("1" (assert) nil nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (prop) (("1" (lemma "minus_rat_is_rat") (("1" (inst -1 "s!1") nil nil)) nil) ("2" (lemma "minus_int_is_int") (("2" (inst -1 "s!1") (("2" (assert) nil nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "extend") (("2" (typepred "N!1") (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (skosimp*) (("2" (inst -2 "-x!1") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (greatest_lower_bound? const-decl "bool" bounded_real_defs nil) (lower_bound? const-decl "bool" bounded_real_defs nil) (upper_bound? const-decl "bool" bounded_real_defs nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (s!1 skolem-const-decl "(extend[real, nat, bool, FALSE](N!1))" integer_props nil) (minus_rat_is_rat subtype-tcc nil rationals nil) (rat nonempty-type-eq-decl nil rationals nil) (minus_int_is_int subtype-tcc nil integers nil) (s!1 skolem-const-decl "(extend[real, int, bool, FALSE]
     (extend[int, nonpos_int, bool, FALSE]({i: nonpos_int | N!1(-i)})))" integer_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) (<= const-decl "bool" reals nil) (nonpos_int nonempty-type-eq-decl nil integers nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N!1 skolem-const-decl "(nonempty?[nat])" integer_props nil) (- const-decl "[real -> real]" reals nil) (lub_int formula-decl nil integer_props nil)) 2925 990 nil nil)) (glb_int 0 (glb_int-1 nil 3237052399 3237077868 ("" (lemma "lub_int") (("" (skosimp*) (("" (inst -1 "{i: int | I!1(-i)}" "-i!1") (("1" (prop) (("1" (skosimp*) (("1" (grind :if-match nil) (("1" (inst 1 "-j!1") (("1" (prop) (("1" (skosimp*) (("1" (inst -1 "-s!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2) (("2" (typepred "s!1") (("2" (expand "extend") (("2" (assert) (("2" (prop) (("1" (assert) nil nil) ("2" (lemma "minus_rat_is_rat") (("2" (inst -1 "s!1") nil nil)) nil) ("3" (lemma "minus_int_is_int") (("3" (inst -1 "s!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -3 "-y!1") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "-s!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3) (("2" (typepred "s!1") (("2" (expand "extend") (("2" (assert) (("2" (ground) (("1" (lemma "minus_rat_is_rat") (("1" (inst -1 "s!1") nil nil)) nil) ("2" (lemma "minus_int_is_int") (("2" (inst -1 "s!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind :if-match nil) (("2" (inst -4 "-s!1") (("1" (assert) nil nil) ("2" (hide -1 -2 -3 2) (("2" (typepred "s!1") (("2" (expand "extend") (("2" (ground) (("1" (lemma "minus_rat_is_rat") (("1" (inst -1 "s!1") nil nil)) nil) ("2" (lemma "minus_int_is_int") (("2" (inst -1 "s!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (typepred "I!1") (("2" (grind :if-match nil) (("2" (inst -3 "-x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (greatest_lower_bound? const-decl "bool" bounded_real_defs nil) (lower_bound? const-decl "bool" bounded_real_defs nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (upper_bound? const-decl "bool" bounded_real_defs nil) (s!1 skolem-const-decl "(extend[real, int, bool, FALSE](I!1))" integer_props nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_int_is_int subtype-tcc nil integers nil) (minus_rat_is_rat subtype-tcc nil rationals nil) (rat nonempty-type-eq-decl nil rationals nil) (s!1 skolem-const-decl "(extend[real, int, bool, FALSE]({i: int | I!1(-i)}))" integer_props nil) (s!1 skolem-const-decl "(extend[real, int, bool, FALSE]({i: int | I!1(-i)}))" integer_props nil) (TRUE const-decl "bool" booleans nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) (I!1 skolem-const-decl "(nonempty?[int])" integer_props nil) (- const-decl "[real -> real]" reals nil) (lub_int formula-decl nil integer_props nil)) 2698 990 nil nil)))(floor_ceil (floor_exists 0 (floor_exists-1 nil 3237052399 3237077869 ("" (skosimp*) (("" (lemma "lub_int") (("" (lemma "axiom_of_archimedes") (("" (inst?) (("" (skosimp*) (("" (inst - "{i|i<=x!1}" "i!1") (("1" (prop) (("1" (expand "least_upper_bound?") (("1" (skolem-typepred) (("1" (inst?) (("1" (prop) (("1" (expand "upper_bound?") (("1" (inst - "j!1+1") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "upper_bound?") (("2" (skolem-typepred) (("2" (expand "extend") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite "nonempty_exists") (("2" (lemma "axiom_of_archimedes") (("2" (inst - "abs(x!1)") (("2" (skosimp*) (("2" (inst + "-i!2") (("2" (expand "abs") (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((lub_int formula-decl nil integer_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (x!1 skolem-const-decl "real" floor_ceil nil) (<= const-decl "bool" reals nil) (integer nonempty-type-from-decl nil integers nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (upper_bound? const-decl "bool" bounded_real_defs nil) (j!1 skolem-const-decl "({i | i <= x!1})" floor_ceil nil) (+ const-decl "[real, real -> real]" reals nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (i!2 skolem-const-decl "int" floor_ceil nil) (- const-decl "[real -> real]" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (nonempty_exists formula-decl nil sets_lemmas nil) (axiom_of_archimedes formula-decl nil real_props nil)) 1147 370 nil nil)) (ceiling_exists 0 (ceiling_exists-1 nil 3237052399 3237077870 ("" (skosimp*) (("" (case "integer?(x!1)") (("1" (inst?) (("1" (assert) nil nil) ("2" (assert) (("2" (expand "integer?") (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (lemma "floor_exists") (("2" (inst?) (("2" (skosimp*) (("2" (inst + "i!1+1") (("2" (assert) (("2" (expand "integer?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (integer? const-decl "bool" integers nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (integer nonempty-type-from-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (x!1 skolem-const-decl "real" floor_ceil nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (+ const-decl "[real, real -> real]" reals nil) (floor_exists formula-decl nil floor_ceil nil)) 379 130 nil nil)) (floor_TCC1 0 (floor_TCC1-1 nil 3237052399 3237077870 ("" (inst + "lambda x: choose( {i: integer | i <= x & x < 1 + i})") (("" (expand "nonempty?") (("" (expand "empty?") (("" (expand "member") (("" (lemma "floor_exists") (("" (skosimp*) (("" (inst?) (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (floor_exists formula-decl nil floor_ceil nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (+ const-decl "[real, real -> real]" reals nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 409 170 nil nil)) (fractional_TCC1 0 (fractional_TCC1-1 nil 3237052399 3237077871 ("" (tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 329 130 nil nil)) (ceiling_TCC1 0 (ceiling_TCC1-1 nil 3237052399 3237077871 ("" (inst + "lambda x: choose( {i: integer | x <= i & i < x + 1})") (("" (expand "nonempty?") (("" (expand "empty?") (("" (expand "member") (("" (lemma "ceiling_exists") (("" (skosimp*) (("" (inst - "x!1") (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (ceiling_exists formula-decl nil floor_ceil nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (+ const-decl "[real, real -> real]" reals nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 408 150 nil nil)) (floor_def 0 (floor_def-1 nil 3237052399 3237077872 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 340 150 nil nil)) (ceiling_def 0 (ceiling_def-1 nil 3237052399 3237077872 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 299 130 nil nil)) (floor_ceiling_reflect1 0 (floor_ceiling_reflect1-1 nil 3237052399 3237077872 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 230 80 nil nil)) (floor_ceiling_reflect2 0 (floor_ceiling_reflect2-1 nil 3237052399 3237077872 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 208 70 nil nil)) (nonneg_floor_is_nat 0 (nonneg_floor_is_nat-1 nil 3237052399 3237077873 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil)) 106 50 nil nil)) (nonneg_ceiling_is_nat 0 (nonneg_ceiling_is_nat-1 nil 3237052399 3237077873 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil)) 145 50 nil nil)) (floor_int 0 (floor_int-1 nil 3237052399 3237077873 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil)) 176 70 nil nil)) (ceiling_int 0 (ceiling_int-1 nil 3237052399 3237077873 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil)) 114 50 nil nil)) (floor_plus_int 0 (floor_plus_int-1 nil 3237052399 3237077874 ("" (skolem!) (("" (name "j!1" "floor(x!1+i!1)") (("" (name "k!1" "floor(x!1)") (("" (typepred "floor(i!1 + x!1)") (("" (typepred "floor(x!1)") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (+ const-decl "[real, real -> real]" reals nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil)) 886 370 nil nil)) (ceiling_plus_int 0 (ceiling_plus_int-1 nil 3237052399 3237077875 ("" (skolem!) (("" (lemma "ceiling_def") (("" (inst-cp - "x!1+i!1") (("" (flatten) (("" (name "j!1" "ceiling(x!1)") (("" (name "k!1" "ceiling(x!1+i!1)") (("" (replace -1) (("" (replace -2) (("" (inst - "x!1") (("" (replace -2) (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((ceiling_def formula-decl nil floor_ceil nil) (= const-decl "[T, T -> boolean]" equalities nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (+ const-decl "[real, real -> real]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number -> boolean]" reals nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 753 320 nil nil)) (floor_ceiling_nonint 0 (floor_ceiling_nonint-1 nil 3237052399 3237077875 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (integer? const-decl "bool" integers nil)) 292 130 nil nil)) (floor_ceiling_int 0 (floor_ceiling_int-1 nil 3237052399 3237077876 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil)) 206 80 nil nil)) (floor_neg 0 (floor_neg-1 nil 3237052399 3237077876 ("" (skosimp*) (("" (lift-if) (("" (prop) (("1" (rewrite "floor_int") (("1" (rewrite "floor_int") (("1" (assert) nil nil) ("2" (rewrite "closed_neg") (("1" (assert) (("1" (expand "integer?") (("1" (flatten) (("1" (rewrite "closed_neg") nil nil)) nil)) nil)) nil) ("2" (expand "integer?") (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (expand "integer?") (("2" (propax) nil nil)) nil)) nil) ("2" (expand "integer?") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (floor_int formula-decl nil floor_ceil nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil) (rat nonempty-type-eq-decl nil rationals nil) (closed_neg formula-decl nil rationals nil) (integer? const-decl "bool" integers nil) (int nonempty-type-eq-decl nil integers nil) (closed_neg formula-decl nil integers nil) (- const-decl "[real -> real]" reals nil)) 710 280 nil nil)) (real_parts 0 (real_parts-1 nil 3237052399 3237077877 ("" (expand "fractional") (("" (propax) nil nil)) nil) proved ((fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)) 89 20 nil nil)) (floor_plus 0 (floor_plus-2 "" 3237078783 3237078783 ("" (skosimp) (("" (expand "fractional") (("" (lemma "floor_plus_int") (("" (inst -1 "-1 * floor(x!1) - floor(y!1)" "x!1 + y!1") (("" (replace -1) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 92404 4700 t shostak) (floor_plus-1 nil 3237052399 3237078567 ("" (skolem!) (("" (expand "fractional") (("" (assert) nil nil)) nil)) nil) proved ((fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil) (- const-decl "[real, real -> real]" reals nil) (* const-decl "[real, real -> real]" reals nil) (- const-decl "[real -> real]" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (+ const-decl "[real, real -> real]" reals nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (floor_plus_int formula-decl nil floor_ceil nil)) 690739 197480 nil nil)) (ceiling_plus 0 (ceiling_plus-1 nil 3237052399 nil ("" (skolem!) (("" (expand "fractional") (("" (lemma "ceiling_plus_int") (("" (inst-cp -1 "-floor(x!1) - floor(y!1)" "x!1 + y!1") (("" (replace -2) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (floor_split 0 (floor_split-1 nil 3237052399 nil ("" (grind) nil nil) proved nil nil nil nil nil)) (floor_within_1 0 (floor_within_1-1 nil 3237052399 nil ("" (grind) nil nil) proved nil nil nil nil nil)) (ceiling_within_1 0 (ceiling_within_1-1 nil 3237052399 nil ("" (grind) nil nil) proved nil nil nil nil nil)) (floor_val 0 (floor_val-1 nil 3237052399 nil ("" (grind :if-match nil) (("" (typepred "floor(i!1/j!1)") (("" (case "j!1 > 0") (("1" (case "i!1/j!1 >= k!1" "i!1/j!1 < k!1 + 1") (("1" (name-replace "q" "i!1/j!1") (("1" (hide -3 -6 -7 -8 -9 1) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (hide -1 -2 -3 -4 -5 -6 -7 2 3) (("2" (assert) (("2" (use "div_mult_pos_lt1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (hide -1 -2 -3 -4 -5 -7 2 3) (("3" (use "div_mult_pos_ge1") (("3" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (floor_small 0 (floor_small-1 nil 3237052399 nil ("" (skosimp) (("" (lift-if) (("" (prop) (("1" (case "i!1/j!1 < 1") (("1" (assert) nil nil) ("2" (hide 2) (("2" (case "(j!1 - i!1)/j!1 > 0") (("1" (assert) nil nil) ("2" (grind) (("1" (use "pos_div_gt") (("1" (assert) nil nil)) nil) ("2" (use "pos_div_gt") (("2" (assert) nil nil)) nil) ("3" (use "pos_div_gt") (("3" (assert) nil nil)) nil) ("4" (use "pos_div_gt") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "floor(i!1/j!1)") (("2" (case "i!1/j!1 >= -1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3) (("2" (case "(i!1 + j!1)/j!1 >= 0") (("1" (assert) nil nil) ("2" (hide 2) (("2" (grind :if-match nil) (("1" (use "pos_div_ge") (("1" (assert) nil nil)) nil) ("2" (use "pos_div_ge") (("2" (assert) nil nil)) nil) ("3" (use "pos_div_ge") (("3" (assert) nil nil)) nil) ("4" (use "pos_div_ge") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (floor_eq_0 0 (floor_eq_0-1 nil 3237052399 nil ("" (skosimp) (("" (typepred "floor(x!1)") (("" (assert) nil nil)) nil)) nil) proved nil nil nil nil nil)))(exponentiation (expt_TCC1 0 (expt_TCC1-1 nil 3237052399 nil ("" (grind) nil nil) proved nil nil nil nil nil)) (expt_TCC2 0 (expt_TCC2-1 nil 3237052399 nil ("" (grind) nil nil) proved nil nil nil nil nil)) (expt_pos_aux 0 (expt_pos_aux-1 nil 3237052399 nil ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (rewrite "pos_times_gt") nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_nonzero_aux 0 (expt_nonzero_aux-1 nil 3237052399 nil ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" -2) (("2" (inst?) (("2" (rewrite "zero_times3") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (nnreal_expt 0 (nnreal_expt-1 nil 3237052399 nil ("" (induct "n") (("1" (skosimp) (("1" (expand "expt") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst -1 "x!1") (("2" (assert) (("2" (lemma "pos_times_ge") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (posreal_expt 0 (posreal_expt-1 nil 3237052399 nil ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (inst -1 "x!1") (("2" (expand "expt" +) (("2" (assert) (("2" (lemma "pos_times_gt") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (nzreal_expt 0 (nzreal_expt-1 nil 3237052399 nil ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" -2) (("2" (inst -1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (rat_expt 0 (rat_expt-1 nil 3237052399 nil ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (inst -1 "x!1") (("2" (expand "expt" +) (("2" (lemma "rat_times_rat_is_rat") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (nnrat_expt 0 (nnrat_expt-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (posrat_expt 0 (posrat_expt-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (int_expt 0 (int_expt-1 nil 3237052399 nil ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (inst -1 "x!1") (("2" (expand "expt" +) (("2" (lemma "int_times_int_is_int") (("2" (inst -1 "x!1" "expt(x!1, j!1)") nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (nat_expt 0 (nat_expt-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (posnat_expt 0 (posnat_expt-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (caret_TCC1 0 (caret_TCC1-1 nil 3237052399 nil ("" (grind) nil nil) proved nil nil nil nil nil)) (caret_TCC2 0 (caret_TCC2-1 nil 3237052399 nil ("" (skolem!) (("" (typepred "i!1") (("" (rewrite "expt_nonzero_aux") nil nil)) nil)) nil) proved nil nil nil nil nil)) (expt_pos_TCC1 0 (expt_pos_TCC1-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (expt_pos 0 (expt_pos-1 nil 3237052399 nil ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (rewrite "expt_pos_aux") nil nil) ("2" (rewrite "quotient_pos_gt") (("2" (rewrite "expt_pos_aux") nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_nonzero_TCC1 0 (expt_nonzero_TCC1-1 nil 3237052399 nil ("" (grind) nil nil) proved nil nil nil nil nil)) (expt_nonzero 0 (expt_nonzero-1 nil 3237052399 nil ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (lemma "expt_nonzero_aux") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "inv_ne_0") (("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (nnreal_exp 0 (nnreal_exp-1 nil 3237052399 nil ("" (skolem-typepred) (("" (expand "^") (("" (lift-if) (("" (split 1) (("1" (flatten) (("1" (case-replace "x!1 = 0") (("1" (expand "expt") (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil) ("2" (use "expt_pos_aux") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (case-replace "x!1 = 0") (("1" (expand "expt") (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil) ("2" (use "expt_pos_aux") (("1" (lemma "quotient_pos_gt") (("1" (inst -1 "expt(x!1, -i!1)") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (posreal_exp 0 (posreal_exp-1 nil 3237052399 nil ("" (skolem-typepred) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (use "expt_pos_aux") nil nil) ("2" (use "expt_pos_aux") (("1" (lemma "quotient_pos_gt") (("1" (inst -1 "expt(x!1, -i!1)") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (nzreal_exp 0 (nzreal_exp-1 nil 3237052399 nil ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (lemma "nzreal_expt") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "nzreal_expt") (("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (rat_exp 0 (rat_exp-1 nil 3237052399 nil ("" (skolem-typepred) (("" (expand "^") (("" (propax) nil nil)) nil)) nil) proved nil nil nil nil nil)) (nnrat_exp 0 (nnrat_exp-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (posrat_exp_TCC1 0 (posrat_exp_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (posrat_exp 0 (posrat_exp-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (int_exp_TCC1 0 (int_exp_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (int_exp 0 (int_exp-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (nat_exp_TCC1 0 (nat_exp_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (nat_exp 0 (nat_exp-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (posint_exp_TCC1 0 (posint_exp_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (posint_exp 0 (posint_exp-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (expt_x0_aux 0 (expt_x0_aux-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (expt_x1_aux 0 (expt_x1_aux-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (expt_1n_aux 0 (expt_1n_aux-1 nil 3237052399 nil ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (assert) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (increasing_expt_aux 0 (increasing_expt_aux-1 nil 3237052399 nil ("" (induct "m") (("1" (skosimp*) (("1" (expand "expt") (("1" (expand "expt") (("1" (expand "expt") (("1" (lemma "both_sides_times_pos_gt1") (("1" (inst -1 "gt1x!1" "gt1x!1" "1") (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (expand "expt" 1) (("2" (lemma "div_mult_pos_gt1") (("2" (inst -1 "gt1x!1" "expt(gt1x!1, j!1 + 2)" "gt1x!1") (("2" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (decreasing_expt_aux 0 (decreasing_expt_aux-1 nil 3237052399 nil ("" (induct "m") (("1" (skosimp) (("1" (expand "expt") (("1" (expand "expt") (("1" (expand "expt") (("1" (lemma "div_mult_pos_lt2") (("1" (inst -1 "lt1x!1" "lt1x!1" "lt1x!1") (("1" (prop) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (expand "expt" +) (("2" (lemma "div_mult_pos_gt2") (("2" (inst -1 "lt1x!1" "expt(lt1x!1, 2 + j!1)" "lt1x!1") (("2" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_1_aux 0 (expt_1_aux-1 nil 3237052399 nil ("" (induct "n") (("1" (skosimp*) (("1" (prop) (("1" (expand "expt") (("1" (expand "expt") (("1" (propax) nil nil)) nil)) nil) ("2" (expand "expt") (("2" (expand "expt") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (inst -1 "px!1") (("2" (expand "expt" +) (("2" (ground) (("2" (case "j!1 = 0") (("1" (replace -1) (("1" (expand "expt") (("1" (expand "expt") (("1" (assert) (("1" (rewrite "sqrt_1") nil nil)) nil)) nil)) nil)) nil) ("2" (case "px!1 > 1") (("1" (lemma "increasing_expt_aux") (("1" (inst -1 "px!1" "j!1-1") (("1" (assert) (("1" (lemma "eq1_gt") (("1" (inst -1 "px!1" "expt(px!1, 1 + j!1)") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (lemma "decreasing_expt_aux") (("2" (inst -1 "px!1" "j!1-1") (("1" (lemma "eq1_gt") (("1" (inst -1 "1/px!1" "1/expt(px!1, 1 + j!1)") (("1" (assert) (("1" (split) (("1" (rewrite "div_mult_pos_lt1") nil nil) ("2" (assert) (("2" (rewrite "div_mult_pos_gt2") nil nil)) nil) ("3" (assert) (("3" (rewrite "div_times") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_plus_aux 0 (expt_plus_aux-1 nil 3237052399 nil ("" (induct "n") (("1" (skosimp*) (("1" (expand "expt" 1 3) (("1" (propax) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "expt" 1 3) (("2" (expand "expt" 1 1) (("2" (inst -1 "m!1" "n0x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_minus_aux_TCC1 0 (expt_minus_aux_TCC1-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (expt_minus_aux 0 (expt_minus_aux-1 nil 3237052399 nil ("" (induct "m") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (case "j!1 + 1 = n!1") (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (expand "expt" 2 1) (("2" (expand "expt" 2 2) (("2" (assert) (("2" (inst?) (("2" (assert) (("2" (replace -1) (("2" (rewrite "times_div1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil) proved nil nil nil nil nil)) (expt_times_aux 0 (expt_times_aux-1 nil 3237052399 nil ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" 1 2) (("2" (expand "expt" 1 1) (("2" (lift-if) (("2" (inst -1 "m!1" "n0x!1") (("2" (replace -1 :dir rl) (("2" (prop) (("1" (assert) (("1" (case "m!1 = 0") (("1" (replace -1) (("1" (grind) nil nil)) nil) ("2" (case "j!1 = 0") (("1" (assert) nil nil) ("2" (lemma "posreal_mult_closed") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (case "m!1 = 0") (("1" (grind) nil nil) ("2" (case "j!1 = 0") (("1" (replace -1) (("1" (expand "expt" 3 3) (("1" (expand "expt" 3 2) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (lemma "expt_plus_aux") (("2" (inst -1 "m!1" "m!1 * j!1" "n0x!1") (("2" (replace -1 :dir rl) (("2" (expand "expt" 3 2) (("2" (lift-if) (("2" (assert) (("2" (assert) (("2" (prop) (("2" (lemma "zero_times3") (("2" (inst -1 "m!1" "j!1 + 1") (("2" (replace -2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_divide_aux 0 (expt_divide_aux-1 nil 3237052399 nil ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" 1 2) (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (case "expt(n0x!1, j!1 * m!1 + m!1) = expt(n0x!1, m!1) * expt(n0x!1, m!1 * j!1)") (("1" (assert) nil nil) ("2" (hide 2) (("2" (rewrite "expt_plus_aux") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt1_aux 0 (both_sides_expt1_aux-1 nil 3237052399 nil ("" (induct "m") (("1" (skosimp) (("1" (expand "expt") (("1" (expand "expt" 1 1) (("1" (ground) (("1" (case "px!1 > 1") (("1" (lemma "increasing_expt_aux") (("1" (inst -1 "px!1" "n!1-1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "decreasing_expt_aux") (("2" (inst -1 "px!1" "n!1-1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand "expt") (("2" (propax) nil nil)) nil) ("3" (replace -1) (("3" (rewrite "expt_1n_aux") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (expand "expt" 1 1) (("2" (expand "expt" 1 2) (("2" (case "n!1 = 0") (("1" (replace -1) (("1" (ground) (("1" (expand "expt" -1 2) (("1" (case "px!1 >1") (("1" (lemma "increasing_expt_aux") (("1" (inst -1 "px!1" "j!1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "decreasing_expt_aux") (("2" (inst -1 "px!1" "j!1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (rewrite "expt_1n_aux") (("2" (rewrite "expt_1n_aux") nil nil)) nil)) nil)) nil)) nil) ("2" (ground) (("1" (inst -2 "n!1-1" "px!1") (("1" (assert) (("1" (rewrite "both_sides_times2") nil nil)) nil)) nil) ("2" (replace -1) (("2" (rewrite "expt_1n_aux") (("2" (rewrite "expt_1n_aux") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt2_aux 0 (both_sides_expt2_aux-1 nil 3237052399 nil ("" (induct "pm") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (skosimp) (("3" (skosimp) (("3" (split) (("1" (expand "expt" +) (("1" (inst -1 "px!1" "py!1") (("1" (ground) (("1" (hide 1) (("1" (hide -2) (("1" (case "FORALL (m:nat), (px, py: posreal): px > py IMPLIES expt(px,m+1) > expt(py, m+1)") (("1" (case "px!1>py!1") (("1" (inst -2 "j!1-1" "px!1" "py!1") (("1" (assert) (("1" (lemma "gt_times_gt_pos1") (("1" (inst -1 "expt(py!1, j!1)" "py!1" "px!1" "expt(px!1, j!1)") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (expand "expt" +) (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (inst -1 "j!1-1" "py!1" "px!1") (("1" (assert) (("1" (lemma "gt_times_gt_pos1") (("1" (inst -1 "expt(px!1, j!1)" "px!1" "py!1" "expt(py!1, j!1)") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (expand "expt" +) (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide -1 2 3) (("2" (induct "m") (("1" (skosimp*) (("1" (expand "expt") (("1" (expand "expt") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (assert) (("2" (expand "expt" +) (("2" (rewrite "gt_times_gt_pos1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "expt") (("2" (expand "expt") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_pos_lt_aux 0 (both_sides_expt_pos_lt_aux-1 nil 3237052399 nil ("" (induct "m") (("1" (skosimp) (("1" (expand "expt") (("1" (expand "expt") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -1 "px!1" "py!1") (("2" (expand "expt" 1) (("2" (ground) (("1" (rewrite "lt_times_lt_pos1") nil nil) ("2" (lemma "ge_times_ge_pos") (("2" (inst -1 "expt(py!1, 1 + j!1)" "py!1" "px!1" "expt(px!1, 1 + j!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_gt1_lt_aux 0 (both_sides_expt_gt1_lt_aux-1 nil 3237052399 nil ("" (induct "m") (("1" (skosimp*) (("1" (expand "expt") (("1" (expand "expt" 1 1) (("1" (ground) (("1" (expand "expt") (("1" (assert) nil nil)) nil) ("2" (lemma "increasing_expt_aux") (("2" (inst -1 "gt1x!1" "n!1 - 1") (("2" (expand "expt" -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (ground) (("1" (case "n!1 = 0") (("1" (replace -1) (("1" (expand "expt" -2 2) (("1" (lemma "increasing_expt_aux") (("1" (inst -1 "gt1x!1" "j!1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst -2 "gt1x!1" "n!1-1") (("1" (ground) (("1" (rewrite "both_sides_times_pos_lt2") nil nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (inst -2 "gt1x!1" "n!1-1") (("2" (assert) (("2" (rewrite "both_sides_times_pos_lt2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_lt1_lt_aux 0 (both_sides_expt_lt1_lt_aux-1 nil 3237052399 nil ("" (induct "m") (("1" (skosimp*) (("1" (expand "expt" 1 1) (("1" (expand "expt" -1 1) (("1" (ground) (("1" (lemma "decreasing_expt_aux") (("1" (inst -1 "lt1x!1" "n!1-1") (("1" (assert) nil nil) ("2" (expand "expt") (("2" (expand "expt") (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst -1 "lt1x!1" "n!1 - 1") (("1" (ground) (("1" (rewrite "both_sides_times_pos_lt2") nil nil) ("2" (rewrite "both_sides_times_pos_lt2") nil nil)) nil) ("2" (ground) (("2" (expand "expt" 1 2) (("2" (lemma "decreasing_expt_aux") (("2" (inst -1 "lt1x!1" "j!1") (("2" (expand "expt" -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_pos_le_aux 0 (both_sides_expt_pos_le_aux-1 nil 3237052399 nil ("" (skosimp) (("" (ground) (("1" (lemma "both_sides_expt_pos_lt_aux") (("1" (inst -1 "m!1" "py!1" "px!1") (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "both_sides_expt_pos_lt_aux") (("2" (inst -1 "m!1" "py!1" "px!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_gt1_le_aux 0 (both_sides_expt_gt1_le_aux-1 nil 3237052399 nil ("" (skosimp) (("" (lemma "both_sides_expt_gt1_lt_aux") (("" (inst -1 "gt1x!1" "n!1" "m!1") (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_lt1_le_aux 0 (both_sides_expt_lt1_le_aux-1 nil 3237052399 nil ("" (lemma "both_sides_expt_lt1_lt_aux") (("" (skosimp) (("" (inst -1 "lt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_pos_gt_aux 0 (both_sides_expt_pos_gt_aux-1 nil 3237052399 nil ("" (lemma "both_sides_expt_pos_lt_aux") (("" (skosimp) (("" (inst -1 "m!1" "py!1" "px!1") (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_gt1_gt_aux 0 (both_sides_expt_gt1_gt_aux-1 nil 3237052399 nil ("" (lemma "both_sides_expt_gt1_lt_aux") (("" (skosimp) (("" (inst -1 "gt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_lt1_gt_aux 0 (both_sides_expt_lt1_gt_aux-1 nil 3237052399 nil ("" (lemma "both_sides_expt_lt1_lt_aux") (("" (skosimp) (("" (inst -1 "lt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_pos_ge_aux 0 (both_sides_expt_pos_ge_aux-1 nil 3237052399 nil ("" (lemma "both_sides_expt_pos_le_aux") (("" (skosimp) (("" (inst -1 "m!1" "py!1" "px!1") (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_gt1_ge_aux 0 (both_sides_expt_gt1_ge_aux-1 nil 3237052399 nil ("" (lemma "both_sides_expt_gt1_le_aux") (("" (skosimp) (("" (inst -1 "gt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_lt1_ge_aux 0 (both_sides_expt_lt1_ge_aux-1 nil 3237052399 nil ("" (lemma "both_sides_expt_lt1_le_aux") (("" (skosimp) (("" (inst -1 "lt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_of_mult 0 (expt_of_mult-1 nil 3237052399 nil ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_of_div 0 (expt_of_div-1 nil 3237052399 nil ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_of_inv 0 (expt_of_inv-1 nil 3237052399 nil ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_of_abs 0 (expt_of_abs-1 nil 3237052399 nil ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) (("2" (replace -1 :hide? t) (("2" (grind) (("1" (lemma "negreal_times_negreal_is_posreal") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "nnreal_times_nnreal_is_nnreal") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (abs_of_expt_inv 0 (abs_of_expt_inv-1 nil 3237052399 nil ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) (("2" (lemma "div_times") (("2" (inst -1 "abs(n0x!1)" "expt(abs(n0x!1), j!1)" "1" "1") (("2" (replace -1 :dir rl) (("2" (replace -2 :dir rl) (("2" (hide -1 -2) (("2" (grind) (("1" (lemma "quotient_neg_lt") (("1" (inst-cp -1 "n0x!1 * expt(n0x!1, j!1)") (("1" (inst -1 "expt(n0x!1, j!1)") (("1" (assert) (("1" (hide -3 -5) (("1" (lemma "negreal_times_negreal_is_posreal") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "quotient_neg_lt") (("2" (inst-cp -1 "expt(n0x!1, j!1)") (("2" (inst -1 "n0x!1 * expt(n0x!1, j!1)") (("2" (assert) (("2" (hide -2 3) (("2" (lemma "nnreal_times_nnreal_is_nnreal") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (lemma "quotient_neg_lt") (("3" (inst-cp -1 "expt(n0x!1, j!1)") (("3" (inst -1 "n0x!1 * expt(n0x!1, j!1)") (("3" (assert) (("3" (hide 3 4) (("3" (lemma "posreal_mult_closed") (("3" (inst -1 "-n0x!1" "expt(n0x!1, j!1)") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (lemma "quotient_neg_lt") (("4" (inst-cp -1 "expt(n0x!1, j!1)") (("4" (inst -1 "n0x!1 * expt(n0x!1, j!1)") (("4" (assert) (("4" (hide -2 2) (("4" (lemma "posreal_mult_closed") (("4" (inst -1 "n0x!1" "-expt(n0x!1, j!1)") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_x0_TCC1 0 (expt_x0_TCC1-1 nil 3237052399 nil ("" (grind) nil nil) proved nil nil nil nil nil)) (expt_x0 0 (expt_x0-1 nil 3237052399 nil ("" (grind) nil nil) proved nil nil nil nil nil)) (expt_x1_TCC1 0 (expt_x1_TCC1-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (expt_x1 0 (expt_x1-1 nil 3237052399 nil ("" (grind) nil nil) proved nil nil nil nil nil)) (expt_1i 0 (expt_1i-1 nil 3237052399 nil ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (rewrite "expt_1n_aux") nil nil) ("2" (rewrite "expt_1n_aux") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_plus_TCC1 0 (expt_plus_TCC1-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (expt_plus 0 (expt_plus-1 nil 3237052399 nil ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (lift-if) (("" (lift-if) (("" (prop) (("1" (rewrite "expt_plus_aux") nil nil) ("2" (assert) nil nil) ("3" (lemma "expt_minus_aux") (("3" (inst -1 "j!1" "-i!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("4" (lemma "cross_mult") (("4" (inst -1 "expt(n0x!1, -(i!1 + j!1))" "expt(n0x!1, -i!1)" "1" "expt(n0x!1, j!1)") (("1" (flatten) (("1" (hide -1) (("1" (replace 2) (("1" (lemma "expt_plus_aux") (("1" (inst -1 "j!1" "-(i!1 + j!1)" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("5" (lemma "expt_minus_aux") (("5" (inst -1 "i!1" "-j!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("6" (assert) (("6" (lemma "cross_mult") (("6" (inst -1 "expt(n0x!1, -(i!1 + j!1))" "expt(n0x!1, -j!1)" "1" "expt(n0x!1, i!1)") (("6" (flatten) (("6" (hide -1) (("6" (split) (("1" (assert) nil nil) ("2" (hide 3) (("2" (lemma "expt_plus_aux") (("2" (inst -1 "i!1" "-(i!1 + j!1)" "n0x!1") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("7" (assert) nil nil) ("8" (case "expt(n0x!1, -(i!1 + j!1)) = expt(n0x!1, -i!1) * expt(n0x!1, -j!1)") (("1" (assert) (("1" (replace -1) (("1" (lemma "div_times") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (lemma "expt_plus_aux") (("2" (inst -1 "-i!1" "-j!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil) ("3" (assert) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_times_TCC1 0 (expt_times_TCC1-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (expt_times 0 (expt_times-1 nil 3237052399 nil ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (lift-if) (("" (prop) (("1" (rewrite "expt_times_aux") nil nil) ("2" (assert) (("2" (rewrite "pos_times_ge") nil nil)) nil) ("3" (rewrite "pos_times_ge") (("3" (assert) (("3" (grind) nil nil)) nil)) nil) ("4" (lemma "expt_divide_aux") (("4" (inst -1 "-i!1" "j!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("5" (lemma "pos_times_ge") (("5" (inst?) (("5" (assert) (("5" (grind) (("5" (rewrite "expt_1n_aux") (("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("6" (case "expt(n0x!1, -(i!1 * j!1)) = expt(expt(n0x!1, i!1), -j!1)") (("1" (assert) nil nil) ("2" (hide 3) (("2" (lemma "expt_times_aux") (("2" (inst -1 "i!1" "-j!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("3" (assert) nil nil) ("4" (propax) nil nil) ("5" (assert) nil nil)) nil) ("7" (lemma "expt_divide_aux") (("7" (inst -1 "-i!1" "-j!1" "n0x!1") (("1" (replace -1 :dir rl) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("8" (lemma "pos_times_ge") (("8" (inst?) (("8" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_inverse_TCC1 0 (expt_inverse_TCC1-1 nil 3237052399 nil ("" (grind) nil nil) proved nil nil nil nil nil)) (expt_inverse 0 (expt_inverse-1 nil 3237052399 nil ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (lift-if) (("" (prop) (("1" (grind) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_div_TCC1 0 (expt_div_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (expt_div 0 (expt_div-1 nil 3237052399 nil ("" (skosimp) (("" (lemma "expt_inverse") (("" (inst -1 "j!1" "n0x!1") (("" (lemma "expt_plus") (("" (inst -1 "i!1" "-j!1" "n0x!1") (("" (assert) (("" (replace -1) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt1_TCC1 0 (both_sides_expt1_TCC1-1 nil 3237052399 nil ("" (tcc :defs explicit) nil nil) proved nil nil nil nil nil)) (both_sides_expt1 0 (both_sides_expt1-1 nil 3237052399 nil ("" (lemma "both_sides_expt1_aux") (("" (skosimp) (("" (expand "^") (("" (lift-if) (("" (split) (("1" (flatten) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (inst -3 "n0i!1 - 1" "n0j!1 - 1" "px!1") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (ground) (("1" (lemma "div_cancel3") (("1" (inst -1 "expt(px!1, -n0j!1)" "1" "expt(px!1, n0i!1)") (("1" (prop) (("1" (hide -1 -3) (("1" (rewrite "expt_plus_aux" :dir rl) (("1" (lemma "expt_1_aux") (("1" (inst -1 "-n0j!1 + n0i!1 - 1" "px!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (rewrite "expt_1n_aux") (("2" (rewrite "expt_1n_aux") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (prop) (("1" (lemma "div_cancel3") (("1" (inst -1 "expt(px!1, -n0i!1)" "1" "expt(px!1, n0j!1)") (("1" (prop) (("1" (hide -1 -3) (("1" (rewrite "expt_plus_aux" :dir rl) (("1" (lemma "expt_1_aux") (("1" (inst -1 "n0j!1 - n0i!1 - 1" "px!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (expand "expt" 1) (("2" (assert) nil nil)) nil) ("3" (replace -1) (("3" (rewrite "expt_1n_aux") (("3" (rewrite "expt_1n_aux") (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (rewrite "cross_mult") (("4" (inst -2 "-n0j!1-1" "-n0i!1-1" "px!1") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("5" (replace -1) (("5" (propax) nil nil)) nil) ("6" (replace -1) (("6" (rewrite "expt_1n_aux") (("6" (rewrite "expt_1n_aux") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt2 0 (both_sides_expt2-1 nil 3237052399 nil ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt2_aux") (("" (lift-if) (("" (prop) (("1" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("3" (inst -2 "-n0i!1" "px!1" "py!1") (("1" (assert) (("1" (rewrite "cross_mult") nil nil)) nil) ("2" (assert) nil nil)) nil) ("4" (inst -2 "-n0i!1" "px!1" "py!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (pos_expt_gt_TCC1 0 (pos_expt_gt_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (pos_expt_gt 0 (pos_expt_gt-1 nil 3237052399 nil ("" (induct "n") (("1" (skosimp) (("1" (rewrite "expt_x0") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (rewrite "expt_plus") (("2" (rewrite "expt_x1") (("2" (inst?) (("2" (case "FORALL (a, b, c, d: nat): a < c & b < d => a + b < c * d") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "c") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (assert) (("2" (case "a!1 = 0") (("1" (assert) nil nil) ("2" (inst -1 "a!1-1" "b!2" "d!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_ge1 0 (expt_ge1-1 nil 3237052399 nil ("" (induct-and-rewrite "n" 1 "expt_plus" "expt_x0" "expt_x1") (("" (lemma "ge_times_ge_pos") (("" (inst?) (("" (inst - "1" "1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_pos_lt_TCC1 0 (both_sides_expt_pos_lt_TCC1-1 nil 3237052399 nil ("" (tcc :defs explicit) nil nil) proved nil nil nil nil nil)) (both_sides_expt_pos_lt 0 (both_sides_expt_pos_lt-1 nil 3237052399 nil ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt_pos_lt_aux") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_gt1_lt_TCC1 0 (both_sides_expt_gt1_lt_TCC1-1 nil 3237052399 nil ("" (tcc :defs explicit) nil nil) proved nil nil nil nil nil)) (both_sides_expt_gt1_lt 0 (both_sides_expt_gt1_lt-1 nil 3237052399 nil ("" (skosimp*) (("" (ground) (("1" (case "j!1<=i!1") (("1" (case "gt1x!1 ^ j!1 <= gt1x!1 ^ i!1") (("1" (assert) nil nil) ("2" (hide -2 2) (("2" (case "forall (n:nat): gt1x!1^j!1<=gt1x!1^(j!1+n)") (("1" (inst - "i!1-j!1") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst -1 "1" "j!1 + j!2" "gt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "le_times_le_pos") (("2" (inst - "1" "gt1x!1 ^ j!1" "gt1x!1 ^ (j!1 + j!2)" "gt1x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "forall (n:nat): gt1x!1^i!1<gt1x!1^(1+i!1+n)") (("1" (inst - "j!1-(i!1+1)") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) (("1" (rewrite "expt_plus") (("1" (rewrite "expt_x1") (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst - "gt1x!1 ^ i!1" "1" "gt1x!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst - "1" "(1 + i!1 + j!2)" "gt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "lt_times_lt_pos1") (("2" (inst - "gt1x!1^i!1" "1" "gt1x!1^(1+i!1+j!2)" "gt1x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_lt1_lt_TCC1 0 (both_sides_expt_lt1_lt_TCC1-1 nil 3237052399 nil ("" (tcc :defs explicit) nil nil) proved nil nil nil nil nil)) (both_sides_expt_lt1_lt 0 (both_sides_expt_lt1_lt-1 nil 3237052399 nil ("" (skosimp*) (("" (ground) (("1" (case "FORALL (n:nat): lt1x!1^(i!1+n) <= lt1x!1^i!1") (("1" (inst -1 "j!1-i!1") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst - "1" "i!1 + j!2" "lt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "le_times_le_pos") (("2" (inst - "lt1x!1" "lt1x!1^(i!1+j!2)" "lt1x!1^i!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "FORALL (n:nat): lt1x!1^(j!1+n+1) < lt1x!1^j!1") (("1" (inst -1 "i!1 -j!1 -1") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) (("1" (rewrite "expt_plus") (("1" (rewrite "expt_x1") (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst -1 "lt1x!1 ^ j!1" "lt1x!1" "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst -1 "1" "1 + j!1 + j!2" "lt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "lt_times_lt_pos1") (("2" (inst -1 "lt1x!1 ^ (j!1 + j!2 + 1)" "lt1x!1" "lt1x!1 ^ j!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_pos_le 0 (both_sides_expt_pos_le-1 nil 3237052399 nil ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt_pos_le_aux") (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_gt1_le 0 (both_sides_expt_gt1_le-1 nil 3237052399 nil ("" (skosimp*) (("" (case "i!1 = j!1") (("1" (assert) nil nil) ("2" (lemma "both_sides_expt_gt1_lt") (("2" (inst -1 "gt1x!1" "j!1" "i!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_lt1_le 0 (both_sides_expt_lt1_le-1 nil 3237052399 nil ("" (skosimp*) (("" (lemma "both_sides_expt_lt1_lt") (("" (inst -1 "j!1" "i!1" "lt1x!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_pos_gt 0 (both_sides_expt_pos_gt-1 nil 3237052399 nil ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt_pos_gt_aux") (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_gt1_gt 0 (both_sides_expt_gt1_gt-1 nil 3237052399 nil ("" (skosimp*) (("" (lemma "both_sides_expt_gt1_lt") (("" (inst -1 "gt1x!1" "j!1" "i!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_lt1_gt 0 (both_sides_expt_lt1_gt-1 nil 3237052399 nil ("" (skosimp*) (("" (lemma "both_sides_expt_lt1_lt") (("" (inst -1 "j!1" "i!1" "lt1x!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_pos_ge 0 (both_sides_expt_pos_ge-1 nil 3237052399 nil ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt_pos_ge_aux") (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_gt1_ge 0 (both_sides_expt_gt1_ge-1 nil 3237052399 nil ("" (skosimp*) (("" (lemma "both_sides_expt_gt1_le") (("" (inst -1 "gt1x!1" "j!1" "i!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (both_sides_expt_lt1_ge 0 (both_sides_expt_lt1_ge-1 nil 3237052399 nil ("" (skosimp*) (("" (lemma "both_sides_expt_lt1_le") (("" (inst -1 "j!1" "i!1" "lt1x!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_gt1_pos_TCC1 0 (expt_gt1_pos_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (expt_gt1_pos 0 (expt_gt1_pos-1 nil 3237052399 nil ("" (induct "pm") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (skosimp*) (("3" (split) (("1" (rewrite "expt_plus") (("1" (rewrite "expt_x1") (("1" (inst?) (("1" (lemma "both_sides_times_pos_ge1") (("1" (inst -1 "gt1x!1" "gt1x!1 ^ j!1" "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "^") (("2" (expand "expt") (("2" (expand "expt") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_gt1_neg_TCC1 0 (expt_gt1_neg_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (expt_gt1_neg 0 (expt_gt1_neg-1 nil 3237052399 nil ("" (skosimp) (("" (case "gt1x!1^(-pm!1) * gt1x!1^pm!1 < gt1x!1^pm!1") (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst -1 "gt1x!1 ^ pm!1" "gt1x!1 ^ (-pm!1)" "1") (("1" (assert) nil nil)) nil)) nil) ("2" (rewrite "expt_plus" :dir rl) (("2" (hide 2) (("2" (lemma "expt_gt1_pos") (("2" (inst -1 "gt1x!1" "pm!1") (("2" (assert) (("2" (expand "^" 1 1) (("2" (expand "expt") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_gt1_nonpos_TCC1 0 (expt_gt1_nonpos_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (expt_gt1_nonpos 0 (expt_gt1_nonpos-1 nil 3237052399 nil ("" (skosimp) (("" (case "m!1 = 0") (("1" (grind) nil nil) ("2" (lemma "expt_gt1_neg") (("2" (inst -1 "gt1x!1" "m!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (mult_expt_TCC1 0 (mult_expt_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (mult_expt 0 (mult_expt-1 nil 3237052399 nil ("" (skosimp) (("" (expand "^") (("" (lift-if) (("" (lemma "expt_of_mult") (("" (prop) (("1" (inst?) nil nil) ("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (div_expt_TCC1 0 (div_expt_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (div_expt 0 (div_expt-1 nil 3237052399 nil ("" (skosimp) (("" (expand "^") (("" (lemma "expt_of_div") (("" (lift-if) (("" (prop) (("1" (inst?) nil nil) ("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (inv_expt_TCC1 0 (inv_expt_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (inv_expt 0 (inv_expt-1 nil 3237052399 nil ("" (skosimp) (("" (expand "^") (("" (lift-if) (("" (lemma "expt_of_inv") (("" (prop) (("1" (inst?) nil nil) ("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (abs_expt_TCC1 0 (abs_expt_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (abs_expt 0 (abs_expt-1 nil 3237052399 nil ("" (skosimp) (("" (expand "^") (("" (lift-if) (("" (lemma "expt_of_abs") (("" (prop) (("1" (instantiate -2 ("i!1" "n0x!1")) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil) ("2" (inst?) (("1" (lemma "abs_div") (("1" (inst -1 "expt(n0x!1, -i!1)" "1") (("1" (replace -1) (("1" (expand "abs" 2 2) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_lt1_bound1 0 (expt_lt1_bound1-1 nil 3237052399 nil ("" (induct-and-simplify "n") (("" (use "both_sides_times_pos_le2" ("pz" "lt1x!1")) (("" (assert) nil nil)) nil)) nil) proved nil nil nil nil nil)) (expt_lt1_bound2 0 (expt_lt1_bound2-1 nil 3237052399 nil ("" (skolem!) (("" (use "expt_lt1_bound1") (("" (use "expt_1_aux") (("" (assert) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_gt1_bound1 0 (expt_gt1_bound1-1 nil 3237052399 nil ("" (skolem 1 ("a!1" _)) (("" (induct-and-simplify "n") (("" (lemma "both_sides_times_pos_le2") (("" (inst -1 "expt(a!1, j!1)" "1" "a!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (expt_gt1_bound2 0 (expt_gt1_bound2-1 nil 3237052399 nil ("" (skolem!) (("" (use "expt_gt1_bound1" ("n" "pn!1 - 1")) (("" (expand "expt" +) (("" (lemma "both_sides_times_pos_le1") (("" (assert) (("" (inst -1 "gt1x!1" "1" "expt(gt1x!1, pn!1-1)") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (large_expt 0 (large_expt-1 nil 3237052399 nil ("" (skosimp) (("" (assert) (("" (auto-rewrite-theory "sets[real]") (("" (lemma "real_complete" ("S" "{x:real | EXISTS (n : nat) : x = expt(px!1, n)}")) (("1" (hide 1) (("1" (split -1) (("1" (skosimp*) (("1" (expand "least_upper_bound?") (("1" (flatten) (("1" (inst -2 "y!1/px!1") (("1" (case "y!1 > 0") (("1" (ground) (("1" (lemma "both_sides_div_pos_le2" ("px" "1" "py" "px!1" "pz" "y!1")) (("1" (assert) nil nil)) nil) ("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (inst - "s!1*px!1") (("1" (rewrite "div_mult_pos_le2") nil nil) ("2" (typepred "s!1") (("2" (skosimp*) (("2" (inst 1 "n!1+1") (("2" (expand "expt" +) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (delete -2) (("2" (expand "upper_bound?") (("2" (inst - "1") (("1" (assert) nil nil) ("2" (inst 1 "0") (("2" (expand "expt") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal 1) (("2" (skolem!) (("2" (inst 2 "py!1") (("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (typepred "s!1") (("2" (skosimp*) (("2" (inst 1 "n!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -1 "1") (("2" (inst 1 "0") (("2" (expand "expt") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (small_expt 0 (small_expt-1 nil 3237052399 nil ("" (skosimp*) (("" (lemma "large_expt" ("px" "1/px!1")) (("" (rewrite "div_mult_pos_lt2") (("" (assert) (("" (inst -1 "1/py!1") (("" (skolem!) (("" (inst 1 "n!1") (("" (rewrite "expt_of_inv") (("" (rewrite "both_sides_div_pos_lt2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (exponent_adjust_TCC1 0 (exponent_adjust_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (exponent_adjust_TCC2 0 (exponent_adjust_TCC2-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (exponent_adjust_TCC3 0 (exponent_adjust_TCC3-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (exponent_adjust 0 (exponent_adjust-1 nil 3237052399 nil ("" (skosimp*) (("" (lemma "both_sides_expt_gt1_lt") (("" (inst - "b!1" "i!1 - pm!1" "i!1") (("" (ground) (("" (rewrite "expt_plus") (("" (rewrite "expt_x1") (("" (lemma "both_sides_times_pos_le1") (("" (inst - "b!1 ^ i!1" "2" "b!1") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (exp_of_exists 0 (exp_of_exists-1 nil 3237052399 nil ("" (skosimp*) (("" (lemma "lub_int") (("" (case "py!1<1") (("1" (inst - "{i|b!1^i<=py!1}" "-1") (("1" (prop) (("1" (expand "least_upper_bound?") (("1" (skosimp*) (("1" (hide -2) (("1" (inst + "j!1") (("1" (assert) (("1" (expand "upper_bound?") (("1" (inst - "j!1+1") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "upper_bound?") (("2" (skolem-typepred) (("2" (expand "extend") (("2" (case "s!1>=0") (("1" (lemma "expt_ge1") (("1" (inst?) (("1" (assert) nil nil) ("2" (assert) (("2" (prop) nil nil)) nil)) nil)) nil) ("2" (prop) (("2" (assert) (("2" (case "EXISTS (x:int): 0 > x & x > -1") (("1" (skosimp) (("1" (assert) nil nil)) nil) ("2" (inst 1 "s!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "nonempty_exists") (("2" (lemma "axiom_of_archimedes") (("2" (inst - "1/py!1") (("2" (skosimp*) (("2" (inst + "-i!1") (("2" (rewrite "expt_inverse") (("2" (rewrite "div_mult_pos_le1") (("2" (lemma "pos_expt_gt") (("2" (inst?) (("1" (rewrite "div_mult_pos_lt1") (("1" (lemma "both_sides_times_pos_lt2") (("1" (inst - "py!1" "i!1" "b!1^i!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "axiom_of_archimedes") (("2" (inst?) (("2" (skosimp*) (("2" (inst - "{i|b!1^i<=py!1}" "i!1") (("1" (prop) (("1" (expand "least_upper_bound?") (("1" (skosimp*) (("1" (hide -2) (("1" (inst + "j!1") (("1" (assert) (("1" (expand "upper_bound?") (("1" (inst - "j!1+1") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "upper_bound?") (("2" (skolem-typepred) (("2" (expand "extend") (("2" (prop) (("2" (lemma "pos_expt_gt") (("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "nonempty_exists") (("2" (inst + "0") (("2" (rewrite "expt_x0") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)))(euclidean_division (mod_TCC1 0 (mod_TCC1-1 nil 3237052399 nil ("" (skolem-typepred) (("" (inst 1 "0") nil nil)) nil) proved nil nil nil nil nil)) (euclid_nat 0 (euclid_nat-1 nil 3237052399 nil ("" (skolem 1 (_ "b!1")) (("" (induct "a") (("1" (inst + "0" "0") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (case "r!1 = b!1-1") (("1" (inst + "q!1+1" "0") (("1" (assert) nil nil)) nil) ("2" (assert) (("2" (inst + "q!1" "r!1+1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (euclid_int 0 (euclid_int-1 nil 3237052399 nil ("" (skolem!) (("" (case "n!1 >= 0") (("1" (use "euclid_nat" ("a" "n!1")) (("1" (skolem!) (("1" (inst?) nil nil)) nil)) nil) ("2" (assert) (("2" (use "euclid_nat" ("a" "- n!1")) (("2" (skolem!) (("2" (case "r!1 = 0") (("1" (inst + "-q!1" "0") (("1" (assert) nil nil)) nil) ("2" (inst + "- q!1 - 1" "b!1 - r!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (unique_quotient 0 (unique_quotient-1 nil 3237052399 nil ("" (skosimp) (("" (assert) (("" (case "q1!1 > q2!1") (("1" (case "b!1 * (q1!1 - q2!1) = r2!1 - r1!1") (("1" (case "b!1 * (q1!1 - q2!1) >= b!1") (("1" (assert) nil nil) ("2" (lemma "both_sides_times_pos_ge2") (("2" (inst -1 "b!1" "q1!1 - q2!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "b!1 * (q2!1 - q1!1) = r1!1 - r2!1") (("1" (case "b!1 * (q2!1 - q1!1) >= b!1") (("1" (assert) nil nil) ("2" (lemma "both_sides_times_pos_ge2") (("2" (inst -1 "b!1" "q2!1 - q1!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (unique_remainder 0 (unique_remainder-1 nil 3237052399 nil ("" (lemma "unique_quotient") (("" (skosimp) (("" (inst?) (("" (assert) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (unique_division 0 (unique_division-1 nil 3237052399 nil ("" (lemma "unique_quotient") (("" (lemma "unique_remainder") (("" (skosimp) (("" (inst?) (("" (assert) (("" (inst -2 "b!1" "q1!1" "q2!1" "r1!1" "r2!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)))(divides (mult_divides1 0 (mult_divides1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (mult_divides2 0 (mult_divides2-1 nil 3237052399 nil ("" (skosimp) (("" (grind :if-match nil) (("" (inst 1 "n!1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (divides_sum 0 (divides_sum-1 nil 3237052399 nil ("" (skosimp) (("" (expand "divides") (("" (skosimp) (("" (skosimp) (("" (inst 1 "x!2 + x!3") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (divides_diff 0 (divides_diff-1 nil 3237052399 nil ("" (skosimp) (("" (expand "divides") (("" (skosimp*) (("" (inst 1 "x!2 - x!3") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (divides_opposite 0 (divides_opposite-1 nil 3237052399 nil ("" (skosimp*) (("" (prop) (("1" (expand "divides") (("1" (skosimp*) (("1" (inst 1 "-x!2") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (expand "divides") (("2" (skosimp*) (("2" (inst 1 "-x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (opposite_divides 0 (opposite_divides-1 nil 3237052399 nil ("" (skosimp*) (("" (expand "divides") (("" (prop) (("1" (skosimp*) (("1" (inst 1 "-x!2") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst 1 "-x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (divides_prod1 0 (divides_prod1-1 nil 3237052399 nil ("" (skosimp*) (("" (expand "divides") (("" (skosimp*) (("" (inst 1 "x!2 * m!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (divides_prod2 0 (divides_prod2-1 nil 3237052399 nil ("" (skosimp*) (("" (expand "divides") (("" (skosimp*) (("" (inst 1 "x!2 * m!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (divides_prod_elim1 0 (divides_prod_elim1-1 nil 3237052399 nil ("" (skosimp*) (("" (expand "divides") (("" (prop) (("1" (skosimp*) (("1" (inst 1 "x!1") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst 1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (divides_prod_elim2 0 (divides_prod_elim2-1 nil 3237052399 nil ("" (skosimp*) (("" (lemma "divides_prod_elim1") (("" (inst -1 "m!1" "n!1" "nz!1") (("" (replace -1) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (divides_reflexive 0 (divides_reflexive-1 nil 3237052399 nil ("" (skosimp*) (("" (expand "divides") (("" (inst 1 "1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (divides_transitive 0 (divides_transitive-1 nil 3237052399 nil ("" (skosimp*) (("" (expand "divides") (("" (skosimp*) (("" (inst 1 "x!1 * x!2") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (product_one 0 (product_one-1 nil 3237052399 nil ("" (skosimp) (("" (split) (("1" (flatten) (("1" (lemma "eq1_gt") (("1" (lemma "pos_times_lt") (("1" (inst -1 "x!1" "y!1") (("1" (assert) (("1" (split -1) (("1" (flatten) (("1" (case "x!1 > 1") (("1" (inst -4 "x!1" "y!1") (("1" (assert) nil nil)) nil) ("2" (case "y!1 > 1") (("1" (inst -4 "y!1" "x!1") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (case "x!1 < -1") (("1" (inst -4 "-x!1" "-y!1") (("1" (assert) nil nil)) nil) ("2" (case "y!1 < -1") (("1" (inst -4 "-y!1" "-x!1") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (ground) nil nil)) nil)) nil) proved nil nil nil nil nil)) (mutual_divisors 0 (mutual_divisors-1 nil 3237052399 nil ("" (expand "divides") (("" (skosimp*) (("" (case "n!1 = 0") (("1" (assert) nil nil) ("2" (assert) (("2" (lemma "both_sides_times1" ("n0z" "n!1" "x" "x!1 * x!2" "y" "1")) (("2" (ground) (("2" (rewrite "product_one") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (mutual_divisors_nat 0 (mutual_divisors_nat-1 nil 3237052399 nil ("" (skosimp) (("" (forward-chain "mutual_divisors") (("" (assert) nil nil)) nil)) nil) proved nil nil nil nil nil)) (one_divides 0 (one_divides-1 nil 3237052399 nil ("" (grind) nil nil) proved nil nil nil nil nil)) (divides_zero 0 (divides_zero-1 nil 3237052399 nil ("" (grind :if-match all) nil nil) proved nil nil nil nil nil)) (zero_div_zero 0 (zero_div_zero-1 nil 3237052399 nil ("" (grind :if-match all) nil nil) proved nil nil nil nil nil)) (divisors_of_one 0 (divisors_of_one-1 nil 3237052399 nil ("" (auto-rewrite "one_divides" "opposite_divides") (("" (reduce) (("" (expand "divides") (("" (skolem!) (("" (use "product_one") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (one_div_one 0 (one_div_one-1 nil 3237052399 nil ("" (skolem!) (("" (rewrite "divisors_of_one") nil nil)) nil) proved nil nil nil nil nil)) (divisor_smaller 0 (divisor_smaller-1 nil 3237052399 nil ("" (expand "divides") (("" (skosimp*) (("" (assert) (("" (use "pos_times_lt") (("" (ground) (("" (use "both_sides_times_pos_le1" ("pz" "p!1" "x" "1" "y" "x!1")) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)))(modulo_arithmetic (rem_TCC1 0 (rem_TCC1-1 nil 3237052399 nil ("" (lemma "euclid_int") (("" (inst 1 "lambda (b: posnat): (lambda (x: int): (epsilon! (r: mod(b)): (EXISTS (q: int): x = r + b * q)))") (("" (skolem!) (("" (inst -1 "b!1" "x!1") (("" (skolem!) (("" (use "epsilon_ax[mod(b!1)]") (("" (prop) (("" (hide 2) (("" (inst 1 "r!1") (("" (inst 1 "q!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (rem_def 0 (rem_def-1 nil 3237052399 nil ("" (skolem!) (("" (case "EXISTS q: x!1 = b!1 * q + rem(b!1)(x!1)") (("1" (ground) (("1" (skosimp*) (("1" (use "unique_remainder") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (delete 2) (("2" (typepred "rem(b!1)(x!1)") (("2" (skosimp) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (rem_def2 0 (rem_def2-1 nil 3237052399 nil ("" (skolem!) (("" (rewrite "rem_def") (("" (expand "divides") (("" (ground) (("1" (skolem!) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (skolem!) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (rem_def3 0 (rem_def3-1 nil 3237052399 nil ("" (skolem!) (("" (rewrite "rem_def2") (("" (ground) (("1" (rewrite "divides_opposite" :dir rl) nil nil) ("2" (rewrite "divides_opposite" :dir rl) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (rem_mod 0 (rem_mod-1 nil 3237052399 nil ("" (auto-rewrite "divides_zero") (("" (skolem!) (("" (rewrite "rem_def2") nil nil)) nil)) nil) proved nil nil nil nil nil)) (rem_mod2 0 (rem_mod2-1 nil 3237052399 nil ("" (skosimp) (("" (assert) (("" (rewrite "rem_mod") nil nil)) nil)) nil) proved nil nil nil nil nil)) (rem_zero 0 (rem_zero-1 nil 3237052399 nil ("" (auto-rewrite "divides_zero" "rem_def2") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved nil nil nil nil nil)) (rem_self 0 (rem_self-1 nil 3237052399 nil ("" (auto-rewrite "divides_reflexive" "rem_def2") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved nil nil nil nil nil)) (rem_multiple1 0 (rem_multiple1-1 nil 3237052399 nil ("" (auto-rewrite "divides_prod1" "divides_prod2" "divides_reflexive" "rem_def2") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved nil nil nil nil nil)) (rem_multiple2 0 (rem_multiple2-1 nil 3237052399 nil ("" (auto-rewrite "divides_prod1" "divides_prod2" "divides_reflexive" "rem_def2") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved nil nil nil nil nil)) (rem_one 0 (rem_one-1 nil 3237052399 nil ("" (skosimp) (("" (rewrite "rem_def") (("" (inst + "0") (("" (assert) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (rem_minus_one 0 (rem_minus_one-1 nil 3237052399 nil ("" (skolem!) (("" (rewrite "rem_def") (("" (inst + "-1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (same_remainder 0 (same_remainder-1 nil 3237052399 nil ("" (skolem!) (("" (name-replace "r!1" "rem(b!1)(y!1)" :hide? nil) (("" (rewrite "rem_def2") (("" (rewrite "rem_def2") (("" (ground) (("1" (use "divides_diff" ("n" "x!1 - r!1" "m" "y!1 - r!1")) (("1" (assert) nil nil)) nil) ("2" (use "divides_sum" ("n" "x!1 - y!1" "m" "y!1 - r!1")) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (rem_rem 0 (rem_rem-1 nil 3237052399 nil ("" (skolem!) (("" (rewrite "same_remainder") (("" (name-replace "r!1" "rem(b!1)(x!1)" :hide? nil) (("" (rewrite "rem_def3") nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (rem_sum 0 (rem_sum-1 nil 3237052399 nil ("" (auto-rewrite "same_remainder") (("" (skosimp) (("" (assert) (("" (use "divides_sum" ("n" "x!1 - y!1" "m" "z!1 - t!1")) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (rem_sum1 0 (rem_sum1-1 nil 3237052399 nil ("" (skolem!) (("" (rewrite "same_remainder") (("" (rewrite "rem_def3" :dir rl) nil nil)) nil)) nil) proved nil nil nil nil nil)) (rem_sum2 0 (rem_sum2-1 nil 3237052399 nil ("" (skolem!) (("" (use "rem_sum1" ("x" "y!1" "y" "x!1")) (("" (assert) nil nil)) nil)) nil) proved nil nil nil nil nil)) (rem_diff 0 (rem_diff-1 nil 3237052399 nil ("" (auto-rewrite "same_remainder") (("" (skosimp) (("" (assert) (("" (use "divides_diff" ("n" "x!1 - y!1" "m" "z!1 - t!1")) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (rem_diff1 0 (rem_diff1-1 nil 3237052399 nil ("" (skolem!) (("" (rewrite "same_remainder") (("" (rewrite "rem_def3" :dir rl) nil nil)) nil)) nil) proved nil nil nil nil nil)) (rem_diff2 0 (rem_diff2-1 nil 3237052399 nil ("" (skolem!) (("" (rewrite "same_remainder") (("" (rewrite "rem_def2" :dir rl) nil nil)) nil)) nil) proved nil nil nil nil nil)) (rem_prod1 0 (rem_prod1-1 nil 3237052399 nil ("" (skolem!) (("" (rewrite "same_remainder") (("" (use "divides_prod1" ("n" "rem(b!1)(x!1) - x!1" "m" "y!1")) (("" (assert) (("" (rewrite "rem_def3" :dir rl) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (rem_prod2 0 (rem_prod2-1 nil 3237052399 nil ("" (skolem!) (("" (use "rem_prod1" ("x" "y!1" "y" "x!1")) (("" (assert) nil nil)) nil)) nil) proved nil nil nil nil nil)) (rem_prod 0 (rem_prod-1 nil 3237052399 nil ("" (skosimp) (("" (auto-rewrite "rem_prod1" "rem_prod2") (("" (case "rem(b!1)(rem(b!1)(x!1) * rem(b!1)(z!1)) = rem(b!1)(y!1 * t!1)") (("1" (assert) nil nil) ("2" (replace*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (rem_expt 0 (rem_expt-1 nil 3237052399 nil ("" (skolem 1 ("b!1" _ "x!1" "y!1")) (("" (induct-and-simplify "n" :exclude "rem" :rewrites ("rem_prod")) nil nil)) nil) proved nil nil nil nil nil)) (rem_expt1 0 (rem_expt1-1 nil 3237052399 nil ("" (skolem!) (("" (rewrite "rem_expt") (("" (rewrite "rem_rem") nil nil)) nil)) nil) proved nil nil nil nil nil)) (rem_sum_elim1 0 (rem_sum_elim1-1 nil 3237052399 nil ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved nil nil nil nil nil)) (rem_sum_elim2 0 (rem_sum_elim2-1 nil 3237052399 nil ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved nil nil nil nil nil)) (rem_diff_elim1 0 (rem_diff_elim1-1 nil 3237052399 nil ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) (("" (prop) (("1" (rewrite "divides_opposite" :dir rl) (("1" (assert) nil nil)) nil) ("2" (rewrite "divides_opposite" :dir rl) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (rem_diff_elim2 0 (rem_diff_elim2-1 nil 3237052399 nil ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved nil nil nil nil nil)) (rem_opposite_elim 0 (rem_opposite_elim-1 nil 3237052399 nil ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) (("" (rewrite "divides_opposite" :dir rl) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (ndiv_TCC1 0 (ndiv_TCC1-1 nil 3237052399 nil ("" (inst 1 "lambda (d: [int, posnat]): (epsilon! (q: int): d`1 = rem(d`2)(d`1) + d`2 * q)") (("" (skolem!) (("" (use "epsilon_ax[int]") (("" (assert) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (ndiv_lt 0 (ndiv_lt-1 nil 3237052399 nil ("" (skosimp*) (("" (typepred "ndiv(x!1, b!1)") (("" (case-replace "x!1 - rem(b!1)(x!1) = b!1 * ndiv(x!1, b!1)") (("1" (hide -2) (("1" (case "x!1/b!1 - rem(b!1)(x!1)/b!1 = ndiv(x!1, b!1)") (("1" (hide -2) (("1" (replace -1 * rl) (("1" (hide -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (lemma "both_sides_div1") (("2" (inst -1 "b!1" "x!1 - rem(b!1)(x!1)" "b!1 * ndiv(x!1, b!1)") (("2" (case-replace "b!1 * ndiv(x!1, b!1) / b!1 = ndiv(x!1, b!1)") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (ndiv_TCC2 0 (ndiv_TCC2-1 nil 3237052399 nil ("" (skosimp*) (("" (lemma "ndiv_lt") (("" (inst?) (("" (case "n!1/b!1 <= n!1") (("1" (assert) (("1" (hide -1) (("1" (typepred "ndiv(n!1, b!1)") (("1" (case "n!1 < rem(b!1)(n!1)") (("1" (lemma "rem_mod2") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (case "b!1 * ndiv(n!1, b!1) >= 0") (("1" (lemma "both_sides_times_pos_ge1") (("1" (inst -1 "b!1" "ndiv(n!1, b!1)" "0") (("1" (replace -1 2 rl t) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide 2) (("2" (hide -1) (("2" (lemma "le_div_le_pos") (("2" (inst -1 "n!1" "1" "b!1" "n!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)))(subrange_inductions (subrange_induction_TCC1 0 (subrange_induction_TCC1-1 nil 3237052399 nil ("" (assert) (("" (typepred "j") (("" (assert) nil nil)) nil)) nil) proved nil nil nil nil nil)) (subrange_induction_TCC2 0 (subrange_induction_TCC2-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (subrange_induction 0 (subrange_induction-1 nil 3237052399 nil ("" (lemma "nat_induction") (("" (skosimp*) (("" (inst -1 "lambda (n:nat): n <= j - i IMPLIES p!1(n+i)") (("1" (prop) (("1" (inst -1 "k!1 - i") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (skosimp*) (("3" (inst -4 "j!1 + i") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (SUBRANGE_induction 0 (SUBRANGE_induction-1 nil 3237052399 nil ("" (skosimp) (("" (skosimp) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): n <= j - i IMPLIES p!1(n+i)") (("1" (split) (("1" (inst -2 "k!1") (("1" (assert) (("1" (skosimp) (("1" (inst -1 "m!1-i") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -3 "j!1+i") (("1" (assert) (("1" (skosimp) (("1" (inst -1 "m!1-i") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)))(bounded_int_inductions (upfrom_induction_TCC1 0 (upfrom_induction_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (upfrom_induction_TCC2 0 (upfrom_induction_TCC2-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (upfrom_induction 0 (upfrom_induction-1 nil 3237052399 nil ("" (lemma "nat_induction") (("" (skosimp*) (("" (inst -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (prop) (("1" (inst -1 "jf!1-m") (("1" (assert) nil nil)) nil) ("2" (hide -1) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (split) (("1" (inst -5 "j!1+m") (("1" (assert) nil nil)) nil) ("2" (inst 1 "j!1+m") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (UPFROM_induction 0 (UPFROM_induction-1 nil 3237052399 nil ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (prop) (("1" (inst -1 "jf!1-m") (("1" (split) (("1" (assert) nil nil) ("2" (inst 1 "jf!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -4 "j!1+m") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "kf!1-m") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (above_induction_TCC1 0 (above_induction_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (above_induction_TCC2 0 (above_induction_TCC2-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (above_induction 0 (above_induction-1 nil 3237052399 nil ("" (skosimp*) (("" (lemma "nat_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (prop) (("1" (inst -1 "ja!1-m") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (split) (("1" (inst -5 "j!1+m") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (inst 1 "j!1+m") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (ABOVE_induction 0 (ABOVE_induction-1 nil 3237052399 nil ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (prop) (("1" (inst -1 "ja!1-m") (("1" (split) (("1" (assert) nil nil) ("2" (inst 1 "ja!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -4 "j!1+m") (("1" (assert) (("1" (skosimp*) (("1" (inst -1 "ka!1-m") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)))(bounded_nat_inductions (upto_induction_TCC1 0 (upto_induction_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (upto_induction_TCC2 0 (upto_induction_TCC2-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (upto_induction 0 (upto_induction-1 nil 3237052399 nil ("" (skosimp*) (("" (lemma "nat_induction") (("" (inst -1 "lambda (n:nat): n <= m IMPLIES pt!1(n)") (("" (prop) (("1" (inst -1 "jt!1") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (inst -4 "j!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (UPTO_induction 0 (UPTO_induction-1 nil 3237052399 nil ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): n <= m IMPLIES pt!1(n)") (("" (prop) (("1" (inst -1 "jt!1") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (inst -3 "j!1") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "kt!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (below_induction_TCC1 0 (below_induction_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (below_induction_TCC2 0 (below_induction_TCC2-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (below_induction 0 (below_induction-1 nil 3237052399 nil ("" (skosimp*) (("" (lemma "nat_induction") (("" (inst -1 "lambda (n:nat): n < m IMPLIES pb!1(n)") (("" (prop) (("1" (inst -2 "jb!1") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (skosimp*) (("4" (inst -4 "j!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("5" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (BELOW_induction 0 (BELOW_induction-1 nil 3237052399 nil ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): n < m IMPLIES pb!1(n)") (("" (prop) (("1" (inst -1 "jb!1") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (inst -3 "j!1") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "kb!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)))(subrange_type)(int_types)(nat_types)(finite_sets_def (finite_set_TCC1 0 (finite_set_TCC1-1 nil 3237052399 nil ("" (grind :if-match nil) (("" (inst 1 "0" "LAMBDA (x:(emptyset[T])): 0") (("1" (skolem-typepred) (("1" (expand "emptyset") (("1" (propax) nil nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "emptyset") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (is_finite_surj 0 (is_finite_surj-1 nil 3237052399 3237059887 ("" (skosimp*) (("" (prop) (("1" (skosimp) (("1" (grind :if-match nil) (("1" (inst 1 "N!1" "lambda (x: (S!1)): epsilon! (n: below[N!1]): x = f!1(n)") (("1" (skosimp) (("1" (use "epsilon_ax[below[N!1]]" :if-match all) (("1" (prop) (("1" (grind) nil nil) ("2" (inst -2 "x1!1") (("2" (skosimp) (("2" (inst 1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (inst -2 "x2!1") (("3" (skosimp) (("3" (inst 1 "x!1") (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (inst -1 "x1!1") (("4" (skosimp) (("4" (inst 1 "x!1") (("4" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (inst -1 "x1!1") (("2" (skosimp) (("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil) ("2" (case "empty?(S!1)") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (case "empty?(S!1)") (("1" (expand "empty?") (("1" (inst 1 "0" "lambda (n: below[0]): epsilon! (x: (S!1)): true") (("1" (hide -2) (("1" (grind :if-match nil) (("1" (inst -2 "y!1") nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand "is_finite") (("2" (skosimp) (("2" (grind :if-match nil) (("2" (inst 1 "N!1" "lambda (n : below[N!1]): epsilon!(x : (S!1)) : n = f!1(x)") (("1" (skolem-typepred) (("1" (inst 1 "f!1(y!1)") (("1" (use "epsilon_ax[(S!1)]") (("1" (prop) (("1" (inst -4 "y!1" "epsilon(LAMBDA (x: (S!1)): f!1(y!1) = f!1(x))") (("1" (assert) nil nil) ("2" (inst 1 "y!1") nil nil)) nil) ("2" (inst 1 "y!1") nil nil)) nil) ("2" (inst 1 "y!1") nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (is_finite const-decl "bool" finite_sets_def nil) (empty? const-decl "bool" sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (member const-decl "bool" sets nil) (epsilon_ax formula-decl nil epsilons nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil finite_sets_def nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) nil (number nonempty-type-decl nil numbers nil) (real_pred const-decl "[number -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) nil (below type-eq-decl nil nat_types nil) (TRUE const-decl "bool" booleans nil) nil (FALSE const-decl "bool" booleans nil)) 5218479 122210 t nil)) (finite_subset 0 (finite_subset-1 nil 3237052399 nil ("" (grind :if-match nil) (("" (inst 1 "N!1" "lambda (x: (S!1)): f!1(x)") (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil) ("2" (typepred "x2!1") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil) ("3" (typepred "x1!1") (("3" (inst?) (("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (inst? -4) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (finite_intersection 0 (finite_intersection-1 nil 3237052399 nil ("" (grind :if-match nil) (("" (inst 1 "N!1" "lambda (x: (intersection(A!1, B!1))): f!1(x)") (("1" (skolem-typepred) (("1" (inst?) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) proved nil nil nil nil nil)) (finite_add 0 (finite_add-1 nil 3237052399 nil ("" (grind :if-match nil) (("" (inst 1 "N!1 + 1" "lambda (x: (add(x!1, A!1))): if x = x!1 then N!1 else f!1(x) endif") (("1" (grind :if-match nil) (("1" (inst -4 "x1!1" "x2!1") (("1" (assert) nil nil)) nil)) nil) ("2" (grind :if-match nil) nil nil) ("3" (grind :if-match nil) nil nil)) nil)) nil) proved nil nil nil nil nil)) (nonempty_finite_is_nonempty 0 (nonempty_finite_is_nonempty-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (finite_singleton 0 (finite_singleton-1 nil 3237052399 nil ("" (skosimp) (("" (expand "is_finite") (("" (inst 1 "1" "lambda (x: (singleton[T](x!1))): 0") (("" (expand "injective?") (("" (skolem-typepred) (("" (expand "singleton") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (finite_union 0 (finite_union-1 nil 3237052399 nil ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp*) (("" (inst 1 "N!1 + N!2" "lambda (x: (union[T](A!1, B!1))): if A!1(x) then f!1(x) else f!2(x)+N!1 endif") (("1" (expand "injective?") (("1" (skosimp*) (("1" (lift-if) (("1" (lift-if) (("1" (prop) (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (inst -3 "x1!1" "x2!1") (("1" (assert) nil nil) ("2" (assert) (("2" (typepred "x2!1") (("2" (expand "union") (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("3" (typepred "x1!1") (("3" (expand "union") (("3" (expand "member") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (typepred "x!1") (("3" (expand "union") (("3" (expand "member") (("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("4" (skosimp*) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (finite_intersection1 0 (finite_intersection1-1 nil 3237052399 nil ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (intersection[T](S!1, A!1))): f!1(x)") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (expand "intersection") (("1" (expand "member") (("1" (flatten) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "intersection") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (finite_intersection2 0 (finite_intersection2-1 nil 3237052399 nil ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (intersection[T](A!1, S!1))): f!1(x)") (("1" (expand "injective?") (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil) ("2" (typepred "x2!1") (("2" (expand "intersection") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (typepred "x1!1") (("3" (expand "intersection") (("3" (expand "member") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "intersection") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (finite_difference 0 (finite_difference-1 nil 3237052399 nil ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x :(difference[T](A!1, S!1))): f!1(x)") (("1" (expand "injective?") (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil) ("2" (typepred "x2!1") (("2" (expand "difference") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (typepred "x1!1") (("3" (expand "difference") (("3" (expand "member") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "difference") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (nonempty_finite_union1 0 (nonempty_finite_union1-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (nonempty_finite_union2 0 (nonempty_finite_union2-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (nonempty_add_finite 0 (nonempty_add_finite-1 nil 3237052399 nil ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (split) (("1" (inst 1 "N!1+1" "lambda (x: (add[T](x!1, A!1))): if x = x!1 then N!1 else f!1(x) endif") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (lift-if) (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (inst -4 "x1!1" "x2!1") (("1" (assert) nil nil) ("2" (expand "add") (("2" (assert) (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil) ("3" (expand "add") (("3" (expand "member") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (assert) nil nil)) nil)) nil) ("3" (skolem-typepred) (("3" (flatten) (("3" (assert) (("3" (expand "add") (("3" (expand "member") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "empty?") (("2" (inst -1 "x!1") (("2" (expand "member") (("2" (expand "add") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (finite_remove 0 (finite_remove-1 nil 3237052399 nil ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (remove[T](x!1, A!1))): f!1(x)") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (inst?) (("1" (expand "remove") (("1" (expand "member") (("1" (assert) nil nil)) nil)) nil) ("2" (expand "remove") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "remove") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (finite_rest 0 (finite_rest-1 nil 3237052399 nil ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (rest[T](A!1))): f!1(x)") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (inst?) (("1" (expand "rest") (("1" (assert) (("1" (hide -1) (("1" (prop) (("1" (expand "empty?") (("1" (skosimp) (("1" (expand "member") (("1" (expand "remove") (("1" (expand "member") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "rest") (("2" (assert) (("2" (hide -2) (("2" (prop) (("2" (expand "remove") (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "rest") (("2" (assert) (("2" (prop) (("2" (expand "remove") (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (finite_emptyset 0 (finite_emptyset-1 nil 3237052399 nil ("" (expand "is_finite") (("" (inst 1 "0" "LAMBDA (x:(emptyset[T])): 0") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (expand "emptyset") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "emptyset") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (nonempty_singleton_finite 0 (nonempty_singleton_finite-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (finite_full 0 (finite_full-1 nil 3237052399 nil ("" (grind :if-match nil) (("1" (inst 1 "N!1" "g!1") (("1" (grind) nil nil)) nil) ("2" (inst 1 "N!1" "f!1") (("2" (grind) nil nil)) nil)) nil) proved nil nil nil nil nil)) (finite_type_set 0 (finite_type_set-1 nil 3237052399 nil ("" (grind :if-match nil) (("" (inst 1 "N!1" "g!1") (("" (grind) nil nil)) nil)) nil) proved nil nil nil nil nil)) (finite_complement 0 (finite_complement-1 nil 3237052399 nil ("" (grind :if-match nil) (("" (inst 1 "N!1" "g!1") (("" (grind :if-match nil) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)))(finite_sets_of_sets)(function_iterate (iterate_TCC1 0 (iterate_TCC1-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (iterate_TCC2 0 (iterate_TCC2-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (iterate_add 0 (iterate_add-1 nil 3237052399 nil ("" (induct "m") (("1" (skosimp) (("1" (expand "iterate" 1 1) (("1" (expand "o") (("1" (apply-extensionality) nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (expand "iterate" 1 1) (("2" (expand "iterate" 1 3) (("2" (inst -1 "f!1" "n!1") (("2" (expand "o") (("2" (apply-extensionality) (("2" (replace -1 :dir rl) (("2" (beta) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (iterate_add_applied 0 (iterate_add_applied-1 nil 3237052399 nil ("" (induct-and-simplify "m") nil nil) proved nil nil nil nil nil)) (iterate_add_one 0 (iterate_add_one-1 nil 3237052399 nil ("" (induct-and-simplify "n") nil nil) proved nil nil nil nil nil)) (iterate_mult 0 (iterate_mult-1 nil 3237052399 nil ("" (induct "m") (("1" (induct "n") (("1" (skosimp) (("1" (expand "iterate") (("1" (propax) nil nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (inst?) (("2" (expand "iterate" 1 1) (("2" (apply-extensionality) (("2" (replace -1) (("2" (expand "iterate" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (induct "n" :name "NAT_induction") (("2" (skosimp) (("2" (skosimp) (("2" (case "j!2 = 0") (("1" (replace -1) (("1" (expand "iterate" 1 1) (("1" (expand "iterate" 1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (expand "iterate" 2 1) (("2" (expand "iterate" 2 4) (("2" (apply-extensionality 2) (("2" (hide 3) (("2" (inst-cp -1 "j!2-1") (("2" (assert) (("2" (inst? -2) (("2" (replace -2) (("2" (lemma "iterate_add") (("2" (inst -1 "f!1" "1+j!1" "-1 - j!1 + j!1 * j!2 + j!2") (("1" (expand "o") (("1" (case "iterate(f!1, 1 + j!1)(iterate(f!1, -1 - j!1 + j!1 * j!2 + j!2)(x!1)) = iterate(f!1, j!1 * j!2 + j!2)(x!1)") (("1" (hide -2) (("1" (replace -1) (("1" (expand "iterate" 1 1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (replace -1 :dir rl) (("2" (beta) (("2" (propax) nil nil)) nil)) nil) ("3" (hide -1 -2 -3 -4 2) (("3" (case "j!1 * j!2 >= j!1") (("1" (assert) nil nil) ("2" (assert) (("2" (case "j!1 = 0") (("1" (assert) nil nil) ("2" (lemma "div_mult_pos_ge2") (("2" (inst -1 "j!1" "j!2" "j!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (case "j!1 * j!2 >= j!1") (("1" (assert) nil nil) ("2" (lemma "div_mult_pos_ge2") (("2" (inst -1 "j!1" "j!2" "j!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (iterate_invariant 0 (iterate_invariant-1 nil 3237052399 nil ("" (induct "n") (("1" (skosimp*) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) proved nil nil nil nil nil)))(sequences (insert_TCC1 0 (insert_TCC1-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (insert_delete 0 (insert_delete-1 nil 3237052399 nil ("" (skolem 1 ("n!1" "seq!1")) (("" (expand "insert") (("" (apply-extensionality 1) (("1" (delete 2) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (expand "delete") (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split) (("1" (flatten) (("1" (expand "nth") (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (expand "delete") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (apply-extensionality 4) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (add_first_rest 0 (add_first_rest-1 nil 3237052399 nil ("" (skolem 1 ("seq!1")) (("" (expand "add") (("" (expand "insert") (("" (apply-extensionality 1) (("1" (delete 2) (("1" (lift-if) (("1" (prop) (("1" (expand "first") (("1" (expand "nth") (("1" (assert) nil nil)) nil)) nil) ("2" (expand "rest") (("2" (expand "suffix") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (apply-extensionality 3) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (sequence_induction 0 (sequence_induction-1 nil 3237052399 nil ("" (lemma "nat_induction") (("" (skosimp) (("" (inst -1 "(lambda (n:nat): p!1(nth(seq!1, n)))") (("" (assert) (("" (split) (("1" (assert) (("1" (expand "every") (("1" (propax) nil nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)))(seq_functions)(finite_sequences (empty_seq_TCC1 0 (empty_seq_TCC1-1 nil 3237052399 nil ("" (existence-tcc) nil nil) proved nil nil nil nil nil)) (oh_TCC1 0 (oh_TCC1-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (oh_TCC2 0 (oh_TCC2-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (caret_TCC1 0 (caret_TCC1-1 nil 3237052399 nil ("" (grind :if-match nil) nil nil) proved nil nil nil nil nil)) (caret_TCC2 0 (caret_TCC2-1 nil 3237052399 nil ("" (tcc :defs explicit) nil nil) proved nil nil nil nil nil)) (caret_TCC3 0 (caret_TCC3-1 nil 3237052399 nil ("" (skosimp) (("" (beta) (("" (lift-if) (("" (assert) (("" (ground) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (extract1_TCC1 0 (extract1_TCC1-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (o_assoc 0 (o_assoc-1 nil 3237052399 nil ("" (skosimp) (("" (expand "o") (("" (apply-extensionality) (("1" (hide 2) (("1" (lift-if) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp) (("2" (assert) nil nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp) (("4" (assert) nil nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp) (("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)))(ordstruct)(ordinals (lessp_TCC1 0 (lessp_TCC1-1 nil 3237052399 nil ("" (grind) nil nil) proved nil nil nil nil nil)) (lessp_TCC2 0 (lessp_TCC2-1 nil 3237052399 nil ("" (skosimp*) (("" (replace -1) (("" (expand "size") (("" (expand "reduce" 3 2) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (ordinal?_TCC1 0 (ordinal?_TCC1-1 nil 3237052399 nil ("" (skosimp*) (("" (replace -1) (("" (expand "size") (("" (expand "reduce" 1 2) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (ordinal?_TCC2 0 (ordinal?_TCC2-1 nil 3237052399 nil ("" (skosimp*) (("" (replace -1) (("" (expand "size") (("" (expand "reduce" 1 2) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (ordinal_TCC1 0 (ordinal_TCC1-1 nil 3237052399 nil ("" (inst 1 "zero") (("" (assert) (("" (expand "ordinal?") (("" (propax) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (ordinal_irreflexive 0 (ordinal_irreflexive-1 nil 3237052399 nil ("" (induct "r") (("1" (assert) nil nil) ("2" (flatten) (("2" (expand "<") (("2" (propax) nil nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) (("3" (expand "<" -4) (("3" (split -4) (("1" (assert) (("1" (expand "ordinal?" -3) (("1" (propax) nil nil)) nil)) nil) ("2" (expand "ordinal?" -4) (("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (ordinal_antisym 0 (ordinal_antisym-1 nil 3237052399 nil ("" (induct "r") (("1" (assert) nil nil) ("2" (flatten) (("2" (skosimp*) (("2" (expand "<") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (induct "s") (("1" (assert) nil nil) ("2" (flatten) (("2" (expand "<" -2) (("2" (propax) nil nil)) nil)) nil) ("3" (skosimp) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (expand "<" -6) (("3" (split -6) (("1" (inst -8 "add2_var!2") (("1" (assert) (("1" (expand "<" -7) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "<" -8) (("2" (assert) (("2" (replace -1) (("2" (lemma "ordinal_irreflexive") (("2" (inst -1 "add2_var!2") nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (expand "<" -9) (("3" (replace -1) (("3" (replace -2) (("3" (lemma "ordinal_irreflexive") (("3" (inst-cp -1 "add2_var!2") (("3" (assert) (("3" (inst -12 "add3_var!2") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (ordinal_antisymmetric 0 (ordinal_antisymmetric-1 nil 3237052399 nil ("" (skosimp) (("" (expand "<=") (("" (split) (("1" (split) (("1" (lemma "ordinal_antisym") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (ordinal_transitive 0 (ordinal_transitive-1 nil 3237052399 nil ("" (induct "s") (("1" (assert) nil nil) ("2" (flatten) (("2" (skosimp) (("2" (expand "<" -2) (("2" (lift-if -2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (skosimp) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (hide -3 -4) (("3" (skosimp) (("3" (expand "<" -4) (("3" (lift-if) (("3" (split -4) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (expand "<" -5) (("2" (lift-if) (("2" (split) (("1" (split) (("1" (flatten) (("1" (expand "<" 2) (("1" (assert) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (expand "<" 3) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split) (("1" (assert) (("1" (prop) (("1" (assert) (("1" (expand "<" 4) (("1" (flatten) (("1" (assert) (("1" (inst -4 "exp(r!1)" "exp(t!1)") (("1" (assert) nil nil) ("2" (assert) (("2" (typepred "t!1") (("2" (expand "ordinal?" -1) (("2" (propax) nil nil)) nil)) nil)) nil) ("3" (typepred "r!1") (("3" (expand "ordinal?" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "<" 4) (("2" (assert) nil nil)) nil) ("3" (expand "<" 4) (("3" (assert) nil nil)) nil) ("4" (expand "<" 5) (("4" (assert) (("4" (inst -4 "exp(r!1)" "exp(t!1)") (("1" (assert) nil nil) ("2" (typepred "t!1") (("2" (expand "ordinal?" -1) (("2" (assert) nil nil)) nil)) nil) ("3" (typepred "r!1") (("3" (expand "ordinal?" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (expand "<" 5) (("5" (assert) nil nil)) nil) ("6" (expand "<" 5) (("6" (assert) nil nil)) nil)) nil)) nil) ("2" (split -5) (("1" (propax) nil nil) ("2" (flatten) (("2" (hide -6) (("2" (prop) (("1" (assert) (("1" (expand "<" 4) (("1" (propax) nil nil)) nil)) nil) ("2" (expand "<" 4) (("2" (assert) nil nil)) nil) ("3" (expand "<" 4) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "<" 3) (("3" (assert) (("3" (hide -4) (("3" (split -4) (("1" (propax) nil nil) ("2" (flatten) (("2" (assert) (("2" (flatten) (("2" (assert) (("2" (split -1) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (assert) (("2" (inst -8 "rest(r!1)" "rest(t!1)") (("1" (assert) nil nil) ("2" (typepred "t!1") (("2" (expand "ordinal?" -1) (("2" (assert) nil nil)) nil)) nil) ("3" (typepred "r!1") (("3" (expand "ordinal?" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (ordinal_trichotomy 0 (ordinal_trichotomy-1 nil 3237052399 nil ("" (induct "r") (("1" (assert) nil nil) ("2" (flatten) (("2" (induct "s") (("1" (assert) nil nil) ("2" (skosimp) (("2" (expand "ordinal?" -3) (("2" (flatten) (("2" (assert) (("2" (expand "<" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skosimp) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (induct "s") (("1" (assert) nil nil) ("2" (flatten) (("2" (expand "<" 3) (("2" (propax) nil nil)) nil)) nil) ("3" (skosimp) (("3" (assert) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (expand "<" 1) (("3" (flatten) (("3" (expand "<" 5) (("3" (flatten) (("3" (inst -6 "add2_var!2") (("3" (assert) (("3" (replace -6) (("3" (assert) (("3" (hide -3 -4 1 5) (("3" (hide -6 -7) (("3" (inst -5 "add3_var!2") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (well_founded_le 0 (well_founded_le-1 nil 3237052399 nil ("" (expand "well_founded?") (("" (lemma "ordinal_induction") (("" (skosimp) (("" (skosimp) (("" (inst -1 "LAMBDA (x:ordinal): NOT p!1(x)") (("" (split) (("1" (inst -1 "y!1") nil nil) ("2" (skosimp) (("2" (inst 1 "r!1") (("2" (skosimp) (("2" (inst -1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)))(lex2 (lex2_TCC1 0 (lex2_TCC1-1 nil 3237052399 nil ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved nil nil nil nil nil)) (lex2_TCC2 0 (lex2_TCC2-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (lex2_TCC3 0 (lex2_TCC3-1 nil 3237052399 nil ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved nil nil nil nil nil)) (lex2_TCC4 0 (lex2_TCC4-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (lex2_TCC5 0 (lex2_TCC5-1 nil 3237052399 nil ("" (grind) nil nil) proved nil nil nil nil nil)) (lex2_TCC6 0 (lex2_TCC6-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (lex2_TCC7 0 (lex2_TCC7-1 nil 3237052399 nil ("" (subtype-tcc) nil nil) proved nil nil nil nil nil)) (lex2_TCC8 0 (lex2_TCC8-1 nil 3237052399 nil ("" (grind) nil nil) proved nil nil nil nil nil)) (lex2_lt 0 (lex2_lt-1 nil 3237052399 nil ("" (grind) nil nil) proved nil nil nil nil nil)))(list)(list_props (length_TCC1 0 (length_TCC1-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (member_TCC1 0 (member_TCC1-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (member_null 0 (member_null-1 nil 3237052399 nil ("" (grind :if-match nil) nil nil) proved nil nil nil nil nil)) (nth_TCC1 0 (nth_TCC1-1 nil 3237052399 nil ("" (skosimp) (("" (typepred "n!1") (("" (expand "length") (("" (assert) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (nth_TCC2 0 (nth_TCC2-1 nil 3237052399 nil ("" (skosimp) (("" (typepred "n!1") (("" (expand "length") (("" (assert) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (nth_TCC3 0 (nth_TCC3-1 nil 3237052399 nil ("" (induct "l") (("1" (skosimp*) (("1" (typepred "n!1") (("1" (expand "length") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) (("2" (typepred "n!1") (("2" (expand "length" -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) (("3" (typepred "n!1") (("3" (expand "length" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (nth_TCC4 0 (nth_TCC4-1 nil 3237052399 nil ("" (induct "l") (("1" (skosimp*) (("1" (typepred "n!1") (("1" (expand "length") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "length" 2 2) (("2" (assert) nil nil)) nil)) nil) ("3" (skosimp*) (("3" (typepred "n!1") (("3" (expand "length" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (append_TCC1 0 (append_TCC1-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (append_null 0 (append_null-1 nil 3237052399 nil ("" (induct "l") (("1" (grind) nil nil) ("2" (skosimp) (("2" (expand "append" +) (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (append_assoc 0 (append_assoc-1 nil 3237052399 nil ("" (induct-and-simplify "l1") nil nil) proved nil nil nil nil nil)) (reverse_append 0 (reverse_append-1 nil 3237052399 nil ("" (induct-and-simplify "l1") (("1" (rewrite "append_null") nil nil) ("2" (replace -1) (("2" (rewrite "append_assoc" :dir rl) nil nil)) nil)) nil) proved nil nil nil nil nil)) (reverse_reverse 0 (reverse_reverse-1 nil 3237052399 nil ("" (induct "l") (("1" (grind) nil nil) ("2" (skosimp) (("2" (expand "reverse" 1 2) (("2" (rewrite "reverse_append") (("2" (expand "reverse" 1 1) (("2" (replace -1) (("2" (expand "reverse" 1 1) (("2" (expand "append" 1 2) (("2" (expand "append" 1 1) (("2" (expand "append" 1 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (length_append 0 (length_append-1 nil 3237052399 nil ("" (induct-and-simplify "l1") nil nil) proved nil nil nil nil nil)) (length_reverse 0 (length_reverse-1 nil 3237052399 nil ("" (induct-and-simplify "l") (("" (rewrite "length_append") (("" (assert) nil nil)) nil)) nil) proved nil nil nil nil nil)) (list_rep 0 (list_rep-1 nil 3237052399 nil ("" (assert) nil nil) proved nil nil nil nil nil)) (every_append 0 (every_append-1 nil 3237052399 nil ("" (induct-and-simplify "l1") nil nil) proved nil nil nil nil nil)) (every_disjunct1 0 (every_disjunct1-1 nil 3237052399 nil ("" (induct-and-simplify "l") nil nil) proved nil nil nil nil nil)) (every_disjunct2 0 (every_disjunct2-1 nil 3237052399 nil ("" (induct-and-simplify "l") nil nil) proved nil nil nil nil nil)) (every_conjunct 0 (every_conjunct-1 nil 3237052399 nil ("" (induct-and-simplify "l") nil nil) proved nil nil nil nil nil)) (every_member 0 (every_member-1 nil 3237052399 nil ("" (induct-and-simplify "l") (("" (rewrite "every_disjunct2") nil nil)) nil) proved nil nil nil nil nil)))(map_props (map_list_composition 0 (map_list_composition-1 nil 3237052399 nil ("" (induct "l") (("1" (skosimp) (("1" (expand "map") (("1" (propax) nil nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (inst?) (("2" (expand "map" +) (("2" (replace -1) (("2" (expand "o" 1 2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (map_seq_composition 0 (map_seq_composition-1 nil 3237052399 nil ("" (skosimp) (("" (expand "map") (("" (apply-extensionality) (("" (hide 2) (("" (expand "o") (("" (case "nth((LAMBDA (n: nat): f1!1(nth(s!1, n))), x!1) = f1!1(nth(s!1, x!1))") (("1" (replace -1) (("1" (propax) nil nil)) nil) ("2" (hide 2) (("2" (expand "nth" 1 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)))(filters (filter_TCC1 0 (filter_TCC1-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (filter_TCC2 0 (filter_TCC2-1 nil 3237052399 nil ("" (skosimp) (("" (replace -1) (("" (expand "length" 2 2) (("" (assert) nil nil)) nil)) nil)) nil) proved nil nil nil nil nil)))(list2finseq (finseq2list_rec_TCC1 0 (finseq2list_rec_TCC1-1 nil 3237052399 nil ("" (tcc :defs explicit) nil nil) proved nil nil nil nil nil)) (finseq2list_rec_TCC2 0 (finseq2list_rec_TCC2-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (finseq2list_rec_TCC3 0 (finseq2list_rec_TCC3-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)) (finseq2list_TCC1 0 (finseq2list_TCC1-1 nil 3237052399 nil ("" (tcc :defs explicit) nil nil) proved nil nil nil nil nil)))(list2set (list2set_TCC1 0 (list2set_TCC1-1 nil 3237052399 nil ("" (tcc :defs !) nil nil) proved nil nil nil nil nil)))(disjointness (pairwise_disjoint?_TCC1 0 (pairwise_disjoint?_TCC1-1 nil 3237052399 nil ("" (termination-tcc) nil nil) proved nil nil nil nil nil)))(character)(strings (string_rep 0 (string_rep-1 nil 3237052399 nil ("" (propax) nil nil) proved nil nil nil nil nil)) (fseq_lem 0 (fseq_lem-1 nil 3237052399 nil ("" (induct "l1") (("1" (induct "l2") (("1" (grind) nil nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (inst -1 "cdr(l2!1)") (("1" (iff) (("1" (prop) (("1" (assert) (("1" (apply-extensionality) (("1" (expand "list2finseq" -1) (("1" (flatten) (("1" (decompose-equality -2) (("1" (inst -1 "0") (("1" (expand "nth") (("1" (propax) nil nil)) nil) ("2" (expand "length" 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "list2finseq" -1) (("2" (flatten) (("2" (expand "length" -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (expand "list2finseq" -1) (("3" (expand "list2finseq" 3) (("3" (flatten) (("3" (split) (("1" (expand "length" -1) (("1" (assert) (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (apply-extensionality) (("1" (decompose-equality -2) (("1" (inst -1 "x!1+1") (("1" (expand "nth" -1) (("1" (propax) nil nil)) nil) ("2" (assert) (("2" (expand "length" 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (expand "length" -1) (("2" (lift-if) (("2" (split -1) (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skosimp) (("3" (expand "length" -1) (("3" (lift-if) (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (expand "length" -1) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (assert) nil nil)) nil)) nil) ("2" (iff) (("2" (prop) (("1" (expand "list2finseq") (("1" (flatten) (("1" (expand "length" -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil nil nil nil nil)) (cons_lem 0 (cons_lem-1 nil 3237052399 nil ("" (grind :if-match nil) (("1" (decompose-equality -3) nil nil) ("2" (decompose-equality -3) nil nil)) nil) proved nil nil nil nil nil)) (char_lem 0 (char_lem-1 nil 3237052399 nil ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) nil nil)) nil) proved nil nil nil nil nil)))(lift)(union)(mucalculus)(ctlops)(fairctlops)(Fairctlops (CheckFair_TCC1 0 (CheckFair_TCC1-1 nil 3237052399 nil ("" (termination-tcc) nil nil) proved nil nil nil nil nil)))(bit)(bv)(exp2)(bv_cnv)(bv_concat_def)(bv_bitwise)(bv_nat)(empty_bv)(bv_caret)
