(booleans)(equalities)(notequal)(if_def (IF_TCC1 0 (IF_TCC1-1 nil 3237052399 3245525100 ("" (inst 1 "LAMBDA (x: [boolean, T, T]): PROJ_2(x)") nil nil) proved ((T formal-type-decl nil if_def nil) (boolean nonempty-type-decl nil booleans nil)) 8 10 nil nil)))(boolean_props (bool_exclusive 0 (bool_exclusive-1 nil 3237052399 3245525101 ("" (iff) (("" (prop) nil nil)) nil) proved nil 6 0 nil nil)) (bool_inclusive 0 (bool_inclusive-1 nil 3237052399 3245525101 ("" (skolem!) (("" (prop) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil) proved nil 9 10 nil nil)) (not_def 0 (not_def-1 nil 3237052399 3245525101 ("" (skosimp) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 12 10 nil nil)) (and_def 0 (and_def-1 nil 3237052399 3245525101 ("" (skolem!) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 12 10 nil nil)) (syand_def 0 (syand_def-1 nil 3237052399 3245525101 ("" (propax) nil nil) proved nil 3 10 nil nil)) (or_def 0 (or_def-1 nil 3237052399 3245525101 ("" (skolem!) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 177 10 nil nil)) (implies_def 0 (implies_def-1 nil 3237052399 3245525101 ("" (skolem!) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 14 20 nil nil)) (syimplies_def 0 (syimplies_def-1 nil 3237052399 3245525101 ("" (propax) nil nil) proved nil 3 0 nil nil)) (when_def 0 (when_def-1 nil 3237052399 3245525101 ("" (skolem!) nil nil) proved nil 7 10 nil nil)) (iff_def 0 (iff_def-1 nil 3237052399 3245525101 ("" (skolem!) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 28 30 nil nil)) (syiff_def 0 (syiff_def-1 nil 3237052399 3245525101 ("" (propax) nil nil) proved nil 3 0 nil nil)) (excluded_middle 0 (excluded_middle-1 nil 3237052399 3245525101 ("" (grind) nil nil) proved nil 21 20 nil nil)))(xor_def (xor_def 0 (xor_def-1 nil 3237052399 3245525101 ("" (grind) nil nil) proved ((/= const-decl "boolean" notequal nil) (XOR const-decl "bool" xor_def nil)) 42 50 nil nil)))(quantifier_props (not_exists 0 (not_exists-1 nil 3237052399 3245525101 ("" (skolem!) (("" (iff) (("" (prop) (("1" (skolem!) (("1" (inst?) nil nil)) nil) ("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil) proved ((t formal-type-decl nil quantifier_props nil)) 22 20 nil nil)) (exists_not 0 (exists_not-1 nil 3237052399 3245525101 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 71 70 nil nil)) (exists_or 0 (exists_or-1 nil 3237052399 3245525101 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 117 120 nil nil)) (exists_implies 0 (exists_implies-1 nil 3237052399 3245525102 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 306 120 nil nil)) (exists_and 0 (exists_and-1 nil 3237052399 3245525102 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 48 40 nil nil)) (not_forall 0 (not_forall-1 nil 3237052399 3245525102 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 70 60 nil nil)) (forall_not 0 (forall_not-1 nil 3237052399 3245525102 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 81 80 nil nil)) (forall_and 0 (forall_and-1 nil 3237052399 3245525102 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 115 100 nil nil)) (forall_or 0 (forall_or-1 nil 3237052399 3245525102 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 49 40 nil nil)))(defined_types)(exists1 (unique_lem 0 (unique_lem-1 nil 3237052399 3245525102 ("" (skolem!) (("" (flatten) (("" (expand "unique?") (("" (skolem!) (("" (flatten) (("" (inst-cp -1 "x!1") (("" (inst -1 "y!1") (("" (inst - "x!1" "y!1") (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil exists1 nil) (unique? const-decl "bool" exists1 nil)) 33 40 nil nil)) (exists1_lem 0 (exists1_lem-1 nil 3237052399 3245525102 ("" (skolem!) (("" (flatten) (("" (expand "exists1") (("" (prop) nil nil)) nil)) nil)) nil) proved ((exists1 const-decl "bool" exists1 nil)) 13 10 nil nil)))(equality_props (IF_true 0 (IF_true-1 nil 3237052399 3245525102 ("" (grind) nil nil) proved nil 10 10 nil nil)) (IF_false 0 (IF_false-1 nil 3237052399 3245525102 ("" (grind) nil nil) proved nil 9 10 nil nil)) (IF_same 0 (IF_same-1 nil 3237052399 3245525102 ("" (grind) nil nil) proved nil 10 10 nil nil)) (reflexivity_of_equals 0 (reflexivity_of_equals-1 nil 3237052399 3245525102 ("" (skolem!) nil nil) proved nil 6 10 nil nil)) (transitivity_of_equals 0 (transitivity_of_equals-1 nil 3237052399 3245525103 ("" (skolem!) (("" (flatten) (("" (replace -1) (("" (propax) nil nil)) nil)) nil)) nil) proved nil 132 10 nil nil)) (symmetry_of_equals 0 (symmetry_of_equals-1 nil 3237052399 3245525103 ("" (skolem!) (("" (flatten) (("" (replace -1) (("" (propax) nil nil)) nil)) nil)) nil) proved nil 9 10 nil nil)))(if_props (lift_if1 0 (lift_if1-1 nil 3237052399 3245525103 ("" (grind) nil nil) proved nil 10 10 nil nil)) (lift_if2 0 (lift_if2-1 nil 3237052399 3245525103 ("" (grind) nil nil) proved nil 39 30 nil nil)))(functions (extensionality_postulate 0 (extensionality_postulate-1 nil 3237052399 3245525103 ("" (skosimp) (("" (prop) (("1" (apply-extensionality) nil nil) ("2" (skosimp) (("2" (assert) nil nil)) nil)) nil)) nil) proved ((R formal-type-decl nil functions nil) (D formal-type-decl nil functions nil)) 27 30 nil nil)) (extensionality 0 (extensionality-1 nil 3237052399 3245525103 ("" (skolem!) (("" (flatten) (("" (apply-extensionality) nil nil)) nil)) nil) proved ((R formal-type-decl nil functions nil) (D formal-type-decl nil functions nil)) 18 20 nil nil)) (congruence 0 (congruence-1 nil 3237052399 3245525103 ("" (grind) nil nil) proved nil 11 10 nil nil)) (eta 0 (eta-1 nil 3237052399 3245525103 ("" (skolem!) (("" (apply-extensionality) nil nil)) nil) proved ((D formal-type-decl nil functions nil) (R formal-type-decl nil functions nil)) 19 20 nil nil)) (bij_is_inj 0 (bij_is_inj-1 nil 3237052399 3245525103 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil functions nil) (R formal-type-decl nil functions nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil)) 72 70 nil nil)) (bij_is_surj 0 (bij_is_surj-1 nil 3237052399 3245525103 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil functions nil) (R formal-type-decl nil functions nil) (bijective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil)) 66 60 nil nil)))(functions_alt)(restrict (injective_restrict 0 (injective_restrict-1 nil 3237052399 3245525103 ("" (expand "injective?") (("" (skosimp*) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil restrict nil) (boolean nonempty-type-decl nil booleans nil) (S_pred const-decl "[T -> boolean]" restrict nil) (S formal-subtype-decl nil restrict nil) (restrict const-decl "R" restrict nil) (injective? const-decl "bool" functions nil)) 57 60 nil nil)) (restrict_of_inj_is_inj 0 (restrict_of_inj_is_inj-1 nil 3237052399 3245525103 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil restrict nil) (R formal-type-decl nil restrict nil) (S formal-subtype-decl nil restrict nil) (S_pred const-decl "[T -> boolean]" restrict nil) (restrict const-decl "R" restrict nil) (injective? const-decl "bool" functions nil)) 78 80 nil nil)))(restrict_props (restrict_full 0 (restrict_full-1 nil 3245191654 3245525103 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) nil nil)) nil) proved ((restrict const-decl "R" restrict nil) (T formal-type-decl nil restrict_props nil) (R formal-type-decl nil restrict_props nil)) 185 50 t shostak)))(extend (restrict_extend 0 (restrict_extend-1 nil 3237052399 3245525104 ("" (grind) (("" (apply-extensionality) nil nil)) nil) proved ((restrict const-decl "R" restrict nil) (extend const-decl "R" extend nil) (T formal-type-decl nil extend nil) (boolean nonempty-type-decl nil booleans nil) (S_pred const-decl "[T -> boolean]" extend nil) (S formal-subtype-decl nil extend nil) (R formal-type-decl nil extend nil)) 71 70 nil nil)))(extend_bool)(extend_props (extend_full 0 (extend_full-1 nil 3245191700 3245525104 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) nil nil)) nil) proved ((d formal-const-decl "R" extend_props nil) (extend const-decl "R" extend nil) (T formal-type-decl nil extend_props nil) (R formal-type-decl nil extend_props nil)) 61 50 t shostak)))(K_conversion)(K_props (K_preserves 0 (K_preserves-1 nil 3237052399 3245525104 ("" (subtype-tcc) nil nil) proved ((K_conversion const-decl "T1" K_conversion nil)) 16 10 nil nil)) (K_preserves1 0 (K_preserves1-1 nil 3237052399 3245525104 ("" (subtype-tcc) nil nil) proved ((K_conversion const-decl "T1" K_conversion nil)) 15 20 nil nil)))(identity (I_TCC1 0 (I_TCC1-1 nil 3237052399 3245525104 ("" (grind) nil nil) proved ((injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil)) 30 30 nil nil)))(identity_props (I_preserves 0 (I_preserves-1 nil 3237052399 3245525104 ("" (subtype-tcc) nil nil) proved ((I const-decl "(bijective?[T, T])" identity nil)) 17 20 nil nil)) (id_preserves 0 (id_preserves-1 nil 3237052399 3245525104 ("" (subtype-tcc) nil nil) proved ((id const-decl "(bijective?[T, T])" identity nil)) 17 20 nil nil)) (identity_preserves 0 (identity_preserves-1 nil 3237052399 3245525104 ("" (subtype-tcc) nil nil) proved ((identity const-decl "(bijective?[T, T])" identity nil)) 17 20 nil nil)))(relations (equiv_is_reflexive 0 (equiv_is_reflexive-1 nil 3237052399 3245525104 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil relations nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 51 50 nil nil)) (equiv_is_symmetric 0 (equiv_is_symmetric-1 nil 3237052399 3245525104 ("" (skolem-typepred) (("" (expand "equivalence?") (("" (assert) nil nil)) nil)) nil) proved ((equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (T formal-type-decl nil relations nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 15 20 nil nil)) (equiv_is_transitive 0 (equiv_is_transitive-1 nil 3237052399 3245525104 ("" (skolem-typepred) (("" (expand "equivalence?") (("" (assert) nil nil)) nil)) nil) proved ((equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (T formal-type-decl nil relations nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 14 10 nil nil)))(orders (preorder_is_reflexive 0 (preorder_is_reflexive-1 nil 3237052399 3245525104 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (preorder? const-decl "bool" orders nil) (transitive? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 60 60 nil nil)) (preorder_is_transitive 0 (preorder_is_transitive-1 nil 3237052399 3245525104 ("" (skolem-typepred) (("" (expand "preorder?") (("" (assert) nil nil)) nil)) nil) proved ((preorder? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 14 20 nil nil)) (equiv_is_preorder 0 (equiv_is_preorder-1 nil 3237052399 3245525104 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil)) 67 60 nil nil)) (po_is_preorder 0 (po_is_preorder-1 nil 3237052399 3245525104 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (partial_order? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil)) 66 70 nil nil)) (po_is_antisymmetric 0 (po_is_antisymmetric-1 nil 3237052399 3245525104 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (partial_order? const-decl "bool" orders nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil)) 152 150 nil nil)) (strict_is_irreflexive 0 (strict_is_irreflexive-1 nil 3237052399 3245525105 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (strict_order? const-decl "bool" orders nil) (transitive? const-decl "bool" relations nil) (irreflexive? const-decl "bool" relations nil)) 69 60 nil nil)) (strict_is_transitive 0 (strict_is_transitive-1 nil 3237052399 3245525105 ("" (skolem-typepred) (("" (expand "strict_order?") (("" (assert) nil nil)) nil)) nil) proved ((strict_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 114 10 nil nil)) (total_is_po 0 (total_is_po-1 nil 3237052399 3245525105 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (total_order? const-decl "bool" orders nil) (dichotomous? const-decl "bool" orders nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil)) 80 80 nil nil)) (total_is_dichotomous 0 (total_is_dichotomous-1 nil 3237052399 3245525105 ("" (skolem-typepred) (("" (expand "total_order?") (("" (assert) nil nil)) nil)) nil) proved ((total_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 17 20 nil nil)) (linear_is_total 0 (linear_is_total-1 nil 3237052399 3245525105 ("" (subtype-tcc) nil nil) proved ((linear_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil) (dichotomous? const-decl "bool" orders nil) (total_order? const-decl "bool" orders nil)) 88 90 nil nil)) (total_is_linear 0 (total_is_linear-1 nil 3237052399 3245525105 ("" (subtype-tcc) nil nil) proved ((linear_order? const-decl "bool" orders nil)) 23 30 nil nil)) (strict_total_is_strict 0 (strict_total_is_strict-1 nil 3237052399 3245525105 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (strict_total_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (strict_order? const-decl "bool" orders nil)) 80 80 nil nil)) (strict_total_is_trichotomous 0 (strict_total_is_trichotomous-1 nil 3237052399 3245525105 ("" (skolem-typepred) (("" (expand "strict_total_order?") (("" (assert) nil nil)) nil)) nil) proved ((strict_total_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 20 20 nil nil)) (well_ordered_is_strict_total 0 (well_ordered_is_strict_total-1 nil 3237052399 3245525105 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (well_ordered? const-decl "bool" orders nil) (well_founded? const-decl "bool" orders nil) (irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (strict_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (strict_total_order? const-decl "bool" orders nil)) 84 90 nil nil)) (well_ordered_is_well_founded 0 (well_ordered_is_well_founded-1 nil 3237052399 3245525105 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (well_ordered? const-decl "bool" orders nil) (strict_total_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (strict_order? const-decl "bool" orders nil) (transitive? const-decl "bool" relations nil) (irreflexive? const-decl "bool" relations nil) (well_founded? const-decl "bool" orders nil)) 221 210 nil nil)))(orders_alt (least_upper_bound_is_upper_bound 0 (least_upper_bound_is_upper_bound-1 nil 3237052399 3245525106 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders_alt nil) (least_upper_bound? const-decl "[T -> bool]" orders_alt nil) (pe formal-const-decl "nonempty_pred[T]" orders_alt nil) (nonempty_pred type-eq-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (least_upper_bound? const-decl "bool" orders nil) (least_upper_bound? const-decl "bool" orders nil) (upper_bound? const-decl "[T -> bool]" orders_alt nil) (upper_bound? const-decl "bool" orders nil) (upper_bound? const-decl "bool" orders nil)) 121 110 nil nil)) (greatest_lower_bound_is_lower_bound 0 (greatest_lower_bound_is_lower_bound-1 nil 3237052399 3245525106 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders_alt nil) (greatest_lower_bound? const-decl "[T -> bool]" orders_alt nil) (pe formal-const-decl "nonempty_pred[T]" orders_alt nil) (nonempty_pred type-eq-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (greatest_lower_bound? const-decl "bool" orders nil) (greatest_lower_bound? const-decl "bool" orders nil) (lower_bound? const-decl "[T -> bool]" orders_alt nil) (lower_bound? const-decl "bool" orders nil) (lower_bound? const-decl "bool" orders nil)) 109 110 nil nil)))(wf_induction (wf_induction 0 (wf_induction-1 nil 3237052399 3245525106 ("" (skosimp) (("" (skosimp) (("" (typepred "<") (("" (expand "well_founded?") (("" (inst -1 "{z:T|NOT p!1(z)}") (("" (assert) (("" (split) (("1" (skosimp) (("1" (inst -2 "y!1") (("1" (split) (("1" (typepred "y!1") (("1" (propax) nil nil)) nil) ("2" (skosimp) (("2" (inst -2 "y!2") nil nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((y!2 skolem-const-decl "T" wf_induction nil) (p!1 skolem-const-decl "pred[T]" wf_induction nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil wf_induction nil) (pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (< formal-const-decl "(well_founded?[T])" wf_induction nil)) 63 70 nil nil)))(measure_induction (measure_induction 0 (measure_induction-1 nil 3237052399 3245525109 ("" (lemma "wf_induction[T,(LAMBDA (x, y: T): m(x) < m(y))]") (("1" (skosimp*) (("1" (inst -1 "p!1") (("1" (split) (("1" (inst -1 "x!1") nil nil) ("2" (propax) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "well_founded?") (("2" (typepred "<") (("2" (expand "well_founded?") (("2" (skosimp*) (("2" (inst -1 "(LAMBDA (y:M): (exists (z:T): m(z) = y AND p!1(z)))") (("2" (split) (("1" (skosimp*) (("1" (typepred "y!2") (("1" (skosimp*) (("1" (inst 1 "z!1") (("1" (skosimp*) (("1" (inst -3 "m(x!1)") (("1" (assert) nil nil) ("2" (inst 1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 2 "y!1") (("2" (skosimp*) (("2" (inst 1 "m(y!1)") (("2" (inst 1 "y!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (p!1 skolem-const-decl "pred[T]" measure_induction nil) (z!1 skolem-const-decl "T" measure_induction nil) (x!1 skolem-const-decl "(p!1)" measure_induction nil) (y!1 skolem-const-decl "T" measure_induction nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (wf_induction formula-decl nil wf_induction nil) (T formal-type-decl nil measure_induction nil) (M formal-type-decl nil measure_induction nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (< formal-const-decl "(well_founded?[M])" measure_induction nil) (m formal-const-decl "[T -> M]" measure_induction nil)) 3547 130 nil nil)))(epsilons)(sets (singleton_TCC1 0 (singleton_TCC1-1 nil 3237052399 3245525109 ("" (skosimp) (("" (expand "singleton?") (("" (inst 1 "x!1") nil nil)) nil)) nil) proved ((singleton? const-decl "bool" sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets nil)) 14 10 nil nil)) (add_TCC1 0 (add_TCC1-1 nil 3237052399 3245525110 ("" (subtype-tcc) nil nil) proved ((T formal-type-decl nil sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 50 50 nil nil)) (choose_TCC1 0 (choose_TCC1-1 nil 3237052399 3245525110 ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 46 50 nil nil)) (choose_TCC2 0 (choose_TCC2-1 nil 3237052399 3245525110 ("" (skolem-typepred) (("" (grind) (("" (rewrite "epsilon_ax[T]") (("1" (inst 1 "x!1") nil nil) ("2" (inst?) nil nil)) nil)) nil)) nil) proved ((empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (TRUE const-decl "bool" booleans nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 73 80 nil nil)) (the_TCC1 0 (the_TCC1-1 nil 3237052399 3245525110 ("" (existence-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets nil) (set type-eq-decl nil sets nil) (singleton? const-decl "bool" sets nil)) 66 70 nil nil)) (the_TCC2 0 (the_TCC2-1 nil 3237052399 3245525110 ("" (skolem-typepred) (("" (grind) (("" (rewrite "epsilon_ax[T]") (("1" (inst?) nil nil) ("2" (inst?) nil nil)) nil)) nil)) nil) proved ((pred type-eq-decl nil defined_types nil) (epsilon_ax formula-decl nil epsilons nil) (TRUE const-decl "bool" booleans nil) (singleton? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 76 80 nil nil)) (rest_TCC1 0 (rest_TCC1-1 nil 3237052399 3245525110 ("" (skolem!) (("" (flatten) (("" (expand "nonempty?") (("" (propax) nil nil)) nil)) nil)) nil) proved ((nonempty? const-decl "bool" sets nil)) 9 0 nil nil)) (nonempty_singleton 0 (nonempty_singleton-1 nil 3237052399 3245525110 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets nil) (set type-eq-decl nil sets nil) (singleton? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 74 70 nil nil)) (nonempty_union1 0 (nonempty_union1-1 nil 3237052399 3245525110 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (union const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 78 70 nil nil)) (nonempty_union2 0 (nonempty_union2-1 nil 3237052399 3245525110 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (union const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 91 90 nil nil)))(sets_lemmas (extensionality 0 (extensionality-1 nil 3237052399 3245525110 ("" (skolem!) (("" (flatten) (("" (apply-extensionality) (("" (inst?) (("" (expand "member") (("" (iff) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 82 40 nil nil)) (emptyset_is_empty? 0 (emptyset_is_empty?-1 nil 3237052399 3245525110 ("" (skolem!) (("" (expand "empty?") (("" (expand "emptyset") (("" (expand "member") (("" (prop) (("1" (apply-extensionality) (("1" (inst?) nil nil)) nil) ("2" (skolem!) (("2" (replace -1) (("2" (beta) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (FALSE const-decl "bool" booleans nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (emptyset const-decl "set" sets nil)) 49 50 nil nil)) (empty_no_members 0 (empty_no_members-1 nil 3237052399 3245525110 ("" (grind) nil nil) proved ((emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil)) 17 20 nil nil)) (emptyset_min 0 (emptyset_min-1 nil 3237052399 3245525111 ("" (grind) (("" (apply-extensionality) (("" (inst?) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (subset? const-decl "bool" sets nil) (emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil)) 88 90 nil nil)) (nonempty_member 0 (nonempty_member-1 nil 3237052399 3245525111 ("" (tcc) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 97 90 nil nil)) (fullset_member 0 (fullset_member-1 nil 3237052399 3245525111 ("" (grind) nil nil) proved ((fullset const-decl "set" sets nil) (member const-decl "bool" sets nil)) 17 20 nil nil)) (fullset_max 0 (fullset_max-1 nil 3237052399 3245525111 ("" (grind) (("" (apply-extensionality) (("" (inst?) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (fullset const-decl "set" sets nil)) 102 90 nil nil)) (nonempty_exists 0 (nonempty_exists-1 nil 3237052399 3245525111 ("" (expand "nonempty?") (("" (expand "empty?") (("" (expand "member") (("" (skosimp*) (("" (split) (("1" (skosimp*) (("1" (inst * "x!1") nil nil)) nil) ("2" (flatten) (("2" (skolem * "x!1") (("2" (inst * "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((empty? const-decl "bool" sets nil) (a!1 skolem-const-decl "set[T]" sets_lemmas nil) (x!1 skolem-const-decl "T" sets_lemmas nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 42 40 nil nil)) (subset_reflexive 0 (subset_reflexive-1 nil 3237052399 3245525111 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 38 40 nil nil)) (subset_antisymmetric 0 (subset_antisymmetric-1 nil 3237052399 3245525111 ("" (skosimp) (("" (expand "subset?") (("" (expand "member") (("" (apply-extensionality) (("" (inst?) (("" (inst?) (("" (prop) (("1" (iff) (("1" (prop) nil nil)) nil) ("2" (iff) (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((subset? const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 59 60 nil nil)) (subset_transitive 0 (subset_transitive-1 nil 3237052399 3245525111 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 107 90 nil nil)) (subset_partial_order 0 (subset_partial_order-1 nil 3237052399 3245525111 ("" (expand "partial_order?") (("" (expand "preorder?") (("" (expand "reflexive?") (("" (prop) (("1" (skosimp) (("1" (expand "subset?") (("1" (expand "member") (("1" (skosimp) nil nil)) nil)) nil)) nil) ("2" (expand "transitive?") (("2" (skosimp) (("2" (expand "subset?") (("2" (skosimp) (("2" (inst?) (("2" (inst?) (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "antisymmetric?") (("3" (skosimp) (("3" (expand "subset?") (("3" (apply-extensionality) (("3" (inst?) (("3" (inst?) (("3" (expand "member") (("3" (iff) (("3" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((preorder? const-decl "bool" orders nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (antisymmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil)) 193 120 nil nil)) (subset_emptyset 0 (subset_emptyset-1 nil 3237052399 3245525111 ("" (grind) nil nil) proved ((emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 40 30 nil nil)) (subset_fullset 0 (subset_fullset-1 nil 3237052399 3245525111 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (fullset const-decl "set" sets nil) (subset? const-decl "bool" sets nil)) 24 20 nil nil)) (union_idempotent 0 (union_idempotent-1 nil 3237052399 3245525111 ("" (skosimp) (("" (expand "union") (("" (apply-extensionality) (("" (expand "member") (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((union const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 45 40 nil nil)) (union_commutative 0 (union_commutative-1 nil 3237052399 3245525112 ("" (skosimp) (("" (expand "union") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil) proved ((union const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 61 60 nil nil)) (union_associative 0 (union_associative-1 nil 3237052399 3245525112 ("" (skosimp) (("" (expand "union") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((union const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 65 60 nil nil)) (union_empty 0 (union_empty-1 nil 3237052399 3245525112 ("" (skosimp) (("" (expand "union") (("" (apply-extensionality) (("" (expand "member") (("" (expand "emptyset") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((union const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (emptyset const-decl "set" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 44 40 nil nil)) (union_full 0 (union_full-1 nil 3237052399 3245525112 ("" (skosimp) (("" (expand "fullset") (("" (expand "union") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((fullset const-decl "set" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (union const-decl "set" sets nil)) 46 50 nil nil)) (union_subset1 0 (union_subset1-1 nil 3237052399 3245525112 ("" (skosimp) (("" (expand "subset?") (("" (expand "union") (("" (skosimp) (("" (expand "member") (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (union const-decl "set" sets nil)) 31 30 nil nil)) (union_subset2 0 (union_subset2-1 nil 3237052399 3245525112 ("" (skosimp) (("" (expand "subset?") (("" (expand "union") (("" (apply-extensionality) (("" (inst?) (("" (iff) (("" (expand "member") (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((subset? const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (union const-decl "set" sets nil)) 59 60 nil nil)) (union_upper_bound 0 (union_upper_bound-1 nil 3237052399 3245525112 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (union const-decl "set" sets nil)) 132 120 nil nil)) (union_difference 0 (union_difference-1 nil 3237052399 3245525112 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (difference const-decl "set" sets nil) (union const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 175 110 nil nil)) (union_diff_subset 0 (union_diff_subset-1 nil 3237052399 3245525112 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (difference const-decl "set" sets nil) (union const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 151 130 nil nil)) (intersection_idempotent 0 (intersection_idempotent-1 nil 3237052399 3245525112 ("" (skosimp) (("" (expand "intersection") (("" (apply-extensionality) (("" (expand "member") (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 44 40 nil nil)) (intersection_commutative 0 (intersection_commutative-1 nil 3237052399 3245525112 ("" (skosimp) (("" (expand "intersection") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 62 60 nil nil)) (intersection_associative 0 (intersection_associative-1 nil 3237052399 3245525113 ("" (skosimp) (("" (expand "intersection") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 66 70 nil nil)) (intersection_empty 0 (intersection_empty-1 nil 3237052399 3245525113 ("" (skosimp) (("" (expand "intersection") (("" (expand "emptyset") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (FALSE const-decl "bool" booleans nil) (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (emptyset const-decl "set" sets nil)) 45 50 nil nil)) (intersection_full 0 (intersection_full-1 nil 3237052399 3245525113 ("" (skosimp) (("" (expand "intersection") (("" (expand "fullset") (("" (expand "member") (("" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)) 40 40 nil nil)) (intersection_subset1 0 (intersection_subset1-1 nil 3237052399 3245525113 ("" (skosimp) (("" (expand "intersection") (("" (expand "subset?") (("" (skosimp) (("" (expand "member") (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 46 40 nil nil)) (intersection_subset2 0 (intersection_subset2-1 nil 3237052399 3245525113 ("" (skosimp) (("" (expand "intersection") (("" (expand "subset?") (("" (apply-extensionality) (("" (expand "member") (("" (inst?) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (subset? const-decl "bool" sets nil)) 59 60 nil nil)) (intersection_lower_bound 0 (intersection_lower_bound-1 nil 3237052399 3245525113 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (intersection const-decl "set" sets nil)) 131 120 nil nil)) (distribute_intersection_union 0 (distribute_intersection_union-1 nil 3237052399 3245525113 ("" (skosimp) (("" (expand "intersection") (("" (expand "union") (("" (expand "member") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil)) 129 80 nil nil)) (distribute_union_intersection 0 (distribute_union_intersection-1 nil 3237052399 3245525113 ("" (skosimp) (("" (expand "intersection") (("" (expand "union") (("" (expand "member") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil)) 101 90 nil nil)) (complement_emptyset 0 (complement_emptyset-1 nil 3237052399 3245525113 ("" (expand "complement") (("" (expand "emptyset") (("" (expand "fullset") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil) (fullset const-decl "set" sets nil) (complement const-decl "set" sets nil)) 21 20 nil nil)) (complement_fullset 0 (complement_fullset-1 nil 3237052399 3245525113 ("" (expand "complement") (("" (expand "emptyset") (("" (expand "fullset") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil) (fullset const-decl "set" sets nil) (complement const-decl "set" sets nil)) 34 20 nil nil)) (complement_complement 0 (complement_complement-1 nil 3237052399 3245525113 ("" (skosimp) (("" (expand "complement") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((complement const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 46 50 nil nil)) (subset_complement 0 (subset_complement-1 nil 3237052399 3245525113 ("" (skosimp) (("" (expand "complement") (("" (expand "subset?") (("" (expand "member") (("" (prop) (("1" (skosimp) (("1" (inst?) (("1" (prop) nil nil)) nil)) nil) ("2" (skosimp) (("2" (inst?) (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((complement const-decl "set" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (subset? const-decl "bool" sets nil)) 65 60 nil nil)) (demorgan1 0 (demorgan1-1 nil 3237052399 3245525114 ("" (grind) (("" (apply-extensionality) (("" (iff) (("" (grind) nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (intersection const-decl "set" sets nil) (union const-decl "set" sets nil) (complement const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 127 110 nil nil)) (demorgan2 0 (demorgan2-1 nil 3237052399 3245525114 ("" (grind) (("" (apply-extensionality) (("" (iff) (("" (grind) nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil) (intersection const-decl "set" sets nil) (complement const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 135 120 nil nil)) (difference_emptyset1 0 (difference_emptyset1-1 nil 3237052399 3245525114 ("" (skosimp) (("" (expand "difference") (("" (expand "emptyset") (("" (expand "member") (("" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (emptyset const-decl "set" sets nil)) 37 40 nil nil)) (difference_emptyset2 0 (difference_emptyset2-1 nil 3237052399 3245525114 ("" (skosimp) (("" (expand "difference") (("" (expand "emptyset") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (member const-decl "bool" sets nil) (emptyset const-decl "set" sets nil)) 23 30 nil nil)) (difference_fullset1 0 (difference_fullset1-1 nil 3237052399 3245525114 ("" (skosimp) (("" (expand "difference") (("" (expand "emptyset") (("" (expand "fullset") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (fullset const-decl "set" sets nil) (member const-decl "bool" sets nil) (emptyset const-decl "set" sets nil)) 41 30 nil nil)) (difference_fullset2 0 (difference_fullset2-1 nil 3237052399 3245525114 ("" (skosimp) (("" (expand "difference") (("" (expand "fullset") (("" (expand "complement") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (complement const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (TRUE const-decl "bool" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (fullset const-decl "set" sets nil)) 88 50 nil nil)) (difference_intersection 0 (difference_intersection-1 nil 3237052399 3245525114 ("" (skosimp) (("" (expand "difference") (("" (expand "intersection") (("" (expand "complement") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (complement const-decl "set" sets nil) (member const-decl "bool" sets nil) (intersection const-decl "set" sets nil)) 35 40 nil nil)) (difference_difference1 0 (difference_difference1-1 nil 3237052399 3245525114 ("" (skosimp) (("" (expand "difference") (("" (expand "member") (("" (expand "union") (("" (expand "member") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (union const-decl "set" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 92 80 nil nil)) (difference_difference2 0 (difference_difference2-1 nil 3237052399 3245525114 ("" (skosimp) (("" (expand "difference") (("" (expand "union") (("" (expand "intersection") (("" (expand "member") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (intersection const-decl "set" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil) (union const-decl "set" sets nil)) 105 80 nil nil)) (difference_subset 0 (difference_subset-1 nil 3237052399 3245525114 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (difference const-decl "set" sets nil) (subset? const-decl "bool" sets nil)) 56 60 nil nil)) (difference_disjoint 0 (difference_disjoint-1 nil 3237052399 3245525114 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (difference const-decl "set" sets nil) (intersection const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (disjoint? const-decl "bool" sets nil)) 84 70 nil nil)) (diff_union_inter 0 (diff_union_inter-1 nil 3237052399 3245525115 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (intersection const-decl "set" sets nil) (union const-decl "set" sets nil) (difference const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 127 110 nil nil)) (nonempty_add 0 (nonempty_add-1 nil 3237052399 3245525115 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (add const-decl "(nonempty?)" sets nil) (empty? const-decl "bool" sets nil)) 61 50 nil nil)) (member_add 0 (member_add-1 nil 3237052399 3245525115 ("" (skosimp*) (("" (expand "add") (("" (apply-extensionality) (("" (hide 2) (("" (iff) (("" (expand "member") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((add const-decl "(nonempty?)" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 74 70 nil nil)) (member_remove 0 (member_remove-1 nil 3237052399 3245525115 ("" (skosimp*) (("" (apply-extensionality) (("" (hide 3) (("" (expand "remove") (("" (expand "member") (("" (iff) (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 49 50 nil nil)) (add_remove_member 0 (add_remove_member-1 nil 3237052399 3245525115 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil)) 198 150 nil nil)) (remove_add_member 0 (remove_add_member-1 nil 3237052399 3245525115 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil)) 147 130 nil nil)) (subset_add 0 (subset_add-1 nil 3237052399 3245525115 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (add const-decl "(nonempty?)" sets nil) (subset? const-decl "bool" sets nil)) 90 80 nil nil)) (add_as_union 0 (add_as_union-1 nil 3237052399 3245525115 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (union const-decl "set" sets nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 135 120 nil nil)) (singleton_as_add 0 (singleton_as_add-1 nil 3237052399 3245525116 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (emptyset const-decl "set" sets nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 113 110 nil nil)) (subset_remove 0 (subset_remove-1 nil 3237052399 3245525116 ("" (grind) nil nil) proved ((/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil) (remove const-decl "set" sets nil) (subset? const-decl "bool" sets nil)) 77 70 nil nil)) (remove_as_difference 0 (remove_as_difference-1 nil 3237052399 3245525116 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (difference const-decl "set" sets nil) (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil)) 141 130 nil nil)) (remove_member_singleton 0 (remove_member_singleton-1 nil 3237052399 3245525116 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (emptyset const-decl "set" sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil)) 111 110 nil nil)) (choose_rest_TCC1 0 (choose_rest_TCC1-1 nil 3237052399 3245525116 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 41 40 nil nil)) (choose_rest 0 (choose_rest-1 nil 3237052399 3245525116 ("" (skosimp*) (("" (apply-extensionality) (("1" (hide 3) (("1" (expand "add") (("1" (hide 2) (("1" (iff) (("1" (split) (("1" (flatten) (("1" (expand "member") (("1" (split) (("1" (assert) nil nil) ("2" (expand "rest") (("2" (expand "remove") (("2" (flatten) (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "member") (("2" (expand "rest") (("2" (expand "remove") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "nonempty?") (("2" (propax) nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (rest const-decl "set" sets nil) (choose const-decl "(p)" sets nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (a!1 skolem-const-decl "set[T]" sets_lemmas nil) (remove const-decl "set" sets nil) (member const-decl "bool" sets nil)) 140 90 nil nil)) (choose_member 0 (choose_member-1 nil 3237052399 3245525116 ("" (grind) (("" (rewrite "epsilon_ax[T]") (("1" (inst?) nil nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil) proved ((TRUE const-decl "bool" booleans nil) (epsilon_ax formula-decl nil epsilons nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (choose const-decl "(p)" sets nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 116 90 nil nil)) (choose_not_member 0 (choose_not_member-1 nil 3237052399 3245525116 ("" (skosimp*) (("" (expand "member") (("" (expand "rest") (("" (assert) (("" (expand "remove") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (remove const-decl "set" sets nil) (rest const-decl "set" sets nil)) 46 30 nil nil)) (rest_not_equal 0 (rest_not_equal-1 nil 3237052399 3245525117 ("" (skosimp) (("" (expand "rest") (("" (replace 1) (("" (expand "remove") (("" (expand "empty?") (("" (skosimp) (("" (expand "member") (("" (typepred "choose(a!1)") (("1" (replace -3 -1 :dir rl) (("1" (beta) (("1" (flatten) (("1" (replace -2) (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((rest const-decl "set" sets nil) (remove const-decl "set" sets nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)) 94 90 nil nil)) (rest_member 0 (rest_member-1 nil 3237052399 3245525117 ("" (tcc :defs !) nil nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (rest const-decl "set" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil)) 83 80 nil nil)) (rest_subset 0 (rest_subset-1 nil 3237052399 3245525117 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (rest const-decl "set" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil) (subset? const-decl "bool" sets nil)) 110 100 nil nil)) (choose_add 0 (choose_add-1 nil 3237052399 3245525117 ("" (grind) (("" (typepred " choose(add(x!1, a!1))") (("" (expand "add" -1 1) (("" (expand "member") (("" (expand "choose") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (member const-decl "bool" sets nil) (choose const-decl "(p)" sets nil)) 103 90 nil nil)) (choose_rest_or_TCC1 0 (choose_rest_or_TCC1-1 nil 3237052399 3245525117 ("" (tcc :defs !) nil nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (rest const-decl "set" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil)) 100 90 nil nil)) (choose_rest_or 0 (choose_rest_or-1 nil 3237052399 3245525117 ("" (tcc :defs !) nil nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (rest const-decl "set" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil)) 86 90 nil nil)) (choose_singleton_TCC1 0 (choose_singleton_TCC1-1 nil 3237052399 3245525117 ("" (tcc :defs !) nil nil) proved ((singleton const-decl "(singleton?)" sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 34 40 nil nil)) (choose_singleton 0 (choose_singleton-1 nil 3237052399 3245525117 ("" (skosimp*) (("" (typepred "choose(singleton(x!1))") (("1" (expand "singleton") (("1" (propax) nil nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil) proved ((choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)) 50 50 nil nil)) (rest_singleton 0 (rest_singleton-1 nil 3237052399 3245525117 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (expand "rest") (("" (expand "singleton") (("" (expand "remove") (("" (lift-if) (("" (expand "emptyset") (("" (prop) (("1" (expand "empty?") (("1" (inst -1 "x!1") (("1" (expand "member") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (expand "member") (("2" (expand "choose") (("2" (use "epsilon_ax[T]") (("1" (assert) nil nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (emptyset const-decl "set" sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (rest const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (TRUE const-decl "bool" booleans nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (choose const-decl "(p)" sets nil) (remove const-decl "set" sets nil)) 140 130 nil nil)) (singleton_subset 0 (singleton_subset-1 nil 3237052399 3245525117 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (subset? const-decl "bool" sets nil)) 35 40 nil nil)) (rest_empty_lem 0 (rest_empty_lem-1 nil 3237052399 3245525118 ("" (skosimp*) (("" (expand "extend") (("" (apply-extensionality) (("1" (hide 3) (("1" (lift-if) (("1" (expand "singleton") (("1" (expand "empty?") (("1" (skosimp*) (("1" (expand "member") (("1" (split) (("1" (flatten) (("1" (typepred "choose(a!1)") (("1" (inst -4 "x!1") (("1" (expand "rest") (("1" (expand "remove") (("1" (expand "member") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "nonempty?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((extend const-decl "R" extend nil) (NOT const-decl "[bool -> bool]" booleans nil) (rest const-decl "set" sets nil) (remove const-decl "set" sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (a!1 skolem-const-decl "set[T]" sets_lemmas nil) (set type-eq-decl nil sets nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (singleton? const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (choose const-decl "(p)" sets nil) (FALSE const-decl "bool" booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 182 150 nil nil)) (singleton_disjoint 0 (singleton_disjoint-1 nil 3237052399 3245525118 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (intersection const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (disjoint? const-decl "bool" sets nil)) 77 70 nil nil)) (disjoint_remove_left 0 (disjoint_remove_left-1 nil 3237052399 3245525118 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (disjoint? const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil)) 132 120 nil nil)) (disjoint_remove_right 0 (disjoint_remove_right-1 nil 3237052399 3245525118 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (disjoint? const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil)) 121 110 nil nil)) (union_disj_remove_left 0 (union_disj_remove_left-1 nil 3237052399 3245525118 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (remove const-decl "set" sets nil) (union const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (T formal-type-decl nil sets_lemmas nil) (disjoint? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (member const-decl "bool" sets nil)) 181 170 nil nil)) (union_disj_remove_right 0 (union_disj_remove_right-1 nil 3237052399 3245525118 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (remove const-decl "set" sets nil) (union const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (T formal-type-decl nil sets_lemmas nil) (disjoint? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (member const-decl "bool" sets nil)) 205 180 nil nil)) (subset_powerset 0 (subset_powerset-1 nil 3237053513 3245525118 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (powerset const-decl "setofsets" sets nil)) 34 40 t shostak)) (empty_powerset 0 (empty_powerset-1 nil 3237053527 3245525119 ("" (grind :if-match nil) (("1" (inst 1 "emptyset") (("1" (skolem-typepred) (("1" (grind :if-match nil) (("1" (apply-extensionality) (("1" (inst -2 "x!1") (("1" (inst -3 "x!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (inst-cp -3 "emptyset") (("1" (inst -3 "a!1") (("1" (replace -3 :hide? t) (("1" (decompose-equality) (("1" (hide -2) (("1" (inst -1 "x!1") (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (emptyset const-decl "set" sets nil) (a!1 skolem-const-decl "set[T]" sets_lemmas nil) (subset? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (set type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (singleton? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 398 310 t shostak)) (nonempty_powerset 0 (nonempty_powerset-1 nil 3237054070 3245525119 ("" (grind :if-match nil) (("" (inst -1 "emptyset") (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (emptyset const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (powerset const-decl "setofsets" sets nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 104 100 t shostak)))(function_inverse (unique_bijective_inverse 0 (unique_bijective_inverse-1 nil 3237052399 3245525119 ("" (skolem-typepred) (("" (grind :if-match nil) (("" (inst? -2) (("" (skosimp) (("" (replace -2 :dir rl) (("" (use "epsilon_ax[D]") (("" (split) (("1" (propax) nil nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((inverse const-decl "D" function_inverse nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (bijective? const-decl "bool" functions nil) (R formal-type-decl nil function_inverse nil) (D formal-nonempty-type-decl nil function_inverse nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 133 120 nil nil)) (bijective_inverse_is_bijective 0 (bijective_inverse_is_bijective-1 nil 3237052399 3245525119 ("" (skolem-typepred) (("" (grind :if-match nil) (("1" (inst 1 "f!1(y!1)") (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (split) (("1" (inst? -2) (("1" (assert) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (use "epsilon_ax[D]") (("2" (split) (("1" (lemma "epsilon_ax[D]") (("1" (inst -1 "lambda (x: D): f!1(x) = x2!1") (("1" (split) (("1" (assert) nil nil) ("2" (inst -3 "x2!1") nil nil)) nil)) nil)) nil) ("2" (inst -2 "x1!1") nil nil)) nil)) nil)) nil)) nil) proved ((inverse const-decl "D" function_inverse nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon const-decl "T" epsilons nil) (bijective? const-decl "bool" functions nil) (R formal-type-decl nil function_inverse nil) (D formal-nonempty-type-decl nil function_inverse nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 287 260 nil nil)) (surjective_inverse 0 (surjective_inverse-1 nil 3237052399 3245525120 ("" (skosimp) (("" (expand "inverse") (("" (lemma "epsilon_ax[D]") (("" (inst -1 "LAMBDA (x:D): f!1(x) = y!1") (("" (prop) (("1" (replace -2) (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil) ("2" (typepred "f!1") (("2" (expand "surjective?") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((inverse const-decl "D" function_inverse nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (R formal-type-decl nil function_inverse nil) (= const-decl "[T, T -> boolean]" equalities nil) (surjective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (epsilon_ax formula-decl nil epsilons nil) (D formal-nonempty-type-decl nil function_inverse nil)) 52 40 nil nil)) (injective_inverse 0 (injective_inverse-1 nil 3237052399 3245525120 ("" (skosimp) (("" (expand "inverse") (("" (typepred "f!1") (("" (expand "injective?") (("" (lemma "epsilon_ax[D]") (("" (inst -1 "LAMBDA (x:D): f!1(x) = y!1") (("" (prop) (("1" (replace -3) (("1" (inst?) (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (inst?) (("2" (replace -2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((inverse const-decl "D" function_inverse nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (epsilon_ax formula-decl nil epsilons nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (injective? const-decl "bool" functions nil)) 52 50 nil nil)) (bijective_inverse 0 (bijective_inverse-1 nil 3237052399 3245525120 ("" (skosimp) (("" (split) (("1" (rewrite "surjective_inverse") (("1" (typepred "f!1") (("1" (expand "bijective?") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (rewrite "injective_inverse") (("2" (typepred "f!1") (("2" (expand "bijective?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (R formal-type-decl nil function_inverse nil) (D formal-nonempty-type-decl nil function_inverse nil) (surjective_inverse formula-decl nil function_inverse nil) (injective? const-decl "bool" functions nil) (injective_inverse formula-decl nil function_inverse nil)) 61 50 nil nil)) (bij_inv_is_bij 0 (bij_inv_is_bij-1 nil 3237052399 3245525120 ("" (skosimp*) (("" (expand "bijective?") (("" (expand "injective?") (("" (expand "surjective?") (("" (flatten) (("" (split) (("1" (skosimp*) (("1" (lemma "bijective_inverse") (("1" (inst?) (("1" (assert) (("1" (expand "inverse" -1) (("1" (lemma "epsilon_ax[D]") (("1" (inst?) (("1" (split) (("1" (assert) nil nil) ("2" (inst -4 "x2!1") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "bijective?") (("2" (expand "injective?") (("2" (assert) (("2" (replace -2) (("2" (expand "surjective?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst 1 "f!1(y!1)") (("2" (rewrite "injective_inverse") (("2" (expand "injective?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective_inverse formula-decl nil function_inverse nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (inverse const-decl "D" function_inverse nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (f!1 skolem-const-decl "[D -> R]" function_inverse nil) (injective_inverse formula-decl nil function_inverse nil) (injective? const-decl "bool" functions nil)) 178 130 nil nil)) (surj_right 0 (surj_right-1 nil 3237052399 3245525120 ("" (grind) (("" (lemma "epsilon_ax[D]") (("" (inst?) (("" (split) (("1" (propax) nil nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (R formal-type-decl nil function_inverse nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (right_inverse? const-decl "bool" function_inverse nil) (inverse const-decl "D" function_inverse nil) (surjective? const-decl "bool" functions nil)) 176 160 nil nil)) (inj_left 0 (inj_left-1 nil 3237052399 3245525120 ("" (skosimp) (("" (prop) (("1" (grind) (("1" (lemma "epsilon_ax[D]") (("1" (inst?) (("1" (assert) (("1" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil) ("2" (expand "left_inverse?") (("2" (expand "inverse") (("2" (expand "injective?") (("2" (skosimp) (("2" (inst-cp -1 "x1!1") (("2" (inst -1 "x2!1") (("2" (assert) (("2" (replace -3) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (D formal-nonempty-type-decl nil function_inverse nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (R formal-type-decl nil function_inverse nil) (= const-decl "[T, T -> boolean]" equalities nil) (left_inverse? const-decl "bool" function_inverse nil) (inverse const-decl "D" function_inverse nil) (injective? const-decl "bool" functions nil)) 159 140 nil nil)) (inj_inv 0 (inj_inv-1 nil 3237052399 3245525120 ("" (skosimp) (("" (expand "surjective?") (("" (expand "injective?") (("" (expand "inverse") (("" (skosimp) (("" (inst-cp -1 "x1!1") (("" (inst -1 "x2!1") (("" (skosimp) (("" (skosimp) (("" (lemma "epsilon_ax[D]") (("" (inst-cp -1 "LAMBDA (x:D): f!1(x)=x1!1") (("" (inst -1 "LAMBDA (x:D): f!1(x)=x2!1") (("" (prop) (("1" (replace -5) (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil) ("2" (inst?) nil nil) ("3" (inst?) nil nil) ("4" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((surjective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil) (R formal-type-decl nil function_inverse nil) (epsilon_ax formula-decl nil epsilons nil) (D formal-nonempty-type-decl nil function_inverse nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (injective? const-decl "bool" functions nil)) 83 80 nil nil)) (surj_inv 0 (surj_inv-1 nil 3237052399 3245525120 ("" (skosimp) (("" (expand "surjective?") (("" (expand "injective?") (("" (skosimp) (("" (expand "inverse") (("" (inst -1 "y!1" _) (("" (inst 1 "f!1(y!1)") (("" (inst -1 "(epsilon ! (x_5: D): f!1(x_5) = f!1(y!1))") (("" (prop) (("1" (replace -1) (("1" (replace -1 :dir rl) (("1" (replace -1 :dir rl) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (lemma "epsilon_ax[D]") (("2" (inst?) (("2" (prop) (("1" (replace -1) (("1" (propax) nil nil)) nil) ("2" (inst 1 "y!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((surjective? const-decl "bool" functions nil) (D formal-nonempty-type-decl nil function_inverse nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon_ax formula-decl nil epsilons nil) (R formal-type-decl nil function_inverse nil) (inverse const-decl "D" function_inverse nil) (injective? const-decl "bool" functions nil)) 77 70 nil nil)) (inv_inj_is_surj 0 (inv_inj_is_surj-1 nil 3237052399 3245525121 ("" (grind :if-match nil) (("" (inst 1 "f!1(y!1)") (("" (inst? -1) (("" (assert) (("" (lemma "epsilon_ax[D]") (("" (inst?) (("" (assert) (("" (inst 1 "y!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil)) 122 110 nil nil)) (inv_surj_is_inj 0 (inv_surj_is_inj-1 nil 3237052399 3245525121 ("" (grind :if-match nil) (("" (inst-cp -1 "x1!1") (("" (inst -1 "x2!1") (("" (skosimp*) (("" (lemma "epsilon_ax[D]") (("" (lemma "epsilon_ax[D]") (("" (inst?) (("" (inst -2 "LAMBDA (x: D): f!1(x) = x2!1") (("" (assert) (("" (prop) (("1" (assert) nil nil) ("2" (inst 1 "x!1") nil nil) ("3" (inst 1 "x!2") nil nil) ("4" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon_ax formula-decl nil epsilons nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil)) 203 150 nil nil)) (comp_inverse_right_surj 0 (comp_inverse_right_surj-1 nil 3237052399 3245525121 ("" (grind :if-match nil) (("" (use "epsilon_ax[D]") (("" (assert) (("" (inst? -1) nil nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (surjective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil)) 85 80 nil nil)) (comp_inverse_left_inj 0 (comp_inverse_left_inj-1 nil 3237052399 3245525121 ("" (grind :if-match nil) (("" (use "epsilon_ax[D]") (("" (split) (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon const-decl "T" epsilons nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (injective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil)) 99 80 nil nil)) (comp_inverse_right 0 (comp_inverse_right-1 nil 3237052399 3245525121 ("" (skosimp) (("" (lemma "comp_inverse_right_surj") (("" (inst?) (("" (typepred "f!1") (("" (expand "bijective?") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((comp_inverse_right_surj formula-decl nil function_inverse nil) (NOT const-decl "[bool -> bool]" booleans nil) (f!1 skolem-const-decl "(bijective?[D, R])" function_inverse nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil)) 42 30 nil nil)) (comp_inverse_left 0 (comp_inverse_left-1 nil 3237052399 3245525121 ("" (skolem-typepred) (("" (expand "bijective?") (("" (lemma "comp_inverse_left_inj") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((injective? const-decl "bool" functions nil) (f!1 skolem-const-decl "(bijective?[D, R])" function_inverse nil) (comp_inverse_left_inj formula-decl nil function_inverse nil) (bijective? const-decl "bool" functions nil) (R formal-type-decl nil function_inverse nil) (D formal-nonempty-type-decl nil function_inverse nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 33 40 nil nil)))(function_image (fun_exists 0 (fun_exists-1 nil 3237052399 3245525121 ("" (flatten) (("" (split) (("1" (skosimp) (("1" (inst 1 "LAMBDA (x:D): y!1") nil nil)) nil) ("2" (inst 2 "LAMBDA (x:D): epsilon! (y:R): TRUE") (("2" (skolem-typepred) (("2" (inst 2 "x!1") nil nil)) nil)) nil)) nil)) nil) proved ((D formal-type-decl nil function_image nil) (R formal-type-decl nil function_image nil) (TRUE const-decl "bool" booleans nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 25 30 t nil)) (image_inverse_image 0 (image_inverse_image-1 nil 3237052399 3245525121 ("" (grind) nil nil) proved ((inverse_image const-decl "set[D]" function_image nil) (set type-eq-decl nil sets nil) (R formal-type-decl nil function_image nil) (D formal-type-decl nil function_image nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (image const-decl "set[R]" function_image nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 81 60 nil nil)) (inverse_image_image 0 (inverse_image_image-1 nil 3237052399 3245525121 ("" (grind) nil nil) proved ((D formal-type-decl nil function_image nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (image const-decl "set[R]" function_image nil) (inverse_image const-decl "set[D]" function_image nil) (subset? const-decl "bool" sets nil)) 81 70 nil nil)) (image_subset 0 (image_subset-1 nil 3237052399 3245525121 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil function_image nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (image const-decl "set[R]" function_image nil)) 131 110 nil nil)) (inverse_image_subset 0 (inverse_image_subset-1 nil 3237052399 3245525122 ("" (grind) nil nil) proved ((D formal-type-decl nil function_image nil) (R formal-type-decl nil function_image nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (inverse_image const-decl "set[D]" function_image nil)) 130 80 nil nil)) (image_union 0 (image_union-1 nil 3237052399 3245525122 ("" (grind) (("" (apply-extensionality) (("" (iff) (("" (grind) nil nil)) nil)) nil)) nil) proved ((R formal-type-decl nil function_image nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil) (image const-decl "set[R]" function_image nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (D formal-type-decl nil function_image nil) (member const-decl "bool" sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (x!2 skolem-const-decl "(union(X1!1, X2!1))" function_image nil) (X2!1 skolem-const-decl "set[D]" function_image nil) (X1!1 skolem-const-decl "set[D]" function_image nil)) 344 300 nil nil)) (image_intersection 0 (image_intersection-1 nil 3237052399 3245525122 ("" (grind) nil nil) proved ((X2!1 skolem-const-decl "set[D]" function_image nil) (X1!1 skolem-const-decl "set[D]" function_image nil) (x!2 skolem-const-decl "(intersection(X1!1, X2!1))" function_image nil) (set type-eq-decl nil sets nil) (D formal-type-decl nil function_image nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (image const-decl "set[R]" function_image nil) (member const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (subset? const-decl "bool" sets nil)) 120 120 nil nil)) (inverse_image_union 0 (inverse_image_union-1 nil 3237052399 3245525122 ("" (grind) (("" (apply-extensionality) nil nil)) nil) proved ((R formal-type-decl nil function_image nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (inverse_image const-decl "set[D]" function_image nil) (union const-decl "set" sets nil) (member const-decl "bool" sets nil) (D formal-type-decl nil function_image nil) (boolean nonempty-type-decl nil booleans nil)) 103 100 nil nil)) (inverse_image_intersection 0 (inverse_image_intersection-1 nil 3237052399 3245525122 ("" (grind) (("" (apply-extensionality) nil nil)) nil) proved ((R formal-type-decl nil function_image nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (inverse_image const-decl "set[D]" function_image nil) (intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (D formal-type-decl nil function_image nil) (boolean nonempty-type-decl nil booleans nil)) 110 90 nil nil)) (inverse_image_complement 0 (inverse_image_complement-1 nil 3237052399 3245525122 ("" (grind) (("" (apply-extensionality) nil nil)) nil) proved ((R formal-type-decl nil function_image nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (inverse_image const-decl "set[D]" function_image nil) (complement const-decl "set" sets nil) (member const-decl "bool" sets nil) (D formal-type-decl nil function_image nil) (boolean nonempty-type-decl nil booleans nil)) 109 90 nil nil)))(function_props (composition_injective 0 (composition_injective-1 nil 3237052399 3245525123 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil function_props nil) (T2 formal-type-decl nil function_props nil) (T3 formal-type-decl nil function_props nil) (O const-decl "T3" function_props nil) (injective? const-decl "bool" functions nil)) 117 110 nil nil)) (composition_surjective 0 (composition_surjective-1 nil 3237052399 3245525123 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil function_props nil) (T2 formal-type-decl nil function_props nil) (T3 formal-type-decl nil function_props nil) (O const-decl "T3" function_props nil) (surjective? const-decl "bool" functions nil)) 164 110 nil nil)) (composition_bijective 0 (composition_bijective-1 nil 3237052399 3245525123 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil function_props nil) (T2 formal-type-decl nil function_props nil) (T3 formal-type-decl nil function_props nil) (O const-decl "T3" function_props nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil)) 513 460 nil nil)) (image_composition 0 (image_composition-1 nil 3237052399 3245525124 ("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil) proved ((T3 formal-type-decl nil function_props nil) (boolean nonempty-type-decl nil booleans nil) (O const-decl "T3" function_props nil) (T1 formal-type-decl nil function_props nil) (image const-decl "set[R]" function_image nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (T2 formal-type-decl nil function_props nil) (x!2 skolem-const-decl "(X!1)" function_props nil) (f1!1 skolem-const-decl "[T1 -> T2]" function_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (X!1 skolem-const-decl "set[T1]" function_props nil) (NOT const-decl "[bool -> bool]" booleans nil)) 299 270 nil nil)) (preserves_composition 0 (preserves_composition-1 nil 3237052399 3245525124 ("" (grind) nil nil) proved ((T1 formal-type-decl nil function_props nil) (T2 formal-type-decl nil function_props nil) (preserves const-decl "bool" functions nil) (O const-decl "T3" function_props nil)) 140 130 nil nil)) (inverts_composition1 0 (inverts_composition1-1 nil 3237052399 3245525124 ("" (grind) nil nil) proved ((T1 formal-type-decl nil function_props nil) (T2 formal-type-decl nil function_props nil) (preserves const-decl "bool" functions nil) (inverts const-decl "bool" functions nil) (O const-decl "T3" function_props nil)) 183 120 nil nil)) (inverts_composition2 0 (inverts_composition2-1 nil 3237052399 3245525124 ("" (grind) nil nil) proved ((T1 formal-type-decl nil function_props nil) (T2 formal-type-decl nil function_props nil) (inverts const-decl "bool" functions nil) (preserves const-decl "bool" functions nil) (O const-decl "T3" function_props nil)) 141 130 nil nil)))(function_props_alt (composition_preserves 0 (composition_preserves-1 nil 3237052399 3245525124 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil function_props_alt nil) (T2 formal-type-decl nil function_props_alt nil) (PRED type-eq-decl nil defined_types nil) (R1 formal-const-decl "PRED[[T1, T1]]" function_props_alt nil) (R2 formal-const-decl "PRED[[T2, T2]]" function_props_alt nil) (T3 formal-type-decl nil function_props_alt nil) (R3 formal-const-decl "PRED[[T3, T3]]" function_props_alt nil) (preserves const-decl "[[D -> R] -> bool]" functions_alt nil) (O const-decl "T3" function_props nil) (preserves const-decl "bool" functions nil) (preserves const-decl "bool" functions nil)) 178 170 nil nil)) (composition_inverts1 0 (composition_inverts1-1 nil 3237052399 3245525125 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil function_props_alt nil) (T2 formal-type-decl nil function_props_alt nil) (PRED type-eq-decl nil defined_types nil) (R1 formal-const-decl "PRED[[T1, T1]]" function_props_alt nil) (R2 formal-const-decl "PRED[[T2, T2]]" function_props_alt nil) (T3 formal-type-decl nil function_props_alt nil) (R3 formal-const-decl "PRED[[T3, T3]]" function_props_alt nil) (preserves const-decl "[[D -> R] -> bool]" functions_alt nil) (preserves const-decl "bool" functions nil) (preserves const-decl "bool" functions nil) (inverts const-decl "[[D -> R] -> bool]" functions_alt nil) (O const-decl "T3" function_props nil) (inverts const-decl "bool" functions nil) (inverts const-decl "bool" functions nil)) 191 170 nil nil)) (composition_inverts2 0 (composition_inverts2-1 nil 3237052399 3245525125 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil function_props_alt nil) (T2 formal-type-decl nil function_props_alt nil) (PRED type-eq-decl nil defined_types nil) (R1 formal-const-decl "PRED[[T1, T1]]" function_props_alt nil) (R2 formal-const-decl "PRED[[T2, T2]]" function_props_alt nil) (preserves const-decl "[[D -> R] -> bool]" functions_alt nil) (T3 formal-type-decl nil function_props_alt nil) (R3 formal-const-decl "PRED[[T3, T3]]" function_props_alt nil) (preserves const-decl "bool" functions nil) (preserves const-decl "bool" functions nil) (inverts const-decl "[[D -> R] -> bool]" functions_alt nil) (O const-decl "T3" function_props nil) (inverts const-decl "bool" functions nil) (inverts const-decl "bool" functions nil)) 181 160 nil nil)))(function_props2 (assoc 0 (assoc-1 nil 3237052399 3245525125 ("" (skolem 1 ("f!1" "g!1" "h!1")) (("" (expand "o") (("" (propax) nil nil)) nil)) nil) proved ((O const-decl "T3" function_props nil)) 31 20 nil nil)))(relation_defs)(relation_props (total_composition 0 (total_composition-1 nil 3237052399 3245525125 ("" (grind) nil nil) proved ((T2 formal-type-decl nil relation_props nil) (T3 formal-type-decl nil relation_props nil) (T1 formal-type-decl nil relation_props nil) (total? const-decl "bool" relation_defs nil) (O const-decl "bool" relation_props nil)) 129 120 nil nil)) (onto_composition 0 (onto_composition-1 nil 3237052399 3245525125 ("" (grind) nil nil) proved ((T2 formal-type-decl nil relation_props nil) (T1 formal-type-decl nil relation_props nil) (T3 formal-type-decl nil relation_props nil) (onto? const-decl "bool" relation_defs nil) (O const-decl "bool" relation_props nil)) 165 120 nil nil)) (composition_total 0 (composition_total-1 nil 3237052399 3245525125 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil relation_props nil) (T2 formal-type-decl nil relation_props nil) (pred type-eq-decl nil defined_types nil) (T3 formal-type-decl nil relation_props nil) (O const-decl "bool" relation_props nil) (total? const-decl "bool" relation_defs nil)) 116 110 nil nil)) (composition_onto 0 (composition_onto-1 nil 3237052399 3245525126 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil relation_props nil) (T2 formal-type-decl nil relation_props nil) (pred type-eq-decl nil defined_types nil) (T3 formal-type-decl nil relation_props nil) (O const-decl "bool" relation_props nil) (onto? const-decl "bool" relation_defs nil)) 143 120 nil nil)))(relation_props2 (assoc 0 (assoc-1 nil 3237052399 3245525126 ("" (skosimp) (("" (apply-extensionality) (("" (hide 2) (("" (expand "o") (("" (iff) (("" (prop) (("1" (skosimp) (("1" (skosimp) (("1" (inst?) (("1" (assert) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (assert) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T1 formal-type-decl nil relation_props2 nil) (T4 formal-type-decl nil relation_props2 nil) (boolean nonempty-type-decl nil booleans nil) (T2 formal-type-decl nil relation_props2 nil) (O const-decl "bool" relation_props nil) (pred type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (T3 formal-type-decl nil relation_props2 nil)) 155 150 nil nil)))(indexed_sets (IUnion_Union 0 (IUnion_Union-1 nil 3237054186 3245525126 ("" (grind) (("" (apply-extensionality :hide? t) (("" (iff) (("" (prop) (("1" (skolem-typepred) (("1" (inst 1 "A!1(i!1)") (("1" (inst 1 "i!1") nil nil)) nil)) nil) ("2" (skolem-typepred) (("2" (grind :if-match nil) (("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (fullset const-decl "set" sets nil) (image const-decl "set[R]" function_image nil) (Union const-decl "set" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (IUnion const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (A!1 skolem-const-decl "[index -> set[T]]" indexed_sets nil) (i!1 skolem-const-decl "index" indexed_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (image const-decl "set[R]" function_image nil)) 185 160 t shostak)) (IIntersection_Intersection 0 (IIntersection_Intersection-1 nil 3237054338 3245525126 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) (("" (iff) (("" (prop) (("1" (skolem-typepred) (("1" (grind :if-match nil) (("1" (inst -3 "x!2") nil nil)) nil)) nil) ("2" (skolem-typepred) (("2" (inst -1 "A!1(i!1)") (("2" (inst 1 "i!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (fullset const-decl "set" sets nil) (image const-decl "set[R]" function_image nil) (Intersection const-decl "set" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (IIntersection const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (A!1 skolem-const-decl "[index -> set[T]]" indexed_sets nil) (i!1 skolem-const-decl "index" indexed_sets nil) (image const-decl "set[R]" function_image nil)) 202 170 t shostak)) (IUnion_union 0 (IUnion_union-1 nil 3237054431 3245525126 ("" (skolem-typepred) (("" (apply-extensionality :hide? t) (("" (iff) (("" (grind :if-match nil) (("1" (inst 1 "i!1") nil nil) ("2" (inst 2 "i!1") nil nil) ("3" (inst 1 "i!1") (("3" (assert) nil nil)) nil) ("4" (inst 1 "i!1") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil) (IUnion const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (member const-decl "bool" sets nil)) 278 250 t shostak)) (IIntersection_intersection 0 (IIntersection_intersection-1 nil 3237054514 3245525127 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) (("" (grind :if-match nil) (("1" (inst -1 "i!1") (("1" (assert) nil nil)) nil) ("2" (inst -1 "i!1") (("2" (assert) nil nil)) nil) ("3" (inst -2 "i!1") nil nil) ("4" (inst -1 "i!1") nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (intersection const-decl "set" sets nil) (IIntersection const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (member const-decl "bool" sets nil)) 290 280 t shostak)) (IUnion_intersection 0 (IUnion_intersection-1 nil 3237054595 3245525127 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) (("" (grind :if-match nil) (("" (inst 1 "i!1") nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (intersection const-decl "set" sets nil) (IUnion const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (member const-decl "bool" sets nil)) 154 150 t shostak)) (IIntersection_union 0 (IIntersection_union-1 nil 3237054623 3245525127 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) (("" (grind :if-match nil) (("" (inst?) nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil) (IIntersection const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (member const-decl "bool" sets nil)) 178 160 t shostak)))(operator_defs)(numbers)(number_fields (nonzero_number_TCC1 0 (nonzero_number_TCC1-1 nil 3242535747 3245525127 ("" (assert) nil nil) proved nil 6 10 t shostak)) (commutative_add 0 (commutative_add-1 nil 3242535784 3245525127 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 11 10 t shostak)) (associative_add 0 (associative_add-1 nil 3242535799 3245525127 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 13 20 t shostak)) (identity_add 0 (identity_add-1 nil 3242535806 3245525127 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 10 10 t shostak)) (inverse_add 0 (inverse_add-1 nil 3242535812 3242537042 ("" (skosimp) (("" (assert) (("" (assert) (("" (postpone) nil nil)) nil)) nil)) nil) unfinished nil 58491 160 t shostak)) (minus_add 0 (minus_add-1 nil 3242537058 3242537087 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unfinished nil 28913 480 t shostak)) (commutative_mult 0 (commutative_mult-1 nil 3242536887 3242537102 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unfinished nil 9430 480 t shostak)) (associative_mult 0 (associative_mult-1 nil 3242536707 3242537132 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unfinished nil 9568 460 t shostak)) (identity_mult 0 (identity_mult-1 nil 3242537143 3242537151 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unfinished nil 8605 500 t shostak)) (inverse_mult 0 (inverse_mult-1 nil 3242537160 3242537168 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unfinished nil 8174 470 t shostak)) (div_def 0 (div_def-1 nil 3242537180 3242537188 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unfinished nil 8695 480 t shostak)) (distributive 0 (distributive-1 nil 3242537198 3245525127 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 49 20 t shostak)))(reals (nonzero_real_TCC1 0 (nonzero_real_TCC1-1 nil 3237052399 3245525127 ("" (grind) nil nil) proved ((/= const-decl "boolean" notequal nil)) 15 10 nil nil)) (real_plus_real_is_real 0 (real_plus_real_is_real-1 nil 3242538128 3245525127 ("" (lemma "closed_plus") (("" (propax) nil nil)) nil) proved ((closed_plus formula-decl nil reals nil)) 6 10 t shostak)) (real_minus_real_is_real 0 (real_minus_real_is_real-1 nil 3242538153 3245525127 ("" (lemma "closed_minus") (("" (propax) nil nil)) nil) proved ((closed_minus formula-decl nil reals nil)) 16 20 t shostak)) (real_times_real_is_real 0 (real_times_real_is_real-1 nil 3242538163 3245525127 ("" (lemma "closed_times") (("" (propax) nil nil)) nil) proved ((closed_times formula-decl nil reals nil)) 6 10 t shostak)) (real_div_nzreal_is_real 0 (real_div_nzreal_is_real-1 nil 3242538175 3245525127 ("" (lemma "closed_divides") (("" (propax) nil nil)) nil) proved ((closed_divides formula-decl nil reals nil)) 6 10 t shostak)) (minus_real_is_real 0 (minus_real_is_real-1 nil 3242538196 3245525127 ("" (lemma "closed_neg") (("" (propax) nil nil)) nil) proved ((closed_neg formula-decl nil reals nil)) 7 10 t shostak)) (reals_totally_ordered 0 (reals_totally_ordered-1 nil 3237052399 3245525128 ("" (grind) nil nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (strict_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (strict_total_order? const-decl "bool" orders nil)) 138 130 nil nil)))(real_axioms (posreal_add_closed 0 (posreal_add_closed-1 nil 3237052399 3245525128 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 63 60 nil nil)) (posreal_neg 0 (posreal_neg-1 nil 3237052399 3245525128 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 40 40 nil nil)) (trichotomy 0 (trichotomy-1 nil 3237052399 3245525128 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 38 40 nil nil)))(bounded_real_defs (real_lower_complete 0 (real_lower_complete-1 nil 3237052399 3245525128 ("" (lemma "real_complete") (("" (skosimp) (("" (inst -1 "{x: real | S!1(-x)}") (("1" (skosimp) (("1" (split) (("1" (skosimp) (("1" (expand "least_upper_bound?") (("1" (inst 1 "-y!2") (("1" (expand "greatest_lower_bound?") (("1" (hide -2) (("1" (prop) (("1" (expand "upper_bound?") (("1" (expand "lower_bound?") (("1" (skosimp) (("1" (inst -1 "-s!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -3 "-y!3") (("2" (hide -2) (("2" (expand "lower_bound?") (("2" (expand "upper_bound?") (("2" (split) (("1" (assert) nil nil) ("2" (skosimp) (("2" (inst -1 "-s!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (inst 1 "-y!1") (("2" (expand "upper_bound?") (("2" (skosimp) (("2" (expand "lower_bound?") (("2" (inst -1 "-s!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "S!1") (("2" (hide -2 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (skosimp) (("2" (expand "member") (("2" (inst -2 "-x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (upper_bound? const-decl "bool" bounded_real_defs nil) (lower_bound? const-decl "bool" bounded_real_defs nil) (greatest_lower_bound? const-decl "bool" bounded_real_defs nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) (S!1 skolem-const-decl "(nonempty?[real])" bounded_real_defs nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (real_complete formula-decl nil bounded_real_defs nil)) 192 190 nil nil)) (lub_exists 0 (lub_exists-1 nil 3237052399 3245525128 ("" (skolem-typepred) (("" (use "real_complete") (("" (assert) (("" (replace 1) (("" (assert) (("" (expand "bounded_above?") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real_complete formula-decl nil bounded_real_defs nil) (bounded_above? const-decl "bool" bounded_real_defs nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 34 30 nil nil)) (lub_TCC1 0 (lub_TCC1-1 nil 3237052399 3245525128 ("" (use "real_complete") (("" (inst 1 "LAMBDA (S:(bounded_above?)): epsilon! (x:real): least_upper_bound?(x, S)") (("" (skosimp) (("" (use "epsilon_ax[real]") (("" (assert) (("" (inst? -1) (("" (typepred "S!1") (("" (split) (("1" (propax) nil nil) ("2" (expand "bounded_above?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) (bounded_above? const-decl "bool" bounded_real_defs nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (epsilon_ax formula-decl nil epsilons nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_complete formula-decl nil bounded_real_defs nil)) 90 80 nil nil)) (lub_lem 0 (lub_lem-1 nil 3237052399 3245525128 ("" (skosimp) (("" (typepred "lub(SA!1)") (("" (assert) (("" (prop) (("1" (assert) nil nil) ("2" (grind :if-match nil) (("2" (inst -2 "lub(SA!1)") (("2" (inst -4 "x!1") (("2" (replace -1) (("2" (replace -3) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs nil) (bounded_above? const-decl "bool" bounded_real_defs nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (upper_bound? const-decl "bool" bounded_real_defs nil)) 191 190 nil nil)) (glb_exists 0 (glb_exists-1 nil 3237052399 3245525128 ("" (skosimp) (("" (use "real_lower_complete") (("" (assert) (("" (split) (("1" (propax) nil nil) ("2" (typepred "SB!1") (("2" (expand "bounded_below?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real_lower_complete formula-decl nil bounded_real_defs nil) (bounded_below? const-decl "bool" bounded_real_defs nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil)) 67 30 nil nil)) (glb_TCC1 0 (glb_TCC1-1 nil 3237052399 3245525128 ("" (inst 1 "LAMBDA (S:(bounded_below?)): epsilon! (x:real): greatest_lower_bound?(x, S)") (("" (skolem-typepred) (("" (use "epsilon_ax[real]") (("" (assert) (("" (expand "bounded_below?") (("" (use "real_lower_complete") (("" (assert) (("" (replace -3) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (real_lower_complete formula-decl nil bounded_real_defs nil) (epsilon_ax formula-decl nil epsilons nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (greatest_lower_bound? const-decl "bool" bounded_real_defs nil) (bounded_below? const-decl "bool" bounded_real_defs nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 83 80 nil nil)) (glb_lem 0 (glb_lem-1 nil 3237052399 3245525129 ("" (skosimp) (("" (typepred "glb(SB!1)") (("" (prop) (("1" (assert) nil nil) ("2" (grind :if-match nil) (("2" (inst -2 "glb(SB!1)") (("2" (inst -4 "x!1") (("2" (prop) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((glb const-decl "{x | greatest_lower_bound?(x, SB)}" bounded_real_defs nil) (bounded_below? const-decl "bool" bounded_real_defs nil) (greatest_lower_bound? const-decl "bool" bounded_real_defs nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (lower_bound? const-decl "bool" bounded_real_defs nil)) 185 160 nil nil)))(bounded_real_defs_alt (S_TCC1 0 (S_TCC1-1 nil 3237052399 3245525129 ("" (inst 1 "singleton(0)") (("" (expand "nonempty?") (("" (expand "empty?") (("" (inst -1 "0") (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 50 40 nil nil)) (lub_is_upper_bound 0 (lub_is_upper_bound-1 nil 3237052399 3245525129 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (least_upper_bound? const-decl "[real -> bool]" bounded_real_defs_alt nil) (S formal-const-decl "(nonempty?[real])" bounded_real_defs_alt nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (upper_bound? const-decl "[real -> bool]" bounded_real_defs_alt nil) (upper_bound? const-decl "bool" bounded_real_defs nil) (upper_bound? const-decl "bool" bounded_real_defs nil)) 71 70 nil nil)) (glb_is_lower_bound 0 (glb_is_lower_bound-1 nil 3237052399 3245525129 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (greatest_lower_bound? const-decl "[real -> bool]" bounded_real_defs_alt nil) (S formal-const-decl "(nonempty?[real])" bounded_real_defs_alt nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (greatest_lower_bound? const-decl "bool" bounded_real_defs nil) (greatest_lower_bound? const-decl "bool" bounded_real_defs nil) (lower_bound? const-decl "[real -> bool]" bounded_real_defs_alt nil) (lower_bound? const-decl "bool" bounded_real_defs nil) (lower_bound? const-decl "bool" bounded_real_defs nil)) 81 80 nil nil)))(real_types (posreal_is_nzreal 0 (posreal_is_nzreal-1 nil 3237052399 3245525129 ("" (subtype-tcc) nil nil) proved nil 13 20 nil nil)) (negreal_is_nzreal 0 (negreal_is_nzreal-1 nil 3237052399 3245525129 ("" (subtype-tcc) nil nil) proved nil 15 20 nil nil)) (nonneg_real_add_closed 0 (nonneg_real_add_closed-1 nil 3237052399 3245525129 ("" (grind) nil nil) proved nil 18 20 nil nil)) (nonpos_real_add_closed 0 (nonpos_real_add_closed-1 nil 3237052399 3245525129 ("" (grind) nil nil) proved nil 29 20 nil nil)) (negreal_add_closed 0 (negreal_add_closed-1 nil 3237052399 3245525129 ("" (grind) nil nil) proved nil 20 20 nil nil)) (nonneg_real_mult_closed 0 (nonneg_real_mult_closed-1 nil 3237052399 3245525129 ("" (grind) (("" (case "nnx!1 = 0") (("1" (assert) nil nil) ("2" (case "nny!1 = 0") (("1" (assert) nil nil) ("2" (lemma "posreal_mult_closed") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (posreal_mult_closed formula-decl nil real_axioms nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil)) 104 100 nil nil)) (nzreal_times_nzreal_is_nzreal 0 (nzreal_times_nzreal_is_nzreal-1 nil 3237052399 3245525129 ("" (lemma "posreal_mult_closed") (("" (skosimp) (("" (case "nzx!1 > 0") (("1" (case "nzy!1 > 0") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (inst -2 "nzx!1" "-nzy!1") (("2" (assert) nil nil)) nil)) nil) ("2" (case "nzy!1 > 0") (("1" (inst -2 "-nzx!1" "nzy!1") (("1" (assert) nil nil)) nil) ("2" (inst -1 "-nzx!1" "-nzy!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil) (posreal_mult_closed formula-decl nil real_axioms nil)) 76 80 nil nil)) (nzreal_div_nzreal_is_nzreal 0 (nzreal_div_nzreal_is_nzreal-1 nil 3237052399 3245525129 ("" (lemma "nzreal_times_nzreal_is_nzreal") (("" (skosimp) (("" (inst -1 "nzx!1" "1/nzy!1") (("1" (assert) nil nil) ("2" (assert) (("2" (lemma "inverse_mult") (("2" (inst?) (("2" (prop) (("2" (replace -2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nzreal_times_nzreal_is_nzreal subtype-tcc nil real_types nil)) 43 40 nil nil)) (minus_nzreal_is_nzreal 0 (minus_nzreal_is_nzreal-1 nil 3237052399 3245525129 ("" (subtype-tcc) nil nil) proved nil 17 20 nil nil)) (nnreal_plus_nnreal_is_nnreal 0 (nnreal_plus_nnreal_is_nnreal-1 nil 3237052399 3245525129 ("" (subtype-tcc) nil nil) proved nil 20 20 nil nil)) (nnreal_times_nnreal_is_nnreal 0 (nnreal_times_nnreal_is_nnreal-1 nil 3237052399 3245525130 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (case "nnx!1 = 0") (("1" (assert) nil nil) ("2" (case "nny!1 = 0") (("1" (assert) nil nil) ("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil)) 59 60 nil nil)) (nnreal_div_posreal_is_nnreal 0 (nnreal_div_posreal_is_nnreal-1 nil 3237052399 3245525130 ("" (grind) (("" (lemma "posreal_mult_closed") (("" (case "nnx!1 = 0") (("1" (assert) nil nil) ("2" (inst -1 "nnx!1" "1/py!1") (("2" (assert) (("2" (lemma "inverse_mult") (("2" (inst -1 "py!1") (("2" (assert) (("2" (name-replace "a" "1/py!1") (("2" (assert) (("2" (lemma "posreal_mult_closed") (("2" (case-replace "a = 0") (("1" (assert) nil nil) ("2" (inst -1 "py!1" "-a") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (numfield nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (inverse_mult formula-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 260 210 nil nil)) (nnreal_div_negreal_is_npreal 0 (nnreal_div_negreal_is_npreal-1 nil 3237052399 3245525130 ("" (skosimp) (("" (lemma "nnreal_div_posreal_is_nnreal") (("" (inst -1 "nnx!1" "-ny!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((nnreal_div_posreal_is_nnreal subtype-tcc nil real_types nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 57 60 nil nil)) (npreal_plus_npreal_is_npreal 0 (npreal_plus_npreal_is_npreal-1 nil 3237052399 3245525130 ("" (subtype-tcc) nil nil) proved nil 26 30 nil nil)) (npreal_times_npreal_is_nnreal 0 (npreal_times_npreal_is_nnreal-1 nil 3237052399 3245525130 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (inst -1 "-npx!1" "-npy!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 42 40 nil nil)) (npreal_div_posreal_is_npreal 0 (npreal_div_posreal_is_npreal-1 nil 3237052399 3245525130 ("" (skosimp) (("" (lemma "nnreal_div_posreal_is_nnreal") (("" (inst -1 "-npx!1" "py!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((nnreal_div_posreal_is_nnreal subtype-tcc nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 49 50 nil nil)) (npreal_div_negreal_is_nnreal 0 (npreal_div_negreal_is_nnreal-1 nil 3237052399 3245525130 ("" (skosimp) (("" (lemma "npreal_div_posreal_is_npreal") (("" (inst -1 "npx!1" "-ny!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((npreal_div_posreal_is_npreal subtype-tcc nil real_types nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 73 60 nil nil)) (posreal_plus_nnreal_is_posreal 0 (posreal_plus_nnreal_is_posreal-1 nil 3237052399 3245525130 ("" (subtype-tcc) nil nil) proved nil 30 30 nil nil)) (nnreal_plus_posreal_is_posreal 0 (nnreal_plus_posreal_is_posreal-1 nil 3237052399 3245525130 ("" (subtype-tcc) nil nil) proved nil 33 40 nil nil)) (posreal_times_posreal_is_posreal 0 (posreal_times_posreal_is_posreal-1 nil 3237052399 3245525130 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 54 60 nil nil)) (posreal_div_posreal_is_posreal 0 (posreal_div_posreal_is_posreal-1 nil 3237052399 3245525130 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (inst -1 "px!1" "1/py!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 64 60 nil nil)) (negreal_plus_negreal_is_negreal 0 (negreal_plus_negreal_is_negreal-1 nil 3237052399 3245525130 ("" (subtype-tcc) nil nil) proved nil 37 40 nil nil)) (negreal_times_negreal_is_posreal 0 (negreal_times_negreal_is_posreal-1 nil 3237052399 3245525131 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (inst -1 "-nx!1" "-ny!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 57 60 nil nil)) (negreal_div_negreal_is_posreal 0 (negreal_div_negreal_is_posreal-1 nil 3237052399 3245525131 ("" (lemma "posreal_div_posreal_is_posreal") (("" (skosimp) (("" (inst -1 "-nx!1" "-ny!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (posreal_div_posreal_is_posreal subtype-tcc nil real_types nil)) 82 70 nil nil)))(rationals (nonzero_rational_TCC1 0 (nonzero_rational_TCC1-1 nil 3237052399 3245525131 ("" (tcc :defs !) nil nil) proved ((/= const-decl "boolean" notequal nil)) 15 20 nil nil)) (rat_plus_rat_is_rat 0 (rat_plus_rat_is_rat-1 nil 3237052399 3245525131 ("" (lemma "closed_plus") (("" (propax) nil nil)) nil) proved ((closed_plus formula-decl nil rationals nil)) 6 0 nil nil)) (rat_minus_rat_is_rat 0 (rat_minus_rat_is_rat-1 nil 3237052399 3245525131 ("" (lemma "closed_minus") (("" (propax) nil nil)) nil) proved ((closed_minus formula-decl nil rationals nil)) 12 10 nil nil)) (rat_times_rat_is_rat 0 (rat_times_rat_is_rat-1 nil 3237052399 3245525131 ("" (lemma "closed_times") (("" (propax) nil nil)) nil) proved ((closed_times formula-decl nil rationals nil)) 12 10 nil nil)) (rat_div_nzrat_is_rat 0 (rat_div_nzrat_is_rat-1 nil 3237052399 3245525131 ("" (lemma "closed_divides") (("" (propax) nil nil)) nil) proved ((closed_divides formula-decl nil rationals nil)) 14 10 nil nil)) (minus_rat_is_rat 0 (minus_rat_is_rat-1 nil 3237052399 3245525131 ("" (lemma "closed_neg") (("" (propax) nil nil)) nil) proved ((closed_neg formula-decl nil rationals nil)) 14 10 nil nil)) (posrat_is_nzrat 0 (posrat_is_nzrat-1 nil 3237052399 3245525131 ("" (subtype-tcc) nil nil) proved nil 23 30 nil nil)) (negrat_is_nzrat 0 (negrat_is_nzrat-1 nil 3237052399 3245525131 ("" (subtype-tcc) nil nil) proved nil 25 30 nil nil)) (nzrat_times_nzrat_is_nzrat 0 (nzrat_times_nzrat_is_nzrat-1 nil 3237052399 3245525131 ("" (subtype-tcc) nil nil) proved nil 29 30 nil nil)) (nzrat_div_nzrat_is_nzrat 0 (nzrat_div_nzrat_is_nzrat-1 nil 3237052399 3245525131 ("" (subtype-tcc) nil nil) proved nil 35 30 nil nil)) (minus_nzrat_is_nzrat 0 (minus_nzrat_is_nzrat-1 nil 3237052399 3245525131 ("" (subtype-tcc) nil nil) proved nil 35 30 nil nil)) (nnrat_plus_nnrat_is_nnrat 0 (nnrat_plus_nnrat_is_nnrat-1 nil 3237052399 3245525131 ("" (subtype-tcc) nil nil) proved nil 39 40 nil nil)) (nnrat_times_nnrat_is_nnrat 0 (nnrat_times_nnrat_is_nnrat-1 nil 3237052399 3245525131 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil)) 107 110 nil nil)) (nnrat_div_posrat_is_nnrat 0 (nnrat_div_posrat_is_nnrat-1 nil 3237052399 3245525131 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil)) 127 130 nil nil)) (nnrrat_div_negrat_is_nprat 0 (nnrrat_div_negrat_is_nprat-1 nil 3237052399 3245525132 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (<= const-decl "bool" reals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil) (< const-decl "bool" reals nil) (negrat nonempty-type-eq-decl nil rationals nil)) 187 140 nil nil)) (nprat_plus_nprat_is_nprat 0 (nprat_plus_nprat_is_nprat-1 nil 3237052399 3245525132 ("" (subtype-tcc) nil nil) proved nil 68 70 nil nil)) (nprat_times_nprat_is_nnrat 0 (nprat_times_nprat_is_nnrat-1 nil 3237052399 3245525132 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil)) 124 120 nil nil)) (nprat_div_posrat_is_nprat 0 (nprat_div_posrat_is_nprat-1 nil 3237052399 3245525132 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil) (>= const-decl "bool" reals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil)) 154 150 nil nil)) (nprat_div_negrat_is_nnrat 0 (nprat_div_negrat_is_nnrat-1 nil 3237052399 3245525132 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil) (< const-decl "bool" reals nil) (negrat nonempty-type-eq-decl nil rationals nil)) 168 160 nil nil)) (posrat_plus_nnrat_is_posrat 0 (posrat_plus_nnrat_is_posrat-1 nil 3237052399 3245525132 ("" (subtype-tcc) nil nil) proved nil 85 80 nil nil)) (nnrat_plus_posrat_is_posrat 0 (nnrat_plus_posrat_is_posrat-1 nil 3237052399 3245525132 ("" (subtype-tcc) nil nil) proved nil 94 90 nil nil)) (posrat_times_posrat_is_posrat 0 (posrat_times_posrat_is_posrat-1 nil 3237052399 3245525133 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil)) 148 150 nil nil)) (posrat_div_posrat_is_posrat 0 (posrat_div_posrat_is_posrat-1 nil 3237052399 3245525133 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil)) 177 170 nil nil)) (negrat_plus_negrat_is_negrat 0 (negrat_plus_negrat_is_negrat-1 nil 3237052399 3245525133 ("" (subtype-tcc) nil nil) proved nil 95 100 nil nil)) (negrat_times_negrat_is_posrat 0 (negrat_times_negrat_is_posrat-1 nil 3237052399 3245525133 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil) (< const-decl "bool" reals nil) (negrat nonempty-type-eq-decl nil rationals nil)) 177 180 nil nil)) (negrat_div_negrat_is_posrat 0 (negrat_div_negrat_is_posrat-1 nil 3237052399 3245525133 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil) (< const-decl "bool" reals nil) (negrat nonempty-type-eq-decl nil rationals nil)) 192 180 nil nil)))(integers (nonzero_integer_TCC1 0 (nonzero_integer_TCC1-1 nil 3237052399 3245525133 ("" (tcc :defs !) nil nil) proved ((/= const-decl "boolean" notequal nil)) 16 10 nil nil)) (upfrom_TCC1 0 (upfrom_TCC1-1 nil 3237052399 3245525133 ("" (subtype-tcc) nil nil) proved nil 11 10 nil nil)) (above_TCC1 0 (above_TCC1-1 nil 3237052399 3245525133 ("" (lemma "closed_plus") (("" (skosimp) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil) proved ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (closed_plus formula-decl nil integers nil)) 42 40 nil nil)) (int_plus_int_is_int 0 (int_plus_int_is_int-1 nil 3237052399 3245525133 ("" (lemma "closed_plus") (("" (propax) nil nil)) nil) proved ((closed_plus formula-decl nil integers nil)) 6 10 nil nil)) (int_minus_int_is_int 0 (int_minus_int_is_int-1 nil 3237052399 3245525133 ("" (lemma "closed_minus") (("" (propax) nil nil)) nil) proved ((closed_minus formula-decl nil integers nil)) 30 30 nil nil)) (int_times_int_is_int 0 (int_times_int_is_int-1 nil 3237052399 3245525134 ("" (lemma "closed_times") (("" (propax) nil nil)) nil) proved ((closed_times formula-decl nil integers nil)) 24 20 nil nil)) (minus_int_is_int 0 (minus_int_is_int-1 nil 3237052399 3245525134 ("" (lemma "closed_neg") (("" (propax) nil nil)) nil) proved ((closed_neg formula-decl nil integers nil)) 28 20 nil nil)) (minus_nzint_is_nzint 0 (minus_nzint_is_nzint-1 nil 3237052399 3245525134 ("" (subtype-tcc) nil nil) proved nil 44 50 nil nil)) (posint_is_nzint 0 (posint_is_nzint-1 nil 3237052399 3245525134 ("" (subtype-tcc) nil nil) proved nil 43 40 nil nil)) (negint_is_nzint 0 (negint_is_nzint-1 nil 3237052399 3245525134 ("" (subtype-tcc) nil nil) proved nil 42 40 nil nil)) (nzint_times_nzint_is_nzint 0 (nzint_times_nzint_is_nzint-1 nil 3237052399 3245525134 ("" (subtype-tcc) nil nil) proved nil 46 50 nil nil)) (nnint_plus_nnint_is_nnint 0 (nnint_plus_nnint_is_nnint-1 nil 3237052399 3245525134 ("" (subtype-tcc) nil nil) proved nil 81 70 nil nil)) (nnint_times_nnint_is_nnint 0 (nnint_times_nnint_is_nnint-1 nil 3237052399 3245525134 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil)) 208 160 nil nil)) (npint_plus_npint_is_npint 0 (npint_plus_npint_is_npint-1 nil 3237052399 3245525134 ("" (subtype-tcc) nil nil) proved nil 108 80 nil nil)) (npint_times_npint_is_nnint 0 (npint_times_npint_is_nnint-1 nil 3237052399 3245525134 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonpos_int nonempty-type-eq-decl nil integers nil)) 187 160 nil nil)) (posint_plus_nnint_is_posint 0 (posint_plus_nnint_is_posint-1 nil 3237052399 3245525135 ("" (subtype-tcc) nil nil) proved nil 123 110 nil nil)) (nnint_plus_posint_is_posint 0 (nnint_plus_posint_is_posint-1 nil 3237052399 3245525135 ("" (subtype-tcc) nil nil) proved nil 151 140 nil nil)) (posint_times_posint_is_posint 0 (posint_times_posint_is_posint-1 nil 3237052399 3245525135 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posint nonempty-type-eq-decl nil integers nil)) 203 190 nil nil)) (negint_plus_negint_is_negint 0 (negint_plus_negint_is_negint-1 nil 3237052399 3245525135 ("" (subtype-tcc) nil nil) proved nil 164 140 nil nil)) (negint_times_negint_is_posint 0 (negint_times_negint_is_posint-1 nil 3237052399 3245525135 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonpos_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (negint nonempty-type-eq-decl nil integers nil)) 240 220 nil nil)) (even_int_TCC1 0 (even_int_TCC1-1 nil 3237052399 3245525136 ("" (expand "even?") (("" (inst 1 "0") (("" (assert) nil nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil)) 190 180 nil nil)) (odd_int_TCC1 0 (odd_int_TCC1-1 nil 3237052399 3245525136 ("" (expand "odd?") (("" (inst 1 "0") (("" (assert) nil nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil)) 217 200 nil nil)) (odd_is_nzint 0 (odd_is_nzint-1 nil 3237052399 3245525136 ("" (subtype-tcc) nil nil) proved ((odd? const-decl "bool" integers nil) (/= const-decl "boolean" notequal nil)) 199 190 nil nil)) (even_plus_even_is_even 0 (even_plus_even_is_even-1 nil 3237052399 3245525137 ("" (grind :if-match nil) (("" (inst 1 "j!1 + j!2") (("" (assert) nil nil)) nil)) nil) proved ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even_int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil)) 434 400 nil nil)) (even_minus_even_is_even 0 (even_minus_even_is_even-1 nil 3237052399 3245525137 ("" (grind :if-match nil) (("" (inst 1 "j!1 - j!2") (("" (assert) nil nil)) nil)) nil) proved ((- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even_int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil)) 371 340 nil nil)) (odd_plus_odd_is_even 0 (odd_plus_odd_is_even-1 nil 3237052399 3245525137 ("" (grind :if-match nil) (("" (inst 1 "1 + j!1 + j!2") (("" (assert) nil nil)) nil)) nil) proved ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil)) 512 470 nil nil)) (odd_minus_odd_is_even 0 (odd_minus_odd_is_even-1 nil 3237052399 3245525138 ("" (grind :if-match nil) (("" (inst 1 "j!1 - j!2") (("" (assert) nil nil)) nil)) nil) proved ((- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil)) 414 390 nil nil)) (odd_plus_even_is_odd 0 (odd_plus_even_is_odd-1 nil 3237052399 3245525138 ("" (grind :if-match nil) (("" (inst 1 "j!1 + j!2") (("" (assert) nil nil)) nil)) nil) proved ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil) (even_int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil)) 469 460 nil nil)) (odd_minus_even_is_odd 0 (odd_minus_even_is_odd-1 nil 3237052399 3245525139 ("" (grind :if-match nil) (("" (inst 1 "j!2 - j!1") (("" (assert) nil nil)) nil)) nil) proved ((- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil) (even_int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil)) 427 400 nil nil)) (even_plus_odd_is_odd 0 (even_plus_odd_is_odd-1 nil 3237052399 3245525139 ("" (grind :if-match nil) (("" (inst 1 "j!1 + j!2") (("" (assert) nil nil)) nil)) nil) proved ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil) (even_int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil)) 539 470 nil nil)) (even_minus_odd_id_odd 0 (even_minus_odd_id_odd-1 nil 3237052399 3245525140 ("" (grind :if-match nil) (("" (inst 1 "-1 + j!1 - j!2") (("" (assert) nil nil)) nil)) nil) proved ((- const-decl "[numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil) (even_int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil)) 498 450 nil nil)) (even_times_int_is_even 0 (even_times_int_is_even-1 nil 3237052399 3245525140 ("" (grind :if-match nil) (("" (inst 1 "i!1 * j!1") nil nil)) nil) proved ((* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even_int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil)) 397 380 nil nil)) (int_times_even_is_even 0 (int_times_even_is_even-1 nil 3237052399 3245525141 ("" (grind :if-match nil) (("" (inst 1 "i!1 * j!1") nil nil)) nil) proved ((* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even_int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil)) 389 380 nil nil)) (odd_times_odd_is_odd 0 (odd_times_odd_is_odd-1 nil 3237052399 3245525141 ("" (grind :if-match nil) (("" (inst 1 "j!1 + j!2 + 2 * j!1 * j!2") (("" (assert) nil nil)) nil)) nil) proved ((* const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil)) 559 530 nil nil)) (minus_even_is_even 0 (minus_even_is_even-1 nil 3237052399 3245525142 ("" (grind :if-match nil) (("" (inst 1 "-j!1") (("" (assert) nil nil)) nil)) nil) proved ((- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even_int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil)) 349 340 nil nil)) (minus_odd_is_odd 0 (minus_odd_is_odd-1 nil 3237052399 3245525142 ("" (grind :if-match nil) (("" (inst 1 "-1 - j!1") (("" (assert) nil nil)) nil)) nil) proved ((- const-decl "[numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil)) 400 390 nil nil)))(naturalnumbers (upfrom_nat_is_nat 0 (upfrom_nat_is_nat-1 nil 3237052399 3245525142 ("" (subtype-tcc) nil nil) proved nil 15 10 nil nil)) (upfrom_posnat_is_posnat 0 (upfrom_posnat_is_posnat-1 nil 3237052399 3245525142 ("" (subtype-tcc) nil nil) proved nil 19 20 nil nil)) (above_nat_is_posnat 0 (above_nat_is_posnat-1 nil 3237052399 3245525142 ("" (subtype-tcc) nil nil) proved nil 21 20 nil nil)) (subrange_nat_is_nat 0 (subrange_nat_is_nat-1 nil 3237052399 3245525142 ("" (subtype-tcc) nil nil) proved nil 27 30 nil nil)) (subrange_posnat_is_posnat 0 (subrange_posnat_is_posnat-1 nil 3237052399 3245525142 ("" (subtype-tcc) nil nil) proved nil 31 40 nil nil)) (upto_TCC1 0 (upto_TCC1-1 nil 3237052399 3245525142 ("" (tcc :defs !) nil nil) proved nil 31 30 nil nil)) (pred_TCC1 0 (pred_TCC1-1 nil 3237052399 3245525142 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 105 70 nil nil)) (tilde_TCC1 0 (tilde_TCC1-1 nil 3237052399 3245525143 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 168 110 nil nil)) (nat_induction 0 (nat_induction-1 nil 3237052399 3245525143 ("" (lemma "wf_induction[nat, (LAMBDA (m,n:nat): m < n)]") (("1" (beta) (("1" (skosimp*) (("1" (inst -1 "p!1") (("1" (split) (("1" (inst -1 "i!1") nil nil) ("2" (skosimp*) (("2" (case "x!1 = 0") (("1" (assert) nil nil) ("2" (inst -1 "x!1 - 1") (("1" (inst -3 "x!1 - 1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (delete 2) (("2" (lemma "wf_nat") (("2" (propax) nil nil)) nil)) nil)) nil) proved ((wf_nat formula-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (x!1 skolem-const-decl "nat" naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (wf_induction formula-decl nil wf_induction nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil)) 220 190 nil nil)) (NAT_induction 0 (NAT_induction-1 nil 3237052399 3245525143 ("" (lemma "nat_induction") (("" (skosimp*) (("" (inst -1 "(LAMBDA (n:nat): (FORALL (m:nat): m <= n IMPLIES p!1(m)))") (("" (split) (("1" (inst -1 "i!1") (("1" (inst -1 "i!1") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -2 "0") (("2" (split) (("1" (assert) nil nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (inst -3 "m!1") (("3" (assert) (("3" (skosimp*) (("3" (inst -1 "k!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((<= const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nat_induction formula-decl nil naturalnumbers nil)) 255 210 nil nil)))(min_nat (min_TCC1 0 (min_TCC1-1 nil 3237052399 3245525143 ("" (inst + "lambda S: epsilon(lambda (n: nat): T_pred(n) AND S(n) AND
                                    FORALL x: S(x) IMPLIES n <= x)") (("" (skolem!) (("" (use "epsilon_ax[nat]") (("" (split -) (("1" (propax) nil nil) ("2" (delete 2) (("2" (assert) (("2" (lemma "wf_nat") (("2" (expand "well_founded?") (("2" (inst - "lambda (x: nat): T_pred(x) AND S!1(x)") (("2" (ground) (("1" (skolem!) (("1" (inst? +) (("1" (assert) (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (delete 2) (("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((well_founded? const-decl "bool" orders nil) (x!1 skolem-const-decl "T" min_nat nil) (S!1 skolem-const-decl "(nonempty?[T])" min_nat nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (wf_nat formula-decl nil naturalnumbers nil) (epsilon_ax formula-decl nil epsilons nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (<= const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-subtype-decl nil min_nat nil) (T_pred const-decl "[nat -> boolean]" min_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 329 330 nil nil)) (min_def 0 (min_def-1 nil 3237052399 3245525144 ("" (skolem!) (("" (typepred "min(S!1)") (("" (expand "minimum?") (("" (ground) (("1" (replace*) nil nil) ("2" (inst? -2 :where -4) (("2" (inst? - :where -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat nil) (<= const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-subtype-decl nil min_nat nil) (T_pred const-decl "[nat -> boolean]" min_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (minimum? const-decl "bool" min_nat nil)) 101 100 nil nil)))(real_defs (abs_TCC1 0 (abs_TCC1-1 nil 3237052399 3245525144 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 45 40 nil nil)) (abs_TCC2 0 (abs_TCC2-1 nil 3237052399 3245525144 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 36 40 nil nil)) (nonzero_abs_is_pos 0 (nonzero_abs_is_pos-1 nil 3237052399 3245525144 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nzreal nonempty-type-eq-decl nil reals nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 89 90 nil nil)) (rat_abs_is_nonneg 0 (rat_abs_is_nonneg-1 nil 3237052399 3245525144 ("" (skosimp) (("" (expand "abs") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 43 30 nil nil)) (nzrat_abs_is_pos 0 (nzrat_abs_is_pos-1 nil 3237052399 3245525144 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nzrat nonempty-type-eq-decl nil rationals nil)) 80 80 nil nil)) (int_abs_is_nonneg 0 (int_abs_is_nonneg-1 nil 3237052399 3245525144 ("" (skosimp) (("" (expand "abs") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 54 50 nil nil)) (nzint_abs_is_pos 0 (nzint_abs_is_pos-1 nil 3237052399 3245525144 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil)) 137 110 nil nil)) (max_TCC1 0 (max_TCC1-1 nil 3237052399 3245525144 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 85 90 nil nil)) (max_TCC2 0 (max_TCC2-1 nil 3237052399 3245525144 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 97 100 nil nil)) (min_TCC1 0 (min_TCC1-1 nil 3237052399 3245525145 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 85 80 nil nil)) (min_TCC2 0 (min_TCC2-1 nil 3237052399 3245525145 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 87 80 nil nil)) (nzreal_max 0 (nzreal_max-1 nil 3237052399 3245525145 ("" (skosimp) (("" (expand "max") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)) 76 80 nil nil)) (nzreal_min 0 (nzreal_min-1 nil 3237052399 3245525145 ("" (skosimp) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 77 80 nil nil)) (nonneg_real_max 0 (nonneg_real_max-1 nil 3237052399 3245525145 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil)) 168 170 nil nil)) (nonneg_real_min 0 (nonneg_real_min-1 nil 3237052399 3245525145 ("" (skosimp) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 81 80 nil nil)) (posreal_max 0 (posreal_max-1 nil 3237052399 3245525145 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 195 200 nil nil)) (posreal_min 0 (posreal_min-1 nil 3237052399 3245525146 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 210 210 nil nil)) (rat_max 0 (rat_max-1 nil 3237052399 3245525146 ("" (skosimp) (("" (expand "max") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)) 98 100 nil nil)) (rat_min 0 (rat_min-1 nil 3237052399 3245525146 ("" (skosimp) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 104 110 nil nil)) (nzrat_max 0 (nzrat_max-1 nil 3237052399 3245525146 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nzrat nonempty-type-eq-decl nil rationals nil) (/= const-decl "boolean" notequal nil)) 263 250 nil nil)) (nzrat_min 0 (nzrat_min-1 nil 3237052399 3245525146 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nzrat nonempty-type-eq-decl nil rationals nil) (/= const-decl "boolean" notequal nil)) 237 240 nil nil)) (nonneg_rat_max 0 (nonneg_rat_max-1 nil 3237052399 3245525147 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil)) 262 240 nil nil)) (nonneg_rat_min 0 (nonneg_rat_min-1 nil 3237052399 3245525147 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil)) 262 260 nil nil)) (posrat_max 0 (posrat_max-1 nil 3237052399 3245525147 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil)) 336 330 nil nil)) (posrat_min 0 (posrat_min-1 nil 3237052399 3245525148 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil)) 349 350 nil nil)) (int_max 0 (int_max-1 nil 3237052399 3245525148 ("" (skosimp) (("" (expand "max") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)) 229 220 nil nil)) (int_min 0 (int_min-1 nil 3237052399 3245525148 ("" (skosimp) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 263 260 nil nil)) (nzint_max 0 (nzint_max-1 nil 3237052399 3245525149 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil)) 453 410 nil nil)) (nzint_min 0 (nzint_min-1 nil 3237052399 3245525149 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil)) 438 440 nil nil)) (nat_max 0 (nat_max-1 nil 3237052399 3245525150 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 467 470 nil nil)) (nat_min 0 (nat_min-1 nil 3237052399 3245525150 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 483 480 nil nil)) (posint_max 0 (posint_max-1 nil 3237052399 3245525151 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posint nonempty-type-eq-decl nil integers nil)) 561 550 nil nil)) (posint_min 0 (posint_min-1 nil 3237052399 3245525151 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posint nonempty-type-eq-decl nil integers nil)) 586 590 nil nil)))(real_props (inv_ne_0 0 (inv_ne_0-1 nil 3237052399 3245525151 ("" (grind) nil nil) proved nil 14 20 nil nil)) (both_sides_plus1 0 (both_sides_plus1-1 nil 3237052399 3245525151 ("" (tcc :defs !) nil nil) proved nil 14 10 nil nil)) (both_sides_plus2 0 (both_sides_plus2-1 nil 3237052399 3245525151 ("" (tcc :defs !) nil nil) proved nil 15 10 nil nil)) (both_sides_minus1 0 (both_sides_minus1-1 nil 3237052399 3245525151 ("" (tcc :defs !) nil nil) proved nil 59 30 nil nil)) (both_sides_minus2 0 (both_sides_minus2-1 nil 3237052399 3245525152 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 160 150 nil nil)) (both_sides_times1 0 (both_sides_times1-1 nil 3237052399 3245525152 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil)) 168 170 nil nil)) (both_sides_times2 0 (both_sides_times2-1 nil 3237052399 3245525152 ("" (lemma "both_sides_times1") (("" (skosimp*) (("" (prop) (("1" (inst -2 "n0z!1" "x!1" "y!1") (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (/= const-decl "boolean" notequal nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (both_sides_times1 formula-decl nil real_props nil)) 122 120 nil nil)) (both_sides_div1 0 (both_sides_div1-1 nil 3237052399 3245525152 ("" (grind) (("" (lemma "both_sides_times1") (("" (inst -1 "1/n0z!1" "x!1" "y!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil)) 152 140 nil nil)) (both_sides_div2 0 (both_sides_div2-1 nil 3237052399 3245525152 ("" (grind) (("" (lemma "both_sides_times1") (("" (inst-cp -1 "n0x!1" "n0z!1/n0x!1" "n0z!1/n0y!1") (("" (flatten) (("" (delete -2) (("" (split) (("1" (case "n0z!1 = (n0z!1/n0x!1) * n0x!1") (("1" (replace -1 :dir rl) (("1" (delete -1) (("1" (delete -3) (("1" (inst -2 "n0y!1" "n0z!1" "(n0z!1/n0y!1)*n0x!1") (("1" (flatten) (("1" (delete -2) (("1" (split) (("1" (case "(n0z!1 / n0y!1) * n0x!1 * n0y!1 = n0z!1 * n0x!1") (("1" (replace -1) (("1" (rewrite "both_sides_times2") nil nil)) nil) ("2" (assert) nil nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2 3 4 5) (("2" (use "div_def") (("2" (replace -1) (("2" (use "associative_mult") (("2" (replace -1 :dir rl) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil)) 160 150 nil nil)) (times_plus 0 (times_plus-1 nil 3237052399 3245525152 ("" (grind) nil nil) proved nil 200 200 nil nil)) (times_div1 0 (times_div1-1 nil 3237052399 3245525153 ("" (grind) nil nil) proved nil 93 90 nil nil)) (times_div2 0 (times_div2-1 nil 3237052399 3245525153 ("" (grind) nil nil) proved nil 82 80 nil nil)) (div_times 0 (div_times-1 nil 3237052399 3245525153 ("" (grind) nil nil) proved nil 145 140 nil nil)) (div_eq_zero 0 (div_eq_zero-1 nil 3237052399 3245525153 ("" (grind) (("" (lemma "both_sides_times1") (("" (inst -1 "n0z!1" "x!1/n0z!1" "0") (("" (flatten) (("" (delete -1) (("" (split) (("1" (delete -2) (("1" (assert) (("1" (rewrite "commutative_mult") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil)) 148 150 nil nil)) (div_simp 0 (div_simp-1 nil 3237052399 3245525153 ("" (grind) nil nil) proved nil 24 20 nil nil)) (div_cancel1 0 (div_cancel1-1 nil 3237052399 3245525153 ("" (grind) nil nil) proved nil 51 60 nil nil)) (div_cancel2 0 (div_cancel2-1 nil 3237052399 3245525153 ("" (grind) nil nil) proved nil 52 50 nil nil)) (div_cancel3 0 (div_cancel3-1 nil 3237052399 3245525153 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil)) 166 170 nil nil)) (div_cancel4 0 (div_cancel4-1 nil 3243832638 3245525154 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil)) 212 190 t shostak)) (cross_mult 0 (cross_mult-1 nil 3237052399 3245525154 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil)) 243 250 nil nil)) (add_div 0 (add_div-1 nil 3237052399 3245525154 ("" (grind) nil nil) proved nil 198 200 nil nil)) (minus_div1 0 (minus_div1-1 nil 3237052399 3245525154 ("" (grind) nil nil) proved nil 194 190 nil nil)) (minus_div2 0 (minus_div2-1 nil 3237052399 3245525154 ("" (grind) nil nil) proved nil 95 100 nil nil)) (div_distributes 0 (div_distributes-1 nil 3237052399 3245525155 ("" (grind) nil nil) proved nil 104 110 nil nil)) (div_distributes_minus 0 (div_distributes_minus-1 nil 3237052399 3245525155 ("" (grind) nil nil) proved nil 107 110 nil nil)) (div_div1 0 (div_div1-1 nil 3237052399 3245525155 ("" (grind) nil nil) proved nil 98 90 nil nil)) (div_div2 0 (div_div2-1 nil 3237052399 3245525155 ("" (grind) nil nil) proved nil 100 100 nil nil)) (idem_add_is_zero 0 (idem_add_is_zero-1 nil 3237052399 3245525155 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 98 100 nil nil)) (zero_times1 0 (zero_times1-1 nil 3237052399 3245525155 ("" (grind) nil nil) proved nil 11 10 nil nil)) (zero_times2 0 (zero_times2-1 nil 3237052399 3245525155 ("" (grind) nil nil) proved nil 11 10 nil nil)) (zero_times3 0 (zero_times3-1 nil 3237052399 3245525155 ("" (skosimp*) (("" (prop) (("1" (lemma "trichotomy") (("1" (inst-cp -1 "x!1") (("1" (inst -1 "y!1") (("1" (assert) (("1" (prop) (("1" (lemma "posreal_mult_closed") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "posreal_mult_closed") (("2" (inst -1 "-x!1" "y!1") (("2" (assert) nil nil)) nil)) nil) ("3" (lemma "posreal_mult_closed") (("3" (inst -1 "x!1" "-y!1") (("3" (assert) nil nil)) nil)) nil) ("4" (lemma "posreal_mult_closed") (("4" (inst -1 "-x!1" "-y!1") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal_mult_closed formula-decl nil real_axioms nil) (trichotomy formula-decl nil real_axioms nil)) 139 140 nil nil)) (neg_times_neg 0 (neg_times_neg-1 nil 3237052399 3245525155 ("" (grind) nil nil) proved nil 20 20 nil nil)) (zero_is_neg_zero 0 (zero_is_neg_zero-1 nil 3237052399 3245525155 ("" (grind) nil nil) proved nil 31 30 nil nil)) (strict_lt 0 (strict_lt-1 nil 3237052399 3245525155 ("" (grind) nil nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (strict_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (strict_total_order? const-decl "bool" orders nil)) 114 110 nil nil)) (trich_lt 0 (trich_lt-1 nil 3237052399 3245525155 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 46 40 nil nil)) (tri_unique_lt1 0 (tri_unique_lt1-1 nil 3237052399 3245525156 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (/= const-decl "boolean" notequal nil)) 94 50 nil nil)) (tri_unique_lt2 0 (tri_unique_lt2-1 nil 3237052399 3245525156 ("" (grind) nil nil) proved nil 20 20 nil nil)) (zero_not_lt_zero 0 (zero_not_lt_zero-1 nil 3237052399 3245525156 ("" (grind) nil nil) proved nil 11 10 nil nil)) (neg_lt 0 (neg_lt-1 nil 3237052399 3245525156 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 60 50 nil nil)) (pos_times_lt 0 (pos_times_lt-1 nil 3237052399 3245525156 ("" (grind) (("1" (lemma "posreal_mult_closed") (("1" (case "x!1 = 0") (("1" (assert) nil nil) ("2" (case "y!1 = 0") (("1" (assert) nil nil) ("2" (inst -1 "x!1" "-y!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (case "x!1 = 0") (("1" (assert) nil nil) ("2" (case "y!1 = 0") (("1" (assert) nil nil) ("2" (lemma "posreal_mult_closed") (("2" (inst -1 "-x!1" "y!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (lemma "posreal_mult_closed") (("3" (inst -1 "x!1" "y!1") (("3" (assert) nil nil)) nil)) nil) ("4" (lemma "posreal_mult_closed") (("4" (inst -1 "-x!1" "-y!1") (("4" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 306 310 nil nil)) (neg_times_lt 0 (neg_times_lt-1 nil 3237052399 3245525156 ("" (skosimp*) (("" (lemma "pos_times_lt") (("" (inst -1 "x!1" "-y!1") (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((pos_times_lt formula-decl nil real_props nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 165 170 nil nil)) (quotient_pos_lt 0 (quotient_pos_lt-1 nil 3237052399 3245525156 ("" (skosimp*) (("" (lemma "inverse_mult") (("" (inst?) (("" (lemma "pos_times_lt") (("" (inst -1 "n0x!1" "1/n0x!1") (("" (replace -2) (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((inverse_mult formula-decl nil number_fields nil) (pos_times_lt formula-decl nil real_props nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 130 130 nil nil)) (quotient_neg_lt 0 (quotient_neg_lt-1 nil 3237052399 3245525157 ("" (skosimp*) (("" (lemma "quotient_pos_lt") (("" (inst -1 "-n0x!1") (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((quotient_pos_lt formula-decl nil real_props nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 122 130 nil nil)) (pos_div_lt 0 (pos_div_lt-1 nil 3237052399 3245525157 ("" (skosimp*) (("" (lemma "pos_times_lt") (("" (inst -1 "x!1" "1/n0y!1") (("" (lemma "quotient_pos_lt") (("" (inst -1 "n0y!1") (("" (lemma "quotient_neg_lt") (("" (inst -1 "n0y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pos_times_lt formula-decl nil real_props nil) (quotient_pos_lt formula-decl nil real_props nil) (quotient_neg_lt formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 201 200 nil nil)) (neg_div_lt 0 (neg_div_lt-1 nil 3237052399 3245525157 ("" (skosimp*) (("" (lemma "pos_div_lt") (("" (inst -1 "n0y!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((pos_div_lt formula-decl nil real_props nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 191 190 nil nil)) (div_mult_pos_lt1 0 (div_mult_pos_lt1-1 nil 3237052399 3245525157 ("" (grind) (("1" (lemma "posreal_mult_closed") (("1" (inst -1 "x!1 - (z!1/py!1)" "py!1") (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "posreal_mult_closed") (("2" (inst -1 "x!1*py!1 - z!1" "1/py!1") (("2" (assert) nil nil)) nil)) nil)) nil) proved ((* const-decl "[numfield, numfield -> numfield]" number_fields nil) (posreal_mult_closed formula-decl nil real_axioms nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 416 380 nil nil)) (div_mult_pos_lt2 0 (div_mult_pos_lt2-1 nil 3237052399 3245525158 ("" (lemma "div_mult_pos_lt1") (("" (skosimp) (("" (inst -1 "py!1" "-x!1" "-z!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_lt1 formula-decl nil real_props nil)) 176 160 nil nil)) (div_mult_neg_lt1 0 (div_mult_neg_lt1-1 nil 3237052399 3245525158 ("" (lemma "div_mult_pos_lt2") (("" (skosimp) (("" (inst -1 "-ny!1" "-x!1" "z!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_lt2 formula-decl nil real_props nil)) 192 200 nil nil)) (div_mult_neg_lt2 0 (div_mult_neg_lt2-1 nil 3237052399 3245525158 ("" (skosimp) (("" (lemma "div_mult_pos_lt1") (("" (inst -1 "-ny!1" "-x!1" "z!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((div_mult_pos_lt1 formula-decl nil real_props nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 181 190 nil nil)) (both_sides_plus_lt1 0 (both_sides_plus_lt1-1 nil 3237052399 3245525158 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 153 150 nil nil)) (both_sides_plus_lt2 0 (both_sides_plus_lt2-1 nil 3237052399 3245525158 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 141 150 nil nil)) (both_sides_minus_lt1 0 (both_sides_minus_lt1-1 nil 3237052399 3245525158 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 108 100 nil nil)) (both_sides_minus_lt2 0 (both_sides_minus_lt2-1 nil 3237052399 3245525159 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 108 110 nil nil)) (both_sides_times_pos_lt1 0 (both_sides_times_pos_lt1-1 nil 3237052399 3245525159 ("" (grind) (("1" (lemma "posreal_mult_closed") (("1" (inst -1 "(y!1 - x!1) * pz!1" "1/pz!1") (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "posreal_mult_closed") (("2" (inst -1 "y!1-x!1" "pz!1") (("2" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 458 420 nil nil)) (both_sides_times_pos_lt2 0 (both_sides_times_pos_lt2-1 nil 3237052399 3245525159 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst -1 "pz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 231 230 nil nil)) (both_sides_times_neg_lt1 0 (both_sides_times_neg_lt1-1 nil 3237052399 3245525159 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst -1 "-nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 168 160 nil nil)) (both_sides_times_neg_lt2 0 (both_sides_times_neg_lt2-1 nil 3237052399 3245525160 ("" (lemma "both_sides_times_neg_lt1") (("" (skosimp) (("" (inst -1 "nz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_lt1 formula-decl nil real_props nil)) 238 230 nil nil)) (both_sides_div_pos_lt1 0 (both_sides_div_pos_lt1-1 nil 3237052399 3245525160 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst -1 "1/pz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 165 160 nil nil)) (both_sides_div_pos_lt2 0 (both_sides_div_pos_lt2-1 nil 3237052399 3245525161 ("" (skosimp*) (("" (lemma "both_sides_times_pos_lt1") (("" (inst -1 "px!1 * py!1" "pz!1 / px!1" "pz!1 / py!1") (("" (assert) (("" (grind) (("1" (case "pz!1 / px!1 * (px!1 * py!1) = pz!1 * py!1") (("1" (replace -1) (("1" (hide -1) (("1" (case "pz!1 / py!1 * (px!1 * py!1) = pz!1 * px!1") (("1" (replace -1) (("1" (hide -1) (("1" (rewrite "both_sides_times_pos_lt2") nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "pz!1 / px!1 * (px!1 * py!1) = pz!1 * py!1") (("1" (case "pz!1 / py!1 * (px!1 * py!1) = pz!1 * px!1") (("1" (replace -1) (("1" (replace -2) (("1" (hide -1 -2) (("1" (lemma "both_sides_times_pos_lt2") (("1" (inst?) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_times_pos_lt1 formula-decl nil real_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (both_sides_times_pos_lt2 formula-decl nil real_props nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 631 480 nil nil)) (both_sides_div_pos_lt3 0 (both_sides_div_pos_lt3-1 nil 3237052399 3245525161 ("" (skosimp*) (("" (lemma "both_sides_div_pos_lt2") (("" (inst -1 "py!1" "px!1" "-nz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((both_sides_div_pos_lt2 formula-decl nil real_props nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 180 180 nil nil)) (both_sides_div_neg_lt1 0 (both_sides_div_neg_lt1-1 nil 3237052399 3245525161 ("" (lemma "both_sides_div_pos_lt1") (("" (skosimp) (("" (inst -1 "-nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil)) 136 130 nil nil)) (both_sides_div_neg_lt2 0 (both_sides_div_neg_lt2-1 nil 3237052399 3245525161 ("" (lemma "both_sides_div_pos_lt2") (("" (skosimp) (("" (inst -1 "-ny!1" "-nx!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt2 formula-decl nil real_props nil)) 217 220 nil nil)) (both_sides_div_neg_lt3 0 (both_sides_div_neg_lt3-1 nil 3237052399 3245525161 ("" (lemma "both_sides_div_pos_lt3") (("" (skosimp) (("" (inst -1 "nz!1" "-ny!1" "-nx!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt3 formula-decl nil real_props nil)) 220 210 nil nil)) (lt_plus_lt1 0 (lt_plus_lt1-1 nil 3237052399 3245525162 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 137 140 nil nil)) (lt_plus_lt2 0 (lt_plus_lt2-1 nil 3237052399 3245525162 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 148 150 nil nil)) (lt_minus_lt1 0 (lt_minus_lt1-1 nil 3237052399 3245525162 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 103 100 nil nil)) (lt_minus_lt2 0 (lt_minus_lt2-1 nil 3237052399 3245525162 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 105 90 nil nil)) (lt_times_lt_pos1 0 (lt_times_lt_pos1-1 nil 3237052399 3245525162 ("" (skosimp*) (("" (case "nnz!1 = 0") (("1" (assert) (("1" (lemma "pos_times_lt") (("1" (inst -1 "y!1" "w!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "both_sides_times_pos_lt1") (("2" (inst-cp -1 "nnz!1" "px!1" "y!1") (("1" (inst -1 "y!1" "nnz!1" "w!1") (("1" (grind) nil nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_times_lt formula-decl nil real_props nil) (nnz!1 skolem-const-decl "nonneg_real" real_props nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (y!1 skolem-const-decl "real" real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 340 320 nil nil)) (lt_times_lt_pos2 0 (lt_times_lt_pos2-1 nil 3237052399 3245525163 ("" (skosimp*) (("" (case "nnx!1 = 0") (("1" (assert) (("1" (lemma "pos_times_lt") (("1" (inst -1 "y!1" "w!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "both_sides_times_pos_lt1") (("2" (inst-cp -1 "pz!1" "nnx!1" "y!1") (("2" (inst -1 "y!1" "pz!1" "w!1") (("1" (grind) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_times_lt formula-decl nil real_props nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (y!1 skolem-const-decl "real" real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 314 320 nil nil)) (lt_div_lt_pos1_TCC1 0 (lt_div_lt_pos1_TCC1-1 nil 3237052399 3245525163 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 37 40 nil nil)) (lt_div_lt_pos1 0 (lt_div_lt_pos1-1 nil 3237052399 3245525163 ("" (grind) (("" (delete -5 -6) (("" (lemma "both_sides_div_pos_lt1") (("" (inst -1 "w!1" "px!1" "y!1") (("" (lemma "both_sides_div_pos_lt2") (("" (inst -1 "w!1" "pz!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_div_pos_lt2 formula-decl nil real_props nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 267 260 nil nil)) (lt_div_lt_pos2_TCC1 0 (lt_div_lt_pos2_TCC1-1 nil 3237052399 3245525163 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 35 30 nil nil)) (lt_div_lt_pos2 0 (lt_div_lt_pos2-1 nil 3237052399 3245525163 ("" (grind) (("" (delete -4 -5) (("" (lemma "both_sides_div_pos_lt1") (("" (inst -1 "w!1" "nnx!1" "y!1") (("" (lemma "both_sides_div_pos_lt2") (("" (inst -1 "w!1" "pz!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_div_pos_lt2 formula-decl nil real_props nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 259 250 nil nil)) (lt_times_lt_neg1 0 (lt_times_lt_neg1-1 nil 3237052399 3245525164 ("" (lemma "lt_times_lt_pos1") (("" (skosimp) (("" (inst -1 "-npw!1" "-ny!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_times_lt_pos1 formula-decl nil real_props nil)) 213 190 nil nil)) (lt_times_lt_neg2 0 (lt_times_lt_neg2-1 nil 3237052399 3245525164 ("" (lemma "lt_times_lt_pos2") (("" (skosimp) (("" (inst -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_times_lt_pos2 formula-decl nil real_props nil)) 193 180 nil nil)) (lt_div_lt_neg1_TCC1 0 (lt_div_lt_neg1_TCC1-1 nil 3237052399 3245525164 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 37 30 nil nil)) (lt_div_lt_neg1 0 (lt_div_lt_neg1-1 nil 3237052399 3245525164 ("" (lemma "lt_div_lt_pos1") (("" (skosimp) (("" (inst -1 "-ny!1" "-nw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_div_lt_pos1 formula-decl nil real_props nil)) 163 160 nil nil)) (lt_div_lt_neg2_TCC1 0 (lt_div_lt_neg2_TCC1-1 nil 3237052399 3245525164 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 36 40 nil nil)) (lt_div_lt_neg2 0 (lt_div_lt_neg2-1 nil 3237052399 3245525164 ("" (lemma "lt_div_lt_pos2") (("" (skosimp) (("" (inst -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_div_lt_pos2 formula-decl nil real_props nil)) 166 150 nil nil)) (total_le 0 (total_le-1 nil 3237052399 3245525164 ("" (tcc :defs !) nil nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil) (dichotomous? const-decl "bool" orders nil) (total_order? const-decl "bool" orders nil)) 160 160 nil nil)) (dich_le 0 (dich_le-1 nil 3237052399 3245525165 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 43 40 nil nil)) (zero_le_zero 0 (zero_le_zero-1 nil 3237052399 3245525165 ("" (tcc :defs !) nil nil) proved nil 10 10 nil nil)) (neg_le 0 (neg_le-1 nil 3237052399 3245525165 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 61 60 nil nil)) (pos_times_le 0 (pos_times_le-1 nil 3237052399 3245525165 ("" (lemma "pos_times_lt") (("" (skosimp) (("" (case "x!1 = 0") (("1" (grind) nil nil) ("2" (case "y!1 = 0") (("1" (grind) nil nil) ("2" (inst?) (("2" (lemma "zero_times3") (("2" (inst?) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((zero_times3 formula-decl nil real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (pos_times_lt formula-decl nil real_props nil)) 534 490 nil nil)) (neg_times_le 0 (neg_times_le-1 nil 3237052399 3245525165 ("" (lemma "pos_times_le") (("" (skosimp) (("" (inst -1 "x!1" "-y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_times_le formula-decl nil real_props nil)) 202 190 nil nil)) (quotient_pos_le 0 (quotient_pos_le-1 nil 3237052399 3245525166 ("" (lemma "quotient_pos_lt") (("" (skosimp) (("" (inst?) (("" (lemma "inv_ne_0") (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((inv_ne_0 formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (quotient_pos_lt formula-decl nil real_props nil)) 117 110 nil nil)) (quotient_neg_le 0 (quotient_neg_le-1 nil 3237052399 3245525166 ("" (lemma "quotient_pos_le") (("" (skosimp) (("" (inst -1 "-n0x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (quotient_pos_le formula-decl nil real_props nil)) 130 130 nil nil)) (pos_div_le 0 (pos_div_le-1 nil 3237052399 3245525167 ("" (lemma "pos_div_lt") (("" (skosimp) (("" (case "x!1 = 0") (("1" (grind) nil nil) ("2" (inst?) (("2" (lemma "zero_times3") (("2" (inst -1 "x!1" "1/n0y!1") (("2" (lemma "inv_ne_0") (("2" (inst -1 "n0y!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((/= const-decl "boolean" notequal nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (inv_ne_0 formula-decl nil real_props nil) (zero_times3 formula-decl nil real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (pos_div_lt formula-decl nil real_props nil)) 966 940 nil nil)) (neg_div_le 0 (neg_div_le-1 nil 3237052399 3245525167 ("" (lemma "pos_div_le") (("" (skosimp) (("" (inst -1 "-n0y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_div_le formula-decl nil real_props nil)) 221 210 nil nil)) (div_mult_pos_le1 0 (div_mult_pos_le1-1 nil 3237052399 3245525167 ("" (lemma "div_mult_pos_lt1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) (("" (case-replace "z!1 = x!1 * py!1") (("1" (assert) (("1" (case-replace "x!1 * py!1 / py!1 = x!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3 4) (("2" (use "div_def") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (div_def formula-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_lt1 formula-decl nil real_props nil)) 293 290 nil nil)) (div_mult_pos_le2 0 (div_mult_pos_le2-1 nil 3237052399 3245525168 ("" (lemma "div_mult_pos_lt2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) (("" (case-replace "z!1 = x!1 * py!1") (("1" (assert) (("1" (case-replace "x!1 * py!1 / py!1 = x!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3 4) (("2" (use "div_def") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (div_def formula-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_lt2 formula-decl nil real_props nil)) 330 300 nil nil)) (div_mult_neg_le1 0 (div_mult_neg_le1-1 nil 3237052399 3245525168 ("" (lemma "div_mult_neg_lt1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) (("" (case-replace "z!1 = x!1 * ny!1") (("1" (assert) (("1" (case-replace "x!1 * ny!1 / ny!1 = x!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3 4) (("2" (use "div_def") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (div_def formula-decl nil number_fields nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_lt1 formula-decl nil real_props nil)) 302 290 nil nil)) (div_mult_neg_le2 0 (div_mult_neg_le2-1 nil 3237052399 3245525168 ("" (lemma "div_mult_neg_lt2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) (("" (case-replace "z!1 = x!1 * ny!1") (("1" (assert) (("1" (case-replace "x!1 * ny!1 / ny!1 = x!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3 4) (("2" (use "div_def") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (div_def formula-decl nil number_fields nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_lt2 formula-decl nil real_props nil)) 288 290 nil nil)) (both_sides_plus_le1 0 (both_sides_plus_le1-1 nil 3237052399 3245525168 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 155 140 nil nil)) (both_sides_plus_le2 0 (both_sides_plus_le2-1 nil 3237052399 3245525169 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 144 140 nil nil)) (both_sides_minus_le1 0 (both_sides_minus_le1-1 nil 3237052399 3245525169 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 111 110 nil nil)) (both_sides_minus_le2 0 (both_sides_minus_le2-1 nil 3237052399 3245525169 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 110 110 nil nil)) (both_sides_times_pos_le1 0 (both_sides_times_pos_le1-1 nil 3237052399 3245525169 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst?) (("" (inst -1 "y!1") (("" (grind) (("" (lemma "both_sides_times1") (("" (inst?) (("" (inst -1 "y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_times1 formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 260 220 nil nil)) (both_sides_times_pos_le2 0 (both_sides_times_pos_le2-1 nil 3237052399 3245525169 ("" (lemma "both_sides_times_pos_le1") (("" (skosimp) (("" (inst -1 "pz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_le1 formula-decl nil real_props nil)) 219 220 nil nil)) (both_sides_times_neg_le1 0 (both_sides_times_neg_le1-1 nil 3237052399 3245525170 ("" (lemma "both_sides_times_pos_le1") (("" (skosimp) (("" (inst -1 "-nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_le1 formula-decl nil real_props nil)) 183 170 nil nil)) (both_sides_times_neg_le2 0 (both_sides_times_neg_le2-1 nil 3237052399 3245525170 ("" (lemma "both_sides_times_neg_le1") (("" (skosimp) (("" (inst -1 "nz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_le1 formula-decl nil real_props nil)) 219 220 nil nil)) (both_sides_div_pos_le1 0 (both_sides_div_pos_le1-1 nil 3237052399 3245525170 ("" (lemma "both_sides_div_pos_lt1") (("" (skosimp) (("" (inst?) (("" (inst -1 "y!1") (("" (grind) (("" (lemma "both_sides_times_pos_le1") (("" (inst -1 "1/pz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil)) 151 140 nil nil)) (both_sides_div_pos_le2 0 (both_sides_div_pos_le2-1 nil 3237052399 3245525170 ("" (lemma "both_sides_div_pos_lt2") (("" (skosimp) (("" (inst?) (("" (inst -1 "py!1") (("" (grind) (("" (lemma "both_sides_div2") (("" (inst?) (("" (inst -1 "py!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_div2 formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt2 formula-decl nil real_props nil)) 238 240 nil nil)) (both_sides_div_pos_le3 0 (both_sides_div_pos_le3-1 nil 3237052399 3245525170 ("" (lemma "both_sides_div_pos_le2") (("" (skosimp) (("" (inst -1 "py!1" "px!1" "-nz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_le2 formula-decl nil real_props nil)) 171 170 nil nil)) (both_sides_div_neg_le1 0 (both_sides_div_neg_le1-1 nil 3237052399 3245525171 ("" (lemma "both_sides_div_pos_le1") (("" (skosimp) (("" (inst -1 "-nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_le1 formula-decl nil real_props nil)) 151 140 nil nil)) (both_sides_div_neg_le2 0 (both_sides_div_neg_le2-1 nil 3237052399 3245525171 ("" (lemma "both_sides_div_pos_le2") (("" (skosimp) (("" (inst -1 "-ny!1" "-nx!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_le2 formula-decl nil real_props nil)) 237 240 nil nil)) (both_sides_div_neg_le3 0 (both_sides_div_neg_le3-1 nil 3237052399 3245525171 ("" (lemma "both_sides_div_pos_le3") (("" (skosimp) (("" (inst -1 "nz!1" "-ny!1" "-nx!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_le3 formula-decl nil real_props nil)) 258 230 nil nil)) (le_plus_le 0 (le_plus_le-1 nil 3237052399 3245525171 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 143 150 nil nil)) (le_minus_le 0 (le_minus_le-1 nil 3237052399 3245525171 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 109 100 nil nil)) (le_times_le_pos 0 (le_times_le_pos-1 nil 3237052399 3245525172 ("" (lemma "lt_times_lt_pos1") (("" (skosimp) (("" (case "nnz!1 = w!1") (("1" (lemma "both_sides_times_pos_le1") (("1" (inst -1 "w!1" "nnx!1" "y!1") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ("2" (inst -1 "nnz!1" "nnx!1" "w!1" "y!1") (("1" (grind) nil nil) ("2" (grind) (("2" (lemma "pos_times_le") (("2" (inst -1 "y!1" "w!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nnx!1 skolem-const-decl "nonneg_real" real_props nil) (pos_times_le formula-decl nil real_props nil) (both_sides_times_pos_le1 formula-decl nil real_props nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (w!1 skolem-const-decl "real" real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (lt_times_lt_pos1 formula-decl nil real_props nil)) 305 300 nil nil)) (le_div_le_pos_TCC1 0 (le_div_le_pos_TCC1-1 nil 3237052399 3245525172 ("" (grind) nil nil) proved ((/= const-decl "boolean" notequal nil)) 36 30 nil nil)) (le_div_le_pos 0 (le_div_le_pos-1 nil 3237052399 3245525172 ("" (lemma "le_times_le_pos") (("" (skosimp) (("" (inst -1 "nnx!1" "1/w!1" "1/pz!1" "y!1") (("1" (grind) (("1" (rewrite "both_sides_div_pos_le2") nil nil)) nil) ("2" (assert) (("2" (lemma "quotient_pos_lt") (("2" (inst -1 "w!1") (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (quotient_pos_lt formula-decl nil real_props nil) (both_sides_div_pos_le2 formula-decl nil real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (w!1 skolem-const-decl "real" real_props nil) (le_times_le_pos formula-decl nil real_props nil)) 306 280 nil nil)) (le_times_le_neg 0 (le_times_le_neg-1 nil 3237052399 3245525172 ("" (lemma "le_times_le_pos") (("" (skosimp) (("" (inst -1 "-npy!1" "-npw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (le_times_le_pos formula-decl nil real_props nil)) 179 160 nil nil)) (le_div_le_neg_TCC1 0 (le_div_le_neg_TCC1-1 nil 3237052399 3245525172 ("" (grind) nil nil) proved ((/= const-decl "boolean" notequal nil)) 37 40 nil nil)) (le_div_le_neg 0 (le_div_le_neg-1 nil 3237052399 3245525172 ("" (lemma "le_div_le_pos") (("" (skosimp) (("" (inst -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (le_div_le_pos formula-decl nil real_props nil)) 169 160 nil nil)) (strict_gt 0 (strict_gt-1 nil 3237052399 3245525173 ("" (tcc :defs !) nil nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (strict_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (strict_total_order? const-decl "bool" orders nil)) 116 120 nil nil)) (trich_gt 0 (trich_gt-1 nil 3237052399 3245525173 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 46 40 nil nil)) (tri_unique_gt1 0 (tri_unique_gt1-1 nil 3237052399 3245525173 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (/= const-decl "boolean" notequal nil)) 57 40 nil nil)) (tri_unique_gt2 0 (tri_unique_gt2-1 nil 3237052399 3245525173 ("" (tcc :defs !) nil nil) proved nil 21 20 nil nil)) (zero_not_gt_zero 0 (zero_not_gt_zero-1 nil 3237052399 3245525173 ("" (tcc :defs !) nil nil) proved nil 11 10 nil nil)) (neg_gt 0 (neg_gt-1 nil 3237052399 3245525173 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 59 50 nil nil)) (pos_times_gt 0 (pos_times_gt-1 nil 3237052399 3245525173 ("" (lemma "pos_times_lt") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_times_lt formula-decl nil real_props nil)) 280 270 nil nil)) (neg_times_gt 0 (neg_times_gt-1 nil 3237052399 3245525173 ("" (lemma "neg_times_lt") (("" (skosimp) (("" (inst -1 "x!1" "y!1") (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (neg_times_lt formula-decl nil real_props nil)) 256 250 nil nil)) (quotient_pos_gt 0 (quotient_pos_gt-1 nil 3237052399 3245525174 ("" (lemma "quotient_pos_lt") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (quotient_pos_lt formula-decl nil real_props nil)) 102 100 nil nil)) (quotient_neg_gt 0 (quotient_neg_gt-1 nil 3237052399 3245525174 ("" (lemma "quotient_neg_lt") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (quotient_neg_lt formula-decl nil real_props nil)) 102 100 nil nil)) (pos_div_gt 0 (pos_div_gt-1 nil 3237052399 3245525174 ("" (lemma "pos_div_lt") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_div_lt formula-decl nil real_props nil)) 291 280 nil nil)) (neg_div_gt 0 (neg_div_gt-1 nil 3237052399 3245525174 ("" (lemma "neg_div_lt") (("" (skosimp) (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (neg_div_lt formula-decl nil real_props nil)) 317 300 nil nil)) (div_mult_pos_gt1 0 (div_mult_pos_gt1-1 nil 3237052399 3245525175 ("" (lemma "div_mult_pos_lt1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_lt1 formula-decl nil real_props nil)) 180 160 nil nil)) (div_mult_pos_gt2 0 (div_mult_pos_gt2-1 nil 3237052399 3245525175 ("" (lemma "div_mult_pos_lt2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_lt2 formula-decl nil real_props nil)) 167 170 nil nil)) (div_mult_neg_gt1 0 (div_mult_neg_gt1-1 nil 3237052399 3245525175 ("" (lemma "div_mult_neg_lt1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_lt1 formula-decl nil real_props nil)) 168 170 nil nil)) (div_mult_neg_gt2 0 (div_mult_neg_gt2-1 nil 3237052399 3245525175 ("" (lemma "div_mult_neg_lt2") (("" (skosimp) (("" (grind) nil nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_lt2 formula-decl nil real_props nil)) 291 280 nil nil)) (both_sides_plus_gt1 0 (both_sides_plus_gt1-1 nil 3237052399 3245525175 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 141 140 nil nil)) (both_sides_plus_gt2 0 (both_sides_plus_gt2-1 nil 3237052399 3245525176 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 155 150 nil nil)) (both_sides_minus_gt1 0 (both_sides_minus_gt1-1 nil 3237052399 3245525176 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 108 110 nil nil)) (both_sides_minus_gt2 0 (both_sides_minus_gt2-1 nil 3237052399 3245525176 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 108 110 nil nil)) (both_sides_times_pos_gt1 0 (both_sides_times_pos_gt1-1 nil 3237052399 3245525176 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 198 170 nil nil)) (both_sides_times_pos_gt2 0 (both_sides_times_pos_gt2-1 nil 3237052399 3245525176 ("" (lemma "both_sides_times_pos_lt2") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_lt2 formula-decl nil real_props nil)) 165 170 nil nil)) (both_sides_times_neg_gt1 0 (both_sides_times_neg_gt1-1 nil 3237052399 3245525176 ("" (lemma "both_sides_times_neg_lt1") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_lt1 formula-decl nil real_props nil)) 165 160 nil nil)) (both_sides_times_neg_gt2 0 (both_sides_times_neg_gt2-1 nil 3237052399 3245525177 ("" (lemma "both_sides_times_neg_lt2") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_lt2 formula-decl nil real_props nil)) 177 170 nil nil)) (both_sides_div_pos_gt1 0 (both_sides_div_pos_gt1-1 nil 3237052399 3245525177 ("" (lemma "both_sides_div_pos_lt1") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil)) 125 120 nil nil)) (both_sides_div_pos_gt2 0 (both_sides_div_pos_gt2-1 nil 3237052399 3245525177 ("" (lemma "both_sides_div_pos_lt2") (("" (skosimp) (("" (inst -1 "py!1" "px!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt2 formula-decl nil real_props nil)) 158 160 nil nil)) (both_sides_div_pos_gt3 0 (both_sides_div_pos_gt3-1 nil 3237052399 3245525177 ("" (lemma "both_sides_div_pos_lt3") (("" (skosimp) (("" (inst -1 "nz!1" "py!1" "px!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt3 formula-decl nil real_props nil)) 178 160 nil nil)) (both_sides_div_neg_gt1 0 (both_sides_div_neg_gt1-1 nil 3237052399 3245525177 ("" (lemma "both_sides_div_neg_lt1") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_lt1 formula-decl nil real_props nil)) 125 130 nil nil)) (both_sides_div_neg_gt2 0 (both_sides_div_neg_gt2-1 nil 3237052399 3245525177 ("" (lemma "both_sides_div_neg_lt2") (("" (skosimp) (("" (inst -1 "ny!1" "nx!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_lt2 formula-decl nil real_props nil)) 191 170 nil nil)) (both_sides_div_neg_gt3 0 (both_sides_div_neg_gt3-1 nil 3237052399 3245525178 ("" (lemma "both_sides_div_neg_lt3") (("" (skosimp) (("" (inst -1 "ny!1" "nx!1" "nz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_lt3 formula-decl nil real_props nil)) 170 160 nil nil)) (gt_plus_gt1 0 (gt_plus_gt1-1 nil 3237052399 3245525178 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 138 140 nil nil)) (gt_plus_gt2 0 (gt_plus_gt2-1 nil 3237052399 3245525178 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 139 140 nil nil)) (gt_minus_gt1 0 (gt_minus_gt1-1 nil 3237052399 3245525178 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 114 100 nil nil)) (gt_minus_gt2 0 (gt_minus_gt2-1 nil 3237052399 3245525178 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 106 100 nil nil)) (gt_times_gt_pos1 0 (gt_times_gt_pos1-1 nil 3237052399 3245525178 ("" (lemma "lt_times_lt_pos1") (("" (skosimp) (("" (inst -1 "nnw!1" "py!1" "z!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_times_lt_pos1 formula-decl nil real_props nil)) 157 160 nil nil)) (gt_times_gt_pos2 0 (gt_times_gt_pos2-1 nil 3237052399 3245525179 ("" (lemma "lt_times_lt_pos2") (("" (skosimp) (("" (inst -1 "nny!1" "pw!1" "z!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_times_lt_pos2 formula-decl nil real_props nil)) 169 160 nil nil)) (gt_div_gt_pos1_TCC1 0 (gt_div_gt_pos1_TCC1-1 nil 3237052399 3245525179 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 38 30 nil nil)) (gt_div_gt_pos1 0 (gt_div_gt_pos1-1 nil 3237052399 3245525179 ("" (lemma "lt_div_lt_pos1") (("" (skosimp) (("" (inst -1 "py!1" "pw!1" "z!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_div_lt_pos1 formula-decl nil real_props nil)) 145 130 nil nil)) (gt_div_gt_pos2_TCC1 0 (gt_div_gt_pos2_TCC1-1 nil 3237052399 3245525179 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 36 30 nil nil)) (gt_div_gt_pos2 0 (gt_div_gt_pos2-1 nil 3237052399 3245525179 ("" (lemma "lt_div_lt_pos2") (("" (skosimp) (("" (inst -1 "nny!1" "pw!1" "z!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_div_lt_pos2 formula-decl nil real_props nil)) 126 120 nil nil)) (gt_times_gt_neg1 0 (gt_times_gt_neg1-1 nil 3237052399 3245525179 ("" (lemma "lt_times_lt_neg1") (("" (skosimp) (("" (inst -1 "npz!1" "nx!1" "y!1" "w!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_times_lt_neg1 formula-decl nil real_props nil)) 160 160 nil nil)) (gt_times_gt_neg2 0 (gt_times_gt_neg2-1 nil 3237052399 3245525179 ("" (lemma "lt_times_lt_neg2") (("" (skosimp) (("" (inst -1 "npx!1" "nz!1" "y!1" "w!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_times_lt_neg2 formula-decl nil real_props nil)) 156 150 nil nil)) (gt_div_gt_neg1_TCC1 0 (gt_div_gt_neg1_TCC1-1 nil 3237052399 3245525179 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 38 40 nil nil)) (gt_div_gt_neg1 0 (gt_div_gt_neg1-1 nil 3237052399 3245525180 ("" (lemma "lt_div_lt_neg1") (("" (skosimp) (("" (inst -1 "nz!1" "nx!1" "y!1" "w!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_div_lt_neg1 formula-decl nil real_props nil)) 132 120 nil nil)) (gt_div_gt_neg2_TCC1 0 (gt_div_gt_neg2_TCC1-1 nil 3237052399 3245525180 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 36 30 nil nil)) (gt_div_gt_neg2 0 (gt_div_gt_neg2-1 nil 3237052399 3245525180 ("" (lemma "lt_div_lt_neg2") (("" (skosimp) (("" (inst -1 "npx!1" "nz!1" "y!1" "w!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_div_lt_neg2 formula-decl nil real_props nil)) 116 120 nil nil)) (strict_ge 0 (strict_ge-1 nil 3237052399 3245525180 ("" (tcc :defs !) nil nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil) (dichotomous? const-decl "bool" orders nil) (total_order? const-decl "bool" orders nil)) 158 150 nil nil)) (dich_ge 0 (dich_ge-1 nil 3237052399 3245525180 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 54 50 nil nil)) (zero_ge_zero 0 (zero_ge_zero-1 nil 3237052399 3245525180 ("" (tcc :defs !) nil nil) proved nil 12 20 nil nil)) (neg_ge 0 (neg_ge-1 nil 3237052399 3245525180 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 85 70 nil nil)) (pos_times_ge 0 (pos_times_ge-1 nil 3237052399 3245525181 ("" (lemma "pos_times_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_times_le formula-decl nil real_props nil)) 281 280 nil nil)) (neg_times_ge 0 (neg_times_ge-1 nil 3237052399 3245525181 ("" (lemma "neg_times_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (neg_times_le formula-decl nil real_props nil)) 295 280 nil nil)) (quotient_pos_ge 0 (quotient_pos_ge-1 nil 3237052399 3245525181 ("" (lemma "quotient_pos_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (quotient_pos_le formula-decl nil real_props nil)) 102 100 nil nil)) (quotient_neg_ge 0 (quotient_neg_ge-1 nil 3237052399 3245525181 ("" (lemma "quotient_neg_le") (("" (skosimp) (("" (grind) nil nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (quotient_neg_le formula-decl nil real_props nil)) 165 160 nil nil)) (pos_div_ge 0 (pos_div_ge-1 nil 3237052399 3245525181 ("" (lemma "pos_div_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_div_le formula-decl nil real_props nil)) 304 290 nil nil)) (neg_div_ge 0 (neg_div_ge-1 nil 3237052399 3245525182 ("" (lemma "neg_div_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (neg_div_le formula-decl nil real_props nil)) 319 310 nil nil)) (div_mult_pos_ge1 0 (div_mult_pos_ge1-1 nil 3237052399 3245525182 ("" (lemma "div_mult_pos_le2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_le2 formula-decl nil real_props nil)) 175 170 nil nil)) (div_mult_pos_ge2 0 (div_mult_pos_ge2-1 nil 3237052399 3245525182 ("" (lemma "div_mult_pos_le1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_le1 formula-decl nil real_props nil)) 186 180 nil nil)) (div_mult_neg_ge1 0 (div_mult_neg_ge1-1 nil 3237052399 3245525182 ("" (lemma "div_mult_neg_le2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_le2 formula-decl nil real_props nil)) 174 170 nil nil)) (div_mult_neg_ge2 0 (div_mult_neg_ge2-1 nil 3237052399 3245525183 ("" (lemma "div_mult_neg_le1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_le1 formula-decl nil real_props nil)) 204 170 nil nil)) (both_sides_plus_ge1 0 (both_sides_plus_ge1-1 nil 3237052399 3245525183 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 149 150 nil nil)) (both_sides_plus_ge2 0 (both_sides_plus_ge2-1 nil 3237052399 3245525183 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 144 150 nil nil)) (both_sides_minus_ge1 0 (both_sides_minus_ge1-1 nil 3237052399 3245525183 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 111 100 nil nil)) (both_sides_minus_ge2 0 (both_sides_minus_ge2-1 nil 3237052399 3245525183 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 122 110 nil nil)) (both_sides_times_pos_ge1 0 (both_sides_times_pos_ge1-1 nil 3237052399 3245525183 ("" (lemma "both_sides_times_pos_le1") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_le1 formula-decl nil real_props nil)) 168 170 nil nil)) (both_sides_times_pos_ge2 0 (both_sides_times_pos_ge2-1 nil 3237052399 3245525184 ("" (lemma "both_sides_times_pos_le2") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_le2 formula-decl nil real_props nil)) 170 170 nil nil)) (both_sides_times_neg_ge1 0 (both_sides_times_neg_ge1-1 nil 3237052399 3245525184 ("" (lemma "both_sides_times_neg_le1") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_le1 formula-decl nil real_props nil)) 181 180 nil nil)) (both_sides_times_neg_ge2 0 (both_sides_times_neg_ge2-1 nil 3237052399 3245525184 ("" (lemma "both_sides_times_neg_le2") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_le2 formula-decl nil real_props nil)) 169 170 nil nil)) (both_sides_div_pos_ge1 0 (both_sides_div_pos_ge1-1 nil 3237052399 3245525184 ("" (lemma "both_sides_div_pos_le1") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_le1 formula-decl nil real_props nil)) 168 130 nil nil)) (both_sides_div_pos_ge2 0 (both_sides_div_pos_ge2-1 nil 3237052399 3245525184 ("" (lemma "both_sides_div_pos_le2") (("" (skosimp) (("" (inst -1 "py!1" "px!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_le2 formula-decl nil real_props nil)) 178 180 nil nil)) (both_sides_div_pos_ge3 0 (both_sides_div_pos_ge3-1 nil 3237052399 3245525185 ("" (lemma "both_sides_div_pos_le3") (("" (skosimp) (("" (inst -1 "nz!1" "py!1" "px!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_le3 formula-decl nil real_props nil)) 171 170 nil nil)) (both_sides_div_neg_ge1 0 (both_sides_div_neg_ge1-1 nil 3237052399 3245525185 ("" (lemma "both_sides_div_neg_le1") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_le1 formula-decl nil real_props nil)) 145 140 nil nil)) (both_sides_div_neg_ge2 0 (both_sides_div_neg_ge2-1 nil 3237052399 3245525185 ("" (lemma "both_sides_div_neg_le2") (("" (skosimp) (("" (inst -1 "ny!1" "nx!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_le2 formula-decl nil real_props nil)) 188 190 nil nil)) (both_sides_div_neg_ge3 0 (both_sides_div_neg_ge3-1 nil 3237052399 3245525185 ("" (lemma "both_sides_div_neg_le3") (("" (skosimp) (("" (inst -1 "ny!1" "nx!1" "nz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_le3 formula-decl nil real_props nil)) 178 180 nil nil)) (ge_plus_ge 0 (ge_plus_ge-1 nil 3237052399 3245525185 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 153 150 nil nil)) (ge_minus_ge 0 (ge_minus_ge-1 nil 3237052399 3245525185 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 109 110 nil nil)) (ge_times_ge_pos 0 (ge_times_ge_pos-1 nil 3237052399 3245525186 ("" (lemma "le_times_le_pos") (("" (skosimp) (("" (inst -1 "nny!1" "nnw!1" "z!1" "x!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (le_times_le_pos formula-decl nil real_props nil)) 145 120 nil nil)) (ge_div_ge_pos_TCC1 0 (ge_div_ge_pos_TCC1-1 nil 3237052399 3245525186 ("" (tcc :defs explicit) nil nil) proved ((/= const-decl "boolean" notequal nil)) 37 40 nil nil)) (ge_div_ge_pos 0 (ge_div_ge_pos-1 nil 3237052399 3245525186 ("" (lemma "le_div_le_pos") (("" (skosimp) (("" (inst -1 "nny!1" "pw!1" "z!1" "x!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (le_div_le_pos formula-decl nil real_props nil)) 121 120 nil nil)) (ge_times_ge_neg 0 (ge_times_ge_neg-1 nil 3237052399 3245525186 ("" (lemma "le_times_le_neg") (("" (skosimp) (("" (inst -1 "npz!1" "npx!1" "y!1" "w!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (le_times_le_neg formula-decl nil real_props nil)) 124 120 nil nil)) (ge_div_ge_neg_TCC1 0 (ge_div_ge_neg_TCC1-1 nil 3237052399 3245525186 ("" (tcc :defs explicit) nil nil) proved ((/= const-decl "boolean" notequal nil)) 37 40 nil nil)) (ge_div_ge_neg 0 (ge_div_ge_neg-1 nil 3237052399 3245525186 ("" (lemma "le_div_le_neg") (("" (skosimp*) (("" (inst -1 "npx!1" "nz!1" "y!1" "w!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (le_div_le_neg formula-decl nil real_props nil)) 112 120 nil nil)) (nonzero_times1 0 (nonzero_times1-1 nil 3237052399 3245525186 ("" (lemma "zero_times3") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (zero_times3 formula-decl nil real_props nil)) 98 90 nil nil)) (nonzero_times2 0 (nonzero_times2-1 nil 3237052399 3245525186 ("" (lemma "zero_times3") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (zero_times3 formula-decl nil real_props nil)) 87 90 nil nil)) (nonzero_times3 0 (nonzero_times3-1 nil 3237052399 3245525186 ("" (lemma "zero_times3") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (zero_times3 formula-decl nil real_props nil)) 91 90 nil nil)) (eq1_gt 0 (eq1_gt-1 nil 3237052399 3245525187 ("" (skosimp) (("" (lemma "div_cancel3") (("" (inst -1 "y!1" "1" "x!1") (("1" (assert) (("1" (hide -3) (("1" (replace -1 :dir rl) (("1" (hide -1) (("1" (lemma "div_mult_pos_gt2") (("1" (inst -1 "y!1" "1" "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "zero_times3") (("2" (inst?) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((div_cancel3 formula-decl nil real_props nil) (zero_times3 formula-decl nil real_props nil) (div_mult_pos_gt2 formula-decl nil real_props nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (y!1 skolem-const-decl "real" real_props nil)) 182 170 nil nil)) (eq1_ge 0 (eq1_ge-1 nil 3237052399 3245525187 ("" (lemma "eq1_gt") (("" (skosimp) (("" (case "x!1 = 1") (("1" (assert) nil nil) ("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (eq1_gt formula-decl nil real_props nil)) 89 90 nil nil)) (eqm1_gt 0 (eqm1_gt-1 nil 3237052399 3245525187 ("" (skosimp) (("" (lemma "eq1_gt") (("" (inst -1 "x!1" "-y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((eq1_gt formula-decl nil real_props nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 94 90 nil nil)) (eqm1_ge 0 (eqm1_ge-1 nil 3237052399 3245525187 ("" (lemma "eq1_ge") (("" (skosimp) (("" (inst -1 "x!1" "-y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (eq1_ge formula-decl nil real_props nil)) 95 100 nil nil)) (eqm1_lt 0 (eqm1_lt-1 nil 3237052399 3245525187 ("" (skosimp) (("" (lemma "eq1_gt") (("" (inst -1 "-x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((eq1_gt formula-decl nil real_props nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 114 100 nil nil)) (eqm1_le 0 (eqm1_le-1 nil 3237052399 3245525187 ("" (lemma "eq1_ge") (("" (skosimp) (("" (inst -1 "-x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (eq1_ge formula-decl nil real_props nil)) 106 100 nil nil)) (sqrt_1 0 (sqrt_1-1 nil 3237052399 3245525188 ("" (skosimp*) (("" (ground) (("" (case "abs(x!1)>1") (("1" (lemma "eq1_gt") (("1" (inst -1 "abs(x!1)" "abs(x!1)") (("1" (assert) (("1" (expand "abs" 1) (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "div_mult_pos_ge1") (("2" (inst -1 "abs(x!1)" "1" "1") (("1" (ground) (("1" (lemma "eq1_ge") (("1" (inst -1 "1/abs(x!1)" "1/abs(x!1)") (("1" (assert) (("1" (split) (("1" (case "abs(x!1) = 1") (("1" (assert) (("1" (expand "abs" -1) (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (assert) (("2" (rewrite "div_mult_pos_le1") (("2" (expand "abs" 1) (("2" (lift-if) (("2" (prop) (("1" (assert) nil nil) ("2" (assert) (("2" (case "x!1 = 0") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "abs" 1) (("2" (lift-if) (("2" (prop) (("1" (rewrite "div_times") (("1" (assert) nil nil)) nil) ("2" (rewrite "div_times") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "x!1 = 0") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (expand "abs" 2) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "x!1 = 0") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (expand "abs" 2) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((div_mult_pos_ge1 formula-decl nil real_props nil) (/= const-decl "boolean" notequal nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (div_times formula-decl nil real_props nil) (eq1_ge formula-decl nil real_props nil) (posreal nonempty-type-eq-decl nil real_types nil) (x!1 skolem-const-decl "real" real_props nil) (eq1_gt formula-decl nil real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 711 710 nil nil)) (sqrt_1_lt 0 (sqrt_1_lt-1 nil 3237052399 3245525188 ("" (skosimp*) (("" (case-replace "x!1 * x!1 - 1 < 0") (("1" (hide -2) (("1" (case-replace "x!1 * x!1 - 1 = (x!1 + 1)*(x!1 - 1)") (("1" (hide -1) (("1" (lemma "pos_times_lt") (("1" (inst?) (("1" (assert) (("1" (hide -1) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (pos_times_lt formula-decl nil real_props nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 254 250 nil nil)) (sqrt_1_le 0 (sqrt_1_le-1 nil 3237052399 3245525188 ("" (skosimp*) (("" (case-replace "x!1 * x!1 - 1 <= 0") (("1" (hide -2) (("1" (case-replace "x!1 * x!1 - 1 = (x!1 + 1)*(x!1 - 1)") (("1" (hide -1) (("1" (lemma "neg_times_le") (("1" (inst?) (("1" (assert) (("1" (hide -2) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (neg_times_le formula-decl nil real_props nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 220 220 nil nil)) (idem_mult 0 (idem_mult-1 nil 3237052399 3245525189 ("" (skosimp*) (("" (ground) (("" (lemma "div_cancel3") (("" (inst -1 "x!1" "x!1" "x!1") (("" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (/= const-decl "boolean" notequal nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (div_cancel3 formula-decl nil real_props nil)) 101 100 nil nil)) (product_1 0 (product_1-1 nil 3237052399 3245525189 ("" (skosimp) (("" (case "i!1 = 0") (("1" (grind) nil nil) ("2" (case "j!1 = 0") (("1" (grind) nil nil) ("2" (lemma "eq1_ge") (("2" (inst?) (("2" (lemma "eq1_ge") (("2" (inst -1 "j!1" "i!1") (("2" (assert) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (eq1_ge formula-decl nil real_props nil)) 195 170 nil nil)) (product_m1 0 (product_m1-1 nil 3237052399 3245525189 ("" (skosimp) (("" (lemma "product_1") (("" (inst -1 "i!1" "-j!1") (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((product_1 formula-decl nil real_props nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 106 100 nil nil)) (triangle 0 (triangle-1 nil 3237052399 3245525189 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 190 190 nil nil)) (abs_mult 0 (abs_mult-1 nil 3237052399 3245525190 ("" (skosimp) (("" (lemma "neg_times_lt") (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((neg_times_lt formula-decl nil real_props nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 451 450 nil nil)) (abs_div 0 (abs_div-1 nil 3237052399 3245525190 ("" (skosimp*) (("" (lemma "pos_div_gt") (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((pos_div_gt formula-decl nil real_props nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 375 380 nil nil)) (abs_abs 0 (abs_abs-1 nil 3237052399 3245525190 ("" (skosimp*) (("" (expand "abs") (("" (lift-if) (("" (ground) nil nil)) nil)) nil)) nil) proved ((abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 39 40 nil nil)) (abs_square 0 (abs_square-1 nil 3237052399 3245525190 ("" (skosimp*) (("" (expand "abs") (("" (propax) nil nil)) nil)) nil) proved ((abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 19 20 nil nil)) (abs_limits 0 (abs_limits-1 nil 3237052399 3245525190 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 264 260 nil nil)) (axiom_of_archimedes 0 (axiom_of_archimedes-1 nil 3237052399 3245525191 ("" (lemma "real_complete") (("" (inst -1 "{x:real|EXISTS (z : int) : z=x}") (("1" (grind :if-match nil) (("1" (inst -4 "y!1 - 1") (("1" (reduce :if-match nil) (("1" (inst - "s!1 + 1") (("1" (assert) nil nil) ("2" (lemma "int_plus_int_is_int") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (reduce) nil nil)) nil) ("2" (delete 2) (("2" (grind) (("2" (inst - "0") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int nonempty-type-eq-decl nil integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (s!1 skolem-const-decl "({x: real | rational_pred(x) AND integer_pred(x)})" real_props nil) (int_plus_int_is_int subtype-tcc nil integers nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (NOT const-decl "[bool -> bool]" booleans nil) (upper_bound? const-decl "bool" bounded_real_defs nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (real_complete formula-decl nil bounded_real_defs nil)) 508 470 nil nil)) (archimedean 0 (archimedean-1 nil 3237052399 3245525191 ("" (skolem!) (("" (lemma "axiom_of_archimedes" ("x" "1/px!1")) (("" (skolem!) (("" (assert) (("" (inst + "i!1") (("" (rewrite "div_mult_pos_lt1") (("" (rewrite "div_mult_pos_lt1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (axiom_of_archimedes formula-decl nil real_props nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil)) 230 230 nil nil)))(rational_props (rational_pred_ax2 0 (rational_pred_ax2-1 nil 3243832709 3245525191 ("" (skosimp) (("" (lemma "rational_pred_ax") (("" (inst?) (("" (skosimp) (("" (case "n0j!1 > 0") (("1" (inst 1 "i!1" "n0j!1") (("1" (assert) nil nil)) nil) ("2" (inst 2 "-i!1" "-n0j!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((rational_pred_ax formula-decl nil rational_props nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (n0j!1 skolem-const-decl "nzint" rational_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (> const-decl "bool" reals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (rat nonempty-type-eq-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 145 140 t shostak)) (density_positive 0 (density_positive-1 nil 3237052399 3245525192 ("" (skosimp) (("" (assert) (("" (lemma "archimedean" ("px" "y!1 - x!1")) (("" (skolem!) (("" (lemma "posreal_mult_closed" ("x" "y!1" "y" "n!1")) (("" (ground) (("" (lemma "wf_nat") (("" (expand "well_founded?") (("" (inst -1 "LAMBDA (n : nat) : y!1 * n!1 <= n") (("" (reduce :if-match nil) (("1" (auto-rewrite "div_mult_pos_lt1" "div_mult_pos_lt2") (("1" (inst + "(y!2 - 1)/n!1") (("1" (assert) (("1" (inst - "y!2 -1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (lemma "axiom_of_archimedes" ("x" "y!1 * n!1")) (("2" (skolem!) (("2" (assert) (("2" (inst + "i!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((well_founded? const-decl "bool" orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (rat nonempty-type-eq-decl nil rationals nil) (div_mult_pos_lt2 formula-decl nil real_props nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (axiom_of_archimedes formula-decl nil real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (<= const-decl "bool" reals nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (wf_nat formula-decl nil naturalnumbers nil) (posreal_mult_closed formula-decl nil real_axioms nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (archimedean formula-decl nil real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil)) 630 630 nil nil)) (density 0 (density-1 nil 3237052399 3245525192 ("" (lemma "density_positive") (("" (skosimp) (("" (case "x!1 >= 0") (("1" (inst? -) (("1" (assert) nil nil)) nil) ("2" (lemma "axiom_of_archimedes" ("x" "-x!1")) (("2" (skosimp) (("2" (inst -2 "i!1 + x!1" "i!1 + y!1") (("2" (assert) (("2" (skosimp) (("2" (inst 2 "r!1 - i!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (axiom_of_archimedes formula-decl nil real_props nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (rat nonempty-type-eq-decl nil rationals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (density_positive formula-decl nil rational_props nil)) 182 180 nil nil)))(integer_props (integer_pred_ax 0 (integer_pred_ax-1 nil 3237052399 3245525192 ("" (skosimp*) (("" (case "i!1 >= 0") (("1" (inst 1 "i!1") nil nil) ("2" (inst 2 "-i!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (i!1 skolem-const-decl "int" integer_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil)) 81 60 nil nil)) (div_simple 0 (div_simple-1 nil 3237052399 3245525193 ("" (grind :if-match nil) (("" (inst 2 "i!1/n0j!1") (("" (assert) nil nil)) nil)) nil) proved ((numfield nonempty-type-eq-decl nil number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil)) 268 270 nil nil)) (lub_nat_TCC1 0 (lub_nat_TCC1-1 nil 3237052399 3245525193 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (set type-eq-decl nil sets nil) (extend const-decl "R" extend nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 123 110 nil nil)) (lub_nat 0 (lub_nat-1 nil 3237052399 3245525193 ("" (induct "m") (("1" (skosimp*) (("1" (expand "upper_bound?") (("1" (typepred "N!1") (("1" (expand "nonempty?") (("1" (expand "empty?") (("1" (skosimp*) (("1" (expand "member") (("1" (inst 1 "x!1") (("1" (expand "least_upper_bound?") (("1" (split) (("1" (expand "upper_bound?") (("1" (skosimp*) (("1" (inst -2 "s!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "upper_bound?") (("2" (inst -1 "x!1") (("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -1 "N!1") (("2" (assert) (("2" (replace 1) (("2" (assert) (("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (inst 2 "s!1") (("1" (expand "least_upper_bound?") (("1" (split) (("1" (expand "upper_bound?") (("1" (skosimp*) (("1" (inst -1 "s!2") (("1" (assert) (("1" (case "forall (i, j: int): i < j iff i + 1 <= j") (("1" (inst -1 "s!1" "s!2") (("1" (assert) nil nil) ("2" (typepred "s!2") (("2" (expand "extend") (("2" (prop) nil nil)) nil)) nil) ("3" (typepred "s!1") (("3" (expand "extend") (("3" (prop) nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (expand "upper_bound?") (("2" (inst -1 "s!1") nil nil)) nil)) nil)) nil)) nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp) (("3" (skosimp) (("3" (expand "nonempty?") (("3" (expand "empty?") (("3" (typepred "N!1") (("3" (expand "nonempty?") (("3" (expand "empty?") (("3" (skosimp) (("3" (inst -3 "x!1") (("3" (expand "member") (("3" (expand "extend") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp) (("4" (typepred "N!1") (("4" (expand "nonempty?") (("4" (expand "empty?") (("4" (skosimp) (("4" (expand "member") (("4" (inst -2 "x!1") (("4" (expand "extend") (("4" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((IFF const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (s!2 skolem-const-decl "(extend[real, nat, bool, FALSE](N!1))" integer_props nil) (s!1 skolem-const-decl "(extend[real, nat, bool, FALSE](N!1))" integer_props nil) (N!1 skolem-const-decl "(nonempty?[nat])" integer_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (x!1 skolem-const-decl "nat" integer_props nil) (N!1 skolem-const-decl "(nonempty?[nat])" integer_props nil) (nat_induction formula-decl nil naturalnumbers nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (pred type-eq-decl nil defined_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (upper_bound? const-decl "bool" bounded_real_defs nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil)) 614 580 nil nil)) (lub_int_TCC1 0 (lub_int_TCC1-1 nil 3237052399 3245525194 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (set type-eq-decl nil sets nil) (extend const-decl "R" extend nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 110 100 nil nil)) (lub_int 0 (lub_int-1 nil 3237052399 3245525194 ("" (skosimp*) (("" (typepred "I!1") (("" (expand "nonempty?") (("" (expand "empty?") (("" (skosimp*) (("" (lemma "lub_nat") (("" (expand "member") (("" (inst - "{n|I!1(n+x!1)}" "i!1-x!1") (("1" (prop) (("1" (skosimp*) (("1" (inst + "n!1+x!1") (("1" (assert) (("1" (expand "least_upper_bound?") (("1" (prop) (("1" (expand "upper_bound?") (("1" (skosimp*) (("1" (assert) (("1" (inst - "s!1-x!1") (("1" (assert) nil nil) ("2" (assert) (("2" (expand "extend") (("2" (split 1) (("1" (flatten) (("1" (typepred "s!1") (("1" (expand "extend") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (prop) (("1" (lemma "rat_minus_rat_is_rat") (("1" (inst?) nil nil)) nil) ("2" (lemma "int_minus_int_is_int") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "y!1-x!1") (("2" (assert) (("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (inst?) (("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (typepred "s!1") (("2" (expand "extend" -1) (("2" (prop) (("2" (inst - "s!1+x!1") (("1" (assert) nil nil) ("2" (expand "extend" 1) (("2" (prop) (("1" (lemma "rat_plus_rat_is_rat") (("1" (inst?) nil nil)) nil) ("2" (lemma "int_plus_int_is_int") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (expand "upper_bound?") (("2" (inst -2 "x!1") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("3" (expand "nonempty?") (("3" (expand "empty?") (("3" (inst -1 "0") (("3" (expand "member") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (empty? const-decl "bool" sets nil) (lub_nat formula-decl nil integer_props nil) (x!1 skolem-const-decl "int" integer_props nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (I!1 skolem-const-decl "(nonempty?[int])" integer_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (i!1 skolem-const-decl "int" integer_props nil) (int_plus_int_is_int subtype-tcc nil integers nil) (rat_plus_rat_is_rat subtype-tcc nil rationals nil) (s!1 skolem-const-decl "(extend[real, nat, bool, FALSE]({n | I!1(n + x!1)}))" integer_props nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (s!1 skolem-const-decl "(extend[real, int, bool, FALSE](I!1))" integer_props nil) (rat nonempty-type-eq-decl nil rationals nil) (rat_minus_rat_is_rat subtype-tcc nil rationals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (int_minus_int_is_int subtype-tcc nil integers nil) (upper_bound? const-decl "bool" bounded_real_defs nil) (n!1 skolem-const-decl "({n | I!1(n + x!1)})" integer_props nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (member const-decl "bool" sets nil)) 691 690 nil nil)) (glb_nat 0 (glb_nat-1 nil 3237052399 3245525195 ("" (lemma "lub_int") (("" (skosimp*) (("" (inst -1 "{i: nonpos_int | N!1(-i)}" "0") (("1" (grind :if-match nil) (("1" (inst 1 "-j!1") (("1" (prop) (("1" (skosimp*) (("1" (inst -3 "-s!1") (("1" (assert) nil nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (assert) (("2" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) (("3" (lemma "minus_rat_is_rat") (("3" (inst -1 "s!1") nil nil)) nil)) nil) ("4" (lemma "minus_int_is_int") (("4" (inst -1 "s!1") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -3) (("2" (skosimp*) (("2" (inst -4 "-y!1") (("2" (prop) (("1" (assert) nil nil) ("2" (skosimp*) (("2" (inst -1 "-s!1") (("1" (assert) nil nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (prop) (("1" (lemma "minus_rat_is_rat") (("1" (inst -1 "s!1") nil nil)) nil) ("2" (lemma "minus_int_is_int") (("2" (inst -1 "s!1") (("2" (assert) nil nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "extend") (("2" (typepred "N!1") (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (skosimp*) (("2" (inst -2 "-x!1") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (greatest_lower_bound? const-decl "bool" bounded_real_defs nil) (lower_bound? const-decl "bool" bounded_real_defs nil) (upper_bound? const-decl "bool" bounded_real_defs nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (s!1 skolem-const-decl "(extend[real, nat, bool, FALSE](N!1))" integer_props nil) (minus_rat_is_rat subtype-tcc nil rationals nil) (rat nonempty-type-eq-decl nil rationals nil) (minus_int_is_int subtype-tcc nil integers nil) (s!1 skolem-const-decl "(extend[real, int, bool, FALSE]
     (extend[int, nonpos_int, bool, FALSE]({i: nonpos_int | N!1(-i)})))" integer_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) (<= const-decl "bool" reals nil) (nonpos_int nonempty-type-eq-decl nil integers nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N!1 skolem-const-decl "(nonempty?[nat])" integer_props nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (lub_int formula-decl nil integer_props nil)) 782 720 nil nil)) (glb_int 0 (glb_int-1 nil 3237052399 3245525196 ("" (lemma "lub_int") (("" (skosimp*) (("" (inst -1 "{i: int | I!1(-i)}" "-i!1") (("1" (prop) (("1" (skosimp*) (("1" (grind :if-match nil) (("1" (inst 1 "-j!1") (("1" (prop) (("1" (skosimp*) (("1" (inst -1 "-s!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2) (("2" (typepred "s!1") (("2" (expand "extend") (("2" (assert) (("2" (prop) (("1" (assert) nil nil) ("2" (lemma "minus_rat_is_rat") (("2" (inst -1 "s!1") nil nil)) nil) ("3" (lemma "minus_int_is_int") (("3" (inst -1 "s!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -3 "-y!1") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "-s!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3) (("2" (typepred "s!1") (("2" (expand "extend") (("2" (assert) (("2" (ground) (("1" (lemma "minus_rat_is_rat") (("1" (inst -1 "s!1") nil nil)) nil) ("2" (lemma "minus_int_is_int") (("2" (inst -1 "s!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind :if-match nil) (("2" (inst -4 "-s!1") (("1" (assert) nil nil) ("2" (hide -1 -2 -3 2) (("2" (typepred "s!1") (("2" (expand "extend") (("2" (ground) (("1" (lemma "minus_rat_is_rat") (("1" (inst -1 "s!1") nil nil)) nil) ("2" (lemma "minus_int_is_int") (("2" (inst -1 "s!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (typepred "I!1") (("2" (grind :if-match nil) (("2" (inst -3 "-x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (greatest_lower_bound? const-decl "bool" bounded_real_defs nil) (lower_bound? const-decl "bool" bounded_real_defs nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (upper_bound? const-decl "bool" bounded_real_defs nil) (s!1 skolem-const-decl "(extend[real, int, bool, FALSE](I!1))" integer_props nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_int_is_int subtype-tcc nil integers nil) (minus_rat_is_rat subtype-tcc nil rationals nil) (rat nonempty-type-eq-decl nil rationals nil) (s!1 skolem-const-decl "(extend[real, int, bool, FALSE]({i: int | I!1(-i)}))" integer_props nil) (s!1 skolem-const-decl "(extend[real, int, bool, FALSE]({i: int | I!1(-i)}))" integer_props nil) (TRUE const-decl "bool" booleans nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) (I!1 skolem-const-decl "(nonempty?[int])" integer_props nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (lub_int formula-decl nil integer_props nil)) 675 640 nil nil)))(floor_ceil (floor_exists 0 (floor_exists-1 nil 3237052399 3245525196 ("" (skosimp*) (("" (lemma "lub_int") (("" (lemma "axiom_of_archimedes") (("" (inst?) (("" (skosimp*) (("" (inst - "{i|i<=x!1}" "i!1") (("1" (prop) (("1" (expand "least_upper_bound?") (("1" (skolem-typepred) (("1" (inst?) (("1" (prop) (("1" (expand "upper_bound?") (("1" (inst - "j!1+1") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "upper_bound?") (("2" (skolem-typepred) (("2" (expand "extend") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite "nonempty_exists") (("2" (lemma "axiom_of_archimedes") (("2" (inst - "abs(x!1)") (("2" (skosimp*) (("2" (inst + "-i!2") (("2" (expand "abs") (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((lub_int formula-decl nil integer_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (x!1 skolem-const-decl "real" floor_ceil nil) (<= const-decl "bool" reals nil) (integer nonempty-type-from-decl nil integers nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (upper_bound? const-decl "bool" bounded_real_defs nil) (j!1 skolem-const-decl "({i | i <= x!1})" floor_ceil nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (i!2 skolem-const-decl "int" floor_ceil nil) (- const-decl "[numfield -> numfield]" number_fields nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (nonempty_exists formula-decl nil sets_lemmas nil) (axiom_of_archimedes formula-decl nil real_props nil)) 306 300 nil nil)) (ceiling_exists 0 (ceiling_exists-1 nil 3237052399 3245525196 ("" (skosimp*) (("" (case "integer?(x!1)") (("1" (inst?) (("1" (assert) nil nil) ("2" (assert) (("2" (expand "integer?") (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (lemma "floor_exists") (("2" (inst?) (("2" (skosimp*) (("2" (inst + "i!1+1") (("2" (assert) (("2" (expand "integer?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (integer? const-decl "bool" integers nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (integer nonempty-type-from-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (x!1 skolem-const-decl "real" floor_ceil nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (floor_exists formula-decl nil floor_ceil nil)) 97 100 nil nil)) (floor_TCC1 0 (floor_TCC1-1 nil 3237052399 3245525196 ("" (inst + "lambda x: choose( {i: integer | i <= x & x < 1 + i})") (("" (expand "nonempty?") (("" (expand "empty?") (("" (expand "member") (("" (lemma "floor_exists") (("" (skosimp*) (("" (inst?) (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (floor_exists formula-decl nil floor_ceil nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 170 170 nil nil)) (fractional_TCC1 0 (fractional_TCC1-1 nil 3237052399 3245525196 ("" (tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 114 120 nil nil)) (ceiling_TCC1 0 (ceiling_TCC1-1 nil 3237052399 3245525197 ("" (inst + "lambda x: choose( {i: integer | x <= i & i < x + 1})") (("" (expand "nonempty?") (("" (expand "empty?") (("" (expand "member") (("" (lemma "ceiling_exists") (("" (skosimp*) (("" (inst - "x!1") (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (ceiling_exists formula-decl nil floor_ceil nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 118 120 nil nil)) (floor_def 0 (floor_def-1 nil 3237052399 3245525197 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 140 140 nil nil)) (ceiling_def 0 (ceiling_def-1 nil 3237052399 3245525197 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 128 130 nil nil)) (floor_ceiling_reflect1 0 (floor_ceiling_reflect1-1 nil 3237052399 3245525197 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 77 80 nil nil)) (floor_ceiling_reflect2 0 (floor_ceiling_reflect2-1 nil 3237052399 3245525197 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 78 80 nil nil)) (nonneg_floor_is_nat 0 (nonneg_floor_is_nat-1 nil 3237052399 3245525197 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil)) 67 30 nil nil)) (nonneg_ceiling_is_nat 0 (nonneg_ceiling_is_nat-1 nil 3237052399 3245525197 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil)) 42 40 nil nil)) (floor_int 0 (floor_int-1 nil 3237052399 3245525197 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil)) 43 50 nil nil)) (ceiling_int 0 (ceiling_int-1 nil 3237052399 3245525197 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil)) 43 40 nil nil)) (floor_plus_int 0 (floor_plus_int-1 nil 3237052399 3245525198 ("" (skolem!) (("" (name "j!1" "floor(x!1+i!1)") (("" (name "k!1" "floor(x!1)") (("" (typepred "floor(i!1 + x!1)") (("" (typepred "floor(x!1)") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil)) 319 310 nil nil)) (ceiling_plus_int 0 (ceiling_plus_int-1 nil 3237052399 3245525198 ("" (skolem!) (("" (lemma "ceiling_def") (("" (inst-cp - "x!1+i!1") (("" (flatten) (("" (name "j!1" "ceiling(x!1)") (("" (name "k!1" "ceiling(x!1+i!1)") (("" (replace -1) (("" (replace -2) (("" (inst - "x!1") (("" (replace -2) (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((ceiling_def formula-decl nil floor_ceil nil) (= const-decl "[T, T -> boolean]" equalities nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 284 280 nil nil)) (floor_ceiling_nonint 0 (floor_ceiling_nonint-1 nil 3237052399 3245525198 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (integer? const-decl "bool" integers nil)) 104 110 nil nil)) (floor_ceiling_int 0 (floor_ceiling_int-1 nil 3237052399 3245525198 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil)) 50 50 nil nil)) (floor_neg 0 (floor_neg-1 nil 3237052399 3245525198 ("" (skosimp*) (("" (lift-if) (("" (prop) (("1" (rewrite "floor_int") (("1" (rewrite "floor_int") (("1" (assert) nil nil) ("2" (rewrite "closed_neg") (("1" (assert) (("1" (expand "integer?") (("1" (flatten) (("1" (rewrite "closed_neg") nil nil)) nil)) nil)) nil) ("2" (expand "integer?") (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (expand "integer?") (("2" (propax) nil nil)) nil)) nil) ("2" (expand "integer?") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (floor_int formula-decl nil floor_ceil nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil) (rat nonempty-type-eq-decl nil rationals nil) (closed_neg formula-decl nil rationals nil) (integer? const-decl "bool" integers nil) (int nonempty-type-eq-decl nil integers nil) (closed_neg formula-decl nil integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil)) 184 180 nil nil)) (real_parts 0 (real_parts-1 nil 3237052399 3245525198 ("" (expand "fractional") (("" (propax) nil nil)) nil) proved ((fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)) 25 30 nil nil)) (floor_plus 0 (floor_plus-2 "" 3237078783 3245525199 ("" (skosimp) (("" (expand "fractional") (("" (lemma "floor_plus_int") (("" (inst -1 "-1 * floor(x!1) - floor(y!1)" "x!1 + y!1") (("" (replace -1) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (floor_plus_int formula-decl nil floor_ceil nil)) 477 480 t shostak) (floor_plus-1 nil 3237052399 3237078567 ("" (skolem!) (("" (expand "fractional") (("" (assert) nil nil)) nil)) nil) proved ((fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (floor_plus_int formula-decl nil floor_ceil nil)) 690739 197480 nil nil)) (ceiling_plus 0 (ceiling_plus-1 nil 3237052399 3245525200 ("" (skolem!) (("" (expand "fractional") (("" (lemma "ceiling_plus_int") (("" (inst-cp -1 "-floor(x!1) - floor(y!1)" "x!1 + y!1") (("" (replace -2) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (ceiling_plus_int formula-decl nil floor_ceil nil)) 582 550 nil nil)) (floor_split 0 (floor_split-1 nil 3237052399 3245525200 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil)) 227 230 nil nil)) (floor_within_1 0 (floor_within_1-1 nil 3237052399 3245525200 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 74 70 nil nil)) (ceiling_within_1 0 (ceiling_within_1-1 nil 3237052399 3245525200 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 82 80 nil nil)) (floor_val 0 (floor_val-1 nil 3237052399 3245525201 ("" (grind :if-match nil) (("" (typepred "floor(i!1/j!1)") (("" (case "j!1 > 0") (("1" (case "i!1/j!1 >= k!1" "i!1/j!1 < k!1 + 1") (("1" (name-replace "q" "i!1/j!1") (("1" (hide -3 -6 -7 -8 -9 1) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (hide -1 -2 -3 -4 -5 -6 -7 2 3) (("2" (assert) (("2" (use "div_mult_pos_lt1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (hide -1 -2 -3 -4 -5 -7 2 3) (("3" (use "div_mult_pos_ge1") (("3" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved ((/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (rat nonempty-type-eq-decl nil rationals nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (div_mult_pos_ge1 formula-decl nil real_props nil) (> const-decl "bool" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nonzero_integer nonempty-type-eq-decl nil integers nil)) 612 610 nil nil)) (floor_small 0 (floor_small-1 nil 3237052399 3245525202 ("" (skosimp) (("" (lift-if) (("" (prop) (("1" (case "i!1/j!1 < 1") (("1" (assert) nil nil) ("2" (hide 2) (("2" (case "(j!1 - i!1)/j!1 > 0") (("1" (assert) nil nil) ("2" (grind) (("1" (use "pos_div_gt") (("1" (assert) nil nil)) nil) ("2" (use "pos_div_gt") (("2" (assert) nil nil)) nil) ("3" (use "pos_div_gt") (("3" (assert) nil nil)) nil) ("4" (use "pos_div_gt") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "floor(i!1/j!1)") (("2" (case "i!1/j!1 >= -1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3) (("2" (case "(i!1 + j!1)/j!1 >= 0") (("1" (assert) nil nil) ("2" (hide 2) (("2" (grind :if-match nil) (("1" (use "pos_div_ge") (("1" (assert) nil nil)) nil) ("2" (use "pos_div_ge") (("2" (assert) nil nil)) nil) ("3" (use "pos_div_ge") (("3" (assert) nil nil)) nil) ("4" (use "pos_div_ge") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (pos_div_ge formula-decl nil real_props nil) (- const-decl "[numfield -> numfield]" number_fields nil) (>= const-decl "bool" reals nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (> const-decl "bool" reals nil) (pos_div_gt formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 1367 1290 nil nil)) (floor_eq_0 0 (floor_eq_0-1 nil 3237052399 3245525202 ("" (skosimp) (("" (typepred "floor(x!1)") (("" (assert) nil nil)) nil)) nil) proved ((floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 106 100 nil nil)))(exponentiation (expt_TCC1 0 (expt_TCC1-1 nil 3237052399 3245525202 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 61 60 nil nil)) (expt_TCC2 0 (expt_TCC2-1 nil 3237052399 3245525202 ("" (grind) nil nil) proved nil 17 20 nil nil)) (expt_pos_aux 0 (expt_pos_aux-1 nil 3237052399 3245525202 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (rewrite "pos_times_gt") nil nil)) nil)) nil)) nil)) nil) proved ((pos_times_gt formula-decl nil real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 87 90 nil nil)) (expt_nonzero_aux 0 (expt_nonzero_aux-1 nil 3237052399 3245525203 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" -2) (("2" (inst?) (("2" (rewrite "zero_times3") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((zero_times3 formula-decl nil real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 87 80 nil nil)) (nnreal_expt 0 (nnreal_expt-1 nil 3237052399 3245525203 ("" (induct "n") (("1" (skosimp) (("1" (expand "expt") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst -1 "x!1") (("2" (assert) (("2" (lemma "pos_times_ge") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pos_times_ge formula-decl nil real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (nnreal type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 156 160 nil nil)) (posreal_expt 0 (posreal_expt-1 nil 3237052399 3245525203 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (inst -1 "x!1") (("2" (expand "expt" +) (("2" (assert) (("2" (lemma "pos_times_gt") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pos_times_gt formula-decl nil real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 172 140 nil nil)) (nzreal_expt 0 (nzreal_expt-1 nil 3237052399 3245525203 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" -2) (("2" (inst -1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 135 130 nil nil)) (rat_expt 0 (rat_expt-1 nil 3237052399 3245525203 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (inst -1 "x!1") (("2" (expand "expt" +) (("2" (lemma "rat_times_rat_is_rat") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((j!1 skolem-const-decl "nat" exponentiation nil) (x!1 skolem-const-decl "rat" exponentiation nil) (rat_times_rat_is_rat subtype-tcc nil rationals nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (rat nonempty-type-eq-decl nil rationals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 189 180 nil nil)) (nnrat_expt 0 (nnrat_expt-1 nil 3237052399 3245525203 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nnrat nonempty-type-eq-decl nil rationals nil)) 69 70 nil nil)) (posrat_expt 0 (posrat_expt-1 nil 3237052399 3245525203 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil)) 70 70 nil nil)) (int_expt 0 (int_expt-1 nil 3237052399 3245525204 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (inst -1 "x!1") (("2" (expand "expt" +) (("2" (lemma "int_times_int_is_int") (("2" (inst -1 "x!1" "expt(x!1, j!1)") nil nil)) nil)) nil)) nil)) nil)) nil) proved ((x!1 skolem-const-decl "int" exponentiation nil) (j!1 skolem-const-decl "nat" exponentiation nil) (int_times_int_is_int subtype-tcc nil integers nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 190 190 nil nil)) (nat_expt 0 (nat_expt-1 nil 3237052399 3245525204 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 93 90 nil nil)) (posnat_expt 0 (posnat_expt-1 nil 3237052399 3245525204 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil)) 92 80 nil nil)) (caret_TCC1 0 (caret_TCC1-1 nil 3237052399 3245525204 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil)) 120 120 nil nil)) (caret_TCC2 0 (caret_TCC2-1 nil 3237052399 3245525204 ("" (skolem!) (("" (typepred "i!1") (("" (rewrite "expt_nonzero_aux") nil nil)) nil)) nil) proved ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (/= const-decl "boolean" notequal nil) (number nonempty-type-decl nil numbers nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (nzreal nonempty-type-eq-decl nil reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (expt_nonzero_aux formula-decl nil exponentiation nil)) 119 120 nil nil)) (expt_pos_TCC1 0 (expt_pos_TCC1-1 nil 3237052399 3245525204 ("" (tcc :defs !) nil nil) proved nil 62 60 nil nil)) (expt_pos 0 (expt_pos-1 nil 3237052399 3245525204 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (rewrite "expt_pos_aux") nil nil) ("2" (rewrite "quotient_pos_gt") (("2" (rewrite "expt_pos_aux") nil nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (expt_pos_aux formula-decl nil exponentiation nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (quotient_pos_gt formula-decl nil real_props nil)) 158 140 nil nil)) (expt_nonzero_TCC1 0 (expt_nonzero_TCC1-1 nil 3237052399 3245525204 ("" (grind) nil nil) proved nil 61 60 nil nil)) (expt_nonzero 0 (expt_nonzero-1 nil 3237052399 3245525205 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (lemma "expt_nonzero_aux") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "inv_ne_0") (("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (i!1 skolem-const-decl "int" exponentiation nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil) (expt_nonzero_aux formula-decl nil exponentiation nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (expt def-decl "real" exponentiation nil) (inv_ne_0 formula-decl nil real_props nil)) 187 180 nil nil)) (nnreal_exp 0 (nnreal_exp-1 nil 3237052399 3245525205 ("" (skolem-typepred) (("" (expand "^") (("" (lift-if) (("" (split 1) (("1" (flatten) (("1" (case-replace "x!1 = 0") (("1" (expand "expt") (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil) ("2" (use "expt_pos_aux") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (case-replace "x!1 = 0") (("1" (expand "expt") (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil) ("2" (use "expt_pos_aux") (("1" (lemma "quotient_pos_gt") (("1" (inst -1 "expt(x!1, -i!1)") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (expt def-decl "real" exponentiation nil) (x!1 skolem-const-decl "nnreal" exponentiation nil) (i!1 skolem-const-decl "{i: int | x!1 /= 0 OR i >= 0}" exponentiation nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (expt_pos_aux formula-decl nil exponentiation nil) (quotient_pos_gt formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 370 370 nil nil)) (posreal_exp 0 (posreal_exp-1 nil 3237052399 3245525205 ("" (skolem-typepred) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (use "expt_pos_aux") nil nil) ("2" (use "expt_pos_aux") (("1" (lemma "quotient_pos_gt") (("1" (inst -1 "expt(x!1, -i!1)") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (expt_pos_aux formula-decl nil exponentiation nil) (i!1 skolem-const-decl "int" exponentiation nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (quotient_pos_gt formula-decl nil real_props nil) (/= const-decl "boolean" notequal nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (expt def-decl "real" exponentiation nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 216 200 nil nil)) (nzreal_exp 0 (nzreal_exp-1 nil 3237052399 3245525205 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (lemma "nzreal_expt") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "nzreal_expt") (("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (i!1 skolem-const-decl "int" exponentiation nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil) (nzreal_expt subtype-tcc nil exponentiation nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil)) 175 180 nil nil)) (rat_exp 0 (rat_exp-1 nil 3237052399 3245525206 ("" (skolem-typepred) (("" (expand "^") (("" (propax) nil nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (>= const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (rat nonempty-type-eq-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 141 130 nil nil)) (nnrat_exp 0 (nnrat_exp-1 nil 3237052399 3245525206 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nnrat nonempty-type-eq-decl nil rationals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil)) 114 110 nil nil)) (posrat_exp_TCC1 0 (posrat_exp_TCC1-1 nil 3237052399 3245525206 ("" (subtype-tcc) nil nil) proved nil 69 70 nil nil)) (posrat_exp 0 (posrat_exp-1 nil 3237052399 3245525206 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil)) 111 110 nil nil)) (int_exp_TCC1 0 (int_exp_TCC1-1 nil 3237052399 3245525206 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 77 80 nil nil)) (int_exp 0 (int_exp-1 nil 3237052399 3245525206 ("" (subtype-tcc) nil nil) proved ((^ const-decl "real" exponentiation nil)) 107 80 nil nil)) (nat_exp_TCC1 0 (nat_exp_TCC1-1 nil 3237052399 3245525206 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 80 80 nil nil)) (nat_exp 0 (nat_exp-1 nil 3237052399 3245525206 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (^ const-decl "real" exponentiation nil)) 119 120 nil nil)) (posint_exp_TCC1 0 (posint_exp_TCC1-1 nil 3237052399 3245525207 ("" (subtype-tcc) nil nil) proved nil 77 80 nil nil)) (posint_exp 0 (posint_exp-1 nil 3237052399 3245525207 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posint nonempty-type-eq-decl nil integers nil) (^ const-decl "real" exponentiation nil)) 127 130 nil nil)) (expt_x0_aux 0 (expt_x0_aux-1 nil 3237052399 3245525207 ("" (tcc :defs !) nil nil) proved ((expt def-decl "real" exponentiation nil)) 81 80 nil nil)) (expt_x1_aux 0 (expt_x1_aux-1 nil 3237052399 3245525207 ("" (tcc :defs !) nil nil) proved ((expt def-decl "real" exponentiation nil)) 83 80 nil nil)) (expt_1n_aux 0 (expt_1n_aux-1 nil 3237052399 3245525207 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (assert) nil nil)) nil)) nil)) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 176 180 nil nil)) (increasing_expt_aux 0 (increasing_expt_aux-1 nil 3237052399 3245525208 ("" (induct "m") (("1" (skosimp*) (("1" (expand "expt") (("1" (expand "expt") (("1" (expand "expt") (("1" (lemma "both_sides_times_pos_gt1") (("1" (inst -1 "gt1x!1" "gt1x!1" "1") (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (expand "expt" 1) (("2" (lemma "div_mult_pos_gt1") (("2" (inst -1 "gt1x!1" "expt(gt1x!1, j!1 + 2)" "gt1x!1") (("2" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((div_mult_pos_gt1 formula-decl nil real_props nil) (both_sides_times_pos_gt1 formula-decl nil real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 498 490 nil nil)) (decreasing_expt_aux 0 (decreasing_expt_aux-1 nil 3237052399 3245525208 ("" (induct "m") (("1" (skosimp) (("1" (expand "expt") (("1" (expand "expt") (("1" (expand "expt") (("1" (lemma "div_mult_pos_lt2") (("1" (inst -1 "lt1x!1" "lt1x!1" "lt1x!1") (("1" (prop) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (expand "expt" +) (("2" (lemma "div_mult_pos_gt2") (("2" (inst -1 "lt1x!1" "expt(lt1x!1, 2 + j!1)" "lt1x!1") (("2" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((div_mult_pos_gt2 formula-decl nil real_props nil) (div_mult_pos_lt2 formula-decl nil real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 541 520 nil nil)) (expt_1_aux 0 (expt_1_aux-1 nil 3237052399 3245525209 ("" (induct "n") (("1" (skosimp*) (("1" (prop) (("1" (expand "expt") (("1" (expand "expt") (("1" (propax) nil nil)) nil)) nil) ("2" (expand "expt") (("2" (expand "expt") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (inst -1 "px!1") (("2" (expand "expt" +) (("2" (ground) (("2" (case "j!1 = 0") (("1" (replace -1) (("1" (expand "expt") (("1" (expand "expt") (("1" (assert) (("1" (rewrite "sqrt_1") nil nil)) nil)) nil)) nil)) nil) ("2" (case "px!1 > 1") (("1" (lemma "increasing_expt_aux") (("1" (inst -1 "px!1" "j!1-1") (("1" (assert) (("1" (lemma "eq1_gt") (("1" (inst -1 "px!1" "expt(px!1, 1 + j!1)") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (lemma "decreasing_expt_aux") (("2" (inst -1 "px!1" "j!1-1") (("1" (lemma "eq1_gt") (("1" (inst -1 "1/px!1" "1/expt(px!1, 1 + j!1)") (("1" (assert) (("1" (split) (("1" (rewrite "div_mult_pos_lt1") nil nil) ("2" (assert) (("2" (rewrite "div_mult_pos_gt2") nil nil)) nil) ("3" (assert) (("3" (rewrite "div_times") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((px!1 skolem-const-decl "posreal" exponentiation nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (j!1 skolem-const-decl "nat" exponentiation nil) (eq1_gt formula-decl nil real_props nil) (increasing_expt_aux formula-decl nil exponentiation nil) (< const-decl "bool" reals nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (div_mult_pos_gt2 formula-decl nil real_props nil) (decreasing_expt_aux formula-decl nil exponentiation nil) (sqrt_1 formula-decl nil real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 625 600 nil nil)) (expt_plus_aux 0 (expt_plus_aux-1 nil 3237052399 3245525209 ("" (induct "n") (("1" (skosimp*) (("1" (expand "expt" 1 3) (("1" (propax) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "expt" 1 3) (("2" (expand "expt" 1 1) (("2" (inst -1 "m!1" "n0x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 383 380 nil nil)) (expt_minus_aux_TCC1 0 (expt_minus_aux_TCC1-1 nil 3237052399 3245525209 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 153 160 nil nil)) (expt_minus_aux 0 (expt_minus_aux-1 nil 3237052399 3245525210 ("" (induct "m") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (case "j!1 + 1 = n!1") (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (expand "expt" 2 1) (("2" (expand "expt" 2 2) (("2" (assert) (("2" (inst?) (("2" (assert) (("2" (replace -1) (("2" (rewrite "times_div1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil) proved ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat_induction formula-decl nil naturalnumbers nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil)) 681 650 nil nil)) (expt_times_aux 0 (expt_times_aux-1 nil 3237052399 3245525211 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" 1 2) (("2" (expand "expt" 1 1) (("2" (lift-if) (("2" (inst -1 "m!1" "n0x!1") (("2" (replace -1 :dir rl) (("2" (prop) (("1" (assert) (("1" (case "m!1 = 0") (("1" (replace -1) (("1" (grind) nil nil)) nil) ("2" (case "j!1 = 0") (("1" (assert) nil nil) ("2" (lemma "posreal_mult_closed") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (case "m!1 = 0") (("1" (grind) nil nil) ("2" (case "j!1 = 0") (("1" (replace -1) (("1" (expand "expt" 3 3) (("1" (expand "expt" 3 2) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (lemma "expt_plus_aux") (("2" (inst -1 "m!1" "m!1 * j!1" "n0x!1") (("2" (replace -1 :dir rl) (("2" (expand "expt" 3 2) (("2" (lift-if) (("2" (assert) (("2" (assert) (("2" (prop) (("2" (lemma "zero_times3") (("2" (inst -1 "m!1" "j!1 + 1") (("2" (replace -2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (expt_plus_aux formula-decl nil exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 665 660 nil nil)) (expt_divide_aux 0 (expt_divide_aux-1 nil 3237052399 3245525211 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" 1 2) (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (case "expt(n0x!1, j!1 * m!1 + m!1) = expt(n0x!1, m!1) * expt(n0x!1, m!1 * j!1)") (("1" (assert) nil nil) ("2" (hide 2) (("2" (rewrite "expt_plus_aux") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (expt_plus_aux formula-decl nil exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (expt def-decl "real" exponentiation nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 601 580 nil nil)) (both_sides_expt1_aux 0 (both_sides_expt1_aux-1 nil 3237052399 3245525212 ("" (induct "m") (("1" (skosimp) (("1" (expand "expt") (("1" (expand "expt" 1 1) (("1" (ground) (("1" (case "px!1 > 1") (("1" (lemma "increasing_expt_aux") (("1" (inst -1 "px!1" "n!1-1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "decreasing_expt_aux") (("2" (inst -1 "px!1" "n!1-1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand "expt") (("2" (propax) nil nil)) nil) ("3" (replace -1) (("3" (rewrite "expt_1n_aux") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (expand "expt" 1 1) (("2" (expand "expt" 1 2) (("2" (case "n!1 = 0") (("1" (replace -1) (("1" (ground) (("1" (expand "expt" -1 2) (("1" (case "px!1 >1") (("1" (lemma "increasing_expt_aux") (("1" (inst -1 "px!1" "j!1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "decreasing_expt_aux") (("2" (inst -1 "px!1" "j!1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (rewrite "expt_1n_aux") (("2" (rewrite "expt_1n_aux") nil nil)) nil)) nil)) nil)) nil) ("2" (ground) (("1" (inst -2 "n!1-1" "px!1") (("1" (assert) (("1" (rewrite "both_sides_times2") nil nil)) nil)) nil) ("2" (replace -1) (("2" (rewrite "expt_1n_aux") (("2" (rewrite "expt_1n_aux") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((px!1 skolem-const-decl "posreal" exponentiation nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (both_sides_times2 formula-decl nil real_props nil) (expt_1n_aux formula-decl nil exponentiation nil) (px!1 skolem-const-decl "posreal" exponentiation nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (increasing_expt_aux formula-decl nil exponentiation nil) (< const-decl "bool" reals nil) (decreasing_expt_aux formula-decl nil exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 772 770 nil nil)) (both_sides_expt2_aux 0 (both_sides_expt2_aux-1 nil 3237052399 3245525213 ("" (induct "pm") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (skosimp) (("3" (skosimp) (("3" (split) (("1" (expand "expt" +) (("1" (inst -1 "px!1" "py!1") (("1" (ground) (("1" (hide 1) (("1" (hide -2) (("1" (case "FORALL (m:nat), (px, py: posreal): px > py IMPLIES expt(px,m+1) > expt(py, m+1)") (("1" (case "px!1>py!1") (("1" (inst -2 "j!1-1" "px!1" "py!1") (("1" (assert) (("1" (lemma "gt_times_gt_pos1") (("1" (inst -1 "expt(py!1, j!1)" "py!1" "px!1" "expt(px!1, j!1)") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (expand "expt" +) (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (inst -1 "j!1-1" "py!1" "px!1") (("1" (assert) (("1" (lemma "gt_times_gt_pos1") (("1" (inst -1 "expt(px!1, j!1)" "px!1" "py!1" "expt(py!1, j!1)") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (expand "expt" +) (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide -1 2 3) (("2" (induct "m") (("1" (skosimp*) (("1" (expand "expt") (("1" (expand "expt") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (assert) (("2" (expand "expt" +) (("2" (rewrite "gt_times_gt_pos1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "expt") (("2" (expand "expt") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (j!1 skolem-const-decl "nat" exponentiation nil) (gt_times_gt_pos1 formula-decl nil real_props nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 684 660 nil nil)) (both_sides_expt_pos_lt_aux 0 (both_sides_expt_pos_lt_aux-1 nil 3237052399 3245525213 ("" (induct "m") (("1" (skosimp) (("1" (expand "expt") (("1" (expand "expt") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -1 "px!1" "py!1") (("2" (expand "expt" 1) (("2" (ground) (("1" (rewrite "lt_times_lt_pos1") nil nil) ("2" (lemma "ge_times_ge_pos") (("2" (inst -1 "expt(py!1, 1 + j!1)" "py!1" "px!1" "expt(px!1, 1 + j!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((ge_times_ge_pos formula-decl nil real_props nil) (lt_times_lt_pos1 formula-decl nil real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (< const-decl "bool" reals nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 410 410 nil nil)) (both_sides_expt_gt1_lt_aux 0 (both_sides_expt_gt1_lt_aux-1 nil 3237052399 3245525214 ("" (induct "m") (("1" (skosimp*) (("1" (expand "expt") (("1" (expand "expt" 1 1) (("1" (ground) (("1" (expand "expt") (("1" (assert) nil nil)) nil) ("2" (lemma "increasing_expt_aux") (("2" (inst -1 "gt1x!1" "n!1 - 1") (("2" (expand "expt" -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (ground) (("1" (case "n!1 = 0") (("1" (replace -1) (("1" (expand "expt" -2 2) (("1" (lemma "increasing_expt_aux") (("1" (inst -1 "gt1x!1" "j!1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst -2 "gt1x!1" "n!1-1") (("1" (ground) (("1" (rewrite "both_sides_times_pos_lt2") nil nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (inst -2 "gt1x!1" "n!1-1") (("2" (assert) (("2" (rewrite "both_sides_times_pos_lt2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((n!1 skolem-const-decl "nat" exponentiation nil) (both_sides_times_pos_lt2 formula-decl nil real_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (increasing_expt_aux formula-decl nil exponentiation nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (< const-decl "bool" reals nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 626 610 nil nil)) (both_sides_expt_lt1_lt_aux 0 (both_sides_expt_lt1_lt_aux-1 nil 3237052399 3245525215 ("" (induct "m") (("1" (skosimp*) (("1" (expand "expt" 1 1) (("1" (expand "expt" -1 1) (("1" (ground) (("1" (lemma "decreasing_expt_aux") (("1" (inst -1 "lt1x!1" "n!1-1") (("1" (assert) nil nil) ("2" (expand "expt") (("2" (expand "expt") (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst -1 "lt1x!1" "n!1 - 1") (("1" (ground) (("1" (rewrite "both_sides_times_pos_lt2") nil nil) ("2" (rewrite "both_sides_times_pos_lt2") nil nil)) nil) ("2" (ground) (("2" (expand "expt" 1 2) (("2" (lemma "decreasing_expt_aux") (("2" (inst -1 "lt1x!1" "j!1") (("2" (expand "expt" -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((n!1 skolem-const-decl "nat" exponentiation nil) (both_sides_times_pos_lt2 formula-decl nil real_props nil) (decreasing_expt_aux formula-decl nil exponentiation nil) (n!1 skolem-const-decl "nat" exponentiation nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 642 630 nil nil)) (both_sides_expt_pos_le_aux 0 (both_sides_expt_pos_le_aux-1 nil 3237052399 3245525215 ("" (skosimp) (("" (ground) (("1" (lemma "both_sides_expt_pos_lt_aux") (("1" (inst -1 "m!1" "py!1" "px!1") (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "both_sides_expt_pos_lt_aux") (("2" (inst -1 "m!1" "py!1" "px!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (both_sides_expt_pos_lt_aux formula-decl nil exponentiation nil)) 262 240 nil nil)) (both_sides_expt_gt1_le_aux 0 (both_sides_expt_gt1_le_aux-1 nil 3237052399 3245525215 ("" (skosimp) (("" (lemma "both_sides_expt_gt1_lt_aux") (("" (inst -1 "gt1x!1" "n!1" "m!1") (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((both_sides_expt_gt1_lt_aux formula-decl nil exponentiation nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 297 290 nil nil)) (both_sides_expt_lt1_le_aux 0 (both_sides_expt_lt1_le_aux-1 nil 3237052399 3245525216 ("" (lemma "both_sides_expt_lt1_lt_aux") (("" (skosimp) (("" (inst -1 "lt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_expt_lt1_lt_aux formula-decl nil exponentiation nil)) 234 210 nil nil)) (both_sides_expt_pos_gt_aux 0 (both_sides_expt_pos_gt_aux-1 nil 3237052399 3245525216 ("" (lemma "both_sides_expt_pos_lt_aux") (("" (skosimp) (("" (inst -1 "m!1" "py!1" "px!1") (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_expt_pos_lt_aux formula-decl nil exponentiation nil)) 249 250 nil nil)) (both_sides_expt_gt1_gt_aux 0 (both_sides_expt_gt1_gt_aux-1 nil 3237052399 3245525216 ("" (lemma "both_sides_expt_gt1_lt_aux") (("" (skosimp) (("" (inst -1 "gt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_expt_gt1_lt_aux formula-decl nil exponentiation nil)) 233 230 nil nil)) (both_sides_expt_lt1_gt_aux 0 (both_sides_expt_lt1_gt_aux-1 nil 3237052399 3245525216 ("" (lemma "both_sides_expt_lt1_lt_aux") (("" (skosimp) (("" (inst -1 "lt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_expt_lt1_lt_aux formula-decl nil exponentiation nil)) 246 250 nil nil)) (both_sides_expt_pos_ge_aux 0 (both_sides_expt_pos_ge_aux-1 nil 3237052399 3245525217 ("" (lemma "both_sides_expt_pos_le_aux") (("" (skosimp) (("" (inst -1 "m!1" "py!1" "px!1") (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_expt_pos_le_aux formula-decl nil exponentiation nil)) 244 240 nil nil)) (both_sides_expt_gt1_ge_aux 0 (both_sides_expt_gt1_ge_aux-1 nil 3237052399 3245525217 ("" (lemma "both_sides_expt_gt1_le_aux") (("" (skosimp) (("" (inst -1 "gt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_expt_gt1_le_aux formula-decl nil exponentiation nil)) 242 250 nil nil)) (both_sides_expt_lt1_ge_aux 0 (both_sides_expt_lt1_ge_aux-1 nil 3237052399 3245525217 ("" (lemma "both_sides_expt_lt1_le_aux") (("" (skosimp) (("" (inst -1 "lt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_expt_lt1_le_aux formula-decl nil exponentiation nil)) 252 230 nil nil)) (expt_of_mult 0 (expt_of_mult-1 nil 3237052399 3245525217 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 303 300 nil nil)) (expt_of_div 0 (expt_of_div-1 nil 3237052399 3245525218 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 290 290 nil nil)) (expt_of_inv 0 (expt_of_inv-1 nil 3237052399 3245525218 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 270 270 nil nil)) (expt_of_abs 0 (expt_of_abs-1 nil 3237052399 3245525219 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) (("2" (replace -1 :hide? t) (("2" (grind) (("1" (use "neg_times_lt") (("1" (assert) nil nil)) nil) ("2" (use "pos_times_lt") (("2" (assert) nil nil)) nil) ("3" (use "pos_times_lt") (("3" (assert) nil nil)) nil) ("4" (use "neg_times_lt") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pos_times_lt formula-decl nil real_props nil) (neg_times_lt formula-decl nil real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 939 910 t nil)) (abs_of_expt_inv 0 (abs_of_expt_inv-1 nil 3237052399 3245525221 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) (("2" (lemma "div_times") (("2" (inst -1 "abs(n0x!1)" "expt(abs(n0x!1), j!1)" "1" "1") (("2" (replace -1 :dir rl) (("2" (replace -2 :dir rl) (("2" (hide -1 -2) (("2" (grind) (("1" (lemma "quotient_neg_lt") (("1" (inst-cp -1 "n0x!1 * expt(n0x!1, j!1)") (("1" (inst -1 "expt(n0x!1, j!1)") (("1" (assert) (("1" (hide -3 -5) (("1" (lemma "negreal_times_negreal_is_posreal") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "quotient_neg_lt") (("2" (inst-cp -1 "expt(n0x!1, j!1)") (("2" (inst -1 "n0x!1 * expt(n0x!1, j!1)") (("2" (assert) (("2" (hide -2 3) (("2" (lemma "nnreal_times_nnreal_is_nnreal") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (lemma "quotient_neg_lt") (("3" (inst-cp -1 "expt(n0x!1, j!1)") (("3" (inst -1 "n0x!1 * expt(n0x!1, j!1)") (("3" (assert) (("3" (hide 3 4) (("3" (lemma "posreal_mult_closed") (("3" (inst -1 "-n0x!1" "expt(n0x!1, j!1)") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (lemma "quotient_neg_lt") (("4" (inst-cp -1 "expt(n0x!1, j!1)") (("4" (inst -1 "n0x!1 * expt(n0x!1, j!1)") (("4" (assert) (("4" (hide -2 2) (("4" (lemma "posreal_mult_closed") (("4" (inst -1 "n0x!1" "-expt(n0x!1, j!1)") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((div_times formula-decl nil real_props nil) (- const-decl "[numfield -> numfield]" number_fields nil) (posreal_mult_closed formula-decl nil real_axioms nil) (nnreal_times_nnreal_is_nnreal subtype-tcc nil real_types nil) (quotient_neg_lt formula-decl nil real_props nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (negreal_times_negreal_is_posreal subtype-tcc nil real_types nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1448 1290 nil nil)) (expt_x0_TCC1 0 (expt_x0_TCC1-1 nil 3237052399 3245525221 ("" (grind) nil nil) proved ((/= const-decl "boolean" notequal nil)) 87 90 nil nil)) (expt_x0 0 (expt_x0-1 nil 3237052399 3245525221 ("" (grind) nil nil) proved ((expt def-decl "real" exponentiation nil) (^ const-decl "real" exponentiation nil)) 83 80 nil nil)) (expt_x1_TCC1 0 (expt_x1_TCC1-1 nil 3237052399 3245525221 ("" (tcc :defs !) nil nil) proved ((/= const-decl "boolean" notequal nil)) 87 90 nil nil)) (expt_x1 0 (expt_x1-1 nil 3237052399 3245525221 ("" (grind) nil nil) proved ((expt def-decl "real" exponentiation nil) (^ const-decl "real" exponentiation nil)) 95 90 nil nil)) (expt_1i 0 (expt_1i-1 nil 3237052399 3245525221 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (rewrite "expt_1n_aux") nil nil) ("2" (rewrite "expt_1n_aux") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (expt_1n_aux formula-decl nil exponentiation nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil)) 152 150 nil nil)) (expt_plus_TCC1 0 (expt_plus_TCC1-1 nil 3237052399 3245525221 ("" (tcc :defs !) nil nil) proved nil 87 80 nil nil)) (expt_plus 0 (expt_plus-1 nil 3237052399 3245525222 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (lift-if) (("" (lift-if) (("" (prop) (("1" (rewrite "expt_plus_aux") nil nil) ("2" (assert) nil nil) ("3" (lemma "expt_minus_aux") (("3" (inst -1 "j!1" "-i!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("4" (lemma "cross_mult") (("4" (inst -1 "expt(n0x!1, -(i!1 + j!1))" "expt(n0x!1, -i!1)" "1" "expt(n0x!1, j!1)") (("1" (flatten) (("1" (hide -1) (("1" (replace 2) (("1" (lemma "expt_plus_aux") (("1" (inst -1 "j!1" "-(i!1 + j!1)" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("5" (lemma "expt_minus_aux") (("5" (inst -1 "i!1" "-j!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("6" (assert) (("6" (lemma "cross_mult") (("6" (inst -1 "expt(n0x!1, -(i!1 + j!1))" "expt(n0x!1, -j!1)" "1" "expt(n0x!1, i!1)") (("6" (flatten) (("6" (hide -1) (("6" (split) (("1" (assert) nil nil) ("2" (hide 3) (("2" (lemma "expt_plus_aux") (("2" (inst -1 "i!1" "-(i!1 + j!1)" "n0x!1") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("7" (assert) nil nil) ("8" (case "expt(n0x!1, -(i!1 + j!1)) = expt(n0x!1, -i!1) * expt(n0x!1, -j!1)") (("1" (assert) (("1" (replace -1) (("1" (lemma "div_times") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (lemma "expt_plus_aux") (("2" (inst -1 "-i!1" "-j!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil) ("3" (assert) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (expt_plus_aux formula-decl nil exponentiation nil) (j!1 skolem-const-decl "int" exponentiation nil) (i!1 skolem-const-decl "int" exponentiation nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt_minus_aux formula-decl nil exponentiation nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (expt def-decl "real" exponentiation nil) (cross_mult formula-decl nil real_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil)) 1059 1040 nil nil)) (expt_times_TCC1 0 (expt_times_TCC1-1 nil 3237052399 3245525222 ("" (tcc :defs !) nil nil) proved nil 85 90 nil nil)) (expt_times 0 (expt_times-1 nil 3237052399 3245525223 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (lift-if) (("" (prop) (("1" (rewrite "expt_times_aux") nil nil) ("2" (assert) (("2" (rewrite "pos_times_ge") nil nil)) nil) ("3" (rewrite "pos_times_ge") (("3" (assert) (("3" (grind) nil nil)) nil)) nil) ("4" (lemma "expt_divide_aux") (("4" (inst -1 "-i!1" "j!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("5" (lemma "pos_times_ge") (("5" (inst?) (("5" (assert) (("5" (grind) (("5" (rewrite "expt_1n_aux") (("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("6" (case "expt(n0x!1, -(i!1 * j!1)) = expt(expt(n0x!1, i!1), -j!1)") (("1" (assert) nil nil) ("2" (hide 3) (("2" (lemma "expt_times_aux") (("2" (inst -1 "i!1" "-j!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("3" (assert) nil nil) ("4" (propax) nil nil) ("5" (assert) nil nil)) nil) ("7" (lemma "expt_divide_aux") (("7" (inst -1 "-i!1" "-j!1" "n0x!1") (("1" (replace -1 :dir rl) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("8" (lemma "pos_times_ge") (("8" (inst?) (("8" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (expt_1n_aux formula-decl nil exponentiation nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (expt_divide_aux formula-decl nil exponentiation nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (i!1 skolem-const-decl "int" exponentiation nil) (j!1 skolem-const-decl "int" exponentiation nil) (expt def-decl "real" exponentiation nil) (pos_times_ge formula-decl nil real_props nil) (expt_times_aux formula-decl nil exponentiation nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil)) 971 950 nil nil)) (expt_inverse_TCC1 0 (expt_inverse_TCC1-1 nil 3237052399 3245525224 ("" (grind) nil nil) proved nil 96 100 nil nil)) (expt_inverse 0 (expt_inverse-1 nil 3237052399 3245525224 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (lift-if) (("" (prop) (("1" (grind) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (expt def-decl "real" exponentiation nil)) 251 250 nil nil)) (expt_div_TCC1 0 (expt_div_TCC1-1 nil 3237052399 3245525224 ("" (subtype-tcc) nil nil) proved nil 96 100 nil nil)) (expt_div 0 (expt_div-1 nil 3237052399 3245525224 ("" (skosimp) (("" (lemma "expt_inverse") (("" (inst -1 "j!1" "n0x!1") (("" (lemma "expt_plus") (("" (inst -1 "i!1" "-j!1" "n0x!1") (("" (assert) (("" (replace -1) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((expt_inverse formula-decl nil exponentiation nil) (expt_plus formula-decl nil exponentiation nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 311 310 nil nil)) (both_sides_expt1_TCC1 0 (both_sides_expt1_TCC1-1 nil 3237052399 3245525224 ("" (tcc :defs explicit) nil nil) proved nil 86 90 nil nil)) (both_sides_expt1 0 (both_sides_expt1-1 nil 3237052399 3245525226 ("" (lemma "both_sides_expt1_aux") (("" (skosimp) (("" (expand "^") (("" (lift-if) (("" (split) (("1" (flatten) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (inst -3 "n0i!1 - 1" "n0j!1 - 1" "px!1") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (ground) (("1" (lemma "div_cancel3") (("1" (inst -1 "expt(px!1, -n0j!1)" "1" "expt(px!1, n0i!1)") (("1" (prop) (("1" (hide -1 -3) (("1" (rewrite "expt_plus_aux" :dir rl) (("1" (lemma "expt_1_aux") (("1" (inst -1 "-n0j!1 + n0i!1 - 1" "px!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (rewrite "expt_1n_aux") (("2" (rewrite "expt_1n_aux") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (prop) (("1" (lemma "div_cancel3") (("1" (inst -1 "expt(px!1, -n0i!1)" "1" "expt(px!1, n0j!1)") (("1" (prop) (("1" (hide -1 -3) (("1" (rewrite "expt_plus_aux" :dir rl) (("1" (lemma "expt_1_aux") (("1" (inst -1 "n0j!1 - n0i!1 - 1" "px!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (expand "expt" 1) (("2" (assert) nil nil)) nil) ("3" (replace -1) (("3" (rewrite "expt_1n_aux") (("3" (rewrite "expt_1n_aux") (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (rewrite "cross_mult") (("4" (inst -2 "-n0j!1-1" "-n0i!1-1" "px!1") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("5" (replace -1) (("5" (propax) nil nil)) nil) ("6" (replace -1) (("6" (rewrite "expt_1n_aux") (("6" (rewrite "expt_1n_aux") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((cross_mult formula-decl nil real_props nil) (n0i!1 skolem-const-decl "nzint" exponentiation nil) (nzint nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (n0j!1 skolem-const-decl "nzint" exponentiation nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (expt def-decl "real" exponentiation nil) (- const-decl "[numfield -> numfield]" number_fields nil) (expt_1_aux formula-decl nil exponentiation nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (expt_plus_aux formula-decl nil exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (div_cancel3 formula-decl nil real_props nil) (expt_1n_aux formula-decl nil exponentiation nil) (^ const-decl "real" exponentiation nil) (both_sides_expt1_aux formula-decl nil exponentiation nil)) 1283 1260 nil nil)) (both_sides_expt2 0 (both_sides_expt2-1 nil 3237052399 3245525226 ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt2_aux") (("" (lift-if) (("" (prop) (("1" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("3" (inst -2 "-n0i!1" "px!1" "py!1") (("1" (assert) (("1" (rewrite "cross_mult") nil nil)) nil) ("2" (assert) nil nil)) nil) ("4" (inst -2 "-n0i!1" "px!1" "py!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (> const-decl "bool" reals nil) (n0i!1 skolem-const-decl "nzint" exponentiation nil) (nzint nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (both_sides_expt2_aux formula-decl nil exponentiation nil)) 317 320 nil nil)) (pos_expt_gt_TCC1 0 (pos_expt_gt_TCC1-1 nil 3237052399 3245525226 ("" (subtype-tcc) nil nil) proved nil 146 80 nil nil)) (pos_expt_gt 0 (pos_expt_gt-1 nil 3237052399 3245525227 ("" (induct "n") (("1" (skosimp) (("1" (rewrite "expt_x0") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (rewrite "expt_plus") (("2" (rewrite "expt_x1") (("2" (inst?) (("2" (case "FORALL (a, b, c, d: nat): a < c & b < d => a + b < c * d") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "c") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (assert) (("2" (case "a!1 = 0") (("1" (assert) nil nil) ("2" (inst -1 "a!1-1" "b!2" "d!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((expt_x1 formula-decl nil exponentiation nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (a!1 skolem-const-decl "nat" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (expt_plus formula-decl nil exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (expt_x0 formula-decl nil exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (above nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 722 700 nil nil)) (expt_ge1 0 (expt_ge1-1 nil 3237052399 3245525227 ("" (induct-and-rewrite "n" 1 "expt_plus" "expt_x0" "expt_x1") (("" (lemma "ge_times_ge_pos") (("" (inst?) (("" (inst - "1" "1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((ge_times_ge_pos formula-decl nil real_props nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (expt_x1 formula-decl nil exponentiation nil) (expt_plus formula-decl nil exponentiation nil) (expt_x0 formula-decl nil exponentiation nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (> const-decl "bool" reals nil) (above nonempty-type-eq-decl nil integers nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (^ const-decl "real" exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil)) 368 370 nil nil)) (both_sides_expt_pos_lt_TCC1 0 (both_sides_expt_pos_lt_TCC1-1 nil 3237052399 3245525227 ("" (tcc :defs explicit) nil nil) proved nil 86 90 nil nil)) (both_sides_expt_pos_lt 0 (both_sides_expt_pos_lt-1 nil 3237052399 3245525228 ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt_pos_lt_aux") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (both_sides_expt_pos_lt_aux formula-decl nil exponentiation nil)) 198 200 nil nil)) (both_sides_expt_gt1_lt_TCC1 0 (both_sides_expt_gt1_lt_TCC1-1 nil 3237052399 3245525228 ("" (tcc :defs explicit) nil nil) proved nil 86 80 nil nil)) (both_sides_expt_gt1_lt 0 (both_sides_expt_gt1_lt-1 nil 3237052399 3245525229 ("" (skosimp*) (("" (ground) (("1" (case "j!1<=i!1") (("1" (case "gt1x!1 ^ j!1 <= gt1x!1 ^ i!1") (("1" (assert) nil nil) ("2" (hide -2 2) (("2" (case "forall (n:nat): gt1x!1^j!1<=gt1x!1^(j!1+n)") (("1" (inst - "i!1-j!1") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst -1 "1" "j!1 + j!2" "gt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "le_times_le_pos") (("2" (inst - "1" "gt1x!1 ^ j!1" "gt1x!1 ^ (j!1 + j!2)" "gt1x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "forall (n:nat): gt1x!1^i!1<gt1x!1^(1+i!1+n)") (("1" (inst - "j!1-(i!1+1)") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) (("1" (rewrite "expt_plus") (("1" (rewrite "expt_x1") (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst - "gt1x!1 ^ i!1" "1" "gt1x!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst - "1" "(1 + i!1 + j!2)" "gt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "lt_times_lt_pos1") (("2" (inst - "gt1x!1^i!1" "1" "gt1x!1^(1+i!1+j!2)" "gt1x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (^ const-decl "real" exponentiation nil) (>= const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (pred type-eq-decl nil defined_types nil) (nat_induction formula-decl nil naturalnumbers nil) (expt_plus formula-decl nil exponentiation nil) (expt_x1 formula-decl nil exponentiation nil) (le_times_le_pos formula-decl nil real_props nil) (nzreal nonempty-type-eq-decl nil reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (lt_times_lt_pos1 formula-decl nil real_props nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil) (< const-decl "bool" reals nil)) 942 910 nil nil)) (both_sides_expt_lt1_lt_TCC1 0 (both_sides_expt_lt1_lt_TCC1-1 nil 3237052399 3245525229 ("" (tcc :defs explicit) nil nil) proved nil 85 90 nil nil)) (both_sides_expt_lt1_lt 0 (both_sides_expt_lt1_lt-1 nil 3237052399 3245525230 ("" (skosimp*) (("" (ground) (("1" (case "FORALL (n:nat): lt1x!1^(i!1+n) <= lt1x!1^i!1") (("1" (inst -1 "j!1-i!1") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst - "1" "i!1 + j!2" "lt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "le_times_le_pos") (("2" (inst - "lt1x!1" "lt1x!1^(i!1+j!2)" "lt1x!1^i!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "FORALL (n:nat): lt1x!1^(j!1+n+1) < lt1x!1^j!1") (("1" (inst -1 "i!1 -j!1 -1") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) (("1" (rewrite "expt_plus") (("1" (rewrite "expt_x1") (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst -1 "lt1x!1 ^ j!1" "lt1x!1" "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst -1 "1" "1 + j!1 + j!2" "lt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "lt_times_lt_pos1") (("2" (inst -1 "lt1x!1 ^ (j!1 + j!2 + 1)" "lt1x!1" "lt1x!1 ^ j!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nzreal nonempty-type-eq-decl nil reals nil) (le_times_le_pos formula-decl nil real_props nil) (expt_x1 formula-decl nil exponentiation nil) (expt_plus formula-decl nil exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (^ const-decl "real" exponentiation nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (lt_times_lt_pos1 formula-decl nil real_props nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 982 960 nil nil)) (both_sides_expt_pos_le 0 (both_sides_expt_pos_le-1 nil 3237052399 3245525230 ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt_pos_le_aux") (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (both_sides_expt_pos_le_aux formula-decl nil exponentiation nil)) 209 210 nil nil)) (both_sides_expt_gt1_le 0 (both_sides_expt_gt1_le-1 nil 3237052399 3245525230 ("" (skosimp*) (("" (case "i!1 = j!1") (("1" (assert) nil nil) ("2" (lemma "both_sides_expt_gt1_lt") (("2" (inst -1 "gt1x!1" "j!1" "i!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)) 228 220 nil nil)) (both_sides_expt_lt1_le 0 (both_sides_expt_lt1_le-1 nil 3237052399 3245525231 ("" (skosimp*) (("" (lemma "both_sides_expt_lt1_lt") (("" (inst -1 "j!1" "i!1" "lt1x!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((both_sides_expt_lt1_lt formula-decl nil exponentiation nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 214 220 nil nil)) (both_sides_expt_pos_gt 0 (both_sides_expt_pos_gt-1 nil 3237052399 3245525231 ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt_pos_gt_aux") (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (both_sides_expt_pos_gt_aux formula-decl nil exponentiation nil)) 197 190 nil nil)) (both_sides_expt_gt1_gt 0 (both_sides_expt_gt1_gt-1 nil 3237052399 3245525231 ("" (skosimp*) (("" (lemma "both_sides_expt_gt1_lt") (("" (inst -1 "gt1x!1" "j!1" "i!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((both_sides_expt_gt1_lt formula-decl nil exponentiation nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 203 210 nil nil)) (both_sides_expt_lt1_gt 0 (both_sides_expt_lt1_gt-1 nil 3237052399 3245525231 ("" (skosimp*) (("" (lemma "both_sides_expt_lt1_lt") (("" (inst -1 "j!1" "i!1" "lt1x!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((both_sides_expt_lt1_lt formula-decl nil exponentiation nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 213 220 nil nil)) (both_sides_expt_pos_ge 0 (both_sides_expt_pos_ge-1 nil 3237052399 3245525232 ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt_pos_ge_aux") (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (both_sides_expt_pos_ge_aux formula-decl nil exponentiation nil)) 199 200 nil nil)) (both_sides_expt_gt1_ge 0 (both_sides_expt_gt1_ge-1 nil 3237052399 3245525232 ("" (skosimp*) (("" (lemma "both_sides_expt_gt1_le") (("" (inst -1 "gt1x!1" "j!1" "i!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((both_sides_expt_gt1_le formula-decl nil exponentiation nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 215 220 nil nil)) (both_sides_expt_lt1_ge 0 (both_sides_expt_lt1_ge-1 nil 3237052399 3245525232 ("" (skosimp*) (("" (lemma "both_sides_expt_lt1_le") (("" (inst -1 "j!1" "i!1" "lt1x!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((both_sides_expt_lt1_le formula-decl nil exponentiation nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 202 200 nil nil)) (expt_gt1_pos_TCC1 0 (expt_gt1_pos_TCC1-1 nil 3237052399 3245525232 ("" (subtype-tcc) nil nil) proved nil 98 100 nil nil)) (expt_gt1_pos 0 (expt_gt1_pos-1 nil 3237052399 3245525233 ("" (induct "pm") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (skosimp*) (("3" (split) (("1" (rewrite "expt_plus") (("1" (rewrite "expt_x1") (("1" (inst?) (("1" (lemma "both_sides_times_pos_ge1") (("1" (inst -1 "gt1x!1" "gt1x!1 ^ j!1" "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "^") (("2" (expand "expt") (("2" (expand "expt") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((expt def-decl "real" exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (expt_plus formula-decl nil exponentiation nil) (both_sides_times_pos_ge1 formula-decl nil real_props nil) (expt_x1 formula-decl nil exponentiation nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat_induction formula-decl nil naturalnumbers nil) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 457 430 nil nil)) (expt_gt1_neg_TCC1 0 (expt_gt1_neg_TCC1-1 nil 3237052399 3245525233 ("" (subtype-tcc) nil nil) proved nil 89 90 nil nil)) (expt_gt1_neg 0 (expt_gt1_neg-1 nil 3237052399 3245525233 ("" (skosimp) (("" (case "gt1x!1^(-pm!1) * gt1x!1^pm!1 < gt1x!1^pm!1") (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst -1 "gt1x!1 ^ pm!1" "gt1x!1 ^ (-pm!1)" "1") (("1" (assert) nil nil)) nil)) nil) ("2" (rewrite "expt_plus" :dir rl) (("2" (hide 2) (("2" (lemma "expt_gt1_pos") (("2" (inst -1 "gt1x!1" "pm!1") (("2" (assert) (("2" (expand "^" 1 1) (("2" (expand "expt") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (^ const-decl "real" exponentiation nil) (>= const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil) (expt def-decl "real" exponentiation nil) (expt_gt1_pos formula-decl nil exponentiation nil) (expt_plus formula-decl nil exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil)) 361 360 nil nil)) (expt_gt1_nonpos_TCC1 0 (expt_gt1_nonpos_TCC1-1 nil 3237052399 3245525233 ("" (subtype-tcc) nil nil) proved nil 87 80 nil nil)) (expt_gt1_nonpos 0 (expt_gt1_nonpos-1 nil 3237052399 3245525234 ("" (skosimp) (("" (case "m!1 = 0") (("1" (grind) nil nil) ("2" (lemma "expt_gt1_neg") (("2" (inst -1 "gt1x!1" "m!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (^ const-decl "real" exponentiation nil) (expt def-decl "real" exponentiation nil) (m!1 skolem-const-decl "nat" exponentiation nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (expt_gt1_neg formula-decl nil exponentiation nil)) 204 210 nil nil)) (mult_expt_TCC1 0 (mult_expt_TCC1-1 nil 3237052399 3245525234 ("" (subtype-tcc) nil nil) proved nil 87 90 nil nil)) (mult_expt 0 (mult_expt-1 nil 3237052399 3245525234 ("" (skosimp) (("" (expand "^") (("" (lift-if) (("" (lemma "expt_of_mult") (("" (prop) (("1" (inst?) nil nil) ("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (expt_of_mult formula-decl nil exponentiation nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (i!1 skolem-const-decl "int" exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 299 300 nil nil)) (div_expt_TCC1 0 (div_expt_TCC1-1 nil 3237052399 3245525234 ("" (subtype-tcc) nil nil) proved nil 87 80 nil nil)) (div_expt 0 (div_expt-1 nil 3237052399 3245525234 ("" (skosimp) (("" (expand "^") (("" (lemma "expt_of_div") (("" (lift-if) (("" (prop) (("1" (inst?) nil nil) ("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (i!1 skolem-const-decl "int" exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (expt_of_div formula-decl nil exponentiation nil)) 280 280 nil nil)) (inv_expt 0 (inv_expt-1 nil 3237052399 3245525235 ("" (skosimp) (("" (expand "^") (("" (lift-if) (("" (lemma "expt_of_inv") (("" (prop) (("1" (inst?) nil nil) ("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (expt_of_inv formula-decl nil exponentiation nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (i!1 skolem-const-decl "int" exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 240 220 nil nil)) (abs_expt_TCC1 0 (abs_expt_TCC1-1 nil 3237052399 3245525235 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil)) 147 140 nil nil)) (abs_expt 0 (abs_expt-1 nil 3237052399 3245525235 ("" (skosimp) (("" (expand "^") (("" (lift-if) (("" (lemma "expt_of_abs") (("" (prop) (("1" (instantiate -2 ("i!1" "n0x!1")) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil) ("2" (inst?) (("1" (lemma "abs_div") (("1" (inst -1 "expt(n0x!1, -i!1)" "1") (("1" (replace -1) (("1" (expand "abs" 2 2) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (expt_of_abs formula-decl nil exponentiation nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (abs_div formula-decl nil real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil) (i!1 skolem-const-decl "int" exponentiation nil)) 427 430 nil nil)) (expt_lt1_bound1 0 (expt_lt1_bound1-1 nil 3237052399 3245525236 ("" (induct-and-simplify "n") (("" (use "both_sides_times_pos_le2" ("pz" "lt1x!1")) (("" (assert) nil nil)) nil)) nil) proved ((both_sides_times_pos_le2 formula-decl nil real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (expt def-decl "real" exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil)) 415 410 nil nil)) (expt_lt1_bound2 0 (expt_lt1_bound2-1 nil 3237052399 3245525236 ("" (skolem!) (("" (use "expt_lt1_bound1") (("" (use "expt_1_aux") (("" (assert) nil nil)) nil)) nil)) nil) proved ((expt_lt1_bound1 formula-decl nil exponentiation nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (expt_1_aux formula-decl nil exponentiation nil)) 197 200 nil nil)) (expt_gt1_bound1 0 (expt_gt1_bound1-1 nil 3237052399 3245525236 ("" (skolem 1 ("a!1" _)) (("" (induct-and-simplify "n") (("" (lemma "both_sides_times_pos_le2") (("" (inst -1 "expt(a!1, j!1)" "1" "a!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (expt def-decl "real" exponentiation nil) (<= const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_le2 formula-decl nil real_props nil)) 359 360 nil nil)) (expt_gt1_bound2 0 (expt_gt1_bound2-1 nil 3237052399 3245525237 ("" (skolem!) (("" (use "expt_gt1_bound1" ("n" "pn!1 - 1")) (("" (expand "expt" +) (("" (lemma "both_sides_times_pos_le1") (("" (assert) (("" (inst -1 "gt1x!1" "1" "expt(gt1x!1, pn!1-1)") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((expt_gt1_bound1 formula-decl nil exponentiation nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (both_sides_times_pos_le1 formula-decl nil real_props nil) (expt def-decl "real" exponentiation nil)) 298 290 nil nil)) (large_expt 0 (large_expt-1 nil 3237052399 3245525237 ("" (skosimp) (("" (assert) (("" (auto-rewrite-theory "sets[real]") (("" (lemma "real_complete" ("S" "{x:real | EXISTS (n : nat) : x = expt(px!1, n)}")) (("1" (hide 1) (("1" (split -1) (("1" (skosimp*) (("1" (expand "least_upper_bound?") (("1" (flatten) (("1" (inst -2 "y!1/px!1") (("1" (case "y!1 > 0") (("1" (ground) (("1" (lemma "both_sides_div_pos_le2" ("px" "1" "py" "px!1" "pz" "y!1")) (("1" (assert) nil nil)) nil) ("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (inst - "s!1*px!1") (("1" (rewrite "div_mult_pos_le2") nil nil) ("2" (typepred "s!1") (("2" (skosimp*) (("2" (inst 1 "n!1+1") (("2" (expand "expt" +) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (delete -2) (("2" (expand "upper_bound?") (("2" (inst - "1") (("1" (assert) nil nil) ("2" (inst 1 "0") (("2" (expand "expt") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal 1) (("2" (skolem!) (("2" (inst 2 "py!1") (("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (typepred "s!1") (("2" (skosimp*) (("2" (inst 1 "n!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -1 "1") (("2" (inst 1 "0") (("2" (expand "expt") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_complete formula-decl nil bounded_real_defs nil) (NOT const-decl "[bool -> bool]" booleans nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (both_sides_div_pos_le2 formula-decl nil real_props nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (div_mult_pos_le2 formula-decl nil real_props nil) (s!1 skolem-const-decl "({x: real | EXISTS (n: nat): x = expt(px!1, n)})" exponentiation nil) (px!1 skolem-const-decl "posreal" exponentiation nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (upper_bound? const-decl "bool" bounded_real_defs nil)) 746 730 nil nil)) (small_expt 0 (small_expt-1 nil 3237052399 3245525238 ("" (skosimp*) (("" (lemma "large_expt" ("px" "1/px!1")) (("" (rewrite "div_mult_pos_lt2") (("" (assert) (("" (inst -1 "1/py!1") (("" (skolem!) (("" (inst 1 "n!1") (("" (rewrite "expt_of_inv") (("" (rewrite "both_sides_div_pos_lt2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (large_expt formula-decl nil exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (expt_of_inv formula-decl nil exponentiation nil) (both_sides_div_pos_lt2 formula-decl nil real_props nil) (expt def-decl "real" exponentiation nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (div_mult_pos_lt2 formula-decl nil real_props nil)) 285 290 nil nil)) (exponent_adjust_TCC1 0 (exponent_adjust_TCC1-1 nil 3237052399 3245525238 ("" (subtype-tcc) nil nil) proved nil 84 80 nil nil)) (exponent_adjust_TCC2 0 (exponent_adjust_TCC2-1 nil 3237052399 3245525238 ("" (subtype-tcc) nil nil) proved nil 100 100 nil nil)) (exponent_adjust_TCC3 0 (exponent_adjust_TCC3-1 nil 3237052399 3245525238 ("" (subtype-tcc) nil nil) proved nil 87 90 nil nil)) (exponent_adjust 0 (exponent_adjust-1 nil 3237052399 3245525239 ("" (skosimp*) (("" (lemma "both_sides_expt_gt1_lt") (("" (inst - "b!1" "i!1 - pm!1" "i!1") (("" (ground) (("" (rewrite "expt_plus") (("" (rewrite "expt_x1") (("" (lemma "both_sides_times_pos_le1") (("" (inst - "b!1 ^ i!1" "2" "b!1") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_expt_gt1_lt formula-decl nil exponentiation nil) (expt_x1 formula-decl nil exponentiation nil) (^ const-decl "real" exponentiation nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (both_sides_times_pos_le1 formula-decl nil real_props nil) (expt_plus formula-decl nil exponentiation nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (above nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 437 410 nil nil)) (exp_of_exists 0 (exp_of_exists-1 nil 3237052399 3245525240 ("" (skosimp*) (("" (lemma "lub_int") (("" (case "py!1<1") (("1" (inst - "{i|b!1^i<=py!1}" "-1") (("1" (prop) (("1" (expand "least_upper_bound?") (("1" (skosimp*) (("1" (hide -2) (("1" (inst + "j!1") (("1" (assert) (("1" (expand "upper_bound?") (("1" (inst - "j!1+1") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "upper_bound?") (("2" (skolem-typepred) (("2" (expand "extend") (("2" (case "s!1>=0") (("1" (lemma "expt_ge1") (("1" (inst?) (("1" (assert) nil nil) ("2" (assert) (("2" (prop) nil nil)) nil)) nil)) nil) ("2" (prop) (("2" (assert) (("2" (case "EXISTS (x:int): 0 > x & x > -1") (("1" (skosimp) (("1" (assert) nil nil)) nil) ("2" (inst 1 "s!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "nonempty_exists") (("2" (lemma "axiom_of_archimedes") (("2" (inst - "1/py!1") (("2" (skosimp*) (("2" (inst + "-i!1") (("2" (rewrite "expt_inverse") (("2" (rewrite "div_mult_pos_le1") (("2" (lemma "pos_expt_gt") (("2" (inst?) (("1" (rewrite "div_mult_pos_lt1") (("1" (lemma "both_sides_times_pos_lt2") (("1" (inst - "py!1" "i!1" "b!1^i!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "axiom_of_archimedes") (("2" (inst?) (("2" (skosimp*) (("2" (inst - "{i|b!1^i<=py!1}" "i!1") (("1" (prop) (("1" (expand "least_upper_bound?") (("1" (skosimp*) (("1" (hide -2) (("1" (inst + "j!1") (("1" (assert) (("1" (expand "upper_bound?") (("1" (inst - "j!1+1") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "upper_bound?") (("2" (skolem-typepred) (("2" (expand "extend") (("2" (prop) (("2" (lemma "pos_expt_gt") (("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "nonempty_exists") (("2" (inst + "0") (("2" (rewrite "expt_x0") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((lub_int formula-decl nil integer_props nil) (expt_x0 formula-decl nil exponentiation nil) (j!1 skolem-const-decl "({i | b!1 ^ i <= py!1})" exponentiation nil) (s!1 skolem-const-decl "(extend[real, int, bool, FALSE]({i | b!1 ^ i <= py!1}))" exponentiation nil) (py!1 skolem-const-decl "posreal" exponentiation nil) (b!1 skolem-const-decl "above(1)" exponentiation nil) (above nonempty-type-eq-decl nil integers nil) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (expt_ge1 formula-decl nil exponentiation nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (s!1 skolem-const-decl "(extend[real, int, bool, FALSE]({i | b!1 ^ i <= py!1}))" exponentiation nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (least_upper_bound? const-decl "bool" bounded_real_defs nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (j!1 skolem-const-decl "({i | b!1 ^ i <= py!1})" exponentiation nil) (upper_bound? const-decl "bool" bounded_real_defs nil) (axiom_of_archimedes formula-decl nil real_props nil) (nzreal nonempty-type-eq-decl nil reals nil) (expt_inverse formula-decl nil exponentiation nil) (pos_expt_gt formula-decl nil exponentiation nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (both_sides_times_pos_lt2 formula-decl nil real_props nil) (div_mult_pos_le1 formula-decl nil real_props nil) (i!1 skolem-const-decl "int" exponentiation nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nonempty_exists formula-decl nil sets_lemmas nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 1072 1040 nil nil)))(euclidean_division (mod_TCC1 0 (mod_TCC1-1 nil 3237052399 3245525240 ("" (skolem-typepred) (("" (inst 1 "0") nil nil)) nil) proved ((nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (> const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 22 20 nil nil)) (euclid_nat 0 (euclid_nat-1 nil 3237052399 3245525240 ("" (skolem 1 (_ "b!1")) (("" (induct "a") (("1" (inst + "0" "0") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (case "r!1 = b!1-1") (("1" (inst + "q!1+1" "0") (("1" (assert) nil nil)) nil) ("2" (assert) (("2" (inst + "q!1" "r!1+1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat_induction formula-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil)) 380 380 nil nil)) (euclid_int 0 (euclid_int-1 nil 3237052399 3245525241 ("" (skolem!) (("" (case "n!1 >= 0") (("1" (use "euclid_nat" ("a" "n!1")) (("1" (skolem!) (("1" (inst?) nil nil)) nil)) nil) ("2" (assert) (("2" (use "euclid_nat" ("a" "- n!1")) (("2" (skolem!) (("2" (case "r!1 = 0") (("1" (inst + "-q!1" "0") (("1" (assert) nil nil)) nil) ("2" (inst + "- q!1 - 1" "b!1 - r!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (euclid_nat formula-decl nil euclidean_division nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (b!1 skolem-const-decl "posnat" euclidean_division nil) (r!1 skolem-const-decl "mod(b!1)" euclidean_division nil)) 432 440 nil nil)) (unique_quotient 0 (unique_quotient-1 nil 3237052399 3245525241 ("" (skosimp) (("" (assert) (("" (case "q1!1 > q2!1") (("1" (case "b!1 * (q1!1 - q2!1) = r2!1 - r1!1") (("1" (case "b!1 * (q1!1 - q2!1) >= b!1") (("1" (assert) nil nil) ("2" (lemma "both_sides_times_pos_ge2") (("2" (inst -1 "b!1" "q1!1 - q2!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "b!1 * (q2!1 - q1!1) = r1!1 - r2!1") (("1" (case "b!1 * (q2!1 - q1!1) >= b!1") (("1" (assert) nil nil) ("2" (lemma "both_sides_times_pos_ge2") (("2" (inst -1 "b!1" "q2!1 - q1!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (both_sides_times_pos_ge2 formula-decl nil real_props nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil)) 366 370 nil nil)) (unique_remainder 0 (unique_remainder-1 nil 3237052399 3245525241 ("" (lemma "unique_quotient") (("" (skosimp) (("" (inst?) (("" (assert) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (unique_quotient formula-decl nil euclidean_division nil)) 200 200 nil nil)) (unique_division 0 (unique_division-1 nil 3237052399 3245525242 ("" (lemma "unique_quotient") (("" (lemma "unique_remainder") (("" (skosimp) (("" (inst?) (("" (assert) (("" (inst -2 "b!1" "q1!1" "q2!1" "r1!1" "r2!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((unique_remainder formula-decl nil euclidean_division nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (unique_quotient formula-decl nil euclidean_division nil)) 400 360 nil nil)))(divides (mult_divides1 0 (mult_divides1-1 nil 3237052399 3245525242 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (divides const-decl "bool" divides nil) (divides const-decl "bool" divides nil)) 125 130 nil nil)) (mult_divides2 0 (mult_divides2-1 nil 3237052399 3245525242 ("" (skosimp) (("" (grind :if-match nil) (("" (inst 1 "n!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((divides const-decl "bool" divides nil) (divides const-decl "bool" divides nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 136 140 nil nil)) (divides_sum 0 (divides_sum-1 nil 3237052399 3245525242 ("" (skosimp) (("" (expand "divides") (("" (skosimp) (("" (skosimp) (("" (inst 1 "x!2 + x!3") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((divides const-decl "bool" divides nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 221 220 nil nil)) (divides_diff 0 (divides_diff-1 nil 3237052399 3245525243 ("" (skosimp) (("" (expand "divides") (("" (skosimp*) (("" (inst 1 "x!2 - x!3") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((divides const-decl "bool" divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil)) 201 200 nil nil)) (divides_opposite 0 (divides_opposite-1 nil 3237052399 3245525243 ("" (skosimp*) (("" (prop) (("1" (expand "divides") (("1" (skosimp*) (("1" (inst 1 "-x!2") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (expand "divides") (("2" (skosimp*) (("2" (inst 1 "-x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (divides const-decl "bool" divides nil)) 198 200 nil nil)) (opposite_divides 0 (opposite_divides-1 nil 3237052399 3245525243 ("" (skosimp*) (("" (expand "divides") (("" (prop) (("1" (skosimp*) (("1" (inst 1 "-x!2") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst 1 "-x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((divides const-decl "bool" divides nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 189 190 nil nil)) (divides_prod1 0 (divides_prod1-1 nil 3237052399 3245525243 ("" (skosimp*) (("" (expand "divides") (("" (skosimp*) (("" (inst 1 "x!2 * m!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((divides const-decl "bool" divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil)) 195 200 nil nil)) (divides_prod2 0 (divides_prod2-1 nil 3237052399 3245525243 ("" (skosimp*) (("" (expand "divides") (("" (skosimp*) (("" (inst 1 "x!2 * m!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((divides const-decl "bool" divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil)) 241 200 nil nil)) (divides_prod_elim1 0 (divides_prod_elim1-1 nil 3237052399 3245525244 ("" (skosimp*) (("" (expand "divides") (("" (prop) (("1" (skosimp*) (("1" (inst 1 "x!1") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst 1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((divides const-decl "bool" divides nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 418 420 nil nil)) (divides_prod_elim2 0 (divides_prod_elim2-1 nil 3237052399 3245525244 ("" (skosimp*) (("" (lemma "divides_prod_elim1") (("" (inst -1 "m!1" "n!1" "nz!1") (("" (replace -1) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((divides_prod_elim1 formula-decl nil divides nil) (nzint nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 179 180 nil nil)) (divides_reflexive 0 (divides_reflexive-1 nil 3237052399 3245525244 ("" (skosimp*) (("" (expand "divides") (("" (inst 1 "1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((divides const-decl "bool" divides nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 99 80 nil nil)) (divides_transitive 0 (divides_transitive-1 nil 3237052399 3245525244 ("" (skosimp*) (("" (expand "divides") (("" (skosimp*) (("" (inst 1 "x!1 * x!2") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((divides const-decl "bool" divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil)) 215 200 nil nil)) (product_one 0 (product_one-1 nil 3237052399 3245525245 ("" (skosimp) (("" (split) (("1" (flatten) (("1" (lemma "eq1_gt") (("1" (lemma "pos_times_lt") (("1" (inst -1 "x!1" "y!1") (("1" (assert) (("1" (split -1) (("1" (flatten) (("1" (case "x!1 > 1") (("1" (inst -4 "x!1" "y!1") (("1" (assert) nil nil)) nil) ("2" (case "y!1 > 1") (("1" (inst -4 "y!1" "x!1") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (case "x!1 < -1") (("1" (inst -4 "-x!1" "-y!1") (("1" (assert) nil nil)) nil) ("2" (case "y!1 < -1") (("1" (inst -4 "-y!1" "-x!1") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (ground) nil nil)) nil)) nil) proved ((eq1_gt formula-decl nil real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (pos_times_lt formula-decl nil real_props nil)) 244 250 nil nil)) (mutual_divisors 0 (mutual_divisors-1 nil 3237052399 3245525245 ("" (expand "divides") (("" (skosimp*) (("" (case "n!1 = 0") (("1" (assert) nil nil) ("2" (assert) (("2" (lemma "both_sides_times1" ("n0z" "n!1" "x" "x!1 * x!2" "y" "1")) (("2" (ground) (("2" (rewrite "product_one") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((product_one formula-decl nil divides nil) (both_sides_times1 formula-decl nil real_props nil) (/= const-decl "boolean" notequal nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (divides const-decl "bool" divides nil)) 345 340 nil nil)) (mutual_divisors_nat 0 (mutual_divisors_nat-1 nil 3237052399 3245525245 ("" (skosimp) (("" (forward-chain "mutual_divisors") (("" (assert) nil nil)) nil)) nil) proved ((mutual_divisors formula-decl nil divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 124 90 nil nil)) (one_divides 0 (one_divides-1 nil 3237052399 3245525246 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (divides const-decl "bool" divides nil)) 169 160 nil nil)) (divides_zero 0 (divides_zero-1 nil 3237052399 3245525246 ("" (grind :if-match all) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (divides const-decl "bool" divides nil)) 138 140 nil nil)) (zero_div_zero 0 (zero_div_zero-1 nil 3237052399 3245525246 ("" (grind :if-match all) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (divides const-decl "bool" divides nil)) 192 190 nil nil)) (divisors_of_one 0 (divisors_of_one-1 nil 3237052399 3245525246 ("" (auto-rewrite "one_divides" "opposite_divides") (("" (reduce) (("" (expand "divides") (("" (skolem!) (("" (use "product_one") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (one_divides formula-decl nil divides nil) (opposite_divides formula-decl nil divides nil) (product_one formula-decl nil divides nil) (divides const-decl "bool" divides nil)) 259 260 nil nil)) (one_div_one 0 (one_div_one-1 nil 3237052399 3245525246 ("" (skolem!) (("" (rewrite "divisors_of_one") nil nil)) nil) proved ((divisors_of_one formula-decl nil divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 75 80 nil nil)) (divisor_smaller 0 (divisor_smaller-1 nil 3237052399 3245525247 ("" (expand "divides") (("" (skosimp*) (("" (assert) (("" (use "pos_times_lt") (("" (ground) (("" (use "both_sides_times_pos_le1" ("pz" "p!1" "x" "1" "y" "x!1")) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pos_times_lt formula-decl nil real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_le1 formula-decl nil real_props nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (divides const-decl "bool" divides nil)) 325 330 nil nil)))(modulo_arithmetic (rem_TCC1 0 (rem_TCC1-1 nil 3237052399 3245525247 ("" (lemma "euclid_int") (("" (inst 1 "lambda (b: posnat): (lambda (x: int): (epsilon! (r: mod(b)): (EXISTS (q: int): x = r + b * q)))") (("" (skolem!) (("" (inst -1 "b!1" "x!1") (("" (skolem!) (("" (use "epsilon_ax[mod(b!1)]") (("" (prop) (("" (hide 2) (("" (inst 1 "r!1") (("" (inst 1 "q!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (epsilon_ax formula-decl nil epsilons nil) (euclid_int formula-decl nil euclidean_division nil)) 380 380 nil nil)) (rem_def 0 (rem_def-1 nil 3237052399 3245525248 ("" (skolem!) (("" (case "EXISTS q: x!1 = b!1 * q + rem(b!1)(x!1)") (("1" (ground) (("1" (skosimp*) (("1" (use "unique_remainder") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (delete 2) (("2" (typepred "rem(b!1)(x!1)") (("2" (skosimp) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (unique_remainder formula-decl nil euclidean_division nil) (NOT const-decl "[bool -> bool]" booleans nil)) 995 960 nil nil)) (rem_def2 0 (rem_def2-1 nil 3237052399 3245525249 ("" (skolem!) (("" (rewrite "rem_def") (("" (expand "divides") (("" (ground) (("1" (skolem!) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (skolem!) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((rem_def formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (divides const-decl "bool" divides nil)) 355 360 nil nil)) (rem_def3 0 (rem_def3-1 nil 3237052399 3245525249 ("" (skolem!) (("" (rewrite "rem_def2") (("" (ground) (("1" (rewrite "divides_opposite" :dir rl) nil nil) ("2" (rewrite "divides_opposite" :dir rl) nil nil)) nil)) nil)) nil) proved ((rem_def2 formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (divides_opposite formula-decl nil divides nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil)) 114 110 nil nil)) (rem_mod 0 (rem_mod-1 nil 3237052399 3245525249 ("" (auto-rewrite "divides_zero") (("" (skolem!) (("" (rewrite "rem_def2") nil nil)) nil)) nil) proved ((mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (rem_def2 formula-decl nil modulo_arithmetic nil) (divides_zero formula-decl nil divides nil)) 54 50 nil nil)) (rem_mod2 0 (rem_mod2-1 nil 3237052399 3245525249 ("" (skosimp) (("" (assert) (("" (rewrite "rem_mod") nil nil)) nil)) nil) proved ((mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (rem_mod formula-decl nil modulo_arithmetic nil) (AND const-decl "[bool, bool -> bool]" booleans nil)) 151 160 nil nil)) (rem_zero 0 (rem_zero-1 nil 3237052399 3245525249 ("" (auto-rewrite "divides_zero" "rem_def2") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved ((divides_zero formula-decl nil divides nil) (rem_def2 formula-decl nil modulo_arithmetic nil)) 151 150 nil nil)) (rem_self 0 (rem_self-1 nil 3237052399 3245525249 ("" (auto-rewrite "divides_reflexive" "rem_def2") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved ((divides_reflexive formula-decl nil divides nil) (rem_def2 formula-decl nil modulo_arithmetic nil)) 39 40 nil nil)) (rem_multiple1 0 (rem_multiple1-1 nil 3237052399 3245525249 ("" (auto-rewrite "divides_prod1" "divides_prod2" "divides_reflexive" "rem_def2") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved ((divides_reflexive formula-decl nil divides nil) (divides_prod1 formula-decl nil divides nil) (rem_def2 formula-decl nil modulo_arithmetic nil)) 184 180 nil nil)) (rem_multiple2 0 (rem_multiple2-1 nil 3237052399 3245525250 ("" (auto-rewrite "divides_prod1" "divides_prod2" "divides_reflexive" "rem_def2") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved ((divides_reflexive formula-decl nil divides nil) (divides_prod2 formula-decl nil divides nil) (rem_def2 formula-decl nil modulo_arithmetic nil)) 193 190 nil nil)) (rem_one 0 (rem_one-1 nil 3237052399 3245525250 ("" (skosimp) (("" (rewrite "rem_def") (("" (inst + "0") (("" (assert) nil nil)) nil)) nil)) nil) proved ((rem_def formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil)) 252 230 nil nil)) (rem_minus_one 0 (rem_minus_one-1 nil 3237052399 3245525250 ("" (skolem!) (("" (rewrite "rem_def") (("" (inst + "-1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((AND const-decl "[bool, bool -> bool]" booleans nil) (rem_def formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil)) 262 260 nil nil)) (same_remainder 0 (same_remainder-1 nil 3237052399 3245525251 ("" (skolem!) (("" (name-replace "r!1" "rem(b!1)(y!1)" :hide? nil) (("" (rewrite "rem_def2") (("" (rewrite "rem_def2") (("" (ground) (("1" (use "divides_diff" ("n" "x!1 - r!1" "m" "y!1 - r!1")) (("1" (assert) nil nil)) nil) ("2" (use "divides_sum" ("n" "x!1 - y!1" "m" "y!1 - r!1")) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (divides_sum formula-decl nil divides nil) (divides_diff formula-decl nil divides nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem_def2 formula-decl nil modulo_arithmetic nil)) 383 380 nil nil)) (rem_rem 0 (rem_rem-1 nil 3237052399 3245525251 ("" (skolem!) (("" (rewrite "same_remainder") (("" (name-replace "r!1" "rem(b!1)(x!1)" :hide? nil) (("" (rewrite "rem_def3") nil nil)) nil)) nil)) nil) proved ((same_remainder formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (rem_def3 formula-decl nil modulo_arithmetic nil)) 229 230 nil nil)) (rem_sum 0 (rem_sum-1 nil 3237052399 3245525251 ("" (auto-rewrite "same_remainder") (("" (skosimp) (("" (assert) (("" (use "divides_sum" ("n" "x!1 - y!1" "m" "z!1 - t!1")) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((divides_sum formula-decl nil divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (same_remainder formula-decl nil modulo_arithmetic nil)) 459 460 nil nil)) (rem_sum1 0 (rem_sum1-1 nil 3237052399 3245525252 ("" (skolem!) (("" (rewrite "same_remainder") (("" (rewrite "rem_def3" :dir rl) nil nil)) nil)) nil) proved ((same_remainder formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (rem_def3 formula-decl nil modulo_arithmetic nil)) 335 310 nil nil)) (rem_sum2 0 (rem_sum2-1 nil 3237052399 3245525252 ("" (skolem!) (("" (use "rem_sum1" ("x" "y!1" "y" "x!1")) (("" (assert) nil nil)) nil)) nil) proved ((rem_sum1 formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil)) 604 600 nil nil)) (rem_diff 0 (rem_diff-1 nil 3237052399 3245525253 ("" (auto-rewrite "same_remainder") (("" (skosimp) (("" (assert) (("" (use "divides_diff" ("n" "x!1 - y!1" "m" "z!1 - t!1")) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((divides_diff formula-decl nil divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (same_remainder formula-decl nil modulo_arithmetic nil)) 397 400 nil nil)) (rem_diff1 0 (rem_diff1-1 nil 3237052399 3245525253 ("" (skolem!) (("" (rewrite "same_remainder") (("" (rewrite "rem_def3" :dir rl) nil nil)) nil)) nil) proved ((same_remainder formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (= const-decl "[T, T -> boolean]" equalities nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (rem_def3 formula-decl nil modulo_arithmetic nil)) 212 210 nil nil)) (rem_diff2 0 (rem_diff2-1 nil 3237052399 3245525253 ("" (skolem!) (("" (rewrite "same_remainder") (("" (rewrite "rem_def2" :dir rl) nil nil)) nil)) nil) proved ((same_remainder formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (= const-decl "[T, T -> boolean]" equalities nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (rem_def2 formula-decl nil modulo_arithmetic nil)) 215 220 nil nil)) (rem_prod1 0 (rem_prod1-1 nil 3237052399 3245525254 ("" (skolem!) (("" (rewrite "same_remainder") (("" (use "divides_prod1" ("n" "rem(b!1)(x!1) - x!1" "m" "y!1")) (("" (assert) (("" (rewrite "rem_def3" :dir rl) nil nil)) nil)) nil)) nil)) nil) proved ((same_remainder formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (= const-decl "[T, T -> boolean]" equalities nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (rem_def3 formula-decl nil modulo_arithmetic nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (divides_prod1 formula-decl nil divides nil)) 435 410 nil nil)) (rem_prod2 0 (rem_prod2-1 nil 3237052399 3245525254 ("" (skolem!) (("" (use "rem_prod1" ("x" "y!1" "y" "x!1")) (("" (assert) nil nil)) nil)) nil) proved ((rem_prod1 formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil)) 629 630 nil nil)) (rem_prod 0 (rem_prod-1 nil 3237052399 3245525255 ("" (skosimp) (("" (auto-rewrite "rem_prod1" "rem_prod2") (("" (case "rem(b!1)(rem(b!1)(x!1) * rem(b!1)(z!1)) = rem(b!1)(y!1 * t!1)") (("1" (assert) nil nil) ("2" (replace*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((rem_prod1 formula-decl nil modulo_arithmetic nil) (rem_prod2 formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil)) 953 950 nil nil)) (rem_expt 0 (rem_expt-1 nil 3237052399 3245525256 ("" (skolem 1 ("b!1" _ "x!1" "y!1")) (("" (induct-and-simplify "n" :exclude "rem" :rewrites ("rem_prod")) nil nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (expt def-decl "real" exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (rem_prod formula-decl nil modulo_arithmetic nil)) 609 610 nil nil)) (rem_expt1 0 (rem_expt1-1 nil 3237052399 3245525256 ("" (skolem!) (("" (rewrite "rem_expt") (("" (rewrite "rem_rem") nil nil)) nil)) nil) proved ((rem_expt formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (rem_rem formula-decl nil modulo_arithmetic nil)) 297 300 nil nil)) (rem_sum_elim1 0 (rem_sum_elim1-1 nil 3237052399 3245525257 ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved ((same_remainder formula-decl nil modulo_arithmetic nil)) 241 210 nil nil)) (rem_sum_elim2 0 (rem_sum_elim2-1 nil 3237052399 3245525257 ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved ((same_remainder formula-decl nil modulo_arithmetic nil)) 254 260 nil nil)) (rem_diff_elim1 0 (rem_diff_elim1-1 nil 3237052399 3245525257 ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) (("" (prop) (("1" (rewrite "divides_opposite" :dir rl) (("1" (assert) nil nil)) nil) ("2" (rewrite "divides_opposite" :dir rl) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (divides_opposite formula-decl nil divides nil) (same_remainder formula-decl nil modulo_arithmetic nil)) 268 270 nil nil)) (rem_diff_elim2 0 (rem_diff_elim2-1 nil 3237052399 3245525257 ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved ((same_remainder formula-decl nil modulo_arithmetic nil)) 171 170 nil nil)) (rem_opposite_elim 0 (rem_opposite_elim-1 nil 3237052399 3245525258 ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) (("" (rewrite "divides_opposite" :dir rl) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((divides_opposite formula-decl nil divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (same_remainder formula-decl nil modulo_arithmetic nil)) 234 230 nil nil)) (ndiv_TCC1 0 (ndiv_TCC1-1 nil 3237052399 3245525258 ("" (inst 1 "lambda (d: [int, posnat]): (epsilon! (q: int): d`1 = rem(d`2)(d`1) + d`2 * q)") (("" (skolem!) (("" (use "epsilon_ax[int]") (("" (assert) nil nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 605 610 nil nil)) (ndiv_lt 0 (ndiv_lt-1 nil 3237052399 3245525259 ("" (skosimp*) (("" (typepred "ndiv(x!1, b!1)") (("" (case-replace "x!1 - rem(b!1)(x!1) = b!1 * ndiv(x!1, b!1)") (("1" (hide -2) (("1" (case "x!1/b!1 - rem(b!1)(x!1)/b!1 = ndiv(x!1, b!1)") (("1" (hide -2) (("1" (replace -1 * rl) (("1" (hide -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (lemma "both_sides_div1") (("2" (inst -1 "b!1" "x!1 - rem(b!1)(x!1)" "b!1 * ndiv(x!1, b!1)") (("2" (case-replace "b!1 * ndiv(x!1, b!1) / b!1 = ndiv(x!1, b!1)") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved ((ndiv const-decl "{q: int | x = b * q + rem(b)(x)}" modulo_arithmetic nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (both_sides_div1 formula-decl nil real_props nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil)) 571 550 nil nil)) (ndiv_TCC2 0 (ndiv_TCC2-1 nil 3237052399 3245525260 ("" (skosimp*) (("" (lemma "ndiv_lt") (("" (inst?) (("" (case "n!1/b!1 <= n!1") (("1" (assert) (("1" (hide -1) (("1" (typepred "ndiv(n!1, b!1)") (("1" (case "n!1 < rem(b!1)(n!1)") (("1" (lemma "rem_mod2") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (case "b!1 * ndiv(n!1, b!1) >= 0") (("1" (lemma "both_sides_times_pos_ge1") (("1" (inst -1 "b!1" "ndiv(n!1, b!1)" "0") (("1" (replace -1 2 rl t) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide 2) (("2" (hide -1) (("2" (lemma "le_div_le_pos") (("2" (inst -1 "n!1" "1" "b!1" "n!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((ndiv_lt formula-decl nil modulo_arithmetic nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (rem_mod2 formula-decl nil modulo_arithmetic nil) (both_sides_times_pos_ge1 formula-decl nil real_props nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}" modulo_arithmetic nil) (le_div_le_pos formula-decl nil real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 664 640 nil nil)))(subrange_inductions (subrange_induction_TCC1 0 (subrange_induction_TCC1-1 nil 3237052399 3245525260 ("" (assert) (("" (typepred "j") (("" (assert) nil nil)) nil)) nil) proved ((j formal-const-decl "upfrom(i)" subrange_inductions nil) (upfrom nonempty-type-eq-decl nil integers nil) (i formal-const-decl "int" subrange_inductions nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 15 20 nil nil)) (subrange_induction_TCC2 0 (subrange_induction_TCC2-1 nil 3237052399 3245525260 ("" (tcc :defs !) nil nil) proved ((subrange type-eq-decl nil integers nil) (j formal-const-decl "upfrom(i)" subrange_inductions nil) (upfrom nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (i formal-const-decl "int" subrange_inductions nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 180 180 nil nil)) (subrange_induction 0 (subrange_induction-1 nil 3237052399 3245525260 ("" (lemma "nat_induction") (("" (skosimp*) (("" (inst -1 "lambda (n:nat): n <= j - i IMPLIES p!1(n+i)") (("1" (prop) (("1" (inst -1 "k!1 - i") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (skosimp*) (("3" (inst -4 "j!1 + i") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((j!1 skolem-const-decl "nat" subrange_inductions nil) (subrange type-eq-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (i formal-const-decl "int" subrange_inductions nil) (upfrom nonempty-type-eq-decl nil integers nil) (j formal-const-decl "upfrom(i)" subrange_inductions nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat_induction formula-decl nil naturalnumbers nil)) 446 450 nil nil)) (SUBRANGE_induction 0 (SUBRANGE_induction-1 nil 3237052399 3245525261 ("" (skosimp) (("" (skosimp) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): n <= j - i IMPLIES p!1(n+i)") (("1" (split) (("1" (inst -2 "k!1") (("1" (assert) (("1" (skosimp) (("1" (inst -1 "m!1-i") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -3 "j!1+i") (("1" (assert) (("1" (skosimp) (("1" (inst -1 "m!1-i") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (j formal-const-decl "upfrom(i)" subrange_inductions nil) (upfrom nonempty-type-eq-decl nil integers nil) (i formal-const-decl "int" subrange_inductions nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pred type-eq-decl nil defined_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (subrange type-eq-decl nil integers nil) (j!1 skolem-const-decl "nat" subrange_inductions nil) (NAT_induction formula-decl nil naturalnumbers nil)) 469 470 nil nil)))(bounded_int_inductions (upfrom_induction_TCC1 0 (upfrom_induction_TCC1-1 nil 3237052399 3245525261 ("" (subtype-tcc) nil nil) proved nil 10 10 nil nil)) (upfrom_induction_TCC2 0 (upfrom_induction_TCC2-1 nil 3237052399 3245525261 ("" (subtype-tcc) nil nil) proved nil 17 20 nil nil)) (upfrom_induction 0 (upfrom_induction-1 nil 3237052399 3245525261 ("" (lemma "nat_induction") (("" (skosimp*) (("" (inst -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (prop) (("1" (inst -1 "jf!1-m") (("1" (assert) nil nil)) nil) ("2" (hide -1) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (split) (("1" (inst -5 "j!1+m") (("1" (assert) nil nil)) nil) ("2" (inst 1 "j!1+m") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (upfrom nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (m formal-const-decl "int" bounded_int_inductions nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nat_induction formula-decl nil naturalnumbers nil)) 356 350 nil nil)) (UPFROM_induction 0 (UPFROM_induction-1 nil 3237052399 3245525262 ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (prop) (("1" (inst -1 "jf!1-m") (("1" (split) (("1" (assert) nil nil) ("2" (inst 1 "jf!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -4 "j!1+m") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "kf!1-m") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NAT_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (upfrom nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (m formal-const-decl "int" bounded_int_inductions nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 341 320 nil nil)) (above_induction_TCC1 0 (above_induction_TCC1-1 nil 3237052399 3245525262 ("" (subtype-tcc) nil nil) proved nil 56 50 nil nil)) (above_induction_TCC2 0 (above_induction_TCC2-1 nil 3237052399 3245525262 ("" (subtype-tcc) nil nil) proved nil 77 80 nil nil)) (above_induction 0 (above_induction-1 nil 3237052399 3245525262 ("" (skosimp*) (("" (lemma "nat_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (prop) (("1" (inst -1 "ja!1-m") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (split) (("1" (inst -5 "j!1+m") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (inst 1 "j!1+m") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (j!1 skolem-const-decl "nat" bounded_int_inductions nil) (above nonempty-type-eq-decl nil integers nil) (pred type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (m formal-const-decl "int" bounded_int_inductions nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (> const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)) 424 420 nil nil)) (ABOVE_induction 0 (ABOVE_induction-1 nil 3237052399 3245525263 ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (prop) (("1" (inst -1 "ja!1-m") (("1" (split) (("1" (assert) nil nil) ("2" (inst 1 "ja!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -4 "j!1+m") (("1" (assert) (("1" (skosimp*) (("1" (inst -1 "ka!1-m") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((NAT_induction formula-decl nil naturalnumbers nil) (j!1 skolem-const-decl "nat" bounded_int_inductions nil) (above nonempty-type-eq-decl nil integers nil) (pred type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (m formal-const-decl "int" bounded_int_inductions nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (> const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)) 400 400 nil nil)))(bounded_nat_inductions (upto_induction_TCC1 0 (upto_induction_TCC1-1 nil 3237052399 3245525263 ("" (subtype-tcc) nil nil) proved nil 12 10 nil nil)) (upto_induction_TCC2 0 (upto_induction_TCC2-1 nil 3237052399 3245525263 ("" (subtype-tcc) nil nil) proved ((upto nonempty-type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" bounded_nat_inductions nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 159 160 nil nil)) (upto_induction 0 (upto_induction-1 nil 3237052399 3245525263 ("" (skosimp*) (("" (lemma "nat_induction") (("" (inst -1 "lambda (n:nat): n <= m IMPLIES pt!1(n)") (("" (prop) (("1" (inst -1 "jt!1") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (inst -4 "j!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (j!1 skolem-const-decl "nat" bounded_nat_inductions nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" bounded_nat_inductions nil) (<= const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 187 190 nil nil)) (UPTO_induction 0 (UPTO_induction-1 nil 3237052399 3245525263 ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): n <= m IMPLIES pt!1(n)") (("" (prop) (("1" (inst -1 "jt!1") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (inst -3 "j!1") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "kt!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NAT_induction formula-decl nil naturalnumbers nil) (j!1 skolem-const-decl "nat" bounded_nat_inductions nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" bounded_nat_inductions nil) (<= const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 150 110 nil nil)) (below_induction_TCC1 0 (below_induction_TCC1-1 nil 3237052399 3245525263 ("" (subtype-tcc) nil nil) proved nil 14 10 nil nil)) (below_induction_TCC2 0 (below_induction_TCC2-1 nil 3237052399 3245525264 ("" (subtype-tcc) nil nil) proved ((below type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" bounded_nat_inductions nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 177 180 nil nil)) (below_induction 0 (below_induction-1 nil 3237052399 3245525264 ("" (skosimp*) (("" (lemma "nat_induction") (("" (inst -1 "lambda (n:nat): n < m IMPLIES pb!1(n)") (("" (prop) (("1" (inst -2 "jb!1") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (skosimp*) (("4" (inst -4 "j!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("5" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (j!1 skolem-const-decl "nat" bounded_nat_inductions nil) (below type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" bounded_nat_inductions nil) (< const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 214 220 nil nil)) (BELOW_induction 0 (BELOW_induction-1 nil 3237052399 3245525264 ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): n < m IMPLIES pb!1(n)") (("" (prop) (("1" (inst -1 "jb!1") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (inst -3 "j!1") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "kb!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NAT_induction formula-decl nil naturalnumbers nil) (j!1 skolem-const-decl "nat" bounded_nat_inductions nil) (below type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" bounded_nat_inductions nil) (< const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 119 120 nil nil)))(subrange_type)(int_types)(nat_types)(nat_fun_props (injection_n_to_m 0 (injection_n_to_m-1 nil 3242964223 3245525265 ("" (induct "n") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (typepred "f!1(0)") (("2" (assert) (("2" (hide -1) (("2" (inst -1 "m!1 - 1") (("2" (assert) (("2" (delete 2) (("2" (inst 1 "LAMBDA (x : below[j!1]) : IF f!1(x) = m!1 - 1 THEN f!1(j!1) ELSE f!1(x) ENDIF") (("1" (expand "injective?") (("1" (skosimp) (("1" (lift-if) (("1" (lift-if) (("1" (inst-cp -2 "x1!1" "j!1") (("1" (inst-cp -2 "x2!1" "j!1") (("1" (inst -2 "x1!1" "x2!1") (("1" (assert) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (skosimp) (("3" (expand "injective?") (("3" (inst -2 "x!1" "j!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((- const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (j!1 skolem-const-decl "nat" nat_fun_props nil) (below type-eq-decl nil nat_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (m!1 skolem-const-decl "nat" nat_fun_props nil) (f!1 skolem-const-decl "[below(1 + j!1) -> below(m!1)]" nat_fun_props nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat_induction formula-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (injective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 816 820 t shostak)) (injection_n_to_m_var 0 (injection_n_to_m_var-1 nil 3243223197 3245525265 ("" (skolem!) (("" (ground) (("1" (rewrite "injection_n_to_m") nil nil) ("2" (inst + "lambda (i: below(n!1)): i") (("2" (grind) nil nil)) nil)) nil)) nil) proved ((nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (injection_n_to_m formula-decl nil nat_fun_props nil) (injective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil)) 108 70 t shostak)) (surjection_n_to_m 0 (surjection_n_to_m-1 nil 3242964294 3245525265 ("" (skosimp*) (("" (rewrite "injection_n_to_m") (("" (expand "surjective?") (("" (inst -1 "0") (("" (skosimp) (("" (assert) (("" (inst 1 "inverse(f!1)") (("1" (rewrite "inj_inv") (("1" (inst 1 "x!1") nil nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((injection_n_to_m formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (inj_inv formula-decl nil function_inverse nil) (inverse const-decl "D" function_inverse nil) (n!1 skolem-const-decl "nat" nat_fun_props nil) (TRUE const-decl "bool" booleans nil) (surjective? const-decl "bool" functions nil)) 132 130 t shostak)) (surjection_n_to_m_var 0 (surjection_n_to_m_var-1 nil 3243223295 3245525266 ("" (skolem!) (("" (apply (then (split) (flatten))) (("1" (forward-chain "surjection_n_to_m") (("1" (assert) (("1" (skosimp) (("1" (typepred "f!1(0)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (inst + "lambda (i: below(n!1)): IF i < m!1 THEN i ELSE 0 ENDIF") (("1" (grind) nil nil) ("2" (reduce) nil nil)) nil)) nil)) nil) proved ((below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (surjection_n_to_m formula-decl nil nat_fun_props nil) (surjective? const-decl "bool" functions nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (n!1 skolem-const-decl "nat" nat_fun_props nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (m!1 skolem-const-decl "nat" nat_fun_props nil)) 346 340 t shostak)) (bijection_n_to_m 0 (bijection_n_to_m-1 nil 3242964328 3245525266 ("" (skolem!) (("" (prop) (("1" (expand "bijective?") (("1" (skosimp) (("1" (lemma "injection_n_to_m" ("n" "n!1" "m" "m!1")) (("1" (lemma "surjection_n_to_m" ("n" "n!1" "m" "m!1")) (("1" (split) (("1" (assert) (("1" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "LAMBDA (x : below[n!1]) : x") (("1" (grind) nil nil) ("2" (skolem!) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((surjection_n_to_m formula-decl nil nat_fun_props nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (injection_n_to_m formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (n!1 skolem-const-decl "nat" nat_fun_props nil) (below type-eq-decl nil nat_types nil) (m!1 skolem-const-decl "nat" nat_fun_props nil)) 182 180 t shostak)) (injection_n_to_m2 0 (injection_n_to_m2-1 nil 3243223324 3245525266 ("" (skolem!) (("" (ground) (("1" (lemma "injection_n_to_m" ("n" "n!1+1" "m" "m!1+1")) (("1" (assert) (("1" (skolem!) (("1" (inst + "lambda (i : below(1 + n!1)) : f!1(i)") (("1" (grind :if-match nil) (("1" (inst? :where +) (("1" (assert) nil nil)) nil)) nil) ("2" (skolem!) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "lambda (i : upto(n!1)): i") (("2" (grind) nil nil)) nil)) nil)) nil) proved ((f!1 skolem-const-decl "[upto(n!1) -> upto(m!1)]" nat_fun_props nil) (m!1 skolem-const-decl "nat" nat_fun_props nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (n!1 skolem-const-decl "nat" nat_fun_props nil) (< const-decl "bool" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (injection_n_to_m formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)) 462 460 t shostak)) (surjection_n_to_m2 0 (surjection_n_to_m2-1 nil 3243223349 3245525267 ("" (skolem!) (("" (ground) (("1" (lemma "surjection_n_to_m" ("n" "n!1+1" "m" "m!1+1")) (("1" (assert) (("1" (skolem!) (("1" (inst + "lambda (i: below(1 + n!1)): f!1(i)") (("1" (grind :if-match nil) (("1" (inst? -) (("1" (skolem!) (("1" (inst?) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "lambda (i : upto(n!1)): IF i <= m!1 THEN i ELSE 0 ENDIF") (("2" (grind) nil nil)) nil)) nil)) nil) proved ((f!1 skolem-const-decl "[upto(n!1) -> upto(m!1)]" nat_fun_props nil) (m!1 skolem-const-decl "nat" nat_fun_props nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (n!1 skolem-const-decl "nat" nat_fun_props nil) (< const-decl "bool" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (surjective? const-decl "bool" functions nil) (surjection_n_to_m formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil)) 557 540 t shostak)) (bijection_n_to_m2 0 (bijection_n_to_m2-1 nil 3243223474 3245525267 ("" (skolem!) (("" (ground) (("1" (expand "bijective?") (("1" (skosimp) (("1" (lemma "injection_n_to_m2" ("n" "n!1" "m" "m!1")) (("1" (lemma "surjection_n_to_m2" ("n" "n!1" "m" "m!1")) (("1" (ground) (("1" (inst?) nil nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "lambda (i : upto(n!1)): i") (("2" (grind) nil nil)) nil)) nil)) nil) proved ((surjection_n_to_m2 formula-decl nil nat_fun_props nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (injection_n_to_m2 formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil)) 186 190 t shostak)) (surj_equiv_inj 0 (surj_equiv_inj-1 nil 3243223495 3245525269 ("" (skolem!) (("" (case "n!1 = 0") (("1" (grind) nil nil) ("2" (ground) (("1" (use "surjection_n_to_m" ("n" "n!1 - 1" "m" "n!1")) (("1" (assert) (("1" (expand* "surjective?" "injective?") (("1" (skosimp) (("1" (inst + "lambda (i : below(n!1 - 1)): IF i < x1!1 THEN f!1(i) ELSE f!1(i+1) ENDIF") (("1" (assert) (("1" (skolem!) (("1" (inst - "y!1") (("1" (skolem!) (("1" (case "x!1 = x1!1") (("1" (inst + "IF x2!1 < x!1 THEN x2!1 ELSE x2!1-1 ENDIF") (("1" (smash) nil nil) ("2" (ground) nil nil) ("3" (ground) nil nil)) nil) ("2" (inst + "IF x!1 < x1!1 THEN x!1 ELSE x!1 - 1 ENDIF") (("1" (smash) nil nil) ("2" (ground) nil nil) ("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "injection_n_to_m" ("n" "n!1" "m" "n!1-1")) (("2" (assert) (("2" (expand* "injective?" "surjective?") (("2" (skolem!) (("2" (inst + "lambda (i : below(n!1)) : IF f!1(i) = n!1 - 1 THEN y!1 ELSE f!1(i) ENDIF") (("1" (assert) (("1" (skosimp) (("1" (inst? - :where +) (("1" (smash) (("1" (inst + "x2!1") (("1" (assert) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (skosimp) (("3" (inst? +) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (injection_n_to_m formula-decl nil nat_fun_props nil) (y!1 skolem-const-decl "below(n!1)" nat_fun_props nil) (f!1 skolem-const-decl "[below(n!1) -> below(n!1)]" nat_fun_props nil) (surjection_n_to_m formula-decl nil nat_fun_props nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (x1!1 skolem-const-decl "below(n!1)" nat_fun_props nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (n!1 skolem-const-decl "nat" nat_fun_props nil) (x2!1 skolem-const-decl "below(n!1)" nat_fun_props nil) (x!1 skolem-const-decl "below(n!1)" nat_fun_props nil) (NOT const-decl "[bool -> bool]" booleans nil)) 1490 1440 t shostak)) (inj_equiv_bij 0 (inj_equiv_bij-1 nil 3243223527 3245525269 ("" (skolem!) (("" (expand "bijective?") (("" (ground) (("" (rewrite "surj_equiv_inj") nil nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surj_equiv_inj formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil)) 36 40 t shostak)) (surj_equiv_bij 0 (surj_equiv_bij-1 nil 3243223548 3245525269 ("" (skolem!) (("" (expand "bijective?") (("" (ground) (("" (rewrite "surj_equiv_inj") nil nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surj_equiv_inj formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil)) 35 40 t shostak)) (surj_equiv_inj2 0 (surj_equiv_inj2-1 nil 3243223572 3245525270 ("" (skolem!) (("" (lemma "surj_equiv_inj" ("n" "n!1+1" "f" "lambda (i : below(n!1 + 1)): f!1(i)")) (("1" (expand* "surjective?" "injective?") (("1" (reduce :if-match nil) (("1" (inst? -4 :where +) (("1" (assert) nil nil)) nil) ("2" (inst? -2) (("2" (skolem!) (("2" (inst? +) nil nil)) nil)) nil) ("3" (inst - "y!1") (("3" (skolem!) (("3" (inst + "x!1") nil nil)) nil)) nil) ("4" (inst? - :where +) (("4" (assert) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (assert) nil nil)) nil)) nil)) nil) proved ((upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (surj_equiv_inj formula-decl nil nat_fun_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil)) 1264 1240 t shostak)) (inj_equiv_bij2 0 (inj_equiv_bij2-1 nil 3243223596 3245525270 ("" (skolem!) (("" (expand "bijective?") (("" (ground) (("" (rewrite "surj_equiv_inj2") nil nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surj_equiv_inj2 formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 36 40 t shostak)) (surj_equiv_bij2 0 (surj_equiv_bij2-1 nil 3243223623 3245525270 ("" (skolem!) (("" (expand "bijective?") (("" (ground) (("" (rewrite "surj_equiv_inj2") nil nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surj_equiv_inj2 formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 36 30 t shostak)))(finite_sets (finite_set_TCC1 0 (finite_set_TCC1-1 nil 3243832506 3245525270 ("" (expand "is_finite") (("" (inst 1 "0" "LAMBDA (s: (emptyset[T])): 0") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) proved ((FALSE const-decl "bool" booleans nil) (emptyset const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (is_finite const-decl "bool" finite_sets nil)) 76 80 t shostak)) (is_finite_surj 0 (is_finite_surj-1 nil 3243836561 3245525271 ("" (skosimp*) (("" (prop) (("1" (skosimp) (("1" (grind :if-match nil) (("1" (inst 1 "N!1" "lambda (x: (s!1)): epsilon! (n: below[N!1]): x = f!1(n)") (("1" (skosimp) (("1" (use "epsilon_ax[below[N!1]]" :if-match all) (("1" (prop) (("1" (grind) nil nil) ("2" (inst -2 "x1!1") (("2" (skosimp) (("2" (inst 1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (inst -2 "x2!1") (("3" (skosimp) (("3" (inst 1 "x!1") (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (inst -1 "x1!1") (("4" (skosimp) (("4" (inst 1 "x!1") (("4" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (inst -1 "x1!1") (("2" (skosimp) (("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil) ("2" (case "empty?(s!1)") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (case "empty?(s!1)") (("1" (expand "empty?") (("1" (inst 1 "0" "lambda (n: below[0]): epsilon! (x: (s!1)): true") (("1" (hide -2) (("1" (grind :if-match nil) (("1" (inst -2 "y!1") nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand "is_finite") (("2" (skosimp) (("2" (grind :if-match nil) (("2" (inst 1 "N!1" "lambda (n : below[N!1]): epsilon!(x : (s!1)) : n = f!1(x)") (("1" (skolem-typepred) (("1" (inst 1 "f!1(y!1)") (("1" (use "epsilon_ax[(s!1)]") (("1" (prop) (("1" (inst -4 "y!1" "epsilon(LAMBDA (x: (s!1)): f!1(y!1) = f!1(x))") (("1" (assert) nil nil) ("2" (inst 1 "y!1") nil nil)) nil) ("2" (inst 1 "y!1") nil nil)) nil) ("2" (inst 1 "y!1") nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (is_finite const-decl "bool" finite_sets nil) (empty? const-decl "bool" sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (member const-decl "bool" sets nil) (epsilon_ax formula-decl nil epsilons nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (s!1 skolem-const-decl "set[T]" finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N!1 skolem-const-decl "nat" finite_sets nil) (below type-eq-decl nil nat_types nil) (TRUE const-decl "bool" booleans nil) (N!1 skolem-const-decl "nat" finite_sets nil) (FALSE const-decl "bool" booleans nil)) 949 930 t nil)) (finite_subset 0 (finite_subset-1 nil 3243836755 3245525272 ("" (grind :if-match nil) (("" (inst 1 "N!1" "lambda (x: (s!1)): f!1(x)") (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil) ("2" (typepred "x2!1") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil) ("3" (typepred "x1!1") (("3" (inst?) (("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (inst? -4) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((s!1 skolem-const-decl "set[T]" finite_sets nil) (A!1 skolem-const-decl "finite_set" finite_sets nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (x1!1 skolem-const-decl "(s!1)" finite_sets nil) (x2!1 skolem-const-decl "(s!1)" finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 242 240 t shostak)) (finite_intersection 0 (finite_intersection-1 nil 3243836807 3245525272 ("" (grind :if-match nil) (("" (inst 1 "N!1" "lambda (x: (intersection(A!1, B!1))): f!1(x)") (("1" (skolem-typepred) (("1" (inst?) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (A!1 skolem-const-decl "finite_set" finite_sets nil) (B!1 skolem-const-decl "finite_set" finite_sets nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (x1!1 skolem-const-decl "(intersection(A!1, B!1))" finite_sets nil) (x2!1 skolem-const-decl "(intersection(A!1, B!1))" finite_sets nil) (member const-decl "bool" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil)) 374 360 t shostak)) (finite_add 0 (finite_add-1 nil 3243836836 3245525273 ("" (grind :if-match nil) (("" (inst 1 "N!1 + 1" "lambda (x: (add(x!1, A!1))): if x = x!1 then N!1 else f!1(x) endif") (("1" (grind :if-match nil) (("1" (inst -4 "x1!1" "x2!1") (("1" (assert) nil nil)) nil)) nil) ("2" (grind :if-match nil) nil nil) ("3" (grind :if-match nil) nil nil)) nil)) nil) proved ((nonempty? const-decl "bool" sets nil) (add const-decl "(nonempty?)" sets nil) (x!1 skolem-const-decl "T" finite_sets nil) (A!1 skolem-const-decl "finite_set" finite_sets nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (f!1 skolem-const-decl "[(A!1) -> below[N!1]]" finite_sets nil) (below type-eq-decl nil nat_types nil) (N!1 skolem-const-decl "nat" finite_sets nil) (< const-decl "bool" reals nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (member const-decl "bool" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil)) 675 670 t shostak)) (nonempty_finite_is_nonempty 0 (nonempty_finite_is_nonempty-1 nil 3243832507 3245525273 ("" (grind) nil nil) proved ((nonempty? const-decl "bool" sets nil)) 19 20 t shostak)) (finite_singleton 0 (finite_singleton-1 nil 3243832507 3245525273 ("" (skosimp) (("" (expand "is_finite") (("" (inst 1 "1" "LAMBDA (x: (singleton[T](x!1))): 0") (("" (grind) nil nil)) nil)) nil)) nil) proved ((is_finite const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 78 80 t shostak)) (finite_union 0 (finite_union-1 nil 3243832507 3245525274 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (skosimp) (("" (inst 1 "N!1 + N!2" "LAMBDA (x : (union(A!1, B!1))) : IF A!1(x) THEN f!1(x) ELSE N!1 + f!2(x) ENDIF") (("1" (grind) nil nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (delete -) (("3" (grind) nil nil)) nil) ("4" (skosimp) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (x1!1 skolem-const-decl "(union[T](A!1, B!1))" finite_sets nil) (x2!1 skolem-const-decl "(union[T](A!1, B!1))" finite_sets nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (f!2 skolem-const-decl "[(B!1) -> below[N!2]]" finite_sets nil) (union const-decl "set" sets nil) (A!1 skolem-const-decl "finite_set" finite_sets nil) (B!1 skolem-const-decl "finite_set" finite_sets nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N!1 skolem-const-decl "nat" finite_sets nil) (below type-eq-decl nil nat_types nil) (f!1 skolem-const-decl "[(A!1) -> below[N!1]]" finite_sets nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (N!2 skolem-const-decl "nat" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 1224 1150 t shostak)) (finite_intersection1 0 (finite_intersection1-3 nil 3243834683 3245525274 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (intersection[T](s!1, A!1))): f!1(x)") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (expand "intersection") (("1" (expand "member") (("1" (flatten) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "intersection") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((A!1 skolem-const-decl "finite_set" finite_sets nil) (s!1 skolem-const-decl "set[T]" finite_sets nil) (intersection const-decl "set" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (member const-decl "bool" sets nil) (x1!1 skolem-const-decl "(intersection[T](s!1, A!1))" finite_sets nil) (x2!1 skolem-const-decl "(intersection[T](s!1, A!1))" finite_sets nil) (injective? const-decl "bool" functions nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 114 120 t nil) (finite_intersection1-2 nil 3243834664 nil ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (intersection[T](S!1, A!1))): f!1(x)") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (expand "intersection") (("1" (expand "member") (("1" (flatten) (("1" (inst?) (("1" (assert) nil))))))))))))) ("2" (skolem-typepred) (("2" (expand "intersection") (("2" (expand "member") (("2" (assert) nil)))))))))))))) nil) unchecked nil nil nil nil nil) (finite_intersection1-1 nil 3243832507 3243834318 ("" (postpone) nil nil) unfinished nil 128464 4090 t shostak)) (finite_intersection2 0 (finite_intersection2-1 nil 3243832507 3245525274 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (intersection[T](A!1, s!1))): f!1(x)") (("1" (expand "injective?") (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil) ("2" (typepred "x2!1") (("2" (expand "intersection") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (typepred "x1!1") (("3" (expand "intersection") (("3" (expand "member") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "intersection") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((s!1 skolem-const-decl "set[T]" finite_sets nil) (A!1 skolem-const-decl "finite_set" finite_sets nil) (intersection const-decl "set" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (member const-decl "bool" sets nil) (x2!1 skolem-const-decl "(intersection[T](A!1, s!1))" finite_sets nil) (x1!1 skolem-const-decl "(intersection[T](A!1, s!1))" finite_sets nil) (injective? const-decl "bool" functions nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 137 140 t shostak)) (finite_difference 0 (finite_difference-1 nil 3243832507 3245525275 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x :(difference[T](A!1, s!1))): f!1(x)") (("1" (expand "injective?") (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil) ("2" (typepred "x2!1") (("2" (expand "difference") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (typepred "x1!1") (("3" (expand "difference") (("3" (expand "member") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "difference") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((s!1 skolem-const-decl "set[T]" finite_sets nil) (A!1 skolem-const-decl "finite_set" finite_sets nil) (difference const-decl "set" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (member const-decl "bool" sets nil) (x2!1 skolem-const-decl "(difference[T](A!1, s!1))" finite_sets nil) (x1!1 skolem-const-decl "(difference[T](A!1, s!1))" finite_sets nil) (injective? const-decl "bool" functions nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 152 150 t shostak)) (nonempty_finite_union1 0 (nonempty_finite_union1-1 nil 3243832507 3245525275 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (non_empty_finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (B!1 skolem-const-decl "finite_set" finite_sets nil) (x!1 skolem-const-decl "T" finite_sets nil) (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (union const-decl "set" sets nil) (empty? const-decl "bool" sets nil)) 496 460 t shostak)) (nonempty_finite_union2 0 (nonempty_finite_union2-1 nil 3243832507 3245525276 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (non_empty_finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (A!1 skolem-const-decl "finite_set" finite_sets nil) (x!1 skolem-const-decl "T" finite_sets nil) (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (union const-decl "set" sets nil) (empty? const-decl "bool" sets nil)) 470 450 t shostak)) (nonempty_add_finite 0 (nonempty_add_finite-1 nil 3243832507 3245525276 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (split) (("1" (inst 1 "N!1+1" "lambda (x: (add[T](x!1, A!1))): if x = x!1 then N!1 else f!1(x) endif") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (lift-if) (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (inst -4 "x1!1" "x2!1") (("1" (assert) nil nil) ("2" (expand "add") (("2" (assert) (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil) ("3" (expand "add") (("3" (expand "member") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (assert) nil nil)) nil)) nil) ("3" (skolem-typepred) (("3" (flatten) (("3" (assert) (("3" (expand "add") (("3" (expand "member") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "empty?") (("2" (inst -1 "x!1") (("2" (expand "member") (("2" (expand "add") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (x2!1 skolem-const-decl "(add[T](x!1, A!1))" finite_sets nil) (x1!1 skolem-const-decl "(add[T](x!1, A!1))" finite_sets nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N!1 skolem-const-decl "nat" finite_sets nil) (below type-eq-decl nil nat_types nil) (f!1 skolem-const-decl "[(A!1) -> below[N!1]]" finite_sets nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonempty? const-decl "bool" sets nil) (add const-decl "(nonempty?)" sets nil) (x!1 skolem-const-decl "T" finite_sets nil) (A!1 skolem-const-decl "finite_set" finite_sets nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (empty? const-decl "bool" sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 337 320 t shostak)) (finite_remove 0 (finite_remove-1 nil 3243832507 3245525276 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (remove[T](x!1, A!1))): f!1(x)") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (inst?) (("1" (expand "remove") (("1" (expand "member") (("1" (assert) nil nil)) nil)) nil) ("2" (expand "remove") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "remove") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((A!1 skolem-const-decl "finite_set" finite_sets nil) (x!1 skolem-const-decl "T" finite_sets nil) (remove const-decl "set" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (member const-decl "bool" sets nil) (x2!1 skolem-const-decl "(remove[T](x!1, A!1))" finite_sets nil) (x1!1 skolem-const-decl "(remove[T](x!1, A!1))" finite_sets nil) (injective? const-decl "bool" functions nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 115 120 t shostak)) (finite_rest 0 (finite_rest-1 nil 3243832507 3245525276 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (rest[T](A!1))): f!1(x)") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (inst?) (("1" (expand "rest") (("1" (assert) (("1" (hide -1) (("1" (prop) (("1" (expand "empty?") (("1" (skosimp) (("1" (expand "member") (("1" (expand "remove") (("1" (expand "member") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "rest") (("2" (assert) (("2" (hide -2) (("2" (prop) (("2" (expand "remove") (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "rest") (("2" (assert) (("2" (prop) (("2" (expand "remove") (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((A!1 skolem-const-decl "finite_set" finite_sets nil) (rest const-decl "set" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (remove const-decl "set" sets nil) (x2!1 skolem-const-decl "(rest[T](A!1))" finite_sets nil) (x1!1 skolem-const-decl "(rest[T](A!1))" finite_sets nil) (injective? const-decl "bool" functions nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 176 180 t shostak)) (finite_emptyset 0 (finite_emptyset-1 nil 3243832507 3245525276 ("" (expand "is_finite") (("" (inst 1 "0" "LAMBDA (x:(emptyset[T])): 0") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (expand "emptyset") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "emptyset") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((FALSE const-decl "bool" booleans nil) (emptyset const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (is_finite const-decl "bool" finite_sets nil)) 53 50 t shostak)) (nonempty_singleton_finite 0 (nonempty_singleton_finite-1 nil 3243832507 3245525277 ("" (subtype-tcc) nil nil) proved ((singleton const-decl "(singleton?)" sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)) 43 30 t shostak)) (finite_full 0 (finite_full-1 nil 3243836878 3245525277 ("" (grind :if-match nil) (("1" (inst 1 "N!1" "g!1") (("1" (grind) nil nil)) nil) ("2" (inst 1 "N!1" "f!1") (("2" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (restrict const-decl "R" restrict nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (is_finite const-decl "bool" finite_sets nil) (is_finite_type const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil)) 444 360 t shostak)) (finite_type_set 0 (finite_type_set-1 nil 3243836911 3245525277 ("" (grind :if-match nil) (("" (inst 1 "N!1" "g!1") (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (restrict const-decl "R" restrict nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (is_finite const-decl "bool" finite_sets nil) (is_finite_type const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil)) 268 220 t shostak)) (finite_complement 0 (finite_complement-1 nil 3243836931 3245525278 ("" (grind :if-match nil) (("" (inst 1 "N!1" "g!1") (("" (grind :if-match nil) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (complement const-decl "set" sets nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (is_finite const-decl "bool" finite_sets nil) (is_finite_type const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil)) 300 230 t shostak)) (inj_set_TCC1 0 (inj_set_TCC1-1 nil 3243832508 3245525278 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 204 190 t shostak)) (inj_Card 0 (inj_Card-1 nil 3243836968 3245525278 ("" (skosimp) (("" (expand "Card") (("" (rewrite "min_def") (("" (expand "minimum?") (("" (flatten) (("" (expand "inj_set") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Card const-decl "nat" finite_sets nil) (minimum? const-decl "bool" min_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (inj_set const-decl "(nonempty?[nat])" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (T formal-type-decl nil finite_sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (min_def formula-decl nil min_nat nil)) 87 90 t shostak)) (reduce_inj_TCC1 0 (reduce_inj_TCC1-1 nil 3243832508 3245525278 ("" (subtype-tcc) nil nil) proved ((surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil)) 59 60 t shostak)) (reduce_inj 0 (reduce_inj-1 nil 3243836998 3245525279 ("" (skosimp) (("" (grind :if-match nil) (("" (inst 2 "LAMBDA (x : (S!1)) : IF f!1(x) = p!1 - 1 THEN y!1 ELSE f!1(x) ENDIF") (("1" (skosimp) (("1" (inst -2 "x1!1" "x2!1") (("1" (lift-if) (("1" (lift-if) (("1" (assert) (("1" (prop) (("1" (inst?) nil nil) ("2" (inst 3 "x2!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (skosimp) (("3" (inst 2 "x!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (below type-eq-decl nil nat_types nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (S!1 skolem-const-decl "finite_set" finite_sets nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (p!1 skolem-const-decl "posnat" finite_sets nil) (f!1 skolem-const-decl "[(S!1) -> below[p!1]]" finite_sets nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (y!1 skolem-const-decl "below[p!1]" finite_sets nil)) 417 380 t shostak)) (Card_injection 0 (Card_injection-1 nil 3243837042 3245525279 ("" (skosimp*) (("" (expand "Card") (("" (typepred "min(inj_set(S!1))") (("" (inst?) (("" (assert) (("" (expand "inj_set") (("" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Card const-decl "nat" finite_sets nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonempty? const-decl "bool" sets nil) (inj_set const-decl "(nonempty?[nat])" finite_sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat nil)) 112 110 t shostak)) (Card_surjection 0 (Card_surjection-1 nil 3243837068 3245525279 ("" (skosimp*) (("" (name "CS" "Card(S!1)") (("" (replace -1) (("" (forward-chain "inj_Card") (("" (skolem!) (("" (rewrite "injection_n_to_m") (("" (copy -3) (("" (expand "surjective?" -1) (("" (inst -1 "0") (("" (skosimp*) (("" (inst 1 "f!2 o inverse(f!1)") (("1" (hide -3 2) (("1" (forward-chain "inj_inv[(S!1),below[n!1]]") (("1" (hide -4) (("1" (grind :if-match nil :exclude inverse) (("1" (inst -6 "epsilon! (x: (S!1)): f!1(x) = x1!1" "epsilon! (x: (S!1)): f!1(x) = x2!1") (("1" (inst -3 "x1!1" "x2!1") (("1" (assert) (("1" (expand "inverse") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Card const-decl "nat" finite_sets nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (inj_Card formula-decl nil finite_sets nil) (injection_n_to_m formula-decl nil nat_fun_props nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (inj_inv formula-decl nil function_inverse nil) (below type-eq-decl nil naturalnumbers nil) (O const-decl "T3" function_props nil) (inverse const-decl "D" function_inverse nil) (TRUE const-decl "bool" booleans nil) (S!1 skolem-const-decl "finite_set" finite_sets nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (surjective? const-decl "bool" functions nil)) 659 650 t shostak)) (Card_bijection 0 (Card_bijection-1 nil 3243837106 3245525280 ("" (skolem!) (("" (prop) (("1" (forward-chain "inj_Card") (("1" (skolem!) (("1" (inst?) (("1" (expand "bijective?") (("1" (assert) (("1" (case "n!1 = 0") (("1" (delete -2 -3) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (forward-chain "reduce_inj") (("2" (forward-chain "Card_injection") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "bijective?") (("2" (skosimp) (("2" (lemma "Card_injection" ("S" "S!1" "n" "n!1")) (("2" (split) (("1" (lemma "Card_surjection" ("S" "S!1" "n" "n!1")) (("1" (ground) (("1" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (= const-decl "[T, T -> boolean]" equalities nil) (surjective? const-decl "bool" functions nil) (reduce_inj formula-decl nil finite_sets nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (Card_injection formula-decl nil finite_sets nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (inj_Card formula-decl nil finite_sets nil) (Card_surjection formula-decl nil finite_sets nil)) 271 220 t shostak)) (Card_disj_union 0 (Card_disj_union-1 nil 3243837140 3245525282 ("" (skosimp) (("" (name-replace "N1" "Card(S!1)" :hide? nil) (("" (name-replace "N2" "Card(S2!1)" :hide? nil) (("" (auto-rewrite "Card_bijection") (("" (do-rewrite) (("" (skosimp*) (("" (inst 1 "LAMBDA (x : (union(S!1, S2!1))) : IF S!1(x) THEN f!2(x) ELSE N1 + f!1(x) ENDIF") (("1" (expand "bijective?") (("1" (prop) (("1" (delete -2 -4) (("1" (grind) nil nil)) nil) ("2" (delete -1 -3) (("2" (grind :if-match nil) (("2" (inst -3 "y!1") (("1" (skolem!) (("1" (inst? 1) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (inst -2 "y!1 - N1") (("2" (skolem!) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (delete -1 -2) (("3" (grind) nil nil)) nil) ("4" (skosimp) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (T formal-type-decl nil finite_sets nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (Card const-decl "nat" finite_sets nil) (bijective? const-decl "bool" functions nil) (y!1 skolem-const-decl "below[N1 + N2]" finite_sets nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (surjective? const-decl "bool" functions nil) (x2!1 skolem-const-decl "(union(S!1, S2!1))" finite_sets nil) (x1!1 skolem-const-decl "(union(S!1, S2!1))" finite_sets nil) (disjoint? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (injective? const-decl "bool" functions nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (f!1 skolem-const-decl "[(S2!1) -> below[N2]]" finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (union const-decl "set" sets nil) (S!1 skolem-const-decl "finite_set" finite_sets nil) (S2!1 skolem-const-decl "finite_set" finite_sets nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (N1 skolem-const-decl "nat" finite_sets nil) (below type-eq-decl nil nat_types nil) (f!2 skolem-const-decl "[(S!1) -> below[N1]]" finite_sets nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (N2 skolem-const-decl "nat" finite_sets nil) (Card_bijection formula-decl nil finite_sets nil)) 1997 1830 t shostak)) (card_TCC1 0 (card_TCC1-1 nil 3243832508 3245525282 ("" (inst 1 "(LAMBDA S: Card(S))") nil nil) proved ((Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil)) 14 20 t shostak)) (card_def 0 (card_def-1 nil 3243837211 3245525282 ("" (skosimp*) (("" (assert) nil nil)) nil) proved nil 55 30 t shostak)) (card_emptyset 0 (card_emptyset-1 nil 3242964880 3245525282 ("" (rewrite "card_def") (("" (rewrite "Card_bijection") (("" (inst 1 "LAMBDA (x : {x: T | FALSE}) : 0") (("1" (expand "bijective?") (("1" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (typepred "x1!1") (("1" (expand "emptyset") (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "emptyset") (("2" (propax) nil nil)) nil)) nil) ("3" (skosimp*) nil nil)) nil)) nil)) nil) proved ((Card_bijection formula-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (below type-eq-decl nil nat_types nil) (NOT const-decl "[bool -> bool]" booleans nil) (FALSE const-decl "bool" booleans nil) (emptyset const-decl "set" sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (card_def formula-decl nil finite_sets nil)) 94 100 t shostak)) (empty_card 0 (empty_card-1 nil 3242964945 3245525282 ("" (skolem!) (("" (prop) (("1" (rewrite "emptyset_is_empty?[T]") (("1" (replace -1) (("1" (use "card_emptyset") nil nil)) nil)) nil) ("2" (rewrite "card_def") (("2" (rewrite "Card_bijection") (("2" (skolem!) (("2" (delete -) (("2" (grind) (("2" (typepred "f!1(x!1)") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((card_emptyset formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (emptyset_is_empty? formula-decl nil sets_lemmas nil) (Card_bijection formula-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (TRUE const-decl "bool" booleans nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (card_def formula-decl nil finite_sets nil)) 109 110 t shostak)) (card_empty? 0 (card_empty?-1 nil 3242964970 3245525282 ("" (skosimp*) (("" (rewrite "empty_card") nil nil)) nil) proved ((empty_card formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil)) 29 20 t shostak)) (card_is_0 0 (card_is_0-1 nil 3242964987 3245525282 ("" (skosimp*) (("" (rewrite "card_empty?") (("" (rewrite "emptyset_is_empty?") nil nil)) nil)) nil) proved ((card_empty? formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (emptyset_is_empty? formula-decl nil sets_lemmas nil)) 31 30 t shostak)) (nonempty_card 0 (nonempty_card-1 nil 3242965012 3245525282 ("" (skosimp) (("" (expand "nonempty?") (("" (rewrite "empty_card") (("" (ground) nil nil)) nil)) nil)) nil) proved ((nonempty? const-decl "bool" sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (empty_card formula-decl nil finite_sets nil)) 38 30 t shostak)) (card_singleton 0 (card_singleton-1 nil 3242965037 3245525283 ("" (skosimp*) (("" (rewrite "card_def") (("" (rewrite "Card_bijection") (("" (inst 1 "LAMBDA (y : (singleton(x!1))) : 0") (("" (grind) (("" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil) proved ((card_def formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (singleton? const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (Card_bijection formula-decl nil finite_sets nil)) 165 160 t shostak)) (card_one 0 (card_one-1 nil 3242965057 3245525283 ("" (skosimp*) (("" (rewrite "card_def") (("" (prop) (("1" (rewrite "Card_bijection") (("1" (skolem!) (("1" (grind :if-match nil) (("1" (inst -2 "0") (("1" (skolem!) (("1" (inst? 1) (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (ground) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "card_def" :dir rl) (("2" (rewrite "card_singleton") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((card_def formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (card_singleton formula-decl nil finite_sets nil) (Card_bijection formula-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (singleton? const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)) 280 240 t shostak)) (card_disj_union 0 (card_disj_union-1 nil 3242965085 3245525283 ("" (skosimp*) (("" (rewrite "card_def") (("" (rewrite "card_def") (("" (rewrite "card_def") (("" (rewrite "Card_disj_union") nil nil)) nil)) nil)) nil)) nil) proved ((card_def formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (union const-decl "set" sets nil) (Card_disj_union formula-decl nil finite_sets nil)) 77 70 t shostak)) (card_diff_subset 0 (card_diff_subset-1 nil 3242965107 3245525283 ("" (skosimp) (("" (forward-chain "union_diff_subset") (("" (lemma "card_disj_union") (("" (inst?) (("" (assert) (("" (rewrite "difference_disjoint") nil nil)) nil)) nil)) nil)) nil)) nil) proved ((union_diff_subset formula-decl nil sets_lemmas nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (difference const-decl "set" sets nil) (difference_disjoint formula-decl nil sets_lemmas nil) (card_disj_union formula-decl nil finite_sets nil)) 135 140 t shostak)) (card_subset 0 (card_subset-1 nil 3242965128 3245525283 ("" (skosimp) (("" (forward-chain "card_diff_subset") (("" (assert) nil nil)) nil)) nil) proved ((card_diff_subset formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil)) 84 80 t shostak)) (card_plus 0 (card_plus-1 nil 3242965147 3245525284 ("" (auto-rewrite "union_subset1[T]" "intersection_subset1[T]") (("" (skolem!) (("" (lemma "card_diff_subset") (("" (inst-cp -1 "A!1" "union(A!1, B!1)") (("" (rewrite "diff_union_inter[T]") (("" (inst? -1) (("" (ground) (("" (rewrite "intersection_commutative" 1) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (union const-decl "set" sets nil) (intersection const-decl "set" sets nil) (intersection_commutative formula-decl nil sets_lemmas nil) (intersection_subset1 formula-decl nil sets_lemmas nil) (union_subset1 formula-decl nil sets_lemmas nil) (diff_union_inter formula-decl nil sets_lemmas nil) (card_diff_subset formula-decl nil finite_sets nil)) 452 450 t shostak)) (card_union 0 (card_union-1 nil 3242965170 3245525284 ("" (skosimp*) (("" (lemma "card_plus") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil) proved ((card_plus formula-decl nil finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil)) 277 280 t shostak)) (card_add 0 (card_add-1 nil 3242965190 3245525285 ("" (skosimp*) (("" (lift-if) (("" (prop) (("1" (rewrite "member_add") (("1" (assert) nil nil) ("2" (expand "member") (("2" (propax) nil nil)) nil)) nil) ("2" (rewrite "add_as_union") (("2" (rewrite "singleton" :dir rl) (("2" (rewrite "union_commutative") (("2" (rewrite "card_disj_union") (("1" (rewrite "card_singleton") (("1" (assert) (("1" (expand "singleton") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (rewrite "singleton_disjoint") (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((add_as_union formula-decl nil sets_lemmas nil) (union_commutative formula-decl nil sets_lemmas nil) (singleton_disjoint formula-decl nil sets_lemmas nil) (card_singleton formula-decl nil finite_sets nil) (card_disj_union formula-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (union const-decl "set" sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (member_add formula-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (member const-decl "bool" sets nil)) 469 430 t shostak)) (card_remove 0 (card_remove-1 nil 3242965278 3245525285 ("" (skolem!) (("" (lift-if) (("" (prop) (("1" (rewrite "remove_as_difference") (("1" (rewrite "card_diff_subset") (("1" (rewrite "card_singleton") nil nil) ("2" (lemma "singleton_subset[T]") (("2" (inst?) (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "member_remove") (("1" (assert) nil nil) ("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((member_remove formula-decl nil sets_lemmas nil) (remove_as_difference formula-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (singleton_subset formula-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (card_singleton formula-decl nil finite_sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (card_diff_subset formula-decl nil finite_sets nil)) 212 210 t shostak)) (card_rest 0 (card_rest-1 nil 3242965301 3245525285 ("" (skosimp) (("" (expand "rest") (("" (rewrite "card_remove") (("1" (lemma "choose_member[T]") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (expand "nonempty?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((rest const-decl "set" sets nil) (choose_member formula-decl nil sets_lemmas nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (card_remove formula-decl nil finite_sets nil)) 129 130 t shostak)) (same_card_subset 0 (same_card_subset-1 nil 3242965321 3245525285 ("" (skosimp) (("" (case "EXISTS x : member(x, B!1) AND subset?(A!1, remove(x, B!1))") (("1" (skosimp) (("1" (expand "member") (("1" (forward-chain "card_subset") (("1" (rewrite "card_remove") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (apply-extensionality :hide? t) (("2" (grind :exclude "Card" :if-match nil) (("1" (inst? -) (("1" (assert) nil nil)) nil) ("2" (inst? +) (("2" (assert) (("2" (skosimp) (("2" (assert) (("2" (inst - "x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((remove const-decl "set" sets nil) (subset? const-decl "bool" sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (card_remove formula-decl nil finite_sets nil) (card_subset formula-decl nil finite_sets nil) (/= const-decl "boolean" notequal nil)) 270 270 t shostak)) (smaller_card_subset 0 (smaller_card_subset-1 nil 3242965352 3245525286 ("" (skosimp) (("" (forward-chain "card_subset") (("" (case-replace "A!1 = B!1") (("1" (assert) nil nil) ("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((card_subset formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (= const-decl "[T, T -> boolean]" equalities nil)) 183 190 t shostak)) (card_1_has_1 0 (card_1_has_1-1 nil 3242965373 3245525286 ("" (skosimp*) (("" (use "card_empty?") (("" (iff) (("" (flatten) (("" (assert) (("" (expand "empty?") (("" (skosimp*) (("" (expand "member") (("" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((card_empty? formula-decl nil finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 64 60 t shostak)) (card_2_has_2 0 (card_2_has_2-1 nil 3242965395 3245525286 ("" (skosimp*) (("" (lemma "card_1_has_1") (("" (inst?) (("" (assert) (("" (skosimp*) (("" (lemma "card_1_has_1") (("" (inst -1 "remove(x!1,S!1)") (("" (rewrite "card_remove") (("" (lift-if) (("" (assert) (("" (skosimp*) (("" (expand "remove") (("" (expand "member") (("" (flatten) (("" (inst 2 "x!1" "x!2") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((card_1_has_1 formula-decl nil finite_sets nil) (card_remove formula-decl nil finite_sets nil) (member const-decl "bool" sets nil) (remove const-decl "set" sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil)) 168 140 t shostak)) (card_intersection_le 0 (card_intersection_le-1 nil 3242965417 3245525286 ("" (skosimp*) (("" (case "subset?(intersection(A!1, B!1),A!1) AND
                    subset?(intersection(A!1, B!1),B!1)") (("1" (flatten) (("1" (lemma "card_subset") (("1" (split 1) (("1" (inst -1 "intersection(A!1, B!1)" "A!1") (("1" (assert) nil nil)) nil) ("2" (inst -1 "intersection(A!1, B!1)" "B!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "subset?") (("2" (expand "intersection") (("2" (expand "member") (("2" (split 1) (("1" (skosimp*) nil nil) ("2" (skosimp*) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (intersection const-decl "set" sets nil) (subset? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (card_subset formula-decl nil finite_sets nil) (member const-decl "bool" sets nil)) 105 110 t shostak)) (card_bij 0 (card_bij-1 nil 3242965441 3245525286 ("" (skosimp*) (("" (rewrite "card_def") (("" (rewrite "Card_bijection") nil nil)) nil)) nil) proved ((card_def formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (Card_bijection formula-decl nil finite_sets nil)) 36 40 t shostak)) (bij_exists 0 (bij_exists-1 nil 3242965457 3245525286 ("" (skosimp*) (("" (lemma "card_bij") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil) proved ((card_bij formula-decl nil finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 35 30 t shostak)))(function_iterate (iterate_TCC1 0 (iterate_TCC1-1 nil 3237052399 3245525286 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 62 70 nil nil)) (iterate_TCC2 0 (iterate_TCC2-1 nil 3237052399 3245525286 ("" (tcc :defs !) nil nil) proved nil 17 10 nil nil)) (iterate_add 0 (iterate_add-1 nil 3237052399 3245525287 ("" (induct "m") (("1" (skosimp) (("1" (expand "iterate" 1 1) (("1" (expand "o") (("1" (apply-extensionality) nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (expand "iterate" 1 1) (("2" (expand "iterate" 1 3) (("2" (inst -1 "f!1" "n!1") (("2" (expand "o") (("2" (apply-extensionality) (("2" (replace -1 :dir rl) (("2" (beta) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (iterate def-decl "T" function_iterate nil) (O const-decl "T3" function_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (T formal-type-decl nil function_iterate nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 271 270 nil nil)) (iterate_add_applied 0 (iterate_add_applied-1 nil 3237052399 3245525287 ("" (induct-and-simplify "m") nil nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil function_iterate nil) (= const-decl "[T, T -> boolean]" equalities nil) (iterate def-decl "T" function_iterate nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat_induction formula-decl nil naturalnumbers nil)) 409 370 nil nil)) (iterate_add_one 0 (iterate_add_one-1 nil 3237052399 3245525287 ("" (induct-and-simplify "n") nil nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil function_iterate nil) (= const-decl "[T, T -> boolean]" equalities nil) (iterate def-decl "T" function_iterate nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat_induction formula-decl nil naturalnumbers nil)) 273 280 nil nil)) (iterate_mult 0 (iterate_mult-1 nil 3237052399 3245525288 ("" (induct "m") (("1" (induct "n") (("1" (skosimp) (("1" (expand "iterate") (("1" (propax) nil nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (inst?) (("2" (expand "iterate" 1 1) (("2" (apply-extensionality) (("2" (replace -1) (("2" (expand "iterate" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (induct "n" :name "NAT_induction") (("2" (skosimp) (("2" (skosimp) (("2" (case "j!2 = 0") (("1" (replace -1) (("1" (expand "iterate" 1 1) (("1" (expand "iterate" 1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (expand "iterate" 2 1) (("2" (expand "iterate" 2 4) (("2" (apply-extensionality 2) (("2" (hide 3) (("2" (inst-cp -1 "j!2-1") (("2" (assert) (("2" (inst? -2) (("2" (replace -2) (("2" (lemma "iterate_add") (("2" (inst -1 "f!1" "1+j!1" "-1 - j!1 + j!1 * j!2 + j!2") (("1" (expand "o") (("1" (case "iterate(f!1, 1 + j!1)(iterate(f!1, -1 - j!1 + j!1 * j!2 + j!2)(x!1)) = iterate(f!1, j!1 * j!2 + j!2)(x!1)") (("1" (hide -2) (("1" (replace -1) (("1" (expand "iterate" 1 1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (replace -1 :dir rl) (("2" (beta) (("2" (propax) nil nil)) nil)) nil) ("3" (hide -1 -2 -3 -4 2) (("3" (case "j!1 * j!2 >= j!1") (("1" (assert) nil nil) ("2" (assert) (("2" (case "j!1 = 0") (("1" (assert) nil nil) ("2" (lemma "div_mult_pos_ge2") (("2" (inst -1 "j!1" "j!2" "j!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (case "j!1 * j!2 >= j!1") (("1" (assert) nil nil) ("2" (lemma "div_mult_pos_ge2") (("2" (inst -1 "j!1" "j!2" "j!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((- const-decl "[numfield -> numfield]" number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (div_mult_pos_ge2 formula-decl nil real_props nil) (O const-decl "T3" function_props nil) (iterate_add formula-decl nil function_iterate nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (j!2 skolem-const-decl "nat" function_iterate nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (j!1 skolem-const-decl "nat" function_iterate nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (NAT_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat_induction formula-decl nil naturalnumbers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (iterate def-decl "T" function_iterate nil) (= const-decl "[T, T -> boolean]" equalities nil) (T formal-type-decl nil function_iterate nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1056 990 nil nil)) (iterate_invariant 0 (iterate_invariant-1 nil 3237052399 3245525289 ("" (induct "n") (("1" (skosimp*) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (nat_induction formula-decl nil naturalnumbers nil) (iterate def-decl "T" function_iterate nil) (= const-decl "[T, T -> boolean]" equalities nil) (T formal-type-decl nil function_iterate nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 144 140 nil nil)))(sequences (insert_TCC1 0 (insert_TCC1-1 nil 3237052399 3245525289 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 114 110 nil nil)) (insert_delete 0 (insert_delete-1 nil 3237052399 3245525289 ("" (skolem 1 ("n!1" "seq!1")) (("" (expand "insert") (("" (apply-extensionality 1) (("1" (delete 2) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (expand "delete") (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split) (("1" (flatten) (("1" (expand "nth") (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (expand "delete") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (apply-extensionality 4) nil nil)) nil)) nil)) nil)) nil) proved ((insert const-decl "sequence" sequences nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (n!1 skolem-const-decl "nat" sequences nil) (< const-decl "bool" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (sequence type-eq-decl nil sequences nil) (delete const-decl "sequence" sequences nil) (nth const-decl "T" sequences nil) (T formal-type-decl nil sequences nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 359 360 nil nil)) (add_first_rest 0 (add_first_rest-1 nil 3237052399 3245525289 ("" (skolem 1 ("seq!1")) (("" (expand "add") (("" (expand "insert") (("" (apply-extensionality 1) (("1" (delete 2) (("1" (lift-if) (("1" (prop) (("1" (expand "first") (("1" (expand "nth") (("1" (assert) nil nil)) nil)) nil) ("2" (expand "rest") (("2" (expand "suffix") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (apply-extensionality 3) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((add const-decl "sequence" sequences nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (T formal-type-decl nil sequences nil) (rest const-decl "sequence" sequences nil) (first const-decl "T" sequences nil) (sequence type-eq-decl nil sequences nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (suffix const-decl "sequence" sequences nil) (nth const-decl "T" sequences nil) (insert const-decl "sequence" sequences nil)) 175 170 nil nil)) (sequence_induction 0 (sequence_induction-1 nil 3237052399 3245525289 ("" (lemma "nat_induction") (("" (skosimp) (("" (inst -1 "(lambda (n:nat): p!1(nth(seq!1, n)))") (("" (assert) (("" (split) (("1" (assert) (("1" (expand "every") (("1" (propax) nil nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((every const-decl "bool" sequences nil) (nth const-decl "T" sequences nil) (sequence type-eq-decl nil sequences nil) (T formal-type-decl nil sequences nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nat_induction formula-decl nil naturalnumbers nil)) 82 60 nil nil)))(seq_functions)(finite_sequences (empty_seq_TCC1 0 (empty_seq_TCC1-1 nil 3237052399 3245525289 ("" (existence-tcc) nil nil) proved nil 23 20 nil nil)) (oh_TCC1 0 (oh_TCC1-1 nil 3237052399 3245525290 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil nat_types nil) (T formal-type-decl nil finite_sequences nil) (finseq type-eq-decl nil finite_sequences nil)) 158 160 nil nil)) (oh_TCC2 0 (oh_TCC2-1 nil 3237052399 3245525290 ("" (tcc :defs !) nil nil) proved ((finseq type-eq-decl nil finite_sequences nil) (T formal-type-decl nil finite_sequences nil) (below type-eq-decl nil nat_types nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 258 260 nil nil)) (caret_TCC1 0 (caret_TCC1-1 nil 3237052399 3245525290 ("" (grind :if-match nil) nil nil) proved ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 354 350 nil nil)) (caret_TCC2 0 (caret_TCC2-1 nil 3237052399 3245525291 ("" (tcc :defs explicit) nil nil) proved nil 127 130 nil nil)) (caret_TCC3 0 (caret_TCC3-1 nil 3237052399 3245525291 ("" (skosimp) (("" (beta) (("" (lift-if) (("" (assert) (("" (ground) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 314 310 nil nil)) (extract1_TCC1 0 (extract1_TCC1-1 nil 3237052399 3245525291 ("" (tcc :defs !) nil nil) proved nil 10 10 nil nil)) (o_assoc 0 (o_assoc-1 nil 3237052399 3245525294 ("" (skosimp) (("" (expand "o") (("" (apply-extensionality) (("1" (hide 2) (("1" (lift-if) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp) (("2" (assert) nil nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp) (("4" (assert) nil nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp) (("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((O const-decl "finseq" finite_sequences nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (fs3!1 skolem-const-decl "finseq" finite_sequences nil) (fs2!1 skolem-const-decl "finseq" finite_sequences nil) (fs1!1 skolem-const-decl "finseq" finite_sequences nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (finseq type-eq-decl nil finite_sequences nil) (T formal-type-decl nil finite_sequences nil) (below type-eq-decl nil nat_types nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 2619 2580 nil nil)))(ordstruct)(ordinals (lessp_TCC1 0 (lessp_TCC1-1 nil 3237052399 3245525294 ("" (grind) nil nil) proved ((reduce adt-def-decl "[ordstruct -> range]" ordstruct_adt_reduce nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (> const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (size const-decl "[ordstruct -> nat]" ordinals nil)) 325 320 nil nil)) (lessp_TCC2 0 (lessp_TCC2-1 nil 3237052399 3245525294 ("" (skosimp*) (("" (replace -1) (("" (expand "size") (("" (expand "reduce" 3 2) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((reduce adt-def-decl "[ordstruct -> range]" ordstruct_adt_reduce nil) (size const-decl "[ordstruct -> nat]" ordinals nil)) 218 220 nil nil)) (ordinal?_TCC1 0 (ordinal?_TCC1-1 nil 3237052399 3245525294 ("" (skosimp*) (("" (replace -1) (("" (expand "size") (("" (expand "reduce" 1 2) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((reduce adt-def-decl "[ordstruct -> range]" ordstruct_adt_reduce nil) (size const-decl "[ordstruct -> nat]" ordinals nil)) 196 200 nil nil)) (ordinal?_TCC2 0 (ordinal?_TCC2-1 nil 3237052399 3245525295 ("" (skosimp*) (("" (replace -1) (("" (expand "size") (("" (expand "reduce" 1 2) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((reduce adt-def-decl "[ordstruct -> range]" ordstruct_adt_reduce nil) (size const-decl "[ordstruct -> nat]" ordinals nil)) 239 200 nil nil)) (ordinal_TCC1 0 (ordinal_TCC1-1 nil 3237052399 3245525295 ("" (inst 1 "zero") (("" (assert) (("" (expand "ordinal?") (("" (propax) nil nil)) nil)) nil)) nil) proved ((zero adt-constructor-decl "(zero?)" ordstruct_adt nil) (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt nil) (ordinal? def-decl "bool" ordinals nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (ordstruct type-decl nil ordstruct_adt nil)) 15 10 nil nil)) (ordinal_irreflexive 0 (ordinal_irreflexive-1 nil 3237052399 3245525295 ("" (induct "r") (("1" (assert) nil nil) ("2" (flatten) (("2" (expand "<") (("2" (propax) nil nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) (("3" (expand "<" -4) (("3" (split -4) (("1" (assert) (("1" (expand "ordinal?" -3) (("1" (propax) nil nil)) nil)) nil) ("2" (expand "ordinal?" -4) (("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((ordinal nonempty-type-eq-decl nil ordinals nil) (ordstruct_induction formula-decl nil ordstruct_adt nil) (< def-decl "bool" ordinals nil) (NOT const-decl "[bool -> bool]" booleans nil) (ordinal? def-decl "bool" ordinals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (ordstruct type-decl nil ordstruct_adt nil)) 86 90 nil nil)) (ordinal_antisym 0 (ordinal_antisym-1 nil 3237052399 3245525295 ("" (induct "r") (("1" (assert) nil nil) ("2" (flatten) (("2" (skosimp*) (("2" (expand "<") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (induct "s") (("1" (assert) nil nil) ("2" (flatten) (("2" (expand "<" -2) (("2" (propax) nil nil)) nil)) nil) ("3" (skosimp) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (expand "<" -6) (("3" (split -6) (("1" (inst -8 "add2_var!2") (("1" (assert) (("1" (expand "<" -7) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "<" -8) (("2" (assert) (("2" (replace -1) (("2" (lemma "ordinal_irreflexive") (("2" (inst -1 "add2_var!2") nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (expand "<" -9) (("3" (replace -1) (("3" (replace -2) (("3" (lemma "ordinal_irreflexive") (("3" (inst-cp -1 "add2_var!2") (("3" (assert) (("3" (inst -12 "add3_var!2") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonzero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt nil) (add adt-constructor-decl "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt nil) (ordinal_irreflexive formula-decl nil ordinals nil) (ordstruct_induction formula-decl nil ordstruct_adt nil) (NOT const-decl "[bool -> bool]" booleans nil) (< def-decl "bool" ordinals nil) (ordinal nonempty-type-eq-decl nil ordinals nil) (ordinal? def-decl "bool" ordinals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (ordstruct type-decl nil ordstruct_adt nil)) 320 320 nil nil)) (ordinal_antisymmetric 0 (ordinal_antisymmetric-1 nil 3237052399 3245525295 ("" (skosimp) (("" (expand "<=") (("" (split) (("1" (split) (("1" (lemma "ordinal_antisym") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil) proved ((<= const-decl "bool" ordinals nil) (ordstruct type-decl nil ordstruct_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (ordinal? def-decl "bool" ordinals nil) (ordinal nonempty-type-eq-decl nil ordinals nil) (ordinal_antisym formula-decl nil ordinals nil)) 26 20 nil nil)) (ordinal_transitive 0 (ordinal_transitive-1 nil 3237052399 3245525296 ("" (induct "s") (("1" (assert) nil nil) ("2" (flatten) (("2" (skosimp) (("2" (expand "<" -2) (("2" (lift-if -2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (skosimp) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (hide -3 -4) (("3" (skosimp) (("3" (expand "<" -4) (("3" (lift-if) (("3" (split -4) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (expand "<" -5) (("2" (lift-if) (("2" (split) (("1" (split) (("1" (flatten) (("1" (expand "<" 2) (("1" (assert) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (expand "<" 3) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split) (("1" (assert) (("1" (prop) (("1" (assert) (("1" (expand "<" 4) (("1" (flatten) (("1" (assert) (("1" (inst -4 "exp(r!1)" "exp(t!1)") (("1" (assert) nil nil) ("2" (assert) (("2" (typepred "t!1") (("2" (expand "ordinal?" -1) (("2" (propax) nil nil)) nil)) nil)) nil) ("3" (typepred "r!1") (("3" (expand "ordinal?" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "<" 4) (("2" (assert) nil nil)) nil) ("3" (expand "<" 4) (("3" (assert) nil nil)) nil) ("4" (expand "<" 5) (("4" (assert) (("4" (inst -4 "exp(r!1)" "exp(t!1)") (("1" (assert) nil nil) ("2" (typepred "t!1") (("2" (expand "ordinal?" -1) (("2" (assert) nil nil)) nil)) nil) ("3" (typepred "r!1") (("3" (expand "ordinal?" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (expand "<" 5) (("5" (assert) nil nil)) nil) ("6" (expand "<" 5) (("6" (assert) nil nil)) nil)) nil)) nil) ("2" (split -5) (("1" (propax) nil nil) ("2" (flatten) (("2" (hide -6) (("2" (prop) (("1" (assert) (("1" (expand "<" 4) (("1" (propax) nil nil)) nil)) nil) ("2" (expand "<" 4) (("2" (assert) nil nil)) nil) ("3" (expand "<" 4) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "<" 3) (("3" (assert) (("3" (hide -4) (("3" (split -4) (("1" (propax) nil nil) ("2" (flatten) (("2" (assert) (("2" (flatten) (("2" (assert) (("2" (split -1) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (assert) (("2" (inst -8 "rest(r!1)" "rest(t!1)") (("1" (assert) nil nil) ("2" (typepred "t!1") (("2" (expand "ordinal?" -1) (("2" (assert) nil nil)) nil)) nil) ("3" (typepred "r!1") (("3" (expand "ordinal?" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (t!1 skolem-const-decl "ordinal" ordinals nil) (r!1 skolem-const-decl "ordinal" ordinals nil) (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt nil) (nonzero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt nil) (rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt nil) (ordstruct_induction formula-decl nil ordstruct_adt nil) (< def-decl "bool" ordinals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (ordinal nonempty-type-eq-decl nil ordinals nil) (ordinal? def-decl "bool" ordinals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (ordstruct type-decl nil ordstruct_adt nil)) 912 880 nil nil)) (ordinal_trichotomy 0 (ordinal_trichotomy-1 nil 3237052399 3245525297 ("" (induct "r") (("1" (assert) nil nil) ("2" (flatten) (("2" (induct "s") (("1" (assert) nil nil) ("2" (skosimp) (("2" (expand "ordinal?" -3) (("2" (flatten) (("2" (assert) (("2" (expand "<" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skosimp) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (induct "s") (("1" (assert) nil nil) ("2" (flatten) (("2" (expand "<" 3) (("2" (propax) nil nil)) nil)) nil) ("3" (skosimp) (("3" (assert) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (expand "<" 1) (("3" (flatten) (("3" (expand "<" 5) (("3" (flatten) (("3" (inst -6 "add2_var!2") (("3" (assert) (("3" (replace -6) (("3" (assert) (("3" (hide -3 -4 1 5) (("3" (hide -6 -7) (("3" (inst -5 "add3_var!2") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonzero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt nil) (add adt-constructor-decl "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt nil) (zero adt-constructor-decl "(zero?)" ordstruct_adt nil) (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt nil) (ordstruct_induction formula-decl nil ordstruct_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (< def-decl "bool" ordinals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (ordinal nonempty-type-eq-decl nil ordinals nil) (ordinal? def-decl "bool" ordinals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (ordstruct type-decl nil ordstruct_adt nil)) 343 340 nil nil)) (well_founded_le 0 (well_founded_le-1 nil 3237052399 3245525297 ("" (expand "well_founded?") (("" (lemma "ordinal_induction") (("" (skosimp) (("" (skosimp) (("" (inst -1 "LAMBDA (x:ordinal): NOT p!1(x)") (("" (split) (("1" (inst -1 "y!1") nil nil) ("2" (skosimp) (("2" (inst 1 "r!1") (("2" (skosimp) (("2" (inst -1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((ordinal_induction formula-decl nil ordinals nil) (p!1 skolem-const-decl "pred[(ordinal?)]" ordinals nil) (r!1 skolem-const-decl "ordinal" ordinals nil) (NOT const-decl "[bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (ordinal nonempty-type-eq-decl nil ordinals nil) (ordinal? def-decl "bool" ordinals nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (ordstruct type-decl nil ordstruct_adt nil) (well_founded? const-decl "bool" orders nil)) 58 60 nil nil)))(lex2 (lex2_TCC1 0 (lex2_TCC1-1 nil 3237052399 3245525297 ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved ((ordinal? def-decl "bool" ordinals nil)) 77 40 nil nil)) (lex2_TCC2 0 (lex2_TCC2-1 nil 3237052399 3245525297 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 50 50 nil nil)) (lex2_TCC3 0 (lex2_TCC3-1 nil 3237052399 3245525297 ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved ((ordinal? def-decl "bool" ordinals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 80 80 nil nil)) (lex2_TCC4 0 (lex2_TCC4-1 nil 3237052399 3245525297 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 50 50 nil nil)) (lex2_TCC5 0 (lex2_TCC5-1 nil 3237052399 3245525297 ("" (grind) nil nil) proved ((ordinal? def-decl "bool" ordinals nil)) 27 30 nil nil)) (lex2_TCC6 0 (lex2_TCC6-1 nil 3237052399 3245525297 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 67 60 nil nil)) (lex2_TCC7 0 (lex2_TCC7-1 nil 3237052399 3245525297 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 67 70 nil nil)) (lex2_TCC8 0 (lex2_TCC8-1 nil 3237052399 3245525297 ("" (grind) nil nil) proved ((ordinal? def-decl "bool" ordinals nil) (< def-decl "bool" ordinals nil)) 35 40 nil nil)) (lex2_lt 0 (lex2_lt-1 nil 3237052399 3245525299 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< def-decl "bool" ordinals nil) (lex2 const-decl "ordinal" lex2 nil)) 1588 1550 nil nil)))(list)(list_props (length_TCC1 0 (length_TCC1-1 nil 3237052399 3245525299 ("" (tcc :defs !) nil nil) proved ((reduce_nat adt-def-decl "[list -> nat]" list_adt nil)) 71 70 nil nil)) (member_TCC1 0 (member_TCC1-1 nil 3237052399 3245525299 ("" (tcc :defs !) nil nil) proved ((length def-decl "nat" list_props nil)) 31 30 nil nil)) (member_null 0 (member_null-1 nil 3237052399 3245525299 ("" (grind :if-match nil) nil nil) proved ((member def-decl "bool" list_props nil)) 52 50 nil nil)) (nth_TCC1 0 (nth_TCC1-1 nil 3237052399 3245525299 ("" (skosimp) (("" (typepred "n!1") (("" (expand "length") (("" (assert) nil nil)) nil)) nil)) nil) proved ((below type-eq-decl nil nat_types nil) (length def-decl "nat" list_props nil) (list type-decl nil list_adt nil) (T formal-type-decl nil list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 73 30 nil nil)) (nth_TCC2 0 (nth_TCC2-1 nil 3237052399 3245525299 ("" (skosimp) (("" (typepred "n!1") (("" (expand "length") (("" (assert) nil nil)) nil)) nil)) nil) proved ((below type-eq-decl nil nat_types nil) (length def-decl "nat" list_props nil) (list type-decl nil list_adt nil) (T formal-type-decl nil list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 33 30 nil nil)) (nth_TCC3 0 (nth_TCC3-1 nil 3237052399 3245525300 ("" (induct "l") (("1" (skosimp*) (("1" (typepred "n!1") (("1" (expand "length") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) (("2" (typepred "n!1") (("2" (expand "length" -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) (("3" (typepred "n!1") (("3" (expand "length" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list_induction formula-decl nil list_adt nil) (T formal-type-decl nil list_props nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (below type-eq-decl nil nat_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)) 341 340 nil nil)) (nth_TCC4 0 (nth_TCC4-1 nil 3237052399 3245525300 ("" (induct "l") (("1" (skosimp*) (("1" (typepred "n!1") (("1" (expand "length") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "length" 2 2) (("2" (assert) nil nil)) nil)) nil) ("3" (skosimp*) (("3" (typepred "n!1") (("3" (expand "length" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list_induction formula-decl nil list_adt nil) (T formal-type-decl nil list_props nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (below type-eq-decl nil nat_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)) 277 280 nil nil)) (append_TCC1 0 (append_TCC1-1 nil 3237052399 3245525300 ("" (tcc :defs !) nil nil) proved ((length def-decl "nat" list_props nil)) 31 30 nil nil)) (append_null 0 (append_null-1 nil 3237052399 3245525300 ("" (induct "l") (("1" (grind) nil nil) ("2" (skosimp) (("2" (expand "append" +) (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((list_induction formula-decl nil list_adt nil) (T formal-type-decl nil list_props nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (append def-decl "list[T]" list_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil)) 53 50 nil nil)) (append_assoc 0 (append_assoc-1 nil 3237052399 3245525301 ("" (induct-and-simplify "l1") nil nil) proved ((list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (append def-decl "list[T]" list_props nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil)) 177 140 nil nil)) (reverse_append 0 (reverse_append-1 nil 3237052399 3245525301 ("" (induct-and-simplify "l1") (("1" (rewrite "append_null") nil nil) ("2" (replace -1) (("2" (rewrite "append_assoc" :dir rl) nil nil)) nil)) nil) proved ((null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (append_assoc formula-decl nil list_props nil) (append_null formula-decl nil list_props nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (reverse def-decl "list[T]" list_props nil) (append def-decl "list[T]" list_props nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil)) 234 220 nil nil)) (reverse_reverse 0 (reverse_reverse-1 nil 3237052399 3245525301 ("" (induct "l") (("1" (grind) nil nil) ("2" (skosimp) (("2" (expand "reverse" 1 2) (("2" (rewrite "reverse_append") (("2" (expand "reverse" 1 1) (("2" (replace -1) (("2" (expand "reverse" 1 1) (("2" (expand "append" 1 2) (("2" (expand "append" 1 1) (("2" (expand "append" 1 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((reverse_append formula-decl nil list_props nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (append def-decl "list[T]" list_props nil) (list_induction formula-decl nil list_adt nil) (T formal-type-decl nil list_props nil) (reverse def-decl "list[T]" list_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil)) 92 100 nil nil)) (length_append 0 (length_append-1 nil 3237052399 3245525301 ("" (induct-and-simplify "l1") nil nil) proved ((list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (append def-decl "list[T]" list_props nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil)) 357 360 nil nil)) (length_reverse 0 (length_reverse-1 nil 3237052399 3245525302 ("" (induct-and-simplify "l") (("" (rewrite "length_append") (("" (assert) nil nil)) nil)) nil) proved ((null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (length_append formula-decl nil list_props nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (reverse def-decl "list[T]" list_props nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil)) 306 310 nil nil)) (list_rep 0 (list_rep-1 nil 3237052399 3245525302 ("" (assert) nil nil) proved nil 6 0 nil nil)) (every_append 0 (every_append-1 nil 3237052399 3245525302 ("" (induct-and-simplify "l1") nil nil) proved ((list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (append def-decl "list[T]" list_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil)) 196 200 nil nil)) (every_disjunct1 0 (every_disjunct1-1 nil 3237052399 3245525302 ("" (induct-and-simplify "l") nil nil) proved ((list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil)) 187 130 nil nil)) (every_disjunct2 0 (every_disjunct2-1 nil 3237052399 3245525302 ("" (induct-and-simplify "l") nil nil) proved ((list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil)) 135 130 nil nil)) (every_conjunct 0 (every_conjunct-1 nil 3237052399 3245525303 ("" (induct-and-simplify "l") nil nil) proved ((list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil)) 176 170 nil nil)) (every_member 0 (every_member-1 nil 3237052399 3245525303 ("" (induct-and-simplify "l") (("" (rewrite "every_disjunct2") nil nil)) nil) proved ((every_disjunct2 formula-decl nil list_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (member def-decl "bool" list_props nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil)) 113 120 nil nil)))(map_props (map_list_composition 0 (map_list_composition-1 nil 3237052399 3245525303 ("" (induct "l") (("1" (skosimp) (("1" (expand "map") (("1" (propax) nil nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (inst?) (("2" (expand "map" +) (("2" (replace -1) (("2" (expand "o" 1 2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((list_induction formula-decl nil list_adt nil) (T1 formal-type-decl nil map_props nil) (O const-decl "T3" function_props nil) (map adt-def-decl "list[T1]" list_adt_map nil) (= const-decl "[T, T -> boolean]" equalities nil) (T3 formal-type-decl nil map_props nil) (T2 formal-type-decl nil map_props nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil)) 121 120 nil nil)) (map_seq_composition 0 (map_seq_composition-1 nil 3237052399 3245525303 ("" (skosimp) (("" (expand "map") (("" (apply-extensionality) (("" (hide 2) (("" (expand "o") (("" (case "nth((LAMBDA (n: nat): f1!1(nth(s!1, n))), x!1) = f1!1(nth(s!1, x!1))") (("1" (replace -1) (("1" (propax) nil nil)) nil) ("2" (hide 2) (("2" (expand "nth" 1 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((map const-decl "sequence[R]" seq_functions nil) (= const-decl "[T, T -> boolean]" equalities nil) (T2 formal-type-decl nil map_props nil) (sequence type-eq-decl nil sequences nil) (nth const-decl "T" sequences nil) (T1 formal-type-decl nil map_props nil) (O const-decl "T3" function_props nil) (T3 formal-type-decl nil map_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 140 100 nil nil)))(filters (filter_TCC1 0 (filter_TCC1-1 nil 3237052399 3245525303 ("" (tcc :defs !) nil nil) proved ((length def-decl "nat" list_props nil)) 35 30 nil nil)) (filter_TCC2 0 (filter_TCC2-1 nil 3237052399 3245525303 ("" (skosimp) (("" (replace -1) (("" (expand "length" 2 2) (("" (assert) nil nil)) nil)) nil)) nil) proved ((length def-decl "nat" list_props nil)) 108 110 nil nil)))(list2finseq (finseq2list_rec_TCC1 0 (finseq2list_rec_TCC1-1 nil 3237052399 3245525303 ("" (tcc :defs explicit) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (T formal-type-decl nil list2finseq nil) (finseq type-eq-decl nil finite_sequences nil)) 114 110 nil nil)) (finseq2list_rec_TCC2 0 (finseq2list_rec_TCC2-1 nil 3237052399 3245525303 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (T formal-type-decl nil list2finseq nil) (finseq type-eq-decl nil finite_sequences nil)) 88 90 nil nil)) (finseq2list_rec_TCC3 0 (finseq2list_rec_TCC3-1 nil 3237052399 3245525304 ("" (tcc :defs !) nil nil) proved nil 23 20 nil nil)) (finseq2list_TCC1 0 (finseq2list_TCC1-1 nil 3237052399 3245525304 ("" (tcc :defs explicit) nil nil) proved nil 10 10 nil nil)))(list2set (list2set_TCC1 0 (list2set_TCC1-1 nil 3237052399 3245525304 ("" (tcc :defs !) nil nil) proved ((length def-decl "nat" list_props nil)) 47 50 nil nil)))(disjointness (pairwise_disjoint?_TCC1 0 (pairwise_disjoint?_TCC1-1 nil 3237052399 3245525304 ("" (termination-tcc) nil nil) proved ((length def-decl "nat" list_props nil)) 51 50 nil nil)))(character)(strings (string_rep 0 (string_rep-1 nil 3237052399 3245525304 ("" (propax) nil nil) proved nil 4 0 nil nil)) (fseq_lem 0 (fseq_lem-1 nil 3237052399 3245525306 ("" (induct "l1") (("1" (induct "l2") (("1" (grind) nil nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (inst -1 "cdr(l2!1)") (("1" (iff) (("1" (prop) (("1" (assert) (("1" (apply-extensionality) (("1" (expand "list2finseq" -1) (("1" (flatten) (("1" (decompose-equality -2) (("1" (inst -1 "0") (("1" (expand "nth") (("1" (propax) nil nil)) nil) ("2" (expand "length" 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "list2finseq" -1) (("2" (flatten) (("2" (expand "length" -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (expand "list2finseq" -1) (("3" (expand "list2finseq" 3) (("3" (flatten) (("3" (split) (("1" (expand "length" -1) (("1" (assert) (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (apply-extensionality) (("1" (decompose-equality -2) (("1" (inst -1 "x!1+1") (("1" (expand "nth" -1) (("1" (propax) nil nil)) nil) ("2" (assert) (("2" (expand "length" 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (expand "length" -1) (("2" (lift-if) (("2" (split -1) (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skosimp) (("3" (expand "length" -1) (("3" (lift-if) (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (expand "length" -1) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (assert) nil nil)) nil)) nil) ("2" (iff) (("2" (prop) (("1" (expand "list2finseq") (("1" (flatten) (("1" (expand "length" -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (l2!1 skolem-const-decl "list[char]" strings nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (list_cons_extensionality formula-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons1_var!1 skolem-const-decl "char" strings nil) (cons2_var!1 skolem-const-decl "list[char]" strings nil) (nth def-decl "T" list_props nil) (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (x!1 skolem-const-decl "below[length(cons2_var!1)]" strings nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (NOT const-decl "[bool -> bool]" booleans nil) (length def-decl "nat" list_props nil) (list_induction formula-decl nil list_adt nil) (character type-decl nil character_adt nil) (boolean nonempty-type-decl nil booleans nil) (char? adt-recognizer-decl "[character -> boolean]" character_adt nil) (char type-eq-decl nil strings nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (finseq type-eq-decl nil finite_sequences nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (list type-decl nil list_adt nil)) 1737 1690 nil nil)) (cons_lem 0 (cons_lem-1 nil 3237052399 3245525306 ("" (grind :if-match nil) (("1" (decompose-equality -3) nil nil) ("2" (decompose-equality -3) nil nil)) nil) proved ((AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (character type-decl nil character_adt nil) (char? adt-recognizer-decl "[character -> boolean]" character_adt nil) (char type-eq-decl nil strings nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil)) 191 170 nil nil)) (char_lem 0 (char_lem-1 nil 3237052399 3245525306 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) nil nil)) nil) proved ((character_char_extensionality formula-decl nil character_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (character type-decl nil character_adt nil) (char? adt-recognizer-decl "[character -> boolean]" character_adt nil) (char type-eq-decl nil strings nil)) 83 90 nil nil)))(lift)(union)(mucalculus)(ctlops (EG_TCC1 0 (EG_TCC1-1 nil 3242699046 3245525306 ("" (grind) nil nil) proved ((state formal-type-decl nil ctlops nil) (EX const-decl "bool" ctlops nil) (<= const-decl "bool" mucalculus nil) (monotonic? const-decl "bool" mucalculus nil)) 146 140 t shostak)) (EU_TCC1 0 (EU_TCC1-1 nil 3242699046 3245525306 ("" (grind :if-match nil) (("" (inst 2 "v!1") (("" (assert) (("" (inst -1 "v!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((state formal-type-decl nil ctlops nil) (monotonic? const-decl "bool" mucalculus nil) (<= const-decl "bool" mucalculus nil) (EX const-decl "bool" ctlops nil)) 182 170 t shostak)))(fairctlops (fairEG_TCC1 0 (fairEG_TCC1-1 nil 3242699046 3245525307 ("" (grind :if-match nil) (("" (inst -2 "p!1") (("" (assert) (("" (skosimp*) (("" (prop) (("1" (skosimp*) (("1" (inst -6 "s!2") (("1" (assert) (("1" (flatten) (("1" (inst -5 "v!1") (("1" (inst 2 "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -5 "s!2") (("2" (assert) (("2" (flatten) (("2" (inst 3 "v!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pred type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (state formal-type-decl nil fairctlops nil) (monotonic? const-decl "bool" mucalculus nil) (glb const-decl "pred[T]" mucalculus nil) (member const-decl "bool" sets nil) (EU const-decl "pred[state]" ctlops nil) (mu const-decl "pred[T]" mucalculus nil) (lfp const-decl "pred[T]" mucalculus nil) (<= const-decl "bool" mucalculus nil) (EX const-decl "bool" ctlops nil)) 450 410 t shostak)))(Fairctlops (CheckFair_TCC1 0 (CheckFair_TCC1-1 nil 3237052399 3245525307 ("" (termination-tcc) nil nil) proved ((length def-decl "nat" list_props nil)) 39 30 nil nil)) (FairEG_TCC1 0 (FairEG_TCC1-1 nil 3242699046 3245525307 ("" (induct "Fflist") (("1" (grind) nil nil) ("2" (grind :if-match nil) (("2" (inst -3 "p!1") (("2" (assert) (("2" (skosimp*) (("2" (inst -4 "s!2") (("2" (assert) (("2" (flatten) (("2" (prop) (("2" (skosimp*) (("2" (inst -5 "N!1" "f!1") (("2" (inst -5 "p1!1" "p2!1") (("2" (assert) (("2" (replace -6) (("2" (inst -5 "v!1") (("2" (assert) (("2" (inst 2 "v!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((EX const-decl "bool" ctlops nil) (lfp const-decl "pred[T]" mucalculus nil) (mu const-decl "pred[T]" mucalculus nil) (EU const-decl "pred[state]" ctlops nil) (member const-decl "bool" sets nil) (glb const-decl "pred[T]" mucalculus nil) (<= const-decl "bool" mucalculus nil) (list_induction formula-decl nil list_adt nil) (state formal-type-decl nil Fairctlops nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (CheckFair def-decl "pred[state]" Fairctlops nil) (monotonic? const-decl "bool" mucalculus nil) (predicate_transformer type-eq-decl nil mucalculus nil) (list type-decl nil list_adt nil)) 637 630 t shostak)))(bit (bit_cases 0 (bit_cases-1 nil 3242701078 3245525308 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 10 10 t shostak)))(bv)(exp2 (exp2_TCC1 0 (exp2_TCC1-1 nil 3242699046 3245525308 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 27 30 t shostak)) (exp2_TCC2 0 (exp2_TCC2-1 nil 3242699046 3245525308 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 27 30 t shostak)) (exp2_TCC3 0 (exp2_TCC3-1 nil 3242699046 3245525308 ("" (induct-and-simplify "n") nil nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (nat_induction formula-decl nil naturalnumbers nil)) 174 180 t shostak)) (exp2_def 0 (exp2_def-1 nil 3242701800 3245525308 ("" (induct-and-simplify "n") nil nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (^ const-decl "real" exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil)) 274 240 t shostak)) (exp2_pos 0 (exp2_pos-1 nil 3242701810 3245525308 ("" (induct-and-simplify "n") nil nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (nat_induction formula-decl nil naturalnumbers nil)) 188 190 t shostak)) (exp2_n 0 (exp2_n-1 nil 3242701817 3245525309 ("" (induct-and-simplify "n") nil nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat_induction formula-decl nil naturalnumbers nil)) 376 380 t shostak)) (exp2_sum 0 (exp2_sum-1 nil 3242701824 3245525310 ("" (induct-and-simplify "n") nil nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat_induction formula-decl nil naturalnumbers nil)) 874 870 t shostak)) (exp2_minus_TCC1 0 (exp2_minus_TCC1-1 nil 3242699046 3245525310 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 60 60 t shostak)) (exp2_minus 0 (exp2_minus-1 nil 3242701829 3245525311 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp) (("2" (induct-and-simplify "k") nil nil)) nil)) nil) proved ((upto_induction formula-decl nil bounded_nat_inductions nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat_induction formula-decl nil naturalnumbers nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 978 970 t shostak)) (exp2_strictpos 0 (exp2_strictpos-1 nil 3242701904 3245525311 ("" (induct-and-simplify "n") nil nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (nat_induction formula-decl nil naturalnumbers nil)) 222 170 t shostak)) (exp2_lt 0 (exp2_lt-1 nil 3242701912 3245525312 ("" (induct "m") (("1" (grind) nil nil) ("2" (skosimp) (("2" (induct-and-simplify "n") nil nil)) nil)) nil) proved ((numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat_induction formula-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 787 790 t shostak)) (exp_prop 0 (exp_prop-1 nil 3242701951 3245525312 ("" (skosimp*) (("" (rewrite "exp2_sum") (("" (lemma "both_sides_times_pos_le1") (("" (inst -1 "exp2(m!1)" "x1!1" "exp2(n!1)-1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((exp2_sum formula-decl nil exp2 nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (both_sides_times_pos_le1 formula-decl nil real_props nil)) 284 280 t shostak)))(bv_cnv)(bv_concat_def (oh_TCC1 0 (oh_TCC1-1 nil 3242699046 3245525312 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (m formal-const-decl "nat" bv_concat_def nil) (n formal-const-decl "nat" bv_concat_def nil) (below type-eq-decl nil naturalnumbers nil)) 176 160 t shostak)))(bv_bitwise (bv_OR 0 (bv_OR-1 nil 3242702892 3245525312 ("" (grind) nil nil) proved ((OR const-decl "bvec[N]" bv_bitwise nil) (^ const-decl "bit" bv nil)) 28 20 t shostak)) (bv_AND 0 (bv_AND-1 nil 3242702898 3245525313 ("" (grind) nil nil) proved ((AND const-decl "bvec[N]" bv_bitwise nil) (^ const-decl "bit" bv nil)) 27 20 t shostak)) (bv_IFF 0 (bv_IFF-1 nil 3242702904 3245525313 ("" (grind) nil nil) proved ((IFF const-decl "bvec[N]" bv_bitwise nil) (^ const-decl "bit" bv nil)) 27 20 t shostak)) (bv_XOR 0 (bv_XOR-1 nil 3242702908 3245525313 ("" (grind) nil nil) proved ((/= const-decl "boolean" notequal nil) (XOR const-decl "bool" xor_def nil) (XOR const-decl "bvec[N]" bv_bitwise nil) (^ const-decl "bit" bv nil)) 40 40 t shostak)) (bv_NOT 0 (bv_NOT-1 nil 3242702912 3245525313 ("" (grind) nil nil) proved ((NOT const-decl "bvec[N]" bv_bitwise nil) (^ const-decl "bit" bv nil)) 26 30 t shostak)))(bv_nat (bv2nat_rec_TCC1 0 (bv2nat_rec_TCC1-1 nil 3242699046 3245525313 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 90 80 t shostak)) (bv2nat_rec_TCC2 0 (bv2nat_rec_TCC2-1 nil 3242699046 3245525313 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 81 80 t shostak)) (bv2nat_rec_TCC3 0 (bv2nat_rec_TCC3-1 nil 3242699046 3245525313 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 82 80 t shostak)) (bv2nat_rec_TCC4 0 (bv2nat_rec_TCC4-1 nil 3242699046 3245525313 ("" (grind) nil nil) proved nil 22 20 t shostak)) (bv2nat_rec_TCC5 0 (bv2nat_rec_TCC5-1 nil 3242699046 3245525313 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)) 223 220 t shostak)) (bv_lem 0 (bv_lem-1 nil 3242703392 3245525313 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 60 20 t shostak)) (bv2nat_rec_bound 0 (bv2nat_rec_bound-1 nil 3242703427 3245525314 ("" (induct-and-rewrite "n" 1 "bv2nat_rec" "exp2") (("" (lemma "bv_lem") (("" (inst - "jt!1" "bv!1") (("" (expand "^") (("" (expand "b2n") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((bv_lem formula-decl nil bv_nat nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (bv2nat_rec def-decl "nat" bv_nat nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (N formal-const-decl "nat" bv_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (upto_induction formula-decl nil bounded_nat_inductions nil)) 685 690 t shostak)) (bv2nat_TCC1 0 (bv2nat_TCC1-1 nil 3242699046 3245525314 ("" (grind) nil nil) proved nil 10 10 t shostak)) (bv2nat_TCC2 0 (bv2nat_TCC2-1 nil 3242699046 3245525314 ("" (skosimp*) (("" (rewrite "bv2nat_rec_bound") nil nil)) nil) proved ((bv2nat_rec_bound formula-decl nil bv_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (N formal-const-decl "nat" bv_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)) 20 20 t shostak)) (bv2nat_inj_rec 0 (bv2nat_inj_rec-1 nil 3242703463 3245525316 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (assert) (("2" (expand "bv2nat_rec" +) (("2" (expand "^") (("2" (inst - "bv1!1" "bv2!1") (("2" (bddsimp) (("1" (skosimp*) (("1" (inst?) (("1" (assert) (("1" (expand "b2n") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst -4 "jt!1") (("2" (assert) nil nil)) nil) ("3" (hide 2 3) (("3" (lemma "bv2nat_rec_bound") (("3" (inst-cp - "jt!1" "bv1!1") (("3" (inst - "jt!1" "bv2!1") (("3" (lemma "bv_lem") (("3" (inst-cp - "jt!1" "bv1!1") (("3" (inst - "jt!1" "bv2!1") (("3" (expand "b2n") (("3" (lift-if) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (skosimp*) (("4" (inst?) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bv_lem formula-decl nil bv_nat nil) (bv2nat_rec_bound formula-decl nil bv_nat nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (upto_induction formula-decl nil bounded_nat_inductions nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bv2nat_rec def-decl "nat" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil)) 1210 1210 t shostak)) (bv2nat_surj_rec 0 (bv2nat_surj_rec-1 nil 3242703513 3245525317 ("" (induct "n" 1 "upto_induction[N]") (("1" (skosimp*) (("1" (typepred "y!1") (("1" (grind) (("1" (inst 1 "fill[N](FALSE)") nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "y!1") (("2" (expand "exp2") (("2" (expand "bv2nat_rec" +) (("2" (case "FORALL bv,(b:bit),(n:below(N)),(m:{n1:below(N)|n<=n1}):
                   bv2nat_rec(n,bv)=bv2nat_rec(n,bv with [(m):=b])") (("1" (case "y!1<exp2(jt!1)") (("1" (inst -5 "y!1") (("1" (skosimp*) (("1" (inst + "bv!1 with [(jt!1):= FALSE]") (("1" (inst?) (("1" (expand "^") (("1" (assert) (("1" (assert) (("1" (expand "b2n") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst -4 "y!1-exp2(jt!1)") (("1" (expand "^") (("1" (skosimp*) (("1" (inst + "bv!1 with [(jt!1):= TRUE]") (("1" (inst?) (("1" (expand "b2n") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 3) (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (induct-and-rewrite "n" 1 "bv2nat_rec" "^") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((AND const-decl "[bool, bool -> bool]" booleans nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (TRUE const-decl "bool" booleans nil) (jt!1 skolem-const-decl "upto(N)" bv_nat nil) (y!1 skolem-const-decl "below(exp2(1 + jt!1))" bv_nat nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (below_induction formula-decl nil bounded_nat_inductions nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (upto_induction formula-decl nil bounded_nat_inductions nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (bv2nat_rec def-decl "nat" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil)) 1289 1220 t shostak)) (bv2nat_inj 0 (bv2nat_inj-1 nil 3242703551 3245525317 ("" (expand "bv2nat") (("" (skolem 1 ("x!1" "y!1")) (("" (rewrite "bv2nat_inj_rec") (("" (flatten) (("" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) proved ((upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2nat_inj_rec formula-decl nil bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 60 60 t shostak)) (bv2nat_surj 0 (bv2nat_surj-1 nil 3242703576 3245525317 ("" (expand "bv2nat") (("" (skolem!) (("" (rewrite "bv2nat_surj_rec") nil nil)) nil)) nil) proved ((below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2nat_surj_rec formula-decl nil bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 33 40 t shostak)) (bv2nat_bij 0 (bv2nat_bij-1 nil 3242703599 3245525317 ("" (expand "bijective?") (("" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (rewrite "bv2nat_inj") nil nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (rewrite "bv2nat_surj") nil nil)) nil)) nil)) nil)) nil) proved ((bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2nat_inj formula-decl nil bv_nat nil) (injective? const-decl "bool" functions nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bv2nat_surj formula-decl nil bv_nat nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil)) 93 60 t shostak)) (bv2nat_rec_fill_F 0 (bv2nat_rec_fill_F-1 nil 3242703627 3245525318 ("" (induct-and-rewrite "n" 1 "bv2nat_rec" "fill" "^" "b2n") nil nil) proved ((<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (bv2nat_rec def-decl "nat" bv_nat nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (N formal-const-decl "nat" bv_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (upto_induction formula-decl nil bounded_nat_inductions nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)) 294 300 t shostak)) (bv2nat_rec_fill_T 0 (bv2nat_rec_fill_T-1 nil 3242703658 3245525318 ("" (induct-and-rewrite "n" 1 "bv2nat_rec" "fill" "^" "b2n") (("1" (expand "exp2") (("1" (propax) nil nil)) nil) ("2" (expand "exp2" 1 2) (("2" (assert) nil nil)) nil)) nil) proved ((^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (bv2nat_rec def-decl "nat" bv_nat nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (TRUE const-decl "bool" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (N formal-const-decl "nat" bv_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (upto_induction formula-decl nil bounded_nat_inductions nil)) 522 520 t shostak)) (bv2nat_fill_F 0 (bv2nat_fill_F-1 nil 3242703711 3245525318 ("" (expand "bv2nat") (("" (rewrite "bv2nat_rec_fill_F") nil nil)) nil) proved ((bv2nat_rec_fill_F formula-decl nil bv_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (N formal-const-decl "nat" bv_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 15 20 t shostak)) (bv2nat_fill_T 0 (bv2nat_fill_T-1 nil 3242703727 3245525318 ("" (expand "bv2nat") (("" (rewrite "bv2nat_rec_fill_T") nil nil)) nil) proved ((bv2nat_rec_fill_T formula-decl nil bv_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (N formal-const-decl "nat" bv_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 17 10 t shostak)) (bv2nat_eq0 0 (bv2nat_eq0-1 nil 3242703746 3245525318 ("" (skosimp*) (("" (rewrite "bv2nat_inj") (("" (hide 2) (("" (rewrite "bv2nat_fill_F") nil nil)) nil)) nil)) nil) proved ((bv2nat_inj formula-decl nil bv_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" bv_nat nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (bv2nat_fill_F formula-decl nil bv_nat nil)) 50 50 t shostak)) (bv2nat_eq_max 0 (bv2nat_eq_max-1 nil 3242703767 3245525318 ("" (skosimp*) (("" (rewrite "bv2nat_inj") (("" (hide 2) (("" (rewrite "bv2nat_fill_T") nil nil)) nil)) nil)) nil) proved ((bv2nat_inj formula-decl nil bv_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" bv_nat nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (TRUE const-decl "bool" booleans nil) (bv2nat_fill_T formula-decl nil bv_nat nil)) 77 80 t shostak)) (bv2nat_top_bit_TCC1 0 (bv2nat_top_bit_TCC1-1 nil 3242699047 3245525318 ("" (grind) nil nil) proved nil 37 40 t shostak)) (bv2nat_top_bit_TCC2 0 (bv2nat_top_bit_TCC2-1 nil 3242699047 3245525319 ("" (grind) nil nil) proved ((bv2nat_rec def-decl "nat" bv_nat nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 215 210 t shostak)) (bv2nat_top_bit_TCC3 0 (bv2nat_top_bit_TCC3-1 nil 3242699047 3245525319 ("" (grind) nil nil) proved ((bv2nat_rec def-decl "nat" bv_nat nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 229 230 t shostak)) (bv2nat_top_bit 0 (bv2nat_top_bit-1 nil 3242703785 3245525319 ("" (skosimp*) (("" (expand "^") (("" (expand "bv2nat") (("" (expand "bv2nat_rec") (("" (lift-if) (("" (assert) (("" (lemma "bv_lem") (("" (inst?) (("" (prop) (("1" (expand "b2n") (("1" (expand "^") (("1" (assert) nil nil)) nil)) nil) ("2" (expand "b2n") (("2" (expand "^") (("2" (assert) (("2" (rewrite "bv2nat_rec_bound") nil nil)) nil)) nil)) nil) ("3" (expand "b2n") (("3" (expand "^") (("3" (lift-if) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "bit" bv nil) (bv2nat_rec def-decl "nat" bv_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" bv_nat nil) (below type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (bv2nat_rec_bound formula-decl nil bv_nat nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (b2n const-decl "nbit" bit nil) (bv_lem formula-decl nil bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 389 360 t shostak)) (bv2nat_topbit_TCC1 0 (bv2nat_topbit_TCC1-1 nil 3242699047 3245525319 ("" (grind) nil nil) proved nil 31 30 t shostak)) (bv2nat_topbit 0 (bv2nat_topbit-1 nil 3242703825 3245525320 ("" (skosimp*) (("" (lemma "bv2nat_top_bit") (("" (inst?) (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((bv2nat_top_bit formula-decl nil bv_nat nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 87 80 t shostak)) (nat2bv_TCC1 0 (nat2bv_TCC1-1 nil 3242699047 3245525320 ("" (inst 1 "inverse(bv2nat)") (("" (skosimp*) (("" (lemma "bijective_inverse[bvec[N],below(exp2(N))]") (("" (inst -1 "inverse[bvec[N], below(exp2(N))](bv2nat)(x1!1)" "x1!1" "bv2nat") (("1" (ground) nil nil) ("2" (hide 2) (("2" (lemma "bv2nat_bij") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (bv2nat_bij formula-decl nil bv_nat nil) (bijective_inverse formula-decl nil function_inverse nil) (inverse const-decl "D" function_inverse nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 81 80 t shostak)) (nat2bv_def 0 (nat2bv_def-1 nil 3242703848 3245525320 ("" (apply-extensionality 1 :hide? t) (("1" (typepred "nat2bv(x!1)") (("1" (expand "inverse") (("1" (lemma "epsilon_ax[bvec[N]]") (("1" (inst?) (("1" (split -1) (("1" (rewrite "bv2nat_inj") nil nil) ("2" (hide 2) (("2" (inst 1 "nat2bv(x!1)") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "inverse") (("2" (lemma "epsilon_ax[bvec[N]]") (("2" (inst?) (("2" (split -1) (("1" (propax) nil nil) ("2" (hide 2) (("2" (inst 1 "nat2bv(x1!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (epsilon_ax formula-decl nil epsilons nil) (bv2nat_inj formula-decl nil bv_nat nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (inverse const-decl "D" function_inverse nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 190 190 t shostak)) (nat2bv_bij 0 (nat2bv_bij-1 nil 3242703876 3245525320 ("" (lemma "bv2nat_bij") (("" (rewrite "nat2bv_def") (("" (rewrite "bij_inv_is_bij") nil nil)) nil)) nil) proved ((nat2bv_def formula-decl nil bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bij_inv_is_bij formula-decl nil function_inverse nil) (bv2nat_bij formula-decl nil bv_nat nil)) 36 40 t shostak)) (nat2bv_inv 0 (nat2bv_inv-1 nil 3242703899 3245525320 ("" (skosimp*) (("" (typepred "nat2bv(bv2nat(bv!1))") (("" (rewrite "bv2nat_inj") nil nil)) nil)) nil) proved ((nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (bv2nat_inj formula-decl nil bv_nat nil)) 26 30 t shostak)) (nat2bv_rew 0 (nat2bv_rew-1 nil 3242703922 3245525320 ("" (skosimp*) (("" (typepred "nat2bv(val!1)") (("" (prop) (("1" (assert) nil nil) ("2" (rewrite "bv2nat_inj") nil nil)) nil)) nil)) nil) proved ((nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (bv2nat_inj formula-decl nil bv_nat nil)) 57 60 t shostak)) (bv2nat_inv 0 (bv2nat_inv-1 nil 3242703948 3245525320 ("" (skosimp*) (("" (assert) nil nil)) nil) proved nil 24 30 t shostak)))(empty_bv)(bv_caret (caret_TCC1 0 (caret_TCC1-1 nil 3242699047 3245525320 ("" (subtype-tcc) nil nil) proved nil 124 130 t shostak)) (caret_TCC2 0 (caret_TCC2-1 nil 3242699047 3245525321 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_caret nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 253 250 t shostak)) (bv_caret_all_TCC1 0 (bv_caret_all_TCC1-1 nil 3242699047 3245525321 ("" (subtype-tcc) nil nil) proved nil 31 20 t shostak)) (bv_caret_all_TCC2 0 (bv_caret_all_TCC2-1 nil 3242699047 3245525321 ("" (subtype-tcc) nil nil) proved nil 26 30 t shostak)) (bv_caret_all 0 (bv_caret_all-1 nil 3242704209 3245525321 ("" (skosimp*) (("" (expand "^") (("" (apply-extensionality 1 :hide? t) nil nil)) nil)) nil) proved ((^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_caret nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 45 40 t shostak)) (bv_caret_ii_0_TCC1 0 (bv_caret_ii_0_TCC1-1 nil 3242699047 3245525321 ("" (subtype-tcc) nil nil) proved nil 15 10 t shostak)) (bv_caret_ii_0 0 (bv_caret_ii_0-1 nil 3242704230 3245525321 ("" (skosimp*) (("" (expand "^") (("" (propax) nil nil)) nil)) nil) proved ((^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (^ const-decl "bit" bv nil)) 49 40 t shostak)) (bv_caret_elim_TCC1 0 (bv_caret_elim_TCC1-1 nil 3242699047 3245525321 ("" (subtype-tcc) nil nil) proved nil 108 110 t shostak)) (bv_caret_elim_TCC2 0 (bv_caret_elim_TCC2-1 nil 3242699047 3245525321 ("" (subtype-tcc) nil nil) proved nil 111 110 t shostak)) (bv_caret_elim 0 (bv_caret_elim-1 nil 3242704247 3245525322 ("" (skosimp*) (("" (expand "^") (("" (propax) nil nil)) nil)) nil) proved ((^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (^ const-decl "bit" bv nil)) 272 240 t shostak)))(finite_sets_of_sets (powerset_natfun_rec_TCC1 0 (powerset_natfun_rec_TCC1-1 nil 3242842726 3245525322 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (surjective? const-decl "bool" functions nil)) 188 190 t shostak)) (powerset_natfun_rec_TCC2 0 (powerset_natfun_rec_TCC2-1 nil 3242842733 3245525322 ("" (skolem-typepred) (("" (hide -1 -2 -3) (("" (flatten) (("" (lemma "empty_card[T]") (("" (inst -1 "A!1") (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((empty_card formula-decl nil finite_sets nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (bijective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 79 70 t shostak)) (powerset_natfun_rec_TCC3 0 (powerset_natfun_rec_TCC3-1 nil 3242843028 3245525323 ("" (grind) (("" (lemma "empty_card[T]") (("" (inst -1 "A!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((empty_card formula-decl nil finite_sets nil) (empty? const-decl "bool" sets nil) (A!1 skolem-const-decl "finite_set[T]" finite_sets_of_sets nil) (n!1 skolem-const-decl "upto(card[T](A!1))" finite_sets_of_sets nil) (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (surjective? const-decl "bool" functions nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 1058 1050 t shostak)) (powerset_natfun_rec_TCC4 0 (powerset_natfun_rec_TCC4-1 nil 3242843036 3245525323 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (injective? const-decl "bool" functions nil) (subset? const-decl "bool" sets nil) (surjective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil) (member const-decl "bool" sets nil)) 356 310 t shostak)) (powerset_natfun_rec_TCC5 0 (powerset_natfun_rec_TCC5-1 nil 3242962925 3245525323 ("" (grind) nil nil) proved ((inverse const-decl "D" function_inverse nil) (member const-decl "bool" sets nil)) 67 60 t shostak)) (powerset_natfun_rec_TCC6 0 (powerset_natfun_rec_TCC6-1 nil 3242962925 3245525325 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (TRUE const-decl "bool" booleans nil) (n!1 skolem-const-decl "upto(card[T](A!1))" finite_sets_of_sets nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (f!1 skolem-const-decl "(bijective?[(A!1), below(card(A!1))])" finite_sets_of_sets nil) (A!1 skolem-const-decl "finite_set[T]" finite_sets_of_sets nil) (surjective? const-decl "bool" functions nil) (subset? const-decl "bool" sets nil) (injective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil) (member const-decl "bool" sets nil)) 1325 1240 t shostak)) (powerset_natfun_rec_bound 0 (powerset_natfun_rec_bound-1 nil 3242966710 3245525325 ("" (skolem 1 ("A!1" _ "f!1" "B!1")) (("" (induct-and-simplify "n") nil nil)) nil) proved ((member const-decl "bool" sets nil) (inverse const-decl "D" function_inverse nil) (upto_induction formula-decl nil bounded_nat_inductions nil) (T formal-type-decl nil finite_sets_of_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (powerset_natfun_rec def-decl "nat" finite_sets_of_sets nil) (powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (bijective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil)) 513 510 t shostak)) (powerset_natfun_TCC1 0 (powerset_natfun_TCC1-1 nil 3242843042 3245525326 ("" (skosimp) (("" (use "Card_bijection[T]") (("" (inst -1 "A!1" "card(A!1)") (("" (rewrite "card_def") (("" (assert) (("" (skosimp) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Card_bijection formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (card_def formula-decl nil finite_sets nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 230 220 t shostak)) (powerset_natfun_TCC2 0 (powerset_natfun_TCC2-1 nil 3242843103 3245525326 ("" (grind) nil nil) proved ((choose const-decl "(p)" sets nil)) 34 40 t shostak)) (powerset_natfun_TCC3 0 (powerset_natfun_TCC3-1 nil 3242933158 3245525326 ("" (skosimp) (("" (beta) (("" (lemma "powerset_natfun_rec_bound") (("" (inst?) (("" (hide 2) (("" (use "Card_bijection[T]") (("" (inst -1 "A!1" "card(A!1)") (("" (rewrite "card_def") (("" (assert) (("" (skosimp) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil finite_sets_of_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (A!1 skolem-const-decl "finite_set[T]" finite_sets_of_sets nil) (Card_bijection formula-decl nil finite_sets nil) (card_def formula-decl nil finite_sets nil) (below type-eq-decl nil nat_types nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (powerset_natfun_rec_bound formula-decl nil finite_sets_of_sets nil)) 291 290 t shostak)) (powerset_natfun_inj_rec_TCC1 0 (powerset_natfun_inj_rec_TCC1-1 nil 3242962926 3245525326 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (surjective? const-decl "bool" functions nil)) 222 210 t shostak)) (powerset_natfun_inj_rec_TCC2 0 (powerset_natfun_inj_rec_TCC2-1 nil 3242962926 3245525327 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (surjective? const-decl "bool" functions nil)) 629 580 t shostak)) (powerset_natfun_inj_rec 0 (powerset_natfun_inj_rec-1 nil 3242959167 3245525330 ("" (skolem 1 ("A!1" _ "f!1" "B1!1" "B2!1")) (("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skosimp) (("3" (expand "powerset_natfun_rec" +) (("3" (split 1) (("1" (flatten) (("1" (skosimp) (("1" (case-replace "m!1 = jt!1") (("1" (assert) (("1" (expand "member") (("1" (lemma "powerset_natfun_rec_bound") (("1" (inst-cp -1 "A!1" "jt!1" "f!1" "B1!1") (("1" (inst -1 "A!1" "jt!1" "f!1" "B2!1") (("1" (assert) (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (split -4) (("1" (inst -1 "m!1") (("1" (assert) nil nil)) nil) ("2" (replace 1) (("2" (assert) (("2" (expand "member") (("2" (lemma "powerset_natfun_rec_bound") (("2" (inst-cp -1 "A!1" "jt!1" "f!1" "B1!1") (("2" (inst -1 "A!1" "jt!1" "f!1" "B2!1") (("2" (assert) (("2" (hide 4) (("2" (lift-if) (("2" (prop) (("1" (assert) (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (lift-if) (("2" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("3" (lift-if) (("3" (ground) nil nil)) nil) ("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (split -4) (("1" (inst -2 "jt!1") (("1" (assert) (("1" (grind) nil nil)) nil)) nil) ("2" (skosimp) (("2" (inst -2 "m!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide -1 1) (("4" (grind) (("4" (lemma "empty_card[T]") (("4" (inst -1 "A!1") (("4" (grind) nil nil)) nil)) nil)) nil)) nil) ("5" (hide -1 1) (("5" (grind) (("5" (lemma "empty_card[T]") (("5" (inst -1 "A!1") (("5" (grind) nil nil)) nil)) nil)) nil)) nil) ("6" (hide -1 1) (("6" (grind) nil nil)) nil) ("7" (hide -1 1) (("7" (grind) nil nil)) nil)) nil)) nil) proved ((< const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (A!1 skolem-const-decl "finite_set[T]" finite_sets_of_sets nil) (<= const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (pred type-eq-decl nil defined_types nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (powerset_natfun_rec def-decl "nat" finite_sets_of_sets nil) (member const-decl "bool" sets nil) (inverse const-decl "D" function_inverse nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (upto_induction formula-decl nil bounded_nat_inductions nil) (powerset_natfun_rec_bound formula-decl nil finite_sets_of_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" sets nil) (empty_card formula-decl nil finite_sets nil)) 2554 2440 t shostak)) (powerset_natfun_inj 0 (powerset_natfun_inj-1 nil 3242962518 3245525331 ("" (lemma "powerset_natfun_inj_rec") (("" (skosimp) (("" (skosimp) (("" (expand "powerset_natfun") (("" (inst? -1) (("1" (assert) (("1" (apply-extensionality) (("1" (expand "member") (("1" (hide -2) (("1" (hide 2) (("1" (name-replace "f" "choose(bijective?[(A!1), below(card(A!1))])") (("1" (inst -1 "f(x!1)") (("1" (assert) (("1" (typepred "f") (("1" (expand "inverse") (("1" (case "A!1(x!1)") (("1" (case-replace "(epsilon! (x: (A!1)): f(x) = f(x!1)) = x!1") (("1" (iff) (("1" (propax) nil nil)) nil) ("2" (hide -3 2) (("2" (use "epsilon_ax[(A!1)]") (("1" (split) (("1" (expand "bijective?") (("1" (flatten) (("1" (expand "injective?") (("1" (inst?) (("1" (assert) nil nil) ("2" (inst 1 "x!1") nil nil) ("3" (skosimp) nil nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil) ("2" (skosimp) nil nil) ("3" (inst 1 "x!1") nil nil)) nil)) nil) ("3" (inst 1 "x!1") nil nil) ("4" (skosimp) nil nil)) nil) ("2" (hide -1 -2) (("2" (typepred "B1!1") (("2" (typepred "B2!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "f") (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil) ("3" (typepred "B1!1") (("3" (typepred "B2!1") (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (lemma "Card_bijection[T]") (("2" (inst -1 "A!1" "card(A!1)") (("2" (rewrite "card_def") (("2" (assert) (("2" (skosimp) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (lemma "Card_bijection[T]") (("2" (inst -1 "A!1" "card(A!1)") (("2" (rewrite "card_def") (("2" (assert) (("2" (skosimp) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((powerset_natfun const-decl "below(exp2(card(A)))" finite_sets_of_sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (below type-eq-decl nil nat_types nil) (card_def formula-decl nil finite_sets nil) (Card_bijection formula-decl nil finite_sets nil) (x!1 skolem-const-decl "T" finite_sets_of_sets nil) (f skolem-const-decl "(bijective?[(A!1), below(card(A!1))])" finite_sets_of_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (TRUE const-decl "bool" booleans nil) (subset? const-decl "bool" sets nil) (inverse const-decl "D" function_inverse nil) (surjective? const-decl "bool" functions nil) (powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (choose const-decl "(p)" sets nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (T formal-type-decl nil finite_sets_of_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (A!1 skolem-const-decl "finite_set[T]" finite_sets_of_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (below type-eq-decl nil naturalnumbers nil) (nonempty? const-decl "bool" sets nil) (bijective? const-decl "bool" functions nil) (powerset_natfun_inj_rec formula-decl nil finite_sets_of_sets nil)) 1132 1060 t shostak)) (powerset_finite 0 (powerset_finite-1 nil 3242843110 3245525331 ("" (use "powerset_natfun_inj") (("" (skosimp) (("" (expand "is_finite") (("" (inst 1 "exp2(card(A!1))" "powerset_natfun(A!1)") (("" (expand "injective?") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (finite_set type-eq-decl nil finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (below type-eq-decl nil naturalnumbers nil) (powerset_natfun const-decl "below(exp2(card(A)))" finite_sets_of_sets nil) (choose const-decl "(p)" sets nil) (injective? const-decl "bool" functions nil) (is_finite const-decl "bool" finite_sets nil) (powerset_natfun_inj formula-decl nil finite_sets_of_sets nil)) 316 290 t shostak)))(EquivalenceClosure (EquivClos_TCC1 0 (EquivClos_TCC1-1 nil 3243015830 3245525331 ("" (skosimp*) (("" (expand "equivalence?") (("" (expand "EquivClos") (("" (prop) (("1" (expand "reflexive?") (("1" (skosimp*) (("1" (typepred "S!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "reflexive?") (("1" (inst?) nil))))))))))))) ("2" (expand "symmetric?") (("2" (skosimp*) (("2" (typepred "S!1") (("2" (expand "equivalence?") (("2" (flatten) (("2" (inst?) (("2" (prop) (("2" (expand "symmetric?") (("2" (inst -3 "x!1" "y!1") (("2" (assert) nil))))))))))))))))))) ("3" (expand "transitive?") (("3" (skosimp*) (("3" (typepred "S!1") (("3" (expand "equivalence?") (("3" (flatten) (("3" (inst?) (("3" (inst?) (("3" (prop) (("3" (expand "transitive?") (("3" (inst -5 "x!1" "y!1" "z!1") (("3" (assert) nil)))))))))))))))))))))))))))) nil) proved ((equivalence? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PRED type-eq-decl nil defined_types nil) (T formal-type-decl nil EquivalenceClosure nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 172 170 nil nil)) (EquivClosSuperset 0 (EquivClosSuperset-1 nil 3243015830 3245525331 ("" (skosimp*) (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivClos") (("" (skosimp*) (("" (expand "subset?") (("" (inst?) (("" (expand "member") (("" (assert) nil)))))))))))))))))) nil) proved ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil EquivalenceClosure nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil)) 49 50 nil nil)) (EquivClosMonotone 0 (EquivClosMonotone-1 nil 3243015830 3245525332 ("" (skosimp*) (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivClos") (("" (skosimp*) (("" (typepred "S!2") (("" (inst -3 "S!2") (("" (assert) (("" (expand "subset?") (("" (expand "member") (("" (skosimp*) (("" (inst?) (("" (inst?) (("" (assert) nil)))))))))))))))))))))))))))) nil) proved ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil EquivalenceClosure nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil)) 116 80 nil nil)) (EquivClosLeast 0 (EquivClosLeast-1 nil 3243015830 3245525332 ("" (skosimp*) (("" (expand "subset?" 1) (("" (skosimp*) (("" (expand "member") (("" (expand "EquivClos") (("" (inst?) (("" (assert) nil)))))))))))) nil) proved ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (S!1 skolem-const-decl "PRED[[T, T]]" EquivalenceClosure nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil EquivalenceClosure nil) (equivalence type-eq-decl nil relations nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil)) 42 40 nil nil)) (EquivClosIdempotent 0 (EquivClosIdempotent-1 nil 3243015830 3245525332 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (iff) (("" (prop) (("1" (lemma "EquivClosLeast") (("1" (inst -1 "EquivClos(R!1)" "EquivClos(R!1)") (("1" (assert) (("1" (expand "subset?") (("1" (expand "member") (("1" (prop) (("1" (inst?) (("1" (assert) nil))) ("2" (skosimp*) nil))))))))))))) ("2" (lemma "EquivClosSuperset") (("2" (inst -1 "EquivClos(R!1)") (("2" (expand "subset?") (("2" (inst -1 "(x!1, x!2)") (("2" (assert) (("2" (expand "member") (("2" (propax) nil)))))))))))))))))))) nil) proved ((T formal-type-decl nil EquivalenceClosure nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (EquivClosLeast formula-decl nil EquivalenceClosure nil) (EquivClosSuperset formula-decl nil EquivalenceClosure nil)) 115 100 nil nil)) (EquivalenceCharacterization 0 (EquivalenceCharacterization-1 nil 3243015830 3245525332 ("" (skosimp*) (("" (prop) (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (prop) (("1" (lemma "EquivClosSuperset") (("1" (inst?) (("1" (expand "subset?") (("1" (expand "member") (("1" (inst?) (("1" (assert) nil))))))))))) ("2" (lemma "EquivClosLeast") (("2" (inst -1 "S!1" "S!1") (("2" (assert) (("2" (prop) (("1" (expand "subset?") (("1" (expand "member") (("1" (inst?) (("1" (assert) nil))))))) ("2" (expand "subset?") (("2" (expand "member") (("2" (skosimp*) nil))))))))))))))))))) ("2" (assert) nil)))) nil) proved ((EquivClosLeast formula-decl nil EquivalenceClosure nil) (EquivClosSuperset formula-decl nil EquivalenceClosure nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil EquivalenceClosure nil)) 103 100 nil nil)))(QuotientDefinition (EquivClassNonEmpty 0 (EquivClassNonEmpty-1 nil 3243015830 3245525332 ("" (skosimp*) (("" (expand "nonempty?") (("" (expand "empty?") (("" (expand "member") (("" (expand "EquivClass") (("" (inst -1 "x!1") (("" (typepred "S!1") (("" (expand "equivalence?") (("" (expand "reflexive?") (("" (flatten) (("" (inst -1 "x!1") nil)))))))))))))))))))) nil) proved ((nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (empty? const-decl "bool" sets nil)) 46 50 nil nil)) (EquivClassEq 0 (EquivClassEq-1 nil 3243015830 3245525332 ("" (skosimp*) (("" (typepred "S!1") (("" (expand "EquivClass") (("" (prop) (("1" (case "S!1(x!1, y!1) = (LAMBDA (z: T): S!1(x!1, z))(y!1)") (("1" (replace -2) (("1" (assert) (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "reflexive?") (("1" (inst -3 "y!1") (("1" (assert) nil))))))))))))) ("2" (assert) nil))) ("2" (apply-extensionality :hide? t) (("2" (iff) (("2" (prop) (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (inst -4 "x!1" "y!1") (("1" (assert) (("1" (inst -5 "y!1" "x!1" "x!2") (("1" (assert) nil))))))))))))))) ("2" (expand "equivalence?") (("2" (flatten) (("2" (expand "transitive?") (("2" (inst -5 "x!1" "y!1" "x!2") (("2" (assert) nil)))))))))))))))))))))) nil) proved ((equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (T formal-type-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (reflexive? const-decl "bool" relations nil) (= const-decl "[T, T -> boolean]" equalities nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (EquivClass const-decl "set[T]" QuotientDefinition nil)) 169 140 nil nil)) (repEC_TCC1 0 (repEC_TCC1-1 nil 3243663393 3245525332 ("" (skosimp) (("" (grind) (("" (typepred "S!1") (("" (expand "equivalence?") (("" (flatten) (("" (hide -2 -3) (("" (expand "reflexive?") (("" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((EquivClass const-decl "set[T]" QuotientDefinition nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (T formal-type-decl nil QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil)) 86 60 t shostak)) (EquivClassChoose 0 (EquivClassChoose-1 nil 3243015830 3245525332 ("" (skosimp*) (("" (use "EquivClassNonEmpty") (("" (expand "repEC") (("" (typepred "choose(EquivClass(S!1)(x!1))") (("1" (expand "EquivClass") (("1" (propax) nil nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((EquivClassNonEmpty formula-decl nil QuotientDefinition nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil QuotientDefinition nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (set type-eq-decl nil sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (repEC const-decl "T" QuotientDefinition nil)) 47 40 t nil)) (ChooseEquivClassChoose 0 (ChooseEquivClassChoose-1 nil 3243015830 3245525332 ("" (skosimp*) (("" (use "EquivClassNonEmpty") (("" (use "EquivClassEq") (("" (use "EquivClassChoose") (("" (assert) (("" (typepred "S!1") (("" (expand "equivalence?") (("" (expand "symmetric?") (("" (flatten) (("" (inst -2 "x!1" "repEC(S!1)(x!1)") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((EquivClassNonEmpty formula-decl nil QuotientDefinition nil) (repEC const-decl "T" QuotientDefinition nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil QuotientDefinition nil) (EquivClassChoose formula-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil) (symmetric? const-decl "bool" relations nil) (EquivClassEq formula-decl nil QuotientDefinition nil)) 84 80 t nil)) (rep_TCC1 0 (rep_TCC1-1 nil 3243663393 3245525333 ("" (skosimp) (("" (grind) (("" (typepred "P!1") (("" (skosimp) (("" (expand "EquivClass") (("" (decompose-equality) (("" (inst -1 "x!1") (("" (inst -2 "x!1") (("" (assert) (("" (replace -1) (("" (hide -1) (("" (typepred "S!1") (("" (expand "equivalence?") (("" (flatten) (("" (hide -2 -3) (("" (expand "reflexive?") (("" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (reflexive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil QuotientDefinition nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (Quotient type-eq-decl nil QuotientDefinition nil)) 98 100 t shostak)) (rep_is_repEC_TCC1 0 (rep_is_repEC_TCC1-1 nil 3243663393 3245525333 ("" (skosimp) (("" (inst 1 "x!1") nil nil)) nil) proved ((T formal-type-decl nil QuotientDefinition nil)) 13 10 t shostak)) (rep_is_repEC 0 (rep_is_repEC-1 nil 3243664057 3245525333 ("" (grind) nil nil) proved ((choose const-decl "(p)" sets nil) (rep const-decl "T" QuotientDefinition nil) (repEC const-decl "T" QuotientDefinition nil)) 39 30 t shostak)) (rep_lemma 0 (rep_lemma-1 nil 3245191776 3245525333 ("" (grind :if-match nil) (("" (use "epsilon_ax[T]") (("1" (grind :if-match nil) (("1" (inst 1 "x!1") (("1" (inst? -1) nil nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil) proved ((TRUE const-decl "bool" booleans nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (set type-eq-decl nil sets nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (rep const-decl "T" QuotientDefinition nil) (choose const-decl "(p)" sets nil)) 180 180 t shostak)) (quotient_map_surjective 0 (quotient_map_surjective-1 nil 3243015830 3245525333 ("" (skosimp*) (("" (expand "surjective?") (("" (skosimp*) (("" (typepred "y!1") (("" (skosimp*) (("" (inst?) (("" (expand "quotient_map") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((surjective? const-decl "bool" functions nil) (Quotient type-eq-decl nil QuotientDefinition nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 42 40 t nil)))(KernelDefinition (EquivalenceKernel_TCC1 0 (EquivalenceKernel_TCC1-1 nil 3243663393 3245525333 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" KernelDefinition nil) (X1 formal-subtype-decl nil KernelDefinition nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (equivalence? const-decl "bool" relations nil)) 156 120 t shostak)) (PreservesEqClosure 0 (PreservesEqClosure-1 nil 3243664201 3245525333 ("" (skosimp*) (("" (expand "PreservesEq") (("" (apply-extensionality :hide? t) (("" (iff) (("" (prop) (("1" (lemma "EquivClosLeast[X1]") (("1" (inst?) (("1" (assert) (("1" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") nil nil)) nil)) nil)) nil) ("2" (lemma "EquivClosSuperset[X1]") (("2" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("2" (inst?) (("2" (lemma "subset_transitive[[X1, X1]]") (("2" (inst -1 "restrict[[X, X], [X1, X1], bool](R!1)" "EquivClos(restrict[[X, X], [X1, X1], boolean](R!1))" "EquivalenceKernel(x!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (EquivClosSuperset formula-decl nil EquivalenceClosure nil) (subset_transitive formula-decl nil sets_lemmas nil) (EquivClosLeast formula-decl nil EquivalenceClosure nil) (restrict_extend formula-decl nil extend nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (subset? const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil) (Y formal-type-decl nil KernelDefinition nil) (X1 formal-subtype-decl nil KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" KernelDefinition nil) (boolean nonempty-type-decl nil booleans nil) (X formal-type-decl nil KernelDefinition nil)) 152 150 t shostak)) (PreservesEq_is_preserving 0 (PreservesEq_is_preserving-1 nil 3244148904 3245525334 ("" (grind) (("" (apply-extensionality :hide? t) nil nil)) nil) proved ((bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (PreservesEq const-decl "bool" KernelDefinition nil) (preserves const-decl "bool" functions nil) (restrict const-decl "R" restrict nil) (= const-decl "[T, T -> boolean]" equalities nil) (preserves const-decl "bool" functions nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (X formal-type-decl nil KernelDefinition nil) (boolean nonempty-type-decl nil booleans nil) (X1_pred const-decl "[X -> boolean]" KernelDefinition nil) (X1 formal-subtype-decl nil KernelDefinition nil) (Y formal-type-decl nil KernelDefinition nil)) 115 120 t shostak)))(QuotientKernelProperties (Kernel_quotient_map 0 (Kernel_quotient_map-1 nil 3243015830 3245525334 ("" (skosimp*) (("" (expand "quotient_map") (("" (apply-extensionality :hide? t) (("1" (expand "EquivalenceKernel") (("1" (use "EquivClassEq[X1]") (("1" (assert) (("1" (iff) (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil) proved ((quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (S!1 skolem-const-decl "equivalence[X1]" QuotientKernelProperties nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (Quotient type-eq-decl nil QuotientDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X formal-type-decl nil QuotientKernelProperties nil)) 116 110 t nil)) (PreservesEq_quotient_map 0 (PreservesEq_quotient_map-1 nil 3243665917 3245525334 ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (use "EquivClassEq[X1]") (("" (assert) (("" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (X formal-type-decl nil QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (FALSE const-decl "bool" booleans nil) (restrict_extend formula-decl nil extend nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 97 90 t shostak)) (quotient_map_is_Quotient_EqivalenceRespecting 0 (quotient_map_is_Quotient_EqivalenceRespecting-3 nil 3244167432 3245525334 ("" (skosimp*) (("" (expand "PreservesEq") (("" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (use "EquivClassEq[X1]") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (FALSE const-decl "bool" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X formal-type-decl nil QuotientKernelProperties nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (restrict_extend formula-decl nil extend nil)) 89 80 t nil) (quotient_map_is_Quotient_EqivalenceRespecting-2 nil 3244167419 nil ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (use "EquivClassEq") (("" (assert) nil)))))))))))))))) nil) unchecked nil nil nil nil nil) (quotient_map_is_Quotient_EqivalenceRespecting-1 nil 3243663394 3244166838 ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (use "EquivClassEq") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished ((PreservesEq const-decl "bool" KernelDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (X formal-type-decl nil QuotientKernelProperties nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 73 50 t shostak)) (Kernel_ECquotient_map_TCC1 0 (Kernel_ECquotient_map_TCC1-1 nil 3243663394 3245525334 ("" (skosimp) (("" (expand "quotient_map") (("" (lemma "EquivalenceCharacterization[X1]") (("" (inst -1 "S!1") (("" (assert) (("" (replace -1 :dir rl) (("" (inst 1 "x1!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivalenceCharacterization formula-decl nil EquivalenceClosure nil) (X formal-type-decl nil QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil)) 41 40 t shostak)) (Kernel_ECquotient_map 0 (Kernel_ECquotient_map-1 nil 3243666194 3245525334 ("" (skosimp) (("" (expand "quotient_map") (("" (apply-extensionality :hide? t) (("1" (expand "EquivalenceKernel") (("1" (use "EquivClassEq[X1]") (("1" (assert) (("1" (iff) (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (lemma "EquivalenceCharacterization[X1]") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (EquivalenceCharacterization formula-decl nil EquivalenceClosure nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil) (S!1 skolem-const-decl "equivalence[X1]" QuotientKernelProperties nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (ECQuotient type-eq-decl nil QuotientDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X formal-type-decl nil QuotientKernelProperties nil)) 118 120 t shostak)) (PreservesEq_ECquotient_map 0 (PreservesEq_ECquotient_map-1 nil 3243666401 3245525334 ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (use "EquivClassEq[X1]") (("" (assert) (("" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (X formal-type-decl nil QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (FALSE const-decl "bool" booleans nil) (restrict_extend formula-decl nil extend nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 127 100 t shostak)) (quotient_map_is_ECQuotient_EqivalenceRespecting 0 (quotient_map_is_ECQuotient_EqivalenceRespecting-1 nil 3243663394 3245525335 ("" (skosimp) (("" (prop) (("1" (skosimp) (("1" (lemma "Kernel_ECquotient_map_TCC1") (("1" (inst -1 "S!1" "x1!1") nil nil)) nil)) nil) ("2" (expand "PreservesEq") (("2" (expand "subset?") (("2" (skosimp*) (("2" (expand "member") (("2" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("2" (expand "EquivalenceKernel") (("2" (expand "quotient_map") (("2" (use "EquivClassEq[X1]") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Kernel_ECquotient_map_TCC1 subtype-tcc nil QuotientKernelProperties nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X formal-type-decl nil QuotientKernelProperties nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (FALSE const-decl "bool" booleans nil) (restrict_extend formula-decl nil extend nil) (PreservesEq const-decl "bool" KernelDefinition nil)) 102 100 t shostak)))(QuotientSubDefinition (quotient_sub_map_TCC1 0 (quotient_sub_map_TCC1-1 nil 3245525335 3245525459 ("" (grind :exclude "rep" :if-match nil) (("" (inst 1 "x!1") nil nil)) nil) proved ((reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientSubDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" QuotientSubDefinition nil) (X1 formal-subtype-decl nil QuotientSubDefinition nil)) 16391 720 t shostak)))(QuotientExtensionProperties (lift_TCC1 0 (lift_TCC1-1 nil 3245193421 3245525335 ("" (grind :exclude "rep" :if-match nil) (("" (inst 1 "x!1") nil nil)) nil) proved ((reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientExtensionProperties nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" QuotientExtensionProperties nil) (X1 formal-subtype-decl nil QuotientExtensionProperties nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (QuotientSub type-eq-decl nil QuotientSubDefinition nil) (Y formal-type-decl nil QuotientExtensionProperties nil)) 272 260 t shostak)) (lift_TCC2 0 (lift_TCC2-1 nil 3245525012 3245525335 ("" (grind :exclude "rep" :if-match nil) (("" (use "rep_lemma[X]" :if-match all) (("" (expand "EquivClass" -1 1) (("" (inst -6 "(x!1, rep(S!1)(EquivClass(S!1)(x!1)))") (("1" (assert) nil nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil) proved ((rep_lemma formula-decl nil QuotientDefinition nil) (S!1 skolem-const-decl "{R: equivalence[X] | PreservesEq[X, X, bool](R)(X1_pred)}" QuotientExtensionProperties nil) (x!1 skolem-const-decl "X1" QuotientExtensionProperties nil) (rep const-decl "T" QuotientDefinition nil) (Quotient type-eq-decl nil QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientExtensionProperties nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" QuotientExtensionProperties nil) (X1 formal-subtype-decl nil QuotientExtensionProperties nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (QuotientSub type-eq-decl nil QuotientSubDefinition nil) (Y formal-type-decl nil QuotientExtensionProperties nil)) 321 320 t shostak)) (lift_commutation 0 (lift_commutation-1 nil 3243666489 3245525714 ("" (grind :exclude "rep" :if-match nil) (("" (apply-extensionality :hide? t) (("" (use "rep_lemma[X]") (("" (expand "EquivClass" -1) (("" (inst -6 "(x!1, rep(S!1)({z: X | S!1(x!1, z)}))") (("1" (assert) (("1" (expand "EquivClass" 1) (("1" (assert) nil nil)) nil)) nil) ("2" (inst -5 "(x!1, rep(S!1)({z: X | S!1(x!1, z)}))") (("1" (assert) nil nil) ("2" (inst 1 "x!1") (("2" (expand "EquivClass" 1) (("2" (propax) nil nil)) nil)) nil)) nil) ("3" (inst 1 "x!1") (("3" (expand "EquivClass" 1) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (QuotientSub type-eq-decl nil QuotientSubDefinition nil) (O const-decl "T3" function_props nil) (lift const-decl "Y" QuotientExtensionProperties nil) (quotient_sub_map const-decl "QuotientSub(S)" QuotientSubDefinition nil) (rep const-decl "T" QuotientDefinition nil) (Quotient type-eq-decl nil QuotientDefinition nil) (x!1 skolem-const-decl "X1" QuotientExtensionProperties nil) (S!1 skolem-const-decl "{R: equivalence[X] | PreservesEq[X, X, bool](R)(X1_pred)}" QuotientExtensionProperties nil) (rep_lemma formula-decl nil QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientExtensionProperties nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" QuotientExtensionProperties nil) (X1 formal-subtype-decl nil QuotientExtensionProperties nil) (Y formal-type-decl nil QuotientExtensionProperties nil)) 234211 5770 t shostak)) (lift_unicity 0 (lift_unicity-1 nil 3243666688 3245526633 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (typepred "x!1") (("" (skosimp*) (("" (case "h!1(x!1) = g!1(x!2)") (("1" (replace -1) (("1" (hide -1 -3) (("1" (expand "lift") (("1" (replace -1) (("1" (hide -1) (("1" (use "rep_lemma[X]") (("1" (grind :exclude "rep" :if-match nil) (("1" (typepred "g!1") (("1" (expand "PreservesEq") (("1" (expand "subset?") (("1" (expand "member") (("1" (expand "EquivalenceKernel") (("1" (expand "restrict") (("1" (inst -1 "(x!2, rep(S!1)(EquivClass[X](S!1)(x!2)))") (("1" (assert) nil nil) ("2" (typepred "S!1") (("2" (expand "PreservesEq") (("2" (expand "subset?") (("2" (expand "member") (("2" (expand "EquivalenceKernel") (("2" (expand "restrict") (("2" (inst -2 "(x!2, rep(S!1)(EquivClass[X](S!1)(x!2)))") (("1" (assert) nil nil) ("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (replace -2 1 rl) (("2" (hide -2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((X formal-type-decl nil QuotientExtensionProperties nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (X1_pred const-decl "[X -> boolean]" QuotientExtensionProperties nil) (X1 formal-subtype-decl nil QuotientExtensionProperties nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (QuotientSub type-eq-decl nil QuotientSubDefinition nil) (Y formal-type-decl nil QuotientExtensionProperties nil) (lift const-decl "Y" QuotientExtensionProperties nil) (O const-decl "T3" function_props nil) (quotient_sub_map const-decl "QuotientSub(S)" QuotientSubDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (rep const-decl "T" QuotientDefinition nil) (Quotient type-eq-decl nil QuotientDefinition nil) (x!2 skolem-const-decl "X1" QuotientExtensionProperties nil) (S!1 skolem-const-decl "{S | PreservesEq[X, X, bool](S)(X1_pred)}" QuotientExtensionProperties nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (rep_lemma formula-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil)) 914591 21560 t shostak)))(QuotientDistributive (EqualityExtension_is_equivalence 0 (EqualityExtension_is_equivalence-1 nil 3245193423 3245525338 ("" (grind :if-match nil) (("1" (forward-chain -3) nil nil) ("2" (forward-chain -2) nil nil) ("3" (inst? -1) nil nil)) nil) proved ((Y formal-type-decl nil QuotientDistributive nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (EqualityExtension const-decl "set[[[X, Y], [X, Y]]]" QuotientDistributive nil)) 297 300 t shostak)) (EqualityExtensionPreservesEq 0 (EqualityExtensionPreservesEq-1 nil 3245193857 3245525338 ("" (grind :exclude "rep" :if-match nil) (("" (use "EquivClassEq[X]") (("" (assert) nil nil)) nil)) nil) proved ((EquivClassEq formula-decl nil QuotientDefinition nil) (Y formal-type-decl nil QuotientDistributive nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (EqualityExtension const-decl "set[[[X, Y], [X, Y]]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 252 240 t shostak)) (QuotientDistributive_TCC1 0 (QuotientDistributive_TCC1-1 nil 3245193423 3245525338 ("" (grind :exclude "rep" :if-match nil) (("" (apply-extensionality :hide? t) (("" (forward-chain -2) (("" (iff) (("" (prop) (("1" (forward-chain -4) nil nil) ("2" (hide -2) (("2" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((set type-eq-decl nil sets nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (Y formal-type-decl nil QuotientDistributive nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (EqualityExtension const-decl "set[[[X, Y], [X, Y]]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 288 280 t shostak)) (QuotientDistributive_TCC2 0 (QuotientDistributive_TCC2-1 nil 3245193423 3245525338 ("" (grind :exclude "rep" :if-match nil) (("1" (rewrite "restrict_full[[[X, Y], [X, Y]], bool]") (("1" (inst? 1) nil nil)) nil) ("2" (rewrite "restrict_full[[[X, Y], [X, Y]], bool]") (("2" (inst? 1) nil nil)) nil)) nil) proved ((EqualityExtension const-decl "set[[[X, Y], [X, Y]]]" QuotientDistributive nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (PreservesEq const-decl "bool" KernelDefinition nil)) 69 70 t shostak)) (QuotientDistributive 0 (QuotientDistributive-1 nil 3245193912 3245525340 ("" (skosimp*) (("" (expand "bijective?") (("" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (expand "lift") (("1" (expand "rep") (("1" (flatten) (("1" (typepred "x1!1" "x2!1") (("1" (skosimp*) (("1" (case "nonempty?(x1!1)") (("1" (case "nonempty?(x2!1)") (("1" (name-replace "ch1" "choose(x1!1)") (("1" (name-replace "ch2" "choose(x2!1)") (("1" (typepred "ch1" "ch2") (("1" (replace*) (("1" (hide -3 -4 -5 -6) (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "EqualityExtension") (("1" (flatten) (("1" (assert) (("1" (iff) (("1" (lemma "Kernel_quotient_map[X, X]") (("1" (inst?) (("1" (case "EquivalenceKernel[X, X, Quotient[X](S!1)](quotient_map(S!1))(ch1`1, ch2`1)") (("1" (replace -2) (("1" (hide -2) (("1" (assert) (("1" (smash) (("1" (typepred "S!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (hide -1 -6 -8 -10 -11 -12) (("1" (inst-cp -1 "ch1`1" "ch2`1") (("1" (assert) (("1" (hide -4) (("1" (inst -1 "x!1`1" "ch1`1") (("1" (assert) (("1" (hide -5) (("1" (inst-cp -3 "x!2`1" "ch2`1" "ch1`1") (("1" (assert) (("1" (inst-cp -3 "x!2`1" "ch1`1" "x!1`1") (("1" (assert) (("1" (inst -3 "x!2`1" "x!1`1" "x!3") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -3 -5 -7 -8 -9) (("2" (typepred "S!1") (("2" (expand "equivalence?") (("2" (flatten) (("2" (hide -1) (("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (inst -1 "x!2`1" "ch2`1") (("2" (assert) (("2" (hide -6) (("2" (inst-cp -2 "x!1`1" "ch1`1" "ch2`1") (("2" (assert) (("2" (hide -4 -6) (("2" (inst-cp -2 "x!1`1" "ch2`1" "x!2`1") (("2" (assert) (("2" (hide -1 -4) (("2" (inst -1 "x!1`1" "x!2`1" "x!3") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "EquivalenceKernel") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -3) (("2" (hide -1 -2 -3 -4 -5 2) (("2" (grind) (("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (hide -1 -2 -3 -4 2) (("2" (grind) (("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (typepred "y!1`1") (("2" (skosimp*) (("2" (case "nonempty?(y!1`1)") (("1" (inst 1 "EquivClass[[X, Y]](EqualityExtension(S!1))(choose(y!1`1), y!1`2)") (("1" (expand "lift") (("1" (expand "rep") (("1" (case "nonempty?(EquivClass[[X, Y]](EqualityExtension(S!1))(choose(y!1`1), y!1`2))") (("1" (name-replace "ch" "choose(EquivClass[[X, Y]](EqualityExtension(S!1))(choose(y!1`1), y!1`2))") (("1" (typepred "ch") (("1" (hide -2 -3) (("1" (expand "EquivClass") (("1" (expand "EqualityExtension") (("1" (flatten) (("1" (name-replace "ch1" "choose(y!1`1)") (("1" (typepred "ch1") (("1" (replace -4 -1) (("1" (assert) (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (replace -4) (("1" (hide -3 -4) (("1" (assert) (("1" (typepred "S!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (prop) (("1" (expand "transitive?") (("1" (inst-cp -4 "x!1" "ch1" "ch`1") (("1" (assert) (("1" (hide -2 -3 -6 -7) (("1" (inst -2 "x!1" "ch`1" "x!2") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (inst-cp -3 "ch1" "ch`1") (("2" (assert) (("2" (hide -7) (("2" (inst -3 "x!1" "ch1") (("2" (assert) (("2" (hide -2 -6) (("2" (inst-cp -4 "ch`1" "ch1" "x!1") (("2" (assert) (("2" (hide -2 -3) (("2" (inst -2 "ch`1" "x!1" "x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "ch`1") (("2" (apply-extensionality :hide? t) (("2" (expand "EquivClass") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (grind) (("2" (inst -1 "(epsilon(y!1`1), y!1`2)") (("1" (assert) (("1" (typepred "S!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "reflexive?") (("1" (inst?) (("1" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil) ("3" (propax) nil nil)) nil)) nil)) nil) ("2" (inst?) nil nil)) nil) ("2" (replace -1) (("2" (hide -1 2) (("2" (grind) (("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (ch skolem-const-decl "(EquivClass[[X, Y]](EqualityExtension(S!1))(choose(y!1`1), y!1`2))" QuotientDistributive nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (TRUE const-decl "bool" booleans nil) (y!1 skolem-const-decl "[Quotient[X](S!1), Y]" QuotientDistributive nil) (S!1 skolem-const-decl "equivalence[X]" QuotientDistributive nil) (injective? const-decl "bool" functions nil) (lift const-decl "Y" QuotientExtensionProperties nil) (Kernel_quotient_map formula-decl nil QuotientKernelProperties nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (choose const-decl "(p)" sets nil) (reflexive? const-decl "bool" relations nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientDistributive nil) (Y formal-type-decl nil QuotientDistributive nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EqualityExtension const-decl "set[[[X, Y], [X, Y]]]" QuotientDistributive nil) (Quotient type-eq-decl nil QuotientDefinition nil) (rep const-decl "T" QuotientDefinition nil)) 1485 1350 t shostak)) (RelExtension_TCC1 0 (RelExtension_TCC1-1 nil 3245193424 3245525341 ("" (grind :exclude "rep" :if-match nil) (("1" (forward-chain -3) nil nil) ("2" (forward-chain -6) nil nil) ("3" (forward-chain -2) nil nil) ("4" (forward-chain -5) nil nil) ("5" (inst? -1) nil nil) ("6" (inst? -4) nil nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (Y formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence type-eq-decl nil relations nil) (X formal-type-decl nil QuotientDistributive nil) (equivalence? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 928 790 t shostak)) (RelExtensionPreservesEq 0 (RelExtensionPreservesEq-1 nil 3245194382 3245525342 ("" (grind :if-match nil) (("1" (use "EquivClassEq[Y]") (("1" (assert) nil nil)) nil) ("2" (use "EquivClassEq[X]") (("2" (assert) nil nil)) nil)) nil) proved ((EquivClassEq formula-decl nil QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (Y formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (X formal-type-decl nil QuotientDistributive nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (RelExtension const-decl "equivalence[[X, Y]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 520 440 t shostak)) (RelQuotientDistributive_TCC1 0 (RelQuotientDistributive_TCC1-1 nil 3245193424 3245525342 ("" (grind :exclude "rep" :if-match nil) (("1" (apply-extensionality :hide? t) (("1" (hide -4 -5 -6 -7) (("1" (forward-chain -2) (("1" (iff) (("1" (prop) (("1" (forward-chain -4) nil nil) ("2" (hide -2) (("2" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (apply-extensionality :hide? t) (("2" (hide -1 -2 -3 -4 -8) (("2" (forward-chain -1) (("2" (iff) (("2" (prop) (("1" (forward-chain -3) nil nil) ("2" (hide -2) (("2" (forward-chain -2) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((set type-eq-decl nil sets nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (Y formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (X formal-type-decl nil QuotientDistributive nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (RelExtension const-decl "equivalence[[X, Y]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 552 540 t shostak)) (RelQuotientDistributive_TCC2 0 (RelQuotientDistributive_TCC2-1 nil 3245193424 3245525342 ("" (grind :exclude "rep" :if-match nil) (("1" (rewrite "restrict_full[[[X, Y], [X, Y]], bool]") (("1" (inst?) nil nil)) nil) ("2" (rewrite "restrict_full[[[X, Y], [X, Y]], bool]") (("2" (inst?) nil nil)) nil)) nil) proved ((RelExtension const-decl "equivalence[[X, Y]]" QuotientDistributive nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (PreservesEq const-decl "bool" KernelDefinition nil)) 66 60 t shostak)) (RelQuotientDistributive 0 (RelQuotientDistributive-1 nil 3245194514 3245525344 ("" (skosimp*) (("" (expand "bijective?") (("" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (expand "lift") (("1" (flatten) (("1" (typepred "x1!1" "x2!1") (("1" (skosimp*) (("1" (case "nonempty?(x1!1)") (("1" (case "nonempty?(x2!1)") (("1" (expand "rep") (("1" (name-replace "ch1" "choose(x1!1)") (("1" (name-replace "ch2" "choose(x2!1)") (("1" (typepred "ch1" "ch2") (("1" (replace -5) (("1" (hide -5) (("1" (replace -5) (("1" (hide -5) (("1" (hide -3 -4) (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "RelExtension") (("1" (flatten) (("1" (assert) (("1" (iff) (("1" (lemma "Kernel_quotient_map[X, X]") (("1" (lemma "Kernel_quotient_map[Y, Y]") (("1" (inst?) (("1" (inst?) (("1" (case "EquivalenceKernel[X, X, Quotient[X](S!1)](quotient_map(S!1))(ch1`1, ch2`1)") (("1" (case "EquivalenceKernel[Y, Y, Quotient[Y](R!1)](quotient_map(R!1))(ch1`2, ch2`2)") (("1" (replace -3) (("1" (replace -4) (("1" (hide -3 -4) (("1" (assert) (("1" (smash) (("1" (typepred "R!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (hide -1 -5 -6 -8 -10 -12 -13) (("1" (inst-cp -1 "ch1`2" "ch2`2") (("1" (assert) (("1" (hide -4) (("1" (inst -1 "x!1`2" "ch1`2") (("1" (assert) (("1" (hide -5) (("1" (inst-cp -3 "x!2`2" "ch2`2" "ch1`2") (("1" (assert) (("1" (hide -6 -2) (("1" (inst-cp -2 "x!2`2" "ch1`2" "x!1`2") (("1" (assert) (("1" (hide -4 -1) (("1" (inst -1 "x!2`2" "x!1`2" "x!4") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -4 -6 -8 -9 -10) (("2" (typepred "S!1") (("2" (expand "equivalence?") (("2" (flatten) (("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (hide -1) (("2" (inst-cp -1 "ch1`1" "ch2`1") (("2" (assert) (("2" (hide -4) (("2" (inst -1 "x!1`1" "ch1`1") (("2" (assert) (("2" (hide -5) (("2" (inst-cp -3 "x!2`1" "ch2`1" "ch1`1") (("2" (assert) (("2" (hide -6 -2) (("2" (inst-cp -2 "x!2`1" "ch1`1" "x!1`1") (("2" (assert) (("2" (hide -4 -1) (("2" (inst -1 "x!2`1" "x!1`1" "x!3") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -2 -3 -5 -7 -9 -10) (("3" (typepred "R!1") (("3" (expand "equivalence?") (("3" (flatten) (("3" (hide -1) (("3" (expand "symmetric?") (("3" (expand "transitive?") (("3" (inst -1 "x!2`2" "ch2`2") (("3" (assert) (("3" (hide -6) (("3" (inst-cp -2 "x!1`2" "ch1`2" "ch2`2") (("3" (assert) (("3" (hide -6 -4) (("3" (inst-cp -2 "x!1`2" "ch2`2" "x!2`2") (("3" (assert) (("3" (hide -4 -1) (("3" (inst -1 "x!1`2" "x!2`2" "x!4") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide -1 -4 -6 -8 -9 -10) (("4" (typepred "S!1") (("4" (expand "equivalence?") (("4" (flatten) (("4" (expand "symmetric?") (("4" (expand "transitive?") (("4" (hide -1) (("4" (inst -1 "x!2`1" "ch2`1") (("4" (assert) (("4" (hide -6) (("4" (inst-cp -2 "x!1`1" "ch1`1" "ch2`1") (("4" (assert) (("4" (hide -6 -4) (("4" (inst-cp -2 "x!1`1" "ch2`1" "x!2`1") (("4" (assert) (("4" (hide -4 -1) (("4" (inst -1 "x!1`1" "x!2`1" "x!3") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "EquivalenceKernel") (("2" (propax) nil nil)) nil)) nil) ("2" (expand "EquivalenceKernel") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -3) (("2" (hide -1 -2 -3 -4 -5 2) (("2" (grind) (("1" (typepred "R!1") (("1" (grind) nil nil)) nil) ("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (hide -1 -2 -3 -4 2) (("2" (grind) (("1" (typepred "R!1") (("1" (grind) nil nil)) nil) ("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (typepred "y!1`1") (("2" (typepred "y!1`2") (("2" (skosimp*) (("2" (case "nonempty?(y!1`1)") (("1" (case "nonempty?(y!1`2)") (("1" (inst 1 "EquivClass[[X, Y]](RelExtension(S!1,R!1))(choose(y!1`1), choose(y!1`2))") (("1" (case "nonempty?(EquivClass[[X, Y]]
                                             (RelExtension(S!1, R!1))(choose(y!1`1), choose(y!1`2)))") (("1" (expand "lift") (("1" (expand "rep") (("1" (name-replace "ch" "choose(EquivClass[[X, Y]]
                                            (RelExtension(S!1, R!1))(choose(y!1`1), choose(y!1`2)))") (("1" (typepred "ch") (("1" (expand "EquivClass") (("1" (expand "RelExtension") (("1" (flatten) (("1" (name-replace "ch1" "choose(y!1`1)") (("1" (name-replace "ch2" "choose(y!1`2)") (("1" (typepred "ch1" "ch2") (("1" (replace -8 -2) (("1" (replace -9 -1) (("1" (assert) (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (apply-extensionality :hide? t) (("1" (replace -9 1) (("1" (assert) (("1" (iff) (("1" (hide -2 -4 -5 -6 -7 -8 -9) (("1" (typepred "S!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (prop) (("1" (hide -2) (("1" (inst-cp -2 "x!2" "ch1" "ch`1") (("1" (assert) (("1" (hide -4 -5) (("1" (inst -2 "x!2" "ch`1" "x!3") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst-cp -2 "ch1" "ch`1") (("2" (assert) (("2" (hide -6) (("2" (inst -2 "x!2" "ch1") (("2" (assert) (("2" (hide -5) (("2" (inst-cp -4 "ch`1" "ch1" "x!2") (("2" (assert) (("2" (hide -3 -2) (("2" (inst -2 "ch`1" "x!2" "x!3") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (apply-extensionality :hide? t) (("2" (replace -8 1) (("2" (assert) (("2" (iff) (("2" (typepred "R!1") (("2" (expand "equivalence?") (("2" (flatten) (("2" (hide -1 -4 -6 -8 -9 -10 -11 -12) (("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (prop) (("1" (hide -2) (("1" (inst-cp -2 "x!1" "ch2" "ch`2") (("1" (assert) (("1" (hide -4 -5) (("1" (inst -2 "x!1" "ch`2" "x!3") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst-cp -2 "ch2" "ch`2") (("2" (assert) (("2" (hide -6) (("2" (inst -2 "x!1" "ch2") (("2" (assert) (("2" (hide -5) (("2" (inst-cp -4 "ch`2" "ch2" "x!1") (("2" (assert) (("2" (hide -3 -2) (("2" (inst -2 "ch`2" "x!1" "x!3") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "EquivClass") (("3" (inst 1 "ch`2") nil nil)) nil) ("4" (expand "EquivClass") (("4" (inst 1 "ch`1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "nonempty?" 1) (("2" (expand "empty?") (("2" (expand "member") (("2" (expand "EquivClass" -1) (("2" (expand "RelExtension" -1) (("2" (inst -1 "(choose(y!1`1), choose(y!1`2))") (("2" (typepred "S!1" "R!1") (("2" (expand "equivalence?") (("2" (flatten) (("2" (hide -2 -3 -5 -6) (("2" (expand "reflexive?") (("2" (inst?) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (propax) nil nil) ("4" (propax) nil nil)) nil) ("2" (expand "EquivClass" 1) (("2" (expand "RelExtension" 1) (("2" (inst 1 "(choose(y!1`1), choose(y!1`2))") nil nil)) nil)) nil)) nil) ("2" (hide -1 -3 2) (("2" (replace -1) (("2" (hide -1) (("2" (grind) (("2" (typepred "R!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -2 1) (("2" (hide -1 -2 2) (("2" (grind) (("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (ch skolem-const-decl "(EquivClass[[X, Y]](RelExtension(S!1, R!1))(choose(y!1`1), choose(y!1`2)))" QuotientDistributive nil) (S!1 skolem-const-decl "equivalence[X]" QuotientDistributive nil) (R!1 skolem-const-decl "equivalence[Y]" QuotientDistributive nil) (y!1 skolem-const-decl "[Quotient[X](S!1), Quotient[Y](R!1)]" QuotientDistributive nil) (injective? const-decl "bool" functions nil) (lift const-decl "Y" QuotientExtensionProperties nil) (Quotient type-eq-decl nil QuotientDefinition nil) (RelExtension const-decl "equivalence[[X, Y]]" QuotientDistributive nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (Y formal-type-decl nil QuotientDistributive nil) (X formal-type-decl nil QuotientDistributive nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (reflexive? const-decl "bool" relations nil) (rep const-decl "T" QuotientDefinition nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (Kernel_quotient_map formula-decl nil QuotientKernelProperties nil) (choose const-decl "(p)" sets nil)) 2242 2040 t shostak)) (FunExtension_TCC1 0 (FunExtension_TCC1-1 nil 3245193424 3245525345 ("" (grind :exclude "rep" :if-match nil) (("1" (typepred "F!1(x!2)") (("1" (inst?) (("1" (inst?) (("1" (grind :exclude "rep" :if-match nil) (("1" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil) ("2" (inst?) (("2" (typepred "F!1(x!2)") (("2" (grind :exclude "rep" :if-match nil) (("2" (forward-chain -2) nil nil)) nil)) nil)) nil) ("3" (typepred "F!1(x!2)") (("3" (grind :exclude "rep" :if-match nil) (("3" (inst? -1) nil nil)) nil)) nil)) nil) proved ((equivalence type-eq-decl nil relations nil) (X formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (Y formal-type-decl nil QuotientDistributive nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (equivalence? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 514 500 t shostak)) (FunExtensionPreservesEq 0 (FunExtensionPreservesEq-1 nil 3245194994 3245525345 ("" (grind) (("" (apply-extensionality :hide? t) (("" (apply-extensionality :hide? t) (("" (inst?) (("" (iff) (("" (typepred "F!1(x!2)") (("" (expand "equivalence?") (("" (flatten) (("" (hide -1) (("" (expand "symmetric?") (("" (expand "transitive?") (("" (prop) (("1" (inst -2 "x!1`1(x!2)" "x!1`2(x!2)") (("1" (assert) (("1" (forward-chain -3) nil nil)) nil)) nil) ("2" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (Y formal-type-decl nil QuotientDistributive nil) (X formal-type-decl nil QuotientDistributive nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (NOT const-decl "[bool -> bool]" booleans nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (FunExtension const-decl "equivalence[[X -> Y]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 329 280 t shostak)) (FunQuotientDistributive_TCC1 0 (FunQuotientDistributive_TCC1-1 nil 3245193424 3245525346 ("" (grind :exclude "rep" :if-match nil) (("" (apply-extensionality :hide? t) (("" (inst?) (("" (typepred "F!1(x!2)") (("" (apply-extensionality :hide? t) (("" (flatten) (("" (forward-chain -2) (("" (iff) (("" (prop) (("1" (forward-chain -4) nil nil) ("2" (hide -2) (("2" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (Y formal-type-decl nil QuotientDistributive nil) (X formal-type-decl nil QuotientDistributive nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (NOT const-decl "[bool -> bool]" booleans nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (FunExtension const-decl "equivalence[[X -> Y]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 291 280 t shostak)) (FunQuotientDistributive_TCC2 0 (FunQuotientDistributive_TCC2-1 nil 3245193424 3245525346 ("" (grind :exclude "rep" :if-match nil) (("1" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (inst?) nil nil)) nil) ("2" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("2" (inst?) nil nil)) nil)) nil) proved ((FunExtension const-decl "equivalence[[X -> Y]]" QuotientDistributive nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (PreservesEq const-decl "bool" KernelDefinition nil)) 65 60 t shostak)) (FunQuotientDistributive 0 (FunQuotientDistributive-1 nil 3245195217 3245530650 ("" (skosimp) (("" (lemma "FunExtensionPreservesEq") (("" (expand "bijective?") (("" (inst -1 "F!1") (("" (prop) (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (skosimp*) (("1" (replace -1 :hide? t) (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "FunExtension" 1) (("1" (expand "lift") (("1" (decompose-equality) (("1" (iff) (("1" (prop) (("1" (skosimp*) (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (expand "quotient_map" -2) (("1" (expand "EquivClass" -2) (("1" (decompose-equality) (("1" (inst -1 "x!1(x!4)") (("1" (expand "rep") (("1" (expand "FunExtension") (("1" (expand "PreservesEq") (("1" (expand "subset?") (("1" (expand "member") (("1" (expand "EquivalenceKernel") (("1" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (name-replace "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (name-replace "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (inst -3 "(ch1, ch2)") (("1" (prop) (("1" (decompose-equality) (("1" (inst -1 "x!4") (("1" (decompose-equality) (("1" (typepred "ch1") (("1" (typepred "ch2") (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (inst -3 "x!2(x!4)") (("1" (typepred "F!1(x!4)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (assert) (("1" (inst-cp -1 "x!2(x!4)" "ch2(x!4)") (("1" (assert) (("1" (replace -2) (("1" (hide -2) (("1" (inst -1 "x!1(x!4)" "ch1(x!4)") (("1" (assert) (("1" (replace -1) (("1" (hide -1 -4 -5) (("1" (inst-cp -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("1" (assert) (("1" (hide -3 -4) (("1" (inst -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "ch1" "ch2") (("2" (hide 1) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (typepred "F!1(x!4)") (("2" (expand "equivalence?") (("2" (flatten) (("2" (hide -1) (("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (inst -1 "x!1(x!4)" "ch1(x!4)") (("2" (assert) (("2" (replace -1) (("2" (hide -1) (("2" (hide -2) (("2" (inst-cp -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("2" (assert) (("2" (hide -3 -4) (("2" (inst -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst -1 "x!2") (("2" (expand "member") (("2" (skosimp) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst -1 "x!1") (("2" (expand "member") (("2" (skosimp) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind :if-match nil) (("2" (expand "EquivClass" 1) (("2" (expand "FunExtension" 1) (("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil) ("3" (inst 1 "x!1") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (expand "quotient_map") (("2" (expand "EquivClass") (("2" (decompose-equality) (("1" (expand "PreservesEq") (("1" (expand "subset?") (("1" (expand "member") (("1" (expand "FunExtension") (("1" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (expand "EquivalenceKernel") (("1" (expand "rep") (("1" (name-replace "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (name-replace "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (inst -3 "(ch1, ch2)") (("1" (typepred "ch1" "ch2") (("1" (hide -5) (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (inst -3 "ch1(x!4)") (("1" (typepred "F!1(x!4)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "reflexive?") (("1" (inst -1 "ch1(x!4)") (("1" (assert) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (inst-cp -1 "ch2(x!4)" "ch1(x!4)") (("1" (assert) (("1" (hide -6) (("1" (inst -1 "x!2(x!4)" "ch2(x!4)") (("1" (assert) (("1" (hide -5) (("1" (inst-cp -3 "x!1(x!4)" "ch1(x!4)" "ch2(x!4)") (("1" (assert) (("1" (hide -5 -2) (("1" (inst-cp -2 "x!1(x!4)" "ch2(x!4)" "x!2(x!4)") (("1" (assert) (("1" (hide -4 -1) (("1" (forward-chain -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind :if-match nil) (("2" (expand "FunExtension") (("2" (expand "EquivClass") (("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil) ("3" (inst 1 "x!1") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!2") (("2" (apply-extensionality :hide? t) (("2" (expand "FunExtension") (("2" (expand "EquivClass") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("3" (inst 1 "x!2") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil) ("4" (inst 1 "x!1") (("4" (apply-extensionality :hide? t) (("4" (expand "EquivClass") (("4" (propax) nil nil)) nil)) nil)) nil) ("5" (inst 1 "x!1") (("5" (apply-extensionality :hide? t) (("5" (expand "EquivClass") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (expand "surjective?") (("2" (skosimp) (("2" (inst 1 "{ f : [X -> Y] | FORALL (x: X): (y!1(x))(f(x)) }") (("1" (expand "lift") (("1" (apply-extensionality :hide? t) (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "rep") (("1" (name-replace "ch" "choose({f: [X -> Y] | FORALL (x: X): y!1(x)(f(x))})") (("1" (typepred "ch") (("1" (typepred "F!1(x!1)") (("1" (inst -2 "x!1") (("1" (typepred "y!1(x!1)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (decompose-equality) (("1" (inst-cp -1 "x!2") (("1" (inst -1 "ch(x!1)") (("1" (replace -4) (("1" (replace -2) (("1" (hide -2 -4) (("1" (iff) (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -2) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (prop) (("1" (inst -4 "x!3" "ch(x!1)" "x!2") (("1" (assert) nil nil)) nil) ("2" (inst -3 "x!3" "ch(x!1)") (("2" (assert) (("2" (hide -2) (("2" (inst -3 "ch(x!1)" "x!3" "x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind :if-match nil) (("2" (inst -1 "LAMBDA (x: X): choose(y!1(x))") (("1" (skosimp) (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (replace -1) (("1" (beta) (("1" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (propax) nil nil)) nil) ("2" (inst -1 "x!4") (("2" (hide -1 2) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (expand "EquivClass") (("2" (decompose-equality) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (replace -1 :hide? t) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (expand "EquivClass") (("2" (expand "FunExtension") (("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (prop) (("1" (skosimp) (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (decompose-equality) (("1" (name-replace "ch" "choose(y!1(x!3))") (("1" (typepred "ch") (("1" (inst -3 "x!3") (("1" (inst-cp -2 "ch") (("1" (replace -1) (("1" (inst -2 "x!2(x!3)") (("1" (replace -4) (("1" (hide -1 -4) (("1" (typepred "F!1(x!3)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (inst -1 "x!4" "ch") (("1" (assert) (("1" (hide -4) (("1" (inst -2 "ch" "x!4" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 2) (("2" (grind) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (expand "EquivClass") (("2" (decompose-equality) (("2" (inst -1 "x!5") (("2" (inst -2 "x!5") (("2" (replace 1) (("2" (assert) (("2" (hide 2) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -1 "x!3") (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (expand "EquivClass") (("2" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (typepred "F!1(x!3)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1 -2) (("1" (expand "transitive?") (("1" (inst -1 "x!4" "ch" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (expand "EquivClass") (("1" (expand "FunExtension") (("1" (prop) (("1" (skosimp) (("1" (name-replace "ch" "choose(y!1(x!3))") (("1" (typepred "ch") (("1" (inst -2 "x!3") (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (typepred "F!1(x!3)") (("1" (grind :if-match nil) (("1" (hide -1) (("1" (inst -1 "x!4" "ch") (("1" (assert) (("1" (hide -3) (("1" (inst -2 "ch" "x!4" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!4") (("2" (grind) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (inst -2 "x!3") (("2" (replace -1 :hide? t) (("2" (expand "EquivClass") (("2" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (typepred "F!1(x!3)") (("1" (grind :if-match nil) (("1" (hide -1 -2) (("1" (inst -1 "x!4" "ch" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (expand "EquivClass") (("1" (expand "FunExtension") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (prop) (("1" (skosimp) (("1" (name-replace "ch" "choose(y!1(x!2))") (("1" (typepred "ch") (("1" (typepred "y!1(x!2)") (("1" (skosimp) (("1" (inst -3 "x!2") (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (typepred "F!1(x!2)") (("1" (grind :if-match nil) (("1" (hide -1) (("1" (inst -1 "x!3" "ch") (("1" (assert) (("1" (hide -3) (("1" (inst -2 "ch" "x!3" "x!1(x!2)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (inst -2 "x!2") (("2" (name-replace "ch" "choose(y!1(x!2))") (("1" (typepred "ch") (("1" (replace -2 :hide? t) (("1" (expand "EquivClass") (("1" (typepred "F!1(x!2)") (("1" (grind :if-match nil) (("1" (hide -1 -2) (("1" (inst -1 "x!3" "ch" "x!1(x!2)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 2) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!4") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!1)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!2") (("2" (grind) (("2" (typepred "F!1(x!1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!1)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!2") (("2" (grind) (("2" (typepred "F!1(x!1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((FunExtensionPreservesEq formula-decl nil QuotientDistributive nil) (X formal-type-decl nil QuotientDistributive nil) (Y formal-type-decl nil QuotientDistributive nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (F!1 skolem-const-decl "[X -> equivalence[Y]]" QuotientDistributive nil) (y!1 skolem-const-decl "[x: X -> Quotient[Y](F!1(x))]" QuotientDistributive nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (lift const-decl "Y" QuotientExtensionProperties nil) (restrict const-decl "R" restrict nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (restrict_full formula-decl nil restrict_props nil) (member const-decl "bool" sets nil) (PreservesEq const-decl "bool" KernelDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (rep const-decl "T" QuotientDefinition nil) (Quotient type-eq-decl nil QuotientDefinition nil) (FunExtension const-decl "equivalence[[X -> Y]]" QuotientDistributive nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bijective? const-decl "bool" functions nil)) 3833413 155370 t shostak)))(QuotientIteration (action_TCC1 0 (action_TCC1-1 nil 3243015883 3245525350 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientIteration nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (Quotient type-eq-decl nil QuotientDefinition nil) (x!1 skolem-const-decl "X" QuotientIteration nil) (S!1 skolem-const-decl "equivalence[X]" QuotientIteration nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 487 440 nil nil)) (action_TCC2 0 (action_TCC2-1 nil 3243015883 3245525350 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientIteration nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (Quotient type-eq-decl nil QuotientDefinition nil) (y!1 skolem-const-decl "X" QuotientIteration nil) (S!1 skolem-const-decl "equivalence[X]" QuotientIteration nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 458 440 nil nil)) (action_equivalence_is_equivalence 0 (action_equivalence_is_equivalence-1 nil 3243663397 3245525350 ("" (skosimp*) (("" (typepred "S!1" "R!1") (("" (expand "equivalence?") (("" (flatten) (("" (expand "reflexive?") (("" (expand "symmetric?") (("" (expand "transitive?") (("" (expand "action") (("" (prop) (("1" (skosimp*) (("1" (inst? -4) (("1" (inst 1 "x!1") nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -6 "EquivClass(S!1)(x!1)" "EquivClass(S!1)(y!1)") (("1" (assert) nil nil) ("2" (inst 1 "y!1") nil nil) ("3" (inst 1 "x!1") nil nil)) nil)) nil) ("3" (skosimp*) (("3" (inst -8 "EquivClass(S!1)(x!1)" "EquivClass(S!1)(y!1)" "EquivClass(S!1)(z!1)") (("1" (assert) nil nil) ("2" (inst 1 "z!1") nil nil) ("3" (inst 1 "y!1") nil nil) ("4" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Quotient type-eq-decl nil QuotientDefinition nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (X formal-type-decl nil QuotientIteration nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (symmetric? const-decl "bool" relations nil) (action const-decl "bool" QuotientIteration nil) (z!1 skolem-const-decl "X" QuotientIteration nil) (y!1 skolem-const-decl "X" QuotientIteration nil) (x!1 skolem-const-decl "X" QuotientIteration nil) (y!1 skolem-const-decl "X" QuotientIteration nil) (x!1 skolem-const-decl "X" QuotientIteration nil) (x!1 skolem-const-decl "X" QuotientIteration nil) (S!1 skolem-const-decl "equivalence[X]" QuotientIteration nil) (transitive? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 232 230 t shostak)) (QuotientAction_TCC1 0 (QuotientAction_TCC1-1 nil 3243015883 3245525351 ("" (grind :exclude "rep" :if-match nil) (("" (apply-extensionality :hide? t) (("" (lemma "PreservesEq_quotient_map[X, X]") (("" (inst?) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (expand "member") (("" (rewrite "restrict_full[[X, X], bool]") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((action const-decl "bool" QuotientIteration nil) (restrict_full formula-decl nil restrict_props nil) (PreservesEq_quotient_map formula-decl nil QuotientKernelProperties nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientIteration nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (Quotient type-eq-decl nil QuotientDefinition nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil)) 539 490 t nil)) (QuotientAction_TCC2 0 (QuotientAction_TCC2-1 nil 3243015883 3245525351 ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (rewrite "restrict_full[[Quotient[X](S!1), Quotient[X](S!1)], bool]") (("" (rewrite "restrict_full[[X, X], bool]") (("" (prop) (("1" (skosimp*) (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (typepred "x!1`1" "x!1`2") (("2" (expand "lift") (("2" (lemma "EquivClassEq[X]") (("2" (auto-rewrite "EquivClassNonEmpty[X]") (("2" (skosimp*) (("2" (replace -2) (("2" (replace -3) (("2" (inst?) (("1" (assert) (("1" (hide 2) (("1" (expand "action") (("1" (rewrite "restrict_full[[X, X], bool]") (("1" (case "FORALL(x : X) :
                   EquivClass(S!1)(choose(EquivClass[X](S!1)(x))) = EquivClass(S!1)(x)") (("1" (inst-cp -1 "x!2") (("1" (expand "rep") (("1" (replace -2) (("1" (inst -1 "x!3") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (skosimp*) (("2" (lemma "EquivClassEq[X]") (("2" (inst?) (("2" (assert) (("2" (use "EquivClassChoose[X]") (("2" (hide 2) (("2" (typepred "S!1") (("2" (expand "equivalence?") (("2" (expand "symmetric?") (("2" (flatten) (("2" (expand "repEC") (("2" (forward-chain -2) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "restrict_full[[X, X], bool]") (("2" (inst 1 "x!3") nil nil)) nil) ("3" (rewrite "restrict_full[[X, X], bool]") (("3" (assert) nil nil)) nil) ("4" (rewrite "restrict_full[[X, X], bool]") (("4" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil)) 42 40 t nil)) (QuotientAction_TCC3 0 (QuotientAction_TCC3-1 nil 3245193427 3245534075 ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (expand "member") (("" (skosimp*) (("" (rewrite "restrict_full[[Quotient[X](S!1), Quotient[X](S!1)], bool]") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (typepred "x!1`1" "x!1`2") (("" (expand "lift") (("" (lemma "EquivClassEq[X]") (("" (auto-rewrite "EquivClassNonEmpty[X]") (("" (skosimp*) (("" (replace -2) (("" (replace -3) (("" (inst?) (("1" (assert) (("1" (hide 2) (("1" (expand "action") (("1" (case "FORALL(x : X) :
                   EquivClass(S!1)(choose(EquivClass[X](S!1)(x))) = EquivClass(S!1)(x)") (("1" (inst-cp -1 "x!2") (("1" (expand "rep") (("1" (replace -2) (("1" (inst -1 "x!3") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (skosimp*) (("2" (lemma "EquivClassEq[X]") (("2" (inst?) (("2" (assert) (("2" (use "EquivClassChoose[X]") (("2" (hide 2) (("2" (typepred "S!1") (("2" (expand "equivalence?") (("2" (expand "symmetric?") (("2" (flatten) (("2" (inst -2 "x!4" "choose(EquivClass[X](S!1)(x!4))") (("2" (assert) (("2" (expand "repEC") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict_full formula-decl nil restrict_props nil) (X formal-type-decl nil QuotientIteration nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (Quotient type-eq-decl nil QuotientDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (lift const-decl "Y" QuotientExtensionProperties nil) (S!1 skolem-const-decl "equivalence[X]" QuotientIteration nil) (x!2 skolem-const-decl "X" QuotientIteration nil) (x!3 skolem-const-decl "X" QuotientIteration nil) (rep const-decl "T" QuotientDefinition nil) (action const-decl "bool" QuotientIteration nil) (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (EquivClassNonEmpty formula-decl nil QuotientDefinition nil) (EquivClassChoose formula-decl nil QuotientDefinition nil) (symmetric? const-decl "bool" relations nil) (repEC const-decl "T" QuotientDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil)) 3299648 56990 t shostak)) (QuotientAction_TCC4 0 (QuotientAction_TCC4-1 nil 3245525352 3245534100 ("" (grind :exclude "rep" :if-match nil) nil nil) proved ((restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (PreservesEq const-decl "bool" KernelDefinition nil)) 11027 320 t shostak)) (QuotientAction 0 (QuotientAction-1 nil 3243015883 3245525354 ("" (skosimp*) (("" (typepred "S!1" "R!1") (("" (expand "bijective?") (("" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (expand "lift") (("1" (typepred "x1!1" "x2!1") (("1" (auto-rewrite-theories "QuotientDefinition[X]" "QuotientDefinition[Quotient[X](S!1)]") (("1" (skosimp*) (("1" (replace -1) (("1" (replace -2) (("1" (hide -1 -2) (("1" (expand "rep") (("1" (name-replace "ch1" "choose(EquivClass[Quotient[X](S!1)](R!1)(x!1))") (("1" (name-replace "ch2" "choose(EquivClass[Quotient[X](S!1)](R!1)(x!2))") (("1" (typepred "ch1" "ch2") (("1" (skosimp*) (("1" (replace -1) (("1" (replace -3) (("1" (hide -1 -3) (("1" (name-replace "ch3" "choose(EquivClass[X](S!1)(x!3))") (("1" (name-replace "ch4" "choose(EquivClass[X](S!1)(x!4))") (("1" (typepred "ch3" "ch4") (("1" (stop-rewrite "EquivClassEq[X]") (("1" (assert) (("1" (case "EquivClass[X](action(S!1)(R!1))(ch3)(ch3)") (("1" (replace -6) (("1" (hide -6) (("1" (assert) (("1" (expand "action") (("1" (lemma "EquivClassEq[X]") (("1" (inst?) (("1" (prop) (("1" (replace -1) (("1" (hide -1 -2) (("1" (lemma "EquivClassEq[X]") (("1" (inst -1 "S!1" "ch4" "x!4") (("1" (prop) (("1" (replace -1) (("1" (hide -1 -2) (("1" (hide -2 -3) (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "symmetric?") (("1" (inst-cp -8 "EquivClass[X](S!1)(x!4)" "EquivClass(S!1)(ch3)") (("1" (prop) (("1" (hide -2) (("1" (inst -8 "x!2" "EquivClass[X](S!1)(x!4)") (("1" (expand "transitive?") (("1" (inst-cp -9 "x!1" "EquivClass(S!1)(ch3)" "EquivClass[X](S!1)(x!4)") (("1" (assert) (("1" (inst-cp -9 "x!1" "EquivClass[X](S!1)(x!4)" "x!2") (("1" (assert) nil nil) ("2" (expand "reflexive?") (("2" (inst 1 "x!4") nil nil)) nil)) nil)) nil) ("2" (expand "reflexive?") (("2" (inst 1 "x!4") nil nil)) nil) ("3" (expand "reflexive?") (("3" (inst 1 "ch3") nil nil)) nil)) nil)) nil) ("2" (expand "reflexive?") (("2" (inst 1 "x!4") nil nil)) nil)) nil)) nil)) nil) ("2" (expand "reflexive?") (("2" (inst 1 "ch3") nil nil)) nil) ("3" (expand "reflexive?") (("3" (inst 1 "x!4") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "equivalence?") (("2" (expand "symmetric?") (("2" (flatten) (("2" (inst -7 "x!4" "ch4") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 -4 -5 2) (("2" (expand "EquivClass") (("2" (expand "action") (("2" (expand "equivalence?") (("2" (expand "reflexive?") (("2" (flatten) (("2" (inst -4 "EquivClass(S!1)(ch3)") (("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (typepred "y!1") (("2" (skosimp*) (("2" (inst 1 "EquivClass(R!1)(EquivClass(S!1)(x!1))") (("1" (expand "lift") (("1" (expand "quotient_map") (("1" (replace -1) (("1" (lemma "EquivClassEq[X]") (("1" (inst -1 "action(S!1)(R!1)" "_" "_") (("1" (case "nonempty?(EquivClass(R!1)(EquivClass(S!1)(x!1)))") (("1" (expand "rep") (("1" (name-replace "ch1" "choose(EquivClass(R!1)(EquivClass(S!1)(x!1)))") (("1" (typepred "ch1") (("1" (skosimp*) (("1" (case "nonempty?(ch1)") (("1" (name-replace "ch2" "choose(ch1)") (("1" (typepred "ch2") (("1" (inst -6 "ch2" "x!1") (("1" (assert) (("1" (hide 2) (("1" (expand "action" 1) (("1" (expand "EquivClass" -4) (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "symmetric?") (("1" (inst -11 "LAMBDA (z: X): S!1(x!1, z)" "ch1") (("1" (assert) (("1" (case-replace "EquivClass(S!1)(ch2) = ch1") (("1" (expand "EquivClass" 1) (("1" (propax) nil nil)) nil) ("2" (hide 2) (("2" (hide -2 -4 -5 -6 -10 -11 -12) (("2" (replace -2) (("2" (hide -2) (("2" (assert) (("2" (expand "EquivClass" -1) (("2" (lemma "EquivClassEq[X]") (("2" (inst -1 "S!1" "x!2" "ch2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (hide -1 -2 -3 -4 -5 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 2) (("2" (grind) nil nil)) nil) ("3" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "EquivClass[X](S!1)(x!1)") (("2" (inst 1 "x!1") nil nil)) nil) ("3" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Quotient type-eq-decl nil QuotientDefinition nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (X formal-type-decl nil QuotientIteration nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (rep const-decl "T" QuotientDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (S!1 skolem-const-decl "equivalence[X]" QuotientIteration nil) (x!4 skolem-const-decl "X" QuotientIteration nil) (x!3 skolem-const-decl "X" QuotientIteration nil) (ch3 skolem-const-decl "(EquivClass[X](S!1)(x!3))" QuotientIteration nil) (transitive? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (action const-decl "bool" QuotientIteration nil) (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (EquivClassNonEmpty formula-decl nil QuotientDefinition nil) (lift const-decl "Y" QuotientExtensionProperties nil) (injective? const-decl "bool" functions nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (R!1 skolem-const-decl "equivalence[Quotient[X](S!1)]" QuotientIteration nil) (x!1 skolem-const-decl "X" QuotientIteration nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil)) 2324 2190 t nil)))(PartialFunctionDefinitions (LPartFun_to_SPartFun_TCC1 0 (LPartFun_to_SPartFun_TCC1-1 nil 3243663400 3245525354 ("" (subtype-tcc) nil nil) proved nil 11 10 t shostak)) (SPartFun_to_LPartFun_to_SPartFun 0 (SPartFun_to_LPartFun_to_SPartFun-1 nil 3243715985 3245525354 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("1" (apply-extensionality :hide? t) (("1" (grind) nil nil)) nil) ("2" (apply-extensionality :hide? t) (("1" (typepred "x!1") (("1" (grind) nil nil)) nil) ("2" (skosimp*) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((X formal-type-decl nil PartialFunctionDefinitions nil) (PRED type-eq-decl nil defined_types nil) (Y formal-type-decl nil PartialFunctionDefinitions nil) (SubsetPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (SPartFun_to_LPartFun const-decl "LiftPartialFunction" PartialFunctionDefinitions nil) (LPartFun_to_SPartFun const-decl "SubsetPartialFunction" PartialFunctionDefinitions nil) (LiftPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (lift type-decl nil lift_adt nil) (boolean nonempty-type-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (g!1 skolem-const-decl "SubsetPartialFunction" PartialFunctionDefinitions nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil)) 226 220 t shostak)) (LPartFun_to_SPartFun_to_LPartFun 0 (LPartFun_to_SPartFun_to_LPartFun-1 nil 3243716027 3245525354 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) (("" (rewrite "lift_up_eta") nil nil)) nil)) nil)) nil) proved ((X formal-type-decl nil PartialFunctionDefinitions nil) (Y formal-type-decl nil PartialFunctionDefinitions nil) (lift type-decl nil lift_adt nil) (LPartFun_to_SPartFun const-decl "SubsetPartialFunction" PartialFunctionDefinitions nil) (SPartFun_to_LPartFun const-decl "LiftPartialFunction" PartialFunctionDefinitions nil) (LiftPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (SubsetPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (PRED type-eq-decl nil defined_types nil) (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil) (boolean nonempty-type-decl nil booleans nil) (lift_up_eta formula-decl nil lift_adt nil)) 105 110 t shostak)))(PartialFunctionComposition (oh_TCC1 0 (oh_TCC1-1 nil 3243015884 3245525355 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (Y formal-type-decl nil PartialFunctionComposition nil) (PRED type-eq-decl nil defined_types nil) (Z formal-type-decl nil PartialFunctionComposition nil) (SubsetPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (X formal-type-decl nil PartialFunctionComposition nil) (CompDom const-decl "PRED[X]" PartialFunctionComposition nil)) 43 40 t nil)) (oh_TCC2 0 (oh_TCC2-1 nil 3243015884 3245525355 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (Y formal-type-decl nil PartialFunctionComposition nil) (PRED type-eq-decl nil defined_types nil) (Z formal-type-decl nil PartialFunctionComposition nil) (SubsetPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (X formal-type-decl nil PartialFunctionComposition nil) (CompDom const-decl "PRED[X]" PartialFunctionComposition nil)) 43 40 nil nil)) (SPartFun_to_LPartFun_CompositionPreservation 0 (SPartFun_to_LPartFun_CompositionPreservation-1 nil 3243716138 3245525355 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((X formal-type-decl nil PartialFunctionComposition nil) (Z formal-type-decl nil PartialFunctionComposition nil) (lift type-decl nil lift_adt nil) (O const-decl "LiftPartialFunction[X, Z]" PartialFunctionComposition nil) (O const-decl "SubsetPartialFunction[X, Z]" PartialFunctionComposition nil) (Y formal-type-decl nil PartialFunctionComposition nil) (SPartFun_to_LPartFun const-decl "LiftPartialFunction" PartialFunctionDefinitions nil) (LiftPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (SubsetPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (PRED type-eq-decl nil defined_types nil) (CompDom const-decl "PRED[X]" PartialFunctionComposition nil)) 165 160 t shostak)) (LPartFun_to_SPartFun_CompositionPreservation 0 (LPartFun_to_SPartFun_CompositionPreservation-1 nil 3243716183 3245525356 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("1" (apply-extensionality :hide? t) (("1" (grind) nil nil)) nil) ("2" (apply-extensionality :hide? t) (("1" (grind) (("1" (typepred "x!1") (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) proved ((X formal-type-decl nil PartialFunctionComposition nil) (PRED type-eq-decl nil defined_types nil) (Z formal-type-decl nil PartialFunctionComposition nil) (SubsetPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (O const-decl "SubsetPartialFunction[X, Z]" PartialFunctionComposition nil) (O const-decl "LiftPartialFunction[X, Z]" PartialFunctionComposition nil) (Y formal-type-decl nil PartialFunctionComposition nil) (LPartFun_to_SPartFun const-decl "SubsetPartialFunction" PartialFunctionDefinitions nil) (LiftPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (lift type-decl nil lift_adt nil) (CompDom const-decl "PRED[X]" PartialFunctionComposition nil) (boolean nonempty-type-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (f!1 skolem-const-decl "LiftPartialFunction[X, Y]" PartialFunctionComposition nil) (g!1 skolem-const-decl "LiftPartialFunction[Y, Z]" PartialFunctionComposition nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil)) 654 600 t shostak)))
