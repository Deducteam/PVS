(booleans)(equalities)(notequal)(if_def (IF_TCC1 0 (IF_TCC1-1 nil 3237052399 3342859013 ("" (inst 1 "LAMBDA (x: [boolean, T, T]): PROJ_2(x)") nil nil) proved ((T formal-type-decl nil if_def nil) (boolean nonempty-type-decl nil booleans nil)) 4 10 nil nil)))(boolean_props (bool_exclusive 0 (bool_exclusive-1 nil 3237052399 3342859013 ("" (iff) (("" (prop) nil nil)) nil) proved nil 3 0 nil nil)) (bool_inclusive 0 (bool_inclusive-1 nil 3237052399 3342859013 ("" (skolem!) (("" (prop) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil) proved nil 32 0 nil nil)) (not_def 0 (not_def-1 nil 3237052399 3342859013 ("" (skosimp) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 16 10 nil nil)) (and_def 0 (and_def-1 nil 3237052399 3342859013 ("" (skolem!) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 7 10 nil nil)) (syand_def 0 (syand_def-1 nil 3237052399 3342859013 ("" (propax) nil nil) proved nil 1 0 nil nil)) (or_def 0 (or_def-1 nil 3237052399 3342859013 ("" (skolem!) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 9 10 nil nil)) (implies_def 0 (implies_def-1 nil 3237052399 3342859013 ("" (skolem!) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 19 10 nil nil)) (syimplies_def 0 (syimplies_def-1 nil 3237052399 3342859013 ("" (propax) nil nil) proved nil 0 0 nil nil)) (when_def 0 (when_def-1 nil 3237052399 3342859013 ("" (skolem!) nil nil) proved nil 4 0 nil nil)) (iff_def 0 (iff_def-1 nil 3237052399 3342859013 ("" (skolem!) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 43 10 nil nil)) (syiff_def 0 (syiff_def-1 nil 3237052399 3342859013 ("" (propax) nil nil) proved nil 1 10 nil nil)) (excluded_middle 0 (excluded_middle-1 nil 3237052399 3342859013 ("" (grind) nil nil) proved nil 12 10 nil nil)))(xor_def (xor_def 0 (xor_def-1 nil 3237052399 3342859013 ("" (grind) nil nil) proved ((/= const-decl "boolean" notequal nil) (XOR const-decl "bool" xor_def nil)) 41 20 nil nil)))(quantifier_props (not_exists 0 (not_exists-1 nil 3237052399 3342859013 ("" (skolem!) (("" (iff) (("" (prop) (("1" (skolem!) (("1" (inst?) nil nil)) nil) ("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil) proved ((t formal-type-decl nil quantifier_props nil)) 32 20 nil nil)) (exists_not 0 (exists_not-1 nil 3237052399 3342859013 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 47 40 nil nil)) (exists_or 0 (exists_or-1 nil 3237052399 3342859013 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 124 80 nil nil)) (exists_implies 0 (exists_implies-1 nil 3237052399 3342859013 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 97 90 nil nil)) (exists_and 0 (exists_and-1 nil 3237052399 3342859013 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 48 30 nil nil)) (not_forall 0 (not_forall-1 nil 3237052399 3342859013 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 44 50 nil nil)) (forall_not 0 (forall_not-1 nil 3237052399 3342859014 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 63 40 nil nil)) (forall_and 0 (forall_and-1 nil 3237052399 3342859014 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 96 70 nil nil)) (forall_or 0 (forall_or-1 nil 3237052399 3342859014 ("" (grind) nil nil) proved ((t formal-type-decl nil quantifier_props nil)) 48 30 nil nil)))(defined_types)(exists1 (unique_lem 0 (unique_lem-1 nil 3237052399 3342859014 ("" (skolem!) (("" (flatten) (("" (expand "unique?") (("" (skolem!) (("" (flatten) (("" (inst-cp -1 "x!1") (("" (inst -1 "y!1") (("" (inst - "x!1" "y!1") (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil exists1 nil) (unique? const-decl "bool" exists1 nil)) 37 20 nil nil)) (exists1_lem 0 (exists1_lem-1 nil 3237052399 3342859014 ("" (skolem!) (("" (flatten) (("" (expand "exists1") (("" (prop) nil nil)) nil)) nil)) nil) proved ((exists1 const-decl "bool" exists1 nil)) 8 10 nil nil)))(equality_props (IF_true 0 (IF_true-1 nil 3237052399 3342859014 ("" (grind) nil nil) proved nil 6 10 nil nil)) (IF_false 0 (IF_false-1 nil 3237052399 3342859014 ("" (grind) nil nil) proved nil 6 0 nil nil)) (IF_same 0 (IF_same-1 nil 3237052399 3342859014 ("" (grind) nil nil) proved nil 7 10 nil nil)) (reflexivity_of_equals 0 (reflexivity_of_equals-1 nil 3237052399 3342859014 ("" (skolem!) nil nil) proved nil 5 0 nil nil)) (transitivity_of_equals 0 (transitivity_of_equals-1 nil 3237052399 3342859014 ("" (skolem!) (("" (flatten) (("" (replace -1) (("" (propax) nil nil)) nil)) nil)) nil) proved nil 7 10 nil nil)) (symmetry_of_equals 0 (symmetry_of_equals-1 nil 3237052399 3342859014 ("" (skolem!) (("" (flatten) (("" (replace -1) (("" (propax) nil nil)) nil)) nil)) nil) proved nil 18 10 nil nil)))(if_props (lift_if1 0 (lift_if1-1 nil 3237052399 3342859014 ("" (grind) nil nil) proved nil 7 0 nil nil)) (lift_if2 0 (lift_if2-1 nil 3237052399 3342859014 ("" (grind) nil nil) proved nil 26 30 nil nil)))(functions (extensionality_postulate 0 (extensionality_postulate-1 nil 3237052399 3342859014 ("" (skosimp) (("" (prop) (("1" (apply-extensionality) nil nil) ("2" (skosimp) (("2" (assert) nil nil)) nil)) nil)) nil) proved ((R formal-type-decl nil functions nil) (D formal-type-decl nil functions nil)) 34 10 nil nil)) (extensionality 0 (extensionality-1 nil 3237052399 3342859014 ("" (skolem!) (("" (flatten) (("" (apply-extensionality) nil nil)) nil)) nil) proved ((R formal-type-decl nil functions nil) (D formal-type-decl nil functions nil)) 11 10 nil nil)) (congruence 0 (congruence-1 nil 3237052399 3342859014 ("" (grind) nil nil) proved nil 40 30 nil nil)) (eta 0 (eta-1 nil 3237052399 3342859014 ("" (skolem!) (("" (apply-extensionality) nil nil)) nil) proved ((D formal-type-decl nil functions nil) (R formal-type-decl nil functions nil)) 26 10 nil nil)) (bij_is_inj 0 (bij_is_inj-1 nil 3237052399 3342859014 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil functions nil) (R formal-type-decl nil functions nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil)) 47 40 nil nil)) (bij_is_surj 0 (bij_is_surj-1 nil 3237052399 3342859014 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil functions nil) (R formal-type-decl nil functions nil) (bijective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil)) 53 40 nil nil)))(functions_alt)(transpose)(restrict (injective_restrict 0 (injective_restrict-1 nil 3237052399 3342859014 ("" (expand "injective?") (("" (skosimp*) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil restrict nil) (boolean nonempty-type-decl nil booleans nil) (S_pred const-decl "[T -> boolean]" restrict nil) (S formal-subtype-decl nil restrict nil) (restrict const-decl "R" restrict nil) (injective? const-decl "bool" functions nil)) 43 40 nil nil)) (restrict_of_inj_is_inj 0 (restrict_of_inj_is_inj-1 nil 3237052399 3342859014 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil restrict nil) (R formal-type-decl nil restrict nil) (S formal-subtype-decl nil restrict nil) (S_pred const-decl "[T -> boolean]" restrict nil) (restrict const-decl "R" restrict nil) (injective? const-decl "bool" functions nil)) 71 50 nil nil)))(restrict_props (restrict_full 0 (restrict_full-1 nil 3245191654 3342859015 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) nil nil)) nil) proved ((restrict const-decl "R" restrict nil) (T formal-type-decl nil restrict_props nil) (R formal-type-decl nil restrict_props nil)) 59 40 t shostak)))(extend (restrict_extend 0 (restrict_extend-1 nil 3237052399 3342859015 ("" (grind) (("" (apply-extensionality) nil nil)) nil) proved ((restrict const-decl "R" restrict nil) (extend const-decl "R" extend nil) (T formal-type-decl nil extend nil) (boolean nonempty-type-decl nil booleans nil) (S_pred const-decl "[T -> boolean]" extend nil) (S formal-subtype-decl nil extend nil) (R formal-type-decl nil extend nil)) 49 50 nil nil)))(extend_bool)(extend_props (extend_full 0 (extend_full-1 nil 3245191700 3342859015 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) nil nil)) nil) proved ((d formal-const-decl "R" extend_props nil) (extend const-decl "R" extend nil) (T formal-type-decl nil extend_props nil) (R formal-type-decl nil extend_props nil)) 59 40 t shostak)))(extend_func_props (surjective_extend 0 (surjective_extend-1 nil 3249327214 3342859015 ("" (skolem-typepred) (("" (expand "surjective?") (("" (skolem!) (("" (inst?) (("" (skolem!) (("" (inst?) (("" (expand "extend") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((extend const-decl "R" extend nil) (surjective? const-decl "bool" functions nil) (R formal-type-decl nil extend_func_props nil) (S formal-subtype-decl nil extend_func_props nil) (S_pred const-decl "[T -> boolean]" extend_func_props nil) (T formal-type-decl nil extend_func_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 46 40 t nil)))(K_conversion)(K_props (K_preserves 0 (K_preserves-1 nil 3237052399 3342859015 ("" (subtype-tcc) nil nil) proved ((K_conversion const-decl "T1" K_conversion nil)) 10 10 nil nil)) (K_preserves1 0 (K_preserves1-1 nil 3237052399 3342859015 ("" (subtype-tcc) nil nil) proved ((K_conversion const-decl "T1" K_conversion nil)) 10 10 nil nil)))(identity (I_TCC1 0 (I_TCC1-1 nil 3237052399 3342859015 ("" (grind) nil nil) proved ((T formal-type-decl nil identity nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil)) 42 30 nil nil)))(identity_props (I_preserves 0 (I_preserves-1 nil 3237052399 3342859015 ("" (subtype-tcc) nil nil) proved ((I const-decl "(bijective?[T, T])" identity nil)) 9 10 nil nil)) (id_preserves 0 (id_preserves-1 nil 3237052399 3342859015 ("" (subtype-tcc) nil nil) proved ((id const-decl "(bijective?[T, T])" identity nil)) 9 10 nil nil)) (identity_preserves 0 (identity_preserves-1 nil 3237052399 3342859015 ("" (subtype-tcc) nil nil) proved ((identity const-decl "(bijective?[T, T])" identity nil)) 27 10 nil nil)))(relations (equiv_is_reflexive 0 (equiv_is_reflexive-1 nil 3237052399 3342859015 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil relations nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 32 30 nil nil)) (equiv_is_symmetric 0 (equiv_is_symmetric-1 nil 3237052399 3342859015 ("" (skolem-typepred) (("" (expand "equivalence?") (("" (assert) nil nil)) nil)) nil) proved ((equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (T formal-type-decl nil relations nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 8 10 nil nil)) (equiv_is_transitive 0 (equiv_is_transitive-1 nil 3237052399 3342859015 ("" (skolem-typepred) (("" (expand "equivalence?") (("" (assert) nil nil)) nil)) nil) proved ((equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (T formal-type-decl nil relations nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 26 0 nil nil)))(orders (preorder_is_reflexive 0 (preorder_is_reflexive-1 nil 3237052399 3342859015 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (preorder? const-decl "bool" orders nil) (transitive? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 38 40 nil nil)) (preorder_is_transitive 0 (preorder_is_transitive-1 nil 3237052399 3342859015 ("" (skolem-typepred) (("" (expand "preorder?") (("" (assert) nil nil)) nil)) nil) proved ((preorder? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 8 10 nil nil)) (equiv_is_preorder 0 (equiv_is_preorder-1 nil 3237052399 3342859015 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil)) 69 40 nil nil)) (po_is_preorder 0 (po_is_preorder-1 nil 3237052399 3342859015 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (partial_order? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil)) 50 50 nil nil)) (po_is_antisymmetric 0 (po_is_antisymmetric-1 nil 3237052399 3342859015 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (partial_order? const-decl "bool" orders nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil)) 139 130 nil nil)) (strict_is_irreflexive 0 (strict_is_irreflexive-1 nil 3237052399 3342859015 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (strict_order? const-decl "bool" orders nil) (transitive? const-decl "bool" relations nil) (irreflexive? const-decl "bool" relations nil)) 56 40 nil nil)) (strict_order_is_antisymmetric 0 (strict_order_is_antisymmetric-1 nil 3252220963 3342859016 ("" (grind :if-match nil) (("" (inst -2 "x!2" "y!1" "x!2") (("" (assert) (("" (inst -1 "x!2") nil nil)) nil)) nil)) nil) proved ((irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (strict_order? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil)) 105 90 t shostak)) (strict_is_transitive 0 (strict_is_transitive-1 nil 3237052399 3342859016 ("" (skolem-typepred) (("" (expand "strict_order?") (("" (assert) nil nil)) nil)) nil) proved ((strict_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 8 10 nil nil)) (total_is_po 0 (total_is_po-1 nil 3237052399 3342859016 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (total_order? const-decl "bool" orders nil) (dichotomous? const-decl "bool" orders nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil)) 61 60 nil nil)) (total_is_dichotomous 0 (total_is_dichotomous-1 nil 3237052399 3342859016 ("" (skolem-typepred) (("" (expand "total_order?") (("" (assert) nil nil)) nil)) nil) proved ((total_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 19 0 nil nil)) (linear_is_total 0 (linear_is_total-1 nil 3237052399 3342859016 ("" (subtype-tcc) nil nil) proved ((linear_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil) (dichotomous? const-decl "bool" orders nil) (total_order? const-decl "bool" orders nil)) 61 60 nil nil)) (total_is_linear 0 (total_is_linear-1 nil 3237052399 3342859016 ("" (subtype-tcc) nil nil) proved ((linear_order? const-decl "bool" orders nil)) 11 10 nil nil)) (strict_total_is_strict 0 (strict_total_is_strict-1 nil 3237052399 3342859016 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (strict_total_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (strict_order? const-decl "bool" orders nil)) 60 50 nil nil)) (strict_total_is_trichotomous 0 (strict_total_is_trichotomous-1 nil 3237052399 3342859016 ("" (skolem-typepred) (("" (expand "strict_total_order?") (("" (assert) nil nil)) nil)) nil) proved ((strict_total_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 8 10 nil nil)) (well_ordered_is_strict_total 0 (well_ordered_is_strict_total-1 nil 3237052399 3342859016 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (well_ordered? const-decl "bool" orders nil) (well_founded? const-decl "bool" orders nil) (irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (strict_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (strict_total_order? const-decl "bool" orders nil)) 58 60 nil nil)) (well_ordered_is_well_founded 0 (well_ordered_is_well_founded-1 nil 3237052399 3342859016 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders nil) (pred type-eq-decl nil defined_types nil) (well_ordered? const-decl "bool" orders nil) (strict_total_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (strict_order? const-decl "bool" orders nil) (transitive? const-decl "bool" relations nil) (irreflexive? const-decl "bool" relations nil) (well_founded? const-decl "bool" orders nil)) 286 210 nil nil)))(orders_alt (least_upper_bound_is_upper_bound 0 (least_upper_bound_is_upper_bound-1 nil 3237052399 3342859017 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders_alt nil) (least_upper_bound? const-decl "[T -> bool]" orders_alt nil) (pe formal-const-decl "nonempty_pred[T]" orders_alt nil) (nonempty_pred type-eq-decl nil orders nil) (pred type-eq-decl nil defined_types nil) nil nil (upper_bound? const-decl "[T -> bool]" orders_alt nil) nil nil) 78 80 nil nil)) (greatest_lower_bound_is_lower_bound 0 (greatest_lower_bound_is_lower_bound-1 nil 3237052399 3342859017 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil orders_alt nil) (greatest_lower_bound? const-decl "[T -> bool]" orders_alt nil) (pe formal-const-decl "nonempty_pred[T]" orders_alt nil) (nonempty_pred type-eq-decl nil orders nil) (pred type-eq-decl nil defined_types nil) nil nil (lower_bound? const-decl "[T -> bool]" orders_alt nil) nil nil) 94 70 nil nil)))(restrict_order_props (reflexive_restrict 0 (reflexive_restrict-1 nil 3249347110 3342859018 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil restrict_order_props nil) (PRED type-eq-decl nil defined_types nil) (S formal-subtype-decl nil restrict_order_props nil) (S_pred const-decl "[T -> boolean]" restrict_order_props nil) (restrict const-decl "R" restrict nil) (reflexive? const-decl "bool" relations nil)) 867 60 t nil)) (irreflexive_restrict 0 (irreflexive_restrict-1 nil 3249347110 3342859018 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil restrict_order_props nil) (PRED type-eq-decl nil defined_types nil) (S formal-subtype-decl nil restrict_order_props nil) (S_pred const-decl "[T -> boolean]" restrict_order_props nil) (restrict const-decl "R" restrict nil) (irreflexive? const-decl "bool" relations nil)) 98 60 t nil)) (symmetric_restrict 0 (symmetric_restrict-1 nil 3249347110 3342859018 ("" (skolem-typepred) (("" (expand* "symmetric?" "restrict") (("" (skosimp) (("" (inst - "x!1" "y!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((restrict const-decl "R" restrict nil) (S formal-subtype-decl nil restrict_order_props nil) (S_pred const-decl "[T -> boolean]" restrict_order_props nil) (symmetric? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (T formal-type-decl nil restrict_order_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 58 30 t nil)) (antisymmetric_restrict 0 (antisymmetric_restrict-1 nil 3249347110 3342859018 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil restrict_order_props nil) (PRED type-eq-decl nil defined_types nil) (S formal-subtype-decl nil restrict_order_props nil) (S_pred const-decl "[T -> boolean]" restrict_order_props nil) (restrict const-decl "R" restrict nil) (antisymmetric? const-decl "bool" relations nil)) 151 110 t nil)) (connected_restrict 0 (connected_restrict-1 nil 3249347110 3342859018 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil restrict_order_props nil) (PRED type-eq-decl nil defined_types nil) (S formal-subtype-decl nil restrict_order_props nil) (S_pred const-decl "[T -> boolean]" restrict_order_props nil) (/= const-decl "boolean" notequal nil) (restrict const-decl "R" restrict nil) (connected? const-decl "bool" relations nil)) 227 130 t nil)) (transitive_restrict 0 (transitive_restrict-1 nil 3249347110 3342859019 ("" (skolem-typepred) (("" (expand* "transitive?" "restrict") (("" (skosimp) (("" (inst - "x!1" "y!1" "z!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((restrict const-decl "R" restrict nil) (S formal-subtype-decl nil restrict_order_props nil) (S_pred const-decl "[T -> boolean]" restrict_order_props nil) (transitive? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (T formal-type-decl nil restrict_order_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 696 80 nil nil)) (equivalence_restrict 0 (equivalence_restrict-1 nil 3249347110 3342859019 ("" (grind :if-match nil) (("1" (inst -6 "x!1" "y!1" "z!1") (("1" (assert) nil nil)) nil) ("2" (inst -4 "x!1" "y!1") (("2" (assert) nil nil)) nil) ("3" (inst -2 "x!1") nil nil)) nil) proved ((transitive_restrict application-judgement "(transitive?[S])" restrict_order_props nil) (symmetric_restrict application-judgement "(symmetric?[S])" restrict_order_props nil) (reflexive_restrict application-judgement "(reflexive?[S])" restrict_order_props nil) (equivalence? const-decl "bool" relations nil)) 219 210 t nil)) (preorder_restrict 0 (preorder_restrict-1 nil 3249347110 3342859020 ("" (grind :if-match nil) (("1" (inst -5 "x!1" "y!1" "z!1") (("1" (assert) nil nil)) nil) ("2" (inst -2 "x!1") nil nil)) nil) proved ((transitive_restrict application-judgement "(transitive?[S])" restrict_order_props nil) (reflexive_restrict application-judgement "(reflexive?[S])" restrict_order_props nil) (preorder? const-decl "bool" orders nil)) 291 280 t nil)) (partial_order_restrict 0 (partial_order_restrict-1 nil 3249347110 3342859020 ("" (grind :if-match nil) (("1" (inst -5 "x!1" "y!1") (("1" (assert) nil nil)) nil) ("2" (inst -5 "x!1" "y!1" "z!1") (("2" (assert) nil nil)) nil) ("3" (inst -2 "x!1") nil nil)) nil) proved ((preorder_restrict application-judgement "(preorder?[S])" restrict_order_props nil) (antisymmetric_restrict application-judgement "(antisymmetric?[S])" restrict_order_props nil) (partial_order? const-decl "bool" orders nil)) 400 370 t nil)) (strict_order_restrict 0 (strict_order_restrict-1 nil 3249347110 3342859021 ("" (grind :if-match nil) (("1" (inst -5 "x!1" "y!1" "z!1") (("1" (assert) nil nil)) nil) ("2" (inst -2 "x!1") nil nil)) nil) proved ((transitive_restrict application-judgement "(transitive?[S])" restrict_order_props nil) (antisymmetric_restrict application-judgement "(antisymmetric?[S])" restrict_order_props nil) (irreflexive_restrict application-judgement "(irreflexive?[S])" restrict_order_props nil) (strict_order? const-decl "bool" orders nil)) 484 470 t nil)) (dichotomous_restrict 0 (dichotomous_restrict-1 nil 3249347110 3342859021 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil restrict_order_props nil) (pred type-eq-decl nil defined_types nil) (S formal-subtype-decl nil restrict_order_props nil) (S_pred const-decl "[T -> boolean]" restrict_order_props nil) (restrict const-decl "R" restrict nil) (dichotomous? const-decl "bool" orders nil)) 639 570 t nil)) (total_order_restrict 0 (total_order_restrict-1 nil 3249347110 3342859022 ("" (grind :if-match nil) (("1" (inst -6 "x!1" "y!1") (("1" (assert) nil nil)) nil) ("2" (inst -5 "x!1" "y!1") (("2" (assert) nil nil)) nil) ("3" (inst -5 "x!1" "y!1" "z!1") (("3" (assert) nil nil)) nil) ("4" (inst -2 "x!1") nil nil)) nil) proved ((dichotomous_restrict application-judgement "(dichotomous?[S])" restrict_order_props nil) (partial_order_restrict application-judgement "(partial_order?[S])" restrict_order_props nil) (total_order? const-decl "bool" orders nil)) 686 660 t nil)) (trichotomous_restrict 0 (trichotomous_restrict-1 nil 3249347110 3342859023 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil restrict_order_props nil) (pred type-eq-decl nil defined_types nil) (S formal-subtype-decl nil restrict_order_props nil) (S_pred const-decl "[T -> boolean]" restrict_order_props nil) (restrict const-decl "R" restrict nil) (trichotomous? const-decl "bool" orders nil)) 822 790 t nil)) (strict_total_order_restrict 0 (strict_total_order_restrict-1 nil 3249347110 3342859024 ("" (grind :if-match nil) (("1" (inst -5 "x!1" "y!1") (("1" (assert) nil nil)) nil) ("2" (inst -5 "x!1" "y!1" "z!1") (("2" (assert) nil nil)) nil) ("3" (inst -2 "x!1") nil nil)) nil) proved ((trichotomous_restrict application-judgement "(trichotomous?[S])" restrict_order_props nil) (strict_order_restrict application-judgement "(strict_order?[S])" restrict_order_props nil) (strict_total_order? const-decl "bool" orders nil)) 923 870 t nil)) (well_founded_restrict 0 (well_founded_restrict-1 nil 3249347110 3342859025 ("" (skolem-typepred) (("" (expand* "well_founded?" "restrict") (("" (skosimp*) (("" (inst - "extend[T, S, bool, FALSE](p!1)") (("" (split) (("1" (skolem-typepred) (("1" (expand "extend") (("1" (prop) (("1" (assert) (("1" (inst + "y!2") (("1" (skolem!) (("1" (inst - "x!1") (("1" (expand "extend") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "y!1") (("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((restrict const-decl "R" restrict nil) (S_pred const-decl "[T -> boolean]" restrict_order_props nil) (S formal-subtype-decl nil restrict_order_props nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) nil nil (well_founded? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil restrict_order_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 963 900 t nil)) (well_ordered_restrict 0 (well_ordered_restrict-1 nil 3249347110 3342859026 ("" (grind :if-match nil) (("1" (inst -5 "p!1") (("1" (grind :if-match nil) (("1" (inst 1 "y!2") (("1" (skosimp) (("1" (inst -7 "x!1") nil nil)) nil)) nil) ("2" (inst 1 "y!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (inst -5 "x!1" "y!1") (("2" (assert) nil nil)) nil) ("3" (inst -5 "x!1" "y!1" "z!1") (("3" (assert) nil nil)) nil) ("4" (inst -2 "x!1") nil nil)) nil) proved ((well_founded_restrict application-judgement "(well_founded?[S])" restrict_order_props nil) (strict_total_order_restrict application-judgement "(strict_total_order?[S])" restrict_order_props nil) (well_ordered? const-decl "bool" orders nil)) 1168 1120 t nil)))(extend_order_props (irreflexive_extend 0 (irreflexive_extend-1 nil 3249327215 3342859026 ("" (skolem-typepred) (("" (expand* "irreflexive?" "extend") (("" (skolem!) (("" (prop) (("" (inst?) nil nil)) nil)) nil)) nil)) nil) proved ((extend const-decl "R" extend nil) (irreflexive? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (S formal-subtype-decl nil extend_order_props nil) (S_pred const-decl "[T -> boolean]" extend_order_props nil) (T formal-type-decl nil extend_order_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 26 20 nil nil)) (symmetric_extend 0 (symmetric_extend-1 nil 3249327215 3342859026 ("" (skolem-typepred) (("" (expand* "symmetric?" "extend") (("" (skosimp) (("" (prop) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((extend const-decl "R" extend nil) (symmetric? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (S formal-subtype-decl nil extend_order_props nil) (S_pred const-decl "[T -> boolean]" extend_order_props nil) (T formal-type-decl nil extend_order_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 51 40 nil nil)) (antisymmetric_extend 0 (antisymmetric_extend-1 nil 3249327215 3342859026 ("" (skolem-typepred) (("" (expand* "antisymmetric?" "extend") (("" (skosimp) (("" (prop) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((extend const-decl "R" extend nil) (antisymmetric? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (S formal-subtype-decl nil extend_order_props nil) (S_pred const-decl "[T -> boolean]" extend_order_props nil) (T formal-type-decl nil extend_order_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 67 60 nil nil)) (transitive_extend 0 (transitive_extend-1 nil 3249327215 3342859026 ("" (skolem-typepred) (("" (expand* "transitive?" "extend") (("" (skosimp) (("" (prop) (("" (inst - "x!1" "y!1" "z!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((extend const-decl "R" extend nil) (transitive? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (S formal-subtype-decl nil extend_order_props nil) (S_pred const-decl "[T -> boolean]" extend_order_props nil) (T formal-type-decl nil extend_order_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 85 70 nil nil)) (strict_order_extend 0 (strict_order_extend-1 nil 3249327215 3342859026 ("" (skolem-typepred) (("" (expand "strict_order?") (("" (flatten) (("" (use "irreflexive_extend") (("" (use "transitive_extend") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((transitive_extend application-judgement "(transitive?[T])" extend_order_props nil) (antisymmetric_extend application-judgement "(antisymmetric?[T])" extend_order_props nil) (irreflexive_extend application-judgement "(irreflexive?[T])" extend_order_props nil) (strict_order? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (S formal-subtype-decl nil extend_order_props nil) (S_pred const-decl "[T -> boolean]" extend_order_props nil) (T formal-type-decl nil extend_order_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 94 90 nil nil)))(wf_induction (wf_induction 0 (wf_induction-1 nil 3237052399 3342859026 ("" (skosimp) (("" (skosimp) (("" (typepred "<") (("" (expand "well_founded?") (("" (inst -1 "{z:T|NOT p!1(z)}") (("" (assert) (("" (split) (("1" (skosimp) (("1" (inst -2 "y!1") (("1" (split) (("1" (typepred "y!1") (("1" (propax) nil nil)) nil) ("2" (skosimp) (("2" (inst -2 "y!2") nil nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved (nil nil (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil wf_induction nil) (pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (< formal-const-decl "(well_founded?[T])" wf_induction nil)) 80 40 nil nil)))(measure_induction (measure_induction 0 (measure_induction-1 nil 3237052399 3342859027 ("" (lemma "wf_induction[T,(LAMBDA (x, y: T): m(x) < m(y))]") (("1" (skosimp*) (("1" (inst -1 "p!1") (("1" (split) (("1" (inst -1 "x!1") nil nil) ("2" (propax) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "well_founded?") (("2" (typepred "<") (("2" (expand "well_founded?") (("2" (skosimp*) (("2" (inst -1 "(LAMBDA (y:M): (exists (z:T): m(z) = y AND p!1(z)))") (("2" (split) (("1" (skosimp*) (("1" (typepred "y!2") (("1" (skosimp*) (("1" (inst 1 "z!1") (("1" (skosimp*) (("1" (inst -3 "m(x!1)") (("1" (assert) nil nil) ("2" (inst 1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 2 "y!1") (("2" (skosimp*) (("2" (inst 1 "m(y!1)") (("2" (inst 1 "y!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) nil nil nil nil (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (wf_induction formula-decl nil wf_induction nil) (T formal-type-decl nil measure_induction nil) (M formal-type-decl nil measure_induction nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (< formal-const-decl "(well_founded?[M])" measure_induction nil) (m formal-const-decl "[T -> M]" measure_induction nil)) 154 120 nil nil)))(epsilons)(sets (singleton_TCC1 0 (singleton_TCC1-1 nil 3237052399 3342859027 ("" (skosimp) (("" (expand "singleton?") (("" (inst 1 "x!1") nil nil)) nil)) nil) proved ((singleton? const-decl "bool" sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets nil)) 25 10 nil nil)) (add_TCC1 0 (add_TCC1-1 nil 3237052399 3342859027 ("" (subtype-tcc) nil nil) proved ((T formal-type-decl nil sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 33 30 nil nil)) (choose_TCC1 0 (choose_TCC1-1 nil 3237052399 3342859027 ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 30 30 nil nil)) (choose_TCC2 0 (choose_TCC2-1 nil 3237052399 3342859027 ("" (skolem-typepred) (("" (grind) (("" (rewrite "epsilon_ax[T]") (("1" (inst 1 "x!1") nil nil) ("2" (inst?) nil nil)) nil)) nil)) nil) proved ((empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 68 50 nil nil)) (the_TCC1 0 (the_TCC1-1 nil 3237052399 3342859027 ("" (skolem-typepred) (("" (use "epsilon_ax[T]") (("" (assert) (("" (expand "singleton?") (("" (skosimp*) (("" (inst 1 "x!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (singleton? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 44 40 t nil)) (singleton_elt_TCC1 0 (singleton_elt_TCC1-1 nil 3282864729 3342859027 ("" (subtype-tcc) (("" (typepred "a!1") (("" (expand "singleton?") (("" (skosimp) (("" (inst-cp -1 "x!1") (("" (inst -1 "y!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets nil) (set type-eq-decl nil sets nil) (singleton? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 103 80 t shostak)) (rest_TCC1 0 (rest_TCC1-1 nil 3237052399 3342859027 ("" (skolem!) (("" (flatten) (("" (expand "nonempty?") (("" (propax) nil nil)) nil)) nil)) nil) proved ((nonempty? const-decl "bool" sets nil)) 4 10 nil nil)) (nonempty_singleton 0 (nonempty_singleton-1 nil 3237052399 3342859027 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets nil) (set type-eq-decl nil sets nil) (singleton? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 68 40 nil nil)) (nonempty_union1 0 (nonempty_union1-1 nil 3237052399 3342859027 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (union const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 63 50 nil nil)) (nonempty_union2 0 (nonempty_union2-1 nil 3237052399 3342859027 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (union const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 52 50 nil nil)))(sets_lemmas (extensionality 0 (extensionality-1 nil 3237052399 3342859027 ("" (skolem!) (("" (flatten) (("" (apply-extensionality) (("" (inst?) (("" (expand "member") (("" (iff) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 41 30 nil nil)) (emptyset_is_empty? 0 (emptyset_is_empty?-1 nil 3237052399 3342859027 ("" (skolem!) (("" (expand "empty?") (("" (expand "emptyset") (("" (expand "member") (("" (prop) (("1" (apply-extensionality) (("1" (inst?) nil nil)) nil) ("2" (skolem!) (("2" (replace -1) (("2" (beta) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (FALSE const-decl "bool" booleans nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (emptyset const-decl "set" sets nil)) 52 40 nil nil)) (empty_no_members 0 (empty_no_members-1 nil 3237052399 3342859027 ("" (grind) nil nil) proved ((emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil)) 11 10 nil nil)) (emptyset_min 0 (emptyset_min-1 nil 3237052399 3342859027 ("" (grind) (("" (apply-extensionality) (("" (inst?) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (subset? const-decl "bool" sets nil) (emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil)) 76 50 nil nil)) (nonempty_member 0 (nonempty_member-1 nil 3237052399 3342859028 ("" (tcc) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 73 50 nil nil)) (fullset_member 0 (fullset_member-1 nil 3237052399 3342859028 ("" (grind) nil nil) proved ((fullset const-decl "set" sets nil) (member const-decl "bool" sets nil)) 11 20 nil nil)) (fullset_max 0 (fullset_max-1 nil 3237052399 3342859028 ("" (grind) (("" (apply-extensionality) (("" (inst?) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (fullset const-decl "set" sets nil)) 77 50 nil nil)) (fullset_is_full? 0 (fullset_is_full?-1 nil 3253512686 3342859028 ("" (grind) (("" (apply-extensionality) (("" (inst?) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (fullset const-decl "set" sets nil) (full? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 87 60 t nil)) (nonempty_exists 0 (nonempty_exists-1 nil 3237052399 3342859028 ("" (expand "nonempty?") (("" (expand "empty?") (("" (expand "member") (("" (skosimp*) (("" (split) (("1" (skosimp*) (("1" (inst * "x!1") nil nil)) nil) ("2" (flatten) (("2" (skolem * "x!1") (("2" (inst * "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((empty? const-decl "bool" sets nil) nil nil (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 27 30 nil nil)) (subset_emptyset 0 (subset_emptyset-1 nil 3237052399 3342859028 ("" (grind) nil nil) proved ((emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 18 20 nil nil)) (subset_fullset 0 (subset_fullset-1 nil 3237052399 3342859028 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (fullset const-decl "set" sets nil) (subset? const-decl "bool" sets nil)) 18 20 nil nil)) (subset_reflexive 0 (subset_reflexive-1 nil 3237052399 3342859028 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 45 20 nil nil)) (subset_antisymmetric 0 (subset_antisymmetric-1 nil 3237052399 3342859028 ("" (skosimp) (("" (expand "subset?") (("" (expand "member") (("" (apply-extensionality) (("" (inst?) (("" (inst?) (("" (prop) (("1" (iff) (("1" (prop) nil nil)) nil) ("2" (iff) (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((subset? const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 58 40 nil nil)) (subset_transitive 0 (subset_transitive-1 nil 3237052399 3342859028 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 81 70 nil nil)) (subset_partial_order 0 (subset_partial_order-1 nil 3237052399 3342859028 ("" (expand "partial_order?") (("" (expand "preorder?") (("" (expand "reflexive?") (("" (prop) (("1" (skosimp) (("1" (expand "subset?") (("1" (expand "member") (("1" (skosimp) nil nil)) nil)) nil)) nil) ("2" (expand "transitive?") (("2" (skosimp) (("2" (expand "subset?") (("2" (skosimp) (("2" (inst?) (("2" (inst?) (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "antisymmetric?") (("3" (skosimp) (("3" (expand "subset?") (("3" (apply-extensionality) (("3" (inst?) (("3" (inst?) (("3" (expand "member") (("3" (iff) (("3" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((preorder? const-decl "bool" orders nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (antisymmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil)) 122 90 nil nil)) (subset_is_partial_order 0 (subset_is_partial_order-1 nil 3253512252 3342859029 ("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (partial_order? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (transitive? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 245 210 t nil)) (strict_subset_irreflexive 0 (strict_subset_irreflexive-1 nil 3253512777 3342859029 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (strict_subset? const-decl "bool" sets nil)) 21 20 t nil)) (strict_subset_transitive 0 (strict_subset_transitive-1 nil 3253512783 3342859029 ("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (strict_subset? const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 275 240 t nil)) (strict_subset_strict_order 0 (strict_subset_strict_order-1 nil 3253512806 3342859029 ("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (strict_order? const-decl "bool" orders nil) (transitive? const-decl "bool" relations nil) (/= const-decl "boolean" notequal nil) (irreflexive? const-decl "bool" relations nil) (strict_subset? const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 293 240 t nil)) (strict_subset_is_strict_order 0 (strict_subset_is_strict_order-1 nil 3253512252 3342859030 ("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (strict_order? const-decl "bool" orders nil) (transitive? const-decl "bool" relations nil) (/= const-decl "boolean" notequal nil) (irreflexive? const-decl "bool" relations nil) (strict_subset? const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 295 250 t nil)) (union_idempotent 0 (union_idempotent-1 nil 3237052399 3342859030 ("" (skosimp) (("" (expand "union") (("" (apply-extensionality) (("" (expand "member") (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((union const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 51 30 nil nil)) (union_commutative 0 (union_commutative-1 nil 3237052399 3342859030 ("" (skosimp) (("" (expand "union") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil) proved ((union const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 49 30 nil nil)) (union_associative 0 (union_associative-1 nil 3237052399 3342859030 ("" (skosimp) (("" (expand "union") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((union const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 67 40 nil nil)) (union_empty 0 (union_empty-1 nil 3237052399 3342859030 ("" (skosimp) (("" (expand "union") (("" (apply-extensionality) (("" (expand "member") (("" (expand "emptyset") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((union const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (emptyset const-decl "set" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 31 30 nil nil)) (union_full 0 (union_full-1 nil 3237052399 3342859030 ("" (skosimp) (("" (expand "fullset") (("" (expand "union") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((fullset const-decl "set" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (union const-decl "set" sets nil)) 45 40 nil nil)) (union_subset1 0 (union_subset1-1 nil 3237052399 3342859030 ("" (skosimp) (("" (expand "subset?") (("" (expand "union") (("" (skosimp) (("" (expand "member") (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (union const-decl "set" sets nil)) 38 30 nil nil)) (union_subset2 0 (union_subset2-1 nil 3237052399 3342859030 ("" (skosimp) (("" (expand "subset?") (("" (expand "union") (("" (apply-extensionality) (("" (inst?) (("" (iff) (("" (expand "member") (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((subset? const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (union const-decl "set" sets nil)) 43 40 nil nil)) (union_upper_bound 0 (union_upper_bound-1 nil 3237052399 3342859030 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (union const-decl "set" sets nil)) 104 80 nil nil)) (union_difference 0 (union_difference-1 nil 3237052399 3342859030 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (difference const-decl "set" sets nil) (union const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 91 70 nil nil)) (union_diff_subset 0 (union_diff_subset-1 nil 3237052399 3342859030 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (difference const-decl "set" sets nil) (union const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 120 90 nil nil)) (intersection_idempotent 0 (intersection_idempotent-1 nil 3237052399 3342859030 ("" (skosimp) (("" (expand "intersection") (("" (apply-extensionality) (("" (expand "member") (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 51 40 nil nil)) (intersection_commutative 0 (intersection_commutative-1 nil 3237052399 3342859031 ("" (skosimp) (("" (expand "intersection") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 49 40 nil nil)) (intersection_associative 0 (intersection_associative-1 nil 3237052399 3342859031 ("" (skosimp) (("" (expand "intersection") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 65 40 nil nil)) (intersection_empty 0 (intersection_empty-1 nil 3237052399 3342859031 ("" (skosimp) (("" (expand "intersection") (("" (expand "emptyset") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (FALSE const-decl "bool" booleans nil) (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (emptyset const-decl "set" sets nil)) 33 40 nil nil)) (intersection_full 0 (intersection_full-1 nil 3237052399 3342859031 ("" (skosimp) (("" (expand "intersection") (("" (expand "fullset") (("" (expand "member") (("" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)) 38 20 nil nil)) (intersection_subset1 0 (intersection_subset1-1 nil 3237052399 3342859031 ("" (skosimp) (("" (expand "intersection") (("" (expand "subset?") (("" (skosimp) (("" (expand "member") (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 38 30 nil nil)) (intersection_subset2 0 (intersection_subset2-1 nil 3237052399 3342859031 ("" (skosimp) (("" (expand "intersection") (("" (expand "subset?") (("" (apply-extensionality) (("" (expand "member") (("" (inst?) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (subset? const-decl "bool" sets nil)) 60 40 nil nil)) (intersection_lower_bound 0 (intersection_lower_bound-1 nil 3237052399 3342859031 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (intersection const-decl "set" sets nil)) 103 80 nil nil)) (distribute_intersection_union 0 (distribute_intersection_union-1 nil 3237052399 3342859031 ("" (skosimp) (("" (expand "intersection") (("" (expand "union") (("" (expand "member") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil)) 61 60 nil nil)) (distribute_union_intersection 0 (distribute_union_intersection-1 nil 3237052399 3342859031 ("" (skosimp) (("" (expand "intersection") (("" (expand "union") (("" (expand "member") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil)) 74 60 nil nil)) (complement_emptyset 0 (complement_emptyset-1 nil 3237052399 3342859031 ("" (expand "complement") (("" (expand "emptyset") (("" (expand "fullset") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil) (fullset const-decl "set" sets nil) (complement const-decl "set" sets nil)) 29 10 nil nil)) (complement_fullset 0 (complement_fullset-1 nil 3237052399 3342859031 ("" (expand "complement") (("" (expand "emptyset") (("" (expand "fullset") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil) (fullset const-decl "set" sets nil) (complement const-decl "set" sets nil)) 13 10 nil nil)) (complement_complement 0 (complement_complement-1 nil 3237052399 3342859031 ("" (skosimp) (("" (expand "complement") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((complement const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 47 40 nil nil)) (complement_equal 0 (complement_equal-1 nil 3253512934 3342859031 ("" (grind) (("" (apply-extensionality) (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil) (complement const-decl "set" sets nil) (= const-decl "[T, T -> boolean]" equalities nil)) 141 120 t nil)) (subset_complement 0 (subset_complement-1 nil 3237052399 3342859031 ("" (skosimp) (("" (expand "complement") (("" (expand "subset?") (("" (expand "member") (("" (prop) (("1" (skosimp) (("1" (inst?) (("1" (prop) nil nil)) nil)) nil) ("2" (skosimp) (("2" (inst?) (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((complement const-decl "set" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (subset? const-decl "bool" sets nil)) 53 30 nil nil)) (demorgan1 0 (demorgan1-1 nil 3237052399 3342859032 ("" (grind) (("" (apply-extensionality) (("" (iff) (("" (grind) nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (intersection const-decl "set" sets nil) (union const-decl "set" sets nil) (complement const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 102 90 nil nil)) (demorgan2 0 (demorgan2-1 nil 3237052399 3342859032 ("" (grind) (("" (apply-extensionality) (("" (iff) (("" (grind) nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil) (intersection const-decl "set" sets nil) (complement const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 100 70 nil nil)) (difference_emptyset1 0 (difference_emptyset1-1 nil 3237052399 3342859032 ("" (skosimp) (("" (expand "difference") (("" (expand "emptyset") (("" (expand "member") (("" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (emptyset const-decl "set" sets nil)) 41 30 nil nil)) (difference_emptyset2 0 (difference_emptyset2-1 nil 3237052399 3342859032 ("" (skosimp) (("" (expand "difference") (("" (expand "emptyset") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (member const-decl "bool" sets nil) (emptyset const-decl "set" sets nil)) 15 20 nil nil)) (difference_fullset1 0 (difference_fullset1-1 nil 3237052399 3342859032 ("" (skosimp) (("" (expand "difference") (("" (expand "emptyset") (("" (expand "fullset") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (fullset const-decl "set" sets nil) (member const-decl "bool" sets nil) (emptyset const-decl "set" sets nil)) 19 20 nil nil)) (difference_fullset2 0 (difference_fullset2-1 nil 3237052399 3342859032 ("" (skosimp) (("" (expand "difference") (("" (expand "fullset") (("" (expand "complement") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (complement const-decl "set" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (TRUE const-decl "bool" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (fullset const-decl "set" sets nil)) 55 30 nil nil)) (difference_intersection 0 (difference_intersection-1 nil 3237052399 3342859032 ("" (skosimp) (("" (expand "difference") (("" (expand "intersection") (("" (expand "complement") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (complement const-decl "set" sets nil) (member const-decl "bool" sets nil) (intersection const-decl "set" sets nil)) 38 20 nil nil)) (difference_difference1 0 (difference_difference1-1 nil 3237052399 3342859032 ("" (skosimp) (("" (expand "difference") (("" (expand "member") (("" (expand "union") (("" (expand "member") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (union const-decl "set" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 72 50 nil nil)) (difference_difference2 0 (difference_difference2-1 nil 3237052399 3342859032 ("" (skosimp) (("" (expand "difference") (("" (expand "union") (("" (expand "intersection") (("" (expand "member") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((difference const-decl "set" sets nil) (intersection const-decl "set" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil) (union const-decl "set" sets nil)) 89 70 nil nil)) (difference_subset 0 (difference_subset-1 nil 3237052399 3342859032 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (difference const-decl "set" sets nil) (subset? const-decl "bool" sets nil)) 53 30 nil nil)) (difference_subset2 0 (difference_subset2-1 nil 3253513129 3342859032 ("" (grind) (("" (apply-extensionality) (("" (flatten) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (emptyset const-decl "set" sets nil) (difference const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 93 70 t nil)) (difference_disjoint 0 (difference_disjoint-1 nil 3237052399 3342859032 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (difference const-decl "set" sets nil) (intersection const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (disjoint? const-decl "bool" sets nil)) 52 50 nil nil)) (difference_disjoint2 0 (difference_disjoint2-1 nil 3253513146 3342859033 ("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (difference const-decl "set" sets nil) (disjoint? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (member const-decl "bool" sets nil)) 121 100 t nil)) (diff_union_inter 0 (diff_union_inter-1 nil 3237052399 3342859033 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (intersection const-decl "set" sets nil) (union const-decl "set" sets nil) (difference const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 101 80 nil nil)) (nonempty_add 0 (nonempty_add-1 nil 3237052399 3342859033 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (add const-decl "(nonempty?)" sets nil) (empty? const-decl "bool" sets nil)) 59 50 nil nil)) (member_add 0 (member_add-1 nil 3237052399 3342859033 ("" (skosimp*) (("" (expand "add") (("" (apply-extensionality) (("" (hide 2) (("" (iff) (("" (expand "member") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((add const-decl "(nonempty?)" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 53 30 nil nil)) (member_remove 0 (member_remove-1 nil 3237052399 3342859033 ("" (skosimp*) (("" (apply-extensionality) (("" (hide 3) (("" (expand "remove") (("" (expand "member") (("" (iff) (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil)) 37 40 nil nil)) (add_remove_member 0 (add_remove_member-1 nil 3237052399 3342859033 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil)) 94 80 nil nil)) (remove_add_member 0 (remove_add_member-1 nil 3237052399 3342859033 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil)) 95 90 nil nil)) (subset_add 0 (subset_add-1 nil 3237052399 3342859033 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (add const-decl "(nonempty?)" sets nil) (subset? const-decl "bool" sets nil)) 56 30 nil nil)) (add_as_union 0 (add_as_union-1 nil 3237052399 3342859033 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (union const-decl "set" sets nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (nonempty_union2 application-judgement "(nonempty?)" sets nil)) 100 80 nil nil)) (singleton_as_add 0 (singleton_as_add-1 nil 3237052399 3342859034 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (emptyset const-decl "set" sets nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 89 60 nil nil)) (subset_remove 0 (subset_remove-1 nil 3237052399 3342859034 ("" (grind) nil nil) proved ((/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil) (remove const-decl "set" sets nil) (subset? const-decl "bool" sets nil)) 60 40 nil nil)) (remove_as_difference 0 (remove_as_difference-1 nil 3237052399 3342859034 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (difference const-decl "set" sets nil) (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil)) 101 90 nil nil)) (remove_member_singleton 0 (remove_member_singleton-1 nil 3237052399 3342859034 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (emptyset const-decl "set" sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil)) 69 70 nil nil)) (choose_rest_TCC1 0 (choose_rest_TCC1-1 nil 3237052399 3342859034 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 39 20 nil nil)) (choose_rest 0 (choose_rest-1 nil 3237052399 3342859034 ("" (skosimp*) (("" (apply-extensionality) (("1" (hide 3) (("1" (expand "add") (("1" (hide 2) (("1" (iff) (("1" (split) (("1" (flatten) (("1" (expand "member") (("1" (split) (("1" (assert) nil nil) ("2" (expand "rest") (("2" (expand "remove") (("2" (flatten) (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "member") (("2" (expand "rest") (("2" (expand "remove") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "nonempty?") (("2" (propax) nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (rest const-decl "set" sets nil) (choose const-decl "(p)" sets nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (remove const-decl "set" sets nil) (member const-decl "bool" sets nil)) 85 50 nil nil)) (choose_member 0 (choose_member-1 nil 3237052399 3342859034 ("" (grind) (("" (rewrite "epsilon_ax[T]") (("1" (inst?) nil nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil) proved ((TRUE const-decl "bool" booleans nil) (epsilon_ax formula-decl nil epsilons nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (choose const-decl "(p)" sets nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 77 60 nil nil)) (choose_not_member 0 (choose_not_member-1 nil 3237052399 3342859034 ("" (skosimp*) (("" (expand "member") (("" (expand "rest") (("" (assert) (("" (expand "remove") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (remove const-decl "set" sets nil) (rest const-decl "set" sets nil)) 22 20 nil nil)) (rest_not_equal 0 (rest_not_equal-1 nil 3237052399 3342859034 ("" (skosimp) (("" (expand "rest") (("" (replace 1) (("" (expand "remove") (("" (expand "empty?") (("" (skosimp) (("" (expand "member") (("" (typepred "choose(a!1)") (("1" (replace -3 -1 :dir rl) (("1" (beta) (("1" (flatten) (("1" (replace -2) (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((rest const-decl "set" sets nil) (remove const-decl "set" sets nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)) 82 60 nil nil)) (rest_member 0 (rest_member-1 nil 3237052399 3342859034 ("" (tcc :defs !) nil nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (rest const-decl "set" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil)) 77 60 nil nil)) (rest_subset 0 (rest_subset-1 nil 3237052399 3342859034 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (rest const-decl "set" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil) (subset? const-decl "bool" sets nil)) 67 60 nil nil)) (choose_add 0 (choose_add-1 nil 3237052399 3342859034 ("" (grind) (("" (typepred " choose(add(x!1, a!1))") (("" (expand "add" -1 1) (("" (expand "member") (("" (expand "choose") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (member const-decl "bool" sets nil) (choose const-decl "(p)" sets nil)) 71 50 nil nil)) (choose_rest_or_TCC1 0 (choose_rest_or_TCC1-1 nil 3237052399 3342859035 ("" (tcc :defs !) nil nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (rest const-decl "set" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil)) 79 70 nil nil)) (choose_rest_or 0 (choose_rest_or-1 nil 3237052399 3342859035 ("" (tcc :defs !) nil nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (rest const-decl "set" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil)) 64 60 nil nil)) (choose_singleton 0 (choose_singleton-1 nil 3237052399 3342859035 ("" (skosimp*) (("" (typepred "choose(singleton(x!1))") (("1" (expand "singleton") (("1" (propax) nil nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil) proved ((choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 40 10 nil nil)) (rest_singleton 0 (rest_singleton-1 nil 3237052399 3342859035 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (expand "rest") (("" (expand "singleton") (("" (expand "remove") (("" (lift-if) (("" (expand "emptyset") (("" (prop) (("1" (expand "empty?") (("1" (inst -1 "x!1") (("1" (expand "member") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (expand "member") (("2" (expand "choose") (("2" (use "epsilon_ax[T]") (("1" (assert) nil nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (emptyset const-decl "set" sets nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (rest const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (TRUE const-decl "bool" booleans nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (choose const-decl "(p)" sets nil) (remove const-decl "set" sets nil)) 102 80 nil nil)) (singleton_subset 0 (singleton_subset-1 nil 3237052399 3342859035 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (subset? const-decl "bool" sets nil)) 64 50 nil nil)) (rest_empty_lem 0 (rest_empty_lem-1 nil 3237052399 3342859035 ("" (skosimp*) (("" (expand "extend") (("" (apply-extensionality) (("1" (hide 3) (("1" (lift-if) (("1" (expand "singleton") (("1" (expand "empty?") (("1" (skosimp*) (("1" (expand "member") (("1" (split) (("1" (flatten) (("1" (typepred "choose(a!1)") (("1" (inst -4 "x!1") (("1" (expand "rest") (("1" (expand "remove") (("1" (expand "member") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "nonempty?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((extend const-decl "R" extend nil) (NOT const-decl "[bool -> bool]" booleans nil) (rest const-decl "set" sets nil) (remove const-decl "set" sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) nil (set type-eq-decl nil sets nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (singleton? const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (choose const-decl "(p)" sets nil) (FALSE const-decl "bool" booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 129 90 nil nil)) (singleton_disjoint 0 (singleton_disjoint-1 nil 3237052399 3342859035 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (intersection const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (disjoint? const-decl "bool" sets nil)) 55 50 nil nil)) (disjoint_remove_left 0 (disjoint_remove_left-1 nil 3237052399 3342859035 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (disjoint? const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil)) 97 80 nil nil)) (disjoint_remove_right 0 (disjoint_remove_right-1 nil 3237052399 3342859035 ("" (grind) nil nil) proved ((T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (disjoint? const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (remove const-decl "set" sets nil)) 94 80 nil nil)) (union_disj_remove_left 0 (union_disj_remove_left-1 nil 3237052399 3342859036 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (remove const-decl "set" sets nil) (union const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (T formal-type-decl nil sets_lemmas nil) (disjoint? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (member const-decl "bool" sets nil)) 158 130 nil nil)) (union_disj_remove_right 0 (union_disj_remove_right-1 nil 3237052399 3342859036 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (remove const-decl "set" sets nil) (union const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (T formal-type-decl nil sets_lemmas nil) (disjoint? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (member const-decl "bool" sets nil)) 145 120 nil nil)) (subset_powerset 0 (subset_powerset-1 nil 3237053513 3342859036 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (powerset const-decl "setofsets" sets nil)) 26 30 t shostak)) (empty_powerset 0 (empty_powerset-1 nil 3237053527 3342859036 ("" (grind :if-match nil) (("1" (inst 1 "emptyset") (("1" (skolem-typepred) (("1" (grind :if-match nil) (("1" (apply-extensionality) (("1" (inst -2 "x!1") (("1" (inst -3 "x!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (inst-cp -3 "emptyset") (("1" (inst -3 "a!1") (("1" (replace -3 :hide? t) (("1" (decompose-equality) (("1" (hide -2) (("1" (inst -1 "x!1") (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (emptyset const-decl "set" sets nil) nil (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (subset? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (set type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (singleton? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 294 230 t shostak)) (powerset_emptyset 0 (powerset_emptyset-1 nil 3253513380 3342859036 ("" (grind) nil nil) proved ((emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (powerset const-decl "setofsets" sets nil)) 28 30 t nil)) (nonempty_powerset 0 (nonempty_powerset-1 nil 3237054070 3342859036 ("" (grind :if-match nil) (("" (inst -1 "emptyset") (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (emptyset const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (powerset const-decl "setofsets" sets nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 81 70 t shostak)) (powerset_union 0 (powerset_union-1 nil 3253513413 3342859036 ("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (powerset const-decl "setofsets" sets nil) (Union const-decl "set" sets nil) (set type-eq-decl nil sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) nil (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (NOT const-decl "[bool -> bool]" booleans nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (nonempty_powerset application-judgement "(nonempty?[set[T]])" sets_lemmas nil)) 137 120 t nil)) (powerset_intersection 0 (powerset_intersection-2 "" 3342855850 3342859036 ("" (grind :if-match nil) (("" (inst -1 "emptyset") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) proved ((subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (nonempty_powerset application-judgement "(nonempty?[set[T]])" sets_lemmas nil) nil (emptyset const-decl "set" sets nil) (set type-eq-decl nil sets nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (subset? const-decl "bool" sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (Intersection const-decl "set" sets nil)) 104 90 t shostak) (powerset_intersection-1 nil 3253513443 3307982240 ("" (grind) (("" (inst -1 "emptyset") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) proved ((subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (nonempty_powerset application-judgement "(nonempty?[set[T]])" sets_lemmas nil) nil (emptyset const-decl "set" sets nil) (set type-eq-decl nil sets nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (subset? const-decl "bool" sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (Intersection const-decl "set" sets nil)) 198 140 t nil)) (powerset_subset 0 (powerset_subset-1 nil 3253513517 3342859037 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (setof type-eq-decl nil defined_types nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (powerset const-decl "setofsets" sets nil)) 138 110 t nil)) (Union_empty 0 (Union_empty-1 nil 3253513523 3342859037 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (Union const-decl "set" sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) nil) 167 140 t nil)) (Union_full 0 (Union_full-1 nil 3253513528 3342859037 ("" (grind) nil nil) proved ((Union const-decl "set" sets nil) (member const-decl "bool" sets nil) (full? const-decl "bool" sets nil)) 27 30 t nil)) (Union_subset 0 (Union_subset-1 nil 3253513533 3342859037 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (Union const-decl "set" sets nil) (subset? const-decl "bool" sets nil)) 64 40 t nil)) (Union_surjective 0 (Union_surjective-1 nil 3253512260 3342859037 ("" (grind) (("" (inst 1 "powerset(y!1)") (("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (set type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (Union const-decl "set" sets nil) nil (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (NOT const-decl "[bool -> bool]" booleans nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (nonempty_powerset application-judgement "(nonempty?[set[T]])" sets_lemmas nil) (surjective? const-decl "bool" functions nil)) 177 130 t nil)) (Intersection_empty 0 (Intersection_empty-1 nil 3253513663 3342859037 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (T formal-type-decl nil sets_lemmas nil) (Intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)) 115 110 t nil)) (Intersection_full 0 (Intersection_full-1 nil 3253513669 3342859037 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (Intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (full? const-decl "bool" sets nil) nil) 105 90 t nil)) (Intersection_empty_full 0 (Intersection_empty_full-1 nil 3253513675 3342859037 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (set type-eq-decl nil sets nil) (emptyset const-decl "set" sets nil) (Intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (full? const-decl "bool" sets nil)) 55 40 t nil)) (Intersection_surjective 0 (Intersection_surjective-1 nil 3253512260 3342859038 ("" (grind) (("" (inst 1 "singleton(y!1)") (("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (set type-eq-decl nil sets nil) (singleton? const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (Intersection const-decl "set" sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (surjective? const-decl "bool" functions nil)) 132 110 t nil)) (Complement_empty 0 (Complement_empty-1 nil 3253513724 3342859038 ("" (grind :if-match nil) (("1" (inst -1 "complement(x!1)") (("1" (inst 1 "x!1") nil nil)) nil) ("2" (inst -3 "b!1") nil nil)) nil) proved ((complement const-decl "set" sets nil) (set type-eq-decl nil sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (Complement const-decl "setofsets[T]" sets_lemmas nil)) 101 80 t nil)) (Complement_full 0 (Complement_full-1 nil 3253514020 3342859038 ("" (grind :if-match nil) (("1" (inst - "complement(x!1)") (("1" (skolem!) (("1" (rewrite "complement_equal") nil nil)) nil)) nil) ("2" (inst - "complement(x!1)") (("2" (inst + "complement(x!1)") (("2" (use "complement_complement[T]") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((complement_complement formula-decl nil sets_lemmas nil) nil nil (T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (setof type-eq-decl nil defined_types nil) (set type-eq-decl nil sets nil) (complement const-decl "set" sets nil) (setofsets type-eq-decl nil sets nil) (complement_equal formula-decl nil sets_lemmas nil) (full? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (Complement const-decl "setofsets[T]" sets_lemmas nil)) 129 90 t nil)) (Complement_Complement 0 (Complement_Complement-1 nil 3253514589 3342859038 ("" (skolem!) (("" (expand "Complement") (("" (apply-extensionality :hide? t) (("" (smash) (("1" (skosimp* :preds? t) (("1" (use "complement_complement[T]") (("1" (assert) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (inst + "complement(x!1)") (("1" (use "complement_complement[T]") (("1" (assert) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((Complement const-decl "setofsets[T]" sets_lemmas nil) (complement_complement formula-decl nil sets_lemmas nil) (NOT const-decl "[bool -> bool]" booleans nil) nil nil (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (complement const-decl "set" sets nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil)) 96 80 t nil)) (subset_Complement 0 (subset_Complement-1 nil 3253515065 3342859038 ("" (grind :if-match nil) (("1" (inst - "complement(x!1)") (("1" (split) (("1" (skolem!) (("1" (rewrite "complement_equal") nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst - "b!1") (("2" (assert) (("2" (inst + "b!1") nil nil)) nil)) nil)) nil) proved ((complement const-decl "set" sets nil) (set type-eq-decl nil sets nil) (complement_equal formula-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil sets_lemmas nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (Complement const-decl "setofsets[T]" sets_lemmas nil)) 156 130 t nil)) (Complement_bijective 0 (Complement_bijective-1 nil 3253512260 3342859038 ("" (expand* "bijective?" "injective?" "surjective?") (("" (split) (("1" (skosimp) (("1" (lemma "Complement_Complement") (("1" (inst-cp - "x2!1") (("1" (inst - "x1!1") (("1" (assert) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst + "Complement(y!1)") (("2" (use "Complement_Complement") nil nil)) nil)) nil)) nil)) nil) proved ((Complement_Complement formula-decl nil sets_lemmas nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil sets_lemmas nil) (Complement const-decl "setofsets[T]" sets_lemmas nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil)) 53 40 t nil)) (Demorgan1 0 (Demorgan1-1 nil 3253515330 3342859039 ("" (skolem!) (("" (apply-extensionality :hide? t) (("" (grind :if-match nil) (("1" (inst?) nil nil) ("2" (inst - "complement(a!1)") (("1" (expand* "complement" "member") nil nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (Complement const-decl "setofsets[T]" sets_lemmas nil) (Intersection const-decl "set" sets nil) (Union const-decl "set" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (complement const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (Union_surjective name-judgement "(surjective?[setofsets[T], set[T]])" sets_lemmas nil) (Intersection_surjective name-judgement "(surjective?[setofsets[T], set[T]])" sets_lemmas nil) (Complement_bijective name-judgement "(bijective?[setofsets[T], setofsets[T]])" sets_lemmas nil) nil (= const-decl "[T, T -> boolean]" equalities nil) nil (NOT const-decl "[bool -> bool]" booleans nil) (member const-decl "bool" sets nil)) 172 130 t nil)) (Demorgan2 0 (Demorgan2-1 nil 3253515430 3342859039 ("" (skolem!) (("" (apply-extensionality :hide? t) (("" (grind :if-match nil) (("1" (inst + "complement(a!1)") (("1" (expand* "complement" "member") nil nil) ("2" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (Complement const-decl "setofsets[T]" sets_lemmas nil) (Union const-decl "set" sets nil) (Intersection const-decl "set" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (complement const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (Intersection_surjective name-judgement "(surjective?[setofsets[T], set[T]])" sets_lemmas nil) (Union_surjective name-judgement "(surjective?[setofsets[T], set[T]])" sets_lemmas nil) (Complement_bijective name-judgement "(bijective?[setofsets[T], setofsets[T]])" sets_lemmas nil) nil (= const-decl "[T, T -> boolean]" equalities nil) nil (NOT const-decl "[bool -> bool]" booleans nil) (member const-decl "bool" sets nil)) 171 140 t nil)))(function_inverse_def (left_inverse_is_inverse 0 (left_inverse_is_inverse-1 nil 3252428734 3342859039 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (R formal-type-decl nil function_inverse_def nil) (D formal-type-decl nil function_inverse_def nil) (left_inverse? const-decl "bool" function_inverse_def nil) (inverse? const-decl "bool" function_inverse_def nil)) 59 50 t shostak)) (left_inj_surj 0 (left_inj_surj-1 nil 3252428739 3342859039 ("" (grind :if-match all) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (R formal-type-decl nil function_inverse_def nil) (D formal-type-decl nil function_inverse_def nil) (left_inverse? const-decl "bool" function_inverse_def nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil)) 122 100 t shostak)) (inj_left_alt 0 (inj_left_alt-1 nil 3253554040 3342859039 ("" (grind :if-match all) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil function_inverse_def nil) (R formal-type-decl nil function_inverse_def nil) (injective? const-decl "bool" functions nil) (inverse? const-decl "bool" function_inverse_def nil) (left_inverse? const-decl "bool" function_inverse_def nil)) 110 90 t shostak)) (surj_inv_alt 0 (surj_inv_alt-1 nil 3253554148 3342859039 ("" (skolem!) (("" (use "inj_left_alt") (("" (use "left_inj_surj") (("" (flatten) nil nil)) nil)) nil)) nil) proved ((inj_left_alt formula-decl nil function_inverse_def nil) (injective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (R formal-type-decl nil function_inverse_def nil) (D formal-type-decl nil function_inverse_def nil) (inverse? const-decl "bool" function_inverse_def nil) nil nil (left_inverse? const-decl "bool" function_inverse_def nil) (left_inj_surj formula-decl nil function_inverse_def nil)) 51 40 t shostak)) (injective_inverse_alt 0 (injective_inverse_alt-1 nil 3253554196 3342859039 ("" (grind :if-match all) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil function_inverse_def nil) (R formal-type-decl nil function_inverse_def nil) (injective? const-decl "bool" functions nil) (inverse? const-decl "bool" function_inverse_def nil)) 125 100 t shostak)) (comp_inverse_left_inj_alt 0 (comp_inverse_left_inj_alt-1 nil 3253554225 3342859039 ("" (grind :if-match all) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil function_inverse_def nil) (R formal-type-decl nil function_inverse_def nil) (injective? const-decl "bool" functions nil) (inverse? const-decl "bool" function_inverse_def nil)) 107 80 t shostak)) (noninjective_inverse_exists 0 (noninjective_inverse_exists-1 nil 3252428875 3342859039 ("" (skosimp) (("" (inst + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (expand "inverse?") (("1" (skosimp*) (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (expand "injective?") (("2" (skosimp) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((TRUE const-decl "bool" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (D formal-type-decl nil function_inverse_def nil) (R formal-type-decl nil function_inverse_def nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon_ax formula-decl nil epsilons nil) (inverse? const-decl "bool" function_inverse_def nil) (injective? const-decl "bool" functions nil)) 73 50 t shostak)) (right_inverse_is_inverse 0 (right_inverse_is_inverse-1 nil 3252429153 3342859040 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (R formal-type-decl nil function_inverse_def nil) (D formal-type-decl nil function_inverse_def nil) (right_inverse? const-decl "bool" function_inverse_def nil) (inverse? const-decl "bool" function_inverse_def nil)) 39 40 t shostak)) (right_surj_inj 0 (right_surj_inj-1 nil 3252429158 3342859040 ("" (grind :if-match all) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (R formal-type-decl nil function_inverse_def nil) (D formal-type-decl nil function_inverse_def nil) (right_inverse? const-decl "bool" function_inverse_def nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil)) 135 100 t shostak)) (surj_right_alt 0 (surj_right_alt-1 nil 3253554259 3342859040 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil function_inverse_def nil) (R formal-type-decl nil function_inverse_def nil) (surjective? const-decl "bool" functions nil) (inverse? const-decl "bool" function_inverse_def nil) (right_inverse? const-decl "bool" function_inverse_def nil)) 84 60 t shostak)) (inj_inv_alt 0 (inj_inv_alt-1 nil 3253554287 3342859040 ("" (skolem!) (("" (use "surj_right_alt") (("" (use "right_surj_inj") (("" (flatten) nil nil)) nil)) nil)) nil) proved ((surj_right_alt formula-decl nil function_inverse_def nil) (surjective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (R formal-type-decl nil function_inverse_def nil) (D formal-type-decl nil function_inverse_def nil) (inverse? const-decl "bool" function_inverse_def nil) nil nil (right_inverse? const-decl "bool" function_inverse_def nil) (right_surj_inj formula-decl nil function_inverse_def nil)) 36 30 t shostak)) (surjective_inverse_alt 0 (surjective_inverse_alt-1 nil 3253555867 3342859040 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil function_inverse_def nil) (R formal-type-decl nil function_inverse_def nil) (surjective? const-decl "bool" functions nil) (inverse? const-decl "bool" function_inverse_def nil)) 102 60 t shostak)) (comp_inverse_right_surj_alt 0 (comp_inverse_right_surj_alt-1 nil 3253554365 3342859040 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil function_inverse_def nil) (R formal-type-decl nil function_inverse_def nil) (surjective? const-decl "bool" functions nil) (inverse? const-decl "bool" function_inverse_def nil)) 66 60 t shostak)) (surjective_inverse_exists 0 (surjective_inverse_exists-1 nil 3252429210 3342859040 ("" (skolem-typepred) (("" (expand "surjective?") (("" (inst + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (expand "inverse?") (("1" (skosimp*) (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst - "r!1") (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((inverse? const-decl "bool" function_inverse_def nil) (epsilon_ax formula-decl nil epsilons nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (TRUE const-decl "bool" booleans nil) (surjective? const-decl "bool" functions nil) (R formal-type-decl nil function_inverse_def nil) (D formal-type-decl nil function_inverse_def nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 89 60 t shostak)) (left_right_bij 0 (left_right_bij-1 nil 3252429300 3342859040 ("" (skosimp) (("" (use "left_inj_surj") (("" (use "right_surj_inj") (("" (expand "bijective?") (("" (prop) nil nil)) nil)) nil)) nil)) nil) proved ((left_inj_surj formula-decl nil function_inverse_def nil) (R formal-type-decl nil function_inverse_def nil) (D formal-type-decl nil function_inverse_def nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (left_inverse? const-decl "bool" function_inverse_def nil) nil nil (bijective? const-decl "bool" functions nil) (right_inverse? const-decl "bool" function_inverse_def nil) (right_surj_inj formula-decl nil function_inverse_def nil)) 49 50 t shostak)) (bij_left_right 0 (bij_left_right-1 nil 3252429361 3342859040 ("" (skolem!) (("" (use "inj_left_alt") (("" (use "surj_right_alt") (("" (assert) nil nil)) nil)) nil)) nil) proved ((inj_left_alt formula-decl nil function_inverse_def nil) (inverse? const-decl "bool" function_inverse_def nil) (bijective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (R formal-type-decl nil function_inverse_def nil) (D formal-type-decl nil function_inverse_def nil) (surjective? const-decl "bool" functions nil) (surj_right_alt formula-decl nil function_inverse_def nil)) 41 20 t shostak)) (bij_inv_is_bij_alt 0 (bij_inv_is_bij_alt-1 nil 3253554448 3342859040 ("" (skolem!) (("" (use "surj_inv_alt") (("" (use "inj_inv_alt") (("" (expand "bijective?") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((surj_inv_alt formula-decl nil function_inverse_def nil) (bijective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (R formal-type-decl nil function_inverse_def nil) (D formal-type-decl nil function_inverse_def nil) (inverse? const-decl "bool" function_inverse_def nil) (surjective? const-decl "bool" functions nil) (inj_inv_alt formula-decl nil function_inverse_def nil)) 55 30 t shostak)) (bijective_inverse_alt 0 (bijective_inverse_alt-1 nil 3253554490 3342859040 ("" (skolem!) (("" (use "injective_inverse_alt") (("" (use "surjective_inverse_alt") (("" (prop) nil nil)) nil)) nil)) nil) proved ((injective_inverse_alt formula-decl nil function_inverse_def nil) (inverse? const-decl "bool" function_inverse_def nil) (bijective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (R formal-type-decl nil function_inverse_def nil) (D formal-type-decl nil function_inverse_def nil) (surjective? const-decl "bool" functions nil) (surjective_inverse_alt formula-decl nil function_inverse_def nil)) 34 40 t shostak)) (comp_inverse_right_alt 0 (comp_inverse_right_alt-1 nil 3253556090 3342859040 ("" (skolem!) (("" (use "comp_inverse_right_surj_alt") nil nil)) nil) proved ((R formal-type-decl nil function_inverse_def nil) (D formal-type-decl nil function_inverse_def nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (inverse? const-decl "bool" function_inverse_def nil) (comp_inverse_right_surj_alt formula-decl nil function_inverse_def nil)) 30 10 t shostak)) (comp_inverse_left_alt 0 (comp_inverse_left_alt-1 nil 3253556119 3342859040 ("" (skolem!) (("" (use "comp_inverse_left_inj_alt") nil nil)) nil) proved ((D formal-type-decl nil function_inverse_def nil) (R formal-type-decl nil function_inverse_def nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (injective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (inverse? const-decl "bool" function_inverse_def nil) (comp_inverse_left_inj_alt formula-decl nil function_inverse_def nil)) 18 10 t shostak)) (bijective_inverse_exists 0 (bijective_inverse_exists-1 nil 3252429536 3342859041 ("" (skolem-typepred) (("" (expand "exists1") (("" (split) (("1" (inst + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (expand "inverse?") (("1" (skosimp*) (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (expand* "bijective?" "surjective?") (("2" (skosimp) (("2" (inst - "r!1") (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "unique?") (("2" (skosimp) (("2" (apply-extensionality :hide? t) (("2" (grind :if-match nil) (("2" (inst - "x!2") (("2" (inst - "x!2") (("2" (inst - "x!2") (("2" (skolem!) (("2" (smash) (("1" (inst - "x!1(x!2)" "y!1(x!2)") (("1" (assert) nil nil)) nil) ("2" (inst? +) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((exists1 const-decl "bool" exists1 nil) (unique? const-decl "bool" exists1 nil) (injective? const-decl "bool" functions nil) (TRUE const-decl "bool" booleans nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon_ax formula-decl nil epsilons nil) (inverse? const-decl "bool" function_inverse_def nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (R formal-type-decl nil function_inverse_def nil) (D formal-type-decl nil function_inverse_def nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 287 250 t shostak)) (exists_inv1 0 (exists_inv1-1 nil 3253986702 3342859041 ("" (prop) (("1" (skosimp*) (("1" (inst 1 "g!1(r!1)") nil nil)) nil) ("2" (skosimp*) (("2" (inst 1 "LAMBDA r: epsilon! d: TRUE") (("2" (skosimp*) (("2" (inst 1 "d!1") nil nil)) nil)) nil)) nil) ("3" (inst 1 "LAMBDA r: epsilon! d: TRUE") (("3" (skosimp*) (("3" (inst -1 "r!1") nil nil)) nil)) nil)) nil) proved ((TRUE const-decl "bool" booleans nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (R formal-type-decl nil function_inverse_def nil) (D formal-type-decl nil function_inverse_def nil)) 47 20 t shostak)) (exists_inv2 0 (exists_inv2-1 nil 3253986940 3342859041 ("" (prop) (("" (skosimp*) (("" (typepred "f!1") (("" (expand "surjective?") (("" (inst -1 "r!1") (("" (skosimp*) (("" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil function_inverse_def nil) (R formal-type-decl nil function_inverse_def nil) (surjective? const-decl "bool" functions nil)) 35 20 t shostak)) (exists_inv3 0 (exists_inv3-1 nil 3253986970 3342859041 ("" (prop) (("" (skosimp*) (("" (expand "injective?") (("" (skosimp*) (("" (inst 2 "x1!1") nil nil)) nil)) nil)) nil)) nil) proved ((D formal-type-decl nil function_inverse_def nil) (injective? const-decl "bool" functions nil)) 19 20 t nil)))(function_inverse (unique_bijective_inverse 0 (unique_bijective_inverse-1 nil 3237052399 3342859041 ("" (skolem-typepred) (("" (grind :if-match nil) (("" (inst? -2) (("" (skosimp) (("" (replace -2 :dir rl) (("" (use "epsilon_ax[D]") (("" (split) (("1" (propax) nil nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((inverse const-decl "D" function_inverse nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (bijective? const-decl "bool" functions nil) (R formal-type-decl nil function_inverse nil) (D formal-nonempty-type-decl nil function_inverse nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 107 90 nil nil)) (bijective_inverse_is_bijective 0 (bijective_inverse_is_bijective-1 nil 3237052399 3342859041 ("" (skolem-typepred) (("" (grind :if-match nil) (("1" (inst 1 "f!1(y!1)") (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (split) (("1" (inst? -2) (("1" (assert) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (use "epsilon_ax[D]") (("2" (split) (("1" (lemma "epsilon_ax[D]") (("1" (inst -1 "lambda (x: D): f!1(x) = x2!1") (("1" (split) (("1" (assert) nil nil) ("2" (inst -3 "x2!1") nil nil)) nil)) nil)) nil) ("2" (inst -2 "x1!1") nil nil)) nil)) nil)) nil)) nil) proved ((inverse const-decl "D" function_inverse nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon const-decl "T" epsilons nil) (bijective? const-decl "bool" functions nil) (R formal-type-decl nil function_inverse nil) (D formal-nonempty-type-decl nil function_inverse nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 246 210 nil nil)) (surjective_inverse 0 (surjective_inverse-1 nil 3253556988 3342859041 ("" (skosimp) (("" (expand "inverse") (("" (lemma "epsilon_ax[D]") (("" (inst -1 "LAMBDA (x:D): f!1(x) = y!1") (("" (prop) (("1" (replace -2) (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil) ("2" (typepred "f!1") (("2" (expand "surjective?") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((inverse const-decl "D" function_inverse nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (R formal-type-decl nil function_inverse nil) (= const-decl "[T, T -> boolean]" equalities nil) (surjective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (epsilon_ax formula-decl nil epsilons nil) (D formal-nonempty-type-decl nil function_inverse nil)) 44 30 t shostak)) (inverse_surjective 0 (inverse_surjective-1 nil 3299953777 3342859041 ("" (skosimp) (("" (use "surjective_inverse") (("" (assert) nil nil)) nil)) nil) proved ((surjective_inverse formula-decl nil function_inverse nil) (surjective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (inverse const-decl "D" function_inverse nil) (R formal-type-decl nil function_inverse nil) (D formal-nonempty-type-decl nil function_inverse nil)) 27 30 t shostak)) (injective_inverse 0 (injective_inverse-1 nil 3237052399 3342859042 ("" (skosimp) (("" (expand "inverse") (("" (typepred "f!1") (("" (expand "injective?") (("" (lemma "epsilon_ax[D]") (("" (inst -1 "LAMBDA (x:D): f!1(x) = y!1") (("" (prop) (("1" (replace -3) (("1" (inst?) (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (inst?) (("2" (replace -2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((inverse const-decl "D" function_inverse nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (epsilon_ax formula-decl nil epsilons nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (injective? const-decl "bool" functions nil)) 57 30 nil nil)) (inverse_injective 0 (inverse_injective-1 nil 3299953859 3342859042 ("" (skosimp) (("" (use "injective_inverse") nil nil)) nil) proved ((D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (injective? const-decl "bool" functions nil) (injective_inverse formula-decl nil function_inverse nil)) 11 10 t shostak)) (bijective_inverse 0 (bijective_inverse-1 nil 3237052399 3342859042 ("" (skosimp) (("" (split) (("1" (rewrite "surjective_inverse") (("1" (typepred "f!1") (("1" (expand "bijective?") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (rewrite "injective_inverse") (("2" (typepred "f!1") (("2" (expand "bijective?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (R formal-type-decl nil function_inverse nil) (D formal-nonempty-type-decl nil function_inverse nil) (surjective_inverse formula-decl nil function_inverse nil) (injective? const-decl "bool" functions nil) (injective_inverse formula-decl nil function_inverse nil)) 33 30 nil nil)) (bij_inv_is_bij 0 (bij_inv_is_bij-1 nil 3237052399 3342859042 ("" (skosimp*) (("" (expand "bijective?") (("" (expand "injective?") (("" (expand "surjective?") (("" (flatten) (("" (split) (("1" (skosimp*) (("1" (lemma "bijective_inverse") (("1" (inst?) (("1" (assert) (("1" (expand "inverse" -1) (("1" (lemma "epsilon_ax[D]") (("1" (inst?) (("1" (split) (("1" (assert) nil nil) ("2" (inst -4 "x2!1") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "bijective?") (("2" (expand "injective?") (("2" (assert) (("2" (replace -2) (("2" (expand "surjective?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst 1 "f!1(y!1)") (("2" (rewrite "injective_inverse") (("2" (expand "injective?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective_inverse formula-decl nil function_inverse nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (inverse const-decl "D" function_inverse nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) nil (injective_inverse formula-decl nil function_inverse nil) (injective? const-decl "bool" functions nil)) 128 100 nil nil)) (surj_right 0 (surj_right-1 nil 3237052399 3342859042 ("" (grind) (("" (lemma "epsilon_ax[D]") (("" (inst?) (("" (split) (("1" (propax) nil nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (D formal-nonempty-type-decl nil function_inverse nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (= const-decl "[T, T -> boolean]" equalities nil) (R formal-type-decl nil function_inverse nil) (right_inverse? const-decl "bool" function_inverse_def nil) (inverse const-decl "D" function_inverse nil) (surjective? const-decl "bool" functions nil)) 135 120 nil nil)) (inj_left 0 (inj_left-1 nil 3237052399 3342859042 ("" (skosimp) (("" (prop) (("1" (grind) (("1" (lemma "epsilon_ax[D]") (("1" (inst?) (("1" (assert) (("1" (inst 1 "d!1") nil nil)) nil)) nil)) nil)) nil) ("2" (expand "left_inverse?") (("2" (expand "inverse") (("2" (expand "injective?") (("2" (skosimp) (("2" (inst-cp -1 "x1!1") (("2" (inst -1 "x2!1") (("2" (assert) (("2" (replace -3) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (D formal-nonempty-type-decl nil function_inverse nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (R formal-type-decl nil function_inverse nil) (= const-decl "[T, T -> boolean]" equalities nil) (left_inverse? const-decl "bool" function_inverse_def nil) (inverse const-decl "D" function_inverse nil) (injective? const-decl "bool" functions nil)) 144 100 t nil)) (inj_inv 0 (inj_inv-1 nil 3237052399 3342859042 ("" (skosimp) (("" (expand "surjective?") (("" (expand "injective?") (("" (expand "inverse") (("" (skosimp) (("" (inst-cp -1 "x1!1") (("" (inst -1 "x2!1") (("" (skosimp) (("" (skosimp) (("" (lemma "epsilon_ax[D]") (("" (inst-cp -1 "LAMBDA (x:D): f!1(x)=x1!1") (("" (inst -1 "LAMBDA (x:D): f!1(x)=x2!1") (("" (prop) (("1" (replace -5) (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil) ("2" (inst?) nil nil) ("3" (inst?) nil nil) ("4" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((surjective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil) (R formal-type-decl nil function_inverse nil) (epsilon_ax formula-decl nil epsilons nil) (D formal-nonempty-type-decl nil function_inverse nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (injective? const-decl "bool" functions nil)) 83 70 nil nil)) (surj_inv 0 (surj_inv-1 nil 3237052399 3342859042 ("" (skosimp) (("" (expand "surjective?") (("" (expand "injective?") (("" (skosimp) (("" (expand "inverse") (("" (inst -1 "y!1" _) (("" (inst 1 "f!1(y!1)") (("" (inst -1 "(epsilon ! (x_5: D): f!1(x_5) = f!1(y!1))") (("" (prop) (("1" (replace -1) (("1" (replace -1 :dir rl) (("1" (replace -1 :dir rl) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (lemma "epsilon_ax[D]") (("2" (inst?) (("2" (prop) (("1" (replace -1) (("1" (propax) nil nil)) nil) ("2" (inst 1 "y!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((surjective? const-decl "bool" functions nil) (D formal-nonempty-type-decl nil function_inverse nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon_ax formula-decl nil epsilons nil) (R formal-type-decl nil function_inverse nil) (inverse const-decl "D" function_inverse nil) (injective? const-decl "bool" functions nil)) 64 50 nil nil)) (inv_inj_is_surj 0 (inv_inj_is_surj-1 nil 3237052399 3342859042 ("" (grind :if-match nil) (("" (inst 1 "f!1(y!1)") (("" (inst? -1) (("" (assert) (("" (lemma "epsilon_ax[D]") (("" (inst?) (("" (assert) (("" (inst 1 "y!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil)) 99 80 nil nil)) (inv_surj_is_inj 0 (inv_surj_is_inj-1 nil 3237052399 3342859043 ("" (grind :if-match nil) (("" (inst-cp -1 "x1!1") (("" (inst -1 "x2!1") (("" (skosimp*) (("" (lemma "epsilon_ax[D]") (("" (lemma "epsilon_ax[D]") (("" (inst?) (("" (inst -2 "LAMBDA (x: D): f!1(x) = x2!1") (("" (assert) (("" (prop) (("1" (assert) nil nil) ("2" (inst 1 "x!1") nil nil) ("3" (inst 1 "x!2") nil nil) ("4" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon_ax formula-decl nil epsilons nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil)) 142 100 nil nil)) (comp_inverse_right_surj 0 (comp_inverse_right_surj-1 nil 3237052399 3342859043 ("" (grind :if-match nil) (("" (use "epsilon_ax[D]") (("" (assert) (("" (inst? -1) nil nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (surjective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil)) 86 70 nil nil)) (comp_inverse_left_inj 0 (comp_inverse_left_inj-1 nil 3237052399 3342859043 ("" (grind :if-match nil) (("" (use "epsilon_ax[D]") (("" (split) (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon const-decl "T" epsilons nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-nonempty-type-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (injective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil)) 82 80 nil nil)) (comp_inverse_right 0 (comp_inverse_right-1 nil 3237052399 3342859043 ("" (skosimp) (("" (lemma "comp_inverse_right_surj") (("" (inst?) (("" (typepred "f!1") (("" (expand "bijective?") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((comp_inverse_right_surj formula-decl nil function_inverse nil) (R formal-type-decl nil function_inverse nil) (D formal-nonempty-type-decl nil function_inverse nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil)) 35 10 nil nil)) (comp_inverse_left 0 (comp_inverse_left-1 nil 3237052399 3342859043 ("" (skolem-typepred) (("" (expand "bijective?") (("" (lemma "comp_inverse_left_inj") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((injective? const-decl "bool" functions nil) (comp_inverse_left_inj formula-decl nil function_inverse nil) (bijective? const-decl "bool" functions nil) (R formal-type-decl nil function_inverse nil) (D formal-nonempty-type-decl nil function_inverse nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 26 30 nil nil)))(function_inverse_alt (inverses_TCC1 0 (inverses_TCC1-1 nil 3252433331 3342859043 ("" (skolem!) (("" (lemma "inverse_types") (("" (split) (("1" (skolem!) (("1" (inst + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (expand "inverse?") (("1" (skosimp*) (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst + "d!1") nil nil)) nil)) nil)) nil) ("2" (inst 1 "LAMBDA (r: R): epsilon[D](LAMBDA (d: D): TRUE)") (("1" (grind) nil nil) ("2" (skolem!) (("2" (inst -1 "r!1") nil nil)) nil)) nil) ("3" (inst + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (expand "inverse?") (("1" (skosimp*) (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst + "g!1(r!1)") nil nil)) nil)) nil) ("4" (skolem-typepred) (("4" (inst + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (expand "inverse?") (("1" (skosimp*) (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skolem!) (("2" (inst - "r!1") (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (expand "injective?") (("5" (skosimp*) (("5" (inst + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (expand "inverse?") (("1" (skosimp*) (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((inverse_types formula-decl nil function_inverse_alt nil) (epsilon_ax formula-decl nil epsilons nil) nil (TRUE const-decl "bool" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (inverse? const-decl "bool" function_inverse_def nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (D formal-type-decl nil function_inverse_alt nil) (R formal-type-decl nil function_inverse_alt nil)) 144 110 t shostak)) (inverse_alt_TCC1 0 (inverse_alt_TCC1-1 nil 3252433785 3342859043 ("" (grind) nil nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 20 20 t shostak)) (bijective_inverse_is_inverse_alt 0 (bijective_inverse_is_inverse_alt-1 nil 3252433810 3342859043 ("" (skolem!) (("" (typepred "inverse_alt(f!1)") (("" (expand "inverse?") (("" (typepred "g!1") (("" (expand "inverse?") (("" (apply-extensionality :hide? t) (("" (inst -1 "x!1") (("" (inst -2 "x!1") (("" (typepred "f!1") (("" (prop) (("1" (expand "bijective?") (("1" (flatten) (("1" (expand "injective?") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "g!1(x!1)") nil nil) ("3" (inst 1 "inverse_alt(f!1)(x!1)") nil nil) ("4" (expand "bijective?") (("4" (flatten) (("4" (expand "surjective?") (("4" (inst -2 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (inverse_alt const-decl "inverses(f)" function_inverse_alt nil) (inverses nonempty-type-eq-decl nil function_inverse_alt nil) (inverse? const-decl "bool" function_inverse_def nil) (D formal-type-decl nil function_inverse_alt nil) (R formal-type-decl nil function_inverse_alt nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil)) 108 90 t shostak)) (unique_bijective_inverse_alt 0 (unique_bijective_inverse_alt-1 nil 3252311738 3342859043 ("" (skolem-typepred) (("" (typepred "inverse_alt(f!1)") (("" (expand* "inverse?" "bijective?" "surjective?") (("" (inst - "r!1") (("" (smash) (("" (inst - "r!1") nil nil)) nil)) nil)) nil)) nil)) nil) proved ((inverse_alt const-decl "inverses(f)" function_inverse_alt nil) (inverses nonempty-type-eq-decl nil function_inverse_alt nil) (inverse? const-decl "bool" function_inverse_def nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (R formal-type-decl nil function_inverse_alt nil) (D formal-type-decl nil function_inverse_alt nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 55 40 t shostak)) (bijective_inverse_alt_is_bijective 0 (bijective_inverse_alt_is_bijective-1 nil 3252311739 3342859043 ("" (skolem-typepred) (("" (typepred "inverse_alt(f!1)") (("" (expand* "inverse?" "bijective?" "surjective?" "injective?") (("" (prop) (("1" (skosimp) (("1" (inst-cp - "x2!1") (("1" (inst - "x1!1") (("1" (smash) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst + "f!1(y!1)") (("2" (inst - "f!1(y!1)") (("2" (prop) (("1" (inst - "inverse_alt(f!1)(f!1(y!1))" "y!1") (("1" (assert) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((inverse_alt const-decl "inverses(f)" function_inverse_alt nil) (inverses nonempty-type-eq-decl nil function_inverse_alt nil) (inverse? const-decl "bool" function_inverse_def nil) (unique_bijective_inverse_alt application-judgement "{d | f(d) = r}" function_inverse_alt nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (R formal-type-decl nil function_inverse_alt nil) (D formal-type-decl nil function_inverse_alt nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 108 90 t shostak)) (inv_inj_is_surj_alt 0 (inv_inj_is_surj_alt-1 nil 3252311739 3342859044 ("" (grind :if-match nil) (("" (inst 1 "f!1(y!1)") (("" (name-replace "gg" "epsilon({g: inverses(f!1) | TRUE})") (("" (typepred "gg") (("" (expand "inverse?") (("" (inst -1 "f!1(y!1)") (("" (prop) (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (inst 1 "y!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((TRUE const-decl "bool" booleans nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (inverses nonempty-type-eq-decl nil function_inverse_alt nil) (inverse? const-decl "bool" function_inverse_def nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil function_inverse_alt nil) (R formal-type-decl nil function_inverse_alt nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (inverse_alt const-decl "inverses(f)" function_inverse_alt nil) (choose const-decl "(p)" sets nil)) 126 90 t shostak)) (inv_surj_is_inj_alt 0 (inv_surj_is_inj_alt-1 nil 3252311739 3342859044 ("" (grind :if-match nil) (("" (name-replace "gg" "epsilon({g: inverses(f!1) | TRUE})") (("" (typepred "gg") (("" (expand "inverse?") (("" (assert) (("" (inst-cp -2 "x1!1") (("" (inst -2 "x2!1") (("" (inst-cp -1 "x1!1") (("" (inst -1 "x2!1") (("" (assert) (("" (replace -3) (("" (replace -4) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (inverse? const-decl "bool" function_inverse_def nil) (inverses nonempty-type-eq-decl nil function_inverse_alt nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (TRUE const-decl "bool" booleans nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil function_inverse_alt nil) (R formal-type-decl nil function_inverse_alt nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (inverse_alt const-decl "inverses(f)" function_inverse_alt nil) (choose const-decl "(p)" sets nil)) 131 110 t shostak)))(function_image (fun_exists 0 (fun_exists-1 nil 3237052399 3342859044 ("" (flatten) (("" (split) (("1" (skosimp) (("1" (inst 1 "LAMBDA (x:D): y!1") nil nil)) nil) ("2" (inst 2 "LAMBDA (x:D): epsilon! (y:R): TRUE") (("2" (skolem-typepred) (("2" (inst 2 "x!1") nil nil)) nil)) nil)) nil)) nil) proved ((D formal-type-decl nil function_image nil) (R formal-type-decl nil function_image nil) (TRUE const-decl "bool" booleans nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 29 10 t nil)) (image_inverse_image 0 (image_inverse_image-1 nil 3237052399 3342859044 ("" (grind) nil nil) proved (nil (set type-eq-decl nil sets nil) (R formal-type-decl nil function_image nil) (D formal-type-decl nil function_image nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) nil (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 64 40 nil nil)) (inverse_image_image 0 (inverse_image_image-1 nil 3237052399 3342859044 ("" (grind) nil nil) proved ((D formal-type-decl nil function_image nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) nil nil (subset? const-decl "bool" sets nil)) 49 40 nil nil)) (image_subset 0 (image_subset-1 nil 3237052399 3342859044 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (D formal-type-decl nil function_image nil) (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) nil) 94 70 nil nil)) (inverse_image_subset 0 (inverse_image_subset-1 nil 3237052399 3342859044 ("" (grind) nil nil) proved ((D formal-type-decl nil function_image nil) (R formal-type-decl nil function_image nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) nil) 74 70 nil nil)) (image_union 0 (image_union-1 nil 3237052399 3342859044 ("" (grind) (("" (apply-extensionality) (("" (iff) (("" (grind) nil nil)) nil)) nil)) nil) proved ((R formal-type-decl nil function_image nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil) nil (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (D formal-type-decl nil function_image nil) (member const-decl "bool" sets nil) nil nil nil (NOT const-decl "[bool -> bool]" booleans nil)) 300 240 nil nil)) (image_intersection 0 (image_intersection-1 nil 3237052399 3342859045 ("" (grind) nil nil) proved (nil nil nil (set type-eq-decl nil sets nil) (D formal-type-decl nil function_image nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) nil (member const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (subset? const-decl "bool" sets nil)) 105 80 nil nil)) (inverse_image_union 0 (inverse_image_union-1 nil 3237052399 3342859045 ("" (grind) (("" (apply-extensionality) nil nil)) nil) proved ((R formal-type-decl nil function_image nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) nil (union const-decl "set" sets nil) (member const-decl "bool" sets nil) (D formal-type-decl nil function_image nil) (boolean nonempty-type-decl nil booleans nil)) 96 80 nil nil)) (inverse_image_intersection 0 (inverse_image_intersection-1 nil 3237052399 3342859045 ("" (grind) (("" (apply-extensionality) nil nil)) nil) proved ((R formal-type-decl nil function_image nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) nil (intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (D formal-type-decl nil function_image nil) (boolean nonempty-type-decl nil booleans nil)) 88 60 nil nil)) (inverse_image_complement 0 (inverse_image_complement-1 nil 3237052399 3342859045 ("" (grind) (("" (apply-extensionality) nil nil)) nil) proved ((R formal-type-decl nil function_image nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) nil (complement const-decl "set" sets nil) (member const-decl "bool" sets nil) (D formal-type-decl nil function_image nil) (boolean nonempty-type-decl nil booleans nil)) 77 70 nil nil)))(function_props (composition_injective 0 (composition_injective-1 nil 3237052399 3342859045 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil function_props nil) (T2 formal-type-decl nil function_props nil) (T3 formal-type-decl nil function_props nil) (O const-decl "T3" function_props nil) (injective? const-decl "bool" functions nil)) 94 60 nil nil)) (composition_surjective 0 (composition_surjective-1 nil 3237052399 3342859045 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil function_props nil) (T2 formal-type-decl nil function_props nil) (T3 formal-type-decl nil function_props nil) (O const-decl "T3" function_props nil) (surjective? const-decl "bool" functions nil)) 106 90 nil nil)) (composition_bijective 0 (composition_bijective-1 nil 3237052399 3342859045 ("" (subtype-tcc) nil nil) proved ((composition_surjective application-judgement "(surjective?[T1, T3])" function_props nil) (composition_injective application-judgement "(injective?[T1, T3])" function_props nil) (bijective? const-decl "bool" functions nil)) 23 20 nil nil)) (image_composition 0 (image_composition-1 nil 3237052399 3342859045 ("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil) proved ((T3 formal-type-decl nil function_props nil) (boolean nonempty-type-decl nil booleans nil) (O const-decl "T3" function_props nil) (T1 formal-type-decl nil function_props nil) nil (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (T2 formal-type-decl nil function_props nil) nil (= const-decl "[T, T -> boolean]" equalities nil) nil nil (NOT const-decl "[bool -> bool]" booleans nil)) 253 220 nil nil)) (preserves_composition 0 (preserves_composition-1 nil 3237052399 3342859046 ("" (grind) nil nil) proved ((T2 formal-type-decl nil function_props nil) (T1 formal-type-decl nil function_props nil) nil (O const-decl "T3" function_props nil)) 146 110 nil nil)) (inverts_composition1 0 (inverts_composition1-1 nil 3237052399 3342859046 ("" (grind) nil nil) proved ((T2 formal-type-decl nil function_props nil) (T1 formal-type-decl nil function_props nil) nil nil (O const-decl "T3" function_props nil)) 150 110 nil nil)) (inverts_composition2 0 (inverts_composition2-1 nil 3237052399 3342859046 ("" (grind) nil nil) proved ((T2 formal-type-decl nil function_props nil) (T1 formal-type-decl nil function_props nil) nil nil (O const-decl "T3" function_props nil)) 131 120 nil nil)))(function_props_alt (composition_preserves 0 (composition_preserves-1 nil 3237052399 3342859046 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil function_props_alt nil) (T2 formal-type-decl nil function_props_alt nil) (PRED type-eq-decl nil defined_types nil) (R1 formal-const-decl "PRED[[T1, T1]]" function_props_alt nil) (R2 formal-const-decl "PRED[[T2, T2]]" function_props_alt nil) (T3 formal-type-decl nil function_props_alt nil) (R3 formal-const-decl "PRED[[T3, T3]]" function_props_alt nil) (preserves const-decl "[[D -> R] -> bool]" functions_alt nil) (O const-decl "T3" function_props nil) nil nil) 162 150 nil nil)) (composition_inverts1 0 (composition_inverts1-1 nil 3237052399 3342859046 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil function_props_alt nil) (T2 formal-type-decl nil function_props_alt nil) (PRED type-eq-decl nil defined_types nil) (R1 formal-const-decl "PRED[[T1, T1]]" function_props_alt nil) (R2 formal-const-decl "PRED[[T2, T2]]" function_props_alt nil) (T3 formal-type-decl nil function_props_alt nil) (R3 formal-const-decl "PRED[[T3, T3]]" function_props_alt nil) (preserves const-decl "[[D -> R] -> bool]" functions_alt nil) nil nil (inverts const-decl "[[D -> R] -> bool]" functions_alt nil) (O const-decl "T3" function_props nil) nil nil) 166 150 nil nil)) (composition_inverts2 0 (composition_inverts2-1 nil 3237052399 3342859047 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil function_props_alt nil) (T2 formal-type-decl nil function_props_alt nil) (PRED type-eq-decl nil defined_types nil) (R1 formal-const-decl "PRED[[T1, T1]]" function_props_alt nil) (R2 formal-const-decl "PRED[[T2, T2]]" function_props_alt nil) (preserves const-decl "[[D -> R] -> bool]" functions_alt nil) (T3 formal-type-decl nil function_props_alt nil) (R3 formal-const-decl "PRED[[T3, T3]]" function_props_alt nil) nil nil (inverts const-decl "[[D -> R] -> bool]" functions_alt nil) (O const-decl "T3" function_props nil) nil nil) 190 150 nil nil)))(function_props2 (assoc 0 (assoc-1 nil 3237052399 3342859047 ("" (skolem 1 ("f!1" "g!1" "h!1")) (("" (expand "o") (("" (propax) nil nil)) nil)) nil) proved ((O const-decl "T3" function_props nil)) 15 10 nil nil)))(relation_defs)(relation_props (total_composition 0 (total_composition-1 nil 3237052399 3342859047 ("" (grind) nil nil) proved ((T1 formal-type-decl nil relation_props nil) (T3 formal-type-decl nil relation_props nil) (T2 formal-type-decl nil relation_props nil) (total? const-decl "bool" relation_defs nil) (O const-decl "bool" relation_props nil)) 114 100 nil nil)) (onto_composition 0 (onto_composition-1 nil 3237052399 3342859047 ("" (grind) nil nil) proved ((T3 formal-type-decl nil relation_props nil) (T1 formal-type-decl nil relation_props nil) (T2 formal-type-decl nil relation_props nil) (onto? const-decl "bool" relation_defs nil) (O const-decl "bool" relation_props nil)) 111 90 nil nil)) (composition_total 0 (composition_total-1 nil 3237052399 3342859047 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil relation_props nil) (T2 formal-type-decl nil relation_props nil) (pred type-eq-decl nil defined_types nil) (T3 formal-type-decl nil relation_props nil) (O const-decl "bool" relation_props nil) (total? const-decl "bool" relation_defs nil)) 120 70 nil nil)) (composition_onto 0 (composition_onto-1 nil 3237052399 3342859047 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T1 formal-type-decl nil relation_props nil) (T2 formal-type-decl nil relation_props nil) (pred type-eq-decl nil defined_types nil) (T3 formal-type-decl nil relation_props nil) (O const-decl "bool" relation_props nil) (onto? const-decl "bool" relation_defs nil)) 118 90 nil nil)))(relation_props2 (assoc 0 (assoc-1 nil 3237052399 3342859047 ("" (skosimp) (("" (apply-extensionality) (("" (hide 2) (("" (expand "o") (("" (iff) (("" (prop) (("1" (skosimp) (("1" (skosimp) (("1" (inst?) (("1" (assert) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (assert) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T1 formal-type-decl nil relation_props2 nil) (T4 formal-type-decl nil relation_props2 nil) (boolean nonempty-type-decl nil booleans nil) (T2 formal-type-decl nil relation_props2 nil) (O const-decl "bool" relation_props nil) (pred type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (T3 formal-type-decl nil relation_props2 nil)) 141 120 nil nil)))(relation_converse_props (reflexive_converse 0 (reflexive_converse-1 nil 3249387244 3342859047 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil relation_converse_props nil) (PRED type-eq-decl nil defined_types nil) (converse const-decl "pred[[T2, T1]]" relation_defs nil) (reflexive? const-decl "bool" relations nil)) 53 30 t shostak)) (irreflexive_converse 0 (irreflexive_converse-1 nil 3249387255 3342859047 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil relation_converse_props nil) (PRED type-eq-decl nil defined_types nil) (converse const-decl "pred[[T2, T1]]" relation_defs nil) (irreflexive? const-decl "bool" relations nil)) 49 50 t shostak)) (symmetric_converse 0 (symmetric_converse-1 nil 3249387255 3342859047 ("" (skolem-typepred) (("" (expand* "converse" "symmetric?") (("" (skosimp) (("" (inst - "y!1" "x!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((converse const-decl "pred[[T2, T1]]" relation_defs nil) (symmetric? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (T formal-type-decl nil relation_converse_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 54 30 t shostak)) (antisymmetric_converse 0 (antisymmetric_converse-1 nil 3249387255 3342859048 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil relation_converse_props nil) (PRED type-eq-decl nil defined_types nil) (converse const-decl "pred[[T2, T1]]" relation_defs nil) (antisymmetric? const-decl "bool" relations nil)) 111 90 t shostak)) (connected_converse 0 (connected_converse-1 nil 3249387255 3342859048 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil relation_converse_props nil) (PRED type-eq-decl nil defined_types nil) (/= const-decl "boolean" notequal nil) (converse const-decl "pred[[T2, T1]]" relation_defs nil) (connected? const-decl "bool" relations nil)) 135 110 t shostak)) (transitive_converse 0 (transitive_converse-1 nil 3249387255 3342859048 ("" (skolem-typepred) (("" (expand* "converse" "transitive?") (("" (skosimp) (("" (inst - "z!1" "y!1" "x!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((converse const-decl "pred[[T2, T1]]" relation_defs nil) (transitive? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (T formal-type-decl nil relation_converse_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 99 70 t shostak)) (equivalence_converse 0 (equivalence_converse-1 nil 3249387255 3342859048 ("" (subtype-tcc) nil nil) proved ((transitive_converse application-judgement "(transitive?[T])" relation_converse_props nil) (symmetric_converse application-judgement "(symmetric?[T])" relation_converse_props nil) (reflexive_converse application-judgement "(reflexive?[T])" relation_converse_props nil) (equivalence? const-decl "bool" relations nil)) 189 190 t shostak)) (preorder_converse 0 (preorder_converse-1 nil 3249387255 3342859048 ("" (subtype-tcc) nil nil) proved ((transitive_converse application-judgement "(transitive?[T])" relation_converse_props nil) (reflexive_converse application-judgement "(reflexive?[T])" relation_converse_props nil) (preorder? const-decl "bool" orders nil)) 298 280 t shostak)) (partial_order_converse 0 (partial_order_converse-1 nil 3249387255 3342859049 ("" (subtype-tcc) nil nil) proved ((preorder_converse application-judgement "(preorder?[T])" relation_converse_props nil) (antisymmetric_converse application-judgement "(antisymmetric?[T])" relation_converse_props nil) (partial_order? const-decl "bool" orders nil)) 373 370 t shostak)) (strict_order_converse 0 (strict_order_converse-1 nil 3249387255 3342859049 ("" (subtype-tcc) nil nil) proved ((transitive_converse application-judgement "(transitive?[T])" relation_converse_props nil) (antisymmetric_converse application-judgement "(antisymmetric?[T])" relation_converse_props nil) (irreflexive_converse application-judgement "(irreflexive?[T])" relation_converse_props nil) (strict_order? const-decl "bool" orders nil)) 498 460 t shostak)) (dichotomous_converse 0 (dichotomous_converse-1 nil 3249387255 3342859050 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil relation_converse_props nil) (pred type-eq-decl nil defined_types nil) (converse const-decl "pred[[T2, T1]]" relation_defs nil) (dichotomous? const-decl "bool" orders nil)) 607 580 t shostak)) (total_order_converse 0 (total_order_converse-1 nil 3249387255 3342859051 ("" (subtype-tcc) nil nil) proved ((dichotomous_converse application-judgement "(dichotomous?[T])" relation_converse_props nil) (partial_order_converse application-judgement "(partial_order?[T])" relation_converse_props nil) (total_order? const-decl "bool" orders nil)) 706 660 t shostak)) (trichotomous_converse 0 (trichotomous_converse-1 nil 3249387256 3342859052 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil relation_converse_props nil) (pred type-eq-decl nil defined_types nil) (converse const-decl "pred[[T2, T1]]" relation_defs nil) (trichotomous? const-decl "bool" orders nil)) 844 820 t shostak)) (strict_total_order_converse 0 (strict_total_order_converse-1 nil 3249387256 3342859053 ("" (subtype-tcc) nil nil) proved ((trichotomous_converse application-judgement "(trichotomous?[T])" relation_converse_props nil) (strict_order_converse application-judgement "(strict_order?[T])" relation_converse_props nil) (strict_total_order? const-decl "bool" orders nil)) 961 920 t shostak)))(indexed_sets (IUnion_Union 0 (IUnion_Union-1 nil 3237054186 3342859053 ("" (grind) (("" (apply-extensionality :hide? t) (("" (iff) (("" (prop) (("1" (skolem-typepred) (("1" (inst 1 "A!1(i!1)") (("1" (inst 1 "i!1") nil nil)) nil)) nil) ("2" (skolem-typepred) (("2" (grind :if-match nil) (("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (fullset const-decl "set" sets nil) nil (Union const-decl "set" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (IUnion const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) nil nil (NOT const-decl "[bool -> bool]" booleans nil) (Union_surjective name-judgement "(surjective?[setofsets[T], set[T]])" sets_lemmas nil) nil) 165 150 t shostak)) (IIntersection_Intersection 0 (IIntersection_Intersection-1 nil 3237054338 3342859053 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) (("" (iff) (("" (prop) (("1" (skolem-typepred) (("1" (grind :if-match nil) (("1" (inst - "x!2") nil nil)) nil)) nil) ("2" (skolem-typepred) (("2" (inst -1 "A!1(i!1)") (("2" (inst 1 "i!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (fullset const-decl "set" sets nil) nil (Intersection const-decl "set" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (IIntersection const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) nil nil (Intersection_surjective name-judgement "(surjective?[setofsets[T], set[T]])" sets_lemmas nil) nil) 148 130 t shostak)) (IUnion_union 0 (IUnion_union-1 nil 3237054431 3342859053 ("" (skolem-typepred) (("" (apply-extensionality :hide? t) (("" (iff) (("" (grind :if-match nil) (("1" (inst 1 "i!1") nil nil) ("2" (inst 2 "i!1") nil nil) ("3" (inst 1 "i!1") (("3" (assert) nil nil)) nil) ("4" (inst 1 "i!1") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil) (IUnion const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (member const-decl "bool" sets nil)) 217 160 t shostak)) (IIntersection_intersection 0 (IIntersection_intersection-1 nil 3237054514 3342859053 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) (("" (grind :if-match nil) (("1" (inst -1 "i!1") (("1" (assert) nil nil)) nil) ("2" (inst -1 "i!1") (("2" (assert) nil nil)) nil) ("3" (inst -2 "i!1") nil nil) ("4" (inst -1 "i!1") nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (intersection const-decl "set" sets nil) (IIntersection const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (member const-decl "bool" sets nil)) 225 190 t shostak)) (IUnion_intersection 0 (IUnion_intersection-1 nil 3237054595 3342859053 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) (("" (grind :if-match nil) (("" (inst 1 "i!1") nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (intersection const-decl "set" sets nil) (IUnion const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (member const-decl "bool" sets nil)) 112 100 t shostak)) (IIntersection_union 0 (IIntersection_union-1 nil 3237054623 3342859054 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) (("" (grind :if-match nil) (("" (inst?) nil nil)) nil)) nil)) nil) proved ((T formal-type-decl nil indexed_sets nil) (boolean nonempty-type-decl nil booleans nil) (union const-decl "set" sets nil) (IIntersection const-decl "set[T]" indexed_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (index formal-type-decl nil indexed_sets nil) (member const-decl "bool" sets nil)) 121 90 t shostak)))(operator_defs)(numbers)(number_fields (commutative_add 0 (commutative_add-1 nil 3242535784 3342859054 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 20 0 t shostak)) (associative_add 0 (associative_add-1 nil 3242535799 3342859054 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 9 0 t shostak)) (identity_add 0 (identity_add-1 nil 3242535806 3342859054 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 7 10 t shostak)) (inverse_add 0 (inverse_add-1 nil 3242535812 3242537042 ("" (skosimp) (("" (assert) (("" (assert) (("" (postpone) nil nil)) nil)) nil)) nil) unchecked nil 58491 160 t shostak)) (minus_add 0 (minus_add-1 nil 3242537058 3242537087 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unchecked nil 28913 480 t shostak)) (commutative_mult 0 (commutative_mult-1 nil 3242536887 3242537102 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unchecked nil 9430 480 t shostak)) (associative_mult 0 (associative_mult-1 nil 3242536707 3242537132 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unchecked nil 9568 460 t shostak)) (identity_mult 0 (identity_mult-1 nil 3242537143 3242537151 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unchecked nil 8605 500 t shostak)) (inverse_mult 0 (inverse_mult-1 nil 3242537160 3242537168 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unchecked nil 8174 470 t shostak)) (div_def 0 (div_def-1 nil 3242537180 3242537188 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unchecked nil 8695 480 t shostak)) (distributive 0 (distributive-1 nil 3242537198 3342859054 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 11 10 t shostak)))(reals (real_plus_real_is_real 0 (real_plus_real_is_real-1 nil 3242538128 3342859054 ("" (lemma "closed_plus") (("" (propax) nil nil)) nil) proved ((closed_plus formula-decl nil reals nil)) 2 0 t shostak)) (real_minus_real_is_real 0 (real_minus_real_is_real-1 nil 3242538153 3342859054 ("" (lemma "closed_minus") (("" (propax) nil nil)) nil) proved ((closed_minus formula-decl nil reals nil)) 2 10 t shostak)) (real_times_real_is_real 0 (real_times_real_is_real-1 nil 3242538163 3342859054 ("" (lemma "closed_times") (("" (propax) nil nil)) nil) proved ((closed_times formula-decl nil reals nil)) 15 0 t shostak)) (real_div_nzreal_is_real 0 (real_div_nzreal_is_real-1 nil 3242538175 3342859054 ("" (lemma "closed_divides") (("" (propax) nil nil)) nil) proved ((closed_divides formula-decl nil reals nil)) 4 0 t shostak)) (minus_real_is_real 0 (minus_real_is_real-1 nil 3242538196 3342859054 ("" (lemma "closed_neg") (("" (propax) nil nil)) nil) proved ((closed_neg formula-decl nil reals nil)) 3 10 t shostak)) (reals_totally_ordered 0 (reals_totally_ordered-1 nil 3237052399 3342859054 ("" (grind) nil nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (strict_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (strict_total_order? const-decl "bool" orders nil)) 101 80 nil nil)))(real_axioms (posreal_add_closed 0 (posreal_add_closed-1 nil 3237052399 3342859054 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 40 30 nil nil)) (posreal_neg 0 (posreal_neg-1 nil 3237052399 3342859054 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (minus_real_is_real application-judgement "real" reals nil)) 40 30 nil nil)) (trichotomy 0 (trichotomy-1 nil 3237052399 3342859054 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 28 30 nil nil)))(bounded_real_defs (real_lower_complete 0 (real_lower_complete-1 nil 3237052399 3342859054 ("" (lemma "real_complete") (("" (skosimp) (("" (inst -1 "{x: real | S!1(-x)}") (("1" (skosimp) (("1" (split) (("1" (skosimp) (("1" (expand "least_upper_bound?") (("1" (inst 1 "-y!2") (("1" (expand "greatest_lower_bound?") (("1" (hide -2) (("1" (prop) (("1" (expand "upper_bound?") (("1" (expand "lower_bound?") (("1" (skosimp) (("1" (inst -1 "-s!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -3 "-y!3") (("2" (hide -2) (("2" (expand "lower_bound?") (("2" (expand "upper_bound?") (("2" (split) (("1" (assert) nil nil) ("2" (skosimp) (("2" (inst -1 "-s!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (inst 1 "-y!1") (("2" (expand "upper_bound?") (("2" (skosimp) (("2" (expand "lower_bound?") (("2" (inst -1 "-s!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "S!1") (("2" (hide -2 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (skosimp) (("2" (expand "member") (("2" (inst -2 "-x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) nil nil nil nil (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) nil (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (minus_real_is_real application-judgement "real" reals nil) (real_complete formula-decl nil bounded_real_defs nil)) 176 130 nil nil)) (lub_exists 0 (lub_exists-1 nil 3237052399 3342859054 ("" (skolem-typepred) (("" (use "real_complete") (("" (assert) (("" (replace 1) (("" (assert) (("" (expand "bounded_above?") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real_complete formula-decl nil bounded_real_defs nil) (bounded_above? const-decl "bool" bounded_real_defs nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 31 20 nil nil)) (lub_TCC1 0 (lub_TCC1-1 nil 3237052399 3342859055 ("" (use "real_complete") (("" (inst 1 "LAMBDA (S:(bounded_above?)): epsilon! (x:real): least_upper_bound?(x, S)") (("" (skosimp) (("" (use "epsilon_ax[real]") (("" (assert) (("" (inst? -1) (("" (typepred "S!1") (("" (split) (("1" (propax) nil nil) ("2" (expand "bounded_above?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) (bounded_above? const-decl "bool" bounded_real_defs nil) nil (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (epsilon_ax formula-decl nil epsilons nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_complete formula-decl nil bounded_real_defs nil)) 69 60 nil nil)) (lub_lem 0 (lub_lem-1 nil 3237052399 3342859055 ("" (skosimp) (("" (typepred "lub(SA!1)") (("" (assert) (("" (prop) (("1" (assert) nil nil) ("2" (grind :if-match nil) (("2" (inst -2 "lub(SA!1)") (("2" (inst -4 "x!1") (("2" (replace -1) (("2" (replace -3) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs nil) (bounded_above? const-decl "bool" bounded_real_defs nil) nil (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) nil) 171 150 nil nil)) (glb_exists 0 (glb_exists-1 nil 3237052399 3342859055 ("" (skosimp) (("" (use "real_lower_complete") (("" (assert) (("" (split) (("1" (propax) nil nil) ("2" (typepred "SB!1") (("2" (expand "bounded_below?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real_lower_complete formula-decl nil bounded_real_defs nil) (bounded_below? const-decl "bool" bounded_real_defs nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil)) 19 20 nil nil)) (glb_TCC1 0 (glb_TCC1-1 nil 3237052399 3342859055 ("" (inst 1 "LAMBDA (S:(bounded_below?)): epsilon! (x:real): greatest_lower_bound?(x, S)") (("" (skolem-typepred) (("" (use "epsilon_ax[real]") (("" (assert) (("" (expand "bounded_below?") (("" (use "real_lower_complete") (("" (assert) (("" (replace -3) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (real_lower_complete formula-decl nil bounded_real_defs nil) (epsilon_ax formula-decl nil epsilons nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) nil (bounded_below? const-decl "bool" bounded_real_defs nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 73 60 nil nil)) (glb_lem 0 (glb_lem-1 nil 3237052399 3342859055 ("" (skosimp) (("" (typepred "glb(SB!1)") (("" (prop) (("1" (assert) nil nil) ("2" (grind :if-match nil) (("2" (inst -2 "glb(SB!1)") (("2" (inst -4 "x!1") (("2" (prop) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((glb const-decl "{x | greatest_lower_bound?(x, SB)}" bounded_real_defs nil) (bounded_below? const-decl "bool" bounded_real_defs nil) nil (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) nil) 166 140 nil nil)))(bounded_real_defs_alt (S_TCC1 0 (S_TCC1-1 nil 3237052399 3342859055 ("" (inst 1 "singleton(0)") (("" (expand "nonempty?") (("" (expand "empty?") (("" (inst -1 "0") (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 6 10 nil nil)) (lub_is_upper_bound 0 (lub_is_upper_bound-1 nil 3237052399 3342859055 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (least_upper_bound? const-decl "[real -> bool]" bounded_real_defs_alt nil) (S formal-const-decl "(nonempty?[real])" bounded_real_defs_alt nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) nil nil (upper_bound? const-decl "[real -> bool]" bounded_real_defs_alt nil) nil nil) 48 40 nil nil)) (glb_is_lower_bound 0 (glb_is_lower_bound-1 nil 3237052399 3342859055 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (greatest_lower_bound? const-decl "[real -> bool]" bounded_real_defs_alt nil) (S formal-const-decl "(nonempty?[real])" bounded_real_defs_alt nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) nil nil (lower_bound? const-decl "[real -> bool]" bounded_real_defs_alt nil) nil nil) 65 50 nil nil)))(real_types (posreal_is_nzreal 0 (posreal_is_nzreal-1 nil 3237052399 3342859055 ("" (subtype-tcc) nil nil) proved nil 8 10 nil nil)) (negreal_is_nzreal 0 (negreal_is_nzreal-1 nil 3237052399 3342859055 ("" (subtype-tcc) nil nil) proved nil 8 0 nil nil)) (nonneg_real_add_closed 0 (nonneg_real_add_closed-1 nil 3237052399 3342859055 ("" (grind) nil nil) proved nil 10 10 nil nil)) (nonpos_real_add_closed 0 (nonpos_real_add_closed-1 nil 3237052399 3342859055 ("" (grind) nil nil) proved nil 12 10 nil nil)) (negreal_add_closed 0 (negreal_add_closed-1 nil 3237052399 3342859055 ("" (grind) nil nil) proved nil 15 20 nil nil)) (nonneg_real_mult_closed 0 (nonneg_real_mult_closed-1 nil 3237052399 3342859055 ("" (grind) (("" (case "nnx!1 = 0") (("1" (assert) nil nil) ("2" (case "nny!1 = 0") (("1" (assert) nil nil) ("2" (lemma "posreal_mult_closed") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (posreal_mult_closed formula-decl nil real_axioms nil) (real_times_real_is_real application-judgement "real" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil)) 76 50 nil nil)) (nzreal_times_nzreal_is_nzreal 0 (nzreal_times_nzreal_is_nzreal-1 nil 3237052399 3342859056 ("" (lemma "posreal_mult_closed") (("" (skosimp) (("" (case "nzx!1 > 0") (("1" (case "nzy!1 > 0") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (inst -2 "nzx!1" "-nzy!1") (("2" (assert) nil nil)) nil)) nil) ("2" (case "nzy!1 > 0") (("1" (inst -2 "-nzx!1" "nzy!1") (("1" (assert) nil nil)) nil) ("2" (inst -1 "-nzx!1" "-nzy!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (minus_real_is_real application-judgement "real" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil) (posreal_mult_closed formula-decl nil real_axioms nil)) 63 50 nil nil)) (nzreal_div_nzreal_is_nzreal 0 (nzreal_div_nzreal_is_nzreal-1 nil 3237052399 3342859056 ("" (lemma "nzreal_times_nzreal_is_nzreal") (("" (skosimp) (("" (inst -1 "nzx!1" "1/nzy!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)) 41 30 t nil)) (minus_nzreal_is_nzreal 0 (minus_nzreal_is_nzreal-1 nil 3237052399 3342859056 ("" (subtype-tcc) nil nil) proved nil 11 10 nil nil)) (nnreal_plus_nnreal_is_nnreal 0 (nnreal_plus_nnreal_is_nnreal-1 nil 3237052399 3342859056 ("" (subtype-tcc) nil nil) proved nil 13 20 nil nil)) (nnreal_times_nnreal_is_nnreal 0 (nnreal_times_nnreal_is_nnreal-1 nil 3237052399 3342859056 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (case "nnx!1 = 0") (("1" (assert) nil nil) ("2" (case "nny!1 = 0") (("1" (assert) nil nil) ("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (real_times_real_is_real application-judgement "real" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil)) 43 40 nil nil)) (nnreal_div_posreal_is_nnreal 0 (nnreal_div_posreal_is_nnreal-1 nil 3237052399 3342859056 ("" (grind) (("" (lemma "posreal_mult_closed") (("" (case "nnx!1 = 0") (("1" (assert) nil nil) ("2" (inst -1 "nnx!1" "1/py!1") (("2" (assert) (("2" (lemma "inverse_mult") (("2" (inst -1 "py!1") (("2" (assert) (("2" (name-replace "a" "1/py!1") (("2" (assert) (("2" (lemma "posreal_mult_closed") (("2" (case-replace "a = 0") (("1" (assert) nil nil) ("2" (inst -1 "py!1" "-a") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (numfield nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (inverse_mult formula-decl nil number_fields nil) (real_times_real_is_real application-judgement "real" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (minus_real_is_real application-judgement "real" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 177 130 nil nil)) (nnreal_div_negreal_is_npreal 0 (nnreal_div_negreal_is_npreal-1 nil 3237052399 3342859056 ("" (skosimp) (("" (lemma "nnreal_div_posreal_is_nnreal") (("" (inst -1 "nnx!1" "-ny!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((nnreal_div_posreal_is_nnreal judgement-tcc nil real_types nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)) 67 60 nil nil)) (npreal_plus_npreal_is_npreal 0 (npreal_plus_npreal_is_npreal-1 nil 3237052399 3342859056 ("" (subtype-tcc) nil nil) proved nil 27 20 nil nil)) (npreal_times_npreal_is_nnreal 0 (npreal_times_npreal_is_nnreal-1 nil 3237052399 3342859056 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (inst -1 "-npx!1" "-npy!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (real_times_real_is_real application-judgement "real" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_real_is_real application-judgement "real" reals nil)) 42 40 nil nil)) (npreal_div_posreal_is_npreal 0 (npreal_div_posreal_is_npreal-1 nil 3237052399 3342859056 ("" (skosimp) (("" (lemma "nnreal_div_posreal_is_nnreal") (("" (inst -1 "-npx!1" "py!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((nnreal_div_posreal_is_nnreal judgement-tcc nil real_types nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_real_is_real application-judgement "real" reals nil)) 73 60 nil nil)) (npreal_div_negreal_is_nnreal 0 (npreal_div_negreal_is_nnreal-1 nil 3237052399 3342859056 ("" (skosimp) (("" (lemma "npreal_div_posreal_is_npreal") (("" (inst -1 "npx!1" "-ny!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((npreal_div_posreal_is_npreal judgement-tcc nil real_types nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)) 64 60 nil nil)) (posreal_plus_nnreal_is_posreal 0 (posreal_plus_nnreal_is_posreal-1 nil 3237052399 3342859056 ("" (subtype-tcc) nil nil) proved nil 50 40 nil nil)) (nnreal_plus_posreal_is_posreal 0 (nnreal_plus_posreal_is_posreal-1 nil 3237052399 3342859056 ("" (subtype-tcc) nil nil) proved nil 41 40 nil nil)) (posreal_times_posreal_is_posreal 0 (posreal_times_posreal_is_posreal-1 nil 3237052399 3342859057 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 53 50 nil nil)) (posreal_div_posreal_is_posreal 0 (posreal_div_posreal_is_posreal-1 nil 3237052399 3342859057 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (inst -1 "px!1" "1/py!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types nil)) 120 100 nil nil)) (negreal_plus_negreal_is_negreal 0 (negreal_plus_negreal_is_negreal-1 nil 3237052399 3342859057 ("" (subtype-tcc) nil nil) proved nil 50 50 nil nil)) (negreal_times_negreal_is_posreal 0 (negreal_times_negreal_is_posreal-1 nil 3237052399 3342859057 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (inst -1 "-nx!1" "-ny!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (npreal_times_npreal_is_nnreal application-judgement "nnreal" real_types nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)) 77 70 nil nil)) (negreal_div_negreal_is_posreal 0 (negreal_div_negreal_is_posreal-1 nil 3237052399 3342859057 ("" (lemma "posreal_div_posreal_is_posreal") (("" (skosimp) (("" (inst -1 "-nx!1" "-ny!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((npreal_div_negreal_is_nnreal application-judgement "nnreal" real_types nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)) 105 100 nil nil)))(rationals (closed_plus 0 (closed_plus-1 nil 3246296579 3246296586 ("" (postpone) nil nil) unchecked nil 7317 270 t shostak)) (rat_plus_rat_is_rat 0 (rat_plus_rat_is_rat-1 nil 3237052399 3342859057 ("" (lemma "closed_plus") (("" (propax) nil nil)) nil) proved ((closed_plus formula-decl nil rationals nil)) 3 0 nil nil)) (rat_minus_rat_is_rat 0 (rat_minus_rat_is_rat-1 nil 3237052399 3342859057 ("" (lemma "closed_minus") (("" (propax) nil nil)) nil) proved ((closed_minus formula-decl nil rationals nil)) 22 20 nil nil)) (rat_times_rat_is_rat 0 (rat_times_rat_is_rat-1 nil 3237052399 3342859057 ("" (lemma "closed_times") (("" (propax) nil nil)) nil) proved ((closed_times formula-decl nil rationals nil)) 23 20 nil nil)) (rat_div_nzrat_is_rat 0 (rat_div_nzrat_is_rat-1 nil 3237052399 3342859057 ("" (lemma "closed_divides") (("" (propax) nil nil)) nil) proved ((closed_divides formula-decl nil rationals nil)) 24 30 nil nil)) (minus_rat_is_rat 0 (minus_rat_is_rat-1 nil 3237052399 3342859057 ("" (lemma "closed_neg") (("" (propax) nil nil)) nil) proved ((closed_neg formula-decl nil rationals nil)) 25 20 nil nil)) (posrat_is_nzrat 0 (posrat_is_nzrat-1 nil 3237052399 3342859057 ("" (subtype-tcc) nil nil) proved nil 46 40 nil nil)) (negrat_is_nzrat 0 (negrat_is_nzrat-1 nil 3237052399 3342859057 ("" (subtype-tcc) nil nil) proved nil 31 30 nil nil)) (nzrat_times_nzrat_is_nzrat 0 (nzrat_times_nzrat_is_nzrat-1 nil 3237052399 3342859057 ("" (subtype-tcc) nil nil) proved nil 37 30 nil nil)) (nzrat_div_nzrat_is_nzrat 0 (nzrat_div_nzrat_is_nzrat-1 nil 3237052399 3342859057 ("" (subtype-tcc) nil nil) proved nil 50 60 nil nil)) (minus_nzrat_is_nzrat 0 (minus_nzrat_is_nzrat-1 nil 3237052399 3342859058 ("" (subtype-tcc) nil nil) proved nil 57 50 nil nil)) (nnrat_plus_nnrat_is_nnrat 0 (nnrat_plus_nnrat_is_nnrat-1 nil 3237052399 3342859058 ("" (subtype-tcc) nil nil) proved nil 59 60 nil nil)) (nnrat_times_nnrat_is_nnrat 0 (nnrat_times_nnrat_is_nnrat-1 nil 3237052399 3342859058 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (rat_times_rat_is_rat application-judgement "rat" rationals nil)) 146 130 nil nil)) (nnrat_div_posrat_is_nnrat 0 (nnrat_div_posrat_is_nnrat-1 nil 3237052399 3342859058 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil) (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)) 164 160 nil nil)) (nnrrat_div_negrat_is_nprat 0 (nnrrat_div_negrat_is_nprat-1 nil 3237052399 3342859058 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (<= const-decl "bool" reals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil) (< const-decl "bool" reals nil) (negrat nonempty-type-eq-decl nil rationals nil) (nnreal_div_negreal_is_npreal application-judgement "npreal" real_types nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)) 208 190 nil nil)) (nprat_plus_nprat_is_nprat 0 (nprat_plus_nprat_is_nprat-1 nil 3237052399 3342859058 ("" (subtype-tcc) nil nil) proved nil 113 110 nil nil)) (nprat_times_nprat_is_nnrat 0 (nprat_times_nprat_is_nnrat-1 nil 3237052399 3342859059 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil) (npreal_times_npreal_is_nnreal application-judgement "nnreal" real_types nil) (rat_times_rat_is_rat application-judgement "rat" rationals nil)) 200 180 nil nil)) (nprat_div_posrat_is_nprat 0 (nprat_div_posrat_is_nprat-1 nil 3237052399 3342859059 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil) (>= const-decl "bool" reals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil) (npreal_div_posreal_is_npreal application-judgement "npreal" real_types nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)) 255 230 nil nil)) (nprat_div_negrat_is_nnrat 0 (nprat_div_negrat_is_nnrat-1 nil 3237052399 3342859059 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil) (< const-decl "bool" reals nil) (negrat nonempty-type-eq-decl nil rationals nil) (npreal_div_negreal_is_nnreal application-judgement "nnreal" real_types nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)) 258 240 nil nil)) (posrat_plus_nnrat_is_posrat 0 (posrat_plus_nnrat_is_posrat-1 nil 3237052399 3342859059 ("" (subtype-tcc) nil nil) proved nil 158 160 nil nil)) (nnrat_plus_posrat_is_posrat 0 (nnrat_plus_posrat_is_posrat-1 nil 3237052399 3342859060 ("" (subtype-tcc) nil nil) proved nil 187 180 nil nil)) (posrat_times_posrat_is_posrat 0 (posrat_times_posrat_is_posrat-1 nil 3237052399 3342859060 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals nil)) 252 240 nil nil)) (posrat_div_posrat_is_posrat 0 (posrat_div_posrat_is_posrat-1 nil 3237052399 3342859060 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals nil)) 282 250 nil nil)) (negrat_plus_negrat_is_negrat 0 (negrat_plus_negrat_is_negrat-1 nil 3237052399 3342859060 ("" (subtype-tcc) nil nil) proved nil 209 200 nil nil)) (negrat_times_negrat_is_posrat 0 (negrat_times_negrat_is_posrat-1 nil 3237052399 3342859061 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil) (< const-decl "bool" reals nil) (negrat nonempty-type-eq-decl nil rationals nil) (negreal_times_negreal_is_posreal application-judgement "posreal" real_types nil) (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nprat_times_nprat_is_nnrat application-judgement "nnrat" rationals nil)) 303 290 nil nil)) (negrat_div_negrat_is_posrat 0 (negrat_div_negrat_is_posrat-1 nil 3237052399 3342859061 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonpos_rat nonempty-type-eq-decl nil rationals nil) (< const-decl "bool" reals nil) (negrat nonempty-type-eq-decl nil rationals nil) (negreal_div_negreal_is_posreal application-judgement "posreal" real_types nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nprat_div_negrat_is_nnrat application-judgement "nnrat" rationals nil)) 321 300 nil nil)))(integers (upfrom_TCC1 0 (upfrom_TCC1-1 nil 3237052399 3342859061 ("" (subtype-tcc) nil nil) proved nil 7 0 nil nil)) (above_TCC1 0 (above_TCC1-1 nil 3237052399 3342859061 ("" (lemma "closed_plus") (("" (skosimp) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil) proved ((rat_plus_rat_is_rat application-judgement "rat" rationals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (closed_plus formula-decl nil integers nil)) 75 80 nil nil)) (int_plus_int_is_int 0 (int_plus_int_is_int-1 nil 3237052399 3342859061 ("" (lemma "closed_plus") (("" (propax) nil nil)) nil) proved ((closed_plus formula-decl nil integers nil)) 2 0 nil nil)) (int_minus_int_is_int 0 (int_minus_int_is_int-1 nil 3237052399 3342859061 ("" (lemma "closed_minus") (("" (propax) nil nil)) nil) proved ((closed_minus formula-decl nil integers nil)) 71 60 nil nil)) (int_times_int_is_int 0 (int_times_int_is_int-1 nil 3237052399 3342859061 ("" (lemma "closed_times") (("" (propax) nil nil)) nil) proved ((closed_times formula-decl nil integers nil)) 60 60 nil nil)) (minus_int_is_int 0 (minus_int_is_int-1 nil 3237052399 3342859061 ("" (lemma "closed_neg") (("" (propax) nil nil)) nil) proved ((closed_neg formula-decl nil integers nil)) 74 80 nil nil)) (minus_nzint_is_nzint 0 (minus_nzint_is_nzint-1 nil 3237052399 3342859061 ("" (subtype-tcc) nil nil) proved nil 81 70 nil nil)) (posint_is_nzint 0 (posint_is_nzint-1 nil 3237052399 3342859062 ("" (subtype-tcc) nil nil) proved nil 90 80 nil nil)) (negint_is_nzint 0 (negint_is_nzint-1 nil 3237052399 3342859062 ("" (subtype-tcc) nil nil) proved nil 89 90 nil nil)) (nzint_times_nzint_is_nzint 0 (nzint_times_nzint_is_nzint-1 nil 3237052399 3342859062 ("" (subtype-tcc) nil nil) proved nil 104 90 nil nil)) (nnint_plus_nnint_is_nnint 0 (nnint_plus_nnint_is_nnint-1 nil 3237052399 3342859062 ("" (subtype-tcc) nil nil) proved nil 142 140 nil nil)) (nnint_times_nnint_is_nnint 0 (nnint_times_nnint_is_nnint-1 nil 3237052399 3342859062 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals nil) (int_times_int_is_int application-judgement "int" integers nil)) 305 290 nil nil)) (npint_plus_npint_is_npint 0 (npint_plus_npint_is_npint-1 nil 3237052399 3342859063 ("" (subtype-tcc) nil nil) proved nil 230 220 nil nil)) (npint_times_npint_is_nnint 0 (npint_times_npint_is_nnint-1 nil 3237052399 3342859063 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonpos_int nonempty-type-eq-decl nil integers nil) (nprat_times_nprat_is_nnrat application-judgement "nnrat" rationals nil) (int_times_int_is_int application-judgement "int" integers nil)) 359 340 nil nil)) (posint_plus_nnint_is_posint 0 (posint_plus_nnint_is_posint-1 nil 3237052399 3342859063 ("" (subtype-tcc) nil nil) proved nil 282 280 nil nil)) (nnint_plus_posint_is_posint 0 (nnint_plus_posint_is_posint-1 nil 3237052399 3342859064 ("" (subtype-tcc) nil nil) proved nil 357 340 nil nil)) (posint_times_posint_is_posint 0 (posint_times_posint_is_posint-1 nil 3237052399 3342859064 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posint nonempty-type-eq-decl nil integers nil) (posrat_times_posrat_is_posrat application-judgement "posrat" rationals nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) 408 400 nil nil)) (negint_plus_negint_is_negint 0 (negint_plus_negint_is_negint-1 nil 3237052399 3342859064 ("" (subtype-tcc) nil nil) proved nil 370 360 nil nil)) (negint_times_negint_is_posint 0 (negint_times_negint_is_posint-1 nil 3237052399 3342859065 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonpos_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (negint nonempty-type-eq-decl nil integers nil) (negrat_times_negrat_is_posrat application-judgement "posrat" rationals nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (npint_times_npint_is_nnint application-judgement "nonneg_int" integers nil)) 509 490 nil nil)) (even_int_TCC1 0 (even_int_TCC1-1 nil 3237052399 3342859066 ("" (expand "even?") (("" (inst 1 "0") (("" (assert) nil nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even? const-decl "bool" integers nil)) 529 510 nil nil)) (odd_int_TCC1 0 (odd_int_TCC1-1 nil 3237052399 3342859066 ("" (expand "odd?") (("" (inst 1 "0") (("" (assert) nil nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (odd? const-decl "bool" integers nil) (int_times_int_is_int application-judgement "int" integers nil)) 548 530 nil nil)) (odd_is_nzint 0 (odd_is_nzint-1 nil 3237052399 3342859067 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (int_times_int_is_int application-judgement "int" integers nil) (/= const-decl "boolean" notequal nil)) 501 490 nil nil)) (even_plus_even_is_even 0 (even_plus_even_is_even-1 nil 3237052399 3342859068 ("" (grind :if-match nil) (("" (inst 1 "j!1 + j!2") (("" (assert) nil nil)) nil)) nil) proved ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int_times_int_is_int application-judgement "int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even_int nonempty-type-eq-decl nil integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (even? const-decl "bool" integers nil)) 850 790 nil nil)) (even_minus_even_is_even 0 (even_minus_even_is_even-1 nil 3237052399 3342859068 ("" (grind :if-match nil) (("" (inst 1 "j!1 - j!2") (("" (assert) nil nil)) nil)) nil) proved ((- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int_times_int_is_int application-judgement "int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even_int nonempty-type-eq-decl nil integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (even? const-decl "bool" integers nil)) 812 770 nil nil)) (odd_plus_odd_is_even 0 (odd_plus_odd_is_even-1 nil 3237052399 3342859069 ("" (grind :if-match nil) (("" (inst 1 "1 + j!1 + j!2") (("" (assert) nil nil)) nil)) nil) proved ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int_times_int_is_int application-judgement "int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (even? const-decl "bool" integers nil)) 977 930 nil nil)) (odd_minus_odd_is_even 0 (odd_minus_odd_is_even-1 nil 3237052399 3342859070 ("" (grind :if-match nil) (("" (inst 1 "j!1 - j!2") (("" (assert) nil nil)) nil)) nil) proved ((- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_times_int_is_int application-judgement "int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (odd? const-decl "bool" integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (even? const-decl "bool" integers nil)) 882 830 nil nil)) (odd_plus_even_is_odd 0 (odd_plus_even_is_odd-1 nil 3237052399 3342859071 ("" (grind :if-match nil) (("" (inst 1 "j!1 + j!2") (("" (assert) nil nil)) nil)) nil) proved ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil) (even_int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (int_times_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (odd? const-decl "bool" integers nil)) 986 940 nil nil)) (odd_minus_even_is_odd 0 (odd_minus_even_is_odd-1 nil 3237052399 3342859072 ("" (grind :if-match nil) (("" (inst 1 "j!2 - j!1") (("" (assert) nil nil)) nil)) nil) proved ((- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int_plus_int_is_int application-judgement "int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil) (even_int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (int_times_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (odd? const-decl "bool" integers nil)) 936 890 nil nil)) (even_plus_odd_is_odd 0 (even_plus_odd_is_odd-1 nil 3237052399 3342859073 ("" (grind :if-match nil) (("" (inst 1 "j!1 + j!2") (("" (assert) nil nil)) nil)) nil) proved ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil) (even_int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (int_times_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (odd? const-decl "bool" integers nil)) 1024 960 nil nil)) (even_minus_odd_is_odd 0 (even_minus_odd_is_odd-1 nil 3282864786 3342859074 ("" (grind :if-match nil) (("" (inst 1 "j!1 - j!2 - 1") (("" (assert) nil nil)) nil)) nil) proved ((- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int_plus_int_is_int application-judgement "int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even? const-decl "bool" integers nil) (even_int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (int_times_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (odd? const-decl "bool" integers nil)) 973 910 t shostak)) (even_times_int_is_even 0 (even_times_int_is_even-1 nil 3237052399 3342859075 ("" (grind :if-match nil) (("" (inst 1 "i!1 * j!1") nil nil)) nil) proved ((* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even_int nonempty-type-eq-decl nil integers nil) (int_times_int_is_int application-judgement "int" integers nil) (even? const-decl "bool" integers nil)) 915 890 nil nil)) (int_times_even_is_even 0 (int_times_even_is_even-1 nil 3237052399 3342859076 ("" (grind :if-match nil) (("" (inst 1 "i!1 * j!1") nil nil)) nil) proved ((* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (even_times_int_is_even application-judgement "even_int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even_int nonempty-type-eq-decl nil integers nil) (int_times_int_is_int application-judgement "int" integers nil) (even? const-decl "bool" integers nil)) 938 890 nil nil)) (odd_times_odd_is_odd 0 (odd_times_odd_is_odd-1 nil 3237052399 3342859077 ("" (grind :if-match nil) (("" (inst 1 "j!1 + j!2 + 2 * j!1 * j!2") (("" (assert) nil nil)) nil)) nil) proved ((int_plus_int_is_int application-judgement "int" integers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (even_plus_even_is_even application-judgement "even_int" integers nil) (int_times_int_is_int application-judgement "int" integers nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (odd? const-decl "bool" integers nil)) 1113 1050 nil nil)) (minus_even_is_even 0 (minus_even_is_even-1 nil 3237052399 3342859078 ("" (grind :if-match nil) (("" (inst 1 "-j!1") (("" (assert) nil nil)) nil)) nil) proved ((- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (even_times_int_is_even application-judgement "even_int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even_int nonempty-type-eq-decl nil integers nil) (minus_int_is_int application-judgement "int" integers nil) (even? const-decl "bool" integers nil)) 873 840 nil nil)) (minus_odd_is_odd 0 (minus_odd_is_odd-1 nil 3237052399 3342859079 ("" (grind :if-match nil) (("" (inst 1 "-1 - j!1") (("" (assert) nil nil)) nil)) nil) proved ((int_minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (minus_even_is_even application-judgement "even_int" integers nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (odd_int nonempty-type-eq-decl nil integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (odd? const-decl "bool" integers nil)) 934 890 nil nil)))(naturalnumbers (upfrom_nat_is_nat 0 (upfrom_nat_is_nat-1 nil 3237052399 3342859079 ("" (subtype-tcc) nil nil) proved nil 11 10 nil nil)) (upfrom_posnat_is_posnat 0 (upfrom_posnat_is_posnat-1 nil 3237052399 3342859079 ("" (subtype-tcc) nil nil) proved nil 10 10 nil nil)) (above_nat_is_posnat 0 (above_nat_is_posnat-1 nil 3237052399 3342859079 ("" (subtype-tcc) nil nil) proved nil 10 10 nil nil)) (subrange_nat_is_nat 0 (subrange_nat_is_nat-1 nil 3237052399 3342859079 ("" (subtype-tcc) nil nil) proved nil 15 10 nil nil)) (subrange_posnat_is_posnat 0 (subrange_posnat_is_posnat-1 nil 3237052399 3342859079 ("" (subtype-tcc) nil nil) proved nil 14 10 nil nil)) (upto_TCC1 0 (upto_TCC1-1 nil 3237052399 3342859079 ("" (tcc :defs !) nil nil) proved nil 8 10 nil nil)) (pred_TCC1 0 (pred_TCC1-1 nil 3237052399 3342859079 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil)) 65 60 nil nil)) (tilde_TCC1 0 (tilde_TCC1-1 nil 3237052399 3342859080 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 132 110 nil nil)) (nat_induction 0 (nat_induction-1 nil 3237052399 3342859080 ("" (lemma "wf_induction[nat, (LAMBDA (m,n:nat): m < n)]") (("1" (beta) (("1" (skosimp*) (("1" (inst -1 "p!1") (("1" (split) (("1" (inst -1 "i!1") nil nil) ("2" (skosimp*) (("2" (case "x!1 = 0") (("1" (assert) nil nil) ("2" (inst -1 "x!1 - 1") (("1" (inst -3 "x!1 - 1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (delete 2) (("2" (lemma "wf_nat") (("2" (propax) nil nil)) nil)) nil)) nil) proved ((wf_nat formula-decl nil naturalnumbers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) nil (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (wf_induction formula-decl nil wf_induction nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil)) 267 230 nil nil)) (NAT_induction 0 (NAT_induction-1 nil 3237052399 3342859080 ("" (lemma "nat_induction") (("" (skosimp*) (("" (inst -1 "(LAMBDA (n:nat): (FORALL (m:nat): m <= n IMPLIES p!1(m)))") (("" (split) (("1" (inst -1 "i!1") (("1" (inst -1 "i!1") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -2 "0") (("2" (split) (("1" (assert) nil nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (inst -3 "m!1") (("3" (assert) (("3" (skosimp*) (("3" (inst -1 "k!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (<= const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nat_induction formula-decl nil naturalnumbers nil)) 384 340 nil nil)) (even_or_odd 0 (even_or_odd-1 nil 3252307123 3342859082 ("" (case "FORALL (n: nat): even?(n) IFF NOT odd?(n)") (("1" (skosimp) (("1" (case "x!1 >= 0") (("1" (inst -2 "x!1") nil nil) ("2" (inst -1 "-x!1") (("1" (grind :if-match nil) (("1" (inst 3 "-j!1") (("1" (assert) nil nil)) nil) ("2" (inst 2 "-j!2") (("2" (assert) nil nil)) nil) ("3" (inst 4 "-j!1-1") (("3" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (induct "n") (("1" (grind) nil nil) ("2" (grind :if-match nil) nil nil) ("3" (skosimp) (("3" (grind :if-match nil) (("3" (inst 2 "j!2 + 1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((int_plus_int_is_int application-judgement "int" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (even_plus_even_is_even application-judgement "even_int" integers nil) (odd_minus_odd_is_even application-judgement "even_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nat_induction formula-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (minus_int_is_int application-judgement "int" integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (even_times_int_is_even application-judgement "even_int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) nil (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (even? const-decl "bool" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (odd? const-decl "bool" integers nil)) 1671 1530 t shostak)) (odd_iff_not_even 0 (odd_iff_not_even-1 nil 3307950416 3342859082 ("" (skosimp*) (("" (rewrite "even_or_odd") (("" (assert) nil nil)) nil)) nil) proved ((even_or_odd formula-decl nil naturalnumbers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil)) 31 10 t shostak)) (even_iff_not_odd 0 (even_iff_not_odd-1 nil 3307950458 3342859082 ("" (skosimp*) (("" (rewrite "even_or_odd") nil nil)) nil) proved ((even_or_odd formula-decl nil naturalnumbers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil)) 9 0 t shostak)) (odd_or_even_int 0 (odd_or_even_int-1 nil 3307950482 3342859082 ("" (skosimp*) (("" (rewrite "even_or_odd") nil nil)) nil) proved ((even_or_odd formula-decl nil naturalnumbers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil)) 12 20 t shostak)) (odd_iff_even_succ 0 (odd_iff_even_succ-1 nil 3307950500 3342859083 ("" (skosimp*) (("" (expand "even?") (("" (expand "odd?") (("" (split) (("1" (skosimp*) (("1" (inst + "j!1+1") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst + "j!1-1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((even? const-decl "bool" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (odd? const-decl "bool" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil)) 391 360 t shostak)) (even_iff_odd_succ 0 (even_iff_odd_succ-1 nil 3307950534 3342859083 ("" (expand "even?") (("" (expand "odd?") (("" (propax) nil nil)) nil)) nil) proved ((even_times_int_is_even application-judgement "even_int" integers nil) (odd? const-decl "bool" integers nil) (even? const-decl "bool" integers nil) (int_plus_int_is_int application-judgement "int" integers nil)) 274 260 t shostak)) (even_plus1 0 (even_plus1-1 nil 3307980590 3342859083 ("" (skosimp) (("" (rewrite "even_iff_odd_succ") (("" (use "odd_iff_not_even") (("" (assert) nil nil)) nil)) nil)) nil) proved ((even_iff_odd_succ formula-decl nil naturalnumbers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (odd_iff_not_even formula-decl nil naturalnumbers nil)) 257 230 t shostak)) (odd_plus1 0 (odd_plus1-1 nil 3307980758 3342859083 ("" (skosimp) (("" (rewrite "odd_iff_even_succ") (("" (rewrite "even_iff_not_odd") (("" (assert) nil nil)) nil)) nil)) nil) proved ((odd_iff_even_succ formula-decl nil naturalnumbers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (even_iff_not_odd formula-decl nil naturalnumbers nil)) 233 230 t shostak)) (even_div2 0 (even_div2-1 nil 3307950586 3342859084 ("" (expand "even?") (("" (skosimp*) (("" (replace -1) (("" (assert) nil nil)) nil)) nil)) nil) proved ((even_times_int_is_even application-judgement "even_int" integers nil) (even? const-decl "bool" integers nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)) 299 270 t shostak)) (odd_div2 0 (odd_div2-1 nil 3307950609 3342859084 ("" (expand "odd?") (("" (skosimp*) (("" (replace -1) (("" (assert) nil nil)) nil)) nil)) nil) proved ((odd_minus_odd_is_even application-judgement "even_int" integers nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (odd? const-decl "bool" integers nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (int_minus_int_is_int application-judgement "int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil)) 348 320 t shostak)))(min_nat (min_TCC1 0 (min_TCC1-1 nil 3237052399 3342859084 ("" (inst + "lambda S: epsilon(lambda (n: nat): T_pred(n) AND S(n) AND
                                    FORALL x: S(x) IMPLIES n <= x)") (("" (skolem!) (("" (use "epsilon_ax[nat]") (("" (split -) (("1" (propax) nil nil) ("2" (delete 2) (("2" (assert) (("2" (lemma "wf_nat") (("2" (expand "well_founded?") (("2" (inst - "lambda (x: nat): T_pred(x) AND S!1(x)") (("2" (ground) (("1" (skolem!) (("1" (inst? +) (("1" (assert) (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (delete 2) (("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((well_founded? const-decl "bool" orders nil) nil nil (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (wf_nat formula-decl nil naturalnumbers nil) (epsilon_ax formula-decl nil epsilons nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (<= const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-subtype-decl nil min_nat nil) (T_pred const-decl "[nat -> boolean]" min_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 285 260 nil nil)) (min_def 0 (min_def-1 nil 3237052399 3342859084 ("" (skolem!) (("" (typepred "min(S!1)") (("" (expand "minimum?") (("" (ground) (("1" (replace*) nil nil) ("2" (inst? -2 :where -4) (("2" (inst? - :where -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat nil) (<= const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-subtype-decl nil min_nat nil) (T_pred const-decl "[nat -> boolean]" min_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (minimum? const-decl "bool" min_nat nil)) 97 90 nil nil)))(real_defs (abs_TCC1 0 (abs_TCC1-1 nil 3237052399 3342859085 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (minus_real_is_real application-judgement "real" reals nil)) 39 40 nil nil)) (abs_TCC2 0 (abs_TCC2-1 nil 3237052399 3342859085 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 39 20 nil nil)) (nonzero_abs_is_pos 0 (nonzero_abs_is_pos-1 nil 3237052399 3342859085 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nzreal nonempty-type-eq-decl nil reals nil)) 59 40 nil nil)) (rat_abs_is_nonneg 0 (rat_abs_is_nonneg-1 nil 3237052399 3342859085 ("" (skosimp) (("" (expand "abs") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((minus_rat_is_rat application-judgement "rat" rationals nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)) 41 40 nil nil)) (nzrat_abs_is_pos 0 (nzrat_abs_is_pos-1 nil 3237052399 3342859085 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nzrat nonempty-type-eq-decl nil rationals nil) (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}" real_defs nil) (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}" real_defs nil)) 119 110 nil nil)) (int_abs_is_nonneg 0 (int_abs_is_nonneg-1 nil 3237052399 3342859085 ("" (skosimp) (("" (expand "abs") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((minus_int_is_int application-judgement "int" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)) 102 100 nil nil)) (nzint_abs_is_pos 0 (nzint_abs_is_pos-1 nil 3237052399 3342859085 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}" real_defs nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil)) 221 200 nil nil)) (max_TCC1 0 (max_TCC1-1 nil 3237052399 3342859085 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 215 190 nil nil)) (max_TCC2 0 (max_TCC2-1 nil 3237052399 3342859086 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 201 200 nil nil)) (min_TCC1 0 (min_TCC1-1 nil 3237052399 3342859086 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 213 180 nil nil)) (min_TCC2 0 (min_TCC2-1 nil 3237052399 3342859086 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 213 190 nil nil)) (nzreal_max 0 (nzreal_max-1 nil 3237052399 3342859086 ("" (skosimp) (("" (expand "max") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)) 195 190 nil nil)) (nzreal_min 0 (nzreal_min-1 nil 3237052399 3342859087 ("" (skosimp) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 209 200 nil nil)) (nonneg_real_max 0 (nonneg_real_max-1 nil 3237052399 3342859087 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil)) 266 240 nil nil)) (nonneg_real_min 0 (nonneg_real_min-1 nil 3237052399 3342859087 ("" (skosimp) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 203 200 nil nil)) (posreal_max 0 (posreal_max-1 nil 3237052399 3342859087 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real_max application-judgement "{z: nonneg_real | z >= x AND z >= y}" real_defs nil) (nzreal_max application-judgement "{z: nzreal | z >= x AND z >= y}" real_defs nil)) 307 280 nil nil)) (posreal_min 0 (posreal_min-1 nil 3237052399 3342859088 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real_min application-judgement "{z: nonneg_real | z <= x AND z <= y}" real_defs nil) (nzreal_min application-judgement "{z: nzreal | z <= x AND z <= y}" real_defs nil)) 324 300 nil nil)) (rat_max 0 (rat_max-1 nil 3237052399 3342859088 ("" (skosimp) (("" (expand "max") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)) 261 250 nil nil)) (rat_min 0 (rat_min-1 nil 3237052399 3342859088 ("" (skosimp) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 284 270 nil nil)) (nzrat_max 0 (nzrat_max-1 nil 3237052399 3342859089 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nzrat nonempty-type-eq-decl nil rationals nil) (nzreal_max application-judgement "{z: nzreal | z >= x AND z >= y}" real_defs nil) (rat_max application-judgement "{s: rat | s >= q AND s >= r}" real_defs nil) (/= const-decl "boolean" notequal nil)) 396 380 nil nil)) (nzrat_min 0 (nzrat_min-1 nil 3237052399 3342859089 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nzrat nonempty-type-eq-decl nil rationals nil) (nzreal_min application-judgement "{z: nzreal | z <= x AND z <= y}" real_defs nil) (rat_min application-judgement "{s: rat | s <= q AND s <= r}" real_defs nil) (/= const-decl "boolean" notequal nil)) 433 410 nil nil)) (nonneg_rat_max 0 (nonneg_rat_max-1 nil 3237052399 3342859090 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (rat_max application-judgement "{s: rat | s >= q AND s >= r}" real_defs nil) (nonneg_real_max application-judgement "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)) 486 470 nil nil)) (nonneg_rat_min 0 (nonneg_rat_min-1 nil 3237052399 3342859090 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (rat_min application-judgement "{s: rat | s <= q AND s <= r}" real_defs nil) (nonneg_real_min application-judgement "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)) 539 510 nil nil)) (posrat_max 0 (posrat_max-1 nil 3237052399 3342859091 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nzrat_max application-judgement "{s: nzrat | s >= q AND s >= r}" real_defs nil) (posreal_max application-judgement "{z: posreal | z >= x AND z >= y}" real_defs nil)) 608 580 nil nil)) (posrat_min 0 (posrat_min-1 nil 3237052399 3342859092 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil) (nonneg_rat_min application-judgement "{s: nonneg_rat | s <= q AND s <= r}" real_defs nil) (nzrat_min application-judgement "{s: nzrat | s <= q AND s <= r}" real_defs nil) (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}" real_defs nil)) 689 630 nil nil)) (int_max 0 (int_max-1 nil 3237052399 3342859092 ("" (skosimp) (("" (expand "max") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)) 619 590 nil nil)) (int_min 0 (int_min-1 nil 3237052399 3342859093 ("" (skosimp) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 685 660 nil nil)) (nzint_max 0 (nzint_max-1 nil 3237052399 3342859094 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (nzrat_max application-judgement "{s: nzrat | s >= q AND s >= r}" real_defs nil) (int_max application-judgement "{k: int | i <= k AND j <= k}" real_defs nil) (/= const-decl "boolean" notequal nil)) 918 870 nil nil)) (nzint_min 0 (nzint_min-1 nil 3237052399 3342859095 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (nzrat_min application-judgement "{s: nzrat | s <= q AND s <= r}" real_defs nil) (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs nil) (/= const-decl "boolean" notequal nil)) 985 920 nil nil)) (nat_max 0 (nat_max-1 nil 3237052399 3342859096 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_max application-judgement "{k: int | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)) 1104 1060 nil nil)) (nat_min 0 (nat_min-1 nil 3237052399 3342859097 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs nil) (nonneg_rat_min application-judgement "{s: nonneg_rat | s <= q AND s <= r}" real_defs nil)) 1175 1120 nil nil)) (posint_max 0 (posint_max-1 nil 3237052399 3342859099 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posint nonempty-type-eq-decl nil integers nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nzint_max application-judgement "{k: nzint | i <= k AND j <= k}" real_defs nil) (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}" real_defs nil)) 1348 1280 nil nil)) (posint_min 0 (posint_min-1 nil 3237052399 3342859100 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posint nonempty-type-eq-decl nil integers nil) (nat_min application-judgement "{k: nat | k <= i AND k <= j}" real_defs nil) (nzint_min application-judgement "{k: nzint | k <= i AND k <= j}" real_defs nil) (posrat_min application-judgement "{s: posrat | s <= q AND s <= r}" real_defs nil)) 1465 1420 nil nil)) (min_le 0 (min_le-1 nil 3307951039 3342859102 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 1514 1450 t shostak)) (min_lt 0 (min_lt-1 nil 3307951075 3342859103 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 1513 1440 t shostak)) (min_ge 0 (min_ge-1 nil 3307951084 3342859105 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 1499 1450 t shostak)) (min_gt 0 (min_gt-1 nil 3307951093 3342859106 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 1506 1440 t shostak)) (le_min 0 (le_min-1 nil 3307951100 3342859108 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 1503 1440 t shostak)) (lt_min 0 (lt_min-1 nil 3307951109 3342859109 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 1508 1430 t shostak)) (ge_min 0 (ge_min-1 nil 3307951118 3342859111 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 1497 1450 t shostak)) (gt_min 0 (gt_min-1 nil 3307951125 3342859112 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)) 1510 1450 t shostak)) (max_le 0 (max_le-1 nil 3307951134 3342859114 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)) 1525 1440 t shostak)) (max_lt 0 (max_lt-1 nil 3307951142 3342859115 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)) 1498 1450 t shostak)) (max_ge 0 (max_ge-1 nil 3307951149 3342859117 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)) 1512 1460 t shostak)) (max_gt 0 (max_gt-1 nil 3307951158 3342859119 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)) 1492 1440 t shostak)) (le_max 0 (le_max-1 nil 3307951168 3342859120 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)) 1513 1440 t shostak)) (lt_max 0 (lt_max-1 nil 3307951177 3342859122 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)) 1495 1420 t shostak)) (ge_max 0 (ge_max-1 nil 3307951188 3342859123 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)) 1517 1440 t shostak)) (gt_max 0 (gt_max-1 nil 3307951197 3342859125 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)) 1506 1440 t shostak)))(real_props (inv_ne_0 0 (inv_ne_0-1 nil 3237052399 3342859125 ("" (grind) nil nil) proved nil 10 10 nil nil)) (both_sides_plus1 0 (both_sides_plus1-1 nil 3237052399 3342859125 ("" (tcc :defs !) nil nil) proved nil 10 10 nil nil)) (both_sides_plus2 0 (both_sides_plus2-1 nil 3237052399 3342859125 ("" (tcc :defs !) nil nil) proved nil 10 10 nil nil)) (both_sides_minus1 0 (both_sides_minus1-1 nil 3237052399 3342859125 ("" (tcc :defs !) nil nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil)) 53 50 nil nil)) (both_sides_minus2 0 (both_sides_minus2-1 nil 3237052399 3342859125 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_times_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 283 270 nil nil)) (both_sides_times1 0 (both_sides_times1-1 nil 3237052399 3342859125 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (real_times_real_is_real application-judgement "real" reals nil)) 216 190 nil nil)) (both_sides_times2 0 (both_sides_times2-1 nil 3237052399 3342859126 ("" (lemma "both_sides_times1") (("" (skosimp*) (("" (prop) (("1" (inst -2 "n0z!1" "x!1" "y!1") (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (/= const-decl "boolean" notequal nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (real_times_real_is_real application-judgement "real" reals nil) (both_sides_times1 formula-decl nil real_props nil)) 188 160 nil nil)) (both_sides_div1 0 (both_sides_div1-1 nil 3237052399 3342859126 ("" (grind) (("" (lemma "both_sides_times1") (("" (inst -1 "1/n0z!1" "x!1" "y!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil)) 163 160 nil nil)) (both_sides_div2 0 (both_sides_div2-1 nil 3237052399 3342859126 ("" (grind) (("" (lemma "both_sides_times1") (("" (inst-cp -1 "n0x!1" "n0z!1/n0x!1" "n0z!1/n0y!1") (("" (flatten) (("" (delete -2) (("" (split) (("1" (case "n0z!1 = (n0z!1/n0x!1) * n0x!1") (("1" (replace -1 :dir rl) (("1" (delete -1) (("1" (delete -3) (("1" (inst -2 "n0y!1" "n0z!1" "(n0z!1/n0y!1)*n0x!1") (("1" (flatten) (("1" (delete -2) (("1" (split) (("1" (case "(n0z!1 / n0y!1) * n0x!1 * n0y!1 = n0z!1 * n0x!1") (("1" (replace -1) (("1" (rewrite "both_sides_times2") nil nil)) nil) ("2" (assert) nil nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2 3 4 5) (("2" (use "div_def") (("2" (replace -1) (("2" (use "associative_mult") (("2" (replace -1 :dir rl) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil)) 184 160 nil nil)) (times_plus 0 (times_plus-1 nil 3237052399 3342859126 ("" (grind) nil nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 270 260 nil nil)) (times_div1 0 (times_div1-1 nil 3237052399 3342859126 ("" (grind) nil nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil)) 119 120 nil nil)) (times_div2 0 (times_div2-1 nil 3237052399 3342859127 ("" (grind) nil nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil)) 135 120 nil nil)) (div_times 0 (div_times-1 nil 3237052399 3342859127 ("" (grind) nil nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil)) 212 210 nil nil)) (div_eq_zero 0 (div_eq_zero-1 nil 3237052399 3342859127 ("" (grind) (("" (lemma "both_sides_times1") (("" (inst -1 "n0z!1" "x!1/n0z!1" "0") (("" (flatten) (("" (delete -1) (("" (split) (("1" (delete -2) (("1" (assert) (("1" (rewrite "commutative_mult") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil)) 244 210 nil nil)) (div_simp 0 (div_simp-1 nil 3237052399 3342859127 ("" (grind) nil nil) proved nil 10 10 nil nil)) (div_cancel1 0 (div_cancel1-1 nil 3237052399 3342859127 ("" (grind) nil nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil)) 71 70 nil nil)) (div_cancel2 0 (div_cancel2-1 nil 3237052399 3342859127 ("" (grind) nil nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil)) 88 80 nil nil)) (div_cancel3 0 (div_cancel3-1 nil 3237052399 3342859127 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil)) 210 190 nil nil)) (div_cancel4 0 (div_cancel4-1 nil 3243832638 3342859128 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil)) 216 200 t shostak)) (cross_mult 0 (cross_mult-1 nil 3237052399 3342859128 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil)) 292 260 nil nil)) (add_div 0 (add_div-1 nil 3237052399 3342859128 ("" (grind) nil nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil)) 276 250 nil nil)) (minus_div1 0 (minus_div1-1 nil 3237052399 3342859129 ("" (grind) nil nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil)) 309 300 nil nil)) (minus_div2 0 (minus_div2-1 nil 3237052399 3342859129 ("" (grind) nil nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil)) 155 150 nil nil)) (div_distributes 0 (div_distributes-1 nil 3237052399 3342859129 ("" (grind) nil nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 160 140 nil nil)) (div_distributes_minus 0 (div_distributes_minus-1 nil 3237052399 3342859129 ("" (grind) nil nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil)) 155 150 nil nil)) (div_div1 0 (div_div1-1 nil 3237052399 3342859129 ("" (grind) nil nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil)) 150 150 nil nil)) (div_div2 0 (div_div2-1 nil 3237052399 3342859130 ("" (grind) nil nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil)) 170 150 nil nil)) (idem_add_is_zero 0 (idem_add_is_zero-1 nil 3237052399 3342859130 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_times_real_is_real application-judgement "real" reals nil)) 227 220 nil nil)) (zero_times1 0 (zero_times1-1 nil 3237052399 3342859130 ("" (grind) nil nil) proved nil 7 10 nil nil)) (zero_times2 0 (zero_times2-1 nil 3237052399 3342859130 ("" (grind) nil nil) proved nil 6 10 nil nil)) (zero_times3 0 (zero_times3-1 nil 3237052399 3342859130 ("" (skosimp*) (("" (prop) (("1" (lemma "trichotomy") (("1" (inst-cp -1 "x!1") (("1" (inst -1 "y!1") (("1" (assert) (("1" (prop) (("1" (lemma "posreal_mult_closed") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "posreal_mult_closed") (("2" (inst -1 "-x!1" "y!1") (("2" (assert) nil nil)) nil)) nil) ("3" (lemma "posreal_mult_closed") (("3" (inst -1 "x!1" "-y!1") (("3" (assert) nil nil)) nil)) nil) ("4" (lemma "posreal_mult_closed") (("4" (inst -1 "-x!1" "-y!1") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_times_real_is_real application-judgement "real" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (minus_real_is_real application-judgement "real" reals nil) (posreal_mult_closed formula-decl nil real_axioms nil) (trichotomy formula-decl nil real_axioms nil)) 165 140 nil nil)) (neg_times_neg 0 (neg_times_neg-1 nil 3237052399 3342859130 ("" (grind) nil nil) proved ((minus_real_is_real application-judgement "real" reals nil)) 24 20 nil nil)) (zero_is_neg_zero 0 (zero_is_neg_zero-1 nil 3237052399 3342859130 ("" (grind) nil nil) proved ((minus_even_is_even application-judgement "even_int" integers nil)) 75 70 nil nil)) (strict_lt 0 (strict_lt-1 nil 3237052399 3342859130 ("" (grind) nil nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (strict_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (strict_total_order? const-decl "bool" orders nil)) 101 90 nil nil)) (trich_lt 0 (trich_lt-1 nil 3237052399 3342859130 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 45 20 nil nil)) (tri_unique_lt1 0 (tri_unique_lt1-1 nil 3237052399 3342859131 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (/= const-decl "boolean" notequal nil)) 34 30 nil nil)) (tri_unique_lt2 0 (tri_unique_lt2-1 nil 3237052399 3342859131 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 44 30 nil nil)) (zero_not_lt_zero 0 (zero_not_lt_zero-1 nil 3237052399 3342859131 ("" (grind) nil nil) proved nil 6 10 nil nil)) (neg_lt 0 (neg_lt-1 nil 3237052399 3342859131 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (minus_real_is_real application-judgement "real" reals nil)) 54 50 nil nil)) (pos_times_lt 0 (pos_times_lt-1 nil 3237052399 3342859131 ("" (grind) (("1" (lemma "posreal_mult_closed") (("1" (case "x!1 = 0") (("1" (assert) nil nil) ("2" (case "y!1 = 0") (("1" (assert) nil nil) ("2" (inst -1 "x!1" "-y!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (case "x!1 = 0") (("1" (assert) nil nil) ("2" (case "y!1 = 0") (("1" (assert) nil nil) ("2" (lemma "posreal_mult_closed") (("2" (inst -1 "-x!1" "y!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (lemma "posreal_mult_closed") (("3" (inst -1 "x!1" "y!1") (("3" (assert) nil nil)) nil)) nil) ("4" (lemma "posreal_mult_closed") (("4" (inst -1 "-x!1" "-y!1") (("4" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (minus_real_is_real application-judgement "real" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (real_times_real_is_real application-judgement "real" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 300 260 nil nil)) (neg_times_lt 0 (neg_times_lt-1 nil 3237052399 3342859131 ("" (skosimp*) (("" (lemma "pos_times_lt") (("" (inst -1 "x!1" "-y!1") (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((pos_times_lt formula-decl nil real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_real_is_real application-judgement "real" reals nil)) 168 160 nil nil)) (quotient_pos_lt 0 (quotient_pos_lt-1 nil 3237052399 3342859131 ("" (skosimp*) (("" (lemma "inverse_mult") (("" (inst?) (("" (lemma "pos_times_lt") (("" (inst -1 "n0x!1" "1/n0x!1") (("" (replace -2) (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((inverse_mult formula-decl nil number_fields nil) (pos_times_lt formula-decl nil real_props nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 243 230 nil nil)) (quotient_neg_lt 0 (quotient_neg_lt-1 nil 3237052399 3342859132 ("" (skosimp*) (("" (lemma "quotient_pos_lt") (("" (inst -1 "-n0x!1") (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((quotient_pos_lt formula-decl nil real_props nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)) 221 220 nil nil)) (pos_div_lt 0 (pos_div_lt-1 nil 3237052399 3342859132 ("" (skosimp*) (("" (lemma "pos_times_lt") (("" (inst -1 "x!1" "1/n0y!1") (("" (lemma "quotient_pos_lt") (("" (inst -1 "n0y!1") (("" (lemma "quotient_neg_lt") (("" (inst -1 "n0y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pos_times_lt formula-decl nil real_props nil) (quotient_pos_lt formula-decl nil real_props nil) (quotient_neg_lt formula-decl nil real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil)) 294 260 nil nil)) (neg_div_lt 0 (neg_div_lt-1 nil 3237052399 3342859132 ("" (skosimp*) (("" (lemma "pos_div_lt") (("" (inst -1 "n0y!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((pos_div_lt formula-decl nil real_props nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_real_is_real application-judgement "real" reals nil)) 193 180 nil nil)) (div_mult_pos_lt1 0 (div_mult_pos_lt1-1 nil 3237052399 3342859133 ("" (grind) (("1" (lemma "posreal_mult_closed") (("1" (inst -1 "x!1 - (z!1/py!1)" "py!1") (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "posreal_mult_closed") (("2" (inst -1 "x!1*py!1 - z!1" "1/py!1") (("2" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (posreal_mult_closed formula-decl nil real_axioms nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real_minus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 578 530 nil nil)) (div_mult_pos_lt2 0 (div_mult_pos_lt2-1 nil 3237052399 3342859133 ("" (lemma "div_mult_pos_lt1") (("" (skosimp) (("" (inst -1 "py!1" "-x!1" "-z!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_real_is_real application-judgement "real" reals nil) (div_mult_pos_lt1 formula-decl nil real_props nil)) 277 260 nil nil)) (div_mult_neg_lt1 0 (div_mult_neg_lt1-1 nil 3237052399 3342859133 ("" (lemma "div_mult_pos_lt2") (("" (skosimp) (("" (inst -1 "-ny!1" "-x!1" "z!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (minus_real_is_real application-judgement "real" reals nil) (div_mult_pos_lt2 formula-decl nil real_props nil)) 281 260 nil nil)) (div_mult_neg_lt2 0 (div_mult_neg_lt2-1 nil 3237052399 3342859134 ("" (skosimp) (("" (lemma "div_mult_pos_lt1") (("" (inst -1 "-ny!1" "-x!1" "z!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((div_mult_pos_lt1 formula-decl nil real_props nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (minus_real_is_real application-judgement "real" reals nil)) 284 260 nil nil)) (both_sides_plus_lt1 0 (both_sides_plus_lt1-1 nil 3237052399 3342859134 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 167 150 nil nil)) (both_sides_plus_lt2 0 (both_sides_plus_lt2-1 nil 3237052399 3342859134 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 167 150 nil nil)) (both_sides_minus_lt1 0 (both_sides_minus_lt1-1 nil 3237052399 3342859134 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 141 110 nil nil)) (both_sides_minus_lt2 0 (both_sides_minus_lt2-1 nil 3237052399 3342859134 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 137 120 nil nil)) (both_sides_times_pos_lt1 0 (both_sides_times_pos_lt1-1 nil 3237052399 3342859135 ("" (grind) (("1" (lemma "posreal_mult_closed") (("1" (inst -1 "(y!1 - x!1) * pz!1" "1/pz!1") (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "posreal_mult_closed") (("2" (inst -1 "y!1-x!1" "pz!1") (("2" (assert) nil nil)) nil)) nil)) nil) proved ((posreal_mult_closed formula-decl nil real_axioms nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 638 580 nil nil)) (both_sides_times_pos_lt2 0 (both_sides_times_pos_lt2-1 nil 3237052399 3342859135 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst -1 "pz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 344 330 nil nil)) (both_sides_times_neg_lt1 0 (both_sides_times_neg_lt1-1 nil 3237052399 3342859136 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst -1 "-nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 279 270 nil nil)) (both_sides_times_neg_lt2 0 (both_sides_times_neg_lt2-1 nil 3237052399 3342859136 ("" (lemma "both_sides_times_neg_lt1") (("" (skosimp) (("" (inst -1 "nz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_lt1 formula-decl nil real_props nil)) 359 330 nil nil)) (both_sides_div_pos_lt1 0 (both_sides_div_pos_lt1-1 nil 3237052399 3342859136 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst -1 "1/pz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 291 270 nil nil)) (both_sides_div_pos_lt2 0 (both_sides_div_pos_lt2-1 nil 3237052399 3342859137 ("" (skosimp*) (("" (lemma "both_sides_times_pos_lt1") (("" (inst -1 "px!1 * py!1" "pz!1 / px!1" "pz!1 / py!1") (("" (assert) (("" (grind) (("1" (case "pz!1 / px!1 * (px!1 * py!1) = pz!1 * py!1") (("1" (replace -1) (("1" (hide -1) (("1" (case "pz!1 / py!1 * (px!1 * py!1) = pz!1 * px!1") (("1" (replace -1) (("1" (hide -1) (("1" (rewrite "both_sides_times_pos_lt2") nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "pz!1 / px!1 * (px!1 * py!1) = pz!1 * py!1") (("1" (case "pz!1 / py!1 * (px!1 * py!1) = pz!1 * px!1") (("1" (replace -1) (("1" (replace -2) (("1" (hide -1 -2) (("1" (lemma "both_sides_times_pos_lt2") (("1" (inst?) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_times_pos_lt1 formula-decl nil real_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (both_sides_times_pos_lt2 formula-decl nil real_props nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil)) 597 550 nil nil)) (both_sides_div_pos_lt3 0 (both_sides_div_pos_lt3-1 nil 3237052399 3342859137 ("" (skosimp*) (("" (lemma "both_sides_div_pos_lt2") (("" (inst -1 "py!1" "px!1" "-nz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((both_sides_div_pos_lt2 formula-decl nil real_props nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (npreal_div_posreal_is_npreal application-judgement "npreal" real_types nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)) 276 250 nil nil)) (both_sides_div_neg_lt1 0 (both_sides_div_neg_lt1-1 nil 3237052399 3342859138 ("" (lemma "both_sides_div_pos_lt1") (("" (skosimp) (("" (inst -1 "-nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil)) 214 200 nil nil)) (both_sides_div_neg_lt2 0 (both_sides_div_neg_lt2-1 nil 3237052399 3342859138 ("" (lemma "both_sides_div_pos_lt2") (("" (skosimp) (("" (inst -1 "-ny!1" "-nx!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nnreal_div_negreal_is_npreal application-judgement "npreal" real_types nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (both_sides_div_pos_lt2 formula-decl nil real_props nil)) 313 290 nil nil)) (both_sides_div_neg_lt3 0 (both_sides_div_neg_lt3-1 nil 3237052399 3342859138 ("" (lemma "both_sides_div_pos_lt3") (("" (skosimp) (("" (inst -1 "nz!1" "-ny!1" "-nx!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (negreal_div_negreal_is_posreal application-judgement "posreal" real_types nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (both_sides_div_pos_lt3 formula-decl nil real_props nil)) 295 260 nil nil)) (lt_plus_lt1 0 (lt_plus_lt1-1 nil 3237052399 3342859138 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 164 140 nil nil)) (lt_plus_lt2 0 (lt_plus_lt2-1 nil 3237052399 3342859139 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 165 150 nil nil)) (lt_minus_lt1 0 (lt_minus_lt1-1 nil 3237052399 3342859139 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 134 110 nil nil)) (lt_minus_lt2 0 (lt_minus_lt2-1 nil 3237052399 3342859139 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 137 130 nil nil)) (lt_times_lt_pos1 0 (lt_times_lt_pos1-1 nil 3237052399 3342859139 ("" (skosimp*) (("" (case "nnz!1 = 0") (("1" (assert) (("1" (lemma "pos_times_lt") (("1" (inst -1 "y!1" "w!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "both_sides_times_pos_lt1") (("2" (inst-cp -1 "nnz!1" "px!1" "y!1") (("1" (inst -1 "y!1" "nnz!1" "w!1") (("1" (grind) nil nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_times_lt formula-decl nil real_props nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) nil (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) nil (AND const-decl "[bool, bool -> bool]" booleans nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 447 390 nil nil)) (lt_times_lt_pos2 0 (lt_times_lt_pos2-1 nil 3237052399 3342859140 ("" (skosimp*) (("" (case "nnx!1 = 0") (("1" (assert) (("1" (lemma "pos_times_lt") (("1" (inst -1 "y!1" "w!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "both_sides_times_pos_lt1") (("2" (inst-cp -1 "pz!1" "nnx!1" "y!1") (("2" (inst -1 "y!1" "pz!1" "w!1") (("1" (grind) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_times_lt formula-decl nil real_props nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) nil (AND const-decl "[bool, bool -> bool]" booleans nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 483 430 nil nil)) (lt_div_lt_pos1_TCC1 0 (lt_div_lt_pos1_TCC1-1 nil 3237052399 3342859140 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (/= const-decl "boolean" notequal nil)) 64 60 nil nil)) (lt_div_lt_pos1 0 (lt_div_lt_pos1-1 nil 3237052399 3342859140 ("" (grind) (("" (delete -5 -6) (("" (lemma "both_sides_div_pos_lt1") (("" (inst -1 "w!1" "px!1" "y!1") (("" (lemma "both_sides_div_pos_lt2") (("" (inst -1 "w!1" "pz!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_div_pos_lt2 formula-decl nil real_props nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 314 260 nil nil)) (lt_div_lt_pos2_TCC1 0 (lt_div_lt_pos2_TCC1-1 nil 3237052399 3342859140 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (/= const-decl "boolean" notequal nil)) 59 60 nil nil)) (lt_div_lt_pos2 0 (lt_div_lt_pos2-1 nil 3237052399 3342859141 ("" (grind) (("" (delete -4 -5) (("" (lemma "both_sides_div_pos_lt1") (("" (inst -1 "w!1" "nnx!1" "y!1") (("" (lemma "both_sides_div_pos_lt2") (("" (inst -1 "w!1" "pz!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_div_pos_lt2 formula-decl nil real_props nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 302 260 nil nil)) (lt_times_lt_neg1 0 (lt_times_lt_neg1-1 nil 3237052399 3342859141 ("" (lemma "lt_times_lt_pos1") (("" (skosimp) (("" (inst -1 "-npw!1" "-ny!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (npreal_times_npreal_is_nnreal application-judgement "nnreal" real_types nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_real_is_real application-judgement "real" reals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (lt_times_lt_pos1 formula-decl nil real_props nil)) 329 300 nil nil)) (lt_times_lt_neg2 0 (lt_times_lt_neg2-1 nil 3237052399 3342859141 ("" (lemma "lt_times_lt_pos2") (("" (skosimp) (("" (inst -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (npreal_times_npreal_is_nnreal application-judgement "nnreal" real_types nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_real_is_real application-judgement "real" reals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (lt_times_lt_pos2 formula-decl nil real_props nil)) 304 290 nil nil)) (lt_div_lt_neg1_TCC1 0 (lt_div_lt_neg1_TCC1-1 nil 3237052399 3342859142 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (/= const-decl "boolean" notequal nil)) 76 60 nil nil)) (lt_div_lt_neg1 0 (lt_div_lt_neg1-1 nil 3237052399 3342859142 ("" (lemma "lt_div_lt_pos1") (("" (skosimp) (("" (inst -1 "-ny!1" "-nw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (minus_real_is_real application-judgement "real" reals nil) (lt_div_lt_pos1 formula-decl nil real_props nil)) 251 230 nil nil)) (lt_div_lt_neg2_TCC1 0 (lt_div_lt_neg2_TCC1-1 nil 3237052399 3342859142 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (/= const-decl "boolean" notequal nil)) 69 50 nil nil)) (lt_div_lt_neg2 0 (lt_div_lt_neg2-1 nil 3237052399 3342859142 ("" (lemma "lt_div_lt_pos2") (("" (skosimp) (("" (inst -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_real_is_real application-judgement "real" reals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (lt_div_lt_pos2 formula-decl nil real_props nil)) 258 230 nil nil)) (total_le 0 (total_le-1 nil 3237052399 3342859142 ("" (tcc :defs !) nil nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil) (dichotomous? const-decl "bool" orders nil) (total_order? const-decl "bool" orders nil)) 132 110 nil nil)) (dich_le 0 (dich_le-1 nil 3237052399 3342859142 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 44 30 nil nil)) (zero_le_zero 0 (zero_le_zero-1 nil 3237052399 3342859142 ("" (tcc :defs !) nil nil) proved nil 6 10 nil nil)) (neg_le 0 (neg_le-1 nil 3237052399 3342859143 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (minus_real_is_real application-judgement "real" reals nil)) 53 50 nil nil)) (pos_times_le 0 (pos_times_le-1 nil 3237052399 3342859143 ("" (lemma "pos_times_lt") (("" (skosimp) (("" (case "x!1 = 0") (("1" (grind) nil nil) ("2" (case "y!1 = 0") (("1" (grind) nil nil) ("2" (inst?) (("2" (lemma "zero_times3") (("2" (inst?) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((zero_times3 formula-decl nil real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (pos_times_lt formula-decl nil real_props nil)) 388 350 nil nil)) (neg_times_le 0 (neg_times_le-1 nil 3237052399 3342859143 ("" (lemma "pos_times_le") (("" (skosimp) (("" (inst -1 "x!1" "-y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_real_is_real application-judgement "real" reals nil) (pos_times_le formula-decl nil real_props nil)) 192 180 nil nil)) (quotient_pos_le 0 (quotient_pos_le-1 nil 3237052399 3342859143 ("" (lemma "quotient_pos_lt") (("" (skosimp) (("" (inst?) (("" (lemma "inv_ne_0") (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((inv_ne_0 formula-decl nil real_props nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (quotient_pos_lt formula-decl nil real_props nil)) 195 190 nil nil)) (quotient_neg_le 0 (quotient_neg_le-1 nil 3237052399 3342859144 ("" (lemma "quotient_pos_le") (("" (skosimp) (("" (inst -1 "-n0x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (quotient_pos_le formula-decl nil real_props nil)) 243 210 nil nil)) (pos_div_le 0 (pos_div_le-1 nil 3237052399 3342859145 ("" (lemma "pos_div_lt") (("" (skosimp) (("" (case "x!1 = 0") (("1" (grind) nil nil) ("2" (inst?) (("2" (lemma "zero_times3") (("2" (inst -1 "x!1" "1/n0y!1") (("2" (lemma "inv_ne_0") (("2" (inst -1 "n0y!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((/= const-decl "boolean" notequal nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real_times_real_is_real application-judgement "real" reals nil) (inv_ne_0 formula-decl nil real_props nil) (zero_times3 formula-decl nil real_props nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (pos_div_lt formula-decl nil real_props nil)) 852 800 nil nil)) (neg_div_le 0 (neg_div_le-1 nil 3237052399 3342859145 ("" (lemma "pos_div_le") (("" (skosimp) (("" (inst -1 "-n0y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (pos_div_le formula-decl nil real_props nil)) 201 200 nil nil)) (div_mult_pos_le1 0 (div_mult_pos_le1-1 nil 3237052399 3342859145 ("" (lemma "div_mult_pos_lt1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) (("" (case-replace "z!1 = x!1 * py!1") (("1" (assert) (("1" (case-replace "x!1 * py!1 / py!1 = x!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3 4) (("2" (use "div_def") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (div_def formula-decl nil number_fields nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_lt1 formula-decl nil real_props nil)) 451 410 nil nil)) (div_mult_pos_le2 0 (div_mult_pos_le2-1 nil 3237052399 3342859146 ("" (lemma "div_mult_pos_lt2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) (("" (case-replace "z!1 = x!1 * py!1") (("1" (assert) (("1" (case-replace "x!1 * py!1 / py!1 = x!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3 4) (("2" (use "div_def") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (div_def formula-decl nil number_fields nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_lt2 formula-decl nil real_props nil)) 452 420 nil nil)) (div_mult_neg_le1 0 (div_mult_neg_le1-1 nil 3237052399 3342859146 ("" (lemma "div_mult_neg_lt1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) (("" (case-replace "z!1 = x!1 * ny!1") (("1" (assert) (("1" (case-replace "x!1 * ny!1 / ny!1 = x!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3 4) (("2" (use "div_def") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (div_def formula-decl nil number_fields nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nnreal_div_negreal_is_npreal application-judgement "npreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_lt1 formula-decl nil real_props nil)) 421 390 nil nil)) (div_mult_neg_le2 0 (div_mult_neg_le2-1 nil 3237052399 3342859147 ("" (lemma "div_mult_neg_lt2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) (("" (case-replace "z!1 = x!1 * ny!1") (("1" (assert) (("1" (case-replace "x!1 * ny!1 / ny!1 = x!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3 4) (("2" (use "div_def") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (div_def formula-decl nil number_fields nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nnreal_div_negreal_is_npreal application-judgement "npreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_lt2 formula-decl nil real_props nil)) 437 390 nil nil)) (both_sides_plus_le1 0 (both_sides_plus_le1-1 nil 3237052399 3342859147 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 168 150 nil nil)) (both_sides_plus_le2 0 (both_sides_plus_le2-1 nil 3237052399 3342859147 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 168 150 nil nil)) (both_sides_minus_le1 0 (both_sides_minus_le1-1 nil 3237052399 3342859147 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 137 130 nil nil)) (both_sides_minus_le2 0 (both_sides_minus_le2-1 nil 3237052399 3342859147 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 138 110 nil nil)) (both_sides_times_pos_le1 0 (both_sides_times_pos_le1-1 nil 3237052399 3342859148 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst?) (("" (inst -1 "y!1") (("" (grind) (("" (lemma "both_sides_times1") (("" (inst?) (("" (inst -1 "y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_times1 formula-decl nil real_props nil) (/= const-decl "boolean" notequal nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (real_times_real_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 325 290 nil nil)) (both_sides_times_pos_le2 0 (both_sides_times_pos_le2-1 nil 3237052399 3342859148 ("" (lemma "both_sides_times_pos_le1") (("" (skosimp) (("" (inst -1 "pz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_le1 formula-decl nil real_props nil)) 343 330 nil nil)) (both_sides_times_neg_le1 0 (both_sides_times_neg_le1-1 nil 3237052399 3342859148 ("" (lemma "both_sides_times_pos_le1") (("" (skosimp) (("" (inst -1 "-nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (both_sides_times_pos_le1 formula-decl nil real_props nil)) 277 260 nil nil)) (both_sides_times_neg_le2 0 (both_sides_times_neg_le2-1 nil 3237052399 3342859149 ("" (lemma "both_sides_times_neg_le1") (("" (skosimp) (("" (inst -1 "nz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_le1 formula-decl nil real_props nil)) 360 320 nil nil)) (both_sides_div_pos_le1 0 (both_sides_div_pos_le1-1 nil 3237052399 3342859149 ("" (lemma "both_sides_div_pos_lt1") (("" (skosimp) (("" (inst?) (("" (inst -1 "y!1") (("" (grind) (("" (lemma "both_sides_times_pos_le1") (("" (inst -1 "1/pz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil)) 180 170 nil nil)) (both_sides_div_pos_le2 0 (both_sides_div_pos_le2-1 nil 3237052399 3342859149 ("" (lemma "both_sides_div_pos_lt2") (("" (skosimp) (("" (inst?) (("" (inst -1 "py!1") (("" (grind) (("" (lemma "both_sides_div2") (("" (inst?) (("" (inst -1 "py!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_div2 formula-decl nil real_props nil) (/= const-decl "boolean" notequal nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt2 formula-decl nil real_props nil)) 257 240 nil nil)) (both_sides_div_pos_le3 0 (both_sides_div_pos_le3-1 nil 3237052399 3342859149 ("" (lemma "both_sides_div_pos_le2") (("" (skosimp) (("" (inst -1 "py!1" "px!1" "-nz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (npreal_div_posreal_is_npreal application-judgement "npreal" real_types nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (both_sides_div_pos_le2 formula-decl nil real_props nil)) 273 260 nil nil)) (both_sides_div_neg_le1 0 (both_sides_div_neg_le1-1 nil 3237052399 3342859150 ("" (lemma "both_sides_div_pos_le1") (("" (skosimp) (("" (inst -1 "-nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (both_sides_div_pos_le1 formula-decl nil real_props nil)) 214 200 nil nil)) (both_sides_div_neg_le2 0 (both_sides_div_neg_le2-1 nil 3237052399 3342859150 ("" (lemma "both_sides_div_pos_le2") (("" (skosimp) (("" (inst -1 "-ny!1" "-nx!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nnreal_div_negreal_is_npreal application-judgement "npreal" real_types nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (both_sides_div_pos_le2 formula-decl nil real_props nil)) 324 290 nil nil)) (both_sides_div_neg_le3 0 (both_sides_div_neg_le3-1 nil 3237052399 3342859150 ("" (lemma "both_sides_div_pos_le3") (("" (skosimp) (("" (inst -1 "nz!1" "-ny!1" "-nx!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (negreal_div_negreal_is_posreal application-judgement "posreal" real_types nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (both_sides_div_pos_le3 formula-decl nil real_props nil)) 284 270 nil nil)) (le_plus_le 0 (le_plus_le-1 nil 3237052399 3342859151 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 165 150 nil nil)) (le_minus_le 0 (le_minus_le-1 nil 3237052399 3342859151 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 140 120 nil nil)) (le_times_le_pos 0 (le_times_le_pos-1 nil 3237052399 3342859151 ("" (lemma "lt_times_lt_pos1") (("" (skosimp) (("" (case "nnz!1 = w!1") (("1" (lemma "both_sides_times_pos_le1") (("1" (inst -1 "w!1" "nnx!1" "y!1") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ("2" (inst -1 "nnz!1" "nnx!1" "w!1" "y!1") (("1" (grind) nil nil) ("2" (grind) (("2" (lemma "pos_times_le") (("2" (inst -1 "y!1" "w!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved (nil (pos_times_le formula-decl nil real_props nil) (both_sides_times_pos_le1 formula-decl nil real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) nil (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (lt_times_lt_pos1 formula-decl nil real_props nil)) 330 310 nil nil)) (le_div_le_pos_TCC1 0 (le_div_le_pos_TCC1-1 nil 3237052399 3342859151 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (/= const-decl "boolean" notequal nil)) 72 50 nil nil)) (le_div_le_pos 0 (le_div_le_pos-1 nil 3237052399 3342859152 ("" (lemma "le_times_le_pos") (("" (skosimp) (("" (inst -1 "nnx!1" "1/w!1" "1/pz!1" "y!1") (("1" (grind) (("1" (rewrite "both_sides_div_pos_le2") nil nil)) nil) ("2" (assert) (("2" (lemma "quotient_pos_lt") (("2" (inst -1 "w!1") (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil) proved ((nonzero_real nonempty-type-eq-decl nil reals nil) (quotient_pos_lt formula-decl nil real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (both_sides_div_pos_le2 formula-decl nil real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) nil (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (le_times_le_pos formula-decl nil real_props nil)) 422 380 nil nil)) (le_times_le_neg 0 (le_times_le_neg-1 nil 3237052399 3342859152 ("" (lemma "le_times_le_pos") (("" (skosimp) (("" (inst -1 "-npy!1" "-npw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (npreal_times_npreal_is_nnreal application-judgement "nnreal" real_types nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_real_is_real application-judgement "real" reals nil) (le_times_le_pos formula-decl nil real_props nil)) 230 210 nil nil)) (le_div_le_neg_TCC1 0 (le_div_le_neg_TCC1-1 nil 3237052399 3342859152 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (/= const-decl "boolean" notequal nil)) 71 60 nil nil)) (le_div_le_neg 0 (le_div_le_neg-1 nil 3237052399 3342859152 ("" (lemma "le_div_le_pos") (("" (skosimp) (("" (inst -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_real_is_real application-judgement "real" reals nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (le_div_le_pos formula-decl nil real_props nil)) 259 230 nil nil)) (strict_gt 0 (strict_gt-1 nil 3237052399 3342859152 ("" (tcc :defs !) nil nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (strict_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (strict_total_order? const-decl "bool" orders nil)) 102 80 nil nil)) (trich_gt 0 (trich_gt-1 nil 3237052399 3342859152 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 31 30 nil nil)) (tri_unique_gt1 0 (tri_unique_gt1-1 nil 3237052399 3342859153 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (/= const-decl "boolean" notequal nil)) 51 30 nil nil)) (tri_unique_gt2 0 (tri_unique_gt2-1 nil 3237052399 3342859153 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 29 30 nil nil)) (zero_not_gt_zero 0 (zero_not_gt_zero-1 nil 3237052399 3342859153 ("" (tcc :defs !) nil nil) proved nil 6 10 nil nil)) (neg_gt 0 (neg_gt-1 nil 3237052399 3342859153 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (minus_real_is_real application-judgement "real" reals nil)) 63 50 nil nil)) (pos_times_gt 0 (pos_times_gt-1 nil 3237052399 3342859153 ("" (lemma "pos_times_lt") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_times_lt formula-decl nil real_props nil)) 256 230 nil nil)) (neg_times_gt 0 (neg_times_gt-1 nil 3237052399 3342859153 ("" (lemma "neg_times_lt") (("" (skosimp) (("" (inst -1 "x!1" "y!1") (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (neg_times_lt formula-decl nil real_props nil)) 238 220 nil nil)) (quotient_pos_gt 0 (quotient_pos_gt-1 nil 3237052399 3342859153 ("" (lemma "quotient_pos_lt") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (quotient_pos_lt formula-decl nil real_props nil)) 179 180 nil nil)) (quotient_neg_gt 0 (quotient_neg_gt-1 nil 3237052399 3342859154 ("" (lemma "quotient_neg_lt") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (quotient_neg_lt formula-decl nil real_props nil)) 199 170 nil nil)) (pos_div_gt 0 (pos_div_gt-1 nil 3237052399 3342859154 ("" (lemma "pos_div_lt") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_div_lt formula-decl nil real_props nil)) 269 240 nil nil)) (neg_div_gt 0 (neg_div_gt-1 nil 3237052399 3342859154 ("" (lemma "neg_div_lt") (("" (skosimp) (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (neg_div_lt formula-decl nil real_props nil)) 275 250 nil nil)) (div_mult_pos_gt1 0 (div_mult_pos_gt1-1 nil 3237052399 3342859155 ("" (lemma "div_mult_pos_lt1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_lt1 formula-decl nil real_props nil)) 267 250 nil nil)) (div_mult_pos_gt2 0 (div_mult_pos_gt2-1 nil 3237052399 3342859155 ("" (lemma "div_mult_pos_lt2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_lt2 formula-decl nil real_props nil)) 264 250 nil nil)) (div_mult_neg_gt1 0 (div_mult_neg_gt1-1 nil 3237052399 3342859155 ("" (lemma "div_mult_neg_lt1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_lt1 formula-decl nil real_props nil)) 269 250 nil nil)) (div_mult_neg_gt2 0 (div_mult_neg_gt2-1 nil 3237052399 3342859156 ("" (lemma "div_mult_neg_lt2") (("" (skosimp) (("" (grind) nil nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_lt2 formula-decl nil real_props nil)) 348 320 nil nil)) (both_sides_plus_gt1 0 (both_sides_plus_gt1-1 nil 3237052399 3342859156 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 168 150 nil nil)) (both_sides_plus_gt2 0 (both_sides_plus_gt2-1 nil 3237052399 3342859156 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 166 150 nil nil)) (both_sides_minus_gt1 0 (both_sides_minus_gt1-1 nil 3237052399 3342859156 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 140 130 nil nil)) (both_sides_minus_gt2 0 (both_sides_minus_gt2-1 nil 3237052399 3342859156 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 136 110 nil nil)) (both_sides_times_pos_gt1 0 (both_sides_times_pos_gt1-1 nil 3237052399 3342859157 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil)) 268 260 nil nil)) (both_sides_times_pos_gt2 0 (both_sides_times_pos_gt2-1 nil 3237052399 3342859157 ("" (lemma "both_sides_times_pos_lt2") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_lt2 formula-decl nil real_props nil)) 275 250 nil nil)) (both_sides_times_neg_gt1 0 (both_sides_times_neg_gt1-1 nil 3237052399 3342859157 ("" (lemma "both_sides_times_neg_lt1") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_lt1 formula-decl nil real_props nil)) 281 250 nil nil)) (both_sides_times_neg_gt2 0 (both_sides_times_neg_gt2-1 nil 3237052399 3342859157 ("" (lemma "both_sides_times_neg_lt2") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_lt2 formula-decl nil real_props nil)) 270 260 nil nil)) (both_sides_div_pos_gt1 0 (both_sides_div_pos_gt1-1 nil 3237052399 3342859158 ("" (lemma "both_sides_div_pos_lt1") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil)) 173 150 nil nil)) (both_sides_div_pos_gt2 0 (both_sides_div_pos_gt2-1 nil 3237052399 3342859158 ("" (lemma "both_sides_div_pos_lt2") (("" (skosimp) (("" (inst -1 "py!1" "px!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt2 formula-decl nil real_props nil)) 207 180 nil nil)) (both_sides_div_pos_gt3 0 (both_sides_div_pos_gt3-1 nil 3237052399 3342859158 ("" (lemma "both_sides_div_pos_lt3") (("" (skosimp) (("" (inst -1 "nz!1" "py!1" "px!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (npreal_div_posreal_is_npreal application-judgement "npreal" real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_lt3 formula-decl nil real_props nil)) 233 210 nil nil)) (both_sides_div_neg_gt1 0 (both_sides_div_neg_gt1-1 nil 3237052399 3342859158 ("" (lemma "both_sides_div_neg_lt1") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_lt1 formula-decl nil real_props nil)) 174 160 nil nil)) (both_sides_div_neg_gt2 0 (both_sides_div_neg_gt2-1 nil 3237052399 3342859159 ("" (lemma "both_sides_div_neg_lt2") (("" (skosimp) (("" (inst -1 "ny!1" "nx!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nnreal_div_negreal_is_npreal application-judgement "npreal" real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_lt2 formula-decl nil real_props nil)) 237 210 nil nil)) (both_sides_div_neg_gt3 0 (both_sides_div_neg_gt3-1 nil 3237052399 3342859159 ("" (lemma "both_sides_div_neg_lt3") (("" (skosimp) (("" (inst -1 "ny!1" "nx!1" "nz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal_div_negreal_is_posreal application-judgement "posreal" real_types nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_lt3 formula-decl nil real_props nil)) 210 200 nil nil)) (gt_plus_gt1 0 (gt_plus_gt1-1 nil 3237052399 3342859159 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 177 130 nil nil)) (gt_plus_gt2 0 (gt_plus_gt2-1 nil 3237052399 3342859159 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 163 150 nil nil)) (gt_minus_gt1 0 (gt_minus_gt1-1 nil 3237052399 3342859159 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 134 120 nil nil)) (gt_minus_gt2 0 (gt_minus_gt2-1 nil 3237052399 3342859159 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 119 120 nil nil)) (gt_times_gt_pos1 0 (gt_times_gt_pos1-1 nil 3237052399 3342859160 ("" (lemma "lt_times_lt_pos1") (("" (skosimp) (("" (inst -1 "nnw!1" "py!1" "z!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_times_lt_pos1 formula-decl nil real_props nil)) 292 260 nil nil)) (gt_times_gt_pos2 0 (gt_times_gt_pos2-1 nil 3237052399 3342859160 ("" (lemma "lt_times_lt_pos2") (("" (skosimp) (("" (inst -1 "nny!1" "pw!1" "z!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_times_lt_pos2 formula-decl nil real_props nil)) 275 250 nil nil)) (gt_div_gt_pos1_TCC1 0 (gt_div_gt_pos1_TCC1-1 nil 3237052399 3342859160 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (/= const-decl "boolean" notequal nil)) 77 70 nil nil)) (gt_div_gt_pos1 0 (gt_div_gt_pos1-1 nil 3237052399 3342859160 ("" (lemma "lt_div_lt_pos1") (("" (skosimp) (("" (inst -1 "py!1" "pw!1" "z!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_div_lt_pos1 formula-decl nil real_props nil)) 177 160 nil nil)) (gt_div_gt_pos2_TCC1 0 (gt_div_gt_pos2_TCC1-1 nil 3237052399 3342859160 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (/= const-decl "boolean" notequal nil)) 71 60 nil nil)) (gt_div_gt_pos2 0 (gt_div_gt_pos2-1 nil 3237052399 3342859161 ("" (lemma "lt_div_lt_pos2") (("" (skosimp) (("" (inst -1 "nny!1" "pw!1" "z!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_div_lt_pos2 formula-decl nil real_props nil)) 172 160 nil nil)) (gt_times_gt_neg1 0 (gt_times_gt_neg1-1 nil 3237052399 3342859161 ("" (lemma "lt_times_lt_neg1") (("" (skosimp) (("" (inst -1 "npz!1" "nx!1" "y!1" "w!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((npreal_times_npreal_is_nnreal application-judgement "nnreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_times_lt_neg1 formula-decl nil real_props nil)) 292 250 nil nil)) (gt_times_gt_neg2 0 (gt_times_gt_neg2-1 nil 3237052399 3342859161 ("" (lemma "lt_times_lt_neg2") (("" (skosimp) (("" (inst -1 "npx!1" "nz!1" "y!1" "w!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((npreal_times_npreal_is_nnreal application-judgement "nnreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_times_lt_neg2 formula-decl nil real_props nil)) 275 250 nil nil)) (gt_div_gt_neg1_TCC1 0 (gt_div_gt_neg1_TCC1-1 nil 3237052399 3342859161 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (/= const-decl "boolean" notequal nil)) 76 70 nil nil)) (gt_div_gt_neg1 0 (gt_div_gt_neg1-1 nil 3237052399 3342859162 ("" (lemma "lt_div_lt_neg1") (("" (skosimp) (("" (inst -1 "nz!1" "nx!1" "y!1" "w!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_div_lt_neg1 formula-decl nil real_props nil)) 177 160 nil nil)) (gt_div_gt_neg2_TCC1 0 (gt_div_gt_neg2_TCC1-1 nil 3237052399 3342859162 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (/= const-decl "boolean" notequal nil)) 70 60 nil nil)) (gt_div_gt_neg2 0 (gt_div_gt_neg2-1 nil 3237052399 3342859162 ("" (lemma "lt_div_lt_neg2") (("" (skosimp) (("" (inst -1 "npx!1" "nz!1" "y!1" "w!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (lt_div_lt_neg2 formula-decl nil real_props nil)) 172 160 nil nil)) (total_ge 0 (total_ge-1 nil 3252308047 3342859162 ("" (grind) nil nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil) (dichotomous? const-decl "bool" orders nil) (total_order? const-decl "bool" orders nil)) 131 120 t shostak)) (dich_ge 0 (dich_ge-1 nil 3237052399 3342859162 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 40 30 nil nil)) (zero_ge_zero 0 (zero_ge_zero-1 nil 3237052399 3342859162 ("" (tcc :defs !) nil nil) proved nil 6 0 nil nil)) (neg_ge 0 (neg_ge-1 nil 3237052399 3342859162 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (minus_real_is_real application-judgement "real" reals nil)) 57 50 nil nil)) (pos_times_ge 0 (pos_times_ge-1 nil 3237052399 3342859162 ("" (lemma "pos_times_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_times_le formula-decl nil real_props nil)) 248 240 nil nil)) (neg_times_ge 0 (neg_times_ge-1 nil 3237052399 3342859163 ("" (lemma "neg_times_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (neg_times_le formula-decl nil real_props nil)) 250 230 nil nil)) (quotient_pos_ge 0 (quotient_pos_ge-1 nil 3237052399 3342859163 ("" (lemma "quotient_pos_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (quotient_pos_le formula-decl nil real_props nil)) 194 180 nil nil)) (quotient_neg_ge 0 (quotient_neg_ge-1 nil 3237052399 3342859163 ("" (lemma "quotient_neg_le") (("" (skosimp) (("" (grind) nil nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (quotient_neg_le formula-decl nil real_props nil)) 233 220 nil nil)) (pos_div_ge 0 (pos_div_ge-1 nil 3237052399 3342859164 ("" (lemma "pos_div_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pos_div_le formula-decl nil real_props nil)) 264 250 nil nil)) (neg_div_ge 0 (neg_div_ge-1 nil 3237052399 3342859164 ("" (lemma "neg_div_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (neg_div_le formula-decl nil real_props nil)) 260 240 nil nil)) (div_mult_pos_ge1 0 (div_mult_pos_ge1-1 nil 3237052399 3342859164 ("" (lemma "div_mult_pos_le2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_le2 formula-decl nil real_props nil)) 266 250 nil nil)) (div_mult_pos_ge2 0 (div_mult_pos_ge2-1 nil 3237052399 3342859164 ("" (lemma "div_mult_pos_le1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_pos_le1 formula-decl nil real_props nil)) 263 240 nil nil)) (div_mult_neg_ge1 0 (div_mult_neg_ge1-1 nil 3237052399 3342859165 ("" (lemma "div_mult_neg_le2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_le2 formula-decl nil real_props nil)) 267 250 nil nil)) (div_mult_neg_ge2 0 (div_mult_neg_ge2-1 nil 3237052399 3342859165 ("" (lemma "div_mult_neg_le1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (div_mult_neg_le1 formula-decl nil real_props nil)) 268 250 nil nil)) (both_sides_plus_ge1 0 (both_sides_plus_ge1-1 nil 3237052399 3342859165 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 169 150 nil nil)) (both_sides_plus_ge2 0 (both_sides_plus_ge2-1 nil 3237052399 3342859165 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 168 150 nil nil)) (both_sides_minus_ge1 0 (both_sides_minus_ge1-1 nil 3237052399 3342859166 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 140 130 nil nil)) (both_sides_minus_ge2 0 (both_sides_minus_ge2-1 nil 3237052399 3342859166 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 129 120 nil nil)) (both_sides_times_pos_ge1 0 (both_sides_times_pos_ge1-1 nil 3237052399 3342859166 ("" (lemma "both_sides_times_pos_le1") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_le1 formula-decl nil real_props nil)) 284 240 nil nil)) (both_sides_times_pos_ge2 0 (both_sides_times_pos_ge2-1 nil 3237052399 3342859166 ("" (lemma "both_sides_times_pos_le2") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_pos_le2 formula-decl nil real_props nil)) 272 240 nil nil)) (both_sides_times_neg_ge1 0 (both_sides_times_neg_ge1-1 nil 3237052399 3342859167 ("" (lemma "both_sides_times_neg_le1") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_le1 formula-decl nil real_props nil)) 272 260 nil nil)) (both_sides_times_neg_ge2 0 (both_sides_times_neg_ge2-1 nil 3237052399 3342859167 ("" (lemma "both_sides_times_neg_le2") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_times_neg_le2 formula-decl nil real_props nil)) 270 250 nil nil)) (both_sides_div_pos_ge1 0 (both_sides_div_pos_ge1-1 nil 3237052399 3342859167 ("" (lemma "both_sides_div_pos_le1") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_le1 formula-decl nil real_props nil)) 172 160 nil nil)) (both_sides_div_pos_ge2 0 (both_sides_div_pos_ge2-1 nil 3237052399 3342859167 ("" (lemma "both_sides_div_pos_le2") (("" (skosimp) (("" (inst -1 "py!1" "px!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_le2 formula-decl nil real_props nil)) 207 190 nil nil)) (both_sides_div_pos_ge3 0 (both_sides_div_pos_ge3-1 nil 3237052399 3342859168 ("" (lemma "both_sides_div_pos_le3") (("" (skosimp) (("" (inst -1 "nz!1" "py!1" "px!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (npreal_div_posreal_is_npreal application-judgement "npreal" real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_pos_le3 formula-decl nil real_props nil)) 232 210 nil nil)) (both_sides_div_neg_ge1 0 (both_sides_div_neg_ge1-1 nil 3237052399 3342859168 ("" (lemma "both_sides_div_neg_le1") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_le1 formula-decl nil real_props nil)) 176 160 nil nil)) (both_sides_div_neg_ge2 0 (both_sides_div_neg_ge2-1 nil 3237052399 3342859168 ("" (lemma "both_sides_div_neg_le2") (("" (skosimp) (("" (inst -1 "ny!1" "nx!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nnreal_div_negreal_is_npreal application-judgement "npreal" real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_le2 formula-decl nil real_props nil)) 254 220 nil nil)) (both_sides_div_neg_ge3 0 (both_sides_div_neg_ge3-1 nil 3237052399 3342859168 ("" (lemma "both_sides_div_neg_le3") (("" (skosimp) (("" (inst -1 "ny!1" "nx!1" "nz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((negreal_div_negreal_is_posreal application-judgement "posreal" real_types nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_div_neg_le3 formula-decl nil real_props nil)) 208 180 nil nil)) (ge_plus_ge 0 (ge_plus_ge-1 nil 3237052399 3342859168 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 167 160 nil nil)) (ge_minus_ge 0 (ge_minus_ge-1 nil 3237052399 3342859169 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 138 120 nil nil)) (ge_times_ge_pos 0 (ge_times_ge_pos-1 nil 3237052399 3342859169 ("" (lemma "le_times_le_pos") (("" (skosimp) (("" (inst -1 "nny!1" "nnw!1" "z!1" "x!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (le_times_le_pos formula-decl nil real_props nil)) 194 180 nil nil)) (ge_div_ge_pos_TCC1 0 (ge_div_ge_pos_TCC1-1 nil 3237052399 3342859169 ("" (tcc :defs explicit) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (/= const-decl "boolean" notequal nil)) 75 60 nil nil)) (ge_div_ge_pos 0 (ge_div_ge_pos-1 nil 3237052399 3342859169 ("" (lemma "le_div_le_pos") (("" (skosimp) (("" (inst -1 "nny!1" "pw!1" "z!1" "x!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (le_div_le_pos formula-decl nil real_props nil)) 162 150 nil nil)) (ge_times_ge_neg 0 (ge_times_ge_neg-1 nil 3237052399 3342859169 ("" (lemma "le_times_le_neg") (("" (skosimp) (("" (inst -1 "npz!1" "npx!1" "y!1" "w!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((npreal_times_npreal_is_nnreal application-judgement "nnreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (le_times_le_neg formula-decl nil real_props nil)) 196 190 nil nil)) (ge_div_ge_neg_TCC1 0 (ge_div_ge_neg_TCC1-1 nil 3237052399 3342859169 ("" (tcc :defs explicit) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (/= const-decl "boolean" notequal nil)) 72 50 nil nil)) (ge_div_ge_neg 0 (ge_div_ge_neg-1 nil 3237052399 3342859170 ("" (lemma "le_div_le_neg") (("" (skosimp*) (("" (inst -1 "npx!1" "nz!1" "y!1" "w!1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((real_div_nzreal_is_real application-judgement "real" reals nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (le_div_le_neg formula-decl nil real_props nil)) 168 150 nil nil)) (nonzero_times1 0 (nonzero_times1-1 nil 3237052399 3342859170 ("" (lemma "zero_times3") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (zero_times3 formula-decl nil real_props nil)) 144 130 nil nil)) (nonzero_times2 0 (nonzero_times2-1 nil 3237052399 3342859170 ("" (lemma "zero_times3") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (zero_times3 formula-decl nil real_props nil)) 126 120 nil nil)) (nonzero_times3 0 (nonzero_times3-1 nil 3237052399 3342859170 ("" (lemma "zero_times3") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (zero_times3 formula-decl nil real_props nil)) 145 140 nil nil)) (eq1_gt 0 (eq1_gt-1 nil 3237052399 3342859170 ("" (skosimp) (("" (lemma "div_cancel3") (("" (inst -1 "y!1" "1" "x!1") (("1" (assert) (("1" (hide -3) (("1" (replace -1 :dir rl) (("1" (hide -1) (("1" (lemma "div_mult_pos_gt2") (("1" (inst -1 "y!1" "1" "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "zero_times3") (("2" (inst?) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((div_cancel3 formula-decl nil real_props nil) (zero_times3 formula-decl nil real_props nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (div_mult_pos_gt2 formula-decl nil real_props nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) nil) 323 310 nil nil)) (eq1_ge 0 (eq1_ge-1 nil 3237052399 3342859171 ("" (lemma "eq1_gt") (("" (skosimp) (("" (case "x!1 = 1") (("1" (assert) nil nil) ("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (eq1_gt formula-decl nil real_props nil)) 101 80 nil nil)) (eqm1_gt 0 (eqm1_gt-1 nil 3237052399 3342859171 ("" (skosimp) (("" (lemma "eq1_gt") (("" (inst -1 "x!1" "-y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((eq1_gt formula-decl nil real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_real_is_real application-judgement "real" reals nil)) 137 130 nil nil)) (eqm1_ge 0 (eqm1_ge-1 nil 3237052399 3342859171 ("" (lemma "eq1_ge") (("" (skosimp) (("" (inst -1 "x!1" "-y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_real_is_real application-judgement "real" reals nil) (eq1_ge formula-decl nil real_props nil)) 151 130 nil nil)) (eqm1_lt 0 (eqm1_lt-1 nil 3237052399 3342859171 ("" (skosimp) (("" (lemma "eq1_gt") (("" (inst -1 "-x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((eq1_gt formula-decl nil real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_real_is_real application-judgement "real" reals nil)) 147 140 nil nil)) (eqm1_le 0 (eqm1_le-1 nil 3237052399 3342859171 ("" (lemma "eq1_ge") (("" (skosimp) (("" (inst -1 "-x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_real_is_real application-judgement "real" reals nil) (eq1_ge formula-decl nil real_props nil)) 154 130 nil nil)) (sqrt_1 0 (sqrt_1-1 nil 3237052399 3342859172 ("" (skosimp*) (("" (ground) (("" (case "abs(x!1)>1") (("1" (lemma "eq1_gt") (("1" (inst -1 "abs(x!1)" "abs(x!1)") (("1" (assert) (("1" (expand "abs" 1) (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "div_mult_pos_ge1") (("2" (inst -1 "abs(x!1)" "1" "1") (("1" (ground) (("1" (lemma "eq1_ge") (("1" (inst -1 "1/abs(x!1)" "1/abs(x!1)") (("1" (assert) (("1" (split) (("1" (case "abs(x!1) = 1") (("1" (assert) (("1" (expand "abs" -1) (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (assert) (("2" (rewrite "div_mult_pos_le1") (("2" (expand "abs" 1) (("2" (lift-if) (("2" (prop) (("1" (assert) nil nil) ("2" (assert) (("2" (case "x!1 = 0") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "abs" 1) (("2" (lift-if) (("2" (prop) (("1" (rewrite "div_times") (("1" (assert) nil nil)) nil) ("2" (rewrite "div_times") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "x!1 = 0") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (expand "abs" 2) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "x!1 = 0") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (expand "abs" 2) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (div_mult_pos_ge1 formula-decl nil real_props nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (= const-decl "[T, T -> boolean]" equalities nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (div_times formula-decl nil real_props nil) (odd_times_odd_is_odd application-judgement "odd_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (eq1_ge formula-decl nil real_props nil) (posreal nonempty-type-eq-decl nil real_types nil) nil (eq1_gt formula-decl nil real_props nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (minus_real_is_real application-judgement "real" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)) 952 850 nil nil)) (sqrt_1_lt 0 (sqrt_1_lt-1 nil 3237052399 3342859173 ("" (skosimp*) (("" (case-replace "x!1 * x!1 - 1 < 0") (("1" (hide -2) (("1" (case-replace "x!1 * x!1 - 1 = (x!1 + 1)*(x!1 - 1)") (("1" (hide -1) (("1" (lemma "pos_times_lt") (("1" (inst?) (("1" (assert) (("1" (hide -1) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) proved ((real_minus_real_is_real application-judgement "real" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_times_real_is_real application-judgement "real" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (pos_times_lt formula-decl nil real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (minus_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 395 370 nil nil)) (sqrt_1_le 0 (sqrt_1_le-1 nil 3237052399 3342859173 ("" (skosimp*) (("" (case-replace "x!1 * x!1 - 1 <= 0") (("1" (hide -2) (("1" (case-replace "x!1 * x!1 - 1 = (x!1 + 1)*(x!1 - 1)") (("1" (hide -1) (("1" (lemma "neg_times_le") (("1" (inst?) (("1" (assert) (("1" (hide -2) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) proved ((real_minus_real_is_real application-judgement "real" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_times_real_is_real application-judgement "real" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (neg_times_le formula-decl nil real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (minus_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil)) 354 340 nil nil)) (idem_mult 0 (idem_mult-1 nil 3237052399 3342859173 ("" (skosimp*) (("" (ground) (("" (lemma "div_cancel3") (("" (inst -1 "x!1" "x!1" "x!1") (("" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (/= const-decl "boolean" notequal nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (div_cancel3 formula-decl nil real_props nil)) 135 110 nil nil)) (product_1 0 (product_1-2 "Needed a :flush? t for some reason" 3299954096 3342859173 ("" (skosimp) (("" (case "i!1 = 0") (("1" (grind) nil nil) ("2" (case "j!1 = 0") (("1" (grind) nil nil) ("2" (lemma "eq1_ge") (("2" (inst?) (("2" (lemma "eq1_ge") (("2" (inst -1 "j!1" "i!1") (("2" (assert) (("2" (assert :flush? t) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_times_int_is_int application-judgement "int" integers nil) (eq1_ge formula-decl nil real_props nil)) 225 210 t shostak) (product_1-1 nil 3237052399 3299952691 ("" (skosimp) (("" (case "i!1 = 0") (("1" (grind) nil nil) ("2" (case "j!1 = 0") (("1" (grind) nil nil) ("2" (lemma "eq1_ge") (("2" (inst?) (("2" (lemma "eq1_ge") (("2" (inst -1 "j!1" "i!1") (("2" (assert) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 342 310 nil nil)) (product_m1 0 (product_m1-1 nil 3237052399 3342859174 ("" (skosimp) (("" (lemma "product_1") (("" (inst -1 "i!1" "-j!1") (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((product_1 formula-decl nil real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_times_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_int_is_int application-judgement "int" integers nil)) 182 180 nil nil)) (triangle 0 (triangle-1 nil 3237052399 3342859174 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (minus_real_is_real application-judgement "real" reals nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)) 193 180 nil nil)) (abs_mult 0 (abs_mult-1 nil 3237052399 3342859174 ("" (skosimp) (("" (lemma "neg_times_lt") (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((neg_times_lt formula-decl nil real_props nil) (minus_real_is_real application-judgement "real" reals nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_times_real_is_real application-judgement "real" reals nil)) 599 570 nil nil)) (abs_div 0 (abs_div-1 nil 3237052399 3342859175 ("" (skosimp*) (("" (lemma "pos_div_gt") (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved ((pos_div_gt formula-decl nil real_props nil) (minus_real_is_real application-judgement "real" reals nil) (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types nil) (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}" real_defs nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_div_nzreal_is_real application-judgement "real" reals nil)) 443 400 nil nil)) (abs_abs 0 (abs_abs-1 nil 3237052399 3342859175 ("" (skosimp*) (("" (expand "abs") (("" (lift-if) (("" (ground) nil nil)) nil)) nil)) nil) proved ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (minus_real_is_real application-judgement "real" reals nil)) 44 40 nil nil)) (abs_square 0 (abs_square-1 nil 3237052399 3342859175 ("" (skosimp*) (("" (expand "abs") (("" (propax) nil nil)) nil)) nil) proved ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (real_times_real_is_real application-judgement "real" reals nil)) 82 80 nil nil)) (abs_limits 0 (abs_limits-1 nil 3237052399 3342859175 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (minus_real_is_real application-judgement "real" reals nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)) 204 170 nil nil)) (axiom_of_archimedes 0 (axiom_of_archimedes-2 "" 3299954306 3342859176 ("" (lemma "real_complete") (("" (inst -1 "{x:real|EXISTS (z : int) : z=x}") (("1" (grind :if-match nil) (("1" (inst -4 "y!1 - 1") (("1" (reduce :if-match nil) (("1" (inst - "s!1 + 1") (("1" (assert) nil nil) ("2" (inst 1 "1 + s!1") (("2" (assert) (("2" (lemma "int_plus_int_is_int") (("2" (inst?) (("2" (assert) (("2" (lemma "rat_plus_rat_is_rat") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reduce) nil nil)) nil) ("2" (delete 2) (("2" (grind) (("2" (inst - "0") (("2" (assert) (("2" (inst 1 "0") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_minus_real_is_real application-judgement "real" reals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real_plus_real_is_real application-judgement "real" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) nil (rat_plus_rat_is_rat judgement-tcc nil rationals nil) (rat nonempty-type-eq-decl nil rationals nil) (int_plus_int_is_int judgement-tcc nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) nil (NOT const-decl "[bool -> bool]" booleans nil) nil (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (real_complete formula-decl nil bounded_real_defs nil)) 680 610 t shostak) (axiom_of_archimedes-1 nil 3237052399 3299952701 ("" (lemma "real_complete") (("" (inst -1 "{x:real|EXISTS (z : int) : z=x}") (("1" (grind :if-match nil) (("1" (inst -4 "y!1 - 1") (("1" (reduce :if-match nil) (("1" (inst - "s!1 + 1") (("1" (assert) nil nil) ("2" (lemma "int_plus_int_is_int") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (reduce) nil nil)) nil) ("2" (delete 2) (("2" (grind) (("2" (inst - "0") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 1039 620 nil nil)) (archimedean 0 (archimedean-1 nil 3237052399 3342859177 ("" (skolem!) (("" (lemma "axiom_of_archimedes" ("x" "1/px!1")) (("" (skolem!) (("" (assert) (("" (inst + "i!1") (("" (rewrite "div_mult_pos_lt1") (("" (rewrite "div_mult_pos_lt1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (axiom_of_archimedes formula-decl nil real_props nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil)) 443 420 nil nil)) (real_lt_is_strict_total_order 0 (real_lt_is_strict_total_order-1 nil 3252221044 3342859177 ("" (grind) nil nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (strict_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (strict_total_order? const-decl "bool" orders nil)) 99 80 t shostak)) (real_le_is_total_order 0 (real_le_is_total_order-1 nil 3252221044 3342859177 ("" (grind) nil nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil) (dichotomous? const-decl "bool" orders nil) (total_order? const-decl "bool" orders nil)) 146 130 t shostak)) (real_gt_is_strict_total_order 0 (real_gt_is_strict_total_order-1 nil 3252221044 3342859177 ("" (grind) nil nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (irreflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (strict_order? const-decl "bool" orders nil) (trichotomous? const-decl "bool" orders nil) (strict_total_order? const-decl "bool" orders nil)) 102 90 t shostak)) (real_ge_is_total_order 0 (real_ge_is_total_order-1 nil 3252221044 3342859177 ("" (grind) nil nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (preorder? const-decl "bool" orders nil) (antisymmetric? const-decl "bool" relations nil) (partial_order? const-decl "bool" orders nil) (dichotomous? const-decl "bool" orders nil) (total_order? const-decl "bool" orders nil)) 144 120 t shostak)))(rational_props (rational_pred_ax2 0 (rational_pred_ax2-1 nil 3243832709 3342859177 ("" (skosimp) (("" (lemma "rational_pred_ax") (("" (inst?) (("" (skosimp) (("" (case "n0j!1 > 0") (("1" (inst 1 "i!1" "n0j!1") (("1" (assert) nil nil)) nil) ("2" (inst 2 "-i!1" "-n0j!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((rational_pred_ax formula-decl nil rational_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (minus_int_is_int application-judgement "int" integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) nil (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (bool nonempty-type-eq-decl nil booleans nil) (> const-decl "bool" reals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (rat nonempty-type-eq-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 225 200 t shostak)) (density_positive 0 (density_positive-1 nil 3237052399 3342859178 ("" (skosimp) (("" (assert) (("" (lemma "archimedean" ("px" "y!1 - x!1")) (("" (skolem!) (("" (lemma "posreal_mult_closed" ("x" "y!1" "y" "n!1")) (("" (ground) (("" (lemma "wf_nat") (("" (expand "well_founded?") (("" (inst -1 "LAMBDA (n : nat) : y!1 * n!1 <= n") (("" (reduce :if-match nil) (("1" (auto-rewrite "div_mult_pos_lt1" "div_mult_pos_lt2") (("1" (inst + "(y!2 - 1)/n!1") (("1" (assert) (("1" (inst - "y!2 -1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (lemma "axiom_of_archimedes" ("x" "y!1 * n!1")) (("2" (skolem!) (("2" (assert) (("2" (inst + "i!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (well_founded? const-decl "bool" orders nil) (NOT const-decl "[bool -> bool]" booleans nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (rat nonempty-type-eq-decl nil rationals nil) (div_mult_pos_lt2 formula-decl nil real_props nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (axiom_of_archimedes formula-decl nil real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (<= const-decl "bool" reals nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (wf_nat formula-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (posreal_mult_closed formula-decl nil real_axioms nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_minus_real_is_real application-judgement "real" reals nil) (archimedean formula-decl nil real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil)) 875 790 nil nil)) (density 0 (density-1 nil 3237052399 3342859179 ("" (lemma "density_positive") (("" (skosimp) (("" (case "x!1 >= 0") (("1" (inst? -) (("1" (assert) nil nil)) nil) ("2" (lemma "axiom_of_archimedes" ("x" "-x!1")) (("2" (skosimp) (("2" (inst -2 "i!1 + x!1" "i!1 + y!1") (("2" (assert) (("2" (skosimp) (("2" (inst 2 "r!1 - i!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((minus_real_is_real application-judgement "real" reals nil) (axiom_of_archimedes formula-decl nil real_props nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (real_plus_real_is_real application-judgement "real" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (rat nonempty-type-eq-decl nil rationals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (rat_minus_rat_is_rat application-judgement "rat" rationals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (density_positive formula-decl nil rational_props nil)) 284 250 nil nil)))(integer_props (integer_pred_ax 0 (integer_pred_ax-1 nil 3237052399 3342859179 ("" (skosimp*) (("" (case "i!1 >= 0") (("1" (inst 1 "i!1") nil nil) ("2" (inst 2 "-i!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) nil (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (minus_int_is_int application-judgement "int" integers nil)) 59 60 nil nil)) (div_simple 0 (div_simple-1 nil 3237052399 3342859179 ("" (grind :if-match nil) (("" (inst 2 "i!1/n0j!1") (("" (assert) nil nil)) nil)) nil) proved ((/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (rat_times_rat_is_rat application-judgement "rat" rationals nil) (int_times_int_is_int application-judgement "int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)) 408 370 nil nil)) (lub_nat_TCC1 0 (lub_nat_TCC1-1 nil 3237052399 3342859179 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (set type-eq-decl nil sets nil) (extend const-decl "R" extend nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 95 100 nil nil)) (lub_nat 0 (lub_nat-2 "" 3299954571 3342859180 ("" (induct "m") (("1" (skosimp*) (("1" (expand "upper_bound?") (("1" (typepred "N!1") (("1" (expand "nonempty?") (("1" (expand "empty?") (("1" (skosimp*) (("1" (expand "member") (("1" (inst 1 "x!1") (("1" (expand "least_upper_bound?") (("1" (split) (("1" (expand "upper_bound?") (("1" (skosimp*) (("1" (inst -2 "s!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "upper_bound?") (("2" (inst -1 "x!1") (("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -1 "N!1") (("2" (assert) (("2" (replace 1) (("2" (assert) (("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (inst 2 "s!1") (("1" (expand "least_upper_bound?") (("1" (split) (("1" (expand "upper_bound?") (("1" (skosimp*) (("1" (inst -1 "s!2") (("1" (assert) (("1" (case "forall (i, j: int): i < j iff i + 1 <= j") (("1" (inst -1 "s!1" "s!2") (("1" (assert) nil nil) ("2" (typepred "s!2") (("2" (expand "extend") (("2" (prop) nil nil)) nil)) nil) ("3" (typepred "s!1") (("3" (expand "extend") (("3" (prop) nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (ground) (("2" (assert :flush? t) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (expand "upper_bound?") (("2" (inst -1 "s!1") nil nil)) nil)) nil)) nil)) nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp) (("3" (skosimp) (("3" (expand "nonempty?") (("3" (expand "empty?") (("3" (typepred "N!1") (("3" (expand "nonempty?") (("3" (expand "empty?") (("3" (skosimp) (("3" (inst -3 "x!1") (("3" (expand "member") (("3" (expand "extend") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp) (("4" (typepred "N!1") (("4" (expand "nonempty?") (("4" (expand "empty?") (("4" (skosimp) (("4" (expand "member") (("4" (inst -2 "x!1") (("4" (expand "extend") (("4" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) nil nil nil (AND const-decl "[bool, bool -> bool]" booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) nil nil (nat_induction formula-decl nil naturalnumbers nil) nil (pred type-eq-decl nil defined_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil)) 826 670 t shostak) (lub_nat-1 nil 3237052399 3299952708 ("" (induct "m") (("1" (skosimp*) (("1" (expand "upper_bound?") (("1" (typepred "N!1") (("1" (expand "nonempty?") (("1" (expand "empty?") (("1" (skosimp*) (("1" (expand "member") (("1" (inst 1 "x!1") (("1" (expand "least_upper_bound?") (("1" (split) (("1" (expand "upper_bound?") (("1" (skosimp*) (("1" (inst -2 "s!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "upper_bound?") (("2" (inst -1 "x!1") (("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -1 "N!1") (("2" (assert) (("2" (replace 1) (("2" (assert) (("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (inst 2 "s!1") (("1" (expand "least_upper_bound?") (("1" (split) (("1" (expand "upper_bound?") (("1" (skosimp*) (("1" (inst -1 "s!2") (("1" (assert) (("1" (case "forall (i, j: int): i < j iff i + 1 <= j") (("1" (inst -1 "s!1" "s!2") (("1" (assert) nil nil) ("2" (typepred "s!2") (("2" (expand "extend") (("2" (prop) nil nil)) nil)) nil) ("3" (typepred "s!1") (("3" (expand "extend") (("3" (prop) nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (expand "upper_bound?") (("2" (inst -1 "s!1") nil nil)) nil)) nil)) nil)) nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp) (("3" (skosimp) (("3" (expand "nonempty?") (("3" (expand "empty?") (("3" (typepred "N!1") (("3" (expand "nonempty?") (("3" (expand "empty?") (("3" (skosimp) (("3" (inst -3 "x!1") (("3" (expand "member") (("3" (expand "extend") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp) (("4" (typepred "N!1") (("4" (expand "nonempty?") (("4" (expand "empty?") (("4" (skosimp) (("4" (expand "member") (("4" (inst -2 "x!1") (("4" (expand "extend") (("4" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1760 1160 nil nil)) (lub_int_TCC1 0 (lub_int_TCC1-1 nil 3237052399 3342859180 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (set type-eq-decl nil sets nil) (extend const-decl "R" extend nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 86 80 nil nil)) (lub_int 0 (lub_int-1 nil 3237052399 3342859181 ("" (skosimp*) (("" (typepred "I!1") (("" (expand "nonempty?") (("" (expand "empty?") (("" (skosimp*) (("" (lemma "lub_nat") (("" (expand "member") (("" (inst - "{n|I!1(n+x!1)}" "i!1-x!1") (("1" (prop) (("1" (skosimp*) (("1" (inst + "n!1+x!1") (("1" (assert) (("1" (expand "least_upper_bound?") (("1" (prop) (("1" (expand "upper_bound?") (("1" (skosimp*) (("1" (assert) (("1" (inst - "s!1-x!1") (("1" (assert) nil nil) ("2" (assert) (("2" (expand "extend") (("2" (split 1) (("1" (flatten) (("1" (typepred "s!1") (("1" (expand "extend") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (prop) (("1" (lemma "rat_minus_rat_is_rat") (("1" (inst?) nil nil)) nil) ("2" (lemma "int_minus_int_is_int") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "y!1-x!1") (("2" (assert) (("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (inst?) (("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (typepred "s!1") (("2" (expand "extend" -1) (("2" (prop) (("2" (inst - "s!1+x!1") (("1" (assert) nil nil) ("2" (expand "extend" 1) (("2" (prop) (("1" (lemma "rat_plus_rat_is_rat") (("1" (inst?) nil nil)) nil) ("2" (lemma "int_plus_int_is_int") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (expand "upper_bound?") (("2" (inst -2 "x!1") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("3" (expand "nonempty?") (("3" (expand "empty?") (("3" (inst -1 "0") (("3" (expand "member") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (empty? const-decl "bool" sets nil) (lub_nat formula-decl nil integer_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) nil (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) nil (- const-decl "[numfield, numfield -> numfield]" number_fields nil) nil (int_plus_int_is_int judgement-tcc nil integers nil) (rat_plus_rat_is_rat judgement-tcc nil rationals nil) nil (real_plus_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) nil (rat nonempty-type-eq-decl nil rationals nil) (rat_minus_rat_is_rat judgement-tcc nil rationals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (int_minus_int_is_int judgement-tcc nil integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) nil nil nil (member const-decl "bool" sets nil)) 936 830 nil nil)) (glb_nat 0 (glb_nat-1 nil 3237052399 3342859182 ("" (lemma "lub_int") (("" (skosimp*) (("" (inst -1 "{i: nonpos_int | N!1(-i)}" "0") (("1" (grind :if-match nil) (("1" (inst 1 "-j!1") (("1" (prop) (("1" (skosimp*) (("1" (inst -3 "-s!1") (("1" (assert) nil nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (assert) (("2" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) (("3" (lemma "minus_rat_is_rat") (("3" (inst -1 "s!1") nil nil)) nil)) nil) ("4" (lemma "minus_int_is_int") (("4" (inst -1 "s!1") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -3) (("2" (skosimp*) (("2" (inst -4 "-y!1") (("2" (prop) (("1" (assert) nil nil) ("2" (skosimp*) (("2" (inst -1 "-s!1") (("1" (assert) nil nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (prop) (("1" (lemma "minus_rat_is_rat") (("1" (inst -1 "s!1") nil nil)) nil) ("2" (lemma "minus_int_is_int") (("2" (inst -1 "s!1") (("2" (assert) nil nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "extend") (("2" (typepred "N!1") (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (skosimp*) (("2" (inst -2 "-x!1") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_real_is_real application-judgement "real" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) nil nil nil nil (IF const-decl "[boolean, T, T -> T]" if_def nil) (AND const-decl "[bool, bool -> bool]" booleans nil) nil (minus_rat_is_rat judgement-tcc nil rationals nil) (rat nonempty-type-eq-decl nil rationals nil) (minus_int_is_int judgement-tcc nil integers nil) nil (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) (<= const-decl "bool" reals nil) (nonpos_int nonempty-type-eq-decl nil integers nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) nil (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (minus_int_is_int application-judgement "int" integers nil) (lub_int formula-decl nil integer_props nil)) 851 700 nil nil)) (glb_int 0 (glb_int-1 nil 3237052399 3342859183 ("" (lemma "lub_int") (("" (skosimp*) (("" (inst -1 "{i: int | I!1(-i)}" "-i!1") (("1" (prop) (("1" (skosimp*) (("1" (grind :if-match nil) (("1" (inst 1 "-j!1") (("1" (prop) (("1" (skosimp*) (("1" (inst -1 "-s!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2) (("2" (typepred "s!1") (("2" (expand "extend") (("2" (assert) (("2" (prop) (("1" (assert) nil nil) ("2" (lemma "minus_rat_is_rat") (("2" (inst -1 "s!1") nil nil)) nil) ("3" (lemma "minus_int_is_int") (("3" (inst -1 "s!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -3 "-y!1") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "-s!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3) (("2" (typepred "s!1") (("2" (expand "extend") (("2" (assert) (("2" (ground) (("1" (lemma "minus_rat_is_rat") (("1" (inst -1 "s!1") nil nil)) nil) ("2" (lemma "minus_int_is_int") (("2" (inst -1 "s!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind :if-match nil) (("2" (inst -4 "-s!1") (("1" (assert) nil nil) ("2" (hide -1 -2 -3 2) (("2" (typepred "s!1") (("2" (expand "extend") (("2" (ground) (("1" (lemma "minus_rat_is_rat") (("1" (inst -1 "s!1") nil nil)) nil) ("2" (lemma "minus_int_is_int") (("2" (inst -1 "s!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (typepred "I!1") (("2" (grind :if-match nil) (("2" (inst -3 "-x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) nil nil nil nil (minus_real_is_real application-judgement "real" reals nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) nil (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_int_is_int judgement-tcc nil integers nil) (minus_rat_is_rat judgement-tcc nil rationals nil) (rat nonempty-type-eq-decl nil rationals nil) nil (TRUE const-decl "bool" booleans nil) nil (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) nil (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (minus_int_is_int application-judgement "int" integers nil) (lub_int formula-decl nil integer_props nil)) 714 610 nil nil)))(floor_ceil (floor_exists 0 (floor_exists-1 nil 3237052399 3342859183 ("" (skosimp*) (("" (lemma "lub_int") (("" (lemma "axiom_of_archimedes") (("" (inst?) (("" (skosimp*) (("" (inst - "{i|i<=x!1}" "i!1") (("1" (prop) (("1" (expand "least_upper_bound?") (("1" (skolem-typepred) (("1" (inst?) (("1" (prop) (("1" (expand "upper_bound?") (("1" (inst - "j!1+1") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "upper_bound?") (("2" (skolem-typepred) (("2" (expand "extend") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite "nonempty_exists") (("2" (lemma "axiom_of_archimedes") (("2" (inst - "abs(x!1)") (("2" (skosimp*) (("2" (inst + "-i!2") (("2" (expand "abs") (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((lub_int formula-decl nil integer_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) nil (<= const-decl "bool" reals nil) (integer nonempty-type-from-decl nil integers nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) nil nil (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) nil (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (int_plus_int_is_int application-judgement "int" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) nil (minus_int_is_int application-judgement "int" integers nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (nonempty_exists formula-decl nil sets_lemmas nil) (axiom_of_archimedes formula-decl nil real_props nil)) 520 460 nil nil)) (ceiling_exists 0 (ceiling_exists-1 nil 3237052399 3342859184 ("" (skosimp*) (("" (case "integer?(x!1)") (("1" (inst?) (("1" (assert) nil nil) ("2" (assert) (("2" (expand "integer?") (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (lemma "floor_exists") (("2" (inst?) (("2" (skosimp*) (("2" (inst + "i!1+1") (("2" (assert) (("2" (expand "integer?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (integer? const-decl "bool" integers nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (integer nonempty-type-from-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (rational_pred const-decl "[real -> boolean]" rationals nil) nil (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (floor_exists formula-decl nil floor_ceil nil)) 156 130 nil nil)) (floor_TCC1 0 (floor_TCC1-1 nil 3237052399 3342859184 ("" (inst + "lambda x: choose( {i: integer | i <= x & x < 1 + i})") (("" (expand "nonempty?") (("" (expand "empty?") (("" (expand "member") (("" (lemma "floor_exists") (("" (skosimp*) (("" (inst?) (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (floor_exists formula-decl nil floor_ceil nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_plus_int_is_int application-judgement "int" integers nil)) 326 310 nil nil)) (fractional_TCC1 0 (fractional_TCC1-1 nil 3237052399 3342859184 ("" (tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 137 130 nil nil)) (ceiling_TCC1 0 (ceiling_TCC1-1 nil 3237052399 3342859184 ("" (inst + "lambda x: choose( {i: integer | x <= i & i < x + 1})") (("" (expand "nonempty?") (("" (expand "empty?") (("" (expand "member") (("" (lemma "ceiling_exists") (("" (skosimp*) (("" (inst - "x!1") (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (ceiling_exists formula-decl nil floor_ceil nil) (empty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_plus_real_is_real application-judgement "real" reals nil)) 137 130 nil nil)) (floor_def 0 (floor_def-1 nil 3237052399 3342859185 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 316 290 nil nil)) (ceiling_def 0 (ceiling_def-1 nil 3237052399 3342859185 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 243 230 nil nil)) (floor_ceiling_reflect1 0 (floor_ceiling_reflect1-1 nil 3237052399 3342859185 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (minus_real_is_real application-judgement "real" reals nil) (minus_int_is_int application-judgement "int" integers nil)) 106 100 nil nil)) (floor_ceiling_reflect2 0 (floor_ceiling_reflect2-1 nil 3237052399 3342859185 ("" (grind) nil nil) proved ((minus_real_is_real application-judgement "real" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (minus_int_is_int application-judgement "int" integers nil)) 121 100 nil nil)) (nonneg_floor_is_nat 0 (nonneg_floor_is_nat-1 nil 3237052399 3342859185 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 37 40 nil nil)) (nonneg_ceiling_is_nat 0 (nonneg_ceiling_is_nat-1 nil 3237052399 3342859185 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 35 30 nil nil)) (floor_int 0 (floor_int-1 nil 3237052399 3342859185 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil)) 56 40 nil nil)) (ceiling_int 0 (ceiling_int-1 nil 3237052399 3342859185 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil)) 39 30 nil nil)) (floor_plus_int 0 (floor_plus_int-1 nil 3237052399 3342859186 ("" (skolem!) (("" (name "j!1" "floor(x!1+i!1)") (("" (name "k!1" "floor(x!1)") (("" (typepred "floor(i!1 + x!1)") (("" (typepred "floor(x!1)") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_plus_real_is_real application-judgement "real" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil)) 639 600 nil nil)) (ceiling_plus_int 0 (ceiling_plus_int-1 nil 3237052399 3342859187 ("" (skolem!) (("" (lemma "ceiling_def") (("" (inst-cp - "x!1+i!1") (("" (flatten) (("" (name "j!1" "ceiling(x!1)") (("" (name "k!1" "ceiling(x!1+i!1)") (("" (replace -1) (("" (replace -2) (("" (inst - "x!1") (("" (replace -2) (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((ceiling_def formula-decl nil floor_ceil nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_plus_real_is_real application-judgement "real" reals nil) (int_plus_int_is_int application-judgement "int" integers nil)) 520 480 nil nil)) (floor_ceiling_nonint 0 (floor_ceiling_nonint-1 nil 3237052399 3342859187 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (int_minus_int_is_int application-judgement "int" integers nil) (integer? const-decl "bool" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 176 170 nil nil)) (floor_ceiling_int 0 (floor_ceiling_int-1 nil 3237052399 3342859187 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil)) 65 50 nil nil)) (floor_neg 0 (floor_neg-1 nil 3237052399 3342859187 ("" (skosimp*) (("" (lift-if) (("" (prop) (("1" (rewrite "floor_int") (("1" (rewrite "floor_int") (("1" (assert) nil nil) ("2" (rewrite "closed_neg") (("1" (assert) (("1" (expand "integer?") (("1" (flatten) (("1" (rewrite "closed_neg") nil nil)) nil)) nil)) nil) ("2" (expand "integer?") (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (expand "integer?") (("2" (propax) nil nil)) nil)) nil) ("2" (expand "integer?") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((int_minus_int_is_int application-judgement "int" integers nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (floor_int formula-decl nil floor_ceil nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil) (minus_int_is_int application-judgement "int" integers nil) (minus_real_is_real application-judgement "real" reals nil) (rat nonempty-type-eq-decl nil rationals nil) (closed_neg formula-decl nil rationals nil) (integer? const-decl "bool" integers nil) (int nonempty-type-eq-decl nil integers nil) (closed_neg formula-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil)) 206 180 nil nil)) (real_parts 0 (real_parts-1 nil 3237052399 3342859187 ("" (expand "fractional") (("" (propax) nil nil)) nil) proved ((fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 61 60 nil nil)) (floor_plus 0 (floor_plus-2 "" 3237078783 3342859188 ("" (skosimp) (("" (expand "fractional") (("" (lemma "floor_plus_int") (("" (inst -1 "-1 * floor(x!1) - floor(y!1)" "x!1 + y!1") (("" (replace -1) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (int_times_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_plus_real_is_real application-judgement "real" reals nil) (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (int_plus_int_is_int application-judgement "int" integers nil) (floor_plus_int formula-decl nil floor_ceil nil)) 885 850 t shostak) (floor_plus-1 nil 3237052399 3237078567 ("" (skolem!) (("" (expand "fractional") (("" (assert) nil nil)) nil)) nil) proved nil 690739 197480 nil nil)) (ceiling_plus 0 (ceiling_plus-1 nil 3237052399 3342859189 ("" (skolem!) (("" (expand "fractional") (("" (lemma "ceiling_plus_int") (("" (inst-cp -1 "-floor(x!1) - floor(y!1)" "x!1 + y!1") (("" (replace -2) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (int_times_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil) (int_plus_int_is_int application-judgement "int" integers nil) (minus_int_is_int application-judgement "int" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (ceiling_plus_int formula-decl nil floor_ceil nil) (real_plus_real_is_real application-judgement "real" reals nil)) 1033 970 nil nil)) (floor_split 0 (floor_split-1 nil 3237052399 3342859190 ("" (grind) nil nil) proved ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil) (int_plus_int_is_int application-judgement "int" integers nil)) 423 410 nil nil)) (floor_within_1 0 (floor_within_1-1 nil 3237052399 3342859190 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 139 120 nil nil)) (ceiling_within_1 0 (ceiling_within_1-1 nil 3237052399 3342859190 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 115 110 nil nil)) (floor_val 0 (floor_val-2 "" 3299954653 3342859191 ("" (grind :if-match nil) (("" (typepred "floor(i!1/j!1)") (("" (case "j!1 > 0") (("1" (case "i!1/j!1 >= k!1" "i!1/j!1 < k!1 + 1") (("1" (name-replace "q" "i!1/j!1") (("1" (hide -3 -6 -7 -8 -9 1) (("1" (assert) (("1" (assert :flush? t) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide -1 -2 -3 -4 -5 -6 -7 2 3) (("2" (assert) (("2" (use "div_mult_pos_lt1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (hide -1 -2 -3 -4 -5 -7 2 3) (("3" (use "div_mult_pos_ge1") (("3" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved ((/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (rat nonempty-type-eq-decl nil rationals nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (div_mult_pos_ge1 formula-decl nil real_props nil) (> const-decl "bool" reals nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (int_times_int_is_int application-judgement "int" integers nil)) 890 840 t shostak) (floor_val-1 nil 3237052399 3299952727 ("" (grind :if-match nil) (("" (typepred "floor(i!1/j!1)") (("" (case "j!1 > 0") (("1" (case "i!1/j!1 >= k!1" "i!1/j!1 < k!1 + 1") (("1" (name-replace "q" "i!1/j!1") (("1" (hide -3 -6 -7 -8 -9 1) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (hide -1 -2 -3 -4 -5 -6 -7 2 3) (("2" (assert) (("2" (use "div_mult_pos_lt1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (hide -1 -2 -3 -4 -5 -7 2 3) (("3" (use "div_mult_pos_ge1") (("3" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved nil 1258 1180 nil nil)) (floor_small 0 (floor_small-1 nil 3237052399 3342859192 ("" (skosimp) (("" (lift-if) (("" (prop) (("1" (case "i!1/j!1 < 1") (("1" (assert) nil nil) ("2" (hide 2) (("2" (case "(j!1 - i!1)/j!1 > 0") (("1" (assert) nil nil) ("2" (grind) (("1" (use "pos_div_gt") (("1" (assert) nil nil)) nil) ("2" (use "pos_div_gt") (("2" (assert) nil nil)) nil) ("3" (use "pos_div_gt") (("3" (assert) nil nil)) nil) ("4" (use "pos_div_gt") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "floor(i!1/j!1)") (("2" (case "i!1/j!1 >= -1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3) (("2" (case "(i!1 + j!1)/j!1 >= 0") (("1" (assert) nil nil) ("2" (hide 2) (("2" (grind :if-match nil) (("1" (use "pos_div_ge") (("1" (assert) nil nil)) nil) ("2" (use "pos_div_ge") (("2" (assert) nil nil)) nil) ("3" (use "pos_div_ge") (("3" (assert) nil nil)) nil) ("4" (use "pos_div_ge") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (pos_div_ge formula-decl nil real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (- const-decl "[numfield -> numfield]" number_fields nil) (>= const-decl "bool" reals nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (> const-decl "bool" reals nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (pos_div_gt formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_int_is_int application-judgement "int" integers nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)) 1465 1330 nil nil)) (floor_eq_0 0 (floor_eq_0-1 nil 3237052399 3342859193 ("" (skosimp) (("" (typepred "floor(x!1)") (("" (assert) nil nil)) nil)) nil) proved ((floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 293 270 nil nil)) (fractional_plus 0 (fractional_plus-1 nil 3307951383 3342859194 ("" (skosimp*) (("" (lemma "floor_plus" ("x" "x!1" "y" "y!1")) (("" (expand "fractional" 1 1) (("" (replace -1 1) (("" (lemma "real_parts" ("x" "fractional(x!1) + fractional(y!1)")) (("" (hide -2) (("" (lemma "real_parts" ("x" "x!1")) (("" (lemma "real_parts" ("x" "y!1")) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (floor_plus formula-decl nil floor_ceil nil) (real_minus_real_is_real application-judgement "real" reals nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_times_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_parts formula-decl nil floor_ceil nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 1291 1220 t shostak)) (floor_div 0 (floor_div-1 nil 3307951426 3342859195 ("" (skosimp*) (("" (lemma "floor_def" ("x" "x!1/py!1")) (("" (flatten -1) (("" (split 1) (("1" (assert) (("1" (flatten) (("1" (replace -1) (("1" (rewrite "div_mult_pos_le2" -2) (("1" (rewrite "div_mult_pos_lt1" -3) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (lemma "trich_lt" ("x" "floor(x!1 / py!1)" "y" "i!1")) (("2" (rewrite "div_mult_pos_le2" -4) (("2" (rewrite "div_mult_pos_lt1" -5) (("2" (split -1) (("1" (lemma "both_sides_times_pos_le1" ("y" "i!1" "x" "floor(x!1 / py!1)+1" "pz" "py!1")) (("1" (assert) nil nil)) nil) ("2" (propax) nil nil) ("3" (lemma "both_sides_times_pos_le1" ("x" "i!1+1" "y" "floor(x!1 / py!1)" "pz" "py!1")) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (floor_def formula-decl nil floor_ceil nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (div_mult_pos_le2 formula-decl nil real_props nil) (real_plus_real_is_real application-judgement "real" reals nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (trich_lt formula-decl nil real_props nil) (both_sides_times_pos_le1 formula-decl nil real_props nil)) 1025 940 t shostak)) (floor_0 0 (floor_0-1 nil 3307951470 3342859195 ("" (skosimp*) (("" (lemma "floor_div" ("x" "x!1" "py" "1" "i" "0")) (("" (replace -1 1) (("" (assert) nil nil)) nil)) nil)) nil) proved ((posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (floor_div formula-decl nil floor_ceil nil) (even_plus_odd_is_odd application-judgement "odd_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (odd_times_odd_is_odd application-judgement "odd_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_times_even_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_div_nzreal_is_real application-judgement "real" reals nil)) 406 370 t shostak)))(exponentiation (expt_TCC1 0 (expt_TCC1-1 nil 3237052399 3342859195 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 74 60 nil nil)) (expt_TCC2 0 (expt_TCC2-1 nil 3237052399 3342859196 ("" (grind) nil nil) proved nil 14 10 nil nil)) (expt_pos_aux 0 (expt_pos_aux-1 nil 3237052399 3342859196 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (rewrite "pos_times_gt") nil nil)) nil)) nil)) nil)) nil) proved ((pos_times_gt formula-decl nil real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 97 60 nil nil)) (expt_nonzero_aux 0 (expt_nonzero_aux-1 nil 3237052399 3342859196 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" -2) (("2" (inst?) (("2" (rewrite "zero_times3") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((zero_times3 formula-decl nil real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 83 60 nil nil)) (nnreal_expt 0 (nnreal_expt-1 nil 3237052399 3342859196 ("" (induct "n") (("1" (skosimp) (("1" (expand "expt") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst -1 "x!1") (("2" (assert) (("2" (lemma "pos_times_ge") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pos_times_ge formula-decl nil real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (nnreal type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 201 170 nil nil)) (posreal_expt 0 (posreal_expt-1 nil 3237052399 3342859196 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (inst -1 "x!1") (("2" (expand "expt" +) (("2" (assert) (("2" (lemma "pos_times_gt") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pos_times_gt formula-decl nil real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnreal_expt application-judgement "nnreal" exponentiation nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 245 220 nil nil)) (nzreal_expt 0 (nzreal_expt-1 nil 3237052399 3342859197 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" -2) (("2" (inst -1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 187 170 nil nil)) (rat_expt 0 (rat_expt-1 nil 3237052399 3342859197 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (inst -1 "x!1") (("2" (expand "expt" +) (("2" (lemma "rat_times_rat_is_rat") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) nil nil (rat_times_rat_is_rat judgement-tcc nil rationals nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (rat nonempty-type-eq-decl nil rationals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 315 280 nil nil)) (nnrat_expt 0 (nnrat_expt-1 nil 3237052399 3342859197 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nnrat nonempty-type-eq-decl nil rationals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (rat_expt application-judgement "rat" exponentiation nil) (nnreal_expt application-judgement "nnreal" exponentiation nil)) 77 70 nil nil)) (posrat_expt 0 (posrat_expt-1 nil 3237052399 3342859197 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnrat_expt application-judgement "nnrat" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (posreal_expt application-judgement "posreal" exponentiation nil)) 94 90 nil nil)) (int_expt 0 (int_expt-1 nil 3237052399 3342859197 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (inst -1 "x!1") (("2" (expand "expt" +) (("2" (lemma "int_times_int_is_int") (("2" (inst -1 "x!1" "expt(x!1, j!1)") nil nil)) nil)) nil)) nil)) nil)) nil) proved ((rat_times_rat_is_rat application-judgement "rat" rationals nil) nil nil (int_times_int_is_int judgement-tcc nil integers nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (rat_expt application-judgement "rat" exponentiation nil)) 317 300 nil nil)) (nat_expt 0 (nat_expt-1 nil 3237052399 3342859198 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnrat_expt application-judgement "nnrat" exponentiation nil) (int_expt application-judgement "int" exponentiation nil)) 161 140 nil nil)) (posnat_expt 0 (posnat_expt-1 nil 3237052399 3342859198 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posrat_expt application-judgement "posrat" exponentiation nil) (nat_expt application-judgement "nat" exponentiation nil)) 160 130 nil nil)) (caret_TCC1 0 (caret_TCC1-1 nil 3237052399 3342859198 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_int_is_int application-judgement "int" integers nil)) 219 210 nil nil)) (caret_TCC2 0 (caret_TCC2-1 nil 3237052399 3342859198 ("" (skolem!) (("" (typepred "i!1") (("" (rewrite "expt_nonzero_aux") nil nil)) nil)) nil) proved ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (/= const-decl "boolean" notequal nil) (number nonempty-type-decl nil numbers nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (nzreal nonempty-type-eq-decl nil reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (expt_nonzero_aux formula-decl nil exponentiation nil) (minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 226 210 nil nil)) (expt_pos_TCC1 0 (expt_pos_TCC1-1 nil 3237052399 3342859198 ("" (tcc :defs !) nil nil) proved nil 142 140 nil nil)) (expt_pos 0 (expt_pos-1 nil 3237052399 3342859199 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (rewrite "expt_pos_aux") nil nil) ("2" (rewrite "quotient_pos_gt") (("2" (rewrite "expt_pos_aux") nil nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (expt_pos_aux formula-decl nil exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (quotient_pos_gt formula-decl nil real_props nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (minus_int_is_int application-judgement "int" integers nil)) 252 210 nil nil)) (expt_nonzero_TCC1 0 (expt_nonzero_TCC1-1 nil 3237052399 3342859199 ("" (grind) nil nil) proved nil 139 130 nil nil)) (expt_nonzero 0 (expt_nonzero-1 nil 3237052399 3342859199 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (lemma "expt_nonzero_aux") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "inv_ne_0") (("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) nil (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (expt_nonzero_aux formula-decl nil exponentiation nil) (minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (expt def-decl "real" exponentiation nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (inv_ne_0 formula-decl nil real_props nil)) 346 320 nil nil)) (nnreal_exp 0 (nnreal_exp-1 nil 3237052399 3342859200 ("" (skolem-typepred) (("" (expand "^") (("" (lift-if) (("" (split 1) (("1" (flatten) (("1" (case-replace "x!1 = 0") (("1" (expand "expt") (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil) ("2" (use "expt_pos_aux") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (case-replace "x!1 = 0") (("1" (expand "expt") (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil) ("2" (use "expt_pos_aux") (("1" (lemma "quotient_pos_gt") (("1" (inst -1 "expt(x!1, -i!1)") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nat_expt application-judgement "nat" exponentiation nil) (expt def-decl "real" exponentiation nil) (nnreal_expt application-judgement "nnreal" exponentiation nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) nil nil (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (expt_pos_aux formula-decl nil exponentiation nil) (minus_int_is_int application-judgement "int" integers nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (quotient_pos_gt formula-decl nil real_props nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 687 630 nil nil)) (posreal_exp 0 (posreal_exp-1 nil 3237052399 3342859200 ("" (skolem-typepred) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (use "expt_pos_aux") nil nil) ("2" (use "expt_pos_aux") (("1" (lemma "quotient_pos_gt") (("1" (inst -1 "expt(x!1, -i!1)") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (expt_pos_aux formula-decl nil exponentiation nil) nil (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (quotient_pos_gt formula-decl nil real_props nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (/= const-decl "boolean" notequal nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (expt def-decl "real" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (posreal_expt application-judgement "posreal" exponentiation nil) (minus_int_is_int application-judgement "int" integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 405 360 nil nil)) (nzreal_exp 0 (nzreal_exp-1 nil 3237052399 3342859201 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (lemma "nzreal_expt") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "nzreal_expt") (("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) nil (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (nzreal_expt judgement-tcc nil exponentiation nil) (minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil)) 349 330 nil nil)) (rat_exp 0 (rat_exp-1 nil 3237052399 3342859201 ("" (skolem-typepred) (("" (expand "^") (("" (propax) nil nil)) nil)) nil) proved ((rat_expt application-judgement "rat" exponentiation nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (^ const-decl "real" exponentiation nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (>= const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (rat nonempty-type-eq-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 584 310 nil nil)) (nnrat_exp 0 (nnrat_exp-1 nil 3237052399 3342859202 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (nnrat nonempty-type-eq-decl nil rationals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (rat_exp application-judgement "rat" exponentiation nil) (nnreal_exp application-judgement "nnreal" exponentiation nil)) 212 190 nil nil)) (posrat_exp_TCC1 0 (posrat_exp_TCC1-1 nil 3237052399 3342859202 ("" (subtype-tcc) nil nil) proved nil 161 160 nil nil)) (posrat_exp 0 (posrat_exp-1 nil 3237052399 3342859202 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_rat nonempty-type-eq-decl nil rationals nil) (> const-decl "bool" reals nil) (posrat nonempty-type-eq-decl nil rationals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnrat_exp application-judgement "nnrat" exponentiation nil) (nzreal_exp application-judgement "nzreal" exponentiation nil) (posreal_exp application-judgement "posreal" exponentiation nil)) 210 190 nil nil)) (int_exp_TCC1 0 (int_exp_TCC1-1 nil 3237052399 3342859202 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 175 170 nil nil)) (int_exp 0 (int_exp-1 nil 3237052399 3342859202 ("" (subtype-tcc) nil nil) proved ((^ const-decl "real" exponentiation nil) (int_expt application-judgement "int" exponentiation nil)) 196 170 nil nil)) (nat_exp_TCC1 0 (nat_exp_TCC1-1 nil 3237052399 3342859203 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 176 170 nil nil)) (nat_exp 0 (nat_exp-1 nil 3237052399 3342859203 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nat_expt application-judgement "nat" exponentiation nil) (^ const-decl "real" exponentiation nil)) 232 210 nil nil)) (posint_exp_TCC1 0 (posint_exp_TCC1-1 nil 3237052399 3342859203 ("" (subtype-tcc) nil nil) proved nil 184 180 nil nil)) (posint_exp 0 (posint_exp-1 nil 3237052399 3342859203 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posint nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posnat_expt application-judgement "posnat" exponentiation nil) (^ const-decl "real" exponentiation nil)) 211 210 nil nil)) (expt_x0_aux 0 (expt_x0_aux-1 nil 3237052399 3342859204 ("" (tcc :defs !) nil nil) proved ((expt def-decl "real" exponentiation nil)) 217 200 nil nil)) (expt_x1_aux 0 (expt_x1_aux-1 nil 3237052399 3342859204 ("" (tcc :defs !) nil nil) proved ((expt def-decl "real" exponentiation nil)) 207 200 nil nil)) (expt_1n_aux 0 (expt_1n_aux-1 nil 3237052399 3342859204 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (assert) nil nil)) nil)) nil)) nil) proved ((posint_times_posint_is_posint application-judgement "posint" integers nil) (posnat_expt application-judgement "posnat" exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 419 400 nil nil)) (increasing_expt_aux 0 (increasing_expt_aux-1 nil 3237052399 3342859205 ("" (induct "m") (("1" (skosimp*) (("1" (expand "expt") (("1" (expand "expt") (("1" (expand "expt") (("1" (lemma "both_sides_times_pos_gt1") (("1" (inst -1 "gt1x!1" "gt1x!1" "1") (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (expand "expt" 1) (("2" (lemma "div_mult_pos_gt1") (("2" (inst -1 "gt1x!1" "expt(gt1x!1, j!1 + 2)" "gt1x!1") (("2" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (div_mult_pos_gt1 formula-decl nil real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (both_sides_times_pos_gt1 formula-decl nil real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 967 890 nil nil)) (decreasing_expt_aux 0 (decreasing_expt_aux-1 nil 3237052399 3342859206 ("" (induct "m") (("1" (skosimp) (("1" (expand "expt") (("1" (expand "expt") (("1" (expand "expt") (("1" (lemma "div_mult_pos_lt2") (("1" (inst -1 "lt1x!1" "lt1x!1" "lt1x!1") (("1" (prop) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (expand "expt" +) (("2" (lemma "div_mult_pos_gt2") (("2" (inst -1 "lt1x!1" "expt(lt1x!1, 2 + j!1)" "lt1x!1") (("2" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (div_mult_pos_gt2 formula-decl nil real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (div_mult_pos_lt2 formula-decl nil real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 976 920 nil nil)) (expt_1_aux 0 (expt_1_aux-1 nil 3237052399 3342859207 ("" (induct "n") (("1" (skosimp*) (("1" (prop) (("1" (expand "expt") (("1" (expand "expt") (("1" (propax) nil nil)) nil)) nil) ("2" (expand "expt") (("2" (expand "expt") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (inst -1 "px!1") (("2" (expand "expt" +) (("2" (ground) (("2" (case "j!1 = 0") (("1" (replace -1) (("1" (expand "expt") (("1" (expand "expt") (("1" (assert) (("1" (rewrite "sqrt_1") nil nil)) nil)) nil)) nil)) nil) ("2" (case "px!1 > 1") (("1" (lemma "increasing_expt_aux") (("1" (inst -1 "px!1" "j!1-1") (("1" (assert) (("1" (lemma "eq1_gt") (("1" (inst -1 "px!1" "expt(px!1, 1 + j!1)") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (lemma "decreasing_expt_aux") (("2" (inst -1 "px!1" "j!1-1") (("1" (lemma "eq1_gt") (("1" (inst -1 "1/px!1" "1/expt(px!1, 1 + j!1)") (("1" (assert) (("1" (split) (("1" (rewrite "div_mult_pos_lt1") nil nil) ("2" (assert) (("2" (rewrite "div_mult_pos_gt2") nil nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) nil (- const-decl "[numfield, numfield -> numfield]" number_fields nil) nil (eq1_gt formula-decl nil real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (increasing_expt_aux formula-decl nil exponentiation nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (< const-decl "bool" reals nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (div_mult_pos_gt2 formula-decl nil real_props nil) (decreasing_expt_aux formula-decl nil exponentiation nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (sqrt_1 formula-decl nil real_props nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 961 870 t nil)) (expt_plus_aux 0 (expt_plus_aux-1 nil 3237052399 3342859208 ("" (induct "n") (("1" (skosimp*) (("1" (expand "expt" 1 3) (("1" (propax) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "expt" 1 3) (("2" (expand "expt" 1 1) (("2" (inst -1 "m!1" "n0x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil)) 715 640 nil nil)) (expt_minus_aux_TCC1 0 (expt_minus_aux_TCC1-1 nil 3237052399 3342859208 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 317 300 nil nil)) (expt_minus_aux 0 (expt_minus_aux-1 nil 3237052399 3342859209 ("" (induct "m") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (case "j!1 + 1 = n!1") (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (expand "expt" 2 1) (("2" (expand "expt" 2 2) (("2" (assert) (("2" (inst?) (("2" (assert) (("2" (replace -1) (("2" (rewrite "times_div1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil) proved ((int_plus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_times_int_is_int application-judgement "int" integers nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat_induction formula-decl nil naturalnumbers nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 990 920 nil nil)) (expt_times_aux 0 (expt_times_aux-1 nil 3237052399 3342859210 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" 1 2) (("2" (expand "expt" 1 1) (("2" (lift-if) (("2" (inst -1 "m!1" "n0x!1") (("2" (replace -1 :dir rl) (("2" (prop) (("1" (assert) (("1" (case "m!1 = 0") (("1" (replace -1) (("1" (grind) nil nil)) nil) ("2" (case "j!1 = 0") (("1" (assert) nil nil) ("2" (lemma "posreal_mult_closed") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (case "m!1 = 0") (("1" (grind) nil nil) ("2" (case "j!1 = 0") (("1" (replace -1) (("1" (expand "expt" 3 3) (("1" (expand "expt" 3 2) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (lemma "expt_plus_aux") (("2" (inst -1 "m!1" "m!1 * j!1" "n0x!1") (("2" (replace -1 :dir rl) (("2" (expand "expt" 3 2) (("2" (lift-if) (("2" (assert) (("2" (assert) (("2" (prop) (("2" (lemma "zero_times3") (("2" (inst -1 "m!1" "j!1 + 1") (("2" (replace -2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((even_times_int_is_even application-judgement "even_int" integers nil) (int_times_even_is_even application-judgement "even_int" integers nil) (even_plus_even_is_even application-judgement "even_int" integers nil) (posreal_mult_closed formula-decl nil real_axioms nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (int_plus_int_is_int application-judgement "int" integers nil) (expt_plus_aux formula-decl nil exponentiation nil) (int_minus_int_is_int application-judgement "int" integers nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) 1012 950 nil nil)) (expt_divide_aux 0 (expt_divide_aux-1 nil 3237052399 3342859211 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" 1 2) (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (case "expt(n0x!1, j!1 * m!1 + m!1) = expt(n0x!1, m!1) * expt(n0x!1, m!1 * j!1)") (("1" (assert) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (rewrite "expt_plus_aux") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (expt_plus_aux formula-decl nil exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (expt def-decl "real" exponentiation nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil)) 917 850 t nil)) (both_sides_expt1_aux 0 (both_sides_expt1_aux-1 nil 3237052399 3342859212 ("" (induct "m") (("1" (skosimp) (("1" (expand "expt") (("1" (expand "expt" 1 1) (("1" (ground) (("1" (case "px!1 > 1") (("1" (lemma "increasing_expt_aux") (("1" (inst -1 "px!1" "n!1-1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "decreasing_expt_aux") (("2" (inst -1 "px!1" "n!1-1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand "expt") (("2" (propax) nil nil)) nil) ("3" (replace -1) (("3" (rewrite "expt_1n_aux") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (expand "expt" 1 1) (("2" (expand "expt" 1 2) (("2" (case "n!1 = 0") (("1" (replace -1) (("1" (ground) (("1" (expand "expt" -1 2) (("1" (case "px!1 >1") (("1" (lemma "increasing_expt_aux") (("1" (inst -1 "px!1" "j!1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "decreasing_expt_aux") (("2" (inst -1 "px!1" "j!1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (rewrite "expt_1n_aux") (("2" (rewrite "expt_1n_aux") nil nil)) nil)) nil)) nil)) nil) ("2" (ground) (("1" (inst -2 "n!1-1" "px!1") (("1" (assert) (("1" (rewrite "both_sides_times2") nil nil)) nil)) nil) ("2" (replace -1) (("2" (rewrite "expt_1n_aux") (("2" (rewrite "expt_1n_aux") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) nil (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (both_sides_times2 formula-decl nil real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (expt_1n_aux formula-decl nil exponentiation nil) (posnat_expt application-judgement "posnat" exponentiation nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) nil (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (increasing_expt_aux formula-decl nil exponentiation nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (< const-decl "bool" reals nil) (decreasing_expt_aux formula-decl nil exponentiation nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 1126 1000 nil nil)) (both_sides_expt2_aux 0 (both_sides_expt2_aux-1 nil 3237052399 3342859215 ("" (induct "pm") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (skosimp) (("3" (skosimp) (("3" (split) (("1" (expand "expt" +) (("1" (inst -1 "px!1" "py!1") (("1" (ground) (("1" (hide 1) (("1" (hide -2) (("1" (case "FORALL (m:nat), (px, py: posreal): px > py IMPLIES expt(px,m+1) > expt(py, m+1)") (("1" (case "px!1>py!1") (("1" (inst -2 "j!1-1" "px!1" "py!1") (("1" (assert) (("1" (lemma "gt_times_gt_pos1") (("1" (inst -1 "expt(py!1, j!1)" "py!1" "px!1" "expt(px!1, j!1)") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (expand "expt" +) (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (inst -1 "j!1-1" "py!1" "px!1") (("1" (assert) (("1" (lemma "gt_times_gt_pos1") (("1" (inst -1 "expt(px!1, j!1)" "px!1" "py!1" "expt(py!1, j!1)") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (expand "expt" +) (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide -1 2 3) (("2" (induct "m") (("1" (skosimp*) (("1" (expand "expt") (("1" (expand "expt") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (assert) (("2" (expand "expt" +) (("2" (rewrite "gt_times_gt_pos1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "expt") (("2" (expand "expt") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) nil (gt_times_gt_pos1 formula-decl nil real_props nil) (odd_plus_odd_is_even application-judgement "even_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 2667 860 nil nil)) (both_sides_expt_pos_lt_aux 0 (both_sides_expt_pos_lt_aux-1 nil 3237052399 3342859216 ("" (induct "m") (("1" (skosimp) (("1" (expand "expt") (("1" (expand "expt") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -1 "px!1" "py!1") (("2" (expand "expt" 1) (("2" (ground) (("1" (rewrite "lt_times_lt_pos1") nil nil) ("2" (lemma "ge_times_ge_pos") (("2" (inst -1 "expt(py!1, 1 + j!1)" "py!1" "px!1" "expt(px!1, 1 + j!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((ge_times_ge_pos formula-decl nil real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (lt_times_lt_pos1 formula-decl nil real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (< const-decl "bool" reals nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 742 670 nil nil)) (both_sides_expt_gt1_lt_aux 0 (both_sides_expt_gt1_lt_aux-1 nil 3237052399 3342859217 ("" (induct "m") (("1" (skosimp*) (("1" (expand "expt") (("1" (expand "expt" 1 1) (("1" (ground) (("1" (expand "expt") (("1" (assert) nil nil)) nil) ("2" (lemma "increasing_expt_aux") (("2" (inst -1 "gt1x!1" "n!1 - 1") (("2" (expand "expt" -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (ground) (("1" (case "n!1 = 0") (("1" (replace -1) (("1" (expand "expt" -2 2) (("1" (lemma "increasing_expt_aux") (("1" (inst -1 "gt1x!1" "j!1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst -2 "gt1x!1" "n!1-1") (("1" (ground) (("1" (rewrite "both_sides_times_pos_lt2") nil nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (inst -2 "gt1x!1" "n!1-1") (("2" (assert) (("2" (rewrite "both_sides_times_pos_lt2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) nil (both_sides_times_pos_lt2 formula-decl nil real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (increasing_expt_aux formula-decl nil exponentiation nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (< const-decl "bool" reals nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 971 860 nil nil)) (both_sides_expt_lt1_lt_aux 0 (both_sides_expt_lt1_lt_aux-1 nil 3237052399 3342859218 ("" (induct "m") (("1" (skosimp*) (("1" (expand "expt" 1 1) (("1" (expand "expt" -1 1) (("1" (ground) (("1" (lemma "decreasing_expt_aux") (("1" (inst -1 "lt1x!1" "n!1-1") (("1" (assert) nil nil) ("2" (expand "expt") (("2" (expand "expt") (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst -1 "lt1x!1" "n!1 - 1") (("1" (ground) (("1" (rewrite "both_sides_times_pos_lt2") nil nil) ("2" (rewrite "both_sides_times_pos_lt2") nil nil)) nil) ("2" (ground) (("2" (expand "expt" 1 2) (("2" (lemma "decreasing_expt_aux") (("2" (inst -1 "lt1x!1" "j!1") (("2" (expand "expt" -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved (nil (both_sides_times_pos_lt2 formula-decl nil real_props nil) (decreasing_expt_aux formula-decl nil exponentiation nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (int_plus_int_is_int application-judgement "int" integers nil) nil (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 996 920 nil nil)) (both_sides_expt_pos_le_aux 0 (both_sides_expt_pos_le_aux-1 nil 3237052399 3342859218 ("" (skosimp) (("" (ground) (("1" (lemma "both_sides_expt_pos_lt_aux") (("1" (inst -1 "m!1" "py!1" "px!1") (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "both_sides_expt_pos_lt_aux") (("2" (inst -1 "m!1" "py!1" "px!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (both_sides_expt_pos_lt_aux formula-decl nil exponentiation nil)) 513 470 nil nil)) (both_sides_expt_gt1_le_aux 0 (both_sides_expt_gt1_le_aux-1 nil 3237052399 3342859219 ("" (skosimp) (("" (lemma "both_sides_expt_gt1_lt_aux") (("" (inst -1 "gt1x!1" "n!1" "m!1") (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((both_sides_expt_gt1_lt_aux formula-decl nil exponentiation nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 578 560 nil nil)) (both_sides_expt_lt1_le_aux 0 (both_sides_expt_lt1_le_aux-1 nil 3237052399 3342859220 ("" (lemma "both_sides_expt_lt1_lt_aux") (("" (skosimp) (("" (inst -1 "lt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_expt_lt1_lt_aux formula-decl nil exponentiation nil)) 457 430 nil nil)) (both_sides_expt_pos_gt_aux 0 (both_sides_expt_pos_gt_aux-1 nil 3237052399 3342859220 ("" (lemma "both_sides_expt_pos_lt_aux") (("" (skosimp) (("" (inst -1 "m!1" "py!1" "px!1") (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_expt_pos_lt_aux formula-decl nil exponentiation nil)) 509 490 nil nil)) (both_sides_expt_gt1_gt_aux 0 (both_sides_expt_gt1_gt_aux-1 nil 3237052399 3342859221 ("" (lemma "both_sides_expt_gt1_lt_aux") (("" (skosimp) (("" (inst -1 "gt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_expt_gt1_lt_aux formula-decl nil exponentiation nil)) 445 410 nil nil)) (both_sides_expt_lt1_gt_aux 0 (both_sides_expt_lt1_gt_aux-1 nil 3237052399 3342859221 ("" (lemma "both_sides_expt_lt1_lt_aux") (("" (skosimp) (("" (inst -1 "lt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_expt_lt1_lt_aux formula-decl nil exponentiation nil)) 445 430 nil nil)) (both_sides_expt_pos_ge_aux 0 (both_sides_expt_pos_ge_aux-1 nil 3237052399 3342859222 ("" (lemma "both_sides_expt_pos_le_aux") (("" (skosimp) (("" (inst -1 "m!1" "py!1" "px!1") (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_expt_pos_le_aux formula-decl nil exponentiation nil)) 524 500 nil nil)) (both_sides_expt_gt1_ge_aux 0 (both_sides_expt_gt1_ge_aux-1 nil 3237052399 3342859222 ("" (lemma "both_sides_expt_gt1_le_aux") (("" (skosimp) (("" (inst -1 "gt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_expt_gt1_le_aux formula-decl nil exponentiation nil)) 445 410 nil nil)) (both_sides_expt_lt1_ge_aux 0 (both_sides_expt_lt1_ge_aux-1 nil 3237052399 3342859223 ("" (lemma "both_sides_expt_lt1_le_aux") (("" (skosimp) (("" (inst -1 "lt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (both_sides_expt_lt1_le_aux formula-decl nil exponentiation nil)) 450 430 nil nil)) (expt_of_mult 0 (expt_of_mult-1 nil 3237052399 3342859223 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_times_real_is_real application-judgement "real" reals nil)) 471 440 nil nil)) (expt_of_div 0 (expt_of_div-1 nil 3237052399 3342859224 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((real_times_real_is_real application-judgement "real" reals nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nat_induction formula-decl nil naturalnumbers nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (nzreal_expt application-judgement "nzreal" exponentiation nil)) 475 450 nil nil)) (expt_of_inv 0 (expt_of_inv-1 nil 3237052399 3342859224 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nat_induction formula-decl nil naturalnumbers nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nzreal_expt application-judgement "nzreal" exponentiation nil)) 488 440 nil nil)) (expt_of_abs 0 (expt_of_abs-1 nil 3237052399 3342859225 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) (("2" (replace -1 :hide? t) (("2" (grind) (("1" (use "neg_times_lt") (("1" (assert) nil nil)) nil) ("2" (use "pos_times_lt") (("2" (assert) nil nil)) nil) ("3" (use "pos_times_lt") (("3" (assert) nil nil)) nil) ("4" (use "neg_times_lt") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pos_times_lt formula-decl nil real_props nil) (neg_times_lt formula-decl nil real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_real_is_real application-judgement "real" reals nil) (nnreal_expt application-judgement "nnreal" exponentiation nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (real_times_real_is_real application-judgement "real" reals nil) (nat_induction formula-decl nil naturalnumbers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1331 1250 t nil)) (abs_of_expt_inv 0 (abs_of_expt_inv-1 nil 3237052399 3342859227 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) (("2" (lemma "div_times") (("2" (inst -1 "abs(n0x!1)" "expt(abs(n0x!1), j!1)" "1" "1") (("2" (replace -1 :dir rl) (("2" (replace -2 :dir rl) (("2" (hide -1 -2) (("2" (grind) (("1" (lemma "quotient_neg_lt") (("1" (inst-cp -1 "n0x!1 * expt(n0x!1, j!1)") (("1" (inst -1 "expt(n0x!1, j!1)") (("1" (assert) (("1" (hide -3 -5) (("1" (lemma "negreal_times_negreal_is_posreal") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "quotient_neg_lt") (("2" (inst-cp -1 "expt(n0x!1, j!1)") (("2" (inst -1 "n0x!1 * expt(n0x!1, j!1)") (("2" (assert) (("2" (hide -2 3) (("2" (lemma "nnreal_times_nnreal_is_nnreal") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (lemma "quotient_neg_lt") (("3" (inst-cp -1 "expt(n0x!1, j!1)") (("3" (inst -1 "n0x!1 * expt(n0x!1, j!1)") (("3" (assert) (("3" (hide 3 4) (("3" (lemma "posreal_mult_closed") (("3" (inst -1 "-n0x!1" "expt(n0x!1, j!1)") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (lemma "quotient_neg_lt") (("4" (inst-cp -1 "expt(n0x!1, j!1)") (("4" (inst -1 "n0x!1 * expt(n0x!1, j!1)") (("4" (assert) (("4" (hide -2 2) (("4" (lemma "posreal_mult_closed") (("4" (inst -1 "n0x!1" "-expt(n0x!1, j!1)") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((div_times formula-decl nil real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (odd_times_odd_is_odd application-judgement "odd_int" integers nil) (posreal_mult_closed formula-decl nil real_axioms nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil) (quotient_neg_lt formula-decl nil real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (negreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (negreal_times_negreal_is_posreal judgement-tcc nil real_types nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}" real_defs nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (nat_induction formula-decl nil naturalnumbers nil) (expt def-decl "real" exponentiation nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (posreal_expt application-judgement "posreal" exponentiation nil)) 1702 1570 nil nil)) (expt_x0_TCC1 0 (expt_x0_TCC1-1 nil 3237052399 3342859227 ("" (grind) nil nil) proved ((/= const-decl "boolean" notequal nil)) 218 200 nil nil)) (expt_x0 0 (expt_x0-1 nil 3237052399 3342859228 ("" (grind) nil nil) proved ((expt def-decl "real" exponentiation nil) (^ const-decl "real" exponentiation nil)) 204 200 nil nil)) (expt_x1_TCC1 0 (expt_x1_TCC1-1 nil 3237052399 3342859228 ("" (tcc :defs !) nil nil) proved ((/= const-decl "boolean" notequal nil)) 207 200 nil nil)) (expt_x1 0 (expt_x1-1 nil 3237052399 3342859228 ("" (grind) nil nil) proved ((expt def-decl "real" exponentiation nil) (^ const-decl "real" exponentiation nil)) 204 200 nil nil)) (expt_x2_TCC1 0 (expt_x2_TCC1-1 nil 3307950059 3342859228 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 221 200 nil shostak)) (expt_x2 0 (expt_x2-1 nil 3307951594 3342859229 ("" (grind) nil nil) proved ((expt def-decl "real" exponentiation nil) (^ const-decl "real" exponentiation nil)) 206 200 t shostak)) (expt_x3_TCC1 0 (expt_x3_TCC1-1 nil 3307950060 3342859229 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 209 200 nil shostak)) (expt_x3 0 (expt_x3-1 nil 3307951600 3342859229 ("" (grind) nil nil) proved ((expt def-decl "real" exponentiation nil) (^ const-decl "real" exponentiation nil) (real_times_real_is_real application-judgement "real" reals nil)) 278 260 t shostak)) (expt_x4_TCC1 0 (expt_x4_TCC1-1 nil 3307950060 3342859229 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 207 200 nil shostak)) (expt_x4 0 (expt_x4-1 nil 3307951604 3342859230 ("" (grind) nil nil) proved ((expt def-decl "real" exponentiation nil) (^ const-decl "real" exponentiation nil) (real_times_real_is_real application-judgement "real" reals nil)) 291 270 t shostak)) (expt_1i 0 (expt_1i-1 nil 3237052399 3342859230 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (rewrite "expt_1n_aux") nil nil) ("2" (rewrite "expt_1n_aux") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (expt_1n_aux formula-decl nil exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (posnat_expt application-judgement "posnat" exponentiation nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (minus_int_is_int application-judgement "int" integers nil)) 346 320 nil nil)) (expt_eq_0_TCC1 0 (expt_eq_0_TCC1-1 nil 3307950060 3342859230 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 205 200 nil shostak)) (expt_eq_0 0 (expt_eq_0-1 nil 3307951654 3342859231 ("" (induct "pn") (("1" (skosimp*) (("1" (grind) nil nil)) nil) ("2" (flatten) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (case "j!1 = 0") (("1" (replace -1) (("1" (assert) (("1" (expand "^") (("1" (expand "expt") (("1" (expand "expt") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case-replace "x!1 ^ (1 + j!1) = x!1*x!1^j!1") (("1" (hide -1) (("1" (inst?) (("1" (ground) (("1" (rewrite "nonzero_times1") nil nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (int_minus_int_is_int application-judgement "int" integers nil) (nonzero_times1 formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (real_times_real_is_real application-judgement "real" reals nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (expt def-decl "real" exponentiation nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (even_plus_odd_is_odd application-judgement "odd_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat_induction formula-decl nil naturalnumbers nil) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (> const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1008 940 t shostak)) (expt_plus_TCC1 0 (expt_plus_TCC1-1 nil 3237052399 3342859232 ("" (tcc :defs !) nil nil) proved nil 222 200 nil nil)) (expt_plus 0 (expt_plus-1 nil 3237052399 3342859233 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (lift-if) (("" (lift-if) (("" (prop) (("1" (rewrite "expt_plus_aux") nil nil) ("2" (assert) nil nil) ("3" (lemma "expt_minus_aux") (("3" (inst -1 "j!1" "-i!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("4" (lemma "cross_mult") (("4" (inst -1 "expt(n0x!1, -(i!1 + j!1))" "expt(n0x!1, -i!1)" "1" "expt(n0x!1, j!1)") (("1" (flatten) (("1" (hide -1) (("1" (replace 2) (("1" (lemma "expt_plus_aux") (("1" (inst -1 "j!1" "-(i!1 + j!1)" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("5" (lemma "expt_minus_aux") (("5" (inst -1 "i!1" "-j!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("6" (assert) (("6" (lemma "cross_mult") (("6" (inst -1 "expt(n0x!1, -(i!1 + j!1))" "expt(n0x!1, -j!1)" "1" "expt(n0x!1, i!1)") (("6" (flatten) (("6" (hide -1) (("6" (split) (("1" (assert) nil nil) ("2" (hide 3) (("2" (lemma "expt_plus_aux") (("2" (inst -1 "i!1" "-(i!1 + j!1)" "n0x!1") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("7" (assert) nil nil) ("8" (case "expt(n0x!1, -(i!1 + j!1)) = expt(n0x!1, -i!1) * expt(n0x!1, -j!1)") (("1" (assert) (("1" (replace -1) (("1" (lemma "div_times") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (lemma "expt_plus_aux") (("2" (inst -1 "-i!1" "-j!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil) ("3" (assert) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (expt_plus_aux formula-decl nil exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (minus_int_is_int application-judgement "int" integers nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) nil nil (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (expt_minus_aux formula-decl nil exponentiation nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (expt def-decl "real" exponentiation nil) (cross_mult formula-decl nil real_props nil) (div_times formula-decl nil real_props nil) (odd_times_odd_is_odd application-judgement "odd_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil)) 1273 1180 nil nil)) (expt_times_TCC1 0 (expt_times_TCC1-1 nil 3237052399 3342859233 ("" (tcc :defs !) nil nil) proved nil 219 200 nil nil)) (expt_times 0 (expt_times-2 "Needed a :flush? t for some reason" 3299952478 3342859234 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (lift-if) (("" (prop) (("1" (rewrite "expt_times_aux") nil nil) ("2" (assert) (("2" (rewrite "pos_times_ge") nil nil)) nil) ("3" (rewrite "pos_times_ge") (("3" (assert) (("3" (grind) nil nil)) nil)) nil) ("4" (lemma "expt_divide_aux") (("4" (inst -1 "-i!1" "j!1" "n0x!1") (("1" (assert) (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("5" (lemma "pos_times_ge") (("5" (inst?) (("5" (assert) (("5" (grind) (("5" (lemma "expt_1n_aux") (("5" (inst?) (("1" (assert) nil nil) ("2" (hide 2) (("2" (assert) (("2" (assert :flush? t) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("6" (case "expt(n0x!1, -(i!1 * j!1)) = expt(expt(n0x!1, i!1), -j!1)") (("1" (assert) nil nil) ("2" (hide 3) (("2" (lemma "expt_times_aux") (("2" (inst -1 "i!1" "-j!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("3" (assert) nil nil) ("4" (propax) nil nil) ("5" (assert) nil nil)) nil) ("7" (lemma "expt_divide_aux") (("7" (inst -1 "-i!1" "-j!1" "n0x!1") (("1" (replace -1 :dir rl) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("8" (lemma "pos_times_ge") (("8" (inst?) (("8" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (expt_1n_aux formula-decl nil exponentiation nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (posnat_expt application-judgement "posnat" exponentiation nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (expt_divide_aux formula-decl nil exponentiation nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) nil nil (expt def-decl "real" exponentiation nil) (int_minus_int_is_int application-judgement "int" integers nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (minus_int_is_int application-judgement "int" integers nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (int_times_int_is_int application-judgement "int" integers nil) (pos_times_ge formula-decl nil real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (expt_times_aux formula-decl nil exponentiation nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil)) 1173 1080 t shostak) (expt_times-1 nil 3237052399 3299951941 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (lift-if) (("" (prop) (("1" (rewrite "expt_times_aux") nil nil) ("2" (assert) (("2" (rewrite "pos_times_ge") nil nil)) nil) ("3" (rewrite "pos_times_ge") (("3" (assert) (("3" (grind) nil nil)) nil)) nil) ("4" (lemma "expt_divide_aux") (("4" (inst -1 "-i!1" "j!1" "n0x!1") (("1" (assert) (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("5" (lemma "pos_times_ge") (("5" (inst?) (("5" (assert) (("5" (grind) (("5" (rewrite "expt_1n_aux") (("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("6" (case "expt(n0x!1, -(i!1 * j!1)) = expt(expt(n0x!1, i!1), -j!1)") (("1" (assert) nil nil) ("2" (hide 3) (("2" (lemma "expt_times_aux") (("2" (inst -1 "i!1" "-j!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("3" (assert) nil nil) ("4" (propax) nil nil) ("5" (assert) nil nil)) nil) ("7" (lemma "expt_divide_aux") (("7" (inst -1 "-i!1" "-j!1" "n0x!1") (("1" (replace -1 :dir rl) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("8" (lemma "pos_times_ge") (("8" (inst?) (("8" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 101723 78680 t nil)) (expt_inverse_TCC1 0 (expt_inverse_TCC1-1 nil 3237052399 3342859235 ("" (grind) nil nil) proved nil 206 200 nil nil)) (expt_inverse 0 (expt_inverse-1 nil 3237052399 3342859235 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (lift-if) (("" (prop) (("1" (grind) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (expt def-decl "real" exponentiation nil)) 451 420 nil nil)) (expt_div_TCC1 0 (expt_div_TCC1-1 nil 3237052399 3342859235 ("" (subtype-tcc) nil nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil)) 243 240 nil nil)) (expt_div 0 (expt_div-1 nil 3237052399 3342859236 ("" (skosimp) (("" (lemma "expt_inverse") (("" (inst -1 "j!1" "n0x!1") (("" (lemma "expt_plus") (("" (inst -1 "i!1" "-j!1" "n0x!1") (("" (assert) (("" (replace -1) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((expt_inverse formula-decl nil exponentiation nil) (expt_plus formula-decl nil exponentiation nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (int_plus_int_is_int application-judgement "int" integers nil) (nzreal_exp application-judgement "nzreal" exponentiation nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (minus_int_is_int application-judgement "int" integers nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 548 520 nil nil)) (both_sides_expt1_TCC1 0 (both_sides_expt1_TCC1-1 nil 3237052399 3342859236 ("" (tcc :defs explicit) nil nil) proved nil 205 200 nil nil)) (both_sides_expt1 0 (both_sides_expt1-1 nil 3237052399 3342859238 ("" (lemma "both_sides_expt1_aux") (("" (skosimp) (("" (expand "^") (("" (lift-if) (("" (split) (("1" (flatten) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (inst -3 "n0i!1 - 1" "n0j!1 - 1" "px!1") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (ground) (("1" (lemma "div_cancel3") (("1" (inst -1 "expt(px!1, -n0j!1)" "1" "expt(px!1, n0i!1)") (("1" (prop) (("1" (hide -1 -3) (("1" (rewrite "expt_plus_aux" :dir rl) (("1" (lemma "expt_1_aux") (("1" (inst -1 "-n0j!1 + n0i!1 - 1" "px!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (rewrite "expt_1n_aux") (("2" (rewrite "expt_1n_aux") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (prop) (("1" (lemma "div_cancel3") (("1" (inst -1 "expt(px!1, -n0i!1)" "1" "expt(px!1, n0j!1)") (("1" (prop) (("1" (hide -1 -3) (("1" (rewrite "expt_plus_aux" :dir rl) (("1" (lemma "expt_1_aux") (("1" (inst -1 "n0j!1 - n0i!1 - 1" "px!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (expand "expt" 1) (("2" (assert) nil nil)) nil) ("3" (replace -1) (("3" (rewrite "expt_1n_aux") (("3" (rewrite "expt_1n_aux") (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (rewrite "cross_mult") (("4" (inst -2 "-n0j!1-1" "-n0i!1-1" "px!1") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("5" (replace -1) (("5" (propax) nil nil)) nil) ("6" (replace -1) (("6" (rewrite "expt_1n_aux") (("6" (rewrite "expt_1n_aux") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (cross_mult formula-decl nil real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) nil (nzint nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) nil (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (posreal_expt application-judgement "posreal" exponentiation nil) (int_plus_int_is_int application-judgement "int" integers nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (expt def-decl "real" exponentiation nil) (- const-decl "[numfield -> numfield]" number_fields nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (expt_1_aux formula-decl nil exponentiation nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (expt_plus_aux formula-decl nil exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (div_cancel3 formula-decl nil real_props nil) (expt_1n_aux formula-decl nil exponentiation nil) (posnat_expt application-judgement "posnat" exponentiation nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (^ const-decl "real" exponentiation nil) (both_sides_expt1_aux formula-decl nil exponentiation nil)) 1536 1380 nil nil)) (both_sides_expt2 0 (both_sides_expt2-1 nil 3237052399 3342859238 ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt2_aux") (("" (lift-if) (("" (prop) (("1" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("3" (inst -2 "-n0i!1" "px!1" "py!1") (("1" (assert) (("1" (rewrite "cross_mult") nil nil)) nil) ("2" (assert) nil nil)) nil) ("4" (inst -2 "-n0i!1" "px!1" "py!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (> const-decl "bool" reals nil) nil (nzint nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (posreal_expt application-judgement "posreal" exponentiation nil) (both_sides_expt2_aux formula-decl nil exponentiation nil)) 554 510 nil nil)) (pos_expt_gt_TCC1 0 (pos_expt_gt_TCC1-1 nil 3237052399 3342859238 ("" (subtype-tcc) nil nil) proved nil 203 200 nil nil)) (pos_expt_gt 0 (pos_expt_gt-1 nil 3237052399 3342859240 ("" (induct "n") (("1" (skosimp) (("1" (rewrite "expt_x0") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (rewrite "expt_plus") (("2" (rewrite "expt_x1") (("2" (inst?) (("2" (case "FORALL (a, b, c, d: nat): a < c & b < d => a + b < c * d") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "c") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (assert) (("2" (case "a!1 = 0") (("1" (assert) nil nil) ("2" (inst -1 "a!1-1" "b!2" "d!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((expt_x1 formula-decl nil exponentiation nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) nil (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (posint_exp application-judgement "posint" exponentiation nil) (expt_plus formula-decl nil exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (expt_x0 formula-decl nil exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (above nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1063 940 nil nil)) (expt_ge1 0 (expt_ge1-1 nil 3237052399 3342859240 ("" (induct-and-rewrite "n" 1 "expt_plus" "expt_x0" "expt_x1") (("" (lemma "ge_times_ge_pos") (("" (inst?) (("" (inst - "1" "1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((ge_times_ge_pos formula-decl nil real_props nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (expt_x1 formula-decl nil exponentiation nil) (expt_plus formula-decl nil exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_exp application-judgement "posint" exponentiation nil) (expt_x0 formula-decl nil exponentiation nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (> const-decl "bool" reals nil) (above nonempty-type-eq-decl nil integers nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (^ const-decl "real" exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil)) 788 720 nil nil)) (both_sides_expt_pos_lt_TCC1 0 (both_sides_expt_pos_lt_TCC1-1 nil 3237052399 3342859241 ("" (tcc :defs explicit) nil nil) proved nil 204 200 nil nil)) (both_sides_expt_pos_lt 0 (both_sides_expt_pos_lt-1 nil 3237052399 3342859241 ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt_pos_lt_aux") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (posreal_expt application-judgement "posreal" exponentiation nil) (int_plus_int_is_int application-judgement "int" integers nil) (both_sides_expt_pos_lt_aux formula-decl nil exponentiation nil)) 383 370 nil nil)) (both_sides_expt_gt1_lt_TCC1 0 (both_sides_expt_gt1_lt_TCC1-1 nil 3237052399 3342859241 ("" (tcc :defs explicit) nil nil) proved nil 205 200 nil nil)) (both_sides_expt_gt1_lt 0 (both_sides_expt_gt1_lt-2 "" 3299962553 3342859243 ("" (skosimp*) (("" (ground) (("1" (case "j!1<=i!1") (("1" (case "gt1x!1 ^ j!1 <= gt1x!1 ^ i!1") (("1" (assert) nil nil) ("2" (hide -2 2) (("2" (case "forall (n:nat): gt1x!1^j!1<=gt1x!1^(j!1+n)") (("1" (inst - "i!1-j!1") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst -1 "1" "j!1 + j!2" "gt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "le_times_le_pos") (("2" (inst - "1" "gt1x!1 ^ j!1" "gt1x!1 ^ (j!1 + j!2)" "gt1x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "forall (n:nat): gt1x!1^i!1<gt1x!1^(1+i!1+n)") (("1" (inst - "j!1-(i!1+1)") (("1" (assert) nil nil) ("2" (assert) (("2" (assert :flush? t) nil nil)) nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) (("1" (rewrite "expt_plus") (("1" (rewrite "expt_x1") (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst - "gt1x!1 ^ i!1" "1" "gt1x!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst - "1" "(1 + i!1 + j!2)" "gt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "lt_times_lt_pos1") (("2" (inst - "gt1x!1^i!1" "1" "gt1x!1^(1+i!1+j!2)" "gt1x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzreal_exp application-judgement "nzreal" exponentiation nil) (posreal_exp application-judgement "posreal" exponentiation nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (^ const-decl "real" exponentiation nil) (>= const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (pred type-eq-decl nil defined_types nil) (nat_induction formula-decl nil naturalnumbers nil) (expt_plus formula-decl nil exponentiation nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (expt_x1 formula-decl nil exponentiation nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (le_times_le_pos formula-decl nil real_props nil) (nzreal nonempty-type-eq-decl nil reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (lt_times_lt_pos1 formula-decl nil real_props nil) (odd_plus_odd_is_even application-judgement "even_int" integers nil) (odd_minus_odd_is_even application-judgement "even_int" integers nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (< const-decl "bool" reals nil)) 1542 1410 t shostak) (both_sides_expt_gt1_lt-1 nil 3237052399 3299952789 ("" (skosimp*) (("" (ground) (("1" (case "j!1<=i!1") (("1" (case "gt1x!1 ^ j!1 <= gt1x!1 ^ i!1") (("1" (assert) nil nil) ("2" (hide -2 2) (("2" (case "forall (n:nat): gt1x!1^j!1<=gt1x!1^(j!1+n)") (("1" (inst - "i!1-j!1") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst -1 "1" "j!1 + j!2" "gt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "le_times_le_pos") (("2" (inst - "1" "gt1x!1 ^ j!1" "gt1x!1 ^ (j!1 + j!2)" "gt1x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "forall (n:nat): gt1x!1^i!1<gt1x!1^(1+i!1+n)") (("1" (inst - "j!1-(i!1+1)") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) (("1" (rewrite "expt_plus") (("1" (rewrite "expt_x1") (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst - "gt1x!1 ^ i!1" "1" "gt1x!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst - "1" "(1 + i!1 + j!2)" "gt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "lt_times_lt_pos1") (("2" (inst - "gt1x!1^i!1" "1" "gt1x!1^(1+i!1+j!2)" "gt1x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1965 1840 nil nil)) (both_sides_expt_lt1_lt_TCC1 0 (both_sides_expt_lt1_lt_TCC1-1 nil 3237052399 3342859243 ("" (tcc :defs explicit) nil nil) proved nil 217 210 nil nil)) (both_sides_expt_lt1_lt 0 (both_sides_expt_lt1_lt-2 "" 3299962626 3342859245 ("" (skosimp*) (("" (ground) (("1" (case "FORALL (n:nat): lt1x!1^(i!1+n) <= lt1x!1^i!1") (("1" (inst -1 "j!1-i!1") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst - "1" "i!1 + j!2" "lt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "le_times_le_pos") (("2" (inst - "lt1x!1" "lt1x!1^(i!1+j!2)" "lt1x!1^i!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "FORALL (n:nat): lt1x!1^(j!1+n+1) < lt1x!1^j!1") (("1" (inst -1 "i!1 -j!1 -1") (("1" (assert) nil nil) ("2" (assert) (("2" (assert :flush? t) nil nil)) nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) (("1" (rewrite "expt_plus") (("1" (rewrite "expt_x1") (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst -1 "lt1x!1 ^ j!1" "lt1x!1" "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst -1 "1" "1 + j!1 + j!2" "lt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "lt_times_lt_pos1") (("2" (inst -1 "lt1x!1 ^ (j!1 + j!2 + 1)" "lt1x!1" "lt1x!1 ^ j!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzreal_exp application-judgement "nzreal" exponentiation nil) (posreal_exp application-judgement "posreal" exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (le_times_le_pos formula-decl nil real_props nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (expt_x1 formula-decl nil exponentiation nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (expt_plus formula-decl nil exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (^ const-decl "real" exponentiation nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (lt_times_lt_pos1 formula-decl nil real_props nil) (odd_plus_odd_is_even application-judgement "even_int" integers nil) (odd_minus_odd_is_even application-judgement "even_int" integers nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 1584 1420 t shostak) (both_sides_expt_lt1_lt-1 nil 3237052399 3299952792 ("" (skosimp*) (("" (ground) (("1" (case "FORALL (n:nat): lt1x!1^(i!1+n) <= lt1x!1^i!1") (("1" (inst -1 "j!1-i!1") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst - "1" "i!1 + j!2" "lt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "le_times_le_pos") (("2" (inst - "lt1x!1" "lt1x!1^(i!1+j!2)" "lt1x!1^i!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "FORALL (n:nat): lt1x!1^(j!1+n+1) < lt1x!1^j!1") (("1" (inst -1 "i!1 -j!1 -1") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) (("1" (rewrite "expt_plus") (("1" (rewrite "expt_x1") (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst -1 "lt1x!1 ^ j!1" "lt1x!1" "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst -1 "1" "1 + j!1 + j!2" "lt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "lt_times_lt_pos1") (("2" (inst -1 "lt1x!1 ^ (j!1 + j!2 + 1)" "lt1x!1" "lt1x!1 ^ j!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2061 1930 nil nil)) (both_sides_expt_pos_le 0 (both_sides_expt_pos_le-1 nil 3237052399 3342859245 ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt_pos_le_aux") (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (posreal_expt application-judgement "posreal" exponentiation nil) (int_plus_int_is_int application-judgement "int" integers nil) (both_sides_expt_pos_le_aux formula-decl nil exponentiation nil)) 397 380 nil nil)) (both_sides_expt_gt1_le 0 (both_sides_expt_gt1_le-1 nil 3237052399 3342859245 ("" (skosimp*) (("" (case "i!1 = j!1") (("1" (assert) nil nil) ("2" (lemma "both_sides_expt_gt1_lt") (("2" (inst -1 "gt1x!1" "j!1" "i!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nzreal_exp application-judgement "nzreal" exponentiation nil) (posreal_exp application-judgement "posreal" exponentiation nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)) 382 350 nil nil)) (both_sides_expt_lt1_le 0 (both_sides_expt_lt1_le-1 nil 3237052399 3342859246 ("" (skosimp*) (("" (lemma "both_sides_expt_lt1_lt") (("" (inst -1 "j!1" "i!1" "lt1x!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((both_sides_expt_lt1_lt formula-decl nil exponentiation nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posreal_exp application-judgement "posreal" exponentiation nil) (nzreal_exp application-judgement "nzreal" exponentiation nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 379 360 nil nil)) (both_sides_expt_pos_gt 0 (both_sides_expt_pos_gt-1 nil 3237052399 3342859246 ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt_pos_gt_aux") (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (posreal_expt application-judgement "posreal" exponentiation nil) (int_plus_int_is_int application-judgement "int" integers nil) (both_sides_expt_pos_gt_aux formula-decl nil exponentiation nil)) 389 370 nil nil)) (both_sides_expt_gt1_gt 0 (both_sides_expt_gt1_gt-1 nil 3237052399 3342859247 ("" (skosimp*) (("" (lemma "both_sides_expt_gt1_lt") (("" (inst -1 "gt1x!1" "j!1" "i!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((both_sides_expt_gt1_lt formula-decl nil exponentiation nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posreal_exp application-judgement "posreal" exponentiation nil) (nzreal_exp application-judgement "nzreal" exponentiation nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 396 360 nil nil)) (both_sides_expt_lt1_gt 0 (both_sides_expt_lt1_gt-1 nil 3237052399 3342859247 ("" (skosimp*) (("" (lemma "both_sides_expt_lt1_lt") (("" (inst -1 "j!1" "i!1" "lt1x!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((both_sides_expt_lt1_lt formula-decl nil exponentiation nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posreal_exp application-judgement "posreal" exponentiation nil) (nzreal_exp application-judgement "nzreal" exponentiation nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 379 360 nil nil)) (both_sides_expt_pos_ge 0 (both_sides_expt_pos_ge-1 nil 3237052399 3342859248 ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt_pos_ge_aux") (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (posreal_expt application-judgement "posreal" exponentiation nil) (int_plus_int_is_int application-judgement "int" integers nil) (both_sides_expt_pos_ge_aux formula-decl nil exponentiation nil)) 393 360 nil nil)) (both_sides_expt_gt1_ge 0 (both_sides_expt_gt1_ge-1 nil 3237052399 3342859248 ("" (skosimp*) (("" (lemma "both_sides_expt_gt1_le") (("" (inst -1 "gt1x!1" "j!1" "i!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((both_sides_expt_gt1_le formula-decl nil exponentiation nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posreal_exp application-judgement "posreal" exponentiation nil) (nzreal_exp application-judgement "nzreal" exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 380 360 nil nil)) (both_sides_expt_lt1_ge 0 (both_sides_expt_lt1_ge-1 nil 3237052399 3342859248 ("" (skosimp*) (("" (lemma "both_sides_expt_lt1_le") (("" (inst -1 "j!1" "i!1" "lt1x!1") (("" (ground) nil nil)) nil)) nil)) nil) proved ((both_sides_expt_lt1_le formula-decl nil exponentiation nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posreal_exp application-judgement "posreal" exponentiation nil) (nzreal_exp application-judgement "nzreal" exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 381 370 nil nil)) (expt_gt1_pos_TCC1 0 (expt_gt1_pos_TCC1-1 nil 3237052399 3342859249 ("" (subtype-tcc) nil nil) proved nil 223 190 nil nil)) (expt_gt1_pos 0 (expt_gt1_pos-1 nil 3237052399 3342859250 ("" (induct "pm") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (skosimp*) (("3" (split) (("1" (rewrite "expt_plus") (("1" (rewrite "expt_x1") (("1" (inst?) (("1" (lemma "both_sides_times_pos_ge1") (("1" (inst -1 "gt1x!1" "gt1x!1 ^ j!1" "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "^") (("2" (expand "expt") (("2" (expand "expt") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((expt def-decl "real" exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (expt_plus formula-decl nil exponentiation nil) (posreal_exp application-judgement "posreal" exponentiation nil) (nzreal_exp application-judgement "nzreal" exponentiation nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (both_sides_times_pos_ge1 formula-decl nil real_props nil) (expt_x1 formula-decl nil exponentiation nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat_induction formula-decl nil naturalnumbers nil) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 918 860 nil nil)) (expt_gt1_neg_TCC1 0 (expt_gt1_neg_TCC1-1 nil 3237052399 3342859250 ("" (subtype-tcc) nil nil) proved nil 209 210 nil nil)) (expt_gt1_neg 0 (expt_gt1_neg-1 nil 3237052399 3342859251 ("" (skosimp) (("" (case "gt1x!1^(-pm!1) * gt1x!1^pm!1 < gt1x!1^pm!1") (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst -1 "gt1x!1 ^ pm!1" "gt1x!1 ^ (-pm!1)" "1") (("1" (assert) nil nil)) nil)) nil) ("2" (rewrite "expt_plus" :dir rl) (("2" (hide 2) (("2" (lemma "expt_gt1_pos") (("2" (inst -1 "gt1x!1" "pm!1") (("2" (assert) (("2" (expand "^" 1 1) (("2" (expand "expt") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (^ const-decl "real" exponentiation nil) (>= const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posreal_exp application-judgement "posreal" exponentiation nil) (nzreal_exp application-judgement "nzreal" exponentiation nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil) (expt def-decl "real" exponentiation nil) (expt_gt1_pos formula-decl nil exponentiation nil) (int_plus_int_is_int application-judgement "int" integers nil) (expt_plus formula-decl nil exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil)) 912 860 nil nil)) (expt_gt1_nonpos_TCC1 0 (expt_gt1_nonpos_TCC1-1 nil 3237052399 3342859251 ("" (subtype-tcc) nil nil) proved nil 204 200 nil nil)) (expt_gt1_nonpos 0 (expt_gt1_nonpos-1 nil 3237052399 3342859251 ("" (skosimp) (("" (case "m!1 = 0") (("1" (grind) nil nil) ("2" (lemma "expt_gt1_neg") (("2" (inst -1 "gt1x!1" "m!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nzreal_exp application-judgement "nzreal" exponentiation nil) (posreal_exp application-judgement "posreal" exponentiation nil) (minus_int_is_int application-judgement "int" integers nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (^ const-decl "real" exponentiation nil) (expt def-decl "real" exponentiation nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (> const-decl "bool" reals nil) nil (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (expt_gt1_neg formula-decl nil exponentiation nil)) 475 440 nil nil)) (mult_expt_TCC1 0 (mult_expt_TCC1-1 nil 3237052399 3342859252 ("" (subtype-tcc) nil nil) proved nil 221 210 nil nil)) (mult_expt 0 (mult_expt-1 nil 3237052399 3342859252 ("" (skosimp) (("" (expand "^") (("" (lift-if) (("" (lemma "expt_of_mult") (("" (prop) (("1" (inst?) nil nil) ("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (expt_of_mult formula-decl nil exponentiation nil) (minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types nil) nil (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 514 480 nil nil)) (div_expt_TCC1 0 (div_expt_TCC1-1 nil 3237052399 3342859252 ("" (subtype-tcc) nil nil) proved nil 205 200 nil nil)) (div_expt 0 (div_expt-1 nil 3237052399 3342859253 ("" (skosimp) (("" (expand "^") (("" (lemma "expt_of_div") (("" (lift-if) (("" (prop) (("1" (inst?) nil nil) ("2" (inst?) (("1" (assert) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) nil (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (expt_of_div formula-decl nil exponentiation nil)) 497 450 t nil)) (inv_expt 0 (inv_expt-1 nil 3237052399 3342859253 ("" (skosimp) (("" (expand "^") (("" (lift-if) (("" (lemma "expt_of_inv") (("" (prop) (("1" (inst?) nil nil) ("2" (inst?) (("1" (assert) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "real" exponentiation nil) (expt_of_inv formula-decl nil exponentiation nil) (minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) nil (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 425 400 t nil)) (abs_expt_TCC1 0 (abs_expt_TCC1-1 nil 3237052399 3342859254 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzreal nonempty-type-eq-decl nil reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}" real_defs nil) (/= const-decl "boolean" notequal nil)) 256 250 nil nil)) (abs_expt 0 (abs_expt-1 nil 3237052399 3342859255 ("" (skosimp) (("" (expand "^") (("" (lift-if) (("" (lemma "expt_of_abs") (("" (prop) (("1" (instantiate -2 ("i!1" "n0x!1")) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil) ("2" (inst?) (("1" (lemma "abs_div") (("1" (inst -1 "expt(n0x!1, -i!1)" "1") (("1" (replace -1) (("1" (expand "abs" 2 2) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nzreal_expt application-judgement "nzreal" exponentiation nil) (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types nil) (^ const-decl "real" exponentiation nil) (expt_of_abs formula-decl nil exponentiation nil) (minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt def-decl "real" exponentiation nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}" real_defs nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}" real_defs nil) (posreal_expt application-judgement "posreal" exponentiation nil) (abs_div formula-decl nil real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil) nil (nzreal_exp application-judgement "nzreal" exponentiation nil)) 892 840 nil nil)) (abs_hat_nat_TCC1 0 (abs_hat_nat_TCC1-1 nil 3307950061 3342859255 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 208 200 nil shostak)) (abs_hat_nat_TCC2 0 (abs_hat_nat_TCC2-1 nil 3307950061 3342859255 ("" (subtype-tcc) nil nil) proved ((/= const-decl "boolean" notequal nil)) 204 200 nil shostak)) (abs_hat_nat 0 (abs_hat_nat-1 nil 3307952457 3342859256 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "^") (("2" (expand "expt" +) (("2" (rewrite "abs_mult") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (nnreal_expt application-judgement "nnreal" exponentiation nil) (real_times_real_is_real application-judgement "real" reals nil) (abs_mult formula-decl nil real_props nil) (expt def-decl "real" exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1210 1130 t shostak)) (expt_minus1_abs 0 (expt_minus1_abs-1 nil 3307952835 3342859257 ("" (skosimp*) (("" (case "i!1<0") (("1" (lemma "expt_inverse" ("n0x" "-1" "i" "-i!1")) (("1" (replace -1) (("1" (rewrite "abs_div" 1) (("1" (rewrite "abs_hat_nat" 1 :dir rl) (("1" (expand "abs" 1) (("1" (rewrite "expt_1i") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "abs_hat_nat" 2 :dir rl) (("2" (expand "abs") (("2" (rewrite "expt_1i" 2) nil nil)) nil)) nil)) nil)) nil) proved ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (abs_hat_nat formula-decl nil exponentiation nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posrat_exp application-judgement "posrat" exponentiation nil) (nnrat_exp application-judgement "nnrat" exponentiation nil) (expt_1i formula-decl nil exponentiation nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}" real_defs nil) (abs_div formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (>= const-decl "bool" reals nil) (^ const-decl "real" exponentiation nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt_inverse formula-decl nil exponentiation nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (minus_int_is_int application-judgement "int" integers nil) (nzreal_exp application-judgement "nzreal" exponentiation nil) (rat_exp application-judgement "rat" exponentiation nil)) 893 840 t shostak)) (even_m1_pow 0 (even_m1_pow-1 nil 3307952866 3342859258 ("" (skosimp*) (("" (expand "even?") (("" (skosimp*) (("" (replace -1) (("" (lemma "expt_times" ("n0x" "-1" "i" "2" "j" "j!1")) (("" (replace -1) (("" (expand "^" 1 1) (("" (expand "expt") (("" (expand "expt") (("" (expand "expt") (("" (rewrite "expt_1i") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((even? const-decl "bool" integers nil) (expt def-decl "real" exponentiation nil) (expt_1i formula-decl nil exponentiation nil) (^ const-decl "real" exponentiation nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (expt_times formula-decl nil exponentiation nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil)) 310 280 t shostak)) (not_even_m1_pow 0 (not_even_m1_pow-1 nil 3307952902 3342859258 ("" (skosimp*) (("" (rewrite "even_or_odd") (("" (expand "odd?") (("" (skosimp*) (("" (replace -1) (("" (lemma "expt_plus" ("n0x" "-1" "i" "1" "j" "2*j!1")) (("" (replace -1) (("" (lemma "expt_times" ("n0x" "-1" "i" "2" "j" "j!1")) (("" (replace -1) (("" (expand "^" 1 2) (("" (expand "expt") (("" (expand "expt") (("" (expand "expt") (("" (rewrite "expt_x1") (("" (rewrite "expt_1i") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((even_or_odd formula-decl nil naturalnumbers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nzreal nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt_plus formula-decl nil exponentiation nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (expt_times formula-decl nil exponentiation nil) (^ const-decl "real" exponentiation nil) (expt_x1 formula-decl nil exponentiation nil) (odd_times_odd_is_odd application-judgement "odd_int" integers nil) (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (expt_1i formula-decl nil exponentiation nil) (expt def-decl "real" exponentiation nil) (rat_exp application-judgement "rat" exponentiation nil) (nzreal_exp application-judgement "nzreal" exponentiation nil) (int_exp application-judgement "int" exponentiation nil) (odd? const-decl "bool" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil)) 747 660 t shostak)) (expt_lt1_bound1 0 (expt_lt1_bound1-1 nil 3237052399 3342859259 ("" (induct-and-simplify "n") (("" (use "both_sides_times_pos_le2" ("pz" "lt1x!1")) (("" (assert) nil nil)) nil)) nil) proved ((both_sides_times_pos_le2 formula-decl nil real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (posreal_expt application-judgement "posreal" exponentiation nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (expt def-decl "real" exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil)) 780 740 nil nil)) (expt_lt1_bound2 0 (expt_lt1_bound2-1 nil 3237052399 3342859260 ("" (skolem!) (("" (use "expt_lt1_bound1") (("" (use "expt_1_aux") (("" (assert) nil nil)) nil)) nil)) nil) proved ((expt_lt1_bound1 formula-decl nil exponentiation nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (expt_1_aux formula-decl nil exponentiation nil)) 421 390 nil nil)) (expt_gt1_bound1 0 (expt_gt1_bound1-1 nil 3237052399 3342859260 ("" (skolem 1 ("a!1" _)) (("" (induct-and-simplify "n") (("" (lemma "both_sides_times_pos_le2") (("" (inst -1 "expt(a!1, j!1)" "1" "a!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (expt def-decl "real" exponentiation nil) (<= const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (int_minus_int_is_int application-judgement "int" integers nil) (both_sides_times_pos_le2 formula-decl nil real_props nil)) 780 720 nil nil)) (expt_gt1_bound2 0 (expt_gt1_bound2-1 nil 3237052399 3342859261 ("" (skolem!) (("" (use "expt_gt1_bound1" ("n" "pn!1 - 1")) (("" (expand "expt" +) (("" (lemma "both_sides_times_pos_le1") (("" (assert) (("" (inst -1 "gt1x!1" "1" "expt(gt1x!1, pn!1-1)") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (expt_gt1_bound1 formula-decl nil exponentiation nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (posreal_expt application-judgement "posreal" exponentiation nil) (both_sides_times_pos_le1 formula-decl nil real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (expt def-decl "real" exponentiation nil)) 695 650 nil nil)) (large_expt 0 (large_expt-1 nil 3237052399 3342859262 ("" (skosimp) (("" (assert) (("" (auto-rewrite-theory "sets[real]") (("" (lemma "real_complete" ("S" "{x:real | EXISTS (n : nat) : x = expt(px!1, n)}")) (("1" (hide 1) (("1" (split -1) (("1" (skosimp*) (("1" (expand "least_upper_bound?") (("1" (flatten) (("1" (inst -2 "y!1/px!1") (("1" (case "y!1 > 0") (("1" (ground) (("1" (lemma "both_sides_div_pos_le2" ("px" "1" "py" "px!1" "pz" "y!1")) (("1" (assert) nil nil)) nil) ("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (inst - "s!1*px!1") (("1" (rewrite "div_mult_pos_le2") nil nil) ("2" (typepred "s!1") (("2" (skosimp*) (("2" (inst 1 "n!1+1") (("2" (expand "expt" +) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (delete -2) (("2" (expand "upper_bound?") (("2" (inst - "1") (("1" (assert) nil nil) ("2" (inst 1 "0") (("2" (expand "expt") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal 1) (("2" (skolem!) (("2" (inst 2 "py!1") (("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (typepred "s!1") (("2" (skosimp*) (("2" (inst 1 "n!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -1 "1") (("2" (inst 1 "0") (("2" (expand "expt") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (expt def-decl "real" exponentiation nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_complete formula-decl nil bounded_real_defs nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (NOT const-decl "[bool -> bool]" booleans nil) nil (real_div_nzreal_is_real application-judgement "real" reals nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (both_sides_div_pos_le2 formula-decl nil real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (div_mult_pos_le2 formula-decl nil real_props nil) nil nil (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_times_real_is_real application-judgement "real" reals nil) nil) 1135 950 nil nil)) (small_expt 0 (small_expt-1 nil 3237052399 3342859263 ("" (skosimp*) (("" (lemma "large_expt" ("px" "1/px!1")) (("" (rewrite "div_mult_pos_lt2") (("" (assert) (("" (inst -1 "1/py!1") (("" (skolem!) (("" (inst 1 "n!1") (("" (rewrite "expt_of_inv") (("" (rewrite "both_sides_div_pos_lt2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (large_expt formula-decl nil exponentiation nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (nzreal nonempty-type-eq-decl nil reals nil) (expt_of_inv formula-decl nil exponentiation nil) (posreal_expt application-judgement "posreal" exponentiation nil) (nzreal_expt application-judgement "nzreal" exponentiation nil) (both_sides_div_pos_lt2 formula-decl nil real_props nil) (expt def-decl "real" exponentiation nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (div_mult_pos_lt2 formula-decl nil real_props nil)) 585 540 nil nil)) (exponent_adjust_TCC1 0 (exponent_adjust_TCC1-1 nil 3237052399 3342859263 ("" (subtype-tcc) nil nil) proved nil 204 200 nil nil)) (exponent_adjust_TCC2 0 (exponent_adjust_TCC2-1 nil 3237052399 3342859263 ("" (subtype-tcc) nil nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil)) 261 240 nil nil)) (exponent_adjust_TCC3 0 (exponent_adjust_TCC3-1 nil 3237052399 3342859264 ("" (subtype-tcc) nil nil) proved nil 208 200 nil nil)) (exponent_adjust 0 (exponent_adjust-1 nil 3237052399 3342859265 ("" (skosimp*) (("" (lemma "both_sides_expt_gt1_lt") (("" (inst - "b!1" "i!1 - pm!1" "i!1") (("" (ground) (("" (rewrite "expt_plus") (("" (rewrite "expt_x1") (("" (lemma "both_sides_times_pos_le1") (("" (inst - "b!1 ^ i!1" "2" "b!1") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((both_sides_expt_gt1_lt formula-decl nil exponentiation nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnrat_exp application-judgement "nnrat" exponentiation nil) (posrat_exp application-judgement "posrat" exponentiation nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (posrat_plus_nnrat_is_posrat application-judgement "posrat" rationals nil) (int_plus_int_is_int application-judgement "int" integers nil) (expt_x1 formula-decl nil exponentiation nil) (^ const-decl "real" exponentiation nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (both_sides_times_pos_le1 formula-decl nil real_props nil) (posrat_times_posrat_is_posrat application-judgement "posrat" rationals nil) (posint_exp application-judgement "posint" exponentiation nil) (expt_plus formula-decl nil exponentiation nil) (/= const-decl "boolean" notequal nil) (nzreal nonempty-type-eq-decl nil reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (above nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 836 790 nil nil)) (exp_of_exists 0 (exp_of_exists-1 nil 3237052399 3342859266 ("" (skosimp*) (("" (lemma "lub_int") (("" (case "py!1<1") (("1" (inst - "{i|b!1^i<=py!1}" "-1") (("1" (prop) (("1" (expand "least_upper_bound?") (("1" (skosimp*) (("1" (hide -2) (("1" (inst + "j!1") (("1" (assert) (("1" (expand "upper_bound?") (("1" (inst - "j!1+1") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "upper_bound?") (("2" (skolem-typepred) (("2" (expand "extend") (("2" (case "s!1>=0") (("1" (lemma "expt_ge1") (("1" (inst?) (("1" (assert) nil nil) ("2" (assert) (("2" (prop) nil nil)) nil)) nil)) nil) ("2" (prop) (("2" (assert) (("2" (case "EXISTS (x:int): 0 > x & x > -1") (("1" (skosimp) (("1" (assert) nil nil)) nil) ("2" (inst 1 "s!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "nonempty_exists") (("2" (lemma "axiom_of_archimedes") (("2" (inst - "1/py!1") (("2" (skosimp*) (("2" (inst + "-i!1") (("2" (rewrite "expt_inverse") (("2" (rewrite "div_mult_pos_le1") (("2" (lemma "pos_expt_gt") (("2" (inst?) (("1" (rewrite "div_mult_pos_lt1") (("1" (lemma "both_sides_times_pos_lt2") (("1" (inst - "py!1" "i!1" "b!1^i!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "axiom_of_archimedes") (("2" (inst?) (("2" (skosimp*) (("2" (inst - "{i|b!1^i<=py!1}" "i!1") (("1" (prop) (("1" (expand "least_upper_bound?") (("1" (skosimp*) (("1" (hide -2) (("1" (inst + "j!1") (("1" (assert) (("1" (expand "upper_bound?") (("1" (inst - "j!1+1") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "upper_bound?") (("2" (skolem-typepred) (("2" (expand "extend") (("2" (prop) (("2" (lemma "pos_expt_gt") (("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "nonempty_exists") (("2" (inst + "0") (("2" (rewrite "expt_x0") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((lub_int formula-decl nil integer_props nil) (expt_x0 formula-decl nil exponentiation nil) (posint_exp application-judgement "posint" exponentiation nil) nil nil (minus_odd_is_odd application-judgement "odd_int" integers nil) nil nil (above nonempty-type-eq-decl nil integers nil) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (expt_ge1 formula-decl nil exponentiation nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) nil (AND const-decl "[bool, bool -> bool]" booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) nil (posrat_exp application-judgement "posrat" exponentiation nil) (nnrat_exp application-judgement "nnrat" exponentiation nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) nil nil (axiom_of_archimedes formula-decl nil real_props nil) (nzreal nonempty-type-eq-decl nil reals nil) (expt_inverse formula-decl nil exponentiation nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (pos_expt_gt formula-decl nil exponentiation nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (both_sides_times_pos_lt2 formula-decl nil real_props nil) (posreal_times_posreal_is_posreal application-judgement "posreal" real_types nil) (div_mult_pos_le1 formula-decl nil real_props nil) nil (minus_int_is_int application-judgement "int" integers nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (posreal_div_posreal_is_posreal application-judgement "posreal" real_types nil) (nonempty_exists formula-decl nil sets_lemmas nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil)) 1558 1420 nil nil)))(euclidean_division (mod_TCC1 0 (mod_TCC1-1 nil 3237052399 3342859266 ("" (skolem-typepred) (("" (inst 1 "0") nil nil)) nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (> const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 48 30 nil nil)) (euclid_nat 0 (euclid_nat-1 nil 3237052399 3342859267 ("" (skolem 1 (_ "b!1")) (("" (induct "a") (("1" (inst + "0" "0") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (case "r!1 = b!1-1") (("1" (inst + "q!1+1" "0") (("1" (assert) nil nil)) nil) ("2" (assert) (("2" (inst + "q!1" "r!1+1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat_induction formula-decl nil naturalnumbers nil) (int_times_even_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_plus_even_is_even application-judgement "even_int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 784 730 nil nil)) (euclid_int 0 (euclid_int-1 nil 3237052399 3342859268 ("" (skolem!) (("" (case "n!1 >= 0") (("1" (use "euclid_nat" ("a" "n!1")) (("1" (skolem!) (("1" (inst?) nil nil)) nil)) nil) ("2" (assert) (("2" (use "euclid_nat" ("a" "- n!1")) (("2" (skolem!) (("2" (case "r!1 = 0") (("1" (inst + "-q!1" "0") (("1" (assert) nil nil)) nil) ("2" (inst + "- q!1 - 1" "b!1 - r!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (euclid_nat formula-decl nil euclidean_division nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_int_is_int application-judgement "int" integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (int_plus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) nil nil (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_times_int_is_int application-judgement "int" integers nil)) 801 750 nil nil)) (unique_quotient 0 (unique_quotient-2 "" 3299962695 3342859268 ("" (skosimp) (("" (assert) (("" (case "q1!1 > q2!1") (("1" (case "b!1 * (q1!1 - q2!1) = r2!1 - r1!1") (("1" (case "b!1 * (q1!1 - q2!1) >= b!1") (("1" (assert) nil nil) ("2" (lemma "both_sides_times_pos_ge2") (("2" (inst -1 "b!1" "q1!1 - q2!1" "1") (("2" (assert) (("2" (assert :flush? t) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "b!1 * (q2!1 - q1!1) = r1!1 - r2!1") (("1" (case "b!1 * (q2!1 - q1!1) >= b!1") (("1" (assert) nil nil) ("2" (lemma "both_sides_times_pos_ge2") (("2" (inst -1 "b!1" "q2!1 - q1!1" "1") (("2" (assert) (("2" (assert :flush? t) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((int_times_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (int_minus_int_is_int application-judgement "int" integers nil) (both_sides_times_pos_ge2 formula-decl nil real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil)) 596 540 t shostak) (unique_quotient-1 nil 3237052399 3299952825 ("" (skosimp) (("" (assert) (("" (case "q1!1 > q2!1") (("1" (case "b!1 * (q1!1 - q2!1) = r2!1 - r1!1") (("1" (case "b!1 * (q1!1 - q2!1) >= b!1") (("1" (assert) nil nil) ("2" (lemma "both_sides_times_pos_ge2") (("2" (inst -1 "b!1" "q1!1 - q2!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "b!1 * (q2!1 - q1!1) = r1!1 - r2!1") (("1" (case "b!1 * (q2!1 - q1!1) >= b!1") (("1" (assert) nil nil) ("2" (lemma "both_sides_times_pos_ge2") (("2" (inst -1 "b!1" "q2!1 - q1!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 858 780 nil nil)) (unique_remainder 0 (unique_remainder-1 nil 3237052399 3342859269 ("" (lemma "unique_quotient") (("" (skosimp) (("" (inst?) (("" (assert) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((int_times_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (unique_quotient formula-decl nil euclidean_division nil)) 373 360 nil nil)) (unique_division 0 (unique_division-1 nil 3237052399 3342859270 ("" (lemma "unique_quotient") (("" (lemma "unique_remainder") (("" (skosimp) (("" (inst?) (("" (assert) (("" (inst -2 "b!1" "q1!1" "q2!1" "r1!1" "r2!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((unique_remainder formula-decl nil euclidean_division nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_times_int_is_int application-judgement "int" integers nil) (unique_quotient formula-decl nil euclidean_division nil)) 707 660 nil nil)))(divides (mult_divides1 0 (mult_divides1-1 nil 3237052399 3342859270 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) nil nil (int_times_int_is_int application-judgement "int" integers nil)) 185 150 nil nil)) (mult_divides2 0 (mult_divides2-1 nil 3237052399 3342859270 ("" (skosimp) (("" (grind :if-match nil) (("" (inst 1 "n!1") (("" (assert) nil nil)) nil)) nil)) nil) proved (nil nil (mult_divides1 application-judgement "(divides(n))" divides nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 262 250 nil nil)) (divides_sum 0 (divides_sum-1 nil 3237052399 3342859270 ("" (skosimp) (("" (expand "divides") (("" (skosimp) (("" (skosimp) (("" (inst 1 "x!2 + x!3") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved (nil (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_plus_int_is_int application-judgement "int" integers nil)) 427 400 nil nil)) (divides_diff 0 (divides_diff-1 nil 3237052399 3342859271 ("" (skosimp) (("" (expand "divides") (("" (skosimp*) (("" (inst 1 "x!2 - x!3") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) nil (int_minus_int_is_int application-judgement "int" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 408 390 nil nil)) (divides_opposite 0 (divides_opposite-1 nil 3237052399 3342859271 ("" (skosimp*) (("" (prop) (("1" (expand "divides") (("1" (skosimp*) (("1" (inst 1 "-x!2") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (expand "divides") (("2" (skosimp*) (("2" (inst 1 "-x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (minus_int_is_int application-judgement "int" integers nil) nil) 398 380 nil nil)) (opposite_divides 0 (opposite_divides-1 nil 3237052399 3342859272 ("" (skosimp*) (("" (expand "divides") (("" (prop) (("1" (skosimp*) (("1" (inst 1 "-x!2") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst 1 "-x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((minus_int_is_int application-judgement "int" integers nil) nil (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 387 360 nil nil)) (divides_prod1 0 (divides_prod1-1 nil 3237052399 3342859272 ("" (skosimp*) (("" (expand "divides") (("" (skosimp*) (("" (inst 1 "x!2 * m!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved (nil (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil)) 417 400 nil nil)) (divides_prod2 0 (divides_prod2-1 nil 3237052399 3342859273 ("" (skosimp*) (("" (expand "divides") (("" (skosimp*) (("" (inst 1 "x!2 * m!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved (nil (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil)) 409 380 nil nil)) (divides_prod_elim1 0 (divides_prod_elim1-1 nil 3237052399 3342859274 ("" (skosimp*) (("" (expand "divides") (("" (prop) (("1" (skosimp*) (("1" (inst 1 "x!1") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst 1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) nil (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 901 850 nil nil)) (divides_prod_elim2 0 (divides_prod_elim2-1 nil 3237052399 3342859274 ("" (skosimp*) (("" (lemma "divides_prod_elim1") (("" (inst -1 "m!1" "n!1" "nz!1") (("" (replace -1) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((divides_prod_elim1 formula-decl nil divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (nzint nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 414 390 nil nil)) (divides_reflexive 0 (divides_reflexive-1 nil 3237052399 3342859274 ("" (skosimp*) (("" (expand "divides") (("" (inst 1 "1") (("" (assert) nil nil)) nil)) nil)) nil) proved (nil (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 280 260 nil nil)) (divides_transitive 0 (divides_transitive-1 nil 3237052399 3342859275 ("" (skosimp*) (("" (expand "divides") (("" (skosimp*) (("" (inst 1 "x!1 * x!2") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved (nil (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil)) 418 400 nil nil)) (product_one 0 (product_one-2 "" 3299962800 3342859275 ("" (skosimp) (("" (split) (("1" (flatten) (("1" (lemma "eq1_gt") (("1" (lemma "pos_times_lt") (("1" (inst -1 "x!1" "y!1") (("1" (assert) (("1" (split -1) (("1" (flatten) (("1" (case "x!1 > 1") (("1" (inst -4 "x!1" "y!1") (("1" (assert) (("1" (assert :flush? t) nil nil)) nil)) nil) ("2" (case "y!1 > 1") (("1" (inst -4 "y!1" "x!1") (("1" (assert) (("1" (assert :flush? t) nil nil)) nil)) nil) ("2" (assert) (("2" (assert :flush? t) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (case "x!1 < -1") (("1" (inst -4 "-x!1" "-y!1") (("1" (assert) (("1" (assert :flush? t) nil nil)) nil)) nil) ("2" (case "y!1 < -1") (("1" (inst -4 "-y!1" "-x!1") (("1" (assert) (("1" (assert :flush? t) nil nil)) nil)) nil) ("2" (assert) (("2" (assert :flush? t) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (ground) nil nil)) nil)) nil) proved ((eq1_gt formula-decl nil real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (> const-decl "bool" reals nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (minus_int_is_int application-judgement "int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (pos_times_lt formula-decl nil real_props nil)) 430 400 t shostak) (product_one-1 nil 3237052399 3299952837 ("" (skosimp) (("" (split) (("1" (flatten) (("1" (lemma "eq1_gt") (("1" (lemma "pos_times_lt") (("1" (inst -1 "x!1" "y!1") (("1" (assert) (("1" (split -1) (("1" (flatten) (("1" (case "x!1 > 1") (("1" (inst -4 "x!1" "y!1") (("1" (assert) nil nil)) nil) ("2" (case "y!1 > 1") (("1" (inst -4 "y!1" "x!1") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (case "x!1 < -1") (("1" (inst -4 "-x!1" "-y!1") (("1" (assert) nil nil)) nil) ("2" (case "y!1 < -1") (("1" (inst -4 "-y!1" "-x!1") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (ground) nil nil)) nil)) nil) proved nil 892 700 nil nil)) (mutual_divisors 0 (mutual_divisors-1 nil 3237052399 3342859276 ("" (expand "divides") (("" (skosimp*) (("" (case "n!1 = 0") (("1" (assert) nil nil) ("2" (assert) (("2" (lemma "both_sides_times1" ("n0z" "n!1" "x" "x!1 * x!2" "y" "1")) (("2" (ground) (("2" (rewrite "product_one") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((minus_int_is_int application-judgement "int" integers nil) (product_one formula-decl nil divides nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (both_sides_times1 formula-decl nil real_props nil) (/= const-decl "boolean" notequal nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) nil) 726 680 nil nil)) (mutual_divisors_nat 0 (mutual_divisors_nat-1 nil 3237052399 3342859276 ("" (skosimp) (("" (forward-chain "mutual_divisors") (("" (assert) nil nil)) nil)) nil) proved ((mutual_divisors formula-decl nil divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (minus_int_is_int application-judgement "int" integers nil)) 236 220 nil nil)) (one_divides 0 (one_divides-1 nil 3237052399 3342859277 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) nil) 406 380 nil nil)) (divides_zero 0 (divides_zero-1 nil 3237052399 3342859277 ("" (grind :if-match all) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (int_times_even_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) nil) 295 290 nil nil)) (zero_div_zero 0 (zero_div_zero-1 nil 3237052399 3342859277 ("" (grind :if-match all) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) nil) 411 400 nil nil)) (divisors_of_one 0 (divisors_of_one-1 nil 3237052399 3342859278 ("" (auto-rewrite "one_divides" "opposite_divides") (("" (reduce) (("" (expand "divides") (("" (skolem!) (("" (use "product_one") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (one_divides formula-decl nil divides nil) (opposite_divides formula-decl nil divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (product_one formula-decl nil divides nil) nil) 440 400 nil nil)) (one_div_one 0 (one_div_one-1 nil 3237052399 3342859278 ("" (skolem!) (("" (rewrite "divisors_of_one") nil nil)) nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (divisors_of_one formula-decl nil divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 210 210 nil nil)) (divisor_smaller 0 (divisor_smaller-2 "" 3299962906 3342859279 ("" (expand "divides") (("" (skosimp*) (("" (assert) (("" (use "pos_times_lt") (("" (ground) (("" (use "both_sides_times_pos_le1" ("pz" "p!1" "x" "1" "y" "x!1")) (("" (assert) (("" (assert :flush? t) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pos_times_lt formula-decl nil real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (both_sides_times_pos_le1 formula-decl nil real_props nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) nil) 648 610 t shostak) (divisor_smaller-1 nil 3237052399 3299952842 ("" (expand "divides") (("" (skosimp*) (("" (assert) (("" (use "pos_times_lt") (("" (ground) (("" (use "both_sides_times_pos_le1" ("pz" "p!1" "x" "1" "y" "x!1")) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1004 890 nil nil)) (divides_next 0 (divides_next-1 nil 3252309122 3342859279 ("" (skolem!) (("" (rewrite "divisors_of_one" :dir rl) (("" (expand "divides") (("" (prop) (("1" (skolem!) (("1" (inst + "x!1 - 1") (("1" (assert) nil nil)) nil)) nil) ("2" (skolem!) (("2" (inst + "x!1 + 1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((divisors_of_one formula-decl nil divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) nil) 535 500 t shostak)) (divides_plus_1 0 (divides_plus_1-1 nil 3252309151 3342859280 ("" (skosimp) (("" (lemma "divides_diff") (("" (inst - "nz!1" "nz!1 + 1" "p1!1") (("" (assert) (("" (rewrite "divisors_of_one") nil nil)) nil)) nil)) nil)) nil) proved ((divides_diff formula-decl nil divides nil) (divisors_of_one formula-decl nil divides nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (above nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nzint nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_plus_int_is_int application-judgement "int" integers nil)) 343 320 t shostak)))(modulo_arithmetic (rem_TCC1 0 (rem_TCC1-1 nil 3237052399 3342859281 ("" (lemma "euclid_int") (("" (inst 1 "lambda (b: posnat): (lambda (x: int): (epsilon! (r: mod(b)): (EXISTS (q: int): x = r + b * q)))") (("" (skolem!) (("" (inst -1 "b!1" "x!1") (("" (skolem!) (("" (use "epsilon_ax[mod(b!1)]") (("" (prop) (("" (hide 2) (("" (inst 1 "r!1") (("" (inst 1 "q!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((int_plus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (epsilon_ax formula-decl nil epsilons nil) (euclid_int formula-decl nil euclidean_division nil)) 950 900 nil nil)) (rem_def 0 (rem_def-1 nil 3237052399 3342859283 ("" (skolem!) (("" (case "EXISTS q: x!1 = b!1 * q + rem(b!1)(x!1)") (("1" (ground) (("1" (skosimp*) (("1" (use "unique_remainder") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (delete 2) (("2" (typepred "rem(b!1)(x!1)") (("2" (skosimp) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_plus_int_is_int application-judgement "int" integers nil) (unique_remainder formula-decl nil euclidean_division nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 1907 1770 nil nil)) (rem_def2 0 (rem_def2-1 nil 3237052399 3342859284 ("" (skolem!) (("" (rewrite "rem_def") (("" (expand "divides") (("" (ground) (("1" (skolem!) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (skolem!) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((rem_def formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) nil (minus_odd_is_odd application-judgement "odd_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 809 760 nil nil)) (rem_def3 0 (rem_def3-1 nil 3237052399 3342859284 ("" (skolem!) (("" (rewrite "rem_def2") (("" (ground) (("1" (rewrite "divides_opposite" :dir rl) nil nil) ("2" (rewrite "divides_opposite" :dir rl) nil nil)) nil)) nil)) nil) proved ((rem_def2 formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (divides_opposite formula-decl nil divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 437 390 nil nil)) (rem_mod 0 (rem_mod-1 nil 3237052399 3342859284 ("" (auto-rewrite "divides_zero") (("" (skolem!) (("" (rewrite "rem_def2") nil nil)) nil)) nil) proved ((mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (rem_def2 formula-decl nil modulo_arithmetic nil) (int_minus_int_is_int application-judgement "int" integers nil) (divides_zero formula-decl nil divides nil)) 375 350 nil nil)) (rem_mod2 0 (rem_mod2-1 nil 3237052399 3342859285 ("" (skosimp) (("" (assert) (("" (rewrite "rem_mod") nil nil)) nil)) nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (rem_mod formula-decl nil modulo_arithmetic nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil)) 351 330 nil nil)) (rem_zero 0 (rem_zero-1 nil 3237052399 3342859285 ("" (auto-rewrite "divides_zero" "rem_def2") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved ((mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (even_minus_even_is_even application-judgement "even_int" integers nil) (rem_def2 formula-decl nil modulo_arithmetic nil) (divides_zero formula-decl nil divides nil)) 355 340 nil nil)) (rem_self 0 (rem_self-1 nil 3237052399 3342859285 ("" (auto-rewrite "divides_reflexive" "rem_def2") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved ((mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (rem_def2 formula-decl nil modulo_arithmetic nil) (divides_reflexive formula-decl nil divides nil)) 323 310 nil nil)) (rem_multiple1 0 (rem_multiple1-1 nil 3237052399 3342859286 ("" (auto-rewrite "divides_prod1" "divides_prod2" "divides_reflexive" "rem_def2") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved ((mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (rem_def2 formula-decl nil modulo_arithmetic nil) (divides_prod1 formula-decl nil divides nil) (divides_reflexive formula-decl nil divides nil)) 427 390 nil nil)) (rem_multiple2 0 (rem_multiple2-1 nil 3237052399 3342859286 ("" (auto-rewrite "divides_prod1" "divides_prod2" "divides_reflexive" "rem_def2") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved ((mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (rem_def2 formula-decl nil modulo_arithmetic nil) (divides_prod2 formula-decl nil divides nil) (divides_reflexive formula-decl nil divides nil)) 410 390 nil nil)) (rem_one 0 (rem_one-1 nil 3237052399 3342859287 ("" (skosimp) (("" (rewrite "rem_def") (("" (inst + "0") (("" (assert) nil nil)) nil)) nil)) nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (rem_def formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (int_times_even_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil)) 508 490 nil nil)) (rem_minus_one 0 (rem_minus_one-1 nil 3237052399 3342859288 ("" (skolem!) (("" (rewrite "rem_def") (("" (inst + "-1") (("" (assert) nil nil)) nil)) nil)) nil) proved ((AND const-decl "[bool, bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (rem_def formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 589 560 nil nil)) (same_remainder 0 (same_remainder-1 nil 3237052399 3342859288 ("" (skolem!) (("" (name-replace "r!1" "rem(b!1)(y!1)" :hide? nil) (("" (rewrite "rem_def2") (("" (rewrite "rem_def2") (("" (ground) (("1" (use "divides_diff" ("n" "x!1 - r!1" "m" "y!1 - r!1")) (("1" (assert) nil nil)) nil) ("2" (use "divides_sum" ("n" "x!1 - y!1" "m" "y!1 - r!1")) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (divides_sum formula-decl nil divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (divides_diff formula-decl nil divides nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (rem_def2 formula-decl nil modulo_arithmetic nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 645 570 nil nil)) (rem_rem 0 (rem_rem-1 nil 3237052399 3342859289 ("" (skolem!) (("" (rewrite "same_remainder") (("" (name-replace "r!1" "rem(b!1)(x!1)" :hide? nil) (("" (rewrite "rem_def3") nil nil)) nil)) nil)) nil) proved ((same_remainder formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (rem_def3 formula-decl nil modulo_arithmetic nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 508 460 nil nil)) (rem_sum 0 (rem_sum-1 nil 3237052399 3342859289 ("" (auto-rewrite "same_remainder") (("" (skosimp) (("" (assert) (("" (use "divides_sum" ("n" "x!1 - y!1" "m" "z!1 - t!1")) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (divides_sum formula-decl nil divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (same_remainder formula-decl nil modulo_arithmetic nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil)) 743 700 nil nil)) (rem_sum1 0 (rem_sum1-1 nil 3237052399 3342859290 ("" (skolem!) (("" (rewrite "same_remainder") (("" (rewrite "rem_def3" :dir rl) nil nil)) nil)) nil) proved ((int_plus_int_is_int application-judgement "int" integers nil) (same_remainder formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (rem_def3 formula-decl nil modulo_arithmetic nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 676 630 nil nil)) (rem_sum2 0 (rem_sum2-1 nil 3237052399 3342859291 ("" (skolem!) (("" (use "rem_sum1" ("x" "y!1" "y" "x!1")) (("" (assert) nil nil)) nil)) nil) proved ((rem_sum1 formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 1143 1070 nil nil)) (rem_diff 0 (rem_diff-1 nil 3237052399 3342859292 ("" (auto-rewrite "same_remainder") (("" (skosimp) (("" (assert) (("" (use "divides_diff" ("n" "x!1 - y!1" "m" "z!1 - t!1")) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (divides_diff formula-decl nil divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (same_remainder formula-decl nil modulo_arithmetic nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil)) 663 630 nil nil)) (rem_diff1 0 (rem_diff1-1 nil 3237052399 3342859293 ("" (skolem!) (("" (rewrite "same_remainder") (("" (rewrite "rem_def3" :dir rl) nil nil)) nil)) nil) proved ((int_minus_int_is_int application-judgement "int" integers nil) (same_remainder formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (= const-decl "[T, T -> boolean]" equalities nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (rem_def3 formula-decl nil modulo_arithmetic nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 464 440 nil nil)) (rem_diff2 0 (rem_diff2-1 nil 3237052399 3342859293 ("" (skolem!) (("" (rewrite "same_remainder") (("" (rewrite "rem_def2" :dir rl) nil nil)) nil)) nil) proved ((int_minus_int_is_int application-judgement "int" integers nil) (same_remainder formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (= const-decl "[T, T -> boolean]" equalities nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (rem_def2 formula-decl nil modulo_arithmetic nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 465 420 nil nil)) (rem_prod1 0 (rem_prod1-1 nil 3237052399 3342859294 ("" (skolem!) (("" (rewrite "same_remainder") (("" (use "divides_prod1" ("n" "rem(b!1)(x!1) - x!1" "m" "y!1")) (("" (assert) (("" (rewrite "rem_def3" :dir rl) nil nil)) nil)) nil)) nil)) nil) proved ((same_remainder formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (= const-decl "[T, T -> boolean]" equalities nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (rem_def3 formula-decl nil modulo_arithmetic nil) (divides_prod1 formula-decl nil divides nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 879 830 nil nil)) (rem_prod2 0 (rem_prod2-1 nil 3237052399 3342859295 ("" (skolem!) (("" (use "rem_prod1" ("x" "y!1" "y" "x!1")) (("" (assert) nil nil)) nil)) nil) proved ((rem_prod1 formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 1272 1200 nil nil)) (rem_prod 0 (rem_prod-1 nil 3237052399 3342859297 ("" (skosimp) (("" (auto-rewrite "rem_prod1" "rem_prod2") (("" (case "rem(b!1)(rem(b!1)(x!1) * rem(b!1)(z!1)) = rem(b!1)(y!1 * t!1)") (("1" (assert) nil nil) ("2" (replace*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((rem_prod1 formula-decl nil modulo_arithmetic nil) (rem_prod2 formula-decl nil modulo_arithmetic nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil)) 2020 1920 nil nil)) (rem_expt 0 (rem_expt-1 nil 3237052399 3342859298 ("" (skolem 1 ("b!1" _ "x!1" "y!1")) (("" (induct-and-simplify "n" :exclude "rem" :rewrites ("rem_prod")) nil nil)) nil) proved ((int_expt application-judgement "int" exponentiation nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (expt def-decl "real" exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (rem_prod formula-decl nil modulo_arithmetic nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil)) 861 810 nil nil)) (rem_expt1 0 (rem_expt1-1 nil 3237052399 3342859299 ("" (skolem!) (("" (rewrite "rem_expt") (("" (rewrite "rem_rem") nil nil)) nil)) nil) proved ((rem_expt formula-decl nil modulo_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (int_expt application-judgement "int" exponentiation nil) (nat_expt application-judgement "nat" exponentiation nil) (rem_rem formula-decl nil modulo_arithmetic nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 554 520 nil nil)) (rem_sum_elim1 0 (rem_sum_elim1-1 nil 3237052399 3342859299 ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved ((mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (same_remainder formula-decl nil modulo_arithmetic nil)) 446 420 nil nil)) (rem_sum_elim2 0 (rem_sum_elim2-1 nil 3237052399 3342859300 ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved ((mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (same_remainder formula-decl nil modulo_arithmetic nil)) 485 460 nil nil)) (rem_diff_elim1 0 (rem_diff_elim1-1 nil 3237052399 3342859300 ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) (("" (prop) (("1" (rewrite "divides_opposite" :dir rl) (("1" (assert) nil nil)) nil) ("2" (rewrite "divides_opposite" :dir rl) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (minus_int_is_int application-judgement "int" integers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (divides_opposite formula-decl nil divides nil) (same_remainder formula-decl nil modulo_arithmetic nil) (int_minus_int_is_int application-judgement "int" integers nil)) 464 430 nil nil)) (rem_diff_elim2 0 (rem_diff_elim2-1 nil 3237052399 3342859301 ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int_minus_int_is_int application-judgement "int" integers nil) (same_remainder formula-decl nil modulo_arithmetic nil)) 380 370 nil nil)) (rem_opposite_elim 0 (rem_opposite_elim-1 nil 3237052399 3342859301 ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) (("" (rewrite "divides_opposite" :dir rl) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (divides_opposite formula-decl nil divides nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (same_remainder formula-decl nil modulo_arithmetic nil) (minus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 420 400 nil nil)) (ndiv_TCC1 0 (ndiv_TCC1-1 nil 3237052399 3342859302 ("" (inst 1 "lambda (d: [int, posnat]): (epsilon! (q: int): d`1 = rem(d`2)(d`1) + d`2 * q)") (("" (skolem!) (("" (use "epsilon_ax[int]") (("" (assert) nil nil)) nil)) nil)) nil) proved ((epsilon_ax formula-decl nil epsilons nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil)) 1274 1230 nil nil)) (ndiv_lt 0 (ndiv_lt-1 nil 3237052399 3342859303 ("" (skosimp*) (("" (typepred "ndiv(x!1, b!1)") (("" (case-replace "x!1 - rem(b!1)(x!1) = b!1 * ndiv(x!1, b!1)") (("1" (hide -2) (("1" (case "x!1/b!1 - rem(b!1)(x!1)/b!1 = ndiv(x!1, b!1)") (("1" (hide -2) (("1" (replace -1 * rl) (("1" (hide -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (lemma "both_sides_div1") (("2" (inst -1 "b!1" "x!1 - rem(b!1)(x!1)" "b!1 * ndiv(x!1, b!1)") (("2" (case-replace "b!1 * ndiv(x!1, b!1) / b!1 = ndiv(x!1, b!1)") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved ((ndiv const-decl "{q: int | x = b * q + rem(b)(x)}" modulo_arithmetic nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (both_sides_div1 formula-decl nil real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (rat_minus_rat_is_rat application-judgement "rat" rationals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil)) 1109 1040 nil nil)) (ndiv_TCC2 0 (ndiv_TCC2-1 nil 3237052399 3342859305 ("" (skosimp*) (("" (lemma "ndiv_lt") (("" (inst?) (("" (case "n!1/b!1 <= n!1") (("1" (assert) (("1" (hide -1) (("1" (typepred "ndiv(n!1, b!1)") (("1" (case "n!1 < rem(b!1)(n!1)") (("1" (lemma "rem_mod2") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (case "b!1 * ndiv(n!1, b!1) >= 0") (("1" (lemma "both_sides_times_pos_ge1") (("1" (inst -1 "b!1" "ndiv(n!1, b!1)" "0") (("1" (replace -1 2 rl t) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide 2) (("2" (hide -1) (("2" (lemma "le_div_le_pos") (("2" (inst -1 "n!1" "1" "b!1" "n!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((ndiv_lt formula-decl nil modulo_arithmetic nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (rem_mod2 formula-decl nil modulo_arithmetic nil) (both_sides_times_pos_ge1 formula-decl nil real_props nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}" modulo_arithmetic nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_div_le_pos formula-decl nil real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil)) 1461 1390 nil nil)) (rem_floor 0 (rem_floor-1 nil 3252309244 3342859307 ("" (skolem!) (("" (lemma "rem_def" ("b" "b!1" "x" "x!1" "r" "x!1 - b!1 * floor(x!1 / b!1)")) (("1" (assert) (("1" (inst + "floor(x!1 / b!1)") (("1" (assert) nil nil)) nil)) nil) ("2" (typepred "floor(x!1 / b!1)") (("2" (split) (("1" (both-sides "*" "b!1" -1) (("1" (assert) nil nil)) nil) ("2" (both-sides "*" "b!1" -2) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (integer nonempty-type-from-decl nil integers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (rem_def formula-decl nil modulo_arithmetic nil) (int_minus_int_is_int application-judgement "int" integers nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (div_mult_pos_le2 formula-decl nil real_props nil) (div_cancel2 formula-decl nil real_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (rat_times_rat_is_rat application-judgement "rat" rationals nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 2253 1930 t shostak)) (rem_base 0 (rem_base-1 nil 3252309295 3342859312 ("" (skolem!) (("" (expand "divides") (("" (prop) (("1" (typepred "rem(b!1)(x!1)") (("1" (typepred "rem(b!1 + n!1)(x!1 + i!1)") (("1" (skosimp*) (("1" (inst + "q!1 - floor(x!1 / b!1)") (("1" (both-sides "+" "n!1 * floor(x!1 / b!1)") (("1" (assert) (("1" (lemma "commutative_mult") (("1" (inst - "floor(x!1 / b!1)" "n!1") (("1" (replace -1) (("1" (assert) (("1" (lemma "rem_floor") (("1" (inst - "b!1" "x!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (lemma "rem_def2") (("2" (inst - "b!1 + n!1" "i!1 + x!1" "rem(b!1)(x!1)") (("1" (assert) (("1" (expand "divides") (("1" (lemma "rem_floor") (("1" (inst - "b!1" "x!1") (("1" (inst + "x!2 + floor(x!1 / b!1)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) nil nil nil nil (rem_def2 formula-decl nil modulo_arithmetic nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) nil (commutative_mult formula-decl nil number_fields nil) (rem_floor formula-decl nil modulo_arithmetic nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (integer nonempty-type-from-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil)) 4446 4100 t shostak)) (rem_sum_floor 0 (rem_sum_floor-1 nil 3252309346 3342859316 ("" (skolem!) (("" (use "rem_def") (("1" (assert) (("1" (inst + "floor(x!1 / b!1) + floor((rem(b!1)(x!1) + i!1) / b!1)") (("1" (assert) (("1" (use "commutative_mult") (("1" (replace -1) (("1" (use "rem_floor") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "floor((rem(b!1)(x!1) + i!1) / b!1)") (("2" (split) (("1" (both-sides "*" "b!1" -1) (("1" (assert) nil nil)) nil) ("2" (both-sides "*" "b!1" -2) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((rem_def formula-decl nil modulo_arithmetic nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) nil nil (integer nonempty-type-from-decl nil integers nil) (<= const-decl "bool" reals nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) nil (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (commutative_mult formula-decl nil number_fields nil) (rem_floor formula-decl nil modulo_arithmetic nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (div_mult_pos_le2 formula-decl nil real_props nil) (div_cancel2 formula-decl nil real_props nil) (rat_times_rat_is_rat application-judgement "rat" rationals nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil)) 4398 3740 t shostak)) (rem_sum_assoc 0 (rem_sum_assoc-1 nil 3252309412 3342859319 ("" (skolem!) (("" (typepred "rem(b!1)(x!1 + n!1)") (("" (typepred "rem(b!1)(x!1)") (("" (skosimp*) (("" (ground) (("" (use "rem_def2") (("" (assert) (("" (use "rem_floor") (("" (both-sides "-" "rem(b!1)(x!1)" -1) (("" (assert) (("" (replace -1) (("" (expand "divides") (("" (inst + "floor(x!1 / b!1)") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (int_plus_int_is_int application-judgement "int" integers nil) (rem_def2 formula-decl nil modulo_arithmetic nil) (rem_floor formula-decl nil modulo_arithmetic nil) nil (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (integer nonempty-type-from-decl nil integers nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 3143 2580 t shostak)) (rem_add_one 0 (rem_add_one-1 nil 3252309454 3342859322 ("" (skolem!) (("" (use "rem_sum_assoc") (("" (smash) (("" (lemma "rem_def") (("" (inst - "b!1" "x!1" "b!1 - 1") (("" (assert) (("" (skolem!) (("" (replace -1 3) (("" (assert) (("" (lemma "rem_multiple1") (("" (inst - "b!1" "q!1 + 1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((rem_sum_assoc formula-decl nil modulo_arithmetic nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (rem_def formula-decl nil modulo_arithmetic nil) (rem_multiple1 formula-decl nil modulo_arithmetic nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (< const-decl "bool" reals nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 2884 1020 t shostak)) (rem_wrap 0 (rem_wrap-1 nil 3252309504 3342859331 ("" (skolem!) (("" (prop) (("1" (use "rem_sum_floor") (("1" (assert) (("1" (lemma "floor_val") (("1" (inst - "rem(b!1)(x!1) + n!1" "b!1" "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (use "rem_sum_assoc") (("3" (assert) nil nil)) nil)) nil)) nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals nil) (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (integer nonempty-type-from-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (odd_plus_odd_is_even application-judgement "even_int" integers nil) (floor_val formula-decl nil floor_ceil nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (rem_sum_floor formula-decl nil modulo_arithmetic nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (rem_sum_assoc formula-decl nil modulo_arithmetic nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 8332 2010 t shostak)) (rem_wrap_eq 0 (rem_wrap_eq-1 nil 3252309534 3342859332 ("" (skolem!) (("" (use "rem_wrap") (("" (lemma "same_remainder") (("" (inst - "b!1" "n!1 + x!1" "x!1") (("" (smash) nil nil)) nil)) nil)) nil)) nil) proved ((rem_wrap formula-decl nil modulo_arithmetic nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_plus_int_is_int application-judgement "int" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (same_remainder formula-decl nil modulo_arithmetic nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 1108 870 t shostak)))(subrange_inductions (subrange_induction_TCC1 0 (subrange_induction_TCC1-1 nil 3237052399 3342859332 ("" (assert) (("" (typepred "j") (("" (assert) nil nil)) nil)) nil) proved ((j formal-const-decl "upfrom(i)" subrange_inductions nil) (upfrom nonempty-type-eq-decl nil integers nil) (i formal-const-decl "int" subrange_inductions nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 10 10 nil nil)) (subrange_induction_TCC2 0 (subrange_induction_TCC2-1 nil 3237052399 3342859332 ("" (tcc :defs !) nil nil) proved ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (subrange type-eq-decl nil integers nil) (j formal-const-decl "upfrom(i)" subrange_inductions nil) (upfrom nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (i formal-const-decl "int" subrange_inductions nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 414 310 nil nil)) (subrange_induction 0 (subrange_induction-1 nil 3237052399 3342859333 ("" (lemma "nat_induction") (("" (skosimp*) (("" (inst -1 "lambda (n:nat): n <= j - i IMPLIES p!1(n+i)") (("1" (prop) (("1" (inst -1 "k!1 - i") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (skosimp*) (("3" (inst -4 "j!1 + i") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) nil (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (subrange type-eq-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (i formal-const-decl "int" subrange_inductions nil) (upfrom nonempty-type-eq-decl nil integers nil) (j formal-const-decl "upfrom(i)" subrange_inductions nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (nat_induction formula-decl nil naturalnumbers nil)) 826 710 nil nil)) (SUBRANGE_induction 0 (SUBRANGE_induction-1 nil 3237052399 3342859334 ("" (skosimp) (("" (skosimp) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): n <= j - i IMPLIES p!1(n+i)") (("1" (split) (("1" (inst -2 "k!1") (("1" (assert) (("1" (skosimp) (("1" (inst -1 "m!1-i") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -3 "j!1+i") (("1" (assert) (("1" (skosimp) (("1" (inst -1 "m!1-i") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (j formal-const-decl "upfrom(i)" subrange_inductions nil) (upfrom nonempty-type-eq-decl nil integers nil) (i formal-const-decl "int" subrange_inductions nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pred type-eq-decl nil defined_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (subrange type-eq-decl nil integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NAT_induction formula-decl nil naturalnumbers nil)) 698 550 nil nil)))(bounded_int_inductions (upfrom_induction_TCC1 0 (upfrom_induction_TCC1-1 nil 3237052399 3342859334 ("" (subtype-tcc) nil nil) proved ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 8 10 nil nil)) (upfrom_induction_TCC2 0 (upfrom_induction_TCC2-1 nil 3237052399 3342859334 ("" (subtype-tcc) nil nil) proved nil 12 10 nil nil)) (upfrom_induction 0 (upfrom_induction-2 "" 3299963135 3342859335 ("" (lemma "nat_induction") (("" (skosimp*) (("" (inst -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (prop) (("1" (inst -1 "jf!1-m") (("1" (assert) (("1" (assert :flush? t) (("1" (assert :quant-simp? t) nil nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (split) (("1" (inst -5 "j!1+m") (("1" (assert) nil nil)) nil) ("2" (inst 1 "j!1+m") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (upfrom nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (m formal-const-decl "int" bounded_int_inductions nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (nat_induction formula-decl nil naturalnumbers nil)) 816 630 t shostak) (upfrom_induction-1 nil 3237052399 3299952924 ("" (lemma "nat_induction") (("" (skosimp*) (("" (inst -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (prop) (("1" (inst -1 "jf!1-m") (("1" (assert) nil nil)) nil) ("2" (hide -1) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (split) (("1" (inst -5 "j!1+m") (("1" (assert) nil nil)) nil) ("2" (inst 1 "j!1+m") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1226 880 nil nil)) (UPFROM_induction 0 (UPFROM_induction-2 "" 3299963189 3342859335 ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (prop) (("1" (inst -1 "jf!1-m") (("1" (split) (("1" (assert) nil nil) ("2" (inst 1 "jf!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -4 "j!1+m") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "kf!1-m") (("2" (assert :quant-simp? t) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NAT_induction formula-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (upfrom nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (m formal-const-decl "int" bounded_int_inductions nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 536 440 t shostak) (UPFROM_induction-1 nil 3237052399 3299952925 ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (prop) (("1" (inst -1 "jf!1-m") (("1" (split) (("1" (assert) nil nil) ("2" (inst 1 "jf!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -4 "j!1+m") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "kf!1-m") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 831 630 nil nil)) (above_induction_TCC1 0 (above_induction_TCC1-1 nil 3237052399 3342859335 ("" (subtype-tcc) nil nil) proved ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil)) 124 90 nil nil)) (above_induction_TCC2 0 (above_induction_TCC2-1 nil 3237052399 3342859336 ("" (subtype-tcc) nil nil) proved ((int_plus_int_is_int application-judgement "int" integers nil)) 270 200 nil nil)) (above_induction 0 (above_induction-2 "" 3299963282 3342859336 ("" (skosimp*) (("" (lemma "nat_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (prop) (("1" (inst -1 "ja!1-m") (("1" (assert) (("1" (assert :quant-simp? t) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (split) (("1" (inst -5 "j!1+m") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (inst 1 "j!1+m") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (above nonempty-type-eq-decl nil integers nil) (pred type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (m formal-const-decl "int" bounded_int_inductions nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (> const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 749 620 t shostak) (above_induction-1 nil 3237052399 3299952927 ("" (skosimp*) (("" (lemma "nat_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (prop) (("1" (inst -1 "ja!1-m") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (split) (("1" (inst -5 "j!1+m") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (inst 1 "j!1+m") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 1143 870 nil nil)) (ABOVE_induction 0 (ABOVE_induction-2 "" 3299963342 3342859337 ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (prop) (("1" (inst -1 "ja!1-m") (("1" (split) (("1" (assert) nil nil) ("2" (inst 1 "ja!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -4 "j!1+m") (("1" (assert) (("1" (skosimp*) (("1" (inst -1 "ka!1-m") (("1" (assert :quant-simp? t) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((NAT_induction formula-decl nil naturalnumbers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (above nonempty-type-eq-decl nil integers nil) (pred type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (m formal-const-decl "int" bounded_int_inductions nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (> const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 626 480 t shostak) (ABOVE_induction-1 nil 3237052399 3299952928 ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (prop) (("1" (inst -1 "ja!1-m") (("1" (split) (("1" (assert) nil nil) ("2" (inst 1 "ja!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -4 "j!1+m") (("1" (assert) (("1" (skosimp*) (("1" (inst -1 "ka!1-m") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 947 700 nil nil)))(bounded_nat_inductions (upto_induction_TCC1 0 (upto_induction_TCC1-1 nil 3237052399 3342859337 ("" (subtype-tcc) nil nil) proved ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 8 10 nil nil)) (upto_induction_TCC2 0 (upto_induction_TCC2-1 nil 3237052399 3342859338 ("" (subtype-tcc) nil nil) proved ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" bounded_nat_inductions nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 438 320 nil nil)) (upto_induction 0 (upto_induction-1 nil 3237052399 3342859338 ("" (skosimp*) (("" (lemma "nat_induction") (("" (inst -1 "lambda (n:nat): n <= m IMPLIES pt!1(n)") (("" (prop) (("1" (inst -1 "jt!1") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (inst -4 "j!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) nil (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" bounded_nat_inductions nil) (<= const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 463 360 nil nil)) (UPTO_induction 0 (UPTO_induction-1 nil 3237052399 3342859338 ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): n <= m IMPLIES pt!1(n)") (("" (prop) (("1" (inst -1 "jt!1") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (inst -3 "j!1") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "kt!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NAT_induction formula-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" bounded_nat_inductions nil) (<= const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 112 90 nil nil)) (below_induction_TCC1 0 (below_induction_TCC1-1 nil 3237052399 3342859338 ("" (subtype-tcc) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 10 10 nil nil)) (below_induction_TCC2 0 (below_induction_TCC2-1 nil 3237052399 3342859339 ("" (subtype-tcc) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (below type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" bounded_nat_inductions nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 424 340 nil nil)) (below_induction 0 (below_induction-1 nil 3237052399 3342859339 ("" (skosimp*) (("" (lemma "nat_induction") (("" (inst -1 "lambda (n:nat): n < m IMPLIES pb!1(n)") (("" (prop) (("1" (inst -2 "jb!1") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (skosimp*) (("4" (inst -4 "j!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("5" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) nil (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (below type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" bounded_nat_inductions nil) (< const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 436 400 nil nil)) (BELOW_induction 0 (BELOW_induction-1 nil 3237052399 3342859339 ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): n < m IMPLIES pb!1(n)") (("" (prop) (("1" (inst -1 "jb!1") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (inst -3 "j!1") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "kb!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NAT_induction formula-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (below type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" bounded_nat_inductions nil) (< const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 144 100 nil nil)))(subrange_type)(int_types)(nat_types)(nat_fun_props (injection_n_to_m 0 (injection_n_to_m-1 nil 3242964223 3342859341 ("" (induct "n") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (typepred "f!1(0)") (("2" (assert) (("2" (hide -1) (("2" (inst -1 "m!1 - 1") (("2" (assert) (("2" (delete 2) (("2" (inst 1 "LAMBDA (x : below[j!1]) : IF f!1(x) = m!1 - 1 THEN f!1(j!1) ELSE f!1(x) ENDIF") (("1" (expand "injective?") (("1" (skosimp) (("1" (lift-if) (("1" (lift-if) (("1" (inst-cp -2 "x1!1" "j!1") (("1" (inst-cp -2 "x2!1" "j!1") (("1" (inst -2 "x1!1" "x2!1") (("1" (assert) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (skosimp) (("3" (expand "injective?") (("3" (inst -2 "x!1" "j!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) nil nil (= const-decl "[T, T -> boolean]" equalities nil) (below type-eq-decl nil nat_types nil) nil (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat_induction formula-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (injective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1425 800 t shostak)) (injection_n_to_m_var 0 (injection_n_to_m_var-1 nil 3243223197 3342859341 ("" (skolem!) (("" (ground) (("1" (rewrite "injection_n_to_m") nil nil) ("2" (inst + "lambda (i: below(n!1)): i") (("2" (grind) nil nil)) nil)) nil)) nil) proved ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (injection_n_to_m formula-decl nil nat_fun_props nil) (injective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil)) 372 100 t shostak)) (surjection_n_to_m 0 (surjection_n_to_m-1 nil 3242964294 3342859341 ("" (skosimp*) (("" (rewrite "injection_n_to_m") (("" (expand "surjective?") (("" (inst -1 "0") (("" (skosimp) (("" (assert) (("" (inst 1 "inverse(f!1)") (("1" (rewrite "inj_inv") (("1" (inst 1 "x!1") nil nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((injection_n_to_m formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (inj_inv formula-decl nil function_inverse nil) (inverse const-decl "D" function_inverse nil) (TRUE const-decl "bool" booleans nil) nil (surjective? const-decl "bool" functions nil)) 195 110 t shostak)) (surjection_n_to_m_var 0 (surjection_n_to_m_var-1 nil 3243223295 3342859342 ("" (skolem!) (("" (apply (then (split) (flatten))) (("1" (forward-chain "surjection_n_to_m") (("1" (assert) (("1" (skosimp) (("1" (typepred "f!1(0)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (inst + "lambda (i: below(n!1)): IF i < m!1 THEN i ELSE 0 ENDIF") (("1" (grind) nil nil) ("2" (reduce) nil nil)) nil)) nil)) nil) proved ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (surjection_n_to_m formula-decl nil nat_fun_props nil) (surjective? const-decl "bool" functions nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) nil (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil) 859 300 t shostak)) (bijection_n_to_m 0 (bijection_n_to_m-1 nil 3242964328 3342859343 ("" (skolem!) (("" (prop) (("1" (expand "bijective?") (("1" (skosimp) (("1" (lemma "injection_n_to_m" ("n" "n!1" "m" "m!1")) (("1" (lemma "surjection_n_to_m" ("n" "n!1" "m" "m!1")) (("1" (split) (("1" (assert) (("1" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "LAMBDA (x : below[n!1]) : x") (("1" (grind) nil nil) ("2" (skolem!) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((surjection_n_to_m formula-decl nil nat_fun_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (injection_n_to_m formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) nil (below type-eq-decl nil nat_types nil) nil) 497 200 t shostak)) (injection_n_to_m2 0 (injection_n_to_m2-1 nil 3243223324 3342859344 ("" (skolem!) (("" (ground) (("1" (lemma "injection_n_to_m" ("n" "n!1+1" "m" "m!1+1")) (("1" (assert) (("1" (skolem!) (("1" (inst + "lambda (i : below(1 + n!1)) : f!1(i)") (("1" (grind :if-match nil) (("1" (inst? :where +) (("1" (assert) nil nil)) nil)) nil) ("2" (skolem!) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "lambda (i : upto(n!1)): i") (("2" (grind) nil nil)) nil)) nil)) nil) proved ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) nil nil (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) nil (< const-decl "bool" reals nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (injection_n_to_m formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)) 1368 610 t shostak)) (surjection_n_to_m2 0 (surjection_n_to_m2-1 nil 3243223349 3342859345 ("" (skolem!) (("" (ground) (("1" (lemma "surjection_n_to_m" ("n" "n!1+1" "m" "m!1+1")) (("1" (assert) (("1" (skolem!) (("1" (inst + "lambda (i: below(1 + n!1)): f!1(i)") (("1" (grind :if-match nil) (("1" (inst? -) (("1" (skolem!) (("1" (inst?) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "lambda (i : upto(n!1)): IF i <= m!1 THEN i ELSE 0 ENDIF") (("2" (grind) nil nil)) nil)) nil)) nil) proved ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) nil nil (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) nil (< const-decl "bool" reals nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (surjective? const-decl "bool" functions nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (surjection_n_to_m formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil)) 803 680 t shostak)) (bijection_n_to_m2 0 (bijection_n_to_m2-1 nil 3243223474 3342859345 ("" (skolem!) (("" (ground) (("1" (expand "bijective?") (("1" (skosimp) (("1" (lemma "injection_n_to_m2" ("n" "n!1" "m" "m!1")) (("1" (lemma "surjection_n_to_m2" ("n" "n!1" "m" "m!1")) (("1" (ground) (("1" (inst?) nil nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "lambda (i : upto(n!1)): i") (("2" (grind) nil nil)) nil)) nil)) nil) proved ((surjection_n_to_m2 formula-decl nil nat_fun_props nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (injection_n_to_m2 formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil)) 280 210 t shostak)) (surj_equiv_inj 0 (surj_equiv_inj-1 nil 3243223495 3342859347 ("" (skolem!) (("" (case "n!1 = 0") (("1" (grind) nil nil) ("2" (ground) (("1" (use "surjection_n_to_m" ("n" "n!1 - 1" "m" "n!1")) (("1" (assert) (("1" (expand* "surjective?" "injective?") (("1" (skosimp) (("1" (inst + "lambda (i : below(n!1 - 1)): IF i < x1!1 THEN f!1(i) ELSE f!1(i+1) ENDIF") (("1" (assert) (("1" (skolem!) (("1" (inst - "y!1") (("1" (skolem!) (("1" (case "x!1 = x1!1") (("1" (inst + "IF x2!1 < x!1 THEN x2!1 ELSE x2!1-1 ENDIF") (("1" (smash) nil nil) ("2" (ground) nil nil) ("3" (ground) nil nil)) nil) ("2" (inst + "IF x!1 < x1!1 THEN x!1 ELSE x!1 - 1 ENDIF") (("1" (smash) nil nil) ("2" (ground) nil nil) ("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "injection_n_to_m" ("n" "n!1" "m" "n!1-1")) (("2" (assert) (("2" (expand* "injective?" "surjective?") (("2" (skolem!) (("2" (inst + "lambda (i : below(n!1)) : IF f!1(i) = n!1 - 1 THEN y!1 ELSE f!1(i) ENDIF") (("1" (assert) (("1" (skosimp) (("1" (inst? - :where +) (("1" (smash) (("1" (inst + "x2!1") (("1" (assert) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (skosimp) (("3" (inst? +) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (injection_n_to_m formula-decl nil nat_fun_props nil) nil nil (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (surjection_n_to_m formula-decl nil nat_fun_props nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) nil (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil nil nil (NOT const-decl "[bool -> bool]" booleans nil) (int_plus_int_is_int application-judgement "int" integers nil)) 1516 1330 t shostak)) (inj_equiv_bij 0 (inj_equiv_bij-1 nil 3243223527 3342859347 ("" (skolem!) (("" (expand "bijective?") (("" (ground) (("" (rewrite "surj_equiv_inj") nil nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surj_equiv_inj formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil)) 55 30 t shostak)) (surj_equiv_bij 0 (surj_equiv_bij-1 nil 3243223548 3342859347 ("" (skolem!) (("" (expand "bijective?") (("" (ground) (("" (rewrite "surj_equiv_inj") nil nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surj_equiv_inj formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil)) 27 30 t shostak)) (surj_equiv_inj2 0 (surj_equiv_inj2-1 nil 3243223572 3342859349 ("" (skolem!) (("" (lemma "surj_equiv_inj" ("n" "n!1+1" "f" "lambda (i : below(n!1 + 1)): f!1(i)")) (("1" (expand* "surjective?" "injective?") (("1" (reduce :if-match nil) (("1" (inst? -4 :where +) (("1" (assert) nil nil)) nil) ("2" (inst? -2) (("2" (skolem!) (("2" (inst? +) nil nil)) nil)) nil) ("3" (inst - "y!1") (("3" (skolem!) (("3" (inst + "x!1") nil nil)) nil)) nil) ("4" (inst? - :where +) (("4" (assert) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (assert) nil nil)) nil)) nil)) nil) proved ((upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (surj_equiv_inj formula-decl nil nat_fun_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil)) 1866 1280 t shostak)) (inj_equiv_bij2 0 (inj_equiv_bij2-1 nil 3243223596 3342859349 ("" (skolem!) (("" (expand "bijective?") (("" (ground) (("" (rewrite "surj_equiv_inj2") nil nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surj_equiv_inj2 formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 38 20 t shostak)) (surj_equiv_bij2 0 (surj_equiv_bij2-1 nil 3243223623 3342859349 ("" (skolem!) (("" (expand "bijective?") (("" (ground) (("" (rewrite "surj_equiv_inj2") nil nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surj_equiv_inj2 formula-decl nil nat_fun_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 66 40 t shostak)))(finite_sets (finite_set_TCC1 0 (finite_set_TCC1-1 nil 3243832506 3342859349 ("" (expand "is_finite") (("" (inst 1 "0" "LAMBDA (s: (emptyset[T])): 0") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) proved ((FALSE const-decl "bool" booleans nil) (emptyset const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (is_finite const-decl "bool" finite_sets nil)) 144 80 t shostak)) (is_finite_surj 0 (is_finite_surj-1 nil 3243836561 3342859350 ("" (skosimp*) (("" (prop) (("1" (skosimp) (("1" (grind :if-match nil) (("1" (inst 1 "N!1" "lambda (x: (s!1)): epsilon! (n: below[N!1]): x = f!1(n)") (("1" (skosimp) (("1" (use "epsilon_ax[below[N!1]]" :if-match all) (("1" (prop) (("1" (grind) nil nil) ("2" (inst -2 "x1!1") (("2" (skosimp) (("2" (inst 1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (inst -2 "x2!1") (("3" (skosimp) (("3" (inst 1 "x!1") (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (inst -1 "x1!1") (("4" (skosimp) (("4" (inst 1 "x!1") (("4" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (inst -1 "x1!1") (("2" (skosimp) (("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil) ("2" (case "empty?(s!1)") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (case "empty?(s!1)") (("1" (expand "empty?") (("1" (inst 1 "0" "lambda (n: below[0]): epsilon! (x: (s!1)): true") (("1" (hide -2) (("1" (grind :if-match nil) (("1" (inst -2 "y!1") nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand "is_finite") (("2" (skosimp) (("2" (grind :if-match nil) (("2" (inst 1 "N!1" "lambda (n : below[N!1]): epsilon!(x : (s!1)) : n = f!1(x)") (("1" (skolem-typepred) (("1" (inst 1 "f!1(y!1)") (("1" (use "epsilon_ax[(s!1)]") (("1" (prop) (("1" (inst -4 "y!1" "epsilon(LAMBDA (x: (s!1)): f!1(y!1) = f!1(x))") (("1" (assert) nil nil) ("2" (inst 1 "y!1") nil nil)) nil) ("2" (inst 1 "y!1") nil nil)) nil) ("2" (inst 1 "y!1") nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (is_finite const-decl "bool" finite_sets nil) (empty? const-decl "bool" sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (member const-decl "bool" sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (epsilon_ax formula-decl nil epsilons nil) (= const-decl "[T, T -> boolean]" equalities nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) nil (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) nil (below type-eq-decl nil nat_types nil) (TRUE const-decl "bool" booleans nil) nil (FALSE const-decl "bool" booleans nil)) 1350 740 t nil)) (finite_subset 0 (finite_subset-1 nil 3243836755 3342859351 ("" (grind :if-match nil) (("" (inst 1 "N!1" "lambda (x: (s!1)): f!1(x)") (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil) ("2" (typepred "x2!1") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil) ("3" (typepred "x1!1") (("3" (inst?) (("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (inst? -4) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved (nil nil (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)) 294 180 t shostak)) (finite_intersection 0 (finite_intersection-1 nil 3243836807 3342859351 ("" (grind :if-match nil) (("" (inst 1 "N!1" "lambda (x: (intersection(A!1, B!1))): f!1(x)") (("1" (skolem-typepred) (("1" (inst?) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) proved ((intersection const-decl "set" sets nil) nil nil (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (member const-decl "bool" sets nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil)) 518 290 t shostak)) (finite_add 0 (finite_add-1 nil 3243836836 3342859353 ("" (grind :if-match nil) (("" (inst 1 "N!1 + 1" "lambda (x: (add(x!1, A!1))): if x = x!1 then N!1 else f!1(x) endif") (("1" (grind :if-match nil) (("1" (inst -4 "x1!1" "x2!1") (("1" (assert) nil nil)) nil)) nil) ("2" (grind :if-match nil) nil nil) ("3" (grind :if-match nil) nil nil)) nil)) nil) proved ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nonempty? const-decl "bool" sets nil) (add const-decl "(nonempty?)" sets nil) nil nil (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) nil (below type-eq-decl nil nat_types nil) nil (< const-decl "bool" reals nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (member const-decl "bool" sets nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil)) 1303 760 t shostak)) (nonempty_finite_is_nonempty 0 (nonempty_finite_is_nonempty-1 nil 3243832507 3342859353 ("" (grind) nil nil) proved ((nonempty? const-decl "bool" sets nil)) 15 10 t shostak)) (finite_singleton 0 (finite_singleton-1 nil 3243832507 3342859353 ("" (skosimp) (("" (expand "is_finite") (("" (inst 1 "1" "LAMBDA (x: (singleton[T](x!1))): 0") (("" (grind) nil nil)) nil)) nil)) nil) proved ((is_finite const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 125 70 t shostak)) (finite_union 0 (finite_union-1 nil 3243832507 3342859355 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (skosimp) (("" (inst 1 "N!1 + N!2" "LAMBDA (x : (union(A!1, B!1))) : IF A!1(x) THEN f!1(x) ELSE N!1 + f!2(x) ENDIF") (("1" (grind) nil nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (delete -) (("3" (grind) nil nil)) nil) ("4" (skosimp) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (injective? const-decl "bool" functions nil) nil nil (member const-decl "bool" sets nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) nil (union const-decl "set" sets nil) nil nil (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) nil (below type-eq-decl nil nat_types nil) nil (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) nil (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 2066 1200 t shostak)) (finite_intersection1 0 (finite_intersection1-3 nil 3243834683 3342859355 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (intersection[T](s!1, A!1))): f!1(x)") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (expand "intersection") (("1" (expand "member") (("1" (flatten) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "intersection") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved (nil nil (intersection const-decl "set" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (member const-decl "bool" sets nil) (injective? const-decl "bool" functions nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 253 80 t nil) (finite_intersection1-2 nil 3243834664 nil ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (intersection[T](S!1, A!1))): f!1(x)") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (expand "intersection") (("1" (expand "member") (("1" (flatten) (("1" (inst?) (("1" (assert) nil))))))))))))) ("2" (skolem-typepred) (("2" (expand "intersection") (("2" (expand "member") (("2" (assert) nil)))))))))))))) nil) unchecked nil nil nil nil nil) (finite_intersection1-1 nil 3243832507 3243834318 ("" (postpone) nil nil) unfinished nil 128464 4090 t shostak)) (finite_intersection2 0 (finite_intersection2-1 nil 3243832507 3342859355 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (intersection[T](A!1, s!1))): f!1(x)") (("1" (expand "injective?") (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil) ("2" (typepred "x2!1") (("2" (expand "intersection") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (typepred "x1!1") (("3" (expand "intersection") (("3" (expand "member") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "intersection") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved (nil nil (intersection const-decl "set" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 224 90 t shostak)) (finite_difference 0 (finite_difference-1 nil 3243832507 3342859356 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x :(difference[T](A!1, s!1))): f!1(x)") (("1" (expand "injective?") (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil) ("2" (typepred "x2!1") (("2" (expand "difference") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (typepred "x1!1") (("3" (expand "difference") (("3" (expand "member") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "difference") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved (nil nil (difference const-decl "set" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 248 90 t shostak)) (nonempty_finite_union1 0 (nonempty_finite_union1-1 nil 3243832507 3342859357 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (non_empty_finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) nil nil (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (union const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (nonempty_union1 application-judgement "(nonempty?)" sets nil) (finite_union application-judgement "finite_set" finite_sets nil)) 739 410 t shostak)) (nonempty_finite_union2 0 (nonempty_finite_union2-1 nil 3243832507 3342859357 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (non_empty_finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) nil nil (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (union const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (nonempty_union2 application-judgement "(nonempty?)" sets nil) (finite_union application-judgement "finite_set" finite_sets nil)) 949 400 t shostak)) (nonempty_add_finite 0 (nonempty_add_finite-1 nil 3243832507 3342859358 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (split) (("1" (inst 1 "N!1+1" "lambda (x: (add[T](x!1, A!1))): if x = x!1 then N!1 else f!1(x) endif") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (lift-if) (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (inst -4 "x1!1" "x2!1") (("1" (assert) nil nil) ("2" (expand "add") (("2" (assert) (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil) ("3" (expand "add") (("3" (expand "member") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (assert) nil nil)) nil)) nil) ("3" (skolem-typepred) (("3" (flatten) (("3" (assert) (("3" (expand "add") (("3" (expand "member") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "empty?") (("2" (inst -1 "x!1") (("2" (expand "member") (("2" (expand "add") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (injective? const-decl "bool" functions nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) nil (below type-eq-decl nil nat_types nil) nil (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonempty? const-decl "bool" sets nil) (add const-decl "(nonempty?)" sets nil) nil nil (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (empty? const-decl "bool" sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 912 420 t shostak)) (finite_remove 0 (finite_remove-1 nil 3243832507 3342859359 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (remove[T](x!1, A!1))): f!1(x)") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (inst?) (("1" (expand "remove") (("1" (expand "member") (("1" (assert) nil nil)) nil)) nil) ("2" (expand "remove") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "remove") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved (nil nil (remove const-decl "set" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 255 70 t shostak)) (finite_rest 0 (finite_rest-1 nil 3243832507 3342859359 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (rest[T](A!1))): f!1(x)") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (inst?) (("1" (expand "rest") (("1" (assert) (("1" (hide -1) (("1" (prop) (("1" (expand "empty?") (("1" (skosimp) (("1" (expand "member") (("1" (expand "remove") (("1" (expand "member") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "rest") (("2" (assert) (("2" (hide -2) (("2" (prop) (("2" (expand "remove") (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "rest") (("2" (assert) (("2" (prop) (("2" (expand "remove") (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved (nil (rest const-decl "set" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (remove const-decl "set" sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 179 90 t shostak)) (finite_emptyset 0 (finite_emptyset-1 nil 3243832507 3342859359 ("" (expand "is_finite") (("" (inst 1 "0" "LAMBDA (x:(emptyset[T])): 0") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (expand "emptyset") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "emptyset") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((FALSE const-decl "bool" booleans nil) (emptyset const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (is_finite const-decl "bool" finite_sets nil)) 205 50 t shostak)) (nonempty_singleton_finite 0 (nonempty_singleton_finite-1 nil 3243832507 3342859359 ("" (subtype-tcc) nil nil) proved ((T formal-type-decl nil finite_sets nil) (singleton const-decl "(singleton?)" sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (finite_singleton application-judgement "finite_set" finite_sets nil)) 69 40 t shostak)) (finite_full 0 (finite_full-1 nil 3243836878 3342859360 ("" (grind :if-match nil) (("1" (inst 1 "N!1" "g!1") (("1" (grind) nil nil)) nil) ("2" (inst 1 "N!1" "f!1") (("2" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (restrict const-decl "R" restrict nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (is_finite const-decl "bool" finite_sets nil) (is_finite_type const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil)) 901 360 t shostak)) (finite_type_set 0 (finite_type_set-1 nil 3243836911 3342859361 ("" (grind :if-match nil) (("" (inst 1 "N!1" "g!1") (("" (grind) nil nil)) nil)) nil) proved ((T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (restrict const-decl "R" restrict nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (is_finite const-decl "bool" finite_sets nil) (is_finite_type const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil)) 575 190 t shostak)) (finite_complement 0 (finite_complement-1 nil 3243836931 3342859361 ("" (grind :if-match nil) (("" (inst 1 "N!1" "g!1") (("" (grind :if-match nil) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (complement const-decl "set" sets nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (is_finite const-decl "bool" finite_sets nil) (is_finite_type const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil)) 351 200 t shostak)) (inj_set_TCC1 0 (inj_set_TCC1-1 nil 3243832508 3342859361 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 195 180 t shostak)) (inj_Card 0 (inj_Card-1 nil 3243836968 3342859362 ("" (skosimp) (("" (expand "Card") (("" (rewrite "min_def") (("" (expand "minimum?") (("" (flatten) (("" (expand "inj_set") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Card const-decl "nat" finite_sets nil) (minimum? const-decl "bool" min_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (inj_set const-decl "(nonempty?[nat])" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (T formal-type-decl nil finite_sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (min_def formula-decl nil min_nat nil)) 100 80 t shostak)) (reduce_inj_TCC1 0 (reduce_inj_TCC1-1 nil 3243832508 3342859362 ("" (subtype-tcc) nil nil) proved ((injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil)) 38 40 t shostak)) (reduce_inj 0 (reduce_inj-1 nil 3243836998 3342859362 ("" (skosimp) (("" (grind :if-match nil) (("" (inst 2 "LAMBDA (x : (S!1)) : IF f!1(x) = p!1 - 1 THEN y!1 ELSE f!1(x) ENDIF") (("1" (skosimp) (("1" (inst -2 "x1!1" "x2!1") (("1" (lift-if) (("1" (lift-if) (("1" (assert) (("1" (prop) (("1" (inst?) nil nil) ("2" (inst 3 "x2!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (skosimp) (("3" (inst 2 "x!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (below type-eq-decl nil nat_types nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) nil (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) nil nil (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) nil (int_minus_int_is_int application-judgement "int" integers nil)) 393 340 t shostak)) (Card_injection 0 (Card_injection-1 nil 3243837042 3342859362 ("" (skosimp*) (("" (expand "Card") (("" (typepred "min(inj_set(S!1))") (("" (inst?) (("" (assert) (("" (expand "inj_set") (("" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Card const-decl "nat" finite_sets nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonempty? const-decl "bool" sets nil) (inj_set const-decl "(nonempty?[nat])" finite_sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat nil)) 119 100 t shostak)) (Card_surjection 0 (Card_surjection-1 nil 3243837068 3342859363 ("" (skosimp*) (("" (name "CS" "Card(S!1)") (("" (replace -1) (("" (forward-chain "inj_Card") (("" (skolem!) (("" (rewrite "injection_n_to_m") (("" (copy -3) (("" (expand "surjective?" -1) (("" (inst -1 "0") (("" (skosimp*) (("" (inst 1 "f!2 o inverse(f!1)") (("1" (hide -3 2) (("1" (forward-chain "inj_inv[(S!1),below[n!1]]") (("1" (hide -4) (("1" (grind :if-match nil :exclude inverse) (("1" (inst -6 "epsilon! (x: (S!1)): f!1(x) = x1!1" "epsilon! (x: (S!1)): f!1(x) = x2!1") (("1" (inst -3 "x1!1" "x2!1") (("1" (assert) (("1" (expand "inverse") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Card const-decl "nat" finite_sets nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (inj_Card formula-decl nil finite_sets nil) (injection_n_to_m formula-decl nil nat_fun_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (inj_inv formula-decl nil function_inverse nil) (below type-eq-decl nil naturalnumbers nil) (O const-decl "T3" function_props nil) (inverse const-decl "D" function_inverse nil) (TRUE const-decl "bool" booleans nil) nil (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (surjective? const-decl "bool" functions nil)) 619 520 t shostak)) (Card_bijection 0 (Card_bijection-1 nil 3243837106 3342859363 ("" (skolem!) (("" (prop) (("1" (forward-chain "inj_Card") (("1" (skolem!) (("1" (inst?) (("1" (expand "bijective?") (("1" (assert) (("1" (case "n!1 = 0") (("1" (delete -2 -3) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (forward-chain "reduce_inj") (("2" (forward-chain "Card_injection") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "bijective?") (("2" (skosimp) (("2" (lemma "Card_injection" ("S" "S!1" "n" "n!1")) (("2" (split) (("1" (lemma "Card_surjection" ("S" "S!1" "n" "n!1")) (("1" (ground) (("1" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (= const-decl "[T, T -> boolean]" equalities nil) (surjective? const-decl "bool" functions nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (reduce_inj formula-decl nil finite_sets nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (Card_injection formula-decl nil finite_sets nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (inj_Card formula-decl nil finite_sets nil) (Card_surjection formula-decl nil finite_sets nil)) 249 210 t shostak)) (Card_disj_union 0 (Card_disj_union-1 nil 3243837140 3342859365 ("" (skosimp) (("" (name-replace "N1" "Card(S!1)" :hide? nil) (("" (name-replace "N2" "Card(S2!1)" :hide? nil) (("" (auto-rewrite "Card_bijection") (("" (do-rewrite) (("" (skosimp*) (("" (inst 1 "LAMBDA (x : (union(S!1, S2!1))) : IF S!1(x) THEN f!2(x) ELSE N1 + f!1(x) ENDIF") (("1" (expand "bijective?") (("1" (prop) (("1" (delete -2 -4) (("1" (grind) nil nil)) nil) ("2" (delete -1 -3) (("2" (grind :if-match nil) (("2" (inst -3 "y!1") (("1" (skolem!) (("1" (inst? 1) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (inst -2 "y!1 - N1") (("2" (skolem!) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (delete -1 -2) (("3" (grind) nil nil)) nil) ("4" (skosimp) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (T formal-type-decl nil finite_sets nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (Card const-decl "nat" finite_sets nil) (bijective? const-decl "bool" functions nil) nil (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (surjective? const-decl "bool" functions nil) nil nil (disjoint? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (member const-decl "bool" sets nil) (injective? const-decl "bool" functions nil) (finite_intersection2 application-judgement "finite_set" finite_sets nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) nil (NOT const-decl "[bool -> bool]" booleans nil) (union const-decl "set" sets nil) nil nil (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) nil (below type-eq-decl nil nat_types nil) nil (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) nil (Card_bijection formula-decl nil finite_sets nil) (finite_union application-judgement "finite_set" finite_sets nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil)) 2021 1810 t shostak)) (card_TCC1 0 (card_TCC1-1 nil 3243832508 3342859365 ("" (inst 1 "(LAMBDA S: Card(S))") nil nil) proved ((Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil)) 22 20 t shostak)) (card_def 0 (card_def-1 nil 3243837211 3342859365 ("" (skosimp*) (("" (assert) nil nil)) nil) proved nil 18 20 t shostak)) (card_emptyset 0 (card_emptyset-1 nil 3242964880 3342859365 ("" (rewrite "card_def") (("" (rewrite "Card_bijection") (("" (inst 1 "LAMBDA (x : {x: T | FALSE}) : 0") (("1" (expand "bijective?") (("1" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (typepred "x1!1") (("1" (expand "emptyset") (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "emptyset") (("2" (propax) nil nil)) nil)) nil) ("3" (skosimp*) nil nil)) nil)) nil)) nil) proved ((Card_bijection formula-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (below type-eq-decl nil nat_types nil) (NOT const-decl "[bool -> bool]" booleans nil) (FALSE const-decl "bool" booleans nil) (emptyset const-decl "set" sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (card_def formula-decl nil finite_sets nil) (finite_emptyset name-judgement "finite_set" finite_sets nil)) 128 100 t shostak)) (empty_card 0 (empty_card-1 nil 3242964945 3342859365 ("" (skolem!) (("" (prop) (("1" (rewrite "emptyset_is_empty?[T]") (("1" (replace -1) (("1" (use "card_emptyset") nil nil)) nil)) nil) ("2" (rewrite "card_def") (("2" (rewrite "Card_bijection") (("2" (skolem!) (("2" (delete -) (("2" (grind) (("2" (typepred "f!1(x!1)") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((card_emptyset formula-decl nil finite_sets nil) (finite_emptyset name-judgement "finite_set" finite_sets nil) (T formal-type-decl nil finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (emptyset_is_empty? formula-decl nil sets_lemmas nil) (Card_bijection formula-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (TRUE const-decl "bool" booleans nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (card_def formula-decl nil finite_sets nil)) 127 90 t shostak)) (card_empty? 0 (card_empty?-1 nil 3242964970 3342859365 ("" (skosimp*) (("" (rewrite "empty_card") nil nil)) nil) proved ((empty_card formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil)) 22 20 t shostak)) (card_is_0 0 (card_is_0-1 nil 3242964987 3342859366 ("" (skosimp*) (("" (rewrite "card_empty?") (("" (rewrite "emptyset_is_empty?") nil nil)) nil)) nil) proved ((card_empty? formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (emptyset_is_empty? formula-decl nil sets_lemmas nil) (finite_emptyset name-judgement "finite_set" finite_sets nil)) 27 20 t shostak)) (nonempty_card 0 (nonempty_card-1 nil 3242965012 3342859366 ("" (skosimp) (("" (expand "nonempty?") (("" (rewrite "empty_card") (("" (ground) nil nil)) nil)) nil)) nil) proved ((nonempty? const-decl "bool" sets nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (empty_card formula-decl nil finite_sets nil)) 50 40 t shostak)) (card_singleton 0 (card_singleton-1 nil 3242965037 3342859366 ("" (skosimp*) (("" (rewrite "card_def") (("" (rewrite "Card_bijection") (("" (inst 1 "LAMBDA (y : (singleton(x!1))) : 0") (("" (grind) (("" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil) proved ((nonempty_singleton_finite application-judgement "non_empty_finite_set" finite_sets nil) (card_def formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (singleton? const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (Card_bijection formula-decl nil finite_sets nil)) 153 130 t shostak)) (card_one 0 (card_one-1 nil 3242965057 3342859366 ("" (skosimp*) (("" (rewrite "card_def") (("" (prop) (("1" (rewrite "Card_bijection") (("1" (skolem!) (("1" (grind :if-match nil) (("1" (inst -2 "0") (("1" (skolem!) (("1" (inst? 1) (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (ground) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "card_def" :dir rl) (("2" (rewrite "card_singleton") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((card_def formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (card_singleton formula-decl nil finite_sets nil) (Card_bijection formula-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (singleton? const-decl "bool" sets nil) (singleton const-decl "(singleton?)" sets nil) (nonempty_singleton_finite application-judgement "non_empty_finite_set" finite_sets nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)) 262 200 t shostak)) (card_disj_union 0 (card_disj_union-1 nil 3242965085 3342859366 ("" (skosimp*) (("" (rewrite "card_def") (("" (rewrite "card_def") (("" (rewrite "card_def") (("" (rewrite "Card_disj_union") nil nil)) nil)) nil)) nil)) nil) proved ((finite_union application-judgement "finite_set" finite_sets nil) (card_def formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (union const-decl "set" sets nil) (Card_disj_union formula-decl nil finite_sets nil)) 80 60 t shostak)) (card_diff_subset 0 (card_diff_subset-1 nil 3242965107 3342859366 ("" (skosimp) (("" (forward-chain "union_diff_subset") (("" (lemma "card_disj_union") (("" (inst?) (("" (assert) (("" (rewrite "difference_disjoint") nil nil)) nil)) nil)) nil)) nil)) nil) proved ((union_diff_subset formula-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (finite_difference application-judgement "finite_set" finite_sets nil) (difference const-decl "set" sets nil) (difference_disjoint formula-decl nil sets_lemmas nil) (finite_union application-judgement "finite_set" finite_sets nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (card_disj_union formula-decl nil finite_sets nil)) 234 210 t shostak)) (card_subset 0 (card_subset-1 nil 3242965128 3342859367 ("" (skosimp) (("" (forward-chain "card_diff_subset") (("" (assert) nil nil)) nil)) nil) proved ((card_diff_subset formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (finite_difference application-judgement "finite_set" finite_sets nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 174 150 t shostak)) (card_plus 0 (card_plus-1 nil 3242965147 3342859367 ("" (auto-rewrite "union_subset1[T]" "intersection_subset1[T]") (("" (skolem!) (("" (lemma "card_diff_subset") (("" (inst-cp -1 "A!1" "union(A!1, B!1)") (("" (rewrite "diff_union_inter[T]") (("" (inst? -1) (("" (ground) (("" (rewrite "intersection_commutative" 1) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((finite_union application-judgement "finite_set" finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (union const-decl "set" sets nil) (intersection const-decl "set" sets nil) (intersection_commutative formula-decl nil sets_lemmas nil) (intersection_subset1 formula-decl nil sets_lemmas nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (union_subset1 formula-decl nil sets_lemmas nil) (finite_difference application-judgement "finite_set" finite_sets nil) (finite_intersection2 application-judgement "finite_set" finite_sets nil) (diff_union_inter formula-decl nil sets_lemmas nil) (card_diff_subset formula-decl nil finite_sets nil)) 894 840 t shostak)) (card_union 0 (card_union-1 nil 3242965170 3342859368 ("" (skosimp*) (("" (lemma "card_plus") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil) proved ((card_plus formula-decl nil finite_sets nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (finite_intersection2 application-judgement "finite_set" finite_sets nil) (finite_union application-judgement "finite_set" finite_sets nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil)) 699 640 t shostak)) (card_add 0 (card_add-1 nil 3242965190 3342859369 ("" (skosimp*) (("" (lift-if) (("" (prop) (("1" (rewrite "member_add") (("1" (assert) nil nil) ("2" (expand "member") (("2" (propax) nil nil)) nil)) nil) ("2" (rewrite "add_as_union") (("2" (rewrite "singleton" :dir rl) (("2" (rewrite "union_commutative") (("2" (rewrite "card_disj_union") (("1" (rewrite "card_singleton") (("1" (assert) (("1" (expand "singleton") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (rewrite "singleton_disjoint") (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((add_as_union formula-decl nil sets_lemmas nil) (nonempty_singleton_finite application-judgement "non_empty_finite_set" finite_sets nil) (nonempty_finite_union2 application-judgement "non_empty_finite_set" finite_sets nil) (union_commutative formula-decl nil sets_lemmas nil) (nonempty_finite_union1 application-judgement "non_empty_finite_set" finite_sets nil) (singleton_disjoint formula-decl nil sets_lemmas nil) (card_singleton formula-decl nil finite_sets nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (card_disj_union formula-decl nil finite_sets nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (number nonempty-type-decl nil numbers nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (union const-decl "set" sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (member_add formula-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nonempty_add_finite application-judgement "non_empty_finite_set" finite_sets nil) (member const-decl "bool" sets nil)) 799 730 t shostak)) (card_add_gt0 0 (card_add_gt0-1 nil 3299963376 3342859369 ("" (skosimp) (("" (rewrite "card_add") (("" (lift-if) (("" (prop) (("1" (use "nonempty_card") (("1" (assert) (("1" (expand "nonempty?") (("1" (expand "empty?") (("1" (inst -1 "x!1") (("1" (expand "member") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((card_add formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (nonempty_card formula-decl nil finite_sets nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 345 320 t shostak)) (card_remove 0 (card_remove-1 nil 3242965278 3342859370 ("" (skolem!) (("" (lift-if) (("" (prop) (("1" (rewrite "remove_as_difference") (("1" (rewrite "card_diff_subset") (("1" (rewrite "card_singleton") nil nil) ("2" (lemma "singleton_subset[T]") (("2" (inst?) (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "member_remove") (("1" (assert) nil nil) ("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((member_remove formula-decl nil sets_lemmas nil) (finite_remove application-judgement "finite_set" finite_sets nil) (remove_as_difference formula-decl nil sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (nonempty_singleton_finite application-judgement "non_empty_finite_set" finite_sets nil) (finite_difference application-judgement "finite_set" finite_sets nil) (singleton_subset formula-decl nil sets_lemmas nil) (member const-decl "bool" sets nil) (card_singleton formula-decl nil finite_sets nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (singleton const-decl "(singleton?)" sets nil) (singleton? const-decl "bool" sets nil) (card_diff_subset formula-decl nil finite_sets nil)) 294 250 t shostak)) (card_rest 0 (card_rest-1 nil 3242965301 3342859370 ("" (skosimp) (("" (expand "rest") (("" (rewrite "card_remove") (("1" (lemma "choose_member[T]") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (expand "nonempty?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((rest const-decl "set" sets nil) (choose_member formula-decl nil sets_lemmas nil) (int_minus_int_is_int application-judgement "int" integers nil) (finite_remove application-judgement "finite_set" finite_sets nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (card_remove formula-decl nil finite_sets nil)) 212 180 t shostak)) (same_card_subset 0 (same_card_subset-1 nil 3242965321 3342859370 ("" (skosimp) (("" (case "EXISTS x : member(x, B!1) AND subset?(A!1, remove(x, B!1))") (("1" (skosimp) (("1" (expand "member") (("1" (forward-chain "card_subset") (("1" (rewrite "card_remove") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (apply-extensionality :hide? t) (("2" (grind :exclude "Card" :if-match nil) (("1" (inst? -) (("1" (assert) nil nil)) nil) ("2" (inst? +) (("2" (assert) (("2" (skosimp) (("2" (assert) (("2" (inst - "x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((remove const-decl "set" sets nil) (subset? const-decl "bool" sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (finite_remove application-judgement "finite_set" finite_sets nil) (card_remove formula-decl nil finite_sets nil) (int_minus_int_is_int application-judgement "int" integers nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (card_subset formula-decl nil finite_sets nil) (/= const-decl "boolean" notequal nil)) 320 270 t shostak)) (smaller_card_subset 0 (smaller_card_subset-1 nil 3242965352 3342859370 ("" (skosimp) (("" (forward-chain "card_subset") (("" (case-replace "A!1 = B!1") (("1" (assert) nil nil) ("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((card_subset formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (= const-decl "[T, T -> boolean]" equalities nil)) 173 150 t shostak)) (card_1_has_1 0 (card_1_has_1-1 nil 3242965373 3342859371 ("" (skosimp*) (("" (use "card_empty?") (("" (iff) (("" (flatten) (("" (assert) (("" (expand "empty?") (("" (skosimp*) (("" (expand "member") (("" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((card_empty? formula-decl nil finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 68 40 t shostak)) (card_2_has_2 0 (card_2_has_2-1 nil 3242965395 3342859371 ("" (skosimp*) (("" (lemma "card_1_has_1") (("" (inst?) (("" (assert) (("" (skosimp*) (("" (lemma "card_1_has_1") (("" (inst -1 "remove(x!1,S!1)") (("" (rewrite "card_remove") (("" (lift-if) (("" (assert) (("" (skosimp*) (("" (expand "remove") (("" (expand "member") (("" (flatten) (("" (inst 2 "x!1" "x!2") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((card_1_has_1 formula-decl nil finite_sets nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (card_remove formula-decl nil finite_sets nil) (int_minus_int_is_int application-judgement "int" integers nil) (member const-decl "bool" sets nil) (remove const-decl "set" sets nil) (finite_remove application-judgement "finite_set" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil)) 175 150 t shostak)) (card_intersection_le 0 (card_intersection_le-1 nil 3242965417 3342859371 ("" (skosimp*) (("" (case "subset?(intersection(A!1, B!1),A!1) AND
                    subset?(intersection(A!1, B!1),B!1)") (("1" (flatten) (("1" (lemma "card_subset") (("1" (split 1) (("1" (inst -1 "intersection(A!1, B!1)" "A!1") (("1" (assert) nil nil)) nil) ("2" (inst -1 "intersection(A!1, B!1)" "B!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "subset?") (("2" (expand "intersection") (("2" (expand "member") (("2" (split 1) (("1" (skosimp*) nil nil) ("2" (skosimp*) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (intersection const-decl "set" sets nil) (subset? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (finite_intersection2 application-judgement "finite_set" finite_sets nil) (card_subset formula-decl nil finite_sets nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (member const-decl "bool" sets nil)) 124 90 t shostak)) (card_bij 0 (card_bij-1 nil 3242965441 3342859371 ("" (skosimp*) (("" (rewrite "card_def") (("" (rewrite "Card_bijection") nil nil)) nil)) nil) proved ((card_def formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (Card_bijection formula-decl nil finite_sets nil)) 34 30 t shostak)) (card_bij_inv 0 (card_bij_inv-1 nil 3307953160 3342859372 ("" (skosimp*) (("" (lemma "card_bij[T]") (("" (inst?) (("" (case-replace "N!1 = 0") (("1" (ground) (("1" (inst 1 "LAMBDA (n: below[N!1]): epsilon(S!1)") (("1" (expand "bijective?") (("1" (expand "injective?") (("1" (expand "surjective?") (("1" (split 1) (("1" (skolem-typepred) nil nil) ("2" (skolem-typepred) (("2" (rewrite "card_empty?") (("2" (hide -2) (("2" (expand "empty?") (("2" (expand "member") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) nil nil) ("3" (skolem-typepred) nil nil)) nil) ("2" (skolem-typepred) (("2" (expand "bijective?") (("2" (flatten) (("2" (expand "surjective?") (("2" (rewrite "card_empty?") (("2" (expand "empty?" 1) (("2" (expand "member") (("2" (skosimp) (("2" (inst -2 "x!1") (("2" (skolem-typepred) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (ground) (("1" (hide -2) (("1" (skosimp) (("1" (inst + "inverse(f!1)") (("1" (lemma "bijective_inverse_is_bijective[(S!1),below(N!1)]") (("1" (inst?) nil nil) ("2" (assert) (("2" (use "nonempty_card") (("2" (assert) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (skosimp*) (("2" (expand "member") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "nonempty_card") (("2" (assert) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (expand "member") (("2" (skosimp*) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (skosimp*) (("2" (inst + "inverse(f!1)") (("1" (lemma "bijective_inverse_is_bijective[below(N!1),(S!1)]") (("1" (inst?) nil nil) ("2" (expand "bijective?") (("2" (flatten) (("2" (expand "surjective?") (("2" (inst -2 "choose(S!1)") (("1" (skosimp*) (("1" (inst + "x!1") nil nil)) nil) ("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (expand "member") (("2" (inst 1 "0") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "0") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((card_bij formula-decl nil finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) nil (< const-decl "bool" reals nil) nil (below type-eq-decl nil nat_types nil) (TRUE const-decl "bool" booleans nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) nil (injective? const-decl "bool" functions nil) (card_empty? formula-decl nil finite_sets nil) (empty? const-decl "bool" sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (member const-decl "bool" sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (choose const-decl "(p)" sets nil) nil (inverse const-decl "D" function_inverse nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) nil (nonempty? const-decl "bool" sets nil) (nonempty_card formula-decl nil finite_sets nil) nil (below type-eq-decl nil naturalnumbers nil) (bijective_inverse_is_bijective judgement-tcc nil function_inverse nil) nil (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 547 420 t shostak)) (bij_exists 0 (bij_exists-1 nil 3242965457 3342859372 ("" (skosimp*) (("" (lemma "card_bij") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil) proved ((card_bij formula-decl nil finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 30 30 t shostak)) (finite_pred 0 (finite_pred-1 nil 3307981117 3342859373 ("" (expand "fullset") (("" (expand "is_finite") (("" (skosimp*) (("" (inst 1 "N!1" "(LAMBDA (x: {x: T | P!1(x)}): f!1(x))") (("" (expand "injective?") (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((is_finite const-decl "bool" finite_sets nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (T formal-type-decl nil finite_sets nil) (pred type-eq-decl nil defined_types nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (TRUE const-decl "bool" booleans nil) (injective? const-decl "bool" functions nil) (fullset const-decl "set" sets nil)) 1395 70 t shostak)) (finite_pred2 0 (finite_pred2-1 nil 3307981300 3342859373 ("" (grind) nil nil) proved ((T formal-type-decl nil finite_sets nil) (pred type-eq-decl nil defined_types nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (injective? const-decl "bool" functions nil) (is_finite const-decl "bool" finite_sets nil)) 219 180 t shostak)) (card_implies_TCC1 0 (card_implies_TCC1-1 nil 3307950062 3342859373 ("" (skosimp) (("" (rewrite "finite_pred") nil nil)) nil) proved ((finite_pred formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil)) 16 10 t shostak)) (card_implies_TCC2 0 (card_implies_TCC2-1 nil 3307950062 3342859373 ("" (skosimp) (("" (rewrite "finite_pred") nil nil)) nil) proved ((finite_pred formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil)) 31 10 t shostak)) (card_implies 0 (card_implies-1 nil 3307981157 3342859373 ("" (skosimp*) (("" (case "subset?({x: T | P1!1(x)},{x: T | P2!1(x)})") (("1" (lemma "card_subset[T]") (("1" (inst?) (("1" (assert) nil nil) ("2" (hide -1 -3 2) (("2" (rewrite "finite_pred") nil nil)) nil) ("3" (rewrite "finite_pred") nil nil)) nil)) nil) ("2" (hide -1 2) (("2" (expand "subset?") (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((pred type-eq-decl nil defined_types nil) (subset? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets nil) nil (is_finite const-decl "bool" finite_sets nil) nil (finite_set type-eq-decl nil finite_sets nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (finite_pred formula-decl nil finite_sets nil) (card_subset formula-decl nil finite_sets nil) (member const-decl "bool" sets nil)) 83 70 t shostak)) (finite_induction 0 (finite_induction-1 nil 3307981389 3342859374 ("" (grind) nil nil) proved ((number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (injective? const-decl "bool" functions nil)) 182 160 t shostak)))(restrict_set_props (restrict_finite 0 (restrict_finite-1 nil 3249347110 3342859374 ("" (skosimp) (("" (expand "is_finite") (("" (skolem!) (("" (inst + "N!1" "LAMBDA (x: (restrict[T, S, bool](a!1))): f!1(x)") (("1" (expand "injective?") (("1" (skosimp :preds? t) (("1" (expand "restrict") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "restrict") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((is_finite const-decl "bool" finite_sets nil) nil (set type-eq-decl nil sets nil) (restrict const-decl "R" restrict nil) (bool nonempty-type-eq-decl nil booleans nil) (S formal-subtype-decl nil restrict_set_props nil) (S_pred const-decl "[T -> boolean]" restrict_set_props nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil restrict_set_props nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil)) 121 80 nil nil)) (finite_restrict 0 (finite_restrict-1 nil 3249347110 3342859374 ("" (skolem!) (("" (use "restrict_finite") (("" (assert) nil nil)) nil)) nil) proved ((restrict_finite formula-decl nil restrict_set_props nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil restrict_set_props nil)) 26 30 t nil)) (empty_restrict 0 (empty_restrict-1 nil 3249347110 3342859374 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil restrict_set_props nil) (set type-eq-decl nil sets nil) (S formal-subtype-decl nil restrict_set_props nil) (S_pred const-decl "[T -> boolean]" restrict_set_props nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)) 60 60 t nil)) (card_restrict 0 (card_restrict-2 "Fix for 3.2" 3307984009 3342859375 ("" (skolem!) (("" (case "empty?(restrict[T, S, bool](a!1))") (("1" (rewrite "empty_card[S]") (("1" (assert) nil nil)) nil) ("2" (expand* "empty?" "member") (("2" (skolem!) (("2" (use "injection_n_to_m_var") (("2" (use "card_bij[S]") (("2" (lemma "card_bij[T]" ("N" "card(a!1)" "S" "a!1")) (("2" (assert) (("2" (skosimp*) (("2" (use "bij_inv_is_bij[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]]") (("1" (assert) (("1" (inst + "LAMBDA (x: below(card(restrict[T, S, bool](a!1)))): f!1(inverse(f!2)(x))") (("1" (expand "bijective?" (-1 -2)) (("1" (expand "injective?") (("1" (skosimp) (("1" (inst - "x1!1" "x2!1") (("1" (inst - "inverse(f!2)(x1!1)" "inverse(f!2)(x2!1)") (("1" (assert) nil nil) ("2" (typepred "inverse[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]](f!2)(x2!1)") (("1" (expand "restrict") (("1" (inst + "x!1") nil nil)) nil) ("2" (inst + "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (typepred "inverse[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]](f!2)(x!2)") (("1" (expand "restrict") (("1" (propax) nil nil)) nil) ("2" (inst + "x!1") nil nil)) nil)) nil) ("3" (skolem!) (("3" (inst + "x!1") nil nil)) nil)) nil)) nil) ("2" (inst + "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (restrict const-decl "R" restrict nil) (empty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (S formal-subtype-decl nil restrict_set_props nil) (S_pred const-decl "[T -> boolean]" restrict_set_props nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil restrict_set_props nil) (finite_restrict application-judgement "finite_set[S]" restrict_set_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (empty_card formula-decl nil finite_sets nil) (card_bij formula-decl nil finite_sets nil) (TRUE const-decl "bool" booleans nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (bij_inv_is_bij formula-decl nil function_inverse nil) nil (below type-eq-decl nil naturalnumbers nil) (inverse const-decl "D" function_inverse nil) nil (injective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (bijective? const-decl "bool" functions nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (injection_n_to_m_var formula-decl nil nat_fun_props nil) (member const-decl "bool" sets nil)) 639 560 t shostak) (card_restrict-1 nil 3249390068 3307982893 ("" (skolem!) (("" (case "empty?(restrict[T, S, bool](a!1))") (("1" (rewrite "empty_card[S]") (("1" (assert) nil nil)) nil) ("2" (expand* "empty?" "member") (("2" (skolem!) (("2" (use "injection_n_to_m_var") (("2" (use "card_bij[S]") (("2" (lemma "card_bij[T]" ("N" "card(a!1)" "S" "a!1")) (("2" (assert) (("2" (skosimp*) (("2" (use "bij_inv_is_bij[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]]") (("1" (assert) (("1" (inst + "LAMBDA (x: below(card(restrict[T, S, bool](a!1)))): f!1(inverse(f!2)(x))") (("1" (expand "bijective?" (-1 -2)) (("1" (expand "injective?") (("1" (skosimp) (("1" (inst - "x1!1" "x2!1") (("1" (inst - "inverse(f!2)(x1!1)" "inverse(f!2)(x2!1)") (("1" (assert) nil nil) ("2" (typepred "inverse[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]](f!2)(x2!1)") (("1" (expand "restrict") (("1" (propax) nil nil)) nil) ("2" (inst + "x!1") nil nil)) nil) ("3" (typepred "inverse[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]](f!2)(x1!1)") (("1" (expand "restrict") (("1" (propax) nil nil)) nil) ("2" (inst + "x!1") nil nil)) nil) ("4" (inst + "x!1") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (typepred "inverse[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]](f!2)(x!2)") (("1" (expand "restrict") (("1" (propax) nil nil)) nil) ("2" (inst + "x!1") nil nil)) nil)) nil) ("3" (skolem!) (("3" (inst + "x!1") nil nil)) nil)) nil)) nil) ("2" (inst + "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1840 1130 t shostak)))(extend_set_props (finite_extension 0 (finite_extension-1 nil 3249327215 3342859375 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (FALSE const-decl "bool" booleans nil) nil (set type-eq-decl nil sets nil) (S formal-subtype-decl nil extend_set_props nil) (S_pred const-decl "[T -> boolean]" extend_set_props nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (T formal-type-decl nil extend_set_props nil) (injective? const-decl "bool" functions nil) (is_finite const-decl "bool" finite_sets nil) (extend const-decl "R" extend nil)) 475 420 t nil)) (finite_extend 0 (finite_extend-1 nil 3249327215 3342859375 ("" (lemma "finite_extension") (("" (skolem-typepred) (("" (inst?) (("" (prop) nil nil)) nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil extend_set_props nil) (S_pred const-decl "[T -> boolean]" extend_set_props nil) (S formal-subtype-decl nil extend_set_props nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (finite_extension formula-decl nil extend_set_props nil)) 13 10 nil nil)) (empty_extend 0 (empty_extend-1 nil 3249327215 3342859375 ("" (skolem-typepred) (("" (expand* "empty?" "member" "extend") (("" (skolem!) (("" (prop) (("" (inst?) nil nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (extend const-decl "R" extend nil) (empty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (S formal-subtype-decl nil extend_set_props nil) (S_pred const-decl "[T -> boolean]" extend_set_props nil) (T formal-type-decl nil extend_set_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 48 20 nil nil)) (nonempty_extend 0 (nonempty_extend-1 nil 3249327215 3342859375 ("" (skolem-typepred) (("" (expand* "nonempty?" "empty?" "member" "extend") (("" (skolem-typepred) (("" (inst?) (("" (prop) nil nil)) nil)) nil)) nil)) nil) proved ((empty? const-decl "bool" sets nil) (extend const-decl "R" extend nil) (member const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (S formal-subtype-decl nil extend_set_props nil) (S_pred const-decl "[T -> boolean]" extend_set_props nil) (T formal-type-decl nil extend_set_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 64 50 nil nil)) (singleton_extend 0 (singleton_extend-1 nil 3249327215 3342859375 ("" (skolem-typepred) (("" (expand* "extend" "singleton?") (("" (skolem!) (("" (inst + "x!1") (("" (skolem-typepred) (("" (assert) (("" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((extend const-decl "R" extend nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (FALSE const-decl "bool" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (singleton? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (S formal-subtype-decl nil extend_set_props nil) (S_pred const-decl "[T -> boolean]" extend_set_props nil) (T formal-type-decl nil extend_set_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 75 60 t nil)) (card_extend 0 (card_extend-1 nil 3249389673 3342859376 ("" (skolem!) (("" (use "bij_exists[S]") (("" (use "card_bij[T]") (("" (assert) (("" (skolem!) (("" (inst + "f!1") (("1" (expand* "bijective?" "injective?" "surjective?") (("1" (prop) (("1" (skosimp :preds? t) (("1" (expand "extend") (("1" (prop) (("1" (assert) (("1" (inst - "x1!1" "x2!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst -2 "y!1") (("2" (skolem!) (("2" (inst + "x!1") (("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "extend") (("2" (skolem!) (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bij_exists formula-decl nil finite_sets nil) (T formal-type-decl nil extend_set_props nil) (boolean nonempty-type-decl nil booleans nil) (S_pred const-decl "[T -> boolean]" extend_set_props nil) (S formal-subtype-decl nil extend_set_props nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (finite_extend application-judgement "finite_set[T]" extend_set_props nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) nil (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (below type-eq-decl nil naturalnumbers nil) (NOT const-decl "[bool -> bool]" booleans nil) nil (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (card_bij formula-decl nil finite_sets nil)) 331 290 t shostak)) (empty?_extend 0 (empty?_extend-1 nil 3362459601 3362459612 ("" (grind-with-ext) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil extend_set_props nil) (S_pred const-decl "[T -> boolean]" extend_set_props nil) (S formal-subtype-decl nil extend_set_props nil) (extend const-decl "R" extend nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)) 10444 160 t shostak)) (nonempty?_extend 0 (nonempty?_extend-1 nil 3362459616 3362459617 ("" (grind-with-ext) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil extend_set_props nil) (S_pred const-decl "[T -> boolean]" extend_set_props nil) (S formal-subtype-decl nil extend_set_props nil) (extend const-decl "R" extend nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)) 1443 130 t shostak)) (singleton?_extend 0 (singleton?_extend-1 nil 3362459622 3362459874 ("" (grind-with-ext :polarity? t) (("1" (inst? 1) (("1" (skosimp) (("1" (inst?) nil nil)) nil)) nil) ("2" (inst? 1) (("2" (skolem-typepred) (("2" (inst?) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((y!1 skolem-const-decl "(extend[T, S, bool, FALSE](a!1))" extend_set_props nil) (a!1 skolem-const-decl "set[S]" extend_set_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil extend_set_props nil) (S_pred const-decl "[T -> boolean]" extend_set_props nil) (S formal-subtype-decl nil extend_set_props nil) (set type-eq-decl nil sets nil) (singleton? const-decl "bool" sets nil)) 252296 540 t shostak)) (subset_extend 0 (subset_extend-1 nil 3362459879 3362459883 ("" (grind-with-ext) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil extend_set_props nil) (S_pred const-decl "[T -> boolean]" extend_set_props nil) (S formal-subtype-decl nil extend_set_props nil) (extend const-decl "R" extend nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 4426 140 t shostak)) (union_extend 0 (union_extend-1 nil 3362459887 3362459889 ("" (grind-with-ext) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil extend_set_props nil) (member const-decl "bool" sets nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (S formal-subtype-decl nil extend_set_props nil) (S_pred const-decl "[T -> boolean]" extend_set_props nil) (union const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil)) 1462 140 t shostak)) (intersection_extend 0 (intersection_extend-1 nil 3362459893 3362459897 ("" (grind-with-ext) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil extend_set_props nil) (member const-decl "bool" sets nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (S formal-subtype-decl nil extend_set_props nil) (S_pred const-decl "[T -> boolean]" extend_set_props nil) (intersection const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil)) 3934 120 t shostak)) (difference_extend 0 (difference_extend-1 nil 3362459902 3362459903 ("" (grind-with-ext) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil extend_set_props nil) (member const-decl "bool" sets nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (S formal-subtype-decl nil extend_set_props nil) (S_pred const-decl "[T -> boolean]" extend_set_props nil) (difference const-decl "set" sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil)) 1389 130 t shostak)) (add_extend 0 (add_extend-1 nil 3362459907 3362459908 ("" (grind-with-ext) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil extend_set_props nil) (S_pred const-decl "[T -> boolean]" extend_set_props nil) (S formal-subtype-decl nil extend_set_props nil) (set type-eq-decl nil sets nil) (nonempty_extend application-judgement "(nonempty?[T])" extend_set_props nil) (member const-decl "bool" sets nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil)) 1265 120 t shostak)) (remove_extend 0 (remove_extend-1 nil 3362459912 3362459913 ("" (grind-with-ext) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil extend_set_props nil) (S_pred const-decl "[T -> boolean]" extend_set_props nil) (S formal-subtype-decl nil extend_set_props nil) (/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)) 1117 120 t shostak)))(function_image_aux (finite_image 0 (finite_image-1 nil 3249929301 3342859376 ("" (skolem-typepred) (("" (expand* "image" "is_finite") (("" (skolem!) (("" (inst + "N!1" "LAMBDA (z: ({y: R | EXISTS (x: (S!1)): y = f!1(x)})): f!2(choose({d: (S!1) | f!1(d) = z}))") (("1" (expand "injective?") (("1" (skosimp* :preds? t) (("1" (inst - "choose({d: (S!1) | f!1(d) = x1!1})" "choose({d: (S!1) | f!1(d) = x2!1})") (("1" (assert) nil nil) ("2" (expand* "nonempty?" "empty?" "member") (("2" (inst - "x!2") (("2" (assert) nil nil)) nil)) nil) ("3" (expand* "nonempty?" "empty?" "member") (("3" (inst - "x!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand* "nonempty?" "empty?" "member") (("2" (skosimp* :preds? t) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved (nil (nonempty? const-decl "bool" sets nil) nil (= const-decl "[T, T -> boolean]" equalities nil) nil (R formal-type-decl nil function_image_aux nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (choose const-decl "(p)" sets nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) nil nil (injective? const-decl "bool" functions nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (D formal-type-decl nil function_image_aux nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 264 190 t shostak)) (card_image 0 (card_image-2 nil 3250016405 3342859377 ("" (skolem!) (("" (use "injection_n_to_m_var") (("" (use "card_bij[R]") (("" (lemma "card_bij[D]" ("N" "card(S!1)" "S" "S!1")) (("" (assert) (("" (case "EXISTS (f: [(image(f!1, S!1)) -> (S!1)]): injective?(f)") (("1" (skosimp*) (("1" (lemma "composition_injective[below(card(image(f!1, S!1))), (image(f!1, S!1)), (S!1)]") (("1" (inst - "LAMBDA (x: below[card(image(f!1, S!1))]): choose({r: (image(f!1, S!1)) | f!4(r) = x})" "f!2") (("1" (lemma "composition_injective[below(card(image(f!1, S!1))), (S!1), below(card(S!1))]") (("1" (inst - "f!2 o (LAMBDA (x: below[card(image(f!1, S!1))]): choose({r: (image(f!1, S!1)) | f!4(r) = x}))" "f!3") (("1" (inst + "f!3 o (f!2 o (LAMBDA (x: below[card(image(f!1, S!1))]): choose({r: (image(f!1, S!1)) | f!4(r) = x})))") (("1" (expand "bijective?" -5) (("1" (skosimp) (("1" (expand* "nonempty?" "empty?" "member" "surjective?") (("1" (inst -7 "x!1") (("1" (skolem!) (("1" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "bijective?" -3) (("2" (flatten) nil nil)) nil) ("3" (expand "bijective?" -4) (("3" (skosimp) (("3" (expand* "nonempty?" "empty?" "member" "surjective?") (("3" (inst -6 "x!1") (("3" (skolem!) (("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "injective?" 1) (("2" (skosimp :preds? t) (("2" (typepred "choose[(image(f!1, S!1))]({r: (image[D, R](f!1, S!1)) | f!4(r) = x1!1})") (("1" (typepred "choose[(image(f!1, S!1))]({r: (image[D, R](f!1, S!1)) | f!4(r) = x2!1})") (("1" (expand "image" (-1 -3)) (("1" (skosimp*) (("1" (assert) nil nil)) nil)) nil) ("2" (expand "bijective?" -8) (("2" (flatten) (("2" (expand* "nonempty?" "empty?" "member" "surjective?") (("2" (inst -10 "x2!1") (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "bijective?" -6) (("2" (flatten) (("2" (expand* "nonempty?" "empty?" "member" "surjective?") (("2" (inst -8 "x1!1") (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "bijective?" -3) (("3" (skosimp) (("3" (expand* "nonempty?" "empty?" "member" "surjective?") (("3" (inst -5 "x!1") (("3" (skolem!) (("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "LAMBDA (r: (image(f!1, S!1))): choose({d: (S!1) | f!1(d) = r})") (("1" (expand "injective?" 1) (("1" (skosimp :preds? t) (("1" (expand "image" -) (("1" (skosimp*) (("1" (typepred "choose({d: (S!1) | f!1(d) = x1!1})") (("1" (typepred "choose({d: (S!1) | f!1(d) = x2!1})") (("1" (assert) (("1" (assert) nil nil)) nil) ("2" (expand* "nonempty?" "empty?" "member") (("2" (inst - "x!2") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand* "nonempty?" "empty?" "member") (("2" (inst - "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand* "image" "nonempty?" "empty?" "member") (("2" (skolem!) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((injection_n_to_m_var formula-decl nil nat_fun_props nil) nil (R formal-type-decl nil function_image_aux nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (D formal-type-decl nil function_image_aux nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (finite_image application-judgement "finite_set[R]" function_image_aux nil) (injective? const-decl "bool" functions nil) (composition_injective judgement-tcc nil function_props nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (member const-decl "bool" sets nil) (surjective? const-decl "bool" functions nil) (empty? const-decl "bool" sets nil) (bijective? const-decl "bool" functions nil) nil (O const-decl "T3" function_props nil) (choose const-decl "(p)" sets nil) nil (nonempty? const-decl "bool" sets nil) (below type-eq-decl nil nat_types nil) nil nil nil (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (card_bij formula-decl nil finite_sets nil)) 1119 910 t nil)) (card_injective_image 0 (card_injective_image-1 nil 3250016633 3342859378 ("" (skolem-typepred) (("" (use "card_image") (("" (lemma "injection_n_to_m_var") (("" (inst - "card(image(inj!1, S!1))" "card(S!1)") (("" (assert) (("" (case "EXISTS (f: [below(card(S!1)) -> (S!1)]): injective?(f)") (("1" (use "bij_exists[R]") (("1" (expand "bijective?") (("1" (skosimp*) (("1" (lemma "composition_injective[below(card(S!1)), (S!1), (image(inj!1, S!1))]") (("1" (inst - "f!2" "restrict[D, (S!1), R](inj!1)") (("1" (use "composition_injective[below(card(S!1)), (image(inj!1, S!1)), below(card(image(inj!1, S!1)))]") (("1" (inst?) (("1" (skolem!) (("1" (expand* "restrict" "image") (("1" (inst?) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (expand* "restrict" "image") (("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (split) (("1" (skolem!) (("1" (expand* "restrict" "image") (("1" (inst?) nil nil)) nil)) nil) ("2" (expand "restrict") (("2" (expand "injective?" (-5 1)) (("2" (skosimp) (("2" (inst - "x1!1" "x2!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "bij_exists[D]") (("2" (skolem!) (("2" (expand "bijective?") (("2" (flatten) (("2" (inst + "LAMBDA (n: below(card(S!1))): choose({d: (S!1) | f!1(d) = n})") (("1" (expand "injective?") (("1" (skosimp :preds? t) (("1" (typepred "choose({d: (S!1) | f!1(d) = x1!1})") (("1" (typepred "choose({d: (S!1) | f!1(d) = x2!1})") (("1" (assert) nil nil) ("2" (expand* "nonempty?" "empty?" "member" "surjective?") (("2" (inst -7 "x2!1") (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (expand* "nonempty?" "empty?" "member" "surjective?") (("2" (inst -5 "x1!1") (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (expand* "nonempty?" "empty?" "member" "surjective?") (("2" (inst -3 "n!1") (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((card_image formula-decl nil function_image_aux nil) (finite_image application-judgement "finite_set[R]" function_image_aux nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) nil (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (composition_injective judgement-tcc nil function_props nil) (O const-decl "T3" function_props nil) nil (restrict const-decl "R" restrict nil) nil (AND const-decl "[bool, bool -> bool]" booleans nil) nil nil (restrict_of_inj_is_inj application-judgement "(injective?[S, R])" restrict nil) (bij_exists formula-decl nil finite_sets nil) (empty? const-decl "bool" sets nil) (surjective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (choose const-decl "(p)" sets nil) nil (nonempty? const-decl "bool" sets nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (injection_n_to_m_var formula-decl nil nat_fun_props nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (injective? const-decl "bool" functions nil) (R formal-type-decl nil function_image_aux nil) (D formal-type-decl nil function_image_aux nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 775 640 t shostak)) (bijective_image_TCC1 0 (bijective_image_TCC1-1 nil 3249929500 3342859378 ("" (expand* "fullset" "image") (("" (skosimp*) (("" (inst?) nil nil)) nil)) nil) proved ((D formal-type-decl nil function_image_aux nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (fullset const-decl "set" sets nil) nil) 21 20 t shostak)) (bijective_image 0 (bijective_image-1 nil 3249929533 3342859378 ("" (skolem-typepred) (("" (expand* "bijective?" "injective?" "surjective?") (("" (smash) (("" (skolem-typepred) (("" (expand* "fullset" "image") (("" (skolem!) (("" (inst?) (("" (inst? +) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (set type-eq-decl nil sets nil) nil (fullset const-decl "set" sets nil) (TRUE const-decl "bool" booleans nil) (injective? const-decl "bool" functions nil) (R formal-type-decl nil function_image_aux nil) (D formal-type-decl nil function_image_aux nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 95 60 t shostak)))(function_iterate (iterate_TCC1 0 (iterate_TCC1-1 nil 3237052399 3342859378 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 66 60 nil nil)) (iterate_TCC2 0 (iterate_TCC2-1 nil 3237052399 3342859378 ("" (tcc :defs !) nil nil) proved nil 10 10 nil nil)) (iterate_add 0 (iterate_add-1 nil 3237052399 3342859379 ("" (induct "m") (("1" (skosimp) (("1" (expand "iterate" 1 1) (("1" (expand "o") (("1" (apply-extensionality) nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (expand "iterate" 1 1) (("2" (expand "iterate" 1 3) (("2" (inst -1 "f!1" "n!1") (("2" (expand "o") (("2" (apply-extensionality) (("2" (replace -1 :dir rl) (("2" (beta) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (iterate def-decl "T" function_iterate nil) (O const-decl "T3" function_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (T formal-type-decl nil function_iterate nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil)) 479 430 nil nil)) (iterate_add_applied 0 (iterate_add_applied-1 nil 3237052399 3342859379 ("" (induct-and-simplify "m") nil nil) proved ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil function_iterate nil) (= const-decl "[T, T -> boolean]" equalities nil) (iterate def-decl "T" function_iterate nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat_induction formula-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 635 580 nil nil)) (iterate_add_one 0 (iterate_add_one-1 nil 3237052399 3342859380 ("" (induct-and-simplify "n") nil nil) proved ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (T formal-type-decl nil function_iterate nil) (= const-decl "[T, T -> boolean]" equalities nil) (iterate def-decl "T" function_iterate nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat_induction formula-decl nil naturalnumbers nil) (odd_minus_odd_is_even application-judgement "even_int" integers nil) (even_plus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 507 460 nil nil)) (iterate_mult 0 (iterate_mult-1 nil 3237052399 3342859381 ("" (induct "m") (("1" (induct "n") (("1" (skosimp) (("1" (expand "iterate") (("1" (propax) nil nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (inst?) (("2" (expand "iterate" 1 1) (("2" (apply-extensionality) (("2" (replace -1) (("2" (expand "iterate" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (induct "n" :name "NAT_induction") (("2" (skosimp) (("2" (skosimp) (("2" (case "j!2 = 0") (("1" (replace -1) (("1" (expand "iterate" 1 1) (("1" (expand "iterate" 1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (expand "iterate" 2 1) (("2" (expand "iterate" 2 4) (("2" (apply-extensionality 2) (("2" (hide 3) (("2" (inst-cp -1 "j!2-1") (("2" (assert) (("2" (inst? -2) (("2" (replace -2) (("2" (lemma "iterate_add") (("2" (inst -1 "f!1" "1+j!1" "-1 - j!1 + j!1 * j!2 + j!2") (("1" (expand "o") (("1" (case "iterate(f!1, 1 + j!1)(iterate(f!1, -1 - j!1 + j!1 * j!2 + j!2)(x!1)) = iterate(f!1, j!1 * j!2 + j!2)(x!1)") (("1" (hide -2) (("1" (replace -1) (("1" (expand "iterate" 1 1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (replace -1 :dir rl) (("2" (beta) (("2" (propax) nil nil)) nil)) nil) ("3" (hide -1 -2 -3 -4 2) (("3" (case "j!1 * j!2 >= j!1") (("1" (assert) nil nil) ("2" (assert) (("2" (case "j!1 = 0") (("1" (assert) nil nil) ("2" (lemma "div_mult_pos_ge2") (("2" (inst -1 "j!1" "j!2" "j!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (case "j!1 * j!2 >= j!1") (("1" (assert) nil nil) ("2" (lemma "div_mult_pos_ge2") (("2" (inst -1 "j!1" "j!2" "j!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (- const-decl "[numfield -> numfield]" number_fields nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posreal nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (div_mult_pos_ge2 formula-decl nil real_props nil) (O const-decl "T3" function_props nil) (iterate_add formula-decl nil function_iterate nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) nil (- const-decl "[numfield, numfield -> numfield]" number_fields nil) nil (IF const-decl "[boolean, T, T -> T]" if_def nil) (NAT_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nat_induction formula-decl nil naturalnumbers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (iterate def-decl "T" function_iterate nil) (= const-decl "[T, T -> boolean]" equalities nil) (T formal-type-decl nil function_iterate nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) 1493 1350 nil nil)) (iterate_invariant 0 (iterate_invariant-1 nil 3237052399 3342859382 ("" (induct "n") (("1" (skosimp*) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) proved ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (nat_induction formula-decl nil naturalnumbers nil) (iterate def-decl "T" function_iterate nil) (= const-decl "[T, T -> boolean]" equalities nil) (T formal-type-decl nil function_iterate nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 140 90 nil nil)))(sequences (insert_TCC1 0 (insert_TCC1-1 nil 3237052399 3342859382 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 105 90 nil nil)) (insert_delete 0 (insert_delete-1 nil 3237052399 3342859382 ("" (skolem 1 ("n!1" "seq!1")) (("" (expand "insert") (("" (apply-extensionality 1) (("1" (delete 2) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (expand "delete") (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split) (("1" (flatten) (("1" (expand "nth") (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (expand "delete") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (apply-extensionality 4) nil nil)) nil)) nil)) nil)) nil) proved ((insert const-decl "sequence" sequences nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) nil (= const-decl "[T, T -> boolean]" equalities nil) (NOT const-decl "[bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (sequence type-eq-decl nil sequences nil) (delete const-decl "sequence" sequences nil) (nth const-decl "T" sequences nil) (T formal-type-decl nil sequences nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 293 260 nil nil)) (add_first_rest 0 (add_first_rest-1 nil 3237052399 3342859382 ("" (skolem 1 ("seq!1")) (("" (expand "add") (("" (expand "insert") (("" (apply-extensionality 1) (("1" (delete 2) (("1" (lift-if) (("1" (prop) (("1" (expand "first") (("1" (expand "nth") (("1" (assert) nil nil)) nil)) nil) ("2" (expand "rest") (("2" (expand "suffix") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (apply-extensionality 3) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((add const-decl "sequence" sequences nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (T formal-type-decl nil sequences nil) (rest const-decl "sequence" sequences nil) (first const-decl "T" sequences nil) (sequence type-eq-decl nil sequences nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil) (suffix const-decl "sequence" sequences nil) (nth const-decl "T" sequences nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (insert const-decl "sequence" sequences nil)) 179 150 nil nil)) (sequence_induction 0 (sequence_induction-1 nil 3237052399 3342859382 ("" (lemma "nat_induction") (("" (skosimp) (("" (inst -1 "(lambda (n:nat): p!1(nth(seq!1, n)))") (("" (assert) (("" (split) (("1" (assert) (("1" (expand "every") (("1" (propax) nil nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved (nil (nth const-decl "T" sequences nil) (sequence type-eq-decl nil sequences nil) (T formal-type-decl nil sequences nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nat_induction formula-decl nil naturalnumbers nil)) 44 40 nil nil)))(seq_functions)(finite_sequences (empty_seq_TCC1 0 (empty_seq_TCC1-1 nil 3237052399 3342859382 ("" (existence-tcc) nil nil) proved nil 16 20 nil nil)) (oh_TCC1 0 (oh_TCC1-1 nil 3237052399 3342859382 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (nonneg_int nonempty-type-eq-decl nil integers nil)) 115 70 nil nil)) (oh_TCC2 0 (oh_TCC2-1 nil 3237052399 3342859383 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 353 320 nil nil)) (caret_TCC1 0 (caret_TCC1-1 nil 3237052399 3342859383 ("" (grind :if-match nil) nil nil) proved ((int_minus_int_is_int application-judgement "int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (finseq type-eq-decl nil finite_sequences nil) (T formal-type-decl nil finite_sequences nil) (below type-eq-decl nil nat_types nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 522 480 nil nil)) (caret_TCC2 0 (caret_TCC2-1 nil 3237052399 3342859384 ("" (tcc :defs explicit) nil nil) proved ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 276 260 nil nil)) (caret_TCC3 0 (caret_TCC3-1 nil 3237052399 3342859384 ("" (skosimp) (("" (beta) (("" (lift-if) (("" (assert) (("" (ground) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 457 430 nil nil)) (extract1_TCC1 0 (extract1_TCC1-1 nil 3237052399 3342859384 ("" (tcc :defs !) nil nil) proved nil 6 10 nil nil)) (o_assoc 0 (o_assoc-1 nil 3237052399 3342859386 ("" (skosimp) (("" (expand "o") (("" (apply-extensionality) (("1" (hide 2) (("1" (lift-if) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp) (("2" (assert) nil nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp) (("4" (assert) nil nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp) (("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (O const-decl "finseq" finite_sequences nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil nil nil (IF const-decl "[boolean, T, T -> T]" if_def nil) (finseq type-eq-decl nil finite_sequences nil) (T formal-type-decl nil finite_sequences nil) (below type-eq-decl nil nat_types nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 2200 2020 nil nil)))(ordstruct)(ordinals (lessp_TCC1 0 (lessp_TCC1-1 nil 3237052399 3342859387 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (reduce adt-def-decl "[ordstruct -> range]" ordstruct_adt_reduce nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (size const-decl "[ordstruct -> nat]" ordinals nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 435 390 nil nil)) (lessp_TCC2 0 (lessp_TCC2-1 nil 3237052399 3342859387 ("" (skosimp*) (("" (replace -1) (("" (expand "size") (("" (expand "reduce" 3 2) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (reduce adt-def-decl "[ordstruct -> range]" ordstruct_adt_reduce nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (size const-decl "[ordstruct -> nat]" ordinals nil)) 380 330 nil nil)) (ordinal?_TCC1 0 (ordinal?_TCC1-1 nil 3237052399 3342859388 ("" (skosimp*) (("" (replace -1) (("" (expand "size") (("" (expand "reduce" 1 2) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (reduce adt-def-decl "[ordstruct -> range]" ordstruct_adt_reduce nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (size const-decl "[ordstruct -> nat]" ordinals nil)) 343 320 nil nil)) (ordinal?_TCC2 0 (ordinal?_TCC2-1 nil 3237052399 3342859388 ("" (skosimp*) (("" (replace -2) (("" (expand "size") (("" (expand "reduce" 1 2) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (reduce adt-def-decl "[ordstruct -> range]" ordstruct_adt_reduce nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (size const-decl "[ordstruct -> nat]" ordinals nil)) 346 320 t nil)) (ordinal_TCC1 0 (ordinal_TCC1-1 nil 3237052399 3342859388 ("" (inst 1 "zero") (("" (assert) (("" (expand "ordinal?") (("" (propax) nil nil)) nil)) nil)) nil) proved ((zero adt-constructor-decl "(zero?)" ordstruct_adt nil) (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt nil) (ordinal? def-decl "bool" ordinals nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (ordstruct type-decl nil ordstruct_adt nil)) 12 10 nil nil)) (ordinal_irreflexive 0 (ordinal_irreflexive-1 nil 3237052399 3342859388 ("" (induct "r") (("1" (assert) nil nil) ("2" (flatten) (("2" (expand "<") (("2" (propax) nil nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) (("3" (expand "<" -4) (("3" (split -4) (("1" (assert) (("1" (expand "ordinal?" -3) (("1" (propax) nil nil)) nil)) nil) ("2" (expand "ordinal?" -4) (("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((ordinal nonempty-type-eq-decl nil ordinals nil) (ordstruct_induction formula-decl nil ordstruct_adt nil) (< def-decl "bool" ordinals nil) (NOT const-decl "[bool -> bool]" booleans nil) (ordinal? def-decl "bool" ordinals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (ordstruct type-decl nil ordstruct_adt nil)) 77 60 nil nil)) (ordinal_antisym 0 (ordinal_antisym-1 nil 3237052399 3342859388 ("" (induct "r") (("1" (assert) nil nil) ("2" (flatten) (("2" (skosimp*) (("2" (expand "<") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (induct "s") (("1" (assert) nil nil) ("2" (flatten) (("2" (expand "<" -2) (("2" (propax) nil nil)) nil)) nil) ("3" (skosimp) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (expand "<" -6) (("3" (split -6) (("1" (inst -8 "add2_var!2") (("1" (assert) (("1" (expand "<" -7) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "<" -8) (("2" (assert) (("2" (replace -1) (("2" (lemma "ordinal_irreflexive") (("2" (inst -1 "add2_var!2") nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (expand "<" -9) (("3" (replace -1) (("3" (replace -2) (("3" (lemma "ordinal_irreflexive") (("3" (inst-cp -1 "add2_var!2") (("3" (assert) (("3" (inst -12 "add3_var!2") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonzero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt nil) (add adt-constructor-decl "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt nil) (ordinal_irreflexive formula-decl nil ordinals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (ordstruct_induction formula-decl nil ordstruct_adt nil) (NOT const-decl "[bool -> bool]" booleans nil) (< def-decl "bool" ordinals nil) (ordinal nonempty-type-eq-decl nil ordinals nil) (ordinal? def-decl "bool" ordinals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (ordstruct type-decl nil ordstruct_adt nil)) 293 220 nil nil)) (ordinal_antisymmetric 0 (ordinal_antisymmetric-1 nil 3237052399 3342859388 ("" (skosimp) (("" (expand "<=") (("" (split) (("1" (split) (("1" (lemma "ordinal_antisym") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil) proved ((<= const-decl "bool" ordinals nil) (ordstruct type-decl nil ordstruct_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (ordinal? def-decl "bool" ordinals nil) (ordinal nonempty-type-eq-decl nil ordinals nil) (ordinal_antisym formula-decl nil ordinals nil)) 20 20 nil nil)) (ordinal_transitive 0 (ordinal_transitive-1 nil 3237052399 3342859389 ("" (induct "s") (("1" (assert) nil nil) ("2" (flatten) (("2" (skosimp) (("2" (expand "<" -2) (("2" (lift-if -2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (skosimp) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (hide -3 -4) (("3" (skosimp) (("3" (expand "<" -4) (("3" (lift-if) (("3" (split -4) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (expand "<" -5) (("2" (lift-if) (("2" (split) (("1" (split) (("1" (flatten) (("1" (expand "<" 2) (("1" (assert) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (expand "<" 3) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split) (("1" (assert) (("1" (prop) (("1" (assert) (("1" (expand "<" 4) (("1" (flatten) (("1" (assert) (("1" (inst -4 "exp(r!1)" "exp(t!1)") (("1" (assert) nil nil) ("2" (assert) (("2" (typepred "t!1") (("2" (expand "ordinal?" -1) (("2" (propax) nil nil)) nil)) nil)) nil) ("3" (typepred "r!1") (("3" (expand "ordinal?" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "<" 4) (("2" (assert) nil nil)) nil) ("3" (expand "<" 4) (("3" (assert) nil nil)) nil) ("4" (expand "<" 5) (("4" (assert) (("4" (inst -4 "exp(r!1)" "exp(t!1)") (("1" (assert) nil nil) ("2" (typepred "t!1") (("2" (expand "ordinal?" -1) (("2" (assert) nil nil)) nil)) nil) ("3" (typepred "r!1") (("3" (expand "ordinal?" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (expand "<" 5) (("5" (assert) nil nil)) nil) ("6" (expand "<" 5) (("6" (assert) nil nil)) nil)) nil)) nil) ("2" (split -5) (("1" (propax) nil nil) ("2" (flatten) (("2" (hide -6) (("2" (prop) (("1" (assert) (("1" (expand "<" 4) (("1" (propax) nil nil)) nil)) nil) ("2" (expand "<" 4) (("2" (assert) nil nil)) nil) ("3" (expand "<" 4) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "<" 3) (("3" (assert) (("3" (hide -4) (("3" (split -4) (("1" (propax) nil nil) ("2" (flatten) (("2" (assert) (("2" (flatten) (("2" (assert) (("2" (split -1) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (assert) (("2" (inst -8 "rest(r!1)" "rest(t!1)") (("1" (assert) nil nil) ("2" (typepred "t!1") (("2" (expand "ordinal?" -1) (("2" (assert) nil nil)) nil)) nil) ("3" (typepred "r!1") (("3" (expand "ordinal?" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) nil nil (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt nil) (nonzero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt nil) (ordstruct_induction formula-decl nil ordstruct_adt nil) (< def-decl "bool" ordinals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (ordinal nonempty-type-eq-decl nil ordinals nil) (ordinal? def-decl "bool" ordinals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (ordstruct type-decl nil ordstruct_adt nil)) 767 660 nil nil)) (ordinal_trichotomy 0 (ordinal_trichotomy-1 nil 3237052399 3342859390 ("" (induct "r") (("1" (assert) nil nil) ("2" (flatten) (("2" (induct "s") (("1" (assert) nil nil) ("2" (skosimp) (("2" (expand "ordinal?" -3) (("2" (flatten) (("2" (assert) (("2" (expand "<" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skosimp) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (induct "s") (("1" (assert) nil nil) ("2" (flatten) (("2" (expand "<" 3) (("2" (propax) nil nil)) nil)) nil) ("3" (skosimp) (("3" (assert) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (expand "<" 1) (("3" (flatten) (("3" (expand "<" 5) (("3" (flatten) (("3" (inst -6 "add2_var!2") (("3" (assert) (("3" (replace -6) (("3" (assert) (("3" (hide -3 -4 1 5) (("3" (hide -6 -7) (("3" (inst -5 "add3_var!2") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonzero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt nil) (add adt-constructor-decl "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (zero adt-constructor-decl "(zero?)" ordstruct_adt nil) (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt nil) (ordstruct_induction formula-decl nil ordstruct_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (< def-decl "bool" ordinals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (ordinal nonempty-type-eq-decl nil ordinals nil) (ordinal? def-decl "bool" ordinals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (ordstruct type-decl nil ordstruct_adt nil)) 320 240 nil nil)) (well_founded_le 0 (well_founded_le-1 nil 3237052399 3342859390 ("" (expand "well_founded?") (("" (lemma "ordinal_induction") (("" (skosimp) (("" (skosimp) (("" (inst -1 "LAMBDA (x:ordinal): NOT p!1(x)") (("" (split) (("1" (inst -1 "y!1") nil nil) ("2" (skosimp) (("2" (inst 1 "r!1") (("2" (skosimp) (("2" (inst -1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((ordinal_induction formula-decl nil ordinals nil) nil nil (NOT const-decl "[bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (ordinal nonempty-type-eq-decl nil ordinals nil) (ordinal? def-decl "bool" ordinals nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (ordstruct type-decl nil ordstruct_adt nil) (well_founded? const-decl "bool" orders nil)) 59 50 nil nil)))(lex2 (lex2_TCC1 0 (lex2_TCC1-1 nil 3237052399 3342859390 ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved ((ordinal? def-decl "bool" ordinals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 60 50 nil nil)) (lex2_TCC2 0 (lex2_TCC2-1 nil 3237052399 3342859390 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 56 40 nil nil)) (lex2_TCC3 0 (lex2_TCC3-1 nil 3237052399 3342859390 ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved ((ordinal? def-decl "bool" ordinals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 88 70 nil nil)) (lex2_TCC4 0 (lex2_TCC4-1 nil 3237052399 3342859390 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 41 40 nil nil)) (lex2_TCC5 0 (lex2_TCC5-1 nil 3237052399 3342859390 ("" (grind) nil nil) proved ((ordinal? def-decl "bool" ordinals nil)) 17 20 nil nil)) (lex2_TCC6 0 (lex2_TCC6-1 nil 3237052399 3342859390 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 56 50 nil nil)) (lex2_TCC7 0 (lex2_TCC7-1 nil 3237052399 3342859390 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 44 40 nil nil)) (lex2_TCC8 0 (lex2_TCC8-1 nil 3237052399 3342859390 ("" (grind) nil nil) proved ((ordinal? def-decl "bool" ordinals nil) (< def-decl "bool" ordinals nil)) 21 20 nil nil)) (lex2_lt 0 (lex2_lt-1 nil 3237052399 3342859391 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (< def-decl "bool" ordinals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lex2 const-decl "ordinal" lex2 nil)) 1022 900 nil nil)))(list)(list_props (length_TCC1 0 (length_TCC1-1 nil 3237052399 3342859392 ("" (tcc :defs !) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (reduce_nat adt-def-decl "[list -> nat]" list_adt nil)) 351 330 nil nil)) (member_TCC1 0 (member_TCC1-1 nil 3237052399 3342859392 ("" (tcc :defs !) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil)) 198 180 nil nil)) (member_null 0 (member_null-1 nil 3237052399 3342859392 ("" (grind :if-match nil) nil nil) proved ((member def-decl "bool" list_props nil)) 56 30 nil nil)) (nth_TCC1 0 (nth_TCC1-1 nil 3237052399 3342859392 ("" (skosimp) (("" (typepred "n!1") (("" (expand "length") (("" (assert) nil nil)) nil)) nil)) nil) proved ((below type-eq-decl nil nat_types nil) (length def-decl "nat" list_props nil) (list type-decl nil list_adt nil) (T formal-type-decl nil list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 23 20 nil nil)) (nth_TCC2 0 (nth_TCC2-1 nil 3237052399 3342859392 ("" (skosimp) (("" (typepred "n!1") (("" (expand "length") (("" (assert) nil nil)) nil)) nil)) nil) proved ((below type-eq-decl nil nat_types nil) (length def-decl "nat" list_props nil) (list type-decl nil list_adt nil) (T formal-type-decl nil list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 24 30 nil nil)) (nth_TCC3 0 (nth_TCC3-1 nil 3237052399 3342859393 ("" (induct "l") (("1" (skosimp*) (("1" (typepred "n!1") (("1" (expand "length") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) (("2" (typepred "n!1") (("2" (expand "length" -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) (("3" (typepred "n!1") (("3" (expand "length" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list_induction formula-decl nil list_adt nil) (T formal-type-decl nil list_props nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (below type-eq-decl nil nat_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (int_minus_int_is_int application-judgement "int" integers nil)) 561 480 nil nil)) (nth_TCC4 0 (nth_TCC4-1 nil 3237052399 3342859393 ("" (induct "l") (("1" (skosimp*) (("1" (typepred "n!1") (("1" (expand "length") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "length" 2 2) (("2" (assert) (("2" (expand "<") (("2" (expand "restrict") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (typepred "n!1") (("3" (expand "length" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list_induction formula-decl nil list_adt nil) (T formal-type-decl nil list_props nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (below type-eq-decl nil nat_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)) 431 380 t nil)) (append_TCC1 0 (append_TCC1-1 nil 3237052399 3342859393 ("" (tcc :defs !) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil)) 190 180 nil nil)) (append_null 0 (append_null-1 nil 3237052399 3342859393 ("" (induct "l") (("1" (grind) nil nil) ("2" (skosimp) (("2" (expand "append" +) (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((list_induction formula-decl nil list_adt nil) (T formal-type-decl nil list_props nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (append def-decl "list[T]" list_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil)) 37 30 nil nil)) (append_assoc 0 (append_assoc-1 nil 3237052399 3342859393 ("" (induct-and-simplify "l1") nil nil) proved ((list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (append def-decl "list[T]" list_props nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil)) 132 110 nil nil)) (reverse_append 0 (reverse_append-1 nil 3237052399 3342859394 ("" (induct-and-simplify "l1") (("1" (rewrite "append_null") nil nil) ("2" (replace -1) (("2" (rewrite "append_assoc" :dir rl) nil nil)) nil)) nil) proved ((null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (append_assoc formula-decl nil list_props nil) (append_null formula-decl nil list_props nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (reverse def-decl "list[T]" list_props nil) (append def-decl "list[T]" list_props nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil)) 191 150 nil nil)) (reverse_reverse 0 (reverse_reverse-1 nil 3237052399 3342859394 ("" (induct "l") (("1" (grind) nil nil) ("2" (skosimp) (("2" (expand "reverse" 1 2) (("2" (rewrite "reverse_append") (("2" (expand "reverse" 1 1) (("2" (replace -1) (("2" (expand "reverse" 1 1) (("2" (expand "append" 1 2) (("2" (expand "append" 1 1) (("2" (expand "append" 1 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((reverse_append formula-decl nil list_props nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (append def-decl "list[T]" list_props nil) (list_induction formula-decl nil list_adt nil) (T formal-type-decl nil list_props nil) (reverse def-decl "list[T]" list_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil)) 80 60 nil nil)) (length_append 0 (length_append-1 nil 3237052399 3342859394 ("" (induct-and-simplify "l1") nil nil) proved ((list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (append def-decl "list[T]" list_props nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 448 400 nil nil)) (length_reverse 0 (length_reverse-1 nil 3237052399 3342859395 ("" (induct-and-simplify "l") (("" (rewrite "length_append") (("" (assert) nil nil)) nil)) nil) proved ((null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (length_append formula-decl nil list_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (reverse def-decl "list[T]" list_props nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil)) 466 430 nil nil)) (list_rep 0 (list_rep-1 nil 3237052399 3342859395 ("" (assert) nil nil) proved nil 6 0 nil nil)) (every_append 0 (every_append-1 nil 3237052399 3342859395 ("" (induct-and-simplify "l1") nil nil) proved ((list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) nil (append def-decl "list[T]" list_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil)) 176 150 nil nil)) (every_disjunct1 0 (every_disjunct1-1 nil 3237052399 3342859395 ("" (induct-and-simplify "l") nil nil) proved ((list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil (OR const-decl "[bool, bool -> bool]" booleans nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil)) 114 100 nil nil)) (every_disjunct2 0 (every_disjunct2-1 nil 3237052399 3342859395 ("" (induct-and-simplify "l") nil nil) proved ((list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil (OR const-decl "[bool, bool -> bool]" booleans nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil)) 130 100 nil nil)) (every_conjunct 0 (every_conjunct-1 nil 3237052399 3342859395 ("" (induct-and-simplify "l") nil nil) proved ((list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil (AND const-decl "[bool, bool -> bool]" booleans nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil)) 139 120 nil nil)) (every_member 0 (every_member-1 nil 3237052399 3342859395 ("" (induct-and-simplify "l") (("" (rewrite "every_disjunct2") nil nil)) nil) proved ((every_disjunct2 formula-decl nil list_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) nil (member def-decl "bool" list_props nil) (T formal-type-decl nil list_props nil) (list_induction formula-decl nil list_adt nil)) 91 80 nil nil)))(map_props (map_list_composition 0 (map_list_composition-1 nil 3237052399 3342859396 ("" (induct "l") (("1" (skosimp) (("1" (expand "map") (("1" (propax) nil nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (inst?) (("2" (expand "map" +) (("2" (replace -1) (("2" (expand "o" 1 2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((list_induction formula-decl nil list_adt nil) (T1 formal-type-decl nil map_props nil) (O const-decl "T3" function_props nil) nil (= const-decl "[T, T -> boolean]" equalities nil) (T3 formal-type-decl nil map_props nil) (T2 formal-type-decl nil map_props nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil)) 124 90 nil nil)) (map_seq_composition 0 (map_seq_composition-1 nil 3237052399 3342859396 ("" (skosimp) (("" (expand "map") (("" (apply-extensionality) (("" (hide 2) (("" (expand "o") (("" (case "nth((LAMBDA (n: nat): f1!1(nth(s!1, n))), x!1) = f1!1(nth(s!1, x!1))") (("1" (replace -1) (("1" (propax) nil nil)) nil) ("2" (hide 2) (("2" (expand "nth" 1 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved (nil (= const-decl "[T, T -> boolean]" equalities nil) (T2 formal-type-decl nil map_props nil) (sequence type-eq-decl nil sequences nil) (nth const-decl "T" sequences nil) (T1 formal-type-decl nil map_props nil) (O const-decl "T3" function_props nil) (T3 formal-type-decl nil map_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 106 80 nil nil)))(more_map_props (map_length 0 (map_length-1 nil 3332188055 3342859396 ("" (induct "l") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "length" +) (("2" (expand "map" 1) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil) proved ((list_induction formula-decl nil list_adt nil) (T1 formal-type-decl nil more_map_props nil) nil (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (T2 formal-type-decl nil more_map_props nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil)) 101 90 t shostak)))(filters (filter_TCC1 0 (filter_TCC1-1 nil 3237052399 3342859396 ("" (tcc :defs !) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil)) 199 180 nil nil)) (filter_TCC2 0 (filter_TCC2-1 nil 3237052399 3342859396 ("" (skosimp) (("" (replace -1) (("" (expand "length" 2 2) (("" (expand "<") (("" (assert) (("" (expand "restrict") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (length def-decl "nat" list_props nil)) 257 250 t nil)))(list2finseq (finseq2list_rec_TCC1 0 (finseq2list_rec_TCC1-1 nil 3237052399 3342859397 ("" (tcc :defs explicit) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (T formal-type-decl nil list2finseq nil) (finseq type-eq-decl nil finite_sequences nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 168 150 nil nil)) (finseq2list_rec_TCC2 0 (finseq2list_rec_TCC2-1 nil 3237052399 3342859397 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (T formal-type-decl nil list2finseq nil) (finseq type-eq-decl nil finite_sequences nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 91 90 nil nil)) (finseq2list_rec_TCC3 0 (finseq2list_rec_TCC3-1 nil 3237052399 3342859397 ("" (tcc :defs !) nil nil) proved nil 30 20 nil nil)) (finseq2list_TCC1 0 (finseq2list_TCC1-1 nil 3237052399 3342859397 ("" (tcc :defs explicit) nil nil) proved nil 6 10 nil nil)))(list2set (list2set_TCC1 0 (list2set_TCC1-1 nil 3237052399 3342859397 ("" (tcc :defs !) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil)) 179 170 nil nil)))(disjointness (pairwise_disjoint?_TCC1 0 (pairwise_disjoint?_TCC1-1 nil 3237052399 3342859397 ("" (termination-tcc) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil)) 211 180 nil nil)))(character)(strings (fseq_lem 0 (fseq_lem-1 nil 3237052399 3342859399 ("" (induct "l1") (("1" (induct "l2") (("1" (grind) nil nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (inst -1 "cdr(l2!1)") (("1" (iff) (("1" (prop) (("1" (assert) (("1" (apply-extensionality) (("1" (expand "list2finseq" -1) (("1" (flatten) (("1" (decompose-equality -2) (("1" (inst -1 "0") (("1" (expand "nth") (("1" (propax) nil nil)) nil) ("2" (expand "length" 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "list2finseq" -1) (("2" (flatten) (("2" (expand "length" -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (expand "list2finseq" -1) (("3" (expand "list2finseq" 3) (("3" (flatten) (("3" (split) (("1" (expand "length" -1) (("1" (assert) (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (apply-extensionality) (("1" (decompose-equality -2) (("1" (inst -1 "x!1+1") (("1" (expand "nth" -1) (("1" (propax) nil nil)) nil) ("2" (assert) (("2" (expand "length" 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (expand "length" -1) (("2" (lift-if) (("2" (split -1) (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skosimp) (("3" (expand "length" -1) (("3" (lift-if) (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (expand "length" -1) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (assert) nil nil)) nil)) nil) ("2" (iff) (("2" (prop) (("1" (expand "list2finseq") (("1" (flatten) (("1" (expand "length" -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (list_cons_extensionality formula-decl nil list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) nil nil (nth def-decl "T" list_props nil) (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) nil (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (list_induction formula-decl nil list_adt nil) (character type-decl nil character_adt nil) (boolean nonempty-type-decl nil booleans nil) (char? adt-recognizer-decl "[character -> boolean]" character_adt nil) (char type-eq-decl nil strings nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (finseq type-eq-decl nil finite_sequences nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (list type-decl nil list_adt nil)) 1645 1470 nil nil)) (cons_lem 0 (cons_lem-1 nil 3237052399 3342859399 ("" (grind :if-match nil) (("1" (decompose-equality -) nil nil) ("2" (decompose-equality -) nil nil)) nil) proved ((AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (list type-decl nil list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (character type-decl nil character_adt nil) (char? adt-recognizer-decl "[character -> boolean]" character_adt nil) (char type-eq-decl nil strings nil)) 144 100 t nil)) (char_lem 0 (char_lem-1 nil 3237052399 3342859399 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) nil nil)) nil) proved ((character_char_extensionality formula-decl nil character_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (character type-decl nil character_adt nil) (char? adt-recognizer-decl "[character -> boolean]" character_adt nil) (char type-eq-decl nil strings nil)) 58 60 nil nil)))(lift)(union)(mucalculus (lfp_induction 0 (lfp_induction-1 nil 3252401360 3342859399 ("" (grind :if-match nil) (("" (inst -3 "p!1") (("" (assert) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil mucalculus nil) (pred type-eq-decl nil defined_types nil) (predicate_transformer type-eq-decl nil mucalculus nil) (monotonic? const-decl "bool" mucalculus nil) (glb const-decl "pred[T]" mucalculus nil) (member const-decl "bool" sets nil) (lfp const-decl "pred[T]" mucalculus nil) (<= const-decl "bool" mucalculus nil)) 113 90 t shostak)) (gfp_induction 0 (gfp_induction-1 nil 3252401454 3342859399 ("" (grind :if-match nil) (("" (inst 1 "p!1") (("" (assert) nil nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil mucalculus nil) (pred type-eq-decl nil defined_types nil) (predicate_transformer type-eq-decl nil mucalculus nil) (monotonic? const-decl "bool" mucalculus nil) (lub const-decl "pred[T]" mucalculus nil) (member const-decl "bool" sets nil) (gfp const-decl "pred[T]" mucalculus nil) (<= const-decl "bool" mucalculus nil)) 108 90 t shostak)))(ctlops (EG_TCC1 0 (EG_TCC1-1 nil 3242699046 3342859400 ("" (grind) nil nil) proved ((state formal-type-decl nil ctlops nil) (EX const-decl "bool" ctlops nil) (<= const-decl "bool" mucalculus nil) (monotonic? const-decl "bool" mucalculus nil)) 141 100 t shostak)) (EU_TCC1 0 (EU_TCC1-1 nil 3242699046 3342859400 ("" (grind :if-match nil) (("" (inst 2 "v!1") (("" (assert) (("" (inst -1 "v!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((state formal-type-decl nil ctlops nil) (monotonic? const-decl "bool" mucalculus nil) (<= const-decl "bool" mucalculus nil) (EX const-decl "bool" ctlops nil)) 146 120 t shostak)))(fairctlops (fairEG_TCC1 0 (fairEG_TCC1-1 nil 3242699046 3342859400 ("" (grind :if-match nil) (("" (inst -2 "p!1") (("" (assert) (("" (skosimp*) (("" (prop) (("1" (skosimp*) (("1" (inst -6 "s!2") (("1" (assert) (("1" (flatten) (("1" (inst -5 "v!1") (("1" (inst 2 "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -5 "s!2") (("2" (assert) (("2" (flatten) (("2" (inst 3 "v!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((pred type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (state formal-type-decl nil fairctlops nil) (monotonic? const-decl "bool" mucalculus nil) (glb const-decl "pred[T]" mucalculus nil) (member const-decl "bool" sets nil) (EU const-decl "pred[state]" ctlops nil) (mu const-decl "pred[T]" mucalculus nil) (lfp const-decl "pred[T]" mucalculus nil) (<= const-decl "bool" mucalculus nil) (EX const-decl "bool" ctlops nil)) 361 290 t shostak)))(Fairctlops (CheckFair_TCC1 0 (CheckFair_TCC1-1 nil 3237052399 3342859400 ("" (termination-tcc) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil)) 236 200 nil nil)) (FairEG_TCC1 0 (FairEG_TCC1-1 nil 3242699046 3342859401 ("" (induct "Fflist") (("1" (grind) nil nil) ("2" (grind :if-match nil) (("2" (inst -3 "p!1") (("2" (assert) (("2" (skosimp*) (("2" (inst -4 "s!2") (("2" (assert) (("2" (flatten) (("2" (prop) (("2" (skosimp*) (("2" (inst -5 "N!1" "f!1") (("2" (inst -5 "p1!1" "p2!1") (("2" (assert) (("2" (replace -6) (("2" (inst -5 "v!1") (("2" (assert) (("2" (inst 2 "v!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((EX const-decl "bool" ctlops nil) (lfp const-decl "pred[T]" mucalculus nil) (mu const-decl "pred[T]" mucalculus nil) (EU const-decl "pred[state]" ctlops nil) (member const-decl "bool" sets nil) (glb const-decl "pred[T]" mucalculus nil) (<= const-decl "bool" mucalculus nil) (list_induction formula-decl nil list_adt nil) (state formal-type-decl nil Fairctlops nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (CheckFair def-decl "pred[state]" Fairctlops nil) (monotonic? const-decl "bool" mucalculus nil) (predicate_transformer type-eq-decl nil mucalculus nil) (list type-decl nil list_adt nil)) 595 510 t shostak)))(bit (bit_cases 0 (bit_cases-1 nil 3242701078 3342859401 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 22 20 t shostak)))(bv)(exp2 (exp2_TCC1 0 (exp2_TCC1-1 nil 3242699046 3342859401 ("" (skosimp) (("" (assert) nil nil)) nil) proved ((int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 42 40 t shostak)) (exp2_TCC2 0 (exp2_TCC2-1 nil 3242699046 3342859401 ("" (skosimp) (("" (assert) nil nil)) nil) proved ((int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 40 40 t shostak)) (exp2_TCC3 0 (exp2_TCC3-1 nil 3242699046 3342859402 ("" (induct-and-simplify "n") nil nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (nat_induction formula-decl nil naturalnumbers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 399 380 t shostak)) (exp2_def 0 (exp2_def-1 nil 3242701800 3342859402 ("" (induct-and-simplify "n") nil nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (^ const-decl "real" exponentiation nil) (nat_induction formula-decl nil naturalnumbers nil) (nil application-judgement "above(n)" exp2 nil) (posint_exp application-judgement "posint" exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posnat_expt application-judgement "posnat" exponentiation nil) (expt def-decl "real" exponentiation nil) (int_minus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 545 510 t shostak)) (exp2_pos 0 (exp2_pos-1 nil 3242701810 3342859403 ("" (induct-and-simplify "n") nil nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (nat_induction formula-decl nil naturalnumbers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 419 400 t shostak)) (exp2_n 0 (exp2_n-1 nil 3242701817 3342859403 ("" (induct-and-simplify "n") nil nil) proved ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat_induction formula-decl nil naturalnumbers nil) (nil application-judgement "above(n)" exp2 nil) (even_plus_odd_is_odd application-judgement "odd_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (odd_minus_odd_is_even application-judgement "even_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 851 800 t shostak)) (exp2_sum 0 (exp2_sum-1 nil 3242701824 3342859405 ("" (induct-and-simplify "n") nil nil) proved ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat_induction formula-decl nil naturalnumbers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 1437 1360 t shostak)) (exp2_minus_TCC1 0 (exp2_minus_TCC1-1 nil 3242699046 3342859405 ("" (skosimp) (("" (assert) nil nil)) nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 106 100 t shostak)) (exp2_minus 0 (exp2_minus-1 nil 3242701829 3342859407 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp) (("2" (induct-and-simplify "k") nil nil)) nil)) nil) proved ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (upto_induction formula-decl nil bounded_nat_inductions nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nil application-judgement "above(n)" exp2 nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 1494 1410 t shostak)) (exp2_strictpos 0 (exp2_strictpos-1 nil 3242701904 3342859407 ("" (induct-and-simplify "n") nil nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (nat_induction formula-decl nil naturalnumbers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 420 390 t shostak)) (exp2_lt 0 (exp2_lt-1 nil 3242701912 3342859408 ("" (induct "m") (("1" (grind) nil nil) ("2" (skosimp) (("2" (induct-and-simplify "n") nil nil)) nil)) nil) proved ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_minus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1177 1120 t shostak)) (exp_prop 0 (exp_prop-1 nil 3242701951 3342859409 ("" (skosimp*) (("" (rewrite "exp2_sum") (("" (lemma "both_sides_times_pos_le1") (("" (inst -1 "exp2(m!1)" "x1!1" "exp2(n!1)-1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((exp2_sum formula-decl nil exp2 nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (both_sides_times_pos_le1 formula-decl nil real_props nil)) 681 630 t shostak)))(bv_concat_def (oh_TCC1 0 (oh_TCC1-1 nil 3242699046 3342859409 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (m formal-const-decl "nat" bv_concat_def nil) (n formal-const-decl "nat" bv_concat_def nil) (below type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 289 270 t shostak)))(bv_bitwise (bv_OR 0 (bv_OR-1 nil 3242702892 3342859409 ("" (grind) nil nil) proved ((OR const-decl "bvec[N]" bv_bitwise nil) (^ const-decl "bit" bv nil)) 23 20 t shostak)) (bv_AND 0 (bv_AND-1 nil 3242702898 3342859409 ("" (grind) nil nil) proved ((AND const-decl "bvec[N]" bv_bitwise nil) (^ const-decl "bit" bv nil)) 26 30 t shostak)) (bv_IFF 0 (bv_IFF-1 nil 3242702904 3342859409 ("" (grind) nil nil) proved ((IFF const-decl "bvec[N]" bv_bitwise nil) (^ const-decl "bit" bv nil)) 22 20 t shostak)) (bv_XOR 0 (bv_XOR-1 nil 3242702908 3342859409 ("" (grind) nil nil) proved ((/= const-decl "boolean" notequal nil) (XOR const-decl "bool" xor_def nil) (XOR const-decl "bvec[N]" bv_bitwise nil) (^ const-decl "bit" bv nil)) 34 30 t shostak)) (bv_NOT 0 (bv_NOT-1 nil 3242702912 3342859409 ("" (grind) nil nil) proved ((NOT const-decl "bvec[N]" bv_bitwise nil) (^ const-decl "bit" bv nil)) 39 20 t shostak)))(bv_nat (bv2nat_rec_TCC1 0 (bv2nat_rec_TCC1-1 nil 3242699046 3342859410 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 84 80 t shostak)) (bv2nat_rec_TCC2 0 (bv2nat_rec_TCC2-1 nil 3242699046 3342859410 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 86 80 t shostak)) (bv2nat_rec_TCC3 0 (bv2nat_rec_TCC3-1 nil 3242699046 3342859410 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 100 80 t shostak)) (bv2nat_rec_TCC4 0 (bv2nat_rec_TCC4-1 nil 3242699046 3342859410 ("" (grind) nil nil) proved nil 13 10 t shostak)) (bv2nat_rec_TCC5 0 (bv2nat_rec_TCC5-1 nil 3242699046 3342859410 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (int_minus_int_is_int application-judgement "int" integers nil)) 323 300 t shostak)) (bv_lem 0 (bv_lem-1 nil 3242703392 3342859410 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 11 10 t shostak)) (bv2nat_rec_bound 0 (bv2nat_rec_bound-1 nil 3242703427 3342859412 ("" (induct-and-rewrite "n" 1 "bv2nat_rec" "exp2") (("" (lemma "bv_lem") (("" (inst - "jt!1" "bv!1") (("" (expand "^") (("" (expand "b2n") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((bv_lem formula-decl nil bv_nat nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (bv2nat_rec def-decl "nat" bv_nat nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (N formal-const-decl "nat" bv_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (upto_induction formula-decl nil bounded_nat_inductions nil)) 1301 1210 t shostak)) (bv2nat_TCC1 0 (bv2nat_TCC1-1 nil 3242699046 3342859412 ("" (grind) nil nil) proved ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 6 10 t shostak)) (bv2nat_TCC2 0 (bv2nat_TCC2-1 nil 3242699046 3342859412 ("" (skosimp*) (("" (rewrite "bv2nat_rec_bound") nil nil)) nil) proved ((bv2nat_rec_bound formula-decl nil bv_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (N formal-const-decl "nat" bv_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)) 24 20 t shostak)) (bv2nat_inj_rec 0 (bv2nat_inj_rec-1 nil 3242703463 3342859413 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (assert) (("2" (expand "bv2nat_rec" +) (("2" (expand "^") (("2" (inst - "bv1!1" "bv2!1") (("2" (bddsimp) (("1" (skosimp*) (("1" (inst?) (("1" (assert) (("1" (expand "b2n") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst -4 "jt!1") (("2" (assert) nil nil)) nil) ("3" (hide 2 3) (("3" (lemma "bv2nat_rec_bound") (("3" (inst-cp - "jt!1" "bv1!1") (("3" (inst - "jt!1" "bv2!1") (("3" (lemma "bv_lem") (("3" (inst-cp - "jt!1" "bv1!1") (("3" (inst - "jt!1" "bv2!1") (("3" (expand "b2n") (("3" (lift-if) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (skosimp*) (("4" (inst?) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nil application-judgement "above(n)" exp2 nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (bv_lem formula-decl nil bv_nat nil) (bv2nat_rec_bound formula-decl nil bv_nat nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (int_times_even_is_even application-judgement "even_int" integers nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (upto_induction formula-decl nil bounded_nat_inductions nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bv2nat_rec def-decl "nat" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil)) 1714 1560 t shostak)) (bv2nat_surj_rec 0 (bv2nat_surj_rec-1 nil 3242703513 3342859415 ("" (induct "n" 1 "upto_induction[N]") (("1" (skosimp*) (("1" (typepred "y!1") (("1" (grind) (("1" (inst 1 "fill[N](FALSE)") nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "y!1") (("2" (expand "exp2") (("2" (expand "bv2nat_rec" +) (("2" (case "FORALL bv,(b:bit),(n:below(N)),(m:{n1:below(N)|n<=n1}):
                   bv2nat_rec(n,bv)=bv2nat_rec(n,bv with [(m):=b])") (("1" (case "y!1<exp2(jt!1)") (("1" (inst -5 "y!1") (("1" (skosimp*) (("1" (inst + "bv!1 with [(jt!1):= FALSE]") (("1" (inst?) (("1" (expand "^") (("1" (assert) (("1" (assert) (("1" (expand "b2n") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst -4 "y!1-exp2(jt!1)") (("1" (expand "^") (("1" (skosimp*) (("1" (inst + "bv!1 with [(jt!1):= TRUE]") (("1" (inst?) (("1" (expand "b2n") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 3) (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (induct-and-rewrite "n" 1 "bv2nat_rec" "^") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (TRUE const-decl "bool" booleans nil) nil nil (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (below_induction formula-decl nil bounded_nat_inductions nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (upto_induction formula-decl nil bounded_nat_inductions nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (bv2nat_rec def-decl "nat" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil)) 1956 1790 t shostak)) (bv2nat_inj 0 (bv2nat_inj-1 nil 3242703551 3342859415 ("" (expand "bv2nat") (("" (skolem 1 ("x!1" "y!1")) (("" (rewrite "bv2nat_inj_rec") (("" (flatten) (("" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) proved ((upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2nat_inj_rec formula-decl nil bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 71 50 t shostak)) (bv2nat_surj 0 (bv2nat_surj-1 nil 3242703576 3342859415 ("" (expand "bv2nat") (("" (skolem!) (("" (rewrite "bv2nat_surj_rec") nil nil)) nil)) nil) proved ((below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2nat_surj_rec formula-decl nil bv_nat nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 50 40 t shostak)) (bv2nat_bij 0 (bv2nat_bij-1 nil 3242703599 3342859416 ("" (expand "bijective?") (("" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (rewrite "bv2nat_inj") nil nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (rewrite "bv2nat_surj") nil nil)) nil)) nil)) nil)) nil) proved ((bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2nat_inj formula-decl nil bv_nat nil) (injective? const-decl "bool" functions nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bv2nat_surj formula-decl nil bv_nat nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil)) 60 40 t shostak)) (bv2nat_rec_fill_F 0 (bv2nat_rec_fill_F-1 nil 3242703627 3342859416 ("" (induct-and-rewrite "n" 1 "bv2nat_rec" "fill" "^" "b2n") nil nil) proved ((<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (bv2nat_rec def-decl "nat" bv_nat nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (N formal-const-decl "nat" bv_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (upto_induction formula-decl nil bounded_nat_inductions nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 725 670 t shostak)) (bv2nat_rec_fill_T 0 (bv2nat_rec_fill_T-1 nil 3242703658 3342859417 ("" (induct-and-rewrite "n" 1 "bv2nat_rec" "fill" "^" "b2n") (("1" (expand "exp2") (("1" (propax) nil nil)) nil) ("2" (expand "exp2" 1 2) (("2" (assert) nil nil)) nil)) nil) proved ((even_minus_odd_is_odd application-judgement "odd_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (bv2nat_rec def-decl "nat" bv_nat nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (TRUE const-decl "bool" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (N formal-const-decl "nat" bv_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (upto_induction formula-decl nil bounded_nat_inductions nil)) 1028 980 t shostak)) (bv2nat_fill_F 0 (bv2nat_fill_F-1 nil 3242703711 3342859417 ("" (expand "bv2nat") (("" (rewrite "bv2nat_rec_fill_F") nil nil)) nil) proved ((bv2nat_rec_fill_F formula-decl nil bv_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (N formal-const-decl "nat" bv_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 20 20 t shostak)) (bv2nat_fill_T 0 (bv2nat_fill_T-1 nil 3242703727 3342859417 ("" (expand "bv2nat") (("" (rewrite "bv2nat_rec_fill_T") nil nil)) nil) proved ((bv2nat_rec_fill_T formula-decl nil bv_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (N formal-const-decl "nat" bv_nat nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 39 30 t shostak)) (bv2nat_eq0 0 (bv2nat_eq0-1 nil 3242703746 3342859417 ("" (skosimp*) (("" (rewrite "bv2nat_inj") (("" (hide 2) (("" (rewrite "bv2nat_fill_F") nil nil)) nil)) nil)) nil) proved ((bv2nat_inj formula-decl nil bv_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" bv_nat nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (bv2nat_fill_F formula-decl nil bv_nat nil)) 37 30 t shostak)) (bv2nat_eq_max 0 (bv2nat_eq_max-1 nil 3242703767 3342859418 ("" (skosimp*) (("" (rewrite "bv2nat_inj") (("" (hide 2) (("" (rewrite "bv2nat_fill_T") nil nil)) nil)) nil)) nil) proved ((bv2nat_inj formula-decl nil bv_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" bv_nat nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (bv2nat_fill_T formula-decl nil bv_nat nil)) 112 90 t shostak)) (bv2nat_top_bit_TCC1 0 (bv2nat_top_bit_TCC1-1 nil 3242699047 3342859418 ("" (grind) nil nil) proved ((int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 41 50 t shostak)) (bv2nat_top_bit_TCC2 0 (bv2nat_top_bit_TCC2-1 nil 3242699047 3342859418 ("" (grind) nil nil) proved ((^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 455 430 t shostak)) (bv2nat_top_bit_TCC3 0 (bv2nat_top_bit_TCC3-1 nil 3242699047 3342859419 ("" (grind) nil nil) proved ((^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 454 430 t shostak)) (bv2nat_top_bit 0 (bv2nat_top_bit-1 nil 3242703785 3342859419 ("" (skosimp*) (("" (expand "^") (("" (expand "bv2nat") (("" (expand "bv2nat_rec") (("" (lift-if) (("" (assert) (("" (lemma "bv_lem") (("" (inst?) (("" (prop) (("1" (expand "b2n") (("1" (expand "^") (("1" (assert) nil nil)) nil)) nil) ("2" (expand "b2n") (("2" (expand "^") (("2" (assert) (("2" (rewrite "bv2nat_rec_bound") nil nil)) nil)) nil)) nil) ("3" (expand "b2n") (("3" (expand "^") (("3" (lift-if) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((int_minus_int_is_int application-judgement "int" integers nil) (^ const-decl "bit" bv nil) (nil application-judgement "above(n)" exp2 nil) (bv2nat_rec def-decl "nat" bv_nat nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" bv_nat nil) (below type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (bv2nat_rec_bound formula-decl nil bv_nat nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (b2n const-decl "nbit" bit nil) (bv_lem formula-decl nil bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 701 660 t shostak)) (bv2nat_topbit_TCC1 0 (bv2nat_topbit_TCC1-1 nil 3242699047 3342859419 ("" (grind) nil nil) proved ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 144 40 t shostak)) (bv2nat_topbit 0 (bv2nat_topbit-1 nil 3242703825 3342859420 ("" (skosimp*) (("" (lemma "bv2nat_top_bit") (("" (inst?) (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved ((bv2nat_top_bit formula-decl nil bv_nat nil) (nil application-judgement "above(n)" exp2 nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 93 90 t shostak)) (nat2bv_TCC1 0 (nat2bv_TCC1-1 nil 3242699047 3342859420 ("" (inst 1 "inverse(bv2nat)") (("" (skosimp*) (("" (lemma "bijective_inverse[bvec[N],below(exp2(N))]") (("" (inst -1 "inverse[bvec[N], below(exp2(N))](bv2nat)(x1!1)" "x1!1" "bv2nat") (("1" (ground) nil nil) ("2" (hide 2) (("2" (lemma "bv2nat_bij") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (bv2nat_bij formula-decl nil bv_nat nil) (bijective_inverse formula-decl nil function_inverse nil) (inverse const-decl "D" function_inverse nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 96 80 t shostak)) (nat2bv_def 0 (nat2bv_def-1 nil 3242703848 3342859420 ("" (apply-extensionality 1 :hide? t) (("1" (typepred "nat2bv(x!1)") (("1" (expand "inverse") (("1" (lemma "epsilon_ax[bvec[N]]") (("1" (inst?) (("1" (split -1) (("1" (rewrite "bv2nat_inj") nil nil) ("2" (hide 2) (("2" (inst 1 "nat2bv(x!1)") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "inverse") (("2" (lemma "epsilon_ax[bvec[N]]") (("2" (inst?) (("2" (split -1) (("1" (propax) nil nil) ("2" (hide 2) (("2" (inst 1 "nat2bv(x1!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (epsilon_ax formula-decl nil epsilons nil) (bv2nat_inj formula-decl nil bv_nat nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (inverse const-decl "D" function_inverse nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 206 160 t shostak)) (nat2bv_bij 0 (nat2bv_bij-1 nil 3242703876 3342859420 ("" (lemma "bv2nat_bij") (("" (rewrite "nat2bv_def") (("" (rewrite "bij_inv_is_bij") nil nil)) nil)) nil) proved ((nat2bv_def formula-decl nil bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bij_inv_is_bij formula-decl nil function_inverse nil) (bv2nat_bij formula-decl nil bv_nat nil)) 22 20 t shostak)) (nat2bv_inv 0 (nat2bv_inv-1 nil 3242703899 3342859420 ("" (skosimp*) (("" (typepred "nat2bv(bv2nat(bv!1))") (("" (rewrite "bv2nat_inj") nil nil)) nil)) nil) proved ((nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (bv2nat_inj formula-decl nil bv_nat nil)) 33 20 t shostak)) (nat2bv_rew 0 (nat2bv_rew-1 nil 3242703922 3342859420 ("" (skosimp*) (("" (typepred "nat2bv(val!1)") (("" (prop) (("1" (assert) nil nil) ("2" (rewrite "bv2nat_inj") nil nil)) nil)) nil)) nil) proved ((nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_nat nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (bv2nat_inj formula-decl nil bv_nat nil)) 42 40 t shostak)) (bv2nat_inv 0 (bv2nat_inv-1 nil 3242703948 3342859420 ("" (skosimp*) (("" (assert) nil nil)) nil) proved nil 33 20 t shostak)))(empty_bv)(bv_caret (caret_TCC1 0 (caret_TCC1-1 nil 3242699047 3342859420 ("" (subtype-tcc) nil nil) proved ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) 236 230 t shostak)) (caret_TCC2 0 (caret_TCC2-1 nil 3242699047 3342859421 ("" (subtype-tcc) nil nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_caret nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) 534 500 t shostak)) (bv_caret_all_TCC1 0 (bv_caret_all_TCC1-1 nil 3242699047 3342859421 ("" (subtype-tcc) nil nil) proved ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 60 30 t shostak)) (bv_caret_all_TCC2 0 (bv_caret_all_TCC2-1 nil 3242699047 3342859421 ("" (subtype-tcc) nil nil) proved ((int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 41 40 t shostak)) (bv_caret_all 0 (bv_caret_all-1 nil 3242704209 3342859421 ("" (skosimp*) (("" (expand "^") (("" (apply-extensionality 1 :hide? t) nil nil)) nil)) nil) proved ((^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" bv_caret nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 43 50 t shostak)) (bv_caret_ii_0_TCC1 0 (bv_caret_ii_0_TCC1-1 nil 3242699047 3342859421 ("" (subtype-tcc) nil nil) proved nil 12 10 t shostak)) (bv_caret_ii_0 0 (bv_caret_ii_0-1 nil 3242704230 3342859421 ("" (skosimp*) (("" (expand "^") (("" (propax) nil nil)) nil)) nil) proved ((^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (^ const-decl "bit" bv nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 95 70 t shostak)) (bv_caret_elim_TCC1 0 (bv_caret_elim_TCC1-1 nil 3242699047 3342859422 ("" (subtype-tcc) nil nil) proved ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 279 280 t shostak)) (bv_caret_elim_TCC2 0 (bv_caret_elim_TCC2-1 nil 3242699047 3342859422 ("" (subtype-tcc) nil nil) proved ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 313 290 t shostak)) (bv_caret_elim 0 (bv_caret_elim-1 nil 3242704247 3342859423 ("" (skosimp*) (("" (expand "^") (("" (propax) nil nil)) nil)) nil) proved ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (^ const-decl "bit" bv nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 449 420 t shostak)))(infinite_sets_def (infinite_nonempty 0 (infinite_nonempty-1 nil 3249344193 3342859423 ("" (skolem-typepred) (("" (expand "nonempty?") (("" (rewrite "emptyset_is_empty?[T]") (("" (assert) nil nil)) nil)) nil)) nil) proved ((nonempty? const-decl "bool" sets nil) (finite_emptyset name-judgement "finite_set" finite_sets nil) (emptyset_is_empty? formula-decl nil sets_lemmas nil) (infinite_set type-eq-decl nil infinite_sets_def nil) (NOT const-decl "[bool -> bool]" booleans nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil infinite_sets_def nil)) 17 20 t nil)) (infinite_add 0 (infinite_add-1 nil 3249344193 3342859423 ("" (skolem-typepred) (("" (use "member_add[T]") (("" (assert) (("" (lemma "finite_remove[T]") (("" (inst - "add(t!1, Inf!1)" "t!1") (("" (use "remove_add_member[T]") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member_add formula-decl nil sets_lemmas nil) (finite_remove judgement-tcc nil finite_sets nil) (remove_add_member formula-decl nil sets_lemmas nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (finite_set type-eq-decl nil finite_sets nil) (infinite_set type-eq-decl nil infinite_sets_def nil) (NOT const-decl "[bool -> bool]" booleans nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil infinite_sets_def nil)) 79 70 nil nil)) (infinite_remove 0 (infinite_remove-1 nil 3249344193 3342859423 ("" (skolem-typepred) (("" (use "member_remove[T]") (("" (assert) (("" (lemma "finite_add[T]") (("" (inst - "remove(t!1, Inf!1)" "t!1") (("" (forward-chain "add_remove_member[T]") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member_remove formula-decl nil sets_lemmas nil) (finite_add formula-decl nil finite_sets nil) (add_remove_member formula-decl nil sets_lemmas nil) (remove const-decl "set" sets nil) (finite_set type-eq-decl nil finite_sets nil) (infinite_set type-eq-decl nil infinite_sets_def nil) (NOT const-decl "[bool -> bool]" booleans nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil infinite_sets_def nil)) 71 50 nil nil)) (infinite_superset 0 (infinite_superset-1 nil 3249344193 3342859423 ("" (skosimp :preds? t) (("" (forward-chain "finite_subset[T]") nil nil)) nil) proved ((finite_subset formula-decl nil finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (T formal-type-decl nil infinite_sets_def nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (infinite_set type-eq-decl nil infinite_sets_def nil)) 37 20 t nil)) (infinite_union_left 0 (infinite_union_left-1 nil 3249344193 3342859423 ("" (skolem-typepred) (("" (expand* "union" "member" "is_finite") (("" (skolem-typepred) (("" (inst + "N!1" "restrict[({x: T | Inf!1(x) OR S!1(x)}), (Inf!1), below[N!1]](f!1)") (("" (expand* "injective?" "restrict") (("" (skosimp* :preds? t) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (union const-decl "set" sets nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (restrict const-decl "R" restrict nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (injective? const-decl "bool" functions nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (infinite_set type-eq-decl nil infinite_sets_def nil) (NOT const-decl "[bool -> bool]" booleans nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil infinite_sets_def nil)) 139 90 nil nil)) (infinite_union_right 0 (infinite_union_right-1 nil 3249344193 3342859423 ("" (skolem-typepred) (("" (use "union_commutative[T]") (("" (use "infinite_union_left") (("" (assert) nil nil)) nil)) nil)) nil) proved ((union_commutative formula-decl nil sets_lemmas nil) (nonempty_union2 application-judgement "(nonempty?)" sets nil) (infinite_union_left application-judgement "infinite_set" infinite_sets_def nil) (infinite_union_left judgement-tcc nil infinite_sets_def nil) (infinite_set type-eq-decl nil infinite_sets_def nil) (NOT const-decl "[bool -> bool]" booleans nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil infinite_sets_def nil)) 76 70 nil nil)) (infinite_union 0 (infinite_union-1 nil 3249344193 3342859423 ("" (skosimp) (("" (use "finite_union[T]") nil nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) nil nil (finite_union judgement-tcc nil finite_sets nil) (T formal-type-decl nil infinite_sets_def nil)) 22 20 t nil)) (infinite_intersection 0 (infinite_intersection-1 nil 3249344193 3342859423 ("" (skosimp) (("" (use "finite_intersection1[T]") (("" (use "finite_intersection2[T]") (("" (assert) nil nil)) nil)) nil)) nil) proved ((finite_intersection1 judgement-tcc nil finite_sets nil) (T formal-type-decl nil infinite_sets_def nil) nil (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) nil (finite_intersection2 judgement-tcc nil finite_sets nil)) 51 40 t nil)) (infinite_difference 0 (infinite_difference-1 nil 3249344193 3342859424 ("" (skolem-typepred) (("" (expand* "difference" "member" "is_finite" "injective?") (("" (skosimp*) (("" (inst + "N!1 + N!2" "LAMBDA (s: (Inf!1)): IF Fin!1(s) THEN f!1(s) + N!2 ELSE f!2(s) ENDIF") (("1" (skosimp) (("1" (smash) (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (inst? -3) (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (skosimp) nil nil) ("4" (skosimp) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (injective? const-decl "bool" functions nil) (difference const-decl "set" sets nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) nil nil (below type-eq-decl nil nat_types nil) nil (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) nil (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil nil (AND const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (infinite_set type-eq-decl nil infinite_sets_def nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil infinite_sets_def nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 730 690 t nil)) (infinite_rest 0 (infinite_rest-1 nil 3249344193 3342859424 ("" (skolem-typepred) (("" (expand "rest") (("" (prop) (("" (use "add_remove_member[T]") (("" (expand "member") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((rest const-decl "set" sets nil) (add_remove_member formula-decl nil sets_lemmas nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (infinite_remove application-judgement "infinite_set" infinite_sets_def nil) (infinite_add application-judgement "infinite_set" infinite_sets_def nil) (member const-decl "bool" sets nil) (infinite_set type-eq-decl nil infinite_sets_def nil) (NOT const-decl "[bool -> bool]" booleans nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil infinite_sets_def nil)) 63 50 nil nil)) (infinite_fullset 0 (infinite_fullset-1 nil 3249344193 3342859424 ("" (flatten) (("" (skolem!) (("" (lemma "finite_subset[T]" ("A" "fullset[T]" "s" "S!1")) (("1" (expand* "subset?" "fullset" "member") nil nil) ("2" (propax) nil nil)) nil)) nil)) nil) proved ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (finite_subset formula-decl nil finite_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (fullset const-decl "set" sets nil) (T formal-type-decl nil infinite_sets_def nil)) 46 30 t nil)))(finite_sets_of_sets (powerset_natfun_rec_TCC1 0 (powerset_natfun_rec_TCC1-1 nil 3242842726 3342859424 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (nonempty_powerset application-judgement "(nonempty?[set[T]])" sets_lemmas nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 194 180 t shostak)) (powerset_natfun_rec_TCC2 0 (powerset_natfun_rec_TCC2-2 "" 3332190247 3342859425 ("" (skolem-typepred) (("" (flatten) (("" (assert) nil nil)) nil)) nil) proved ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nonempty_powerset application-judgement "(nonempty?[set[T]])" sets_lemmas nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (bijective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 99 80 t shostak) (powerset_natfun_rec_TCC2-1 nil 3242842733 3307982998 ("" (skolem-typepred) (("" (hide -1 -2 -3) (("" (flatten) (("" (lemma "empty_card[T]") (("" (inst -1 "A!1") (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (bijective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 276 260 t shostak)) (powerset_natfun_rec_TCC3 0 (powerset_natfun_rec_TCC3-1 nil 3242843028 3342859426 ("" (grind) (("" (lemma "empty_card[T]") (("" (inst -1 "A!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((empty_card formula-decl nil finite_sets nil) (empty? const-decl "bool" sets nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) nil nil (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (nonempty_powerset application-judgement "(nonempty?[set[T]])" sets_lemmas nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil)) 1111 990 t shostak)) (powerset_natfun_rec_TCC4 0 (powerset_natfun_rec_TCC4-1 nil 3242843036 3342859426 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) nil (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (subset? const-decl "bool" sets nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (nonempty_powerset application-judgement "(nonempty?[set[T]])" sets_lemmas nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) nil (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (inverse const-decl "D" function_inverse nil) (member const-decl "bool" sets nil)) 284 270 t shostak)) (powerset_natfun_rec_TCC5 0 (powerset_natfun_rec_TCC5-1 nil 3242962925 3342859426 ("" (grind) nil nil) proved ((inverse const-decl "D" function_inverse nil) (member const-decl "bool" sets nil)) 46 40 t shostak)) (powerset_natfun_rec_TCC6 0 (powerset_natfun_rec_TCC6-1 nil 3242962925 3342859427 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (TRUE const-decl "bool" booleans nil) nil (subset? const-decl "bool" sets nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nonempty_powerset application-judgement "(nonempty?[set[T]])" sets_lemmas nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (inverse const-decl "D" function_inverse nil) (member const-decl "bool" sets nil)) 881 770 t shostak)) (powerset_natfun_rec_bound 0 (powerset_natfun_rec_bound-1 nil 3242966710 3342859428 ("" (skolem 1 ("A!1" _ "f!1" "B!1")) (("" (induct-and-simplify "n") nil nil)) nil) proved ((member const-decl "bool" sets nil) (inverse const-decl "D" function_inverse nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (int_minus_int_is_int application-judgement "int" integers nil) (unique_bijective_inverse application-judgement "{x: D | f(x) = y}" function_inverse nil) (bijective_inverse_is_bijective application-judgement "(bijective?[R, D])" function_inverse nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (upto_induction formula-decl nil bounded_nat_inductions nil) (T formal-type-decl nil finite_sets_of_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (powerset_natfun_rec def-decl "nat" finite_sets_of_sets nil) (powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (bijective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil)) 951 890 t shostak)) (powerset_natfun_TCC1 0 (powerset_natfun_TCC1-2 "" 3342856117 3342859428 ("" (skolem-typepred) (("" (lemma "Card_bijection[T]") (("" (inst -1 "A!1" "card(A!1)") (("" (rewrite "card_def") (("" (assert) (("" (skosimp) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Card_bijection formula-decl nil finite_sets nil) (card_def formula-decl nil finite_sets nil) (below type-eq-decl nil nat_types nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (nonempty_powerset application-judgement "(nonempty?[set[T]])" sets_lemmas nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 315 270 t shostak) (powerset_natfun_TCC1-1 nil 3242843042 3307983007 ("" (skosimp) (("" (use "Card_bijection[T]") (("" (inst -1 "A!1" "card(A!1)") (("" (rewrite "card_def") (("" (assert) (("" (skosimp) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Card_bijection formula-decl nil finite_sets nil) (card_def formula-decl nil finite_sets nil) (below type-eq-decl nil nat_types nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (nonempty_powerset application-judgement "(nonempty?[set[T]])" sets_lemmas nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 441 400 t shostak)) (powerset_natfun_TCC2 0 (powerset_natfun_TCC2-1 nil 3242843103 3342859428 ("" (grind) nil nil) proved ((choose const-decl "(p)" sets nil)) 37 20 t shostak)) (powerset_natfun_TCC3 0 (powerset_natfun_TCC3-1 nil 3242933158 3342859429 ("" (skosimp) (("" (beta) (("" (lemma "powerset_natfun_rec_bound") (("" (inst?) (("" (hide 2) (("" (use "Card_bijection[T]") (("" (inst -1 "A!1" "card(A!1)") (("" (rewrite "card_def") (("" (assert) (("" (skosimp) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (bijective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (powerset_natfun_rec_bound formula-decl nil finite_sets_of_sets nil)) 107 100 t shostak)) (powerset_natfun_inj_rec_TCC1 0 (powerset_natfun_inj_rec_TCC1-1 nil 3242962926 3342859429 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (nonempty_powerset application-judgement "(nonempty?[set[T]])" sets_lemmas nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 199 160 t shostak)) (powerset_natfun_inj_rec_TCC2 0 (powerset_natfun_inj_rec_TCC2-2 "" 3332564344 3342859429 ("" (skolem-typepred) (("" (flatten) (("" (lemma "nonempty_card[T]") (("" (inst?) (("" (assert) (("" (expand "nonempty?") (("" (expand "empty?") (("" (skolem-typepred) (("" (expand "member") (("" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nonempty? const-decl "bool" sets nil) nil nil (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nonempty_powerset application-judgement "(nonempty?[set[T]])" sets_lemmas nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nonempty_card formula-decl nil finite_sets nil) (powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (bijective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 122 80 t shostak) (powerset_natfun_inj_rec_TCC2-1 nil 3242962926 3307983009 ("" (grind) nil nil) proved ((nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty_card formula-decl nil finite_sets nil) (powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (bijective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 1297 970 t shostak)) (powerset_natfun_inj_rec 0 (powerset_natfun_inj_rec-1 nil 3242959167 3342859432 ("" (skolem 1 ("A!1" _ "f!1" "B1!1" "B2!1")) (("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skosimp) (("3" (expand "powerset_natfun_rec" +) (("3" (split 1) (("1" (flatten) (("1" (skosimp) (("1" (case-replace "m!1 = jt!1") (("1" (assert) (("1" (expand "member") (("1" (lemma "powerset_natfun_rec_bound") (("1" (inst-cp -1 "A!1" "jt!1" "f!1" "B1!1") (("1" (inst -1 "A!1" "jt!1" "f!1" "B2!1") (("1" (assert) (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (split -4) (("1" (inst -1 "m!1") (("1" (assert) nil nil)) nil) ("2" (replace 1) (("2" (assert) (("2" (expand "member") (("2" (lemma "powerset_natfun_rec_bound") (("2" (inst-cp -1 "A!1" "jt!1" "f!1" "B1!1") (("2" (inst -1 "A!1" "jt!1" "f!1" "B2!1") (("2" (assert) (("2" (hide 4) (("2" (lift-if) (("2" (prop) (("1" (assert) (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (lift-if) (("2" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("3" (lift-if) (("3" (ground) nil nil)) nil) ("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (split -4) (("1" (inst -2 "jt!1") (("1" (assert) (("1" (grind) nil nil)) nil)) nil) ("2" (skosimp) (("2" (inst -2 "m!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide -1 1) (("4" (grind) (("4" (lemma "empty_card[T]") (("4" (inst -1 "A!1") (("4" (grind) nil nil)) nil)) nil)) nil)) nil) ("5" (hide -1 1) (("5" (grind) (("5" (lemma "empty_card[T]") (("5" (inst -1 "A!1") (("5" (grind) nil nil)) nil)) nil)) nil)) nil) ("6" (hide -1 1) (("6" (grind) nil nil)) nil) ("7" (hide -1 1) (("7" (grind) nil nil)) nil)) nil)) nil) proved ((< const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) nil (<= const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (pred type-eq-decl nil defined_types nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (powerset_natfun_rec def-decl "nat" finite_sets_of_sets nil) (member const-decl "bool" sets nil) (inverse const-decl "D" function_inverse nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (upto_induction formula-decl nil bounded_nat_inductions nil) (powerset_natfun_rec_bound formula-decl nil finite_sets_of_sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (nil application-judgement "above(n)" exp2 nil) (unique_bijective_inverse application-judgement "{x: D | f(x) = y}" function_inverse nil) (bijective_inverse_is_bijective application-judgement "(bijective?[R, D])" function_inverse nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (int_times_even_is_even application-judgement "even_int" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (empty? const-decl "bool" sets nil) (empty_card formula-decl nil finite_sets nil)) 2789 2540 t shostak)) (powerset_natfun_inj 0 (powerset_natfun_inj-2 "" 3342858990 3342859432 ("" (lemma "powerset_natfun_inj_rec") (("" (skosimp) (("" (skosimp) (("" (expand "powerset_natfun") (("" (inst? -1) (("" (assert) (("" (apply-extensionality) (("" (expand "member") (("" (hide -2) (("" (hide 2) (("" (name-replace "f" "choose(bijective?[(A!1), below(card(A!1))])") (("1" (case "A!1(x!1)") (("1" (inst -2 "f(x!1)") (("1" (assert) (("1" (typepred "f") (("1" (expand "inverse") (("1" (case-replace "(epsilon! (x: (A!1)): f(x) = f(x!1)) = x!1") (("1" (iff) (("1" (propax) nil nil)) nil) ("2" (hide -3 2) (("2" (use "epsilon_ax[(A!1)]") (("1" (prop) (("1" (expand "bijective?") (("1" (flatten) (("1" (expand "injective?") (("1" (inst?) (("1" (assert) nil nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred "f(x!1)") (("2" (assert) nil nil)) nil)) nil) ("2" (expand "inverse") (("2" (typepred "B1!1") (("2" (typepred "B2!1") (("2" (hide -3) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (lemma "Card_bijection[T]") (("2" (inst -1 "A!1" "card(A!1)") (("2" (rewrite "card_def") (("2" (assert) (("2" (skosimp) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst?) (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((powerset_natfun const-decl "below(exp2(card(A)))" finite_sets_of_sets nil) (unique_bijective_inverse application-judgement "{x: D | f(x) = y}" function_inverse nil) (member const-decl "bool" sets nil) (below type-eq-decl nil nat_types nil) (empty? const-decl "bool" sets nil) (card_def formula-decl nil finite_sets nil) (Card_bijection formula-decl nil finite_sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (inverse const-decl "D" function_inverse nil) (injective? const-decl "bool" functions nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (TRUE const-decl "bool" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) nil nil nil (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (nonempty_powerset application-judgement "(nonempty?[set[T]])" sets_lemmas nil) (subset? const-decl "bool" sets nil) (powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (bijective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (powerset_natfun_inj_rec formula-decl nil finite_sets_of_sets nil)) 693 570 t shostak) (powerset_natfun_inj-1 nil 3242962518 3307983022 ("" (lemma "powerset_natfun_inj_rec") (("" (skosimp) (("" (skosimp) (("" (expand "powerset_natfun") (("" (inst? -1) (("1" (assert) (("1" (apply-extensionality) (("1" (expand "member") (("1" (hide -2) (("1" (hide 2) (("1" (name-replace "f" "choose(bijective?[(A!1), below(card(A!1))])") (("1" (inst -1 "f(x!1)") (("1" (assert) (("1" (typepred "f") (("1" (expand "inverse") (("1" (case "A!1(x!1)") (("1" (case-replace "(epsilon! (x: (A!1)): f(x) = f(x!1)) = x!1") (("1" (iff) (("1" (expand "restrict") (("1" (propax) nil nil)) nil)) nil) ("2" (expand "restrict") (("2" (hide -3 2) (("2" (use "epsilon_ax[(A!1)]") (("1" (split) (("1" (expand "bijective?") (("1" (flatten) (("1" (expand "injective?") (("1" (inst?) (("1" (assert) nil nil) ("2" (inst 1 "x!1") nil nil) ("3" (skosimp) nil nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil) ("2" (skosimp) nil nil) ("3" (inst 1 "x!1") nil nil)) nil)) nil)) nil) ("3" (inst 1 "x!1") nil nil) ("4" (skosimp) nil nil)) nil) ("2" (hide -1 -2) (("2" (typepred "B1!1") (("2" (typepred "B2!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "f") (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil) ("3" (typepred "B1!1") (("3" (typepred "B2!1") (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (lemma "Card_bijection[T]") (("2" (inst -1 "A!1" "card(A!1)") (("2" (rewrite "card_def") (("2" (assert) (("2" (skosimp) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (lemma "Card_bijection[T]") (("2" (inst -1 "A!1" "card(A!1)") (("2" (rewrite "card_def") (("2" (assert) (("2" (skosimp) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((powerset_natfun const-decl "below(exp2(card(A)))" finite_sets_of_sets nil) (unique_bijective_inverse application-judgement "{x: D | f(x) = y}" function_inverse nil) (member const-decl "bool" sets nil) (below type-eq-decl nil nat_types nil) (empty? const-decl "bool" sets nil) (card_def formula-decl nil finite_sets nil) (Card_bijection formula-decl nil finite_sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (inverse const-decl "D" function_inverse nil) (injective? const-decl "bool" functions nil) (epsilon_ax formula-decl nil epsilons nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (TRUE const-decl "bool" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) nil nil nil (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (nonempty_powerset application-judgement "(nonempty?[set[T]])" sets_lemmas nil) (subset? const-decl "bool" sets nil) (powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (bijective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (powerset_natfun_inj_rec formula-decl nil finite_sets_of_sets nil)) 3904 1930 t shostak)) (powerset_finite 0 (powerset_finite-1 nil 3242843110 3342859433 ("" (use "powerset_natfun_inj") (("" (skosimp) (("" (expand "is_finite") (("" (inst 1 "exp2(card(A!1))" "powerset_natfun(A!1)") (("" (expand "injective?") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (finite_set type-eq-decl nil finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (below type-eq-decl nil naturalnumbers nil) (powerset_natfun const-decl "below(exp2(card(A)))" finite_sets_of_sets nil) (choose const-decl "(p)" sets nil) (injective? const-decl "bool" functions nil) (is_finite const-decl "bool" finite_sets nil) (powerset_natfun_inj formula-decl nil finite_sets_of_sets nil)) 199 180 t shostak)) (Union_finite 0 (Union_finite-1 nil 3252521570 3342859434 ("" (skolem!) (("" (expand "every") (("" (prop) (("1" (lemma "finite_subset[set[T]]") (("1" (inst - "powerset(Union(SS!1))" "SS!1") (("1" (grind) nil nil) ("2" (use "powerset_finite") nil nil)) nil)) nil) ("2" (skolem!) (("2" (lemma "finite_subset[T]") (("2" (inst - "Union(SS!1)" "x!1") (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (case "FORALL (n: nat), (B: setofsets[T]): (EXISTS (f: [(B) -> below[n]]): injective?(f)) AND (FORALL (b: (B)): is_finite(b)) => is_finite(Union(B))") (("1" (expand "is_finite" -2) (("1" (skolem!) (("1" (inst - "N!1" "SS!1") (("1" (prop) (("1" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (delete -1 -2 2) (("2" (induct "n") (("1" (skosimp*) (("1" (expand "is_finite" +) (("1" (inst + "1" "LAMBDA (b: (Union(B!1))): 0") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (expand "Union") (("1" (skosimp*) (("1" (typepred "f!1(a!1)") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (case "EXISTS (b: (B!1)): f!1(b) = j!1") (("1" (skolem!) (("1" (inst - "remove(b!1, B!1)") (("1" (prop) (("1" (inst - "b!1") (("1" (expand "is_finite") (("1" (skosimp*) (("1" (inst + "N!1 + N!2" "LAMBDA (c: (Union(B!1))): IF b!1(c) THEN N!1 + f!3(c) ELSE f!2(c) ENDIF") (("1" (expand "injective?") (("1" (skosimp :preds? t) (("1" (expand "Union") (("1" (skosimp*) (("1" (smash) (("1" (inst -6 "x1!1" "x2!1") (("1" (assert) nil nil)) nil) ("2" (inst - "x1!1" "x2!1") (("1" (assert) nil nil) ("2" (expand* "remove" "member" "Union") (("2" (inst + "a!2") nil nil)) nil) ("3" (expand* "remove" "member" "Union") (("3" (inst + "a!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (skosimp :preds? t) (("3" (expand* "remove" "member" "Union") (("3" (skolem!) (("3" (inst + "a!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("4" (skosimp) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "LAMBDA (c: (remove(b!1, B!1))): f!1(c)") (("1" (expand "injective?") (("1" (skosimp :preds? t) (("1" (expand* "remove" "member") (("1" (flatten) (("1" (inst - "x1!1" "x2!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand* "remove" "member" "injective?") (("2" (flatten) (("2" (inst - "b!1" "c!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (skolem-typepred) (("3" (expand* "remove" "member") (("3" (flatten) nil nil)) nil)) nil)) nil) ("3" (skolem-typepred) (("3" (expand* "remove" "member") (("3" (flatten) (("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst - "B!1") (("2" (prop) (("2" (inst + "f!1") (("1" (expand "injective?") (("1" (propax) nil nil)) nil) ("2" (skolem!) (("2" (inst + "x1!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved (nil (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat_induction formula-decl nil naturalnumbers nil) (TRUE const-decl "bool" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (remove const-decl "set" sets nil) nil nil nil nil (/= const-decl "boolean" notequal nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) nil nil nil nil nil nil (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (finite_subset formula-decl nil finite_sets nil) (powerset_finite judgement-tcc nil finite_sets_of_sets nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (injective? const-decl "bool" functions nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (Union const-decl "set" sets nil) nil (nonempty_powerset application-judgement "(nonempty?[set[T]])" sets_lemmas nil) (Union_surjective name-judgement "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)) 1770 1440 t shostak)) (Union_infinite 0 (Union_infinite-1 nil 3252521819 3342859435 ("" (skolem!) (("" (use "Union_finite") (("" (expand* "every" "some") (("" (smash) (("1" (skolem!) (("1" (inst - "x!1") nil nil)) nil) ("2" (skolem!) (("2" (inst + "x!1") nil nil)) nil)) nil)) nil)) nil)) nil) proved ((Union_finite formula-decl nil finite_sets_of_sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (Union_surjective name-judgement "(surjective?[setofsets[T], set[T]])" sets_lemmas nil) nil nil) 74 60 t shostak)) (Intersection_finite 0 (Intersection_finite-1 nil 3252521839 3342859435 ("" (expand* "every" "is_finite" "nonempty?" "empty?" "member") (("" (skosimp*) (("" (inst - "x!1") (("" (skolem!) (("" (inst + "N!1" "LAMBDA (a: (Intersection(SS!1))): f!1(a)") (("1" (expand "injective?") (("1" (skosimp :preds? t) (("1" (expand "Intersection") (("1" (inst - "x!1") (("1" (inst - "x!1") (("1" (inst - "x1!1" "x2!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "Intersection") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((injective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (Intersection const-decl "set" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) nil nil nil (nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (is_finite const-decl "bool" finite_sets nil)) 181 140 t shostak)) (Intersection_infinite 0 (Intersection_infinite-1 nil 3252521879 3342859435 ("" (expand* "every" "is_finite") (("" (skosimp*) (("" (inst + "N!1" "LAMBDA (a: (Intersection(SS!1))): f!1(a)") (("1" (expand "injective?") (("1" (skosimp :preds? t) (("1" (expand "Intersection") (("1" (inst - "x!1") (("1" (inst - "x!1") (("1" (inst - "x1!1" "x2!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "Intersection") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((injective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (T formal-type-decl nil finite_sets_of_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (set type-eq-decl nil sets nil) (Intersection const-decl "set" sets nil) nil nil nil (is_finite const-decl "bool" finite_sets nil)) 160 90 t shostak)) (Complement_finite 0 (Complement_finite-1 nil 3252521922 3342859435 ("" (skolem!) (("" (expand* "Complement" "is_finite" "injective?") (("" (prop) (("1" (skolem!) (("1" (inst + "N!1" "LAMBDA (a: (SS!1)): f!1(complement(a))") (("1" (skosimp) (("1" (inst - "complement(x1!1)" "complement(x2!1)") (("1" (assert) (("1" (rewrite "complement_equal") nil nil)) nil) ("2" (inst + "x2!1") nil nil) ("3" (inst + "x1!1") nil nil)) nil)) nil) ("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst + "N!1" "LAMBDA (c: ({a: set[T] | EXISTS (b: (SS!1)): a = complement(b)})): f!1(complement(c))") (("1" (skosimp :preds? t) (("1" (skosimp*) (("1" (inst - "complement(x1!1)" "complement(x2!1)") (("1" (assert) (("1" (rewrite "complement_equal") nil nil)) nil) ("2" (lemma "complement_complement[T]") (("2" (inst - "b!2") (("2" (assert) nil nil)) nil)) nil) ("3" (lemma "complement_complement[T]") (("3" (inst - "b!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp* :preds? t) (("2" (use "complement_complement[T]") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((is_finite const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil) (Complement const-decl "setofsets[T]" sets_lemmas nil) (complement_complement formula-decl nil sets_lemmas nil) (NOT const-decl "[bool -> bool]" booleans nil) (complement_equal formula-decl nil sets_lemmas nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (T formal-type-decl nil finite_sets_of_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) nil (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (complement const-decl "set" sets nil)) 362 190 t shostak)) (Complement_is_finite 0 (Complement_is_finite-1 nil 3252221181 3342859435 ("" (skolem!) (("" (rewrite "Complement_finite") nil nil)) nil) proved ((Complement_finite formula-decl nil finite_sets_of_sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil)) 27 20 t shostak)) (Complement_infinite 0 (Complement_infinite-1 nil 3252522256 3342859435 ("" (skolem!) (("" (use "Complement_finite") (("" (prop) nil nil)) nil)) nil) proved ((Complement_finite formula-decl nil finite_sets_of_sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets_of_sets nil)) 17 20 t shostak)) (Complement_is_infinite 0 (Complement_is_infinite-1 nil 3252221181 3342859435 ("" (skolem!) (("" (rewrite "Complement_infinite") nil nil)) nil) proved ((Complement_infinite formula-decl nil finite_sets_of_sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (set type-eq-decl nil sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (is_finite const-decl "bool" finite_sets nil) (infinite_set type-eq-decl nil infinite_sets_def nil)) 11 10 t shostak)))(EquivalenceClosure (EquivClos_TCC1 0 (EquivClos_TCC1-1 nil 3243015830 3342859436 ("" (skosimp*) (("" (expand "equivalence?") (("" (expand "EquivClos") (("" (prop) (("1" (expand "reflexive?") (("1" (skosimp*) (("1" (typepred "S!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "reflexive?") (("1" (inst?) nil))))))))))))) ("2" (expand "symmetric?") (("2" (skosimp*) (("2" (typepred "S!1") (("2" (expand "equivalence?") (("2" (flatten) (("2" (inst?) (("2" (prop) (("2" (expand "symmetric?") (("2" (inst -3 "x!1" "y!1") (("2" (assert) nil))))))))))))))))))) ("3" (expand "transitive?") (("3" (skosimp*) (("3" (typepred "S!1") (("3" (expand "equivalence?") (("3" (flatten) (("3" (inst?) (("3" (inst?) (("3" (prop) (("3" (expand "transitive?") (("3" (inst -5 "x!1" "y!1" "z!1") (("3" (assert) nil)))))))))))))))))))))))))))) nil) proved ((equivalence? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (reflexive? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PRED type-eq-decl nil defined_types nil) (T formal-type-decl nil EquivalenceClosure nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 162 110 nil nil)) (EquivClosSuperset 0 (EquivClosSuperset-1 nil 3243015830 3342859436 ("" (skosimp*) (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivClos") (("" (skosimp*) (("" (expand "subset?") (("" (inst?) (("" (expand "member") (("" (assert) nil)))))))))))))))))) nil) proved ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil EquivalenceClosure nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil)) 55 30 nil nil)) (EquivClosMonotone 0 (EquivClosMonotone-1 nil 3243015830 3342859436 ("" (skosimp*) (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivClos") (("" (skosimp*) (("" (typepred "S!2") (("" (inst -3 "S!2") (("" (assert) (("" (expand "subset?") (("" (expand "member") (("" (skosimp*) (("" (inst?) (("" (inst?) (("" (assert) nil)))))))))))))))))))))))))))) nil) proved ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil EquivalenceClosure nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil)) 74 70 nil nil)) (EquivClosLeast 0 (EquivClosLeast-1 nil 3243015830 3342859436 ("" (skosimp*) (("" (expand "subset?" 1) (("" (skosimp*) (("" (expand "member") (("" (expand "EquivClos") (("" (inst?) (("" (assert) nil)))))))))))) nil) proved ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) nil (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil EquivalenceClosure nil) (equivalence type-eq-decl nil relations nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil)) 58 40 nil nil)) (EquivClosIdempotent 0 (EquivClosIdempotent-1 nil 3243015830 3342859436 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (iff) (("" (prop) (("1" (lemma "EquivClosLeast") (("1" (inst -1 "EquivClos(R!1)" "EquivClos(R!1)") (("1" (assert) (("1" (expand "subset?") (("1" (expand "member") (("1" (prop) (("1" (inst?) (("1" (assert) nil))) ("2" (skosimp*) nil))))))))))))) ("2" (lemma "EquivClosSuperset") (("2" (inst -1 "EquivClos(R!1)") (("2" (expand "subset?") (("2" (inst -1 "(x!1, x!2)") (("2" (assert) (("2" (expand "member") (("2" (propax) nil)))))))))))))))))))) nil) proved ((T formal-type-decl nil EquivalenceClosure nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (EquivClosLeast formula-decl nil EquivalenceClosure nil) (EquivClosSuperset formula-decl nil EquivalenceClosure nil)) 106 80 nil nil)) (EquivalenceCharacterization 0 (EquivalenceCharacterization-1 nil 3243015830 3342859436 ("" (skosimp*) (("" (prop) (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (prop) (("1" (lemma "EquivClosSuperset") (("1" (inst?) (("1" (expand "subset?") (("1" (expand "member") (("1" (inst?) (("1" (assert) nil))))))))))) ("2" (lemma "EquivClosLeast") (("2" (inst -1 "S!1" "S!1") (("2" (assert) (("2" (prop) (("1" (expand "subset?") (("1" (expand "member") (("1" (inst?) (("1" (assert) nil))))))) ("2" (expand "subset?") (("2" (expand "member") (("2" (skosimp*) nil))))))))))))))))))) ("2" (assert) nil)))) nil) proved ((EquivClosLeast formula-decl nil EquivalenceClosure nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (EquivClosSuperset formula-decl nil EquivalenceClosure nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil EquivalenceClosure nil)) 90 70 nil nil)))(QuotientDefinition (EquivClassNonEmpty 0 (EquivClassNonEmpty-1 nil 3243015830 3342859436 ("" (skosimp*) (("" (expand "nonempty?") (("" (expand "empty?") (("" (expand "member") (("" (expand "EquivClass") (("" (inst -1 "x!1") (("" (typepred "S!1") (("" (expand "equivalence?") (("" (expand "reflexive?") (("" (flatten) (("" (inst -1 "x!1") nil)))))))))))))))))))) nil) proved ((nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (empty? const-decl "bool" sets nil)) 48 20 nil nil)) (EquivClassEq 0 (EquivClassEq-1 nil 3243015830 3342859436 ("" (skosimp*) (("" (typepred "S!1") (("" (expand "EquivClass") (("" (prop) (("1" (case "S!1(x!1, y!1) = (LAMBDA (z: T): S!1(x!1, z))(y!1)") (("1" (replace -2) (("1" (assert) (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "reflexive?") (("1" (inst -3 "y!1") (("1" (assert) nil))))))))))))) ("2" (assert) nil))) ("2" (apply-extensionality :hide? t) (("2" (iff) (("2" (prop) (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (inst -4 "x!1" "y!1") (("1" (assert) (("1" (inst -5 "y!1" "x!1" "x!2") (("1" (assert) nil))))))))))))))) ("2" (expand "equivalence?") (("2" (flatten) (("2" (expand "transitive?") (("2" (inst -5 "x!1" "y!1" "x!2") (("2" (assert) nil)))))))))))))))))))))) nil) proved ((equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (T formal-type-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (reflexive? const-decl "bool" relations nil) (= const-decl "[T, T -> boolean]" equalities nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (EquivClass const-decl "set[T]" QuotientDefinition nil)) 154 110 nil nil)) (repEC_TCC1 0 (repEC_TCC1-1 nil 3243663393 3342859437 ("" (skosimp) (("" (grind) (("" (typepred "S!1") (("" (expand "equivalence?") (("" (flatten) (("" (hide -2 -3) (("" (expand "reflexive?") (("" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((EquivClass const-decl "set[T]" QuotientDefinition nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (T formal-type-decl nil QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil)) 70 50 t shostak)) (EquivClassChoose 0 (EquivClassChoose-1 nil 3243015830 3342859437 ("" (skosimp*) (("" (use "EquivClassNonEmpty") (("" (expand "repEC") (("" (typepred "choose(EquivClass(S!1)(x!1))") (("1" (expand "EquivClass") (("1" (propax) nil nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((EquivClassNonEmpty formula-decl nil QuotientDefinition nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil QuotientDefinition nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (set type-eq-decl nil sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (repEC const-decl "T" QuotientDefinition nil)) 55 40 t nil)) (ChooseEquivClassChoose 0 (ChooseEquivClassChoose-1 nil 3243015830 3342859437 ("" (skosimp*) (("" (use "EquivClassNonEmpty") (("" (use "EquivClassEq") (("" (use "EquivClassChoose") (("" (assert) (("" (typepred "S!1") (("" (expand "equivalence?") (("" (expand "symmetric?") (("" (flatten) (("" (inst -2 "x!1" "repEC(S!1)(x!1)") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((EquivClassNonEmpty formula-decl nil QuotientDefinition nil) (repEC const-decl "T" QuotientDefinition nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil QuotientDefinition nil) (EquivClassChoose formula-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil) (symmetric? const-decl "bool" relations nil) (EquivClassEq formula-decl nil QuotientDefinition nil)) 78 70 t nil)) (rep_TCC1 0 (rep_TCC1-1 nil 3243663393 3342859437 ("" (skosimp) (("" (grind) (("" (typepred "P!1") (("" (skosimp) (("" (expand "EquivClass") (("" (decompose-equality) (("" (inst -1 "x!1") (("" (inst -2 "x!1") (("" (assert) (("" (replace -1) (("" (hide -1) (("" (typepred "S!1") (("" (expand "equivalence?") (("" (flatten) (("" (hide -2 -3) (("" (expand "reflexive?") (("" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (reflexive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil QuotientDefinition nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (Quotient type-eq-decl nil QuotientDefinition nil)) 110 80 t shostak)) (rep_is_repEC_TCC1 0 (rep_is_repEC_TCC1-1 nil 3243663393 3342859437 ("" (skosimp) (("" (inst 1 "x!1") nil nil)) nil) proved ((T formal-type-decl nil QuotientDefinition nil)) 9 0 t shostak)) (rep_is_repEC 0 (rep_is_repEC-1 nil 3243664057 3342859437 ("" (grind) nil nil) proved ((choose const-decl "(p)" sets nil) (rep const-decl "T" QuotientDefinition nil) (repEC const-decl "T" QuotientDefinition nil)) 19 20 t shostak)) (rep_lemma 0 (rep_lemma-1 nil 3245191776 3342859437 ("" (grind :if-match nil) (("" (use "epsilon_ax[T]") (("1" (grind :if-match nil) (("1" (inst 1 "x!1") (("1" (inst? -1) nil nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil) proved ((TRUE const-decl "bool" booleans nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (set type-eq-decl nil sets nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (rep const-decl "T" QuotientDefinition nil) (choose const-decl "(p)" sets nil)) 174 150 t shostak)) (quotient_map_surjective 0 (quotient_map_surjective-1 nil 3243015830 3342859437 ("" (skosimp*) (("" (expand "surjective?") (("" (skosimp*) (("" (typepred "y!1") (("" (skosimp*) (("" (inst?) (("" (expand "quotient_map") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((surjective? const-decl "bool" functions nil) (Quotient type-eq-decl nil QuotientDefinition nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 46 30 t nil)))(KernelDefinition (EquivalenceKernel_TCC1 0 (EquivalenceKernel_TCC1-1 nil 3243663393 3342859437 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" KernelDefinition nil) (X1 formal-subtype-decl nil KernelDefinition nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (equivalence? const-decl "bool" relations nil)) 105 80 t shostak)) (PreservesEqClosure 0 (PreservesEqClosure-1 nil 3243664201 3342859438 ("" (skosimp*) (("" (expand "PreservesEq") (("" (apply-extensionality :hide? t) (("" (iff) (("" (prop) (("1" (lemma "EquivClosLeast[X1]") (("1" (inst?) (("1" (assert) (("1" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") nil nil)) nil)) nil)) nil) ("2" (lemma "EquivClosSuperset[X1]") (("2" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("2" (inst?) (("2" (lemma "subset_transitive[[X1, X1]]") (("2" (inst -1 "restrict[[X, X], [X1, X1], bool](R!1)" "EquivClos(restrict[[X, X], [X1, X1], boolean](R!1))" "EquivalenceKernel(x!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (EquivClosSuperset formula-decl nil EquivalenceClosure nil) (subset_transitive formula-decl nil sets_lemmas nil) (EquivClosLeast formula-decl nil EquivalenceClosure nil) (restrict_extend formula-decl nil extend nil) (symmetric_extend application-judgement "(symmetric?[T])" extend_order_props nil) (transitive_extend application-judgement "(transitive?[T])" extend_order_props nil) (symmetric_restrict application-judgement "(symmetric?[S])" restrict_order_props nil) (transitive_restrict application-judgement "(transitive?[S])" restrict_order_props nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (subset? const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil) (Y formal-type-decl nil KernelDefinition nil) (X1 formal-subtype-decl nil KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" KernelDefinition nil) (boolean nonempty-type-decl nil booleans nil) (X formal-type-decl nil KernelDefinition nil)) 757 690 t shostak)) (PreservesEq_is_preserving 0 (PreservesEq_is_preserving-1 nil 3244148904 3342859438 ("" (grind) (("" (apply-extensionality :hide? t) nil nil)) nil) proved ((bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (PreservesEq const-decl "bool" KernelDefinition nil) nil (restrict const-decl "R" restrict nil) (= const-decl "[T, T -> boolean]" equalities nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) nil (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (X formal-type-decl nil KernelDefinition nil) (boolean nonempty-type-decl nil booleans nil) (X1_pred const-decl "[X -> boolean]" KernelDefinition nil) (X1 formal-subtype-decl nil KernelDefinition nil) (Y formal-type-decl nil KernelDefinition nil)) 187 170 t shostak)))(QuotientKernelProperties (Kernel_quotient_map 0 (Kernel_quotient_map-1 nil 3243015830 3342859439 ("" (skosimp*) (("" (expand "quotient_map") (("" (apply-extensionality :hide? t) (("1" (expand "EquivalenceKernel") (("1" (use "EquivClassEq[X1]") (("1" (assert) (("1" (iff) (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil) proved ((quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) nil (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (Quotient type-eq-decl nil QuotientDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X formal-type-decl nil QuotientKernelProperties nil)) 109 90 t nil)) (PreservesEq_quotient_map 0 (PreservesEq_quotient_map-1 nil 3243665917 3342859439 ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (use "EquivClassEq[X1]") (("" (assert) (("" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (X formal-type-decl nil QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (FALSE const-decl "bool" booleans nil) (restrict_extend formula-decl nil extend nil) (transitive_restrict application-judgement "(transitive?[S])" restrict_order_props nil) (symmetric_restrict application-judgement "(symmetric?[S])" restrict_order_props nil) (transitive_extend application-judgement "(transitive?[T])" extend_order_props nil) (symmetric_extend application-judgement "(symmetric?[T])" extend_order_props nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 640 590 t shostak)) (quotient_map_is_Quotient_EqivalenceRespecting 0 (quotient_map_is_Quotient_EqivalenceRespecting-3 nil 3244167432 3342859439 ("" (skosimp*) (("" (expand "PreservesEq") (("" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (use "EquivClassEq[X1]") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (FALSE const-decl "bool" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X formal-type-decl nil QuotientKernelProperties nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (restrict_extend formula-decl nil extend nil)) 89 70 t nil) (quotient_map_is_Quotient_EqivalenceRespecting-2 nil 3244167419 nil ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (use "EquivClassEq") (("" (assert) nil)))))))))))))))) nil) unchecked nil nil nil nil nil) (quotient_map_is_Quotient_EqivalenceRespecting-1 nil 3243663394 3244166838 ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (use "EquivClassEq") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished ((PreservesEq const-decl "bool" KernelDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (X formal-type-decl nil QuotientKernelProperties nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 73 50 t shostak)) (Kernel_ECquotient_map_TCC1 0 (Kernel_ECquotient_map_TCC1-1 nil 3243663394 3342859439 ("" (skosimp) (("" (expand "quotient_map") (("" (lemma "EquivalenceCharacterization[X1]") (("" (inst -1 "S!1") (("" (assert) (("" (replace -1 :dir rl) (("" (inst 1 "x1!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivalenceCharacterization formula-decl nil EquivalenceClosure nil) (X formal-type-decl nil QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil)) 50 40 t shostak)) (Kernel_ECquotient_map 0 (Kernel_ECquotient_map-1 nil 3243666194 3342859440 ("" (skosimp) (("" (expand "quotient_map") (("" (apply-extensionality :hide? t) (("1" (expand "EquivalenceKernel") (("1" (use "EquivClassEq[X1]") (("1" (assert) (("1" (iff) (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (lemma "EquivalenceCharacterization[X1]") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (EquivalenceCharacterization formula-decl nil EquivalenceClosure nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil) nil (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (ECQuotient type-eq-decl nil QuotientDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X formal-type-decl nil QuotientKernelProperties nil)) 120 110 t shostak)) (PreservesEq_ECquotient_map 0 (PreservesEq_ECquotient_map-1 nil 3243666401 3342859440 ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (use "EquivClassEq[X1]") (("" (assert) (("" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (X formal-type-decl nil QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (FALSE const-decl "bool" booleans nil) (restrict_extend formula-decl nil extend nil) (transitive_restrict application-judgement "(transitive?[S])" restrict_order_props nil) (symmetric_restrict application-judgement "(symmetric?[S])" restrict_order_props nil) (transitive_extend application-judgement "(transitive?[T])" extend_order_props nil) (symmetric_extend application-judgement "(symmetric?[T])" extend_order_props nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 671 590 t shostak)) (quotient_map_is_ECQuotient_EqivalenceRespecting 0 (quotient_map_is_ECQuotient_EqivalenceRespecting-1 nil 3243663394 3342859440 ("" (skosimp) (("" (prop) (("1" (skosimp) (("1" (lemma "Kernel_ECquotient_map_TCC1") (("1" (inst -1 "S!1" "x1!1") nil nil)) nil)) nil) ("2" (expand "PreservesEq") (("2" (expand "subset?") (("2" (skosimp*) (("2" (expand "member") (("2" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("2" (expand "EquivalenceKernel") (("2" (expand "quotient_map") (("2" (use "EquivClassEq[X1]") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Kernel_ECquotient_map_TCC1 subtype-tcc nil QuotientKernelProperties nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X formal-type-decl nil QuotientKernelProperties nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (FALSE const-decl "bool" booleans nil) (restrict_extend formula-decl nil extend nil) (PreservesEq const-decl "bool" KernelDefinition nil)) 117 70 t shostak)))(QuotientSubDefinition (quotient_sub_map_TCC1 0 (quotient_sub_map_TCC1-1 nil 3245525335 3342859441 ("" (grind :exclude "rep" :if-match nil) (("" (inst 1 "x!1") nil nil)) nil) proved ((reflexive_restrict application-judgement "(reflexive?[S])" restrict_order_props nil) (symmetric_restrict application-judgement "(symmetric?[S])" restrict_order_props nil) (transitive_restrict application-judgement "(transitive?[S])" restrict_order_props nil) (equivalence_restrict application-judgement "(equivalence?[S])" restrict_order_props nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientSubDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" QuotientSubDefinition nil) (X1 formal-subtype-decl nil QuotientSubDefinition nil)) 792 740 t shostak)))(QuotientExtensionProperties (lift_TCC1 0 (lift_TCC1-1 nil 3245193421 3342859443 ("" (grind :exclude "rep" :if-match nil) (("" (inst 1 "x!1") nil nil)) nil) proved ((reflexive_restrict application-judgement "(reflexive?[S])" restrict_order_props nil) (symmetric_restrict application-judgement "(symmetric?[S])" restrict_order_props nil) (transitive_restrict application-judgement "(transitive?[S])" restrict_order_props nil) (equivalence_restrict application-judgement "(equivalence?[S])" restrict_order_props nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientExtensionProperties nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" QuotientExtensionProperties nil) (X1 formal-subtype-decl nil QuotientExtensionProperties nil) (Y formal-type-decl nil QuotientExtensionProperties nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (QuotientSub type-eq-decl nil QuotientSubDefinition nil)) 1441 1350 t shostak)) (lift_TCC2 0 (lift_TCC2-1 nil 3245525012 3342859444 ("" (grind :exclude "rep" :if-match nil) (("" (use "rep_lemma[X]" :if-match all) (("" (expand "EquivClass" -1 1) (("" (inst -6 "(x!1, rep(S!1)(EquivClass(S!1)(x!1)))") (("1" (assert) nil nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil) proved ((rep_lemma formula-decl nil QuotientDefinition nil) (rep const-decl "T" QuotientDefinition nil) (Quotient type-eq-decl nil QuotientDefinition nil) (reflexive_restrict application-judgement "(reflexive?[S])" restrict_order_props nil) (symmetric_restrict application-judgement "(symmetric?[S])" restrict_order_props nil) (transitive_restrict application-judgement "(transitive?[S])" restrict_order_props nil) (equivalence_restrict application-judgement "(equivalence?[S])" restrict_order_props nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientExtensionProperties nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" QuotientExtensionProperties nil) (X1 formal-subtype-decl nil QuotientExtensionProperties nil) (Y formal-type-decl nil QuotientExtensionProperties nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (QuotientSub type-eq-decl nil QuotientSubDefinition nil)) 1515 1410 t shostak)) (lift_commutation 0 (lift_commutation-1 nil 3243666489 3342859446 ("" (grind :exclude "rep" :if-match nil) (("" (apply-extensionality :hide? t) (("" (use "rep_lemma[X]") (("" (expand "EquivClass" -1) (("" (inst -6 "(x!1, rep(S!1)({z: X | S!1(x!1, z)}))") (("1" (assert) (("1" (expand "EquivClass" 1) (("1" (assert) nil nil)) nil)) nil) ("2" (inst -5 "(x!1, rep(S!1)({z: X | S!1(x!1, z)}))") (("1" (assert) nil nil) ("2" (inst 1 "x!1") (("2" (expand "EquivClass" 1) (("2" (propax) nil nil)) nil)) nil)) nil) ("3" (inst 1 "x!1") (("3" (expand "EquivClass" 1) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (QuotientSub type-eq-decl nil QuotientSubDefinition nil) (O const-decl "T3" function_props nil) (lift const-decl "Y" QuotientExtensionProperties nil) (quotient_sub_map const-decl "QuotientSub(S)" QuotientSubDefinition nil) (rep const-decl "T" QuotientDefinition nil) (Quotient type-eq-decl nil QuotientDefinition nil) nil nil (rep_lemma formula-decl nil QuotientDefinition nil) (reflexive_restrict application-judgement "(reflexive?[S])" restrict_order_props nil) (symmetric_restrict application-judgement "(symmetric?[S])" restrict_order_props nil) (transitive_restrict application-judgement "(transitive?[S])" restrict_order_props nil) (equivalence_restrict application-judgement "(equivalence?[S])" restrict_order_props nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientExtensionProperties nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" QuotientExtensionProperties nil) (X1 formal-subtype-decl nil QuotientExtensionProperties nil) (Y formal-type-decl nil QuotientExtensionProperties nil)) 1621 1490 t shostak)) (lift_unicity 0 (lift_unicity-1 nil 3243666688 3342859446 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (typepred "x!1") (("" (skosimp*) (("" (case "h!1(x!1) = g!1(x!2)") (("1" (replace -1) (("1" (hide -1 -3) (("1" (expand "lift") (("1" (replace -1) (("1" (hide -1) (("1" (use "rep_lemma[X]") (("1" (grind :exclude "rep" :if-match nil) (("1" (typepred "g!1") (("1" (expand "PreservesEq") (("1" (expand "subset?") (("1" (expand "member") (("1" (expand "EquivalenceKernel") (("1" (expand "restrict") (("1" (inst -1 "(x!2, rep(S!1)(EquivClass[X](S!1)(x!2)))") (("1" (assert) nil nil) ("2" (typepred "S!1") (("2" (expand "PreservesEq") (("2" (expand "subset?") (("2" (expand "member") (("2" (expand "EquivalenceKernel") (("2" (expand "restrict") (("2" (inst -2 "(x!2, rep(S!1)(EquivClass[X](S!1)(x!2)))") (("1" (assert) nil nil) ("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (replace -2 1 rl) (("2" (hide -2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((X formal-type-decl nil QuotientExtensionProperties nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (X1_pred const-decl "[X -> boolean]" QuotientExtensionProperties nil) (X1 formal-subtype-decl nil QuotientExtensionProperties nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (QuotientSub type-eq-decl nil QuotientSubDefinition nil) (Y formal-type-decl nil QuotientExtensionProperties nil) (lift const-decl "Y" QuotientExtensionProperties nil) (O const-decl "T3" function_props nil) (quotient_sub_map const-decl "QuotientSub(S)" QuotientSubDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (Quotient type-eq-decl nil QuotientDefinition nil) (rep const-decl "T" QuotientDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (rep_lemma formula-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil)) 296 200 t shostak)))(QuotientDistributive (EqualityExtension_is_equivalence 0 (EqualityExtension_is_equivalence-1 nil 3245193423 3342859448 ("" (grind :if-match nil) (("1" (forward-chain -3) nil nil) ("2" (forward-chain -2) nil nil) ("3" (inst? -1) nil nil)) nil) proved ((Y formal-type-decl nil QuotientDistributive nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (EqualityExtension const-decl "set[[[X, Y], [X, Y]]]" QuotientDistributive nil)) 1664 260 t shostak)) (EqualityExtensionPreservesEq 0 (EqualityExtensionPreservesEq-1 nil 3245193857 3342859448 ("" (grind :exclude "rep" :if-match nil) (("" (use "EquivClassEq[X]") (("" (assert) nil nil)) nil)) nil) proved ((EquivClassEq formula-decl nil QuotientDefinition nil) (Y formal-type-decl nil QuotientDistributive nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (EqualityExtension const-decl "set[[[X, Y], [X, Y]]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 216 190 t shostak)) (QuotientDistributive_TCC1 0 (QuotientDistributive_TCC1-1 nil 3245193423 3342859448 ("" (grind :exclude "rep" :if-match nil) (("" (apply-extensionality :hide? t) (("" (forward-chain -2) (("" (iff) (("" (prop) (("1" (forward-chain -4) nil nil) ("2" (hide -2) (("2" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((set type-eq-decl nil sets nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (Y formal-type-decl nil QuotientDistributive nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (EqualityExtension const-decl "set[[[X, Y], [X, Y]]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 262 210 t shostak)) (QuotientDistributive_TCC2 0 (QuotientDistributive_TCC2-1 nil 3245193423 3342859448 ("" (grind :exclude "rep" :if-match nil) (("1" (rewrite "restrict_full[[[X, Y], [X, Y]], bool]") (("1" (inst? 1) nil nil)) nil) ("2" (rewrite "restrict_full[[[X, Y], [X, Y]], bool]") (("2" (inst? 1) nil nil)) nil)) nil) proved ((EqualityExtension const-decl "set[[[X, Y], [X, Y]]]" QuotientDistributive nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (PreservesEq const-decl "bool" KernelDefinition nil)) 44 40 t shostak)) (QuotientDistributive 0 (QuotientDistributive-1 nil 3245193912 3342859450 ("" (skosimp*) (("" (expand "bijective?") (("" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (expand "lift") (("1" (expand "rep") (("1" (flatten) (("1" (typepred "x1!1" "x2!1") (("1" (skosimp*) (("1" (case "nonempty?(x1!1)") (("1" (case "nonempty?(x2!1)") (("1" (name-replace "ch1" "choose(x1!1)") (("1" (name-replace "ch2" "choose(x2!1)") (("1" (typepred "ch1" "ch2") (("1" (replace*) (("1" (hide -3 -4 -5 -6) (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "EqualityExtension") (("1" (flatten) (("1" (assert) (("1" (iff) (("1" (lemma "Kernel_quotient_map[X, X]") (("1" (inst?) (("1" (case "EquivalenceKernel[X, X, Quotient[X](S!1)](quotient_map(S!1))(ch1`1, ch2`1)") (("1" (replace -2) (("1" (hide -2) (("1" (assert) (("1" (smash) (("1" (typepred "S!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (hide -1 -6 -8 -10 -11 -12) (("1" (inst-cp -1 "ch1`1" "ch2`1") (("1" (assert) (("1" (hide -4) (("1" (inst -1 "x!1`1" "ch1`1") (("1" (assert) (("1" (hide -5) (("1" (inst-cp -3 "x!2`1" "ch2`1" "ch1`1") (("1" (assert) (("1" (inst-cp -3 "x!2`1" "ch1`1" "x!1`1") (("1" (assert) (("1" (inst -3 "x!2`1" "x!1`1" "x!3") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -3 -5 -7 -8 -9) (("2" (typepred "S!1") (("2" (expand "equivalence?") (("2" (flatten) (("2" (hide -1) (("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (inst -1 "x!2`1" "ch2`1") (("2" (assert) (("2" (hide -6) (("2" (inst-cp -2 "x!1`1" "ch1`1" "ch2`1") (("2" (assert) (("2" (hide -4 -6) (("2" (inst-cp -2 "x!1`1" "ch2`1" "x!2`1") (("2" (assert) (("2" (hide -1 -4) (("2" (inst -1 "x!1`1" "x!2`1" "x!3") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "EquivalenceKernel") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -3) (("2" (hide -1 -2 -3 -4 -5 2) (("2" (grind) (("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (hide -1 -2 -3 -4 2) (("2" (grind) (("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (typepred "y!1`1") (("2" (skosimp*) (("2" (case "nonempty?(y!1`1)") (("1" (inst 1 "EquivClass[[X, Y]](EqualityExtension(S!1))(choose(y!1`1), y!1`2)") (("1" (expand "lift") (("1" (expand "rep") (("1" (case "nonempty?(EquivClass[[X, Y]](EqualityExtension(S!1))(choose(y!1`1), y!1`2))") (("1" (name-replace "ch" "choose(EquivClass[[X, Y]](EqualityExtension(S!1))(choose(y!1`1), y!1`2))") (("1" (typepred "ch") (("1" (hide -2 -3) (("1" (expand "EquivClass") (("1" (expand "EqualityExtension") (("1" (flatten) (("1" (name-replace "ch1" "choose(y!1`1)") (("1" (typepred "ch1") (("1" (replace -4 -1) (("1" (assert) (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (replace -4) (("1" (hide -3 -4) (("1" (assert) (("1" (typepred "S!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (prop) (("1" (expand "transitive?") (("1" (inst-cp -4 "x!1" "ch1" "ch`1") (("1" (assert) (("1" (hide -2 -3 -6 -7) (("1" (inst -2 "x!1" "ch`1" "x!2") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (inst-cp -3 "ch1" "ch`1") (("2" (assert) (("2" (hide -7) (("2" (inst -3 "x!1" "ch1") (("2" (assert) (("2" (hide -2 -6) (("2" (inst-cp -4 "ch`1" "ch1" "x!1") (("2" (assert) (("2" (hide -2 -3) (("2" (inst -2 "ch`1" "x!1" "x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "ch`1") (("2" (apply-extensionality :hide? t) (("2" (expand "EquivClass") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (grind) (("2" (inst -1 "(epsilon(y!1`1), y!1`2)") (("1" (assert) (("1" (typepred "S!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "reflexive?") (("1" (inst?) (("1" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil) ("3" (propax) nil nil)) nil)) nil)) nil) ("2" (inst?) nil nil)) nil) ("2" (replace -1) (("2" (hide -1 2) (("2" (grind) (("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (TRUE const-decl "bool" booleans nil) nil nil (injective? const-decl "bool" functions nil) (lift const-decl "Y" QuotientExtensionProperties nil) (Kernel_quotient_map formula-decl nil QuotientKernelProperties nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (EqualityExtension_is_equivalence application-judgement "equivalence[[X, Y]]" QuotientDistributive nil) (choose const-decl "(p)" sets nil) (reflexive? const-decl "bool" relations nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientDistributive nil) (Y formal-type-decl nil QuotientDistributive nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EqualityExtension const-decl "set[[[X, Y], [X, Y]]]" QuotientDistributive nil) (Quotient type-eq-decl nil QuotientDefinition nil) (rep const-decl "T" QuotientDefinition nil)) 1235 970 t shostak)) (RelExtension_TCC1 0 (RelExtension_TCC1-2 "" 3332191104 3342859451 ("" (grind :exclude "rep" :if-match nil) (("1" (forward-chain -6) nil nil) ("2" (forward-chain -3) nil nil) ("3" (forward-chain -5) nil nil) ("4" (forward-chain -2) nil nil) ("5" (inst? -4) nil nil) ("6" (inst? -1) nil nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence type-eq-decl nil relations nil) (Y formal-type-decl nil QuotientDistributive nil) (equivalence? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 1197 1070 t shostak) (RelExtension_TCC1-1 nil 3245193424 3307983063 ("" (grind :exclude "rep" :if-match nil) (("1" (forward-chain -3) nil nil) ("2" (forward-chain -6) nil nil) ("3" (forward-chain -2) nil nil) ("4" (forward-chain -5) nil nil) ("5" (inst? -1) nil nil) ("6" (inst? -4) nil nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence type-eq-decl nil relations nil) (Y formal-type-decl nil QuotientDistributive nil) (equivalence? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 1460 920 t shostak)) (RelExtensionPreservesEq 0 (RelExtensionPreservesEq-1 nil 3245194382 3342859452 ("" (grind :if-match nil) (("1" (use "EquivClassEq[Y]") (("1" (assert) nil nil)) nil) ("2" (use "EquivClassEq[X]") (("2" (assert) nil nil)) nil)) nil) proved ((EquivClassEq formula-decl nil QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (Y formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (X formal-type-decl nil QuotientDistributive nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (RelExtension const-decl "equivalence[[X, Y]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 554 480 t shostak)) (RelQuotientDistributive_TCC1 0 (RelQuotientDistributive_TCC1-1 nil 3245193424 3342859452 ("" (grind :exclude "rep" :if-match nil) (("1" (apply-extensionality :hide? t) (("1" (hide -4 -5 -6 -7) (("1" (forward-chain -2) (("1" (iff) (("1" (prop) (("1" (forward-chain -4) nil nil) ("2" (hide -2) (("2" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (apply-extensionality :hide? t) (("2" (hide -1 -2 -3 -4 -8) (("2" (forward-chain -1) (("2" (iff) (("2" (prop) (("1" (forward-chain -3) nil nil) ("2" (hide -2) (("2" (forward-chain -2) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((set type-eq-decl nil sets nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (Y formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (X formal-type-decl nil QuotientDistributive nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (RelExtension const-decl "equivalence[[X, Y]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 606 530 t shostak)) (RelQuotientDistributive_TCC2 0 (RelQuotientDistributive_TCC2-1 nil 3245193424 3342859452 ("" (grind :exclude "rep" :if-match nil) (("1" (rewrite "restrict_full[[[X, Y], [X, Y]], bool]") (("1" (inst?) nil nil)) nil) ("2" (rewrite "restrict_full[[[X, Y], [X, Y]], bool]") (("2" (inst?) nil nil)) nil)) nil) proved ((RelExtension const-decl "equivalence[[X, Y]]" QuotientDistributive nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (PreservesEq const-decl "bool" KernelDefinition nil)) 51 50 t shostak)) (RelQuotientDistributive 0 (RelQuotientDistributive-1 nil 3245194514 3342859454 ("" (skosimp*) (("" (expand "bijective?") (("" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (expand "lift") (("1" (flatten) (("1" (typepred "x1!1" "x2!1") (("1" (skosimp*) (("1" (case "nonempty?(x1!1)") (("1" (case "nonempty?(x2!1)") (("1" (expand "rep") (("1" (name-replace "ch1" "choose(x1!1)") (("1" (name-replace "ch2" "choose(x2!1)") (("1" (typepred "ch1" "ch2") (("1" (replace -5) (("1" (hide -5) (("1" (replace -5) (("1" (hide -5) (("1" (hide -3 -4) (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "RelExtension") (("1" (flatten) (("1" (assert) (("1" (iff) (("1" (lemma "Kernel_quotient_map[X, X]") (("1" (lemma "Kernel_quotient_map[Y, Y]") (("1" (inst?) (("1" (inst?) (("1" (case "EquivalenceKernel[X, X, Quotient[X](S!1)](quotient_map(S!1))(ch1`1, ch2`1)") (("1" (case "EquivalenceKernel[Y, Y, Quotient[Y](R!1)](quotient_map(R!1))(ch1`2, ch2`2)") (("1" (replace -3) (("1" (replace -4) (("1" (hide -3 -4) (("1" (assert) (("1" (smash) (("1" (typepred "R!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (hide -1 -5 -6 -8 -10 -12 -13) (("1" (inst-cp -1 "ch1`2" "ch2`2") (("1" (assert) (("1" (hide -4) (("1" (inst -1 "x!1`2" "ch1`2") (("1" (assert) (("1" (hide -5) (("1" (inst-cp -3 "x!2`2" "ch2`2" "ch1`2") (("1" (assert) (("1" (hide -6 -2) (("1" (inst-cp -2 "x!2`2" "ch1`2" "x!1`2") (("1" (assert) (("1" (hide -4 -1) (("1" (inst -1 "x!2`2" "x!1`2" "x!4") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -4 -6 -8 -9 -10) (("2" (typepred "S!1") (("2" (expand "equivalence?") (("2" (flatten) (("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (hide -1) (("2" (inst-cp -1 "ch1`1" "ch2`1") (("2" (assert) (("2" (hide -4) (("2" (inst -1 "x!1`1" "ch1`1") (("2" (assert) (("2" (hide -5) (("2" (inst-cp -3 "x!2`1" "ch2`1" "ch1`1") (("2" (assert) (("2" (hide -6 -2) (("2" (inst-cp -2 "x!2`1" "ch1`1" "x!1`1") (("2" (assert) (("2" (hide -4 -1) (("2" (inst -1 "x!2`1" "x!1`1" "x!3") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -2 -3 -5 -7 -9 -10) (("3" (typepred "R!1") (("3" (expand "equivalence?") (("3" (flatten) (("3" (hide -1) (("3" (expand "symmetric?") (("3" (expand "transitive?") (("3" (inst -1 "x!2`2" "ch2`2") (("3" (assert) (("3" (hide -6) (("3" (inst-cp -2 "x!1`2" "ch1`2" "ch2`2") (("3" (assert) (("3" (hide -6 -4) (("3" (inst-cp -2 "x!1`2" "ch2`2" "x!2`2") (("3" (assert) (("3" (hide -4 -1) (("3" (inst -1 "x!1`2" "x!2`2" "x!4") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide -1 -4 -6 -8 -9 -10) (("4" (typepred "S!1") (("4" (expand "equivalence?") (("4" (flatten) (("4" (expand "symmetric?") (("4" (expand "transitive?") (("4" (hide -1) (("4" (inst -1 "x!2`1" "ch2`1") (("4" (assert) (("4" (hide -6) (("4" (inst-cp -2 "x!1`1" "ch1`1" "ch2`1") (("4" (assert) (("4" (hide -6 -4) (("4" (inst-cp -2 "x!1`1" "ch2`1" "x!2`1") (("4" (assert) (("4" (hide -4 -1) (("4" (inst -1 "x!1`1" "x!2`1" "x!3") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "EquivalenceKernel") (("2" (propax) nil nil)) nil)) nil) ("2" (expand "EquivalenceKernel") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -3) (("2" (hide -1 -2 -3 -4 -5 2) (("2" (grind) (("1" (typepred "R!1") (("1" (grind) nil nil)) nil) ("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (hide -1 -2 -3 -4 2) (("2" (grind) (("1" (typepred "R!1") (("1" (grind) nil nil)) nil) ("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (typepred "y!1`1") (("2" (typepred "y!1`2") (("2" (skosimp*) (("2" (case "nonempty?(y!1`1)") (("1" (case "nonempty?(y!1`2)") (("1" (inst 1 "EquivClass[[X, Y]](RelExtension(S!1,R!1))(choose(y!1`1), choose(y!1`2))") (("1" (case "nonempty?(EquivClass[[X, Y]]
                                             (RelExtension(S!1, R!1))(choose(y!1`1), choose(y!1`2)))") (("1" (expand "lift") (("1" (expand "rep") (("1" (name-replace "ch" "choose(EquivClass[[X, Y]]
                                            (RelExtension(S!1, R!1))(choose(y!1`1), choose(y!1`2)))") (("1" (typepred "ch") (("1" (expand "EquivClass") (("1" (expand "RelExtension") (("1" (flatten) (("1" (name-replace "ch1" "choose(y!1`1)") (("1" (name-replace "ch2" "choose(y!1`2)") (("1" (typepred "ch1" "ch2") (("1" (replace -8 -2) (("1" (replace -9 -1) (("1" (assert) (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (apply-extensionality :hide? t) (("1" (replace -9 1) (("1" (assert) (("1" (iff) (("1" (hide -2 -4 -5 -6 -7 -8 -9) (("1" (typepred "S!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (prop) (("1" (hide -2) (("1" (inst-cp -2 "x!2" "ch1" "ch`1") (("1" (assert) (("1" (hide -4 -5) (("1" (inst -2 "x!2" "ch`1" "x!3") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst-cp -2 "ch1" "ch`1") (("2" (assert) (("2" (hide -6) (("2" (inst -2 "x!2" "ch1") (("2" (assert) (("2" (hide -5) (("2" (inst-cp -4 "ch`1" "ch1" "x!2") (("2" (assert) (("2" (hide -3 -2) (("2" (inst -2 "ch`1" "x!2" "x!3") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (apply-extensionality :hide? t) (("2" (replace -8 1) (("2" (assert) (("2" (iff) (("2" (typepred "R!1") (("2" (expand "equivalence?") (("2" (flatten) (("2" (hide -1 -4 -6 -8 -9 -10 -11 -12) (("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (prop) (("1" (hide -2) (("1" (inst-cp -2 "x!1" "ch2" "ch`2") (("1" (assert) (("1" (hide -4 -5) (("1" (inst -2 "x!1" "ch`2" "x!3") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst-cp -2 "ch2" "ch`2") (("2" (assert) (("2" (hide -6) (("2" (inst -2 "x!1" "ch2") (("2" (assert) (("2" (hide -5) (("2" (inst-cp -4 "ch`2" "ch2" "x!1") (("2" (assert) (("2" (hide -3 -2) (("2" (inst -2 "ch`2" "x!1" "x!3") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "EquivClass") (("3" (inst 1 "ch`2") nil nil)) nil) ("4" (expand "EquivClass") (("4" (inst 1 "ch`1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "nonempty?" 1) (("2" (expand "empty?") (("2" (expand "member") (("2" (expand "EquivClass" -1) (("2" (expand "RelExtension" -1) (("2" (inst -1 "(choose(y!1`1), choose(y!1`2))") (("2" (typepred "S!1" "R!1") (("2" (expand "equivalence?") (("2" (flatten) (("2" (hide -2 -3 -5 -6) (("2" (expand "reflexive?") (("2" (inst?) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (propax) nil nil) ("4" (propax) nil nil)) nil) ("2" (expand "EquivClass" 1) (("2" (expand "RelExtension" 1) (("2" (inst 1 "(choose(y!1`1), choose(y!1`2))") nil nil)) nil)) nil)) nil) ("2" (hide -1 -3 2) (("2" (replace -1) (("2" (hide -1) (("2" (grind) (("2" (typepred "R!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -2 1) (("2" (hide -1 -2 2) (("2" (grind) (("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) nil nil nil (injective? const-decl "bool" functions nil) (lift const-decl "Y" QuotientExtensionProperties nil) (Quotient type-eq-decl nil QuotientDefinition nil) (RelExtension const-decl "equivalence[[X, Y]]" QuotientDistributive nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (Y formal-type-decl nil QuotientDistributive nil) (X formal-type-decl nil QuotientDistributive nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (reflexive? const-decl "bool" relations nil) (rep const-decl "T" QuotientDefinition nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (Kernel_quotient_map formula-decl nil QuotientKernelProperties nil) (choose const-decl "(p)" sets nil)) 1881 1450 t shostak)) (FunExtension_TCC1 0 (FunExtension_TCC1-1 nil 3245193424 3342859455 ("" (grind :exclude "rep" :if-match nil) (("1" (typepred "F!1(x!2)") (("1" (inst?) (("1" (inst?) (("1" (grind :exclude "rep" :if-match nil) (("1" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil) ("2" (inst?) (("2" (typepred "F!1(x!2)") (("2" (grind :exclude "rep" :if-match nil) (("2" (forward-chain -2) nil nil)) nil)) nil)) nil) ("3" (typepred "F!1(x!2)") (("3" (grind :exclude "rep" :if-match nil) (("3" (inst? -1) nil nil)) nil)) nil)) nil) proved ((equivalence type-eq-decl nil relations nil) (X formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (Y formal-type-decl nil QuotientDistributive nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (equivalence? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 502 420 t shostak)) (FunExtensionPreservesEq 0 (FunExtensionPreservesEq-2 "Fix for 3.2" 3307984197 3342859455 ("" (grind) (("" (apply-extensionality :hide? t) (("1" (apply-extensionality :hide? t) (("1" (inst?) (("1" (iff) (("1" (typepred "F!1(x!2)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (prop) (("1" (inst -2 "x!1`1(x!2)" "x!1`2(x!2)") (("1" (assert) (("1" (forward-chain -3) nil nil)) nil)) nil) ("2" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst? 1) nil nil)) nil) ("3" (skolem!) (("3" (inst? 1) nil nil)) nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (Y formal-type-decl nil QuotientDistributive nil) (X formal-type-decl nil QuotientDistributive nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (NOT const-decl "[bool -> bool]" booleans nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (FunExtension const-decl "equivalence[[X -> Y]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 294 230 t shostak) (FunExtensionPreservesEq-1 nil 3245194994 3307983073 ("" (grind) (("" (apply-extensionality :hide? t) (("" (apply-extensionality :hide? t) (("" (inst?) (("" (iff) (("" (typepred "F!1(x!2)") (("" (expand "equivalence?") (("" (flatten) (("" (hide -1) (("" (expand "symmetric?") (("" (expand "transitive?") (("" (prop) (("1" (inst -2 "x!1`1(x!2)" "x!1`2(x!2)") (("1" (assert) (("1" (forward-chain -3) nil nil)) nil)) nil) ("2" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((X formal-type-decl nil QuotientDistributive nil) (Y formal-type-decl nil QuotientDistributive nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (Quotient type-eq-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (FunExtension const-decl "equivalence[[X -> Y]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 1109 660 t shostak)) (FunQuotientDistributive_TCC1 0 (FunQuotientDistributive_TCC1-2 "" 3307985072 3342859455 ("" (grind :exclude "rep" :if-match nil) (("" (apply-extensionality :hide? t) (("1" (inst?) (("1" (typepred "F!1(x!2)") (("1" (apply-extensionality :hide? t) (("1" (flatten) (("1" (forward-chain -2) (("1" (iff) (("1" (prop) (("1" (forward-chain -4) nil nil) ("2" (hide -2) (("2" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst?) nil nil)) nil) ("3" (skolem!) (("3" (inst?) nil nil)) nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (Y formal-type-decl nil QuotientDistributive nil) (X formal-type-decl nil QuotientDistributive nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (NOT const-decl "[bool -> bool]" booleans nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (FunExtension const-decl "equivalence[[X -> Y]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 267 220 t shostak) (FunQuotientDistributive_TCC1-1 nil 3245193424 3307983074 ("" (grind :exclude "rep" :if-match nil) (("" (apply-extensionality :hide? t) (("" (inst?) (("" (typepred "F!1(x!2)") (("" (apply-extensionality :hide? t) (("" (flatten) (("" (forward-chain -2) (("" (iff) (("" (prop) (("1" (forward-chain -4) nil nil) ("2" (hide -2) (("2" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((X formal-type-decl nil QuotientDistributive nil) (Y formal-type-decl nil QuotientDistributive nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (Quotient type-eq-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (FunExtension const-decl "equivalence[[X -> Y]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 737 660 t shostak)) (FunQuotientDistributive_TCC2 0 (FunQuotientDistributive_TCC2-1 nil 3245193424 3342859455 ("" (grind :exclude "rep" :if-match nil) (("1" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (inst?) nil nil)) nil) ("2" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("2" (inst?) nil nil)) nil)) nil) proved ((FunExtension const-decl "equivalence[[X -> Y]]" QuotientDistributive nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (PreservesEq const-decl "bool" KernelDefinition nil)) 44 40 t shostak)) (FunQuotientDistributive 0 (FunQuotientDistributive-3 "" 3342937949 3342937949 ("" (skosimp) (("" (lemma "FunExtensionPreservesEq") (("" (expand "bijective?") (("" (inst -1 "F!1") (("" (prop) (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (skosimp*) (("1" (replace -1 :hide? t) (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "FunExtension" 1) (("1" (expand "lift") (("1" (decompose-equality) (("1" (iff) (("1" (prop) (("1" (skosimp*) (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (expand "quotient_map" -2) (("1" (expand "EquivClass" -2) (("1" (decompose-equality) (("1" (inst -1 "x!1(x!4)") (("1" (expand "rep") (("1" (expand "FunExtension") (("1" (expand "PreservesEq") (("1" (expand "subset?") (("1" (expand "member") (("1" (expand "EquivalenceKernel") (("1" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (name-replace "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (name-replace "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (inst -3 "(ch1, ch2)") (("1" (prop) (("1" (decompose-equality) (("1" (inst -1 "x!4") (("1" (decompose-equality) (("1" (typepred "ch1") (("1" (typepred "ch2") (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (inst -3 "x!2(x!4)") (("1" (typepred "F!1(x!4)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (assert) (("1" (inst-cp -1 "x!2(x!4)" "ch2(x!4)") (("1" (assert) (("1" (replace -2) (("1" (hide -2) (("1" (inst -1 "x!1(x!4)" "ch1(x!4)") (("1" (assert) (("1" (replace -1) (("1" (hide -1 -4 -5) (("1" (inst-cp -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("1" (assert) (("1" (hide -3 -4) (("1" (inst -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "ch1" "ch2") (("2" (hide 1) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (typepred "F!1(x!4)") (("2" (expand "equivalence?") (("2" (flatten) (("2" (hide -1) (("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (inst -1 "x!1(x!4)" "ch1(x!4)") (("2" (assert) (("2" (replace -1) (("2" (hide -1) (("2" (hide -2) (("2" (inst-cp -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("2" (assert) (("2" (hide -3 -4) (("2" (inst -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst -1 "x!2") (("2" (expand "member") (("2" (skosimp) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst -1 "x!1") (("2" (expand "member") (("2" (skosimp) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind :if-match nil) (("2" (expand "EquivClass" 1) (("2" (expand "FunExtension" 1) (("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil) ("3" (inst 1 "x!1") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (expand "quotient_map") (("2" (expand "EquivClass") (("2" (decompose-equality) (("1" (expand "PreservesEq") (("1" (expand "subset?") (("1" (expand "member") (("1" (expand "FunExtension") (("1" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (expand "EquivalenceKernel") (("1" (expand "rep") (("1" (name-replace "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (name-replace "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (inst -3 "(ch1, ch2)") (("1" (typepred "ch1" "ch2") (("1" (hide -5) (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (inst -3 "ch1(x!4)") (("1" (typepred "F!1(x!4)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "reflexive?") (("1" (inst -1 "ch1(x!4)") (("1" (assert) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (inst-cp -1 "ch2(x!4)" "ch1(x!4)") (("1" (assert) (("1" (hide -6) (("1" (inst -1 "x!2(x!4)" "ch2(x!4)") (("1" (assert) (("1" (hide -5) (("1" (inst-cp -3 "x!1(x!4)" "ch1(x!4)" "ch2(x!4)") (("1" (assert) (("1" (hide -5 -2) (("1" (inst-cp -2 "x!1(x!4)" "ch2(x!4)" "x!2(x!4)") (("1" (assert) (("1" (hide -4 -1) (("1" (forward-chain -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind :if-match nil) (("2" (expand "FunExtension") (("2" (expand "EquivClass") (("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil) ("3" (inst 1 "x!1") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!2") (("2" (apply-extensionality :hide? t) (("2" (expand "FunExtension") (("2" (expand "EquivClass") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("3" (inst 1 "x!2") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil) ("4" (inst 1 "x!1") (("4" (apply-extensionality :hide? t) (("4" (expand "EquivClass") (("4" (propax) nil nil)) nil)) nil)) nil) ("5" (inst 1 "x!1") (("5" (apply-extensionality :hide? t) (("5" (expand "EquivClass") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (expand "surjective?") (("2" (skosimp) (("2" (inst 1 "{ f : [X -> Y] | FORALL (x: X): (y!1(x))(f(x)) }") (("1" (expand "lift") (("1" (apply-extensionality :hide? t) (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "rep") (("1" (name-replace "ch" "choose({f: [X -> Y] | FORALL (x: X): y!1(x)(f(x))})") (("1" (typepred "ch") (("1" (typepred "F!1(x!1)") (("1" (inst -2 "x!1") (("1" (typepred "y!1(x!1)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (decompose-equality) (("1" (inst-cp -1 "x!2") (("1" (inst -1 "ch(x!1)") (("1" (replace -4) (("1" (replace -2) (("1" (hide -2 -4) (("1" (iff) (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -2) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (prop) (("1" (inst -4 "x!3" "ch(x!1)" "x!2") (("1" (assert) nil nil)) nil) ("2" (inst -3 "x!3" "ch(x!1)") (("2" (assert) (("2" (hide -2) (("2" (inst -3 "ch(x!1)" "x!3" "x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind :if-match nil) (("2" (inst -1 "LAMBDA (x: X): choose(y!1(x))") (("1" (skosimp) (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (replace -1) (("1" (beta) (("1" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (propax) nil nil)) nil) ("2" (inst -1 "x!4") (("2" (hide -1 2) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (expand "EquivClass") (("2" (decompose-equality) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (replace -1 :hide? t) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (expand "EquivClass") (("2" (expand "FunExtension") (("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (prop) (("1" (skosimp) (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (decompose-equality) (("1" (name-replace "ch" "choose(y!1(x!3))") (("1" (typepred "ch") (("1" (inst -3 "x!3") (("1" (inst-cp -2 "ch") (("1" (replace -1) (("1" (inst -2 "x!2(x!3)") (("1" (replace -4) (("1" (hide -1 -4) (("1" (typepred "F!1(x!3)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (inst -1 "x!4" "ch") (("1" (assert) (("1" (hide -4) (("1" (inst -2 "ch" "x!4" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -1 "x!3") (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (expand "EquivClass") (("2" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (typepred "F!1(x!3)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1 -2) (("1" (expand "transitive?") (("1" (inst -1 "x!4" "ch" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind :if-match nil) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind :if-match nil) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (expand "EquivClass") (("1" (expand "FunExtension") (("1" (prop) (("1" (skosimp) (("1" (name-replace "ch" "choose(y!1(x!3))") (("1" (typepred "ch") (("1" (inst -2 "x!3") (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (typepred "F!1(x!3)") (("1" (grind :if-match nil) (("1" (hide -1) (("1" (inst -1 "x!4" "ch") (("1" (assert) (("1" (hide -3) (("1" (inst -2 "ch" "x!4" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (inst -2 "x!3") (("2" (replace -1 :hide? t) (("2" (expand "EquivClass") (("2" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (typepred "F!1(x!3)") (("1" (grind :if-match nil) (("1" (hide -1 -2) (("1" (inst -1 "x!4" "ch" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (expand "EquivClass") (("1" (expand "FunExtension") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (prop) (("1" (skosimp) (("1" (name-replace "ch" "choose(y!1(x!2))") (("1" (typepred "ch") (("1" (typepred "y!1(x!2)") (("1" (skosimp) (("1" (inst -3 "x!2") (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (typepred "F!1(x!2)") (("1" (grind :if-match nil) (("1" (hide -1) (("1" (inst -1 "x!3" "ch") (("1" (assert) (("1" (hide -3) (("1" (inst -2 "ch" "x!3" "x!1(x!2)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (inst -2 "x!2") (("2" (name-replace "ch" "choose(y!1(x!2))") (("2" (typepred "ch") (("2" (replace -2 :hide? t) (("2" (expand "EquivClass") (("2" (typepred "F!1(x!2)") (("2" (grind :if-match nil) (("2" (hide -1 -2) (("2" (inst -1 "x!3" "ch" "x!1(x!2)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!1)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!2") (("2" (grind) (("2" (typepred "F!1(x!1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!1)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!2") (("2" (grind) (("2" (typepred "F!1(x!1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 924549 7730 t shostak) (FunQuotientDistributive-2 "Fix for 3.2" 3307985259 3342859463 ("" (skosimp) (("" (lemma "FunExtensionPreservesEq") (("" (expand "bijective?") (("" (inst -1 "F!1") (("" (prop) (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (skosimp*) (("1" (replace -1 :hide? t) (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "FunExtension" 1) (("1" (expand "lift") (("1" (decompose-equality) (("1" (iff) (("1" (prop) (("1" (skosimp*) (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (expand "quotient_map" -2) (("1" (expand "EquivClass" -2) (("1" (decompose-equality) (("1" (inst -1 "x!1(x!4)") (("1" (expand "rep") (("1" (expand "FunExtension") (("1" (expand "PreservesEq") (("1" (expand "subset?") (("1" (expand "member") (("1" (expand "EquivalenceKernel") (("1" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (name-replace "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (name-replace "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (inst -3 "(ch1, ch2)") (("1" (prop) (("1" (decompose-equality) (("1" (inst -1 "x!4") (("1" (decompose-equality) (("1" (typepred "ch1") (("1" (typepred "ch2") (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (inst -3 "x!2(x!4)") (("1" (typepred "F!1(x!4)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (assert) (("1" (inst-cp -1 "x!2(x!4)" "ch2(x!4)") (("1" (assert) (("1" (replace -2) (("1" (hide -2) (("1" (inst -1 "x!1(x!4)" "ch1(x!4)") (("1" (assert) (("1" (replace -1) (("1" (hide -1 -4 -5) (("1" (inst-cp -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("1" (assert) (("1" (hide -3 -4) (("1" (inst -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (expand "EquivClass") (("2" (inst?) nil nil)) nil)) nil) ("3" (hide-all-but 1) (("3" (expand "EquivClass") (("3" (inst?) nil nil)) nil)) nil) ("4" (hide-all-but 1) (("4" (expand "EquivClass") (("4" (inst?) nil nil)) nil)) nil) ("5" (hide-all-but 1) (("5" (expand "EquivClass") (("5" (inst?) nil nil)) nil)) nil)) nil) ("2" (typepred "ch1" "ch2") (("2" (hide 1) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (typepred "F!1(x!4)") (("2" (expand "equivalence?") (("2" (flatten) (("2" (hide -1) (("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (inst -1 "x!1(x!4)" "ch1(x!4)") (("2" (assert) (("2" (replace -1) (("2" (hide -1) (("2" (hide -2) (("2" (inst-cp -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("2" (assert) (("2" (hide -3 -4) (("2" (inst -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst -1 "x!2") (("2" (expand "member") (("2" (skosimp) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst -1 "x!1") (("2" (expand "member") (("2" (skosimp) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind :if-match nil) (("2" (expand "EquivClass" 1) (("2" (expand "FunExtension" 1) (("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil) ("3" (inst 1 "x!1") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (expand "quotient_map") (("2" (expand "EquivClass") (("2" (decompose-equality) (("1" (expand "PreservesEq") (("1" (expand "subset?") (("1" (expand "member") (("1" (expand "FunExtension") (("1" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (expand "EquivalenceKernel") (("1" (expand "rep") (("1" (name-replace "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (name-replace "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (inst -3 "(ch1, ch2)") (("1" (typepred "ch1" "ch2") (("1" (hide -5) (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (inst -3 "ch1(x!4)") (("1" (typepred "F!1(x!4)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "reflexive?") (("1" (inst -1 "ch1(x!4)") (("1" (assert) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (inst-cp -1 "ch2(x!4)" "ch1(x!4)") (("1" (assert) (("1" (hide -6) (("1" (inst -1 "x!2(x!4)" "ch2(x!4)") (("1" (assert) (("1" (hide -5) (("1" (inst-cp -3 "x!1(x!4)" "ch1(x!4)" "ch2(x!4)") (("1" (assert) (("1" (hide -5 -2) (("1" (inst-cp -2 "x!1(x!4)" "ch2(x!4)" "x!2(x!4)") (("1" (assert) (("1" (hide -4 -1) (("1" (forward-chain -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind :if-match nil) (("2" (expand "FunExtension") (("2" (expand "EquivClass") (("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil) ("3" (inst 1 "x!1") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!2") (("2" (apply-extensionality :hide? t) (("2" (expand "FunExtension") (("2" (expand "EquivClass") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("3" (inst 1 "x!2") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil) ("4" (inst 1 "x!1") (("4" (apply-extensionality :hide? t) (("4" (expand "EquivClass") (("4" (propax) nil nil)) nil)) nil)) nil) ("5" (inst 1 "x!1") (("5" (apply-extensionality :hide? t) (("5" (expand "EquivClass") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (expand "surjective?") (("2" (skosimp) (("2" (inst 1 "{ f : [X -> Y] | FORALL (x: X): (y!1(x))(f(x)) }") (("1" (expand "lift") (("1" (apply-extensionality :hide? t) (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "rep") (("1" (name-replace "ch" "choose({f: [X -> Y] | FORALL (x: X): y!1(x)(f(x))})") (("1" (typepred "ch") (("1" (typepred "F!1(x!1)") (("1" (inst -2 "x!1") (("1" (typepred "y!1(x!1)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (decompose-equality) (("1" (inst-cp -1 "x!2") (("1" (inst -1 "ch(x!1)") (("1" (replace -4) (("1" (replace -2) (("1" (hide -2 -4) (("1" (iff) (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -2) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (prop) (("1" (inst -4 "x!3" "ch(x!1)" "x!2") (("1" (assert) nil nil)) nil) ("2" (inst -3 "x!3" "ch(x!1)") (("2" (assert) (("2" (hide -2) (("2" (inst -3 "ch(x!1)" "x!3" "x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind :if-match nil) (("2" (inst -1 "LAMBDA (x: X): choose(y!1(x))") (("1" (skosimp) (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (replace -1) (("1" (beta) (("1" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (propax) nil nil)) nil) ("2" (inst -1 "x!4") (("2" (hide -1 2) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (expand "EquivClass") (("2" (decompose-equality) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (replace -1 :hide? t) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (expand "EquivClass") (("2" (expand "FunExtension") (("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (prop) (("1" (skosimp) (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (decompose-equality) (("1" (name-replace "ch" "choose(y!1(x!3))") (("1" (typepred "ch") (("1" (inst -3 "x!3") (("1" (inst-cp -2 "ch") (("1" (replace -1) (("1" (inst -2 "x!2(x!3)") (("1" (replace -4) (("1" (hide -1 -4) (("1" (typepred "F!1(x!3)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (inst -1 "x!4" "ch") (("1" (assert) (("1" (hide -4) (("1" (inst -2 "ch" "x!4" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -1 "x!3") (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (expand "EquivClass") (("2" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (typepred "F!1(x!3)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1 -2) (("1" (expand "transitive?") (("1" (inst -1 "x!4" "ch" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (expand "EquivClass") (("1" (expand "FunExtension") (("1" (prop) (("1" (skosimp) (("1" (name-replace "ch" "choose(y!1(x!3))") (("1" (typepred "ch") (("1" (inst -2 "x!3") (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (typepred "F!1(x!3)") (("1" (grind :if-match nil) (("1" (hide -1) (("1" (inst -1 "x!4" "ch") (("1" (assert) (("1" (hide -3) (("1" (inst -2 "ch" "x!4" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (inst -2 "x!3") (("2" (replace -1 :hide? t) (("2" (expand "EquivClass") (("2" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (typepred "F!1(x!3)") (("1" (grind :if-match nil) (("1" (hide -1 -2) (("1" (inst -1 "x!4" "ch" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (expand "EquivClass") (("1" (expand "FunExtension") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (prop) (("1" (skosimp) (("1" (name-replace "ch" "choose(y!1(x!2))") (("1" (typepred "ch") (("1" (typepred "y!1(x!2)") (("1" (skosimp) (("1" (inst -3 "x!2") (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (typepred "F!1(x!2)") (("1" (grind :if-match nil) (("1" (hide -1) (("1" (inst -1 "x!3" "ch") (("1" (assert) (("1" (hide -3) (("1" (inst -2 "ch" "x!3" "x!1(x!2)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (inst -2 "x!2") (("2" (name-replace "ch" "choose(y!1(x!2))") (("2" (typepred "ch") (("2" (replace -2 :hide? t) (("2" (expand "EquivClass") (("2" (typepred "F!1(x!2)") (("2" (grind :if-match nil) (("2" (hide -1 -2) (("2" (inst -1 "x!3" "ch" "x!1(x!2)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!1)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!2") (("2" (grind) (("2" (typepred "F!1(x!1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!1)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!2") (("2" (grind) (("2" (typepred "F!1(x!1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (FunExtension const-decl "equivalence[[X -> Y]]" QuotientDistributive nil) (Quotient type-eq-decl nil QuotientDefinition nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (rep const-decl "T" QuotientDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (PreservesEq const-decl "bool" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict_full formula-decl nil restrict_props nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (reflexive_restrict application-judgement "(reflexive?[S])" restrict_order_props nil) (symmetric_restrict application-judgement "(symmetric?[S])" restrict_order_props nil) (transitive_restrict application-judgement "(transitive?[S])" restrict_order_props nil) (equivalence_restrict application-judgement "(equivalence?[S])" restrict_order_props nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (restrict const-decl "R" restrict nil) (lift const-decl "Y" QuotientExtensionProperties nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) nil nil (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (Y formal-type-decl nil QuotientDistributive nil) (X formal-type-decl nil QuotientDistributive nil) (FunExtensionPreservesEq formula-decl nil QuotientDistributive nil)) 7499 6300 t shostak) (FunQuotientDistributive-1 nil 3245195217 3307983089 ("" (skosimp) (("" (lemma "FunExtensionPreservesEq") (("" (expand "bijective?") (("" (inst -1 "F!1") (("" (prop) (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (skosimp*) (("1" (replace -1 :hide? t) (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "FunExtension" 1) (("1" (expand "lift") (("1" (decompose-equality) (("1" (iff) (("1" (prop) (("1" (skosimp*) (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (expand "quotient_map" -2) (("1" (expand "EquivClass" -2) (("1" (decompose-equality) (("1" (inst -1 "x!1(x!4)") (("1" (expand "rep") (("1" (expand "FunExtension") (("1" (expand "PreservesEq") (("1" (expand "subset?") (("1" (expand "member") (("1" (expand "EquivalenceKernel") (("1" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (name-replace "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (name-replace "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (inst -3 "(ch1, ch2)") (("1" (prop) (("1" (decompose-equality) (("1" (inst -1 "x!4") (("1" (decompose-equality) (("1" (typepred "ch1") (("1" (typepred "ch2") (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (inst -3 "x!2(x!4)") (("1" (typepred "F!1(x!4)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (assert) (("1" (inst-cp -1 "x!2(x!4)" "ch2(x!4)") (("1" (assert) (("1" (replace -2) (("1" (hide -2) (("1" (inst -1 "x!1(x!4)" "ch1(x!4)") (("1" (assert) (("1" (replace -1) (("1" (hide -1 -4 -5) (("1" (inst-cp -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("1" (assert) (("1" (hide -3 -4) (("1" (inst -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "ch1" "ch2") (("2" (hide 1) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (typepred "F!1(x!4)") (("2" (expand "equivalence?") (("2" (flatten) (("2" (hide -1) (("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (inst -1 "x!1(x!4)" "ch1(x!4)") (("2" (assert) (("2" (replace -1) (("2" (hide -1) (("2" (hide -2) (("2" (inst-cp -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("2" (assert) (("2" (hide -3 -4) (("2" (inst -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst -1 "x!2") (("2" (expand "member") (("2" (skosimp) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst -1 "x!1") (("2" (expand "member") (("2" (skosimp) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind :if-match nil) (("2" (expand "EquivClass" 1) (("2" (expand "FunExtension" 1) (("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil) ("3" (inst 1 "x!1") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (expand "quotient_map") (("2" (expand "EquivClass") (("2" (decompose-equality) (("1" (expand "PreservesEq") (("1" (expand "subset?") (("1" (expand "member") (("1" (expand "FunExtension") (("1" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (expand "EquivalenceKernel") (("1" (expand "rep") (("1" (name-replace "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (name-replace "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (inst -3 "(ch1, ch2)") (("1" (typepred "ch1" "ch2") (("1" (hide -5) (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (inst -3 "ch1(x!4)") (("1" (typepred "F!1(x!4)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "reflexive?") (("1" (inst -1 "ch1(x!4)") (("1" (assert) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (inst-cp -1 "ch2(x!4)" "ch1(x!4)") (("1" (assert) (("1" (hide -6) (("1" (inst -1 "x!2(x!4)" "ch2(x!4)") (("1" (assert) (("1" (hide -5) (("1" (inst-cp -3 "x!1(x!4)" "ch1(x!4)" "ch2(x!4)") (("1" (assert) (("1" (hide -5 -2) (("1" (inst-cp -2 "x!1(x!4)" "ch2(x!4)" "x!2(x!4)") (("1" (assert) (("1" (hide -4 -1) (("1" (forward-chain -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind :if-match nil) (("2" (expand "FunExtension") (("2" (expand "EquivClass") (("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil) ("3" (inst 1 "x!1") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!2") (("2" (apply-extensionality :hide? t) (("2" (expand "FunExtension") (("2" (expand "EquivClass") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("3" (inst 1 "x!2") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil) ("4" (inst 1 "x!1") (("4" (apply-extensionality :hide? t) (("4" (expand "EquivClass") (("4" (propax) nil nil)) nil)) nil)) nil) ("5" (inst 1 "x!1") (("5" (apply-extensionality :hide? t) (("5" (expand "EquivClass") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (expand "surjective?") (("2" (skosimp) (("2" (inst 1 "{ f : [X -> Y] | FORALL (x: X): (y!1(x))(f(x)) }") (("1" (expand "lift") (("1" (apply-extensionality :hide? t) (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "rep") (("1" (name-replace "ch" "choose({f: [X -> Y] | FORALL (x: X): y!1(x)(f(x))})") (("1" (typepred "ch") (("1" (typepred "F!1(x!1)") (("1" (inst -2 "x!1") (("1" (typepred "y!1(x!1)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (decompose-equality) (("1" (inst-cp -1 "x!2") (("1" (inst -1 "ch(x!1)") (("1" (replace -4) (("1" (replace -2) (("1" (hide -2 -4) (("1" (iff) (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -2) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (prop) (("1" (inst -4 "x!3" "ch(x!1)" "x!2") (("1" (assert) nil nil)) nil) ("2" (inst -3 "x!3" "ch(x!1)") (("2" (assert) (("2" (hide -2) (("2" (inst -3 "ch(x!1)" "x!3" "x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind :if-match nil) (("2" (inst -1 "LAMBDA (x: X): choose(y!1(x))") (("1" (skosimp) (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (replace -1) (("1" (beta) (("1" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (propax) nil nil)) nil) ("2" (inst -1 "x!4") (("2" (hide -1 2) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (expand "EquivClass") (("2" (decompose-equality) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (replace -1 :hide? t) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (expand "EquivClass") (("2" (expand "FunExtension") (("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (prop) (("1" (skosimp) (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (decompose-equality) (("1" (name-replace "ch" "choose(y!1(x!3))") (("1" (typepred "ch") (("1" (inst -3 "x!3") (("1" (inst-cp -2 "ch") (("1" (replace -1) (("1" (inst -2 "x!2(x!3)") (("1" (replace -4) (("1" (hide -1 -4) (("1" (typepred "F!1(x!3)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (inst -1 "x!4" "ch") (("1" (assert) (("1" (hide -4) (("1" (inst -2 "ch" "x!4" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 2) (("2" (grind) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (expand "EquivClass") (("2" (decompose-equality) (("2" (inst -1 "x!5") (("2" (inst -2 "x!5") (("2" (replace 1) (("2" (assert) (("2" (hide 2) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -1 "x!3") (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (expand "EquivClass") (("2" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (typepred "F!1(x!3)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1 -2) (("1" (expand "transitive?") (("1" (inst -1 "x!4" "ch" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (expand "EquivClass") (("1" (expand "FunExtension") (("1" (prop) (("1" (skosimp) (("1" (name-replace "ch" "choose(y!1(x!3))") (("1" (typepred "ch") (("1" (inst -2 "x!3") (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (typepred "F!1(x!3)") (("1" (grind :if-match nil) (("1" (hide -1) (("1" (inst -1 "x!4" "ch") (("1" (assert) (("1" (hide -3) (("1" (inst -2 "ch" "x!4" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!4") (("2" (grind) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (inst -2 "x!3") (("2" (replace -1 :hide? t) (("2" (expand "EquivClass") (("2" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (typepred "F!1(x!3)") (("1" (grind :if-match nil) (("1" (hide -1 -2) (("1" (inst -1 "x!4" "ch" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (expand "EquivClass") (("1" (expand "FunExtension") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (prop) (("1" (skosimp) (("1" (name-replace "ch" "choose(y!1(x!2))") (("1" (typepred "ch") (("1" (typepred "y!1(x!2)") (("1" (skosimp) (("1" (inst -3 "x!2") (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (typepred "F!1(x!2)") (("1" (grind :if-match nil) (("1" (hide -1) (("1" (inst -1 "x!3" "ch") (("1" (assert) (("1" (hide -3) (("1" (inst -2 "ch" "x!3" "x!1(x!2)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (inst -2 "x!2") (("2" (name-replace "ch" "choose(y!1(x!2))") (("1" (typepred "ch") (("1" (replace -2 :hide? t) (("1" (expand "EquivClass") (("1" (typepred "F!1(x!2)") (("1" (grind :if-match nil) (("1" (hide -1 -2) (("1" (inst -1 "x!3" "ch" "x!1(x!2)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 2) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!4") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!1)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!2") (("2" (grind) (("2" (typepred "F!1(x!1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!1)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!2") (("2" (grind) (("2" (typepred "F!1(x!1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (FunExtension const-decl "equivalence[[X -> Y]]" QuotientDistributive nil) (Quotient type-eq-decl nil QuotientDefinition nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (rep const-decl "T" QuotientDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (PreservesEq const-decl "bool" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict_full formula-decl nil restrict_props nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (lift const-decl "Y" QuotientExtensionProperties nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (Y formal-type-decl nil QuotientDistributive nil) (X formal-type-decl nil QuotientDistributive nil) (FunExtensionPreservesEq formula-decl nil QuotientDistributive nil)) 15557 11380 t shostak)))(QuotientIteration (action_TCC1 0 (action_TCC1-1 nil 3243015883 3342859463 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientIteration nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (Quotient type-eq-decl nil QuotientDefinition nil) nil nil (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 442 400 nil nil)) (action_TCC2 0 (action_TCC2-1 nil 3243015883 3342859464 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientIteration nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (Quotient type-eq-decl nil QuotientDefinition nil) nil nil (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 439 380 nil nil)) (action_equivalence_is_equivalence 0 (action_equivalence_is_equivalence-1 nil 3243663397 3342859464 ("" (skosimp*) (("" (typepred "S!1" "R!1") (("" (expand "equivalence?") (("" (flatten) (("" (expand "reflexive?") (("" (expand "symmetric?") (("" (expand "transitive?") (("" (expand "action") (("" (prop) (("1" (skosimp*) (("1" (inst? -4) (("1" (inst 1 "x!1") nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -6 "EquivClass(S!1)(x!1)" "EquivClass(S!1)(y!1)") (("1" (assert) nil nil) ("2" (inst 1 "y!1") nil nil) ("3" (inst 1 "x!1") nil nil)) nil)) nil) ("3" (skosimp*) (("3" (inst -8 "EquivClass(S!1)(x!1)" "EquivClass(S!1)(y!1)" "EquivClass(S!1)(z!1)") (("1" (assert) nil nil) ("2" (inst 1 "z!1") nil nil) ("3" (inst 1 "y!1") nil nil) ("4" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Quotient type-eq-decl nil QuotientDefinition nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (X formal-type-decl nil QuotientIteration nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (symmetric? const-decl "bool" relations nil) (action const-decl "bool" QuotientIteration nil) (transitive? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 218 160 t shostak)) (QuotientAction_TCC1 0 (QuotientAction_TCC1-1 nil 3243015883 3342859465 ("" (grind :exclude "rep" :if-match nil) (("" (apply-extensionality :hide? t) (("" (lemma "PreservesEq_quotient_map[X, X]") (("" (inst?) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (expand "member") (("" (rewrite "restrict_full[[X, X], bool]") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((action const-decl "bool" QuotientIteration nil) (restrict_full formula-decl nil restrict_props nil) (PreservesEq_quotient_map formula-decl nil QuotientKernelProperties nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientIteration nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (Quotient type-eq-decl nil QuotientDefinition nil) (action_equivalence_is_equivalence application-judgement "equivalence[X]" QuotientIteration nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil)) 476 420 t nil)) (QuotientAction_TCC2 0 (QuotientAction_TCC2-1 nil 3243015883 3342859465 ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (rewrite "restrict_full[[Quotient[X](S!1), Quotient[X](S!1)], bool]") (("" (rewrite "restrict_full[[X, X], bool]") (("" (prop) (("1" (skosimp*) (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (typepred "x!1`1" "x!1`2") (("2" (expand "lift") (("2" (lemma "EquivClassEq[X]") (("2" (auto-rewrite "EquivClassNonEmpty[X]") (("2" (skosimp*) (("2" (replace -2) (("2" (replace -3) (("2" (inst?) (("1" (assert) (("1" (hide 2) (("1" (expand "action") (("1" (rewrite "restrict_full[[X, X], bool]") (("1" (case "FORALL(x : X) :
                   EquivClass(S!1)(choose(EquivClass[X](S!1)(x))) = EquivClass(S!1)(x)") (("1" (inst-cp -1 "x!2") (("1" (expand "rep") (("1" (replace -2) (("1" (inst -1 "x!3") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (skosimp*) (("2" (lemma "EquivClassEq[X]") (("2" (inst?) (("2" (assert) (("2" (use "EquivClassChoose[X]") (("2" (hide 2) (("2" (typepred "S!1") (("2" (expand "equivalence?") (("2" (expand "symmetric?") (("2" (flatten) (("2" (expand "repEC") (("2" (forward-chain -2) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "restrict_full[[X, X], bool]") (("2" (inst 1 "x!3") nil nil)) nil) ("3" (rewrite "restrict_full[[X, X], bool]") (("3" (assert) nil nil)) nil) ("4" (rewrite "restrict_full[[X, X], bool]") (("4" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil)) 45 30 t nil)) (QuotientAction_TCC3 0 (QuotientAction_TCC3-2 "Fix for 3.2" 3307986379 3342859465 ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (expand "member") (("" (skosimp*) (("" (rewrite "restrict_full[[Quotient[X](S!1), Quotient[X](S!1)], bool]") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (typepred "x!1`1" "x!1`2") (("" (expand "lift") (("" (lemma "EquivClassEq[X]") (("" (auto-rewrite "EquivClassNonEmpty[X]") (("" (skosimp*) (("" (replace -2) (("" (replace -3) (("" (inst?) (("" (assert) (("" (hide 2) (("" (expand "action") (("" (case "FORALL(x : X) :
                            EquivClass(S!1)(choose(EquivClass[X](S!1)(x))) = EquivClass(S!1)(x)") (("1" (inst-cp -1 "x!2") (("1" (expand "rep") (("1" (replace -2) (("1" (inst -1 "x!3") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (skosimp*) (("2" (lemma "EquivClassEq[X]") (("2" (inst?) (("2" (assert) (("2" (hide 2) (("2" (use "rep_lemma[X]") (("2" (expand "EquivClass") (("2" (expand "rep") (("2" (typepred "S!1") (("2" (expand "equivalence?") (("2" (flatten) (("2" (expand "symmetric?") (("2" (forward-chain -2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (expand "member") (("2" (inst -1 "x!4") (("2" (expand "reflexive?") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict_full formula-decl nil restrict_props nil) (X formal-type-decl nil QuotientIteration nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (Quotient type-eq-decl nil QuotientDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (lift const-decl "Y" QuotientExtensionProperties nil) (action_equivalence_is_equivalence application-judgement "equivalence[X]" QuotientIteration nil) (rep const-decl "T" QuotientDefinition nil) (action const-decl "bool" QuotientIteration nil) (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) nil nil (empty? const-decl "bool" sets nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (rep_lemma formula-decl nil QuotientDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil)) 357 290 t shostak) (QuotientAction_TCC3-1 nil 3245193427 3307983097 ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (expand "member") (("" (skosimp*) (("" (rewrite "restrict_full[[Quotient[X](S!1), Quotient[X](S!1)], bool]") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (typepred "x!1`1" "x!1`2") (("" (expand "lift") (("" (lemma "EquivClassEq[X]") (("" (auto-rewrite "EquivClassNonEmpty[X]") (("" (skosimp*) (("" (replace -2) (("" (replace -3) (("" (inst?) (("1" (assert) (("1" (hide 2) (("1" (expand "action") (("1" (case "FORALL(x : X) :
                   EquivClass(S!1)(choose(EquivClass[X](S!1)(x))) = EquivClass(S!1)(x)") (("1" (inst-cp -1 "x!2") (("1" (expand "rep") (("1" (replace -2) (("1" (inst -1 "x!3") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (skosimp*) (("2" (lemma "EquivClassEq[X]") (("2" (inst?) (("2" (assert) (("2" (use "EquivClassChoose[X]") (("2" (hide 2) (("2" (typepred "S!1") (("2" (expand "equivalence?") (("2" (expand "symmetric?") (("2" (flatten) (("2" (inst -2 "x!4" "choose(EquivClass[X](S!1)(x!4))") (("2" (assert) (("2" (expand "repEC") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict_full formula-decl nil restrict_props nil) (X formal-type-decl nil QuotientIteration nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (Quotient type-eq-decl nil QuotientDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (lift const-decl "Y" QuotientExtensionProperties nil) (rep const-decl "T" QuotientDefinition nil) (action const-decl "bool" QuotientIteration nil) (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (empty? const-decl "bool" sets nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (rep_lemma formula-decl nil QuotientDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil)) 1154 910 t shostak)) (QuotientAction_TCC4 0 (QuotientAction_TCC4-1 nil 3245525352 3342859465 ("" (grind :exclude "rep" :if-match nil) nil nil) proved ((restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (PreservesEq const-decl "bool" KernelDefinition nil)) 62 60 t shostak)) (QuotientAction 0 (QuotientAction-1 nil 3243015883 3342859469 ("" (skosimp*) (("" (typepred "S!1" "R!1") (("" (expand "bijective?") (("" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (expand "lift") (("1" (typepred "x1!1" "x2!1") (("1" (auto-rewrite-theories "QuotientDefinition[X]" "QuotientDefinition[Quotient[X](S!1)]") (("1" (skosimp*) (("1" (replace -1) (("1" (replace -2) (("1" (hide -1 -2) (("1" (expand "rep") (("1" (name-replace "ch1" "choose(EquivClass[Quotient[X](S!1)](R!1)(x!1))") (("1" (name-replace "ch2" "choose(EquivClass[Quotient[X](S!1)](R!1)(x!2))") (("1" (typepred "ch1" "ch2") (("1" (skosimp*) (("1" (replace -1) (("1" (replace -3) (("1" (hide -1 -3) (("1" (name-replace "ch3" "choose(EquivClass[X](S!1)(x!3))") (("1" (name-replace "ch4" "choose(EquivClass[X](S!1)(x!4))") (("1" (typepred "ch3" "ch4") (("1" (stop-rewrite "EquivClassEq[X]") (("1" (assert) (("1" (case "EquivClass[X](action(S!1)(R!1))(ch3)(ch3)") (("1" (replace -6) (("1" (hide -6) (("1" (assert) (("1" (expand "action") (("1" (lemma "EquivClassEq[X]") (("1" (inst?) (("1" (prop) (("1" (replace -1) (("1" (hide -1 -2) (("1" (lemma "EquivClassEq[X]") (("1" (inst -1 "S!1" "ch4" "x!4") (("1" (prop) (("1" (replace -1) (("1" (hide -1 -2) (("1" (hide -2 -3) (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "symmetric?") (("1" (inst-cp -8 "EquivClass[X](S!1)(x!4)" "EquivClass(S!1)(ch3)") (("1" (prop) (("1" (hide -2) (("1" (inst -8 "x!2" "EquivClass[X](S!1)(x!4)") (("1" (expand "transitive?") (("1" (inst-cp -9 "x!1" "EquivClass(S!1)(ch3)" "EquivClass[X](S!1)(x!4)") (("1" (assert) (("1" (inst-cp -9 "x!1" "EquivClass[X](S!1)(x!4)" "x!2") (("1" (assert) nil nil) ("2" (expand "reflexive?") (("2" (inst 1 "x!4") nil nil)) nil)) nil)) nil) ("2" (expand "reflexive?") (("2" (inst 1 "x!4") nil nil)) nil) ("3" (expand "reflexive?") (("3" (inst 1 "ch3") nil nil)) nil)) nil)) nil) ("2" (expand "reflexive?") (("2" (inst 1 "x!4") nil nil)) nil)) nil)) nil)) nil) ("2" (expand "reflexive?") (("2" (inst 1 "ch3") nil nil)) nil) ("3" (expand "reflexive?") (("3" (inst 1 "x!4") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "equivalence?") (("2" (expand "symmetric?") (("2" (flatten) (("2" (inst -7 "x!4" "ch4") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 -4 -5 2) (("2" (expand "EquivClass") (("2" (expand "action") (("2" (expand "equivalence?") (("2" (expand "reflexive?") (("2" (flatten) (("2" (inst -4 "EquivClass(S!1)(ch3)") (("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (typepred "y!1") (("2" (skosimp*) (("2" (inst 1 "EquivClass(R!1)(EquivClass(S!1)(x!1))") (("1" (expand "lift") (("1" (expand "quotient_map") (("1" (replace -1) (("1" (lemma "EquivClassEq[X]") (("1" (inst -1 "action(S!1)(R!1)" "_" "_") (("1" (case "nonempty?(EquivClass(R!1)(EquivClass(S!1)(x!1)))") (("1" (expand "rep") (("1" (name-replace "ch1" "choose(EquivClass(R!1)(EquivClass(S!1)(x!1)))") (("1" (typepred "ch1") (("1" (skosimp*) (("1" (case "nonempty?(ch1)") (("1" (name-replace "ch2" "choose(ch1)") (("1" (typepred "ch2") (("1" (inst -6 "ch2" "x!1") (("1" (assert) (("1" (hide 2) (("1" (expand "action" 1) (("1" (expand "EquivClass" -4) (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "symmetric?") (("1" (inst -11 "LAMBDA (z: X): S!1(x!1, z)" "ch1") (("1" (assert) (("1" (case-replace "EquivClass(S!1)(ch2) = ch1") (("1" (expand "EquivClass" 1) (("1" (propax) nil nil)) nil) ("2" (hide 2) (("2" (hide -2 -4 -5 -6 -10 -11 -12) (("2" (replace -2) (("2" (hide -2) (("2" (assert) (("2" (expand "EquivClass" -1) (("2" (lemma "EquivClassEq[X]") (("2" (inst -1 "S!1" "x!2" "ch2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (hide -1 -2 -3 -4 -5 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 2) (("2" (grind) nil nil)) nil) ("3" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "EquivClass[X](S!1)(x!1)") (("2" (inst 1 "x!1") nil nil)) nil) ("3" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Quotient type-eq-decl nil QuotientDefinition nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (X formal-type-decl nil QuotientIteration nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (rep const-decl "T" QuotientDefinition nil) (action_equivalence_is_equivalence application-judgement "equivalence[X]" QuotientIteration nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (action const-decl "bool" QuotientIteration nil) (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (lift const-decl "Y" QuotientExtensionProperties nil) (injective? const-decl "bool" functions nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) nil nil nil (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil)) 3424 1600 t nil)))(PartialFunctionDefinitions (LPartFun_to_SPartFun_TCC1 0 (LPartFun_to_SPartFun_TCC1-1 nil 3243663400 3342859469 ("" (subtype-tcc) nil nil) proved nil 8 10 t shostak)) (SPartFun_to_LPartFun_to_SPartFun 0 (SPartFun_to_LPartFun_to_SPartFun-1 nil 3243715985 3342859469 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("1" (apply-extensionality :hide? t) (("1" (grind) nil nil)) nil) ("2" (apply-extensionality :hide? t) (("1" (typepred "x!1") (("1" (grind) nil nil)) nil) ("2" (skosimp*) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((X formal-type-decl nil PartialFunctionDefinitions nil) (PRED type-eq-decl nil defined_types nil) (Y formal-type-decl nil PartialFunctionDefinitions nil) (SubsetPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (SPartFun_to_LPartFun const-decl "LiftPartialFunction" PartialFunctionDefinitions nil) (LPartFun_to_SPartFun const-decl "SubsetPartialFunction" PartialFunctionDefinitions nil) (LiftPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (lift type-decl nil lift_adt nil) (boolean nonempty-type-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil)) 160 120 t shostak)) (LPartFun_to_SPartFun_to_LPartFun 0 (LPartFun_to_SPartFun_to_LPartFun-1 nil 3243716027 3342859469 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) (("" (rewrite "lift_up_eta") nil nil)) nil)) nil)) nil) proved ((X formal-type-decl nil PartialFunctionDefinitions nil) (Y formal-type-decl nil PartialFunctionDefinitions nil) (lift type-decl nil lift_adt nil) (LPartFun_to_SPartFun const-decl "SubsetPartialFunction" PartialFunctionDefinitions nil) (SPartFun_to_LPartFun const-decl "LiftPartialFunction" PartialFunctionDefinitions nil) (LiftPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (SubsetPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (PRED type-eq-decl nil defined_types nil) (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil) (boolean nonempty-type-decl nil booleans nil) (lift_up_eta formula-decl nil lift_adt nil)) 97 70 t shostak)))(PartialFunctionComposition (oh_TCC1 0 (oh_TCC1-1 nil 3243015884 3342859469 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (Y formal-type-decl nil PartialFunctionComposition nil) (PRED type-eq-decl nil defined_types nil) (Z formal-type-decl nil PartialFunctionComposition nil) (SubsetPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (X formal-type-decl nil PartialFunctionComposition nil) (CompDom const-decl "PRED[X]" PartialFunctionComposition nil)) 47 20 t nil)) (oh_TCC2 0 (oh_TCC2-1 nil 3243015884 3342859469 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (Y formal-type-decl nil PartialFunctionComposition nil) (PRED type-eq-decl nil defined_types nil) (Z formal-type-decl nil PartialFunctionComposition nil) (SubsetPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (X formal-type-decl nil PartialFunctionComposition nil) (CompDom const-decl "PRED[X]" PartialFunctionComposition nil)) 48 30 nil nil)) (SPartFun_to_LPartFun_CompositionPreservation 0 (SPartFun_to_LPartFun_CompositionPreservation-1 nil 3243716138 3342859469 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((X formal-type-decl nil PartialFunctionComposition nil) (Z formal-type-decl nil PartialFunctionComposition nil) (lift type-decl nil lift_adt nil) (O const-decl "LiftPartialFunction[X, Z]" PartialFunctionComposition nil) (O const-decl "SubsetPartialFunction[X, Z]" PartialFunctionComposition nil) (Y formal-type-decl nil PartialFunctionComposition nil) (SPartFun_to_LPartFun const-decl "LiftPartialFunction" PartialFunctionDefinitions nil) (LiftPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (SubsetPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (PRED type-eq-decl nil defined_types nil) (CompDom const-decl "PRED[X]" PartialFunctionComposition nil)) 140 110 t shostak)) (LPartFun_to_SPartFun_CompositionPreservation 0 (LPartFun_to_SPartFun_CompositionPreservation-1 nil 3243716183 3342859470 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("1" (apply-extensionality :hide? t) (("1" (grind) nil nil)) nil) ("2" (apply-extensionality :hide? t) (("1" (grind) (("1" (typepred "x!1") (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) proved ((X formal-type-decl nil PartialFunctionComposition nil) (PRED type-eq-decl nil defined_types nil) (Z formal-type-decl nil PartialFunctionComposition nil) (SubsetPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (O const-decl "SubsetPartialFunction[X, Z]" PartialFunctionComposition nil) (O const-decl "LiftPartialFunction[X, Z]" PartialFunctionComposition nil) (Y formal-type-decl nil PartialFunctionComposition nil) (LPartFun_to_SPartFun const-decl "SubsetPartialFunction" PartialFunctionDefinitions nil) (LiftPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (lift type-decl nil lift_adt nil) (CompDom const-decl "PRED[X]" PartialFunctionComposition nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil)) 372 320 t shostak)))
