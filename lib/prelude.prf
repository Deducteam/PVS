(booleans)(equalities)(notequal)(if_def (IF_TCC1 0 (IF_TCC1-1 nil 3237052399 3307982194 ("" (inst 1 "LAMBDA (x: [boolean, T, T]): PROJ_2(x)") nil nil) proved nil 31 30 nil nil)))(boolean_props (bool_exclusive 0 (bool_exclusive-1 nil 3237052399 3307982194 ("" (iff) (("" (prop) nil nil)) nil) proved nil 27 20 nil nil)) (bool_inclusive 0 (bool_inclusive-1 nil 3237052399 3307982194 ("" (skolem!) (("" (prop) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil) proved nil 81 30 nil nil)) (not_def 0 (not_def-1 nil 3237052399 3307982194 ("" (skosimp) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 36 30 nil nil)) (and_def 0 (and_def-1 nil 3237052399 3307982194 ("" (skolem!) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 38 40 nil nil)) (syand_def 0 (syand_def-1 nil 3237052399 3307982194 ("" (propax) nil nil) proved nil 24 30 nil nil)) (or_def 0 (or_def-1 nil 3237052399 3307982194 ("" (skolem!) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 49 40 nil nil)) (implies_def 0 (implies_def-1 nil 3237052399 3307982194 ("" (skolem!) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 57 40 nil nil)) (syimplies_def 0 (syimplies_def-1 nil 3237052399 3307982194 ("" (propax) nil nil) proved nil 27 20 nil nil)) (when_def 0 (when_def-1 nil 3237052399 3307982194 ("" (skolem!) nil nil) proved nil 33 30 nil nil)) (iff_def 0 (iff_def-1 nil 3237052399 3307982194 ("" (skolem!) (("" (iff) (("" (prop) nil nil)) nil)) nil) proved nil 53 50 nil nil)) (syiff_def 0 (syiff_def-1 nil 3237052399 3307982194 ("" (propax) nil nil) proved nil 55 60 nil nil)) (excluded_middle 0 (excluded_middle-1 nil 3237052399 3307982194 ("" (grind) nil nil) proved nil 46 40 nil nil)))(xor_def (xor_def 0 (xor_def-1 nil 3237052399 3307982194 ("" (grind) nil nil) proved nil 143 80 nil nil)))(quantifier_props (not_exists 0 (not_exists-1 nil 3237052399 3307982195 ("" (skolem!) (("" (iff) (("" (prop) (("1" (skolem!) (("1" (inst?) nil nil)) nil) ("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil) proved nil 137 50 nil nil)) (exists_not 0 (exists_not-1 nil 3237052399 3307982195 ("" (grind) nil nil) proved nil 101 90 nil nil)) (exists_or 0 (exists_or-1 nil 3237052399 3307982195 ("" (grind) nil nil) proved nil 202 160 nil nil)) (exists_implies 0 (exists_implies-1 nil 3237052399 3307982195 ("" (grind) nil nil) proved nil 226 150 nil nil)) (exists_and 0 (exists_and-1 nil 3237052399 3307982195 ("" (grind) nil nil) proved nil 98 80 nil nil)) (not_forall 0 (not_forall-1 nil 3237052399 3307982196 ("" (grind) nil nil) proved nil 162 90 nil nil)) (forall_not 0 (forall_not-1 nil 3237052399 3307982196 ("" (grind) nil nil) proved nil 102 90 nil nil)) (forall_and 0 (forall_and-1 nil 3237052399 3307982196 ("" (grind) nil nil) proved nil 198 140 nil nil)) (forall_or 0 (forall_or-1 nil 3237052399 3307982196 ("" (grind) nil nil) proved nil 80 80 nil nil)))(defined_types)(exists1 (unique_lem 0 (unique_lem-1 nil 3237052399 3307982196 ("" (skolem!) (("" (flatten) (("" (expand "unique?") (("" (skolem!) (("" (flatten) (("" (inst-cp -1 "x!1") (("" (inst -1 "y!1") (("" (inst - "x!1" "y!1") (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 98 60 nil nil)) (exists1_lem 0 (exists1_lem-1 nil 3237052399 3307982196 ("" (skolem!) (("" (flatten) (("" (expand "exists1") (("" (prop) nil nil)) nil)) nil)) nil) proved nil 39 40 nil nil)))(equality_props (IF_true 0 (IF_true-1 nil 3237052399 3307982196 ("" (grind) nil nil) proved nil 31 30 nil nil)) (IF_false 0 (IF_false-1 nil 3237052399 3307982196 ("" (grind) nil nil) proved nil 30 30 nil nil)) (IF_same 0 (IF_same-1 nil 3237052399 3307982196 ("" (grind) nil nil) proved nil 33 30 nil nil)) (reflexivity_of_equals 0 (reflexivity_of_equals-1 nil 3237052399 3307982197 ("" (skolem!) nil nil) proved nil 389 30 nil nil)) (transitivity_of_equals 0 (transitivity_of_equals-1 nil 3237052399 3307982197 ("" (skolem!) (("" (flatten) (("" (replace -1) (("" (propax) nil nil)) nil)) nil)) nil) proved nil 35 30 nil nil)) (symmetry_of_equals 0 (symmetry_of_equals-1 nil 3237052399 3307982197 ("" (skolem!) (("" (flatten) (("" (replace -1) (("" (propax) nil nil)) nil)) nil)) nil) proved nil 49 30 nil nil)))(if_props (lift_if1 0 (lift_if1-1 nil 3237052399 3307982197 ("" (grind) nil nil) proved nil 37 30 nil nil)) (lift_if2 0 (lift_if2-1 nil 3237052399 3307982197 ("" (grind) nil nil) proved nil 123 80 nil nil)))(functions (extensionality_postulate 0 (extensionality_postulate-1 nil 3237052399 3307982197 ("" (skosimp) (("" (prop) (("1" (apply-extensionality) nil nil) ("2" (skosimp) (("2" (assert) nil nil)) nil)) nil)) nil) proved nil 60 60 nil nil)) (extensionality 0 (extensionality-1 nil 3237052399 3307982197 ("" (skolem!) (("" (flatten) (("" (apply-extensionality) nil nil)) nil)) nil) proved nil 48 40 nil nil)) (congruence 0 (congruence-1 nil 3237052399 3307982197 ("" (grind) nil nil) proved nil 100 60 nil nil)) (eta 0 (eta-1 nil 3237052399 3307982197 ("" (skolem!) (("" (apply-extensionality) nil nil)) nil) proved nil 47 50 nil nil)) (bij_is_inj 0 (bij_is_inj-1 nil 3237052399 3307982198 ("" (subtype-tcc) nil nil) proved nil 846 100 nil nil)) (bij_is_surj 0 (bij_is_surj-1 nil 3237052399 3307982198 ("" (subtype-tcc) nil nil) proved nil 237 90 nil nil)))(functions_alt)(transpose)(restrict (injective_restrict 0 (injective_restrict-1 nil 3237052399 3307982199 ("" (expand "injective?") (("" (skosimp*) (("" (grind) nil nil)) nil)) nil) proved nil 255 80 nil nil)) (restrict_of_inj_is_inj 0 (restrict_of_inj_is_inj-1 nil 3237052399 3307982199 ("" (subtype-tcc) nil nil) proved nil 320 110 nil nil)))(restrict_props (restrict_full 0 (restrict_full-1 nil 3245191654 3307982199 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) nil nil)) nil) proved nil 94 90 t shostak)))(extend (restrict_extend 0 (restrict_extend-1 nil 3237052399 3307982199 ("" (grind) (("" (apply-extensionality) nil nil)) nil) proved nil 254 90 nil nil)))(extend_bool)(extend_props (extend_full 0 (extend_full-1 nil 3245191700 3307982200 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) nil nil)) nil) proved nil 223 100 t shostak)))(extend_func_props (surjective_extend 0 (surjective_extend-1 nil 3249327214 3307982200 ("" (skolem-typepred) (("" (expand "surjective?") (("" (skolem!) (("" (inst?) (("" (skolem!) (("" (inst?) (("" (expand "extend") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 69 60 t nil)))(K_conversion)(K_props (K_preserves 0 (K_preserves-1 nil 3237052399 3307982200 ("" (subtype-tcc) nil nil) proved nil 42 40 nil nil)) (K_preserves1 0 (K_preserves1-1 nil 3237052399 3307982200 ("" (subtype-tcc) nil nil) proved nil 41 40 nil nil)))(identity (I_TCC1 0 (I_TCC1-1 nil 3237052399 3307982200 ("" (grind) nil nil) proved nil 146 80 nil nil)))(identity_props (I_preserves 0 (I_preserves-1 nil 3237052399 3307982200 ("" (subtype-tcc) nil nil) proved nil 47 40 nil nil)) (id_preserves 0 (id_preserves-1 nil 3237052399 3307982200 ("" (subtype-tcc) nil nil) proved nil 41 40 nil nil)) (identity_preserves 0 (identity_preserves-1 nil 3237052399 3307982200 ("" (subtype-tcc) nil nil) proved nil 43 40 nil nil)))(relations (equiv_is_reflexive 0 (equiv_is_reflexive-1 nil 3237052399 3307982200 ("" (subtype-tcc) nil nil) proved nil 85 70 nil nil)) (equiv_is_symmetric 0 (equiv_is_symmetric-1 nil 3237052399 3307982200 ("" (skolem-typepred) (("" (expand "equivalence?") (("" (assert) nil nil)) nil)) nil) proved nil 39 40 nil nil)) (equiv_is_transitive 0 (equiv_is_transitive-1 nil 3237052399 3307982200 ("" (skolem-typepred) (("" (expand "equivalence?") (("" (assert) nil nil)) nil)) nil) proved nil 53 40 nil nil)))(orders (preorder_is_reflexive 0 (preorder_is_reflexive-1 nil 3237052399 3307982200 ("" (subtype-tcc) nil nil) proved nil 154 90 nil nil)) (preorder_is_transitive 0 (preorder_is_transitive-1 nil 3237052399 3307982200 ("" (skolem-typepred) (("" (expand "preorder?") (("" (assert) nil nil)) nil)) nil) proved nil 47 30 nil nil)) (equiv_is_preorder 0 (equiv_is_preorder-1 nil 3237052399 3307982201 ("" (subtype-tcc) nil nil) proved nil 128 110 nil nil)) (po_is_preorder 0 (po_is_preorder-1 nil 3237052399 3307982201 ("" (subtype-tcc) nil nil) proved nil 115 100 nil nil)) (po_is_antisymmetric 0 (po_is_antisymmetric-1 nil 3237052399 3307982201 ("" (subtype-tcc) nil nil) proved nil 280 190 nil nil)) (strict_is_irreflexive 0 (strict_is_irreflexive-1 nil 3237052399 3307982201 ("" (subtype-tcc) nil nil) proved nil 192 90 nil nil)) (strict_order_is_antisymmetric 0 (strict_order_is_antisymmetric-1 nil 3252220963 3307982201 ("" (grind :if-match nil) (("" (inst -2 "x!2" "y!1" "x!2") (("" (assert) (("" (inst -1 "x!2") nil nil)) nil)) nil)) nil) proved nil 205 150 t shostak)) (strict_is_transitive 0 (strict_is_transitive-1 nil 3237052399 3307982201 ("" (skolem-typepred) (("" (expand "strict_order?") (("" (assert) nil nil)) nil)) nil) proved nil 39 40 nil nil)) (total_is_po 0 (total_is_po-1 nil 3237052399 3307982202 ("" (subtype-tcc) nil nil) proved nil 126 120 nil nil)) (total_is_dichotomous 0 (total_is_dichotomous-1 nil 3237052399 3307982202 ("" (skolem-typepred) (("" (expand "total_order?") (("" (assert) nil nil)) nil)) nil) proved nil 77 40 nil nil)) (linear_is_total 0 (linear_is_total-1 nil 3237052399 3307982202 ("" (subtype-tcc) nil nil) proved nil 133 120 nil nil)) (total_is_linear 0 (total_is_linear-1 nil 3237052399 3307982202 ("" (subtype-tcc) nil nil) proved nil 42 40 nil nil)) (strict_total_is_strict 0 (strict_total_is_strict-1 nil 3237052399 3307982202 ("" (subtype-tcc) nil nil) proved nil 98 100 nil nil)) (strict_total_is_trichotomous 0 (strict_total_is_trichotomous-1 nil 3237052399 3307982202 ("" (skolem-typepred) (("" (expand "strict_total_order?") (("" (assert) nil nil)) nil)) nil) proved nil 45 40 nil nil)) (well_ordered_is_strict_total 0 (well_ordered_is_strict_total-1 nil 3237052399 3307982202 ("" (subtype-tcc) nil nil) proved nil 115 100 nil nil)) (well_ordered_is_well_founded 0 (well_ordered_is_well_founded-1 nil 3237052399 3307982202 ("" (subtype-tcc) nil nil) proved nil 318 250 nil nil)))(orders_alt (least_upper_bound_is_upper_bound 0 (least_upper_bound_is_upper_bound-1 nil 3237052399 3307982203 ("" (subtype-tcc) nil nil) proved nil 215 160 nil nil)) (greatest_lower_bound_is_lower_bound 0 (greatest_lower_bound_is_lower_bound-1 nil 3237052399 3307982203 ("" (subtype-tcc) nil nil) proved nil 407 140 nil nil)))(restrict_order_props (reflexive_restrict 0 (reflexive_restrict-1 nil 3249347110 3307982203 ("" (subtype-tcc) nil nil) proved nil 109 110 t nil)) (irreflexive_restrict 0 (irreflexive_restrict-1 nil 3249347110 3307982203 ("" (subtype-tcc) nil nil) proved nil 159 110 t nil)) (symmetric_restrict 0 (symmetric_restrict-1 nil 3249347110 3307982203 ("" (skolem-typepred) (("" (expand* "symmetric?" "restrict") (("" (skosimp) (("" (inst - "x!1" "y!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 85 80 t nil)) (antisymmetric_restrict 0 (antisymmetric_restrict-1 nil 3249347110 3307982204 ("" (subtype-tcc) nil nil) proved nil 202 190 t nil)) (connected_restrict 0 (connected_restrict-1 nil 3249347110 3307982204 ("" (subtype-tcc) nil nil) proved nil 328 230 t nil)) (transitive_restrict 0 (transitive_restrict-1 nil 3249347110 3307982205 ("" (skolem-typepred) (("" (expand* "transitive?" "restrict") (("" (skosimp) (("" (inst - "x!1" "y!1" "z!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 901 150 nil nil)) (equivalence_restrict 0 (equivalence_restrict-1 nil 3249347110 3307982205 ("" (grind :if-match nil) (("1" (inst -6 "x!1" "y!1" "z!1") (("1" (assert) nil nil)) nil) ("2" (inst -4 "x!1" "y!1") (("2" (assert) nil nil)) nil) ("3" (inst -2 "x!1") nil nil)) nil) proved nil 425 330 t nil)) (preorder_restrict 0 (preorder_restrict-1 nil 3249347110 3307982206 ("" (grind :if-match nil) (("1" (inst -5 "x!1" "y!1" "z!1") (("1" (assert) nil nil)) nil) ("2" (inst -2 "x!1") nil nil)) nil) proved nil 1020 440 t nil)) (partial_order_restrict 0 (partial_order_restrict-1 nil 3249347110 3307982207 ("" (grind :if-match nil) (("1" (inst -5 "x!1" "y!1") (("1" (assert) nil nil)) nil) ("2" (inst -5 "x!1" "y!1" "z!1") (("2" (assert) nil nil)) nil) ("3" (inst -2 "x!1") nil nil)) nil) proved nil 720 570 t nil)) (strict_order_restrict 0 (strict_order_restrict-1 nil 3249347110 3307982209 ("" (grind :if-match nil) (("1" (inst -5 "x!1" "y!1" "z!1") (("1" (assert) nil nil)) nil) ("2" (inst -2 "x!1") nil nil)) nil) proved nil 2004 730 t nil)) (dichotomous_restrict 0 (dichotomous_restrict-1 nil 3249347110 3307982210 ("" (subtype-tcc) nil nil) proved nil 1152 880 t nil)) (total_order_restrict 0 (total_order_restrict-1 nil 3249347110 3307982211 ("" (grind :if-match nil) (("1" (inst -6 "x!1" "y!1") (("1" (assert) nil nil)) nil) ("2" (inst -5 "x!1" "y!1") (("2" (assert) nil nil)) nil) ("3" (inst -5 "x!1" "y!1" "z!1") (("3" (assert) nil nil)) nil) ("4" (inst -2 "x!1") nil nil)) nil) proved nil 1115 1010 t nil)) (trichotomous_restrict 0 (trichotomous_restrict-1 nil 3249347110 3307982213 ("" (subtype-tcc) nil nil) proved nil 1302 1210 t nil)) (strict_total_order_restrict 0 (strict_total_order_restrict-1 nil 3249347110 3307982215 ("" (grind :if-match nil) (("1" (inst -5 "x!1" "y!1") (("1" (assert) nil nil)) nil) ("2" (inst -5 "x!1" "y!1" "z!1") (("2" (assert) nil nil)) nil) ("3" (inst -2 "x!1") nil nil)) nil) proved nil 2541 1350 t nil)) (well_founded_restrict 0 (well_founded_restrict-1 nil 3249347110 3307982217 ("" (skolem-typepred) (("" (expand* "well_founded?" "restrict") (("" (skosimp*) (("" (inst - "extend[T, S, bool, FALSE](p!1)") (("" (split) (("1" (skolem-typepred) (("1" (expand "extend") (("1" (prop) (("1" (assert) (("1" (inst + "y!2") (("1" (skolem!) (("1" (inst - "x!1") (("1" (expand "extend") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "y!1") (("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1651 1470 t nil)) (well_ordered_restrict 0 (well_ordered_restrict-1 nil 3249347110 3307982220 ("" (grind :if-match nil) (("1" (inst -5 "p!1") (("1" (grind :if-match nil) (("1" (inst 1 "y!2") (("1" (skosimp) (("1" (inst -7 "x!1") nil nil)) nil)) nil) ("2" (inst 1 "y!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (inst -5 "x!1" "y!1") (("2" (assert) nil nil)) nil) ("3" (inst -5 "x!1" "y!1" "z!1") (("3" (assert) nil nil)) nil) ("4" (inst -2 "x!1") nil nil)) nil) proved nil 3091 1890 t nil)))(extend_order_props (irreflexive_extend 0 (irreflexive_extend-1 nil 3249327215 3307982220 ("" (skolem-typepred) (("" (expand* "irreflexive?" "extend") (("" (skolem!) (("" (prop) (("" (inst?) nil nil)) nil)) nil)) nil)) nil) proved nil 82 70 nil nil)) (symmetric_extend 0 (symmetric_extend-1 nil 3249327215 3307982220 ("" (skolem-typepred) (("" (expand* "symmetric?" "extend") (("" (skosimp) (("" (prop) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 123 90 nil nil)) (antisymmetric_extend 0 (antisymmetric_extend-1 nil 3249327215 3307982220 ("" (skolem-typepred) (("" (expand* "antisymmetric?" "extend") (("" (skosimp) (("" (prop) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 128 110 nil nil)) (transitive_extend 0 (transitive_extend-1 nil 3249327215 3307982220 ("" (skolem-typepred) (("" (expand* "transitive?" "extend") (("" (skosimp) (("" (prop) (("" (inst - "x!1" "y!1" "z!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 164 110 nil nil)) (strict_order_extend 0 (strict_order_extend-1 nil 3249327215 3307982221 ("" (skolem-typepred) (("" (expand "strict_order?") (("" (flatten) (("" (use "irreflexive_extend") (("" (use "transitive_extend") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 179 170 nil nil)))(wf_induction (wf_induction 0 (wf_induction-1 nil 3237052399 3307982221 ("" (skosimp) (("" (skosimp) (("" (typepred "<") (("" (expand "well_founded?") (("" (inst -1 "{z:T|NOT p!1(z)}") (("" (assert) (("" (split) (("1" (skosimp) (("1" (inst -2 "y!1") (("1" (split) (("1" (typepred "y!1") (("1" (propax) nil nil)) nil) ("2" (skosimp) (("2" (inst -2 "y!2") nil nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 95 90 nil nil)))(measure_induction (measure_induction 0 (measure_induction-1 nil 3237052399 3307982221 ("" (lemma "wf_induction[T,(LAMBDA (x, y: T): m(x) < m(y))]") (("1" (skosimp*) (("1" (inst -1 "p!1") (("1" (split) (("1" (inst -1 "x!1") nil nil) ("2" (propax) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "well_founded?") (("2" (typepred "<") (("2" (expand "well_founded?") (("2" (skosimp*) (("2" (inst -1 "(LAMBDA (y:M): (exists (z:T): m(z) = y AND p!1(z)))") (("2" (split) (("1" (skosimp*) (("1" (typepred "y!2") (("1" (skosimp*) (("1" (inst 1 "z!1") (("1" (skosimp*) (("1" (inst -3 "m(x!1)") (("1" (assert) nil nil) ("2" (inst 1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 2 "y!1") (("2" (skosimp*) (("2" (inst 1 "m(y!1)") (("2" (inst 1 "y!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 303 210 nil nil)))(epsilons)(sets (singleton_TCC1 0 (singleton_TCC1-1 nil 3237052399 3307982221 ("" (skosimp) (("" (expand "singleton?") (("" (inst 1 "x!1") nil nil)) nil)) nil) proved nil 40 40 nil nil)) (add_TCC1 0 (add_TCC1-1 nil 3237052399 3307982221 ("" (subtype-tcc) nil nil) proved nil 80 80 nil nil)) (choose_TCC1 0 (choose_TCC1-1 nil 3237052399 3307982221 ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved nil 111 60 nil nil)) (choose_TCC2 0 (choose_TCC2-1 nil 3237052399 3307982221 ("" (skolem-typepred) (("" (grind) (("" (rewrite "epsilon_ax[T]") (("1" (inst 1 "x!1") nil nil) ("2" (inst?) nil nil)) nil)) nil)) nil) proved nil 102 100 nil nil)) (the_TCC1 0 (the_TCC1-1 nil 3237052399 3307982221 ("" (skolem-typepred) (("" (use "epsilon_ax[T]") (("" (assert) (("" (expand "singleton?") (("" (skosimp*) (("" (inst 1 "x!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 68 60 t nil)) (singleton_elt_TCC1 0 (singleton_elt_TCC1-1 nil 3282864729 3307982222 ("" (subtype-tcc) (("" (typepred "a!1") (("" (expand "singleton?") (("" (skosimp) (("" (inst-cp -1 "x!1") (("" (inst -1 "y!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 238 160 t shostak)) (rest_TCC1 0 (rest_TCC1-1 nil 3237052399 3307982222 ("" (skolem!) (("" (flatten) (("" (expand "nonempty?") (("" (propax) nil nil)) nil)) nil)) nil) proved nil 33 30 nil nil)) (nonempty_singleton 0 (nonempty_singleton-1 nil 3237052399 3307982222 ("" (subtype-tcc) nil nil) proved nil 144 110 nil nil)) (nonempty_union1 0 (nonempty_union1-1 nil 3237052399 3307982222 ("" (subtype-tcc) nil nil) proved nil 102 100 nil nil)) (nonempty_union2 0 (nonempty_union2-1 nil 3237052399 3307982222 ("" (subtype-tcc) nil nil) proved nil 113 100 nil nil)))(sets_lemmas (extensionality 0 (extensionality-1 nil 3237052399 3307982222 ("" (skolem!) (("" (flatten) (("" (apply-extensionality) (("" (inst?) (("" (expand "member") (("" (iff) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 121 70 nil nil)) (emptyset_is_empty? 0 (emptyset_is_empty?-1 nil 3237052399 3307982222 ("" (skolem!) (("" (expand "empty?") (("" (expand "emptyset") (("" (expand "member") (("" (prop) (("1" (apply-extensionality) (("1" (inst?) nil nil)) nil) ("2" (skolem!) (("2" (replace -1) (("2" (beta) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 80 80 nil nil)) (empty_no_members 0 (empty_no_members-1 nil 3237052399 3307982222 ("" (grind) nil nil) proved nil 44 40 nil nil)) (emptyset_min 0 (emptyset_min-1 nil 3237052399 3307982223 ("" (grind) (("" (apply-extensionality) (("" (inst?) nil nil)) nil)) nil) proved nil 170 110 nil nil)) (nonempty_member 0 (nonempty_member-1 nil 3237052399 3307982223 ("" (tcc) nil nil) proved nil 119 110 nil nil)) (fullset_member 0 (fullset_member-1 nil 3237052399 3307982223 ("" (grind) nil nil) proved nil 48 40 nil nil)) (fullset_max 0 (fullset_max-1 nil 3237052399 3307982223 ("" (grind) (("" (apply-extensionality) (("" (inst?) nil nil)) nil)) nil) proved nil 178 120 nil nil)) (fullset_is_full? 0 (fullset_is_full?-1 nil 3253512686 3307982223 ("" (grind) (("" (apply-extensionality) (("" (inst?) nil nil)) nil)) nil) proved nil 157 130 t nil)) (nonempty_exists 0 (nonempty_exists-1 nil 3237052399 3307982223 ("" (expand "nonempty?") (("" (expand "empty?") (("" (expand "member") (("" (skosimp*) (("" (split) (("1" (skosimp*) (("1" (inst * "x!1") nil nil)) nil) ("2" (flatten) (("2" (skolem * "x!1") (("2" (inst * "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 111 70 nil nil)) (subset_emptyset 0 (subset_emptyset-1 nil 3237052399 3307982223 ("" (grind) nil nil) proved nil 53 50 nil nil)) (subset_fullset 0 (subset_fullset-1 nil 3237052399 3307982223 ("" (grind) nil nil) proved nil 53 50 nil nil)) (subset_reflexive 0 (subset_reflexive-1 nil 3237052399 3307982223 ("" (grind) nil nil) proved nil 67 60 nil nil)) (subset_antisymmetric 0 (subset_antisymmetric-1 nil 3237052399 3307982224 ("" (skosimp) (("" (expand "subset?") (("" (expand "member") (("" (apply-extensionality) (("" (inst?) (("" (inst?) (("" (prop) (("1" (iff) (("1" (prop) nil nil)) nil) ("2" (iff) (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 143 100 nil nil)) (subset_transitive 0 (subset_transitive-1 nil 3237052399 3307982224 ("" (grind) nil nil) proved nil 131 120 nil nil)) (subset_partial_order 0 (subset_partial_order-1 nil 3237052399 3307982224 ("" (expand "partial_order?") (("" (expand "preorder?") (("" (expand "reflexive?") (("" (prop) (("1" (skosimp) (("1" (expand "subset?") (("1" (expand "member") (("1" (skosimp) nil nil)) nil)) nil)) nil) ("2" (expand "transitive?") (("2" (skosimp) (("2" (expand "subset?") (("2" (skosimp) (("2" (inst?) (("2" (inst?) (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "antisymmetric?") (("3" (skosimp) (("3" (expand "subset?") (("3" (apply-extensionality) (("3" (inst?) (("3" (inst?) (("3" (expand "member") (("3" (iff) (("3" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 256 170 nil nil)) (subset_is_partial_order 0 (subset_is_partial_order-1 nil 3253512252 3307982224 ("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil) proved nil 404 350 t nil)) (strict_subset_irreflexive 0 (strict_subset_irreflexive-1 nil 3253512777 3307982224 ("" (grind) nil nil) proved nil 60 60 t nil)) (strict_subset_transitive 0 (strict_subset_transitive-1 nil 3253512783 3307982225 ("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil) proved nil 544 360 t nil)) (strict_subset_strict_order 0 (strict_subset_strict_order-1 nil 3253512806 3307982226 ("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil) proved nil 605 390 t nil)) (strict_subset_is_strict_order 0 (strict_subset_is_strict_order-1 nil 3253512252 3307982226 ("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil) proved nil 521 390 t nil)) (union_idempotent 0 (union_idempotent-1 nil 3237052399 3307982226 ("" (skosimp) (("" (expand "union") (("" (apply-extensionality) (("" (expand "member") (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 87 80 nil nil)) (union_commutative 0 (union_commutative-1 nil 3237052399 3307982226 ("" (skosimp) (("" (expand "union") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil) proved nil 85 80 nil nil)) (union_associative 0 (union_associative-1 nil 3237052399 3307982227 ("" (skosimp) (("" (expand "union") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved nil 303 110 nil nil)) (union_empty 0 (union_empty-1 nil 3237052399 3307982227 ("" (skosimp) (("" (expand "union") (("" (apply-extensionality) (("" (expand "member") (("" (expand "emptyset") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 128 70 nil nil)) (union_full 0 (union_full-1 nil 3237052399 3307982227 ("" (skosimp) (("" (expand "fullset") (("" (expand "union") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 113 80 nil nil)) (union_subset1 0 (union_subset1-1 nil 3237052399 3307982227 ("" (skosimp) (("" (expand "subset?") (("" (expand "union") (("" (skosimp) (("" (expand "member") (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 59 60 nil nil)) (union_subset2 0 (union_subset2-1 nil 3237052399 3307982227 ("" (skosimp) (("" (expand "subset?") (("" (expand "union") (("" (apply-extensionality) (("" (inst?) (("" (iff) (("" (expand "member") (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 163 100 nil nil)) (union_upper_bound 0 (union_upper_bound-1 nil 3237052399 3307982227 ("" (grind) nil nil) proved nil 181 150 nil nil)) (union_difference 0 (union_difference-1 nil 3237052399 3307982228 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved nil 194 150 nil nil)) (union_diff_subset 0 (union_diff_subset-1 nil 3237052399 3307982228 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved nil 507 180 nil nil)) (intersection_idempotent 0 (intersection_idempotent-1 nil 3237052399 3307982228 ("" (skosimp) (("" (expand "intersection") (("" (apply-extensionality) (("" (expand "member") (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 78 80 nil nil)) (intersection_commutative 0 (intersection_commutative-1 nil 3237052399 3307982228 ("" (skosimp) (("" (expand "intersection") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil) proved nil 239 80 nil nil)) (intersection_associative 0 (intersection_associative-1 nil 3237052399 3307982229 ("" (skosimp) (("" (expand "intersection") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved nil 308 110 nil nil)) (intersection_empty 0 (intersection_empty-1 nil 3237052399 3307982229 ("" (skosimp) (("" (expand "intersection") (("" (expand "emptyset") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 112 70 nil nil)) (intersection_full 0 (intersection_full-1 nil 3237052399 3307982229 ("" (skosimp) (("" (expand "intersection") (("" (expand "fullset") (("" (expand "member") (("" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) proved nil 105 70 nil nil)) (intersection_subset1 0 (intersection_subset1-1 nil 3237052399 3307982229 ("" (skosimp) (("" (expand "intersection") (("" (expand "subset?") (("" (skosimp) (("" (expand "member") (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 60 60 nil nil)) (intersection_subset2 0 (intersection_subset2-1 nil 3237052399 3307982229 ("" (skosimp) (("" (expand "intersection") (("" (expand "subset?") (("" (apply-extensionality) (("" (expand "member") (("" (inst?) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 460 90 nil nil)) (intersection_lower_bound 0 (intersection_lower_bound-1 nil 3237052399 3307982230 ("" (grind) nil nil) proved nil 256 160 nil nil)) (distribute_intersection_union 0 (distribute_intersection_union-1 nil 3237052399 3307982230 ("" (skosimp) (("" (expand "intersection") (("" (expand "union") (("" (expand "member") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 161 120 nil nil)) (distribute_union_intersection 0 (distribute_union_intersection-1 nil 3237052399 3307982230 ("" (skosimp) (("" (expand "intersection") (("" (expand "union") (("" (expand "member") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 117 110 nil nil)) (complement_emptyset 0 (complement_emptyset-1 nil 3237052399 3307982230 ("" (expand "complement") (("" (expand "emptyset") (("" (expand "fullset") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved nil 84 40 nil nil)) (complement_fullset 0 (complement_fullset-1 nil 3237052399 3307982230 ("" (expand "complement") (("" (expand "emptyset") (("" (expand "fullset") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved nil 47 50 nil nil)) (complement_complement 0 (complement_complement-1 nil 3237052399 3307982230 ("" (skosimp) (("" (expand "complement") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved nil 73 70 nil nil)) (complement_equal 0 (complement_equal-1 nil 3253512934 3307982231 ("" (grind) (("" (apply-extensionality) (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 247 210 t nil)) (subset_complement 0 (subset_complement-1 nil 3237052399 3307982231 ("" (skosimp) (("" (expand "complement") (("" (expand "subset?") (("" (expand "member") (("" (prop) (("1" (skosimp) (("1" (inst?) (("1" (prop) nil nil)) nil)) nil) ("2" (skosimp) (("2" (inst?) (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 82 80 nil nil)) (demorgan1 0 (demorgan1-1 nil 3237052399 3307982231 ("" (grind) (("" (apply-extensionality) (("" (iff) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 205 150 nil nil)) (demorgan2 0 (demorgan2-1 nil 3237052399 3307982231 ("" (grind) (("" (apply-extensionality) (("" (iff) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 203 150 nil nil)) (difference_emptyset1 0 (difference_emptyset1-1 nil 3237052399 3307982231 ("" (skosimp) (("" (expand "difference") (("" (expand "emptyset") (("" (expand "member") (("" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) proved nil 76 70 nil nil)) (difference_emptyset2 0 (difference_emptyset2-1 nil 3237052399 3307982231 ("" (skosimp) (("" (expand "difference") (("" (expand "emptyset") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil) proved nil 52 40 nil nil)) (difference_fullset1 0 (difference_fullset1-1 nil 3237052399 3307982231 ("" (skosimp) (("" (expand "difference") (("" (expand "emptyset") (("" (expand "fullset") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 56 60 nil nil)) (difference_fullset2 0 (difference_fullset2-1 nil 3237052399 3307982231 ("" (skosimp) (("" (expand "difference") (("" (expand "fullset") (("" (expand "complement") (("" (apply-extensionality) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 132 80 nil nil)) (difference_intersection 0 (difference_intersection-1 nil 3237052399 3307982231 ("" (skosimp) (("" (expand "difference") (("" (expand "intersection") (("" (expand "complement") (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 65 70 nil nil)) (difference_difference1 0 (difference_difference1-1 nil 3237052399 3307982232 ("" (skosimp) (("" (expand "difference") (("" (expand "member") (("" (expand "union") (("" (expand "member") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 155 110 nil nil)) (difference_difference2 0 (difference_difference2-1 nil 3237052399 3307982232 ("" (skosimp) (("" (expand "difference") (("" (expand "union") (("" (expand "intersection") (("" (expand "member") (("" (apply-extensionality) (("" (iff) (("" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 167 120 nil nil)) (difference_subset 0 (difference_subset-1 nil 3237052399 3307982232 ("" (grind) nil nil) proved nil 84 80 nil nil)) (difference_subset2 0 (difference_subset2-1 nil 3253513129 3307982232 ("" (grind) (("" (apply-extensionality) (("" (flatten) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 181 150 t nil)) (difference_disjoint 0 (difference_disjoint-1 nil 3237052399 3307982232 ("" (grind) nil nil) proved nil 104 110 nil nil)) (difference_disjoint2 0 (difference_disjoint2-1 nil 3253513146 3307982232 ("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil) proved nil 222 190 t nil)) (diff_union_inter 0 (diff_union_inter-1 nil 3237052399 3307982233 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved nil 159 140 nil nil)) (nonempty_add 0 (nonempty_add-1 nil 3237052399 3307982233 ("" (grind) nil nil) proved nil 127 100 nil nil)) (member_add 0 (member_add-1 nil 3237052399 3307982233 ("" (skosimp*) (("" (expand "add") (("" (apply-extensionality) (("" (hide 2) (("" (iff) (("" (expand "member") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 81 90 nil nil)) (member_remove 0 (member_remove-1 nil 3237052399 3307982233 ("" (skosimp*) (("" (apply-extensionality) (("" (hide 3) (("" (expand "remove") (("" (expand "member") (("" (iff) (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 81 70 nil nil)) (add_remove_member 0 (add_remove_member-1 nil 3237052399 3307982233 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved nil 191 160 nil nil)) (remove_add_member 0 (remove_add_member-1 nil 3237052399 3307982233 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved nil 188 150 nil nil)) (subset_add 0 (subset_add-1 nil 3237052399 3307982233 ("" (grind) nil nil) proved nil 86 80 nil nil)) (add_as_union 0 (add_as_union-1 nil 3237052399 3307982234 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved nil 195 150 nil nil)) (singleton_as_add 0 (singleton_as_add-1 nil 3237052399 3307982234 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved nil 131 130 nil nil)) (subset_remove 0 (subset_remove-1 nil 3237052399 3307982234 ("" (grind) nil nil) proved nil 134 90 nil nil)) (remove_as_difference 0 (remove_as_difference-1 nil 3237052399 3307982234 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved nil 165 150 nil nil)) (remove_member_singleton 0 (remove_member_singleton-1 nil 3237052399 3307982234 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved nil 192 130 nil nil)) (choose_rest_TCC1 0 (choose_rest_TCC1-1 nil 3237052399 3307982234 ("" (grind) nil nil) proved nil 67 70 nil nil)) (choose_rest 0 (choose_rest-1 nil 3237052399 3307982234 ("" (skosimp*) (("" (apply-extensionality) (("1" (hide 3) (("1" (expand "add") (("1" (hide 2) (("1" (iff) (("1" (split) (("1" (flatten) (("1" (expand "member") (("1" (split) (("1" (assert) nil nil) ("2" (expand "rest") (("2" (expand "remove") (("2" (flatten) (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "member") (("2" (expand "rest") (("2" (expand "remove") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "nonempty?") (("2" (propax) nil nil)) nil)) nil)) nil) proved nil 172 130 nil nil)) (choose_member 0 (choose_member-1 nil 3237052399 3307982235 ("" (grind) (("" (rewrite "epsilon_ax[T]") (("1" (inst?) nil nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil) proved nil 131 120 nil nil)) (choose_not_member 0 (choose_not_member-1 nil 3237052399 3307982235 ("" (skosimp*) (("" (expand "member") (("" (expand "rest") (("" (assert) (("" (expand "remove") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 62 60 nil nil)) (rest_not_equal 0 (rest_not_equal-1 nil 3237052399 3307982235 ("" (skosimp) (("" (expand "rest") (("" (replace 1) (("" (expand "remove") (("" (expand "empty?") (("" (skosimp) (("" (expand "member") (("" (typepred "choose(a!1)") (("1" (replace -3 -1 :dir rl) (("1" (beta) (("1" (flatten) (("1" (replace -2) (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 265 130 nil nil)) (rest_member 0 (rest_member-1 nil 3237052399 3307982235 ("" (tcc :defs !) nil nil) proved nil 145 120 nil nil)) (rest_subset 0 (rest_subset-1 nil 3237052399 3307982235 ("" (grind) nil nil) proved nil 180 120 nil nil)) (choose_add 0 (choose_add-1 nil 3237052399 3307982235 ("" (grind) (("" (typepred " choose(add(x!1, a!1))") (("" (expand "add" -1 1) (("" (expand "member") (("" (expand "choose") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 128 120 nil nil)) (choose_rest_or_TCC1 0 (choose_rest_or_TCC1-1 nil 3237052399 3307982236 ("" (tcc :defs !) nil nil) proved nil 125 120 nil nil)) (choose_rest_or 0 (choose_rest_or-1 nil 3237052399 3307982236 ("" (tcc :defs !) nil nil) proved nil 168 120 nil nil)) (choose_singleton 0 (choose_singleton-1 nil 3237052399 3307982236 ("" (skosimp*) (("" (typepred "choose(singleton(x!1))") (("1" (expand "singleton") (("1" (propax) nil nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil) proved nil 54 50 nil nil)) (rest_singleton 0 (rest_singleton-1 nil 3237052399 3307982236 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (expand "rest") (("" (expand "singleton") (("" (expand "remove") (("" (lift-if) (("" (expand "emptyset") (("" (prop) (("1" (expand "empty?") (("1" (inst -1 "x!1") (("1" (expand "member") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (expand "member") (("2" (expand "choose") (("2" (use "epsilon_ax[T]") (("1" (assert) nil nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 204 170 nil nil)) (singleton_subset 0 (singleton_subset-1 nil 3237052399 3307982236 ("" (grind) nil nil) proved nil 103 100 nil nil)) (rest_empty_lem 0 (rest_empty_lem-1 nil 3237052399 3307982236 ("" (skosimp*) (("" (expand "extend") (("" (apply-extensionality) (("1" (hide 3) (("1" (lift-if) (("1" (expand "singleton") (("1" (expand "empty?") (("1" (skosimp*) (("1" (expand "member") (("1" (split) (("1" (flatten) (("1" (typepred "choose(a!1)") (("1" (inst -4 "x!1") (("1" (expand "rest") (("1" (expand "remove") (("1" (expand "member") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "nonempty?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 226 160 nil nil)) (singleton_disjoint 0 (singleton_disjoint-1 nil 3237052399 3307982236 ("" (grind) nil nil) proved nil 152 110 nil nil)) (disjoint_remove_left 0 (disjoint_remove_left-1 nil 3237052399 3307982237 ("" (grind) nil nil) proved nil 245 160 nil nil)) (disjoint_remove_right 0 (disjoint_remove_right-1 nil 3237052399 3307982237 ("" (grind) nil nil) proved nil 204 150 nil nil)) (union_disj_remove_left 0 (union_disj_remove_left-1 nil 3237052399 3307982237 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved nil 274 230 nil nil)) (union_disj_remove_right 0 (union_disj_remove_right-1 nil 3237052399 3307982237 ("" (grind) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved nil 273 210 nil nil)) (subset_powerset 0 (subset_powerset-1 nil 3237053513 3307982238 ("" (grind) nil nil) proved nil 74 70 t shostak)) (empty_powerset 0 (empty_powerset-1 nil 3237053527 3307982238 ("" (grind :if-match nil) (("1" (inst 1 "emptyset") (("1" (skolem-typepred) (("1" (grind :if-match nil) (("1" (apply-extensionality) (("1" (inst -2 "x!1") (("1" (inst -3 "x!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (inst-cp -3 "emptyset") (("1" (inst -3 "a!1") (("1" (replace -3 :hide? t) (("1" (decompose-equality) (("1" (hide -2) (("1" (inst -1 "x!1") (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) proved nil 880 380 t shostak)) (powerset_emptyset 0 (powerset_emptyset-1 nil 3253513380 3307982239 ("" (grind) nil nil) proved nil 227 70 t nil)) (nonempty_powerset 0 (nonempty_powerset-1 nil 3237054070 3307982239 ("" (grind :if-match nil) (("" (inst -1 "emptyset") (("" (grind) nil nil)) nil)) nil) proved nil 201 130 t shostak)) (powerset_union 0 (powerset_union-1 nil 3253513413 3307982240 ("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil) proved nil 729 220 t nil)) (powerset_intersection 0 (powerset_intersection-1 nil 3253513443 3307982240 ("" (grind) (("" (inst -1 "emptyset") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) proved nil 198 140 t nil)) (powerset_subset 0 (powerset_subset-1 nil 3253513517 3307982240 ("" (grind) nil nil) proved nil 256 200 t nil)) (Union_empty 0 (Union_empty-1 nil 3253513523 3307982240 ("" (grind) nil nil) proved nil 288 220 t nil)) (Union_full 0 (Union_full-1 nil 3253513528 3307982240 ("" (grind) nil nil) proved nil 61 60 t nil)) (Union_subset 0 (Union_subset-1 nil 3253513533 3307982241 ("" (grind) nil nil) proved nil 111 110 t nil)) (Union_surjective 0 (Union_surjective-1 nil 3253512260 3307982241 ("" (grind) (("" (inst 1 "powerset(y!1)") (("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved nil 290 240 t nil)) (Intersection_empty 0 (Intersection_empty-1 nil 3253513663 3307982241 ("" (grind) nil nil) proved nil 225 170 t nil)) (Intersection_full 0 (Intersection_full-1 nil 3253513669 3307982241 ("" (grind) nil nil) proved nil 206 160 t nil)) (Intersection_empty_full 0 (Intersection_empty_full-1 nil 3253513675 3307982241 ("" (grind) nil nil) proved nil 90 80 t nil)) (Intersection_surjective 0 (Intersection_surjective-1 nil 3253512260 3307982242 ("" (grind) (("" (inst 1 "singleton(y!1)") (("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved nil 253 200 t nil)) (Complement_empty 0 (Complement_empty-1 nil 3253513724 3307982242 ("" (grind :if-match nil) (("1" (inst -1 "complement(x!1)") (("1" (inst 1 "x!1") nil nil)) nil) ("2" (inst -3 "b!1") nil nil)) nil) proved nil 199 150 t nil)) (Complement_full 0 (Complement_full-1 nil 3253514020 3307982242 ("" (grind :if-match nil) (("1" (inst - "complement(x!1)") (("1" (skolem!) (("1" (rewrite "complement_equal") nil nil)) nil)) nil) ("2" (inst - "complement(x!1)") (("2" (inst + "complement(x!1)") (("2" (use "complement_complement[T]") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 225 170 t nil)) (Complement_Complement 0 (Complement_Complement-1 nil 3253514589 3307982242 ("" (skolem!) (("" (expand "Complement") (("" (apply-extensionality :hide? t) (("" (smash) (("1" (skosimp* :preds? t) (("1" (use "complement_complement[T]") (("1" (assert) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (inst + "complement(x!1)") (("1" (use "complement_complement[T]") (("1" (assert) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 175 170 t nil)) (subset_Complement 0 (subset_Complement-1 nil 3253515065 3307982243 ("" (grind :if-match nil) (("1" (inst - "complement(x!1)") (("1" (split) (("1" (skolem!) (("1" (rewrite "complement_equal") nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst - "b!1") (("2" (assert) (("2" (inst + "b!1") nil nil)) nil)) nil)) nil) proved nil 303 210 t nil)) (Complement_bijective 0 (Complement_bijective-1 nil 3253512260 3307982243 ("" (expand* "bijective?" "injective?" "surjective?") (("" (split) (("1" (skosimp) (("1" (lemma "Complement_Complement") (("1" (inst-cp - "x2!1") (("1" (inst - "x1!1") (("1" (assert) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst + "Complement(y!1)") (("2" (use "Complement_Complement") nil nil)) nil)) nil)) nil)) nil) proved nil 102 90 t nil)) (Demorgan1 0 (Demorgan1-1 nil 3253515330 3307982243 ("" (skolem!) (("" (apply-extensionality :hide? t) (("" (grind :if-match nil) (("1" (inst?) nil nil) ("2" (inst - "complement(a!1)") (("1" (expand* "complement" "member") nil nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil) proved nil 317 240 t nil)) (Demorgan2 0 (Demorgan2-1 nil 3253515430 3307982243 ("" (skolem!) (("" (apply-extensionality :hide? t) (("" (grind :if-match nil) (("1" (inst + "complement(a!1)") (("1" (expand* "complement" "member") nil nil) ("2" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil) proved nil 291 220 t nil)))(function_inverse_def (left_inverse_is_inverse 0 (left_inverse_is_inverse-1 nil 3252428734 3307982244 ("" (grind) nil nil) proved nil 145 110 t shostak)) (left_inj_surj 0 (left_inj_surj-1 nil 3252428739 3307982244 ("" (grind :if-match all) nil nil) proved nil 190 180 t shostak)) (inj_left_alt 0 (inj_left_alt-1 nil 3253554040 3307982244 ("" (grind :if-match all) nil nil) proved nil 208 160 t shostak)) (surj_inv_alt 0 (surj_inv_alt-1 nil 3253554148 3307982244 ("" (skolem!) (("" (use "inj_left_alt") (("" (use "left_inj_surj") (("" (flatten) nil nil)) nil)) nil)) nil) proved nil 78 80 t shostak)) (injective_inverse_alt 0 (injective_inverse_alt-1 nil 3253554196 3307982244 ("" (grind :if-match all) nil nil) proved nil 226 190 t shostak)) (comp_inverse_left_inj_alt 0 (comp_inverse_left_inj_alt-1 nil 3253554225 3307982244 ("" (grind :if-match all) nil nil) proved nil 163 150 t shostak)) (noninjective_inverse_exists 0 (noninjective_inverse_exists-1 nil 3252428875 3307982245 ("" (skosimp) (("" (inst + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (expand "inverse?") (("1" (skosimp*) (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (expand "injective?") (("2" (skosimp) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 167 110 t shostak)) (right_inverse_is_inverse 0 (right_inverse_is_inverse-1 nil 3252429153 3307982245 ("" (grind) nil nil) proved nil 221 90 t shostak)) (right_surj_inj 0 (right_surj_inj-1 nil 3252429158 3307982245 ("" (grind :if-match all) nil nil) proved nil 215 180 t shostak)) (surj_right_alt 0 (surj_right_alt-1 nil 3253554259 3307982245 ("" (grind) nil nil) proved nil 189 130 t shostak)) (inj_inv_alt 0 (inj_inv_alt-1 nil 3253554287 3307982245 ("" (skolem!) (("" (use "surj_right_alt") (("" (use "right_surj_inj") (("" (flatten) nil nil)) nil)) nil)) nil) proved nil 84 70 t shostak)) (surjective_inverse_alt 0 (surjective_inverse_alt-1 nil 3253555867 3307982246 ("" (grind) nil nil) proved nil 193 140 t shostak)) (comp_inverse_right_surj_alt 0 (comp_inverse_right_surj_alt-1 nil 3253554365 3307982246 ("" (grind) nil nil) proved nil 167 130 t shostak)) (surjective_inverse_exists 0 (surjective_inverse_exists-1 nil 3252429210 3307982246 ("" (skolem-typepred) (("" (expand "surjective?") (("" (inst + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (expand "inverse?") (("1" (skosimp*) (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst - "r!1") (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 119 110 t shostak)) (left_right_bij 0 (left_right_bij-1 nil 3252429300 3307982246 ("" (skosimp) (("" (use "left_inj_surj") (("" (use "right_surj_inj") (("" (expand "bijective?") (("" (prop) nil nil)) nil)) nil)) nil)) nil) proved nil 142 100 t shostak)) (bij_left_right 0 (bij_left_right-1 nil 3252429361 3307982246 ("" (skolem!) (("" (use "inj_left_alt") (("" (use "surj_right_alt") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 79 70 t shostak)) (bij_inv_is_bij_alt 0 (bij_inv_is_bij_alt-1 nil 3253554448 3307982246 ("" (skolem!) (("" (use "surj_inv_alt") (("" (use "inj_inv_alt") (("" (expand "bijective?") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 89 80 t shostak)) (bijective_inverse_alt 0 (bijective_inverse_alt-1 nil 3253554490 3307982246 ("" (skolem!) (("" (use "injective_inverse_alt") (("" (use "surjective_inverse_alt") (("" (prop) nil nil)) nil)) nil)) nil) proved nil 119 90 t shostak)) (comp_inverse_right_alt 0 (comp_inverse_right_alt-1 nil 3253556090 3307982246 ("" (skolem!) (("" (use "comp_inverse_right_surj_alt") nil nil)) nil) proved nil 56 50 t shostak)) (comp_inverse_left_alt 0 (comp_inverse_left_alt-1 nil 3253556119 3307982247 ("" (skolem!) (("" (use "comp_inverse_left_inj_alt") nil nil)) nil) proved nil 59 60 t shostak)) (bijective_inverse_exists 0 (bijective_inverse_exists-1 nil 3252429536 3307982247 ("" (skolem-typepred) (("" (expand "exists1") (("" (split) (("1" (inst + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (expand "inverse?") (("1" (skosimp*) (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (expand* "bijective?" "surjective?") (("2" (skosimp) (("2" (inst - "r!1") (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "unique?") (("2" (skosimp) (("2" (apply-extensionality :hide? t) (("2" (grind :if-match nil) (("2" (inst - "x!2") (("2" (inst - "x!2") (("2" (inst - "x!2") (("2" (skolem!) (("2" (smash) (("1" (inst - "x!1(x!2)" "y!1(x!2)") (("1" (assert) nil nil)) nil) ("2" (inst? +) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 495 330 t shostak)) (exists_inv1 0 (exists_inv1-1 nil 3253986702 3307982247 ("" (prop) (("1" (skosimp*) (("1" (inst 1 "g!1(r!1)") nil nil)) nil) ("2" (skosimp*) (("2" (inst 1 "LAMBDA r: epsilon! d: TRUE") (("2" (skosimp*) (("2" (inst 1 "d!1") nil nil)) nil)) nil)) nil) ("3" (inst 1 "LAMBDA r: epsilon! d: TRUE") (("3" (skosimp*) (("3" (inst -1 "r!1") nil nil)) nil)) nil)) nil) proved nil 81 70 t shostak)) (exists_inv2 0 (exists_inv2-1 nil 3253986940 3307982247 ("" (prop) (("" (skosimp*) (("" (typepred "f!1") (("" (expand "surjective?") (("" (inst -1 "r!1") (("" (skosimp*) (("" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 97 60 t shostak)) (exists_inv3 0 (exists_inv3-1 nil 3253986970 3307982247 ("" (prop) (("" (skosimp*) (("" (expand "injective?") (("" (skosimp*) (("" (inst 2 "x1!1") nil nil)) nil)) nil)) nil)) nil) proved nil 60 50 t nil)))(function_inverse (unique_bijective_inverse 0 (unique_bijective_inverse-1 nil 3237052399 3307982247 ("" (skolem-typepred) (("" (grind :if-match nil) (("" (inst? -2) (("" (skosimp) (("" (replace -2 :dir rl) (("" (use "epsilon_ax[D]") (("" (split) (("1" (propax) nil nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 194 160 nil nil)) (bijective_inverse_is_bijective 0 (bijective_inverse_is_bijective-1 nil 3237052399 3307982248 ("" (skolem-typepred) (("" (grind :if-match nil) (("1" (inst 1 "f!1(y!1)") (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (split) (("1" (inst? -2) (("1" (assert) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (use "epsilon_ax[D]") (("2" (split) (("1" (lemma "epsilon_ax[D]") (("1" (inst -1 "lambda (x: D): f!1(x) = x2!1") (("1" (split) (("1" (assert) nil nil) ("2" (inst -3 "x2!1") nil nil)) nil)) nil)) nil) ("2" (inst -2 "x1!1") nil nil)) nil)) nil)) nil)) nil) proved nil 648 310 nil nil)) (surjective_inverse 0 (surjective_inverse-1 nil 3253556988 3307982248 ("" (skosimp) (("" (expand "inverse") (("" (lemma "epsilon_ax[D]") (("" (inst -1 "LAMBDA (x:D): f!1(x) = y!1") (("" (prop) (("1" (replace -2) (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil) ("2" (typepred "f!1") (("2" (expand "surjective?") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 102 70 t shostak)) (inverse_surjective 0 (inverse_surjective-1 nil 3299953777 3307982248 ("" (skosimp) (("" (use "surjective_inverse") (("" (assert) nil nil)) nil)) nil) proved nil 235 60 t shostak)) (injective_inverse 0 (injective_inverse-1 nil 3237052399 3307982249 ("" (skosimp) (("" (expand "inverse") (("" (typepred "f!1") (("" (expand "injective?") (("" (lemma "epsilon_ax[D]") (("" (inst -1 "LAMBDA (x:D): f!1(x) = y!1") (("" (prop) (("1" (replace -3) (("1" (inst?) (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (inst?) (("2" (replace -2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 218 90 nil nil)) (inverse_injective 0 (inverse_injective-1 nil 3299953859 3307982249 ("" (skosimp) (("" (use "injective_inverse") nil nil)) nil) proved nil 89 40 t shostak)) (bijective_inverse 0 (bijective_inverse-1 nil 3237052399 3307982249 ("" (skosimp) (("" (split) (("1" (rewrite "surjective_inverse") (("1" (typepred "f!1") (("1" (expand "bijective?") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (rewrite "injective_inverse") (("2" (typepred "f!1") (("2" (expand "bijective?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 124 70 nil nil)) (bij_inv_is_bij 0 (bij_inv_is_bij-1 nil 3237052399 3307982250 ("" (skosimp*) (("" (expand "bijective?") (("" (expand "injective?") (("" (expand "surjective?") (("" (flatten) (("" (split) (("1" (skosimp*) (("1" (lemma "bijective_inverse") (("1" (inst?) (("1" (assert) (("1" (expand "inverse" -1) (("1" (lemma "epsilon_ax[D]") (("1" (inst?) (("1" (split) (("1" (assert) nil nil) ("2" (inst -4 "x2!1") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "bijective?") (("2" (expand "injective?") (("2" (assert) (("2" (replace -2) (("2" (expand "surjective?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst 1 "f!1(y!1)") (("2" (rewrite "injective_inverse") (("2" (expand "injective?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 592 190 nil nil)) (surj_right 0 (surj_right-1 nil 3237052399 3307982250 ("" (grind) (("" (lemma "epsilon_ax[D]") (("" (inst?) (("" (split) (("1" (propax) nil nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil) proved nil 250 200 nil nil)) (inj_left 0 (inj_left-1 nil 3237052399 3307982250 ("" (skosimp) (("" (prop) (("1" (grind) (("1" (lemma "epsilon_ax[D]") (("1" (inst?) (("1" (assert) (("1" (inst 1 "d!1") nil nil)) nil)) nil)) nil)) nil) ("2" (expand "left_inverse?") (("2" (expand "inverse") (("2" (expand "injective?") (("2" (skosimp) (("2" (inst-cp -1 "x1!1") (("2" (inst -1 "x2!1") (("2" (assert) (("2" (replace -3) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 210 190 t nil)) (inj_inv 0 (inj_inv-1 nil 3237052399 3307982250 ("" (skosimp) (("" (expand "surjective?") (("" (expand "injective?") (("" (expand "inverse") (("" (skosimp) (("" (inst-cp -1 "x1!1") (("" (inst -1 "x2!1") (("" (skosimp) (("" (skosimp) (("" (lemma "epsilon_ax[D]") (("" (inst-cp -1 "LAMBDA (x:D): f!1(x)=x1!1") (("" (inst -1 "LAMBDA (x:D): f!1(x)=x2!1") (("" (prop) (("1" (replace -5) (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil) ("2" (inst?) nil nil) ("3" (inst?) nil nil) ("4" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 174 140 nil nil)) (surj_inv 0 (surj_inv-1 nil 3237052399 3307982250 ("" (skosimp) (("" (expand "surjective?") (("" (expand "injective?") (("" (skosimp) (("" (expand "inverse") (("" (inst -1 "y!1" _) (("" (inst 1 "f!1(y!1)") (("" (inst -1 "(epsilon ! (x_5: D): f!1(x_5) = f!1(y!1))") (("" (prop) (("1" (replace -1) (("1" (replace -1 :dir rl) (("1" (replace -1 :dir rl) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (lemma "epsilon_ax[D]") (("2" (inst?) (("2" (prop) (("1" (replace -1) (("1" (propax) nil nil)) nil) ("2" (inst 1 "y!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 135 100 nil nil)) (inv_inj_is_surj 0 (inv_inj_is_surj-1 nil 3237052399 3307982251 ("" (grind :if-match nil) (("" (inst 1 "f!1(y!1)") (("" (inst? -1) (("" (assert) (("" (lemma "epsilon_ax[D]") (("" (inst?) (("" (assert) (("" (inst 1 "y!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 148 150 nil nil)) (inv_surj_is_inj 0 (inv_surj_is_inj-1 nil 3237052399 3307982251 ("" (grind :if-match nil) (("" (inst-cp -1 "x1!1") (("" (inst -1 "x2!1") (("" (skosimp*) (("" (lemma "epsilon_ax[D]") (("" (lemma "epsilon_ax[D]") (("" (inst?) (("" (inst -2 "LAMBDA (x: D): f!1(x) = x2!1") (("" (assert) (("" (prop) (("1" (assert) nil nil) ("2" (inst 1 "x!1") nil nil) ("3" (inst 1 "x!2") nil nil) ("4" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 233 200 nil nil)) (comp_inverse_right_surj 0 (comp_inverse_right_surj-1 nil 3237052399 3307982251 ("" (grind :if-match nil) (("" (use "epsilon_ax[D]") (("" (assert) (("" (inst? -1) nil nil)) nil)) nil)) nil) proved nil 172 120 nil nil)) (comp_inverse_left_inj 0 (comp_inverse_left_inj-1 nil 3237052399 3307982251 ("" (grind :if-match nil) (("" (use "epsilon_ax[D]") (("" (split) (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil) proved nil 156 140 nil nil)) (comp_inverse_right 0 (comp_inverse_right-1 nil 3237052399 3307982251 ("" (skosimp) (("" (lemma "comp_inverse_right_surj") (("" (inst?) (("" (typepred "f!1") (("" (expand "bijective?") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 56 50 nil nil)) (comp_inverse_left 0 (comp_inverse_left-1 nil 3237052399 3307982251 ("" (skolem-typepred) (("" (expand "bijective?") (("" (lemma "comp_inverse_left_inj") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 103 70 nil nil)))(function_inverse_alt (inverses_TCC1 0 (inverses_TCC1-1 nil 3252433331 3307982252 ("" (skolem!) (("" (lemma "inverse_types") (("" (split) (("1" (skolem!) (("1" (inst + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (expand "inverse?") (("1" (skosimp*) (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst + "d!1") nil nil)) nil)) nil)) nil) ("2" (inst 1 "LAMBDA (r: R): epsilon[D](LAMBDA (d: D): TRUE)") (("1" (grind) nil nil) ("2" (skolem!) (("2" (inst -1 "r!1") nil nil)) nil)) nil) ("3" (inst + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (expand "inverse?") (("1" (skosimp*) (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst + "g!1(r!1)") nil nil)) nil)) nil) ("4" (skolem-typepred) (("4" (inst + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (expand "inverse?") (("1" (skosimp*) (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skolem!) (("2" (inst - "r!1") (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (expand "injective?") (("5" (skosimp*) (("5" (inst + "LAMBDA r: (epsilon! d: f!1(d) = r)") (("1" (expand "inverse?") (("1" (skosimp*) (("1" (use "epsilon_ax[D]") (("1" (assert) (("1" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 232 180 t shostak)) (inverse_alt_TCC1 0 (inverse_alt_TCC1-1 nil 3252433785 3307982252 ("" (grind) nil nil) proved nil 63 50 t shostak)) (bijective_inverse_is_inverse_alt 0 (bijective_inverse_is_inverse_alt-1 nil 3252433810 3307982252 ("" (skolem!) (("" (typepred "inverse_alt(f!1)") (("" (expand "inverse?") (("" (typepred "g!1") (("" (expand "inverse?") (("" (apply-extensionality :hide? t) (("" (inst -1 "x!1") (("" (inst -2 "x!1") (("" (typepred "f!1") (("" (prop) (("1" (expand "bijective?") (("1" (flatten) (("1" (expand "injective?") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "g!1(x!1)") nil nil) ("3" (inst 1 "inverse_alt(f!1)(x!1)") nil nil) ("4" (expand "bijective?") (("4" (flatten) (("4" (expand "surjective?") (("4" (inst -2 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 198 150 t shostak)) (unique_bijective_inverse_alt 0 (unique_bijective_inverse_alt-1 nil 3252311738 3307982252 ("" (skolem-typepred) (("" (typepred "inverse_alt(f!1)") (("" (expand* "inverse?" "bijective?" "surjective?") (("" (inst - "r!1") (("" (smash) (("" (inst - "r!1") nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 127 100 t shostak)) (bijective_inverse_alt_is_bijective 0 (bijective_inverse_alt_is_bijective-1 nil 3252311739 3307982253 ("" (skolem-typepred) (("" (typepred "inverse_alt(f!1)") (("" (expand* "inverse?" "bijective?" "surjective?" "injective?") (("" (prop) (("1" (skosimp) (("1" (inst-cp - "x2!1") (("1" (inst - "x1!1") (("1" (smash) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst + "f!1(y!1)") (("2" (inst - "f!1(y!1)") (("2" (prop) (("1" (inst - "inverse_alt(f!1)(f!1(y!1))" "y!1") (("1" (assert) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 618 170 t shostak)) (inv_inj_is_surj_alt 0 (inv_inj_is_surj_alt-1 nil 3252311739 3307982253 ("" (grind :if-match nil) (("" (inst 1 "f!1(y!1)") (("" (name-replace "gg" "epsilon({g: inverses(f!1) | TRUE})") (("" (typepred "gg") (("" (expand "inverse?") (("" (inst -1 "f!1(y!1)") (("" (prop) (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (inst 1 "y!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 185 180 t shostak)) (inv_surj_is_inj_alt 0 (inv_surj_is_inj_alt-1 nil 3252311739 3307982253 ("" (grind :if-match nil) (("" (name-replace "gg" "epsilon({g: inverses(f!1) | TRUE})") (("" (typepred "gg") (("" (expand "inverse?") (("" (assert) (("" (inst-cp -2 "x1!1") (("" (inst -2 "x2!1") (("" (inst-cp -1 "x1!1") (("" (inst -1 "x2!1") (("" (assert) (("" (replace -3) (("" (replace -4) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 241 200 t shostak)))(function_image (fun_exists 0 (fun_exists-1 nil 3237052399 3307982253 ("" (flatten) (("" (split) (("1" (skosimp) (("1" (inst 1 "LAMBDA (x:D): y!1") nil nil)) nil) ("2" (inst 2 "LAMBDA (x:D): epsilon! (y:R): TRUE") (("2" (skolem-typepred) (("2" (inst 2 "x!1") nil nil)) nil)) nil)) nil)) nil) proved nil 86 60 t nil)) (image_inverse_image 0 (image_inverse_image-1 nil 3237052399 3307982253 ("" (grind) nil nil) proved nil 103 100 nil nil)) (inverse_image_image 0 (inverse_image_image-1 nil 3237052399 3307982253 ("" (grind) nil nil) proved nil 142 100 nil nil)) (image_subset 0 (image_subset-1 nil 3237052399 3307982254 ("" (grind) nil nil) proved nil 145 140 nil nil)) (inverse_image_subset 0 (inverse_image_subset-1 nil 3237052399 3307982254 ("" (grind) nil nil) proved nil 160 120 nil nil)) (image_union 0 (image_union-1 nil 3237052399 3307982254 ("" (grind) (("" (apply-extensionality) (("" (iff) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 430 380 nil nil)) (image_intersection 0 (image_intersection-1 nil 3237052399 3307982254 ("" (grind) nil nil) proved nil 217 170 nil nil)) (inverse_image_union 0 (inverse_image_union-1 nil 3237052399 3307982255 ("" (grind) (("" (apply-extensionality) nil nil)) nil) proved nil 160 150 nil nil)) (inverse_image_intersection 0 (inverse_image_intersection-1 nil 3237052399 3307982255 ("" (grind) (("" (apply-extensionality) nil nil)) nil) proved nil 181 120 nil nil)) (inverse_image_complement 0 (inverse_image_complement-1 nil 3237052399 3307982255 ("" (grind) (("" (apply-extensionality) nil nil)) nil) proved nil 247 120 nil nil)))(function_props (composition_injective 0 (composition_injective-1 nil 3237052399 3307982255 ("" (subtype-tcc) nil nil) proved nil 185 140 nil nil)) (composition_surjective 0 (composition_surjective-1 nil 3237052399 3307982255 ("" (subtype-tcc) nil nil) proved nil 219 160 nil nil)) (composition_bijective 0 (composition_bijective-1 nil 3237052399 3307982255 ("" (subtype-tcc) nil nil) proved nil 57 50 nil nil)) (image_composition 0 (image_composition-1 nil 3237052399 3307982256 ("" (grind) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil) proved nil 384 340 nil nil)) (preserves_composition 0 (preserves_composition-1 nil 3237052399 3307982256 ("" (grind) nil nil) proved nil 236 200 nil nil)) (inverts_composition1 0 (inverts_composition1-1 nil 3237052399 3307982256 ("" (grind) nil nil) proved nil 255 190 nil nil)) (inverts_composition2 0 (inverts_composition2-1 nil 3237052399 3307982257 ("" (grind) nil nil) proved nil 318 190 nil nil)))(function_props_alt (composition_preserves 0 (composition_preserves-1 nil 3237052399 3307982257 ("" (subtype-tcc) nil nil) proved nil 303 240 nil nil)) (composition_inverts1 0 (composition_inverts1-1 nil 3237052399 3307982257 ("" (subtype-tcc) nil nil) proved nil 263 260 nil nil)) (composition_inverts2 0 (composition_inverts2-1 nil 3237052399 3307982258 ("" (subtype-tcc) nil nil) proved nil 310 250 nil nil)))(function_props2 (assoc 0 (assoc-1 nil 3237052399 3307982258 ("" (skolem 1 ("f!1" "g!1" "h!1")) (("" (expand "o") (("" (propax) nil nil)) nil)) nil) proved nil 48 50 nil nil)))(relation_defs)(relation_props (total_composition 0 (total_composition-1 nil 3237052399 3307982258 ("" (grind) nil nil) proved nil 569 160 nil nil)) (onto_composition 0 (onto_composition-1 nil 3237052399 3307982259 ("" (grind) nil nil) proved nil 542 170 nil nil)) (composition_total 0 (composition_total-1 nil 3237052399 3307982259 ("" (subtype-tcc) nil nil) proved nil 193 140 nil nil)) (composition_onto 0 (composition_onto-1 nil 3237052399 3307982260 ("" (subtype-tcc) nil nil) proved nil 618 220 nil nil)))(relation_props2 (assoc 0 (assoc-1 nil 3237052399 3307982260 ("" (skosimp) (("" (apply-extensionality) (("" (hide 2) (("" (expand "o") (("" (iff) (("" (prop) (("1" (skosimp) (("1" (skosimp) (("1" (inst?) (("1" (assert) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (assert) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 287 230 nil nil)))(relation_converse_props (reflexive_converse 0 (reflexive_converse-1 nil 3249387244 3307982260 ("" (subtype-tcc) nil nil) proved nil 87 80 t shostak)) (irreflexive_converse 0 (irreflexive_converse-1 nil 3249387255 3307982260 ("" (subtype-tcc) nil nil) proved nil 153 90 t shostak)) (symmetric_converse 0 (symmetric_converse-1 nil 3249387255 3307982260 ("" (skolem-typepred) (("" (expand* "converse" "symmetric?") (("" (skosimp) (("" (inst - "y!1" "x!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 87 80 t shostak)) (antisymmetric_converse 0 (antisymmetric_converse-1 nil 3249387255 3307982261 ("" (subtype-tcc) nil nil) proved nil 219 160 t shostak)) (connected_converse 0 (connected_converse-1 nil 3249387255 3307982261 ("" (subtype-tcc) nil nil) proved nil 220 190 t shostak)) (transitive_converse 0 (transitive_converse-1 nil 3249387255 3307982261 ("" (skolem-typepred) (("" (expand* "converse" "transitive?") (("" (skosimp) (("" (inst - "z!1" "y!1" "x!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 201 150 t shostak)) (equivalence_converse 0 (equivalence_converse-1 nil 3249387255 3307982261 ("" (subtype-tcc) nil nil) proved nil 340 300 t shostak)) (preorder_converse 0 (preorder_converse-1 nil 3249387255 3307982262 ("" (subtype-tcc) nil nil) proved nil 476 430 t shostak)) (partial_order_converse 0 (partial_order_converse-1 nil 3249387255 3307982263 ("" (subtype-tcc) nil nil) proved nil 723 590 t shostak)) (strict_order_converse 0 (strict_order_converse-1 nil 3249387255 3307982263 ("" (subtype-tcc) nil nil) proved nil 818 740 t shostak)) (dichotomous_converse 0 (dichotomous_converse-1 nil 3249387255 3307982265 ("" (subtype-tcc) nil nil) proved nil 1169 920 t shostak)) (total_order_converse 0 (total_order_converse-1 nil 3249387255 3307982266 ("" (subtype-tcc) nil nil) proved nil 1375 1060 t shostak)) (trichotomous_converse 0 (trichotomous_converse-1 nil 3249387256 3307982268 ("" (subtype-tcc) nil nil) proved nil 1525 1270 t shostak)) (strict_total_order_converse 0 (strict_total_order_converse-1 nil 3249387256 3307982270 ("" (subtype-tcc) nil nil) proved nil 2619 1470 t shostak)))(indexed_sets (IUnion_Union 0 (IUnion_Union-1 nil 3237054186 3307982270 ("" (grind) (("" (apply-extensionality :hide? t) (("" (iff) (("" (prop) (("1" (skolem-typepred) (("1" (inst 1 "A!1(i!1)") (("1" (inst 1 "i!1") nil nil)) nil)) nil) ("2" (skolem-typepred) (("2" (grind :if-match nil) (("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 293 220 t shostak)) (IIntersection_Intersection 0 (IIntersection_Intersection-1 nil 3237054338 3307982271 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) (("" (iff) (("" (prop) (("1" (skolem-typepred) (("1" (grind :if-match nil) (("1" (inst - "x!2") nil nil)) nil)) nil) ("2" (skolem-typepred) (("2" (inst -1 "A!1(i!1)") (("2" (inst 1 "i!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 269 220 t shostak)) (IUnion_union 0 (IUnion_union-1 nil 3237054431 3307982271 ("" (skolem-typepred) (("" (apply-extensionality :hide? t) (("" (iff) (("" (grind :if-match nil) (("1" (inst 1 "i!1") nil nil) ("2" (inst 2 "i!1") nil nil) ("3" (inst 1 "i!1") (("3" (assert) nil nil)) nil) ("4" (inst 1 "i!1") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 371 280 t shostak)) (IIntersection_intersection 0 (IIntersection_intersection-1 nil 3237054514 3307982272 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) (("" (grind :if-match nil) (("1" (inst -1 "i!1") (("1" (assert) nil nil)) nil) ("2" (inst -1 "i!1") (("2" (assert) nil nil)) nil) ("3" (inst -2 "i!1") nil nil) ("4" (inst -1 "i!1") nil nil)) nil)) nil)) nil) proved nil 408 330 t shostak)) (IUnion_intersection 0 (IUnion_intersection-1 nil 3237054595 3307982272 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) (("" (grind :if-match nil) (("" (inst 1 "i!1") nil nil)) nil)) nil)) nil) proved nil 240 190 t shostak)) (IIntersection_union 0 (IIntersection_union-1 nil 3237054623 3307982272 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) (("" (grind :if-match nil) (("" (inst?) nil nil)) nil)) nil)) nil) proved nil 227 170 t shostak)))(operator_defs)(numbers)(number_fields (commutative_add 0 (commutative_add-1 nil 3242535784 3307982272 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 34 40 t shostak)) (associative_add 0 (associative_add-1 nil 3242535799 3307982272 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 37 30 t shostak)) (identity_add 0 (identity_add-1 nil 3242535806 3307982272 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 33 40 t shostak)) (inverse_add 0 (inverse_add-1 nil 3242535812 3242537042 ("" (skosimp) (("" (assert) (("" (assert) (("" (postpone) nil nil)) nil)) nil)) nil) unchecked nil 58491 160 t shostak)) (minus_add 0 (minus_add-1 nil 3242537058 3242537087 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unchecked nil 28913 480 t shostak)) (commutative_mult 0 (commutative_mult-1 nil 3242536887 3242537102 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unchecked nil 9430 480 t shostak)) (associative_mult 0 (associative_mult-1 nil 3242536707 3242537132 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unchecked nil 9568 460 t shostak)) (identity_mult 0 (identity_mult-1 nil 3242537143 3242537151 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unchecked nil 8605 500 t shostak)) (inverse_mult 0 (inverse_mult-1 nil 3242537160 3242537168 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unchecked nil 8174 470 t shostak)) (div_def 0 (div_def-1 nil 3242537180 3242537188 ("" (skosimp) (("" (assert) (("" (postpone) nil nil)) nil)) nil) unchecked nil 8695 480 t shostak)) (distributive 0 (distributive-1 nil 3242537198 3307982272 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 41 40 t shostak)))(reals (real_plus_real_is_real 0 (real_plus_real_is_real-1 nil 3242538128 3307982272 ("" (lemma "closed_plus") (("" (propax) nil nil)) nil) proved nil 31 30 t shostak)) (real_minus_real_is_real 0 (real_minus_real_is_real-1 nil 3242538153 3307982272 ("" (lemma "closed_minus") (("" (propax) nil nil)) nil) proved nil 28 30 t shostak)) (real_times_real_is_real 0 (real_times_real_is_real-1 nil 3242538163 3307982272 ("" (lemma "closed_times") (("" (propax) nil nil)) nil) proved nil 62 30 t shostak)) (real_div_nzreal_is_real 0 (real_div_nzreal_is_real-1 nil 3242538175 3307982272 ("" (lemma "closed_divides") (("" (propax) nil nil)) nil) proved nil 27 30 t shostak)) (minus_real_is_real 0 (minus_real_is_real-1 nil 3242538196 3307982272 ("" (lemma "closed_neg") (("" (propax) nil nil)) nil) proved nil 27 20 t shostak)) (reals_totally_ordered 0 (reals_totally_ordered-1 nil 3237052399 3307982273 ("" (grind) nil nil) proved nil 169 160 nil nil)))(real_axioms (posreal_add_closed 0 (posreal_add_closed-1 nil 3237052399 3307982273 ("" (grind) nil nil) proved nil 121 90 nil nil)) (posreal_neg 0 (posreal_neg-1 nil 3237052399 3307982273 ("" (grind) nil nil) proved nil 63 60 nil nil)) (trichotomy 0 (trichotomy-1 nil 3237052399 3307982273 ("" (grind) nil nil) proved nil 63 60 nil nil)))(bounded_real_defs (real_lower_complete 0 (real_lower_complete-1 nil 3237052399 3307982273 ("" (lemma "real_complete") (("" (skosimp) (("" (inst -1 "{x: real | S!1(-x)}") (("1" (skosimp) (("1" (split) (("1" (skosimp) (("1" (expand "least_upper_bound?") (("1" (inst 1 "-y!2") (("1" (expand "greatest_lower_bound?") (("1" (hide -2) (("1" (prop) (("1" (expand "upper_bound?") (("1" (expand "lower_bound?") (("1" (skosimp) (("1" (inst -1 "-s!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -3 "-y!3") (("2" (hide -2) (("2" (expand "lower_bound?") (("2" (expand "upper_bound?") (("2" (split) (("1" (assert) nil nil) ("2" (skosimp) (("2" (inst -1 "-s!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (inst 1 "-y!1") (("2" (expand "upper_bound?") (("2" (skosimp) (("2" (expand "lower_bound?") (("2" (inst -1 "-s!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "S!1") (("2" (hide -2 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (skosimp) (("2" (expand "member") (("2" (inst -2 "-x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 334 220 nil nil)) (lub_exists 0 (lub_exists-1 nil 3237052399 3307982273 ("" (skolem-typepred) (("" (use "real_complete") (("" (assert) (("" (replace 1) (("" (assert) (("" (expand "bounded_above?") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 73 70 nil nil)) (lub_TCC1 0 (lub_TCC1-1 nil 3237052399 3307982273 ("" (use "real_complete") (("" (inst 1 "LAMBDA (S:(bounded_above?)): epsilon! (x:real): least_upper_bound?(x, S)") (("" (skosimp) (("" (use "epsilon_ax[real]") (("" (assert) (("" (inst? -1) (("" (typepred "S!1") (("" (split) (("1" (propax) nil nil) ("2" (expand "bounded_above?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 119 110 nil nil)) (lub_lem 0 (lub_lem-1 nil 3237052399 3307982274 ("" (skosimp) (("" (typepred "lub(SA!1)") (("" (assert) (("" (prop) (("1" (assert) nil nil) ("2" (grind :if-match nil) (("2" (inst -2 "lub(SA!1)") (("2" (inst -4 "x!1") (("2" (replace -1) (("2" (replace -3) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 286 230 nil nil)) (glb_exists 0 (glb_exists-1 nil 3237052399 3307982274 ("" (skosimp) (("" (use "real_lower_complete") (("" (assert) (("" (split) (("1" (propax) nil nil) ("2" (typepred "SB!1") (("2" (expand "bounded_below?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 60 50 nil nil)) (glb_TCC1 0 (glb_TCC1-1 nil 3237052399 3307982274 ("" (inst 1 "LAMBDA (S:(bounded_below?)): epsilon! (x:real): greatest_lower_bound?(x, S)") (("" (skolem-typepred) (("" (use "epsilon_ax[real]") (("" (assert) (("" (expand "bounded_below?") (("" (use "real_lower_complete") (("" (assert) (("" (replace -3) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 153 120 nil nil)) (glb_lem 0 (glb_lem-1 nil 3237052399 3307982274 ("" (skosimp) (("" (typepred "glb(SB!1)") (("" (prop) (("1" (assert) nil nil) ("2" (grind :if-match nil) (("2" (inst -2 "glb(SB!1)") (("2" (inst -4 "x!1") (("2" (prop) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 230 220 nil nil)))(bounded_real_defs_alt (S_TCC1 0 (S_TCC1-1 nil 3237052399 3307982274 ("" (inst 1 "singleton(0)") (("" (expand "nonempty?") (("" (expand "empty?") (("" (inst -1 "0") (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved nil 34 40 nil nil)) (lub_is_upper_bound 0 (lub_is_upper_bound-1 nil 3237052399 3307982274 ("" (subtype-tcc) nil nil) proved nil 148 100 nil nil)) (glb_is_lower_bound 0 (glb_is_lower_bound-1 nil 3237052399 3307982275 ("" (subtype-tcc) nil nil) proved nil 109 100 nil nil)))(real_types (posreal_is_nzreal 0 (posreal_is_nzreal-1 nil 3237052399 3307982275 ("" (subtype-tcc) nil nil) proved nil 38 40 nil nil)) (negreal_is_nzreal 0 (negreal_is_nzreal-1 nil 3237052399 3307982275 ("" (subtype-tcc) nil nil) proved nil 38 40 nil nil)) (nonneg_real_add_closed 0 (nonneg_real_add_closed-1 nil 3237052399 3307982275 ("" (grind) nil nil) proved nil 41 30 nil nil)) (nonpos_real_add_closed 0 (nonpos_real_add_closed-1 nil 3237052399 3307982275 ("" (grind) nil nil) proved nil 42 40 nil nil)) (negreal_add_closed 0 (negreal_add_closed-1 nil 3237052399 3307982275 ("" (grind) nil nil) proved nil 48 50 nil nil)) (nonneg_real_mult_closed 0 (nonneg_real_mult_closed-1 nil 3237052399 3307982275 ("" (grind) (("" (case "nnx!1 = 0") (("1" (assert) nil nil) ("2" (case "nny!1 = 0") (("1" (assert) nil nil) ("2" (lemma "posreal_mult_closed") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 255 110 nil nil)) (nzreal_times_nzreal_is_nzreal 0 (nzreal_times_nzreal_is_nzreal-1 nil 3237052399 3307982275 ("" (lemma "posreal_mult_closed") (("" (skosimp) (("" (case "nzx!1 > 0") (("1" (case "nzy!1 > 0") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (inst -2 "nzx!1" "-nzy!1") (("2" (assert) nil nil)) nil)) nil) ("2" (case "nzy!1 > 0") (("1" (inst -2 "-nzx!1" "nzy!1") (("1" (assert) nil nil)) nil) ("2" (inst -1 "-nzx!1" "-nzy!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 129 100 nil nil)) (nzreal_div_nzreal_is_nzreal 0 (nzreal_div_nzreal_is_nzreal-1 nil 3237052399 3307982275 ("" (lemma "nzreal_times_nzreal_is_nzreal") (("" (skosimp) (("" (inst -1 "nzx!1" "1/nzy!1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 116 70 t nil)) (minus_nzreal_is_nzreal 0 (minus_nzreal_is_nzreal-1 nil 3237052399 3307982275 ("" (subtype-tcc) nil nil) proved nil 51 40 nil nil)) (nnreal_plus_nnreal_is_nnreal 0 (nnreal_plus_nnreal_is_nnreal-1 nil 3237052399 3307982275 ("" (subtype-tcc) nil nil) proved nil 49 40 nil nil)) (nnreal_times_nnreal_is_nnreal 0 (nnreal_times_nnreal_is_nnreal-1 nil 3237052399 3307982276 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (case "nnx!1 = 0") (("1" (assert) nil nil) ("2" (case "nny!1 = 0") (("1" (assert) nil nil) ("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 94 90 nil nil)) (nnreal_div_posreal_is_nnreal 0 (nnreal_div_posreal_is_nnreal-1 nil 3237052399 3307982276 ("" (grind) (("" (lemma "posreal_mult_closed") (("" (case "nnx!1 = 0") (("1" (assert) nil nil) ("2" (inst -1 "nnx!1" "1/py!1") (("2" (assert) (("2" (lemma "inverse_mult") (("2" (inst -1 "py!1") (("2" (assert) (("2" (name-replace "a" "1/py!1") (("2" (assert) (("2" (lemma "posreal_mult_closed") (("2" (case-replace "a = 0") (("1" (assert) nil nil) ("2" (inst -1 "py!1" "-a") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 295 250 nil nil)) (nnreal_div_negreal_is_npreal 0 (nnreal_div_negreal_is_npreal-1 nil 3237052399 3307982276 ("" (skosimp) (("" (lemma "nnreal_div_posreal_is_nnreal") (("" (inst -1 "nnx!1" "-ny!1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 105 110 nil nil)) (npreal_plus_npreal_is_npreal 0 (npreal_plus_npreal_is_npreal-1 nil 3237052399 3307982276 ("" (subtype-tcc) nil nil) proved nil 63 60 nil nil)) (npreal_times_npreal_is_nnreal 0 (npreal_times_npreal_is_nnreal-1 nil 3237052399 3307982276 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (inst -1 "-npx!1" "-npy!1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 132 90 nil nil)) (npreal_div_posreal_is_npreal 0 (npreal_div_posreal_is_npreal-1 nil 3237052399 3307982276 ("" (skosimp) (("" (lemma "nnreal_div_posreal_is_nnreal") (("" (inst -1 "-npx!1" "py!1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 126 120 nil nil)) (npreal_div_negreal_is_nnreal 0 (npreal_div_negreal_is_nnreal-1 nil 3237052399 3307982276 ("" (skosimp) (("" (lemma "npreal_div_posreal_is_npreal") (("" (inst -1 "npx!1" "-ny!1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 122 120 nil nil)) (posreal_plus_nnreal_is_posreal 0 (posreal_plus_nnreal_is_posreal-1 nil 3237052399 3307982277 ("" (subtype-tcc) nil nil) proved nil 79 70 nil nil)) (nnreal_plus_posreal_is_posreal 0 (nnreal_plus_posreal_is_posreal-1 nil 3237052399 3307982277 ("" (subtype-tcc) nil nil) proved nil 200 100 nil nil)) (posreal_times_posreal_is_posreal 0 (posreal_times_posreal_is_posreal-1 nil 3237052399 3307982277 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil) proved nil 116 100 nil nil)) (posreal_div_posreal_is_posreal 0 (posreal_div_posreal_is_posreal-1 nil 3237052399 3307982277 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (inst -1 "px!1" "1/py!1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 185 180 nil nil)) (negreal_plus_negreal_is_negreal 0 (negreal_plus_negreal_is_negreal-1 nil 3237052399 3307982277 ("" (subtype-tcc) nil nil) proved nil 99 100 nil nil)) (negreal_times_negreal_is_posreal 0 (negreal_times_negreal_is_posreal-1 nil 3237052399 3307982277 ("" (skosimp) (("" (lemma "posreal_mult_closed") (("" (inst -1 "-nx!1" "-ny!1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 184 140 nil nil)) (negreal_div_negreal_is_posreal 0 (negreal_div_negreal_is_posreal-1 nil 3237052399 3307982278 ("" (lemma "posreal_div_posreal_is_posreal") (("" (skosimp) (("" (inst -1 "-nx!1" "-ny!1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 167 170 nil nil)))(rationals (closed_plus 0 (closed_plus-1 nil 3246296579 3246296586 ("" (postpone) nil nil) unchecked nil 7317 270 t shostak)) (rat_plus_rat_is_rat 0 (rat_plus_rat_is_rat-1 nil 3237052399 3307982278 ("" (lemma "closed_plus") (("" (propax) nil nil)) nil) proved nil 28 30 nil nil)) (rat_minus_rat_is_rat 0 (rat_minus_rat_is_rat-1 nil 3237052399 3307982278 ("" (lemma "closed_minus") (("" (propax) nil nil)) nil) proved nil 60 50 nil nil)) (rat_times_rat_is_rat 0 (rat_times_rat_is_rat-1 nil 3237052399 3307982278 ("" (lemma "closed_times") (("" (propax) nil nil)) nil) proved nil 84 60 nil nil)) (rat_div_nzrat_is_rat 0 (rat_div_nzrat_is_rat-1 nil 3237052399 3307982278 ("" (lemma "closed_divides") (("" (propax) nil nil)) nil) proved nil 63 70 nil nil)) (minus_rat_is_rat 0 (minus_rat_is_rat-1 nil 3237052399 3307982278 ("" (lemma "closed_neg") (("" (propax) nil nil)) nil) proved nil 64 60 nil nil)) (posrat_is_nzrat 0 (posrat_is_nzrat-1 nil 3237052399 3307982278 ("" (subtype-tcc) nil nil) proved nil 104 80 nil nil)) (negrat_is_nzrat 0 (negrat_is_nzrat-1 nil 3237052399 3307982279 ("" (subtype-tcc) nil nil) proved nil 298 80 nil nil)) (nzrat_times_nzrat_is_nzrat 0 (nzrat_times_nzrat_is_nzrat-1 nil 3237052399 3307982279 ("" (subtype-tcc) nil nil) proved nil 125 80 nil nil)) (nzrat_div_nzrat_is_nzrat 0 (nzrat_div_nzrat_is_nzrat-1 nil 3237052399 3307982279 ("" (subtype-tcc) nil nil) proved nil 141 110 nil nil)) (minus_nzrat_is_nzrat 0 (minus_nzrat_is_nzrat-1 nil 3237052399 3307982279 ("" (subtype-tcc) nil nil) proved nil 110 110 nil nil)) (nnrat_plus_nnrat_is_nnrat 0 (nnrat_plus_nnrat_is_nnrat-1 nil 3237052399 3307982279 ("" (subtype-tcc) nil nil) proved nil 172 120 nil nil)) (nnrat_times_nnrat_is_nnrat 0 (nnrat_times_nnrat_is_nnrat-1 nil 3237052399 3307982280 ("" (subtype-tcc) nil nil) proved nil 538 250 nil nil)) (nnrat_div_posrat_is_nnrat 0 (nnrat_div_posrat_is_nnrat-1 nil 3237052399 3307982280 ("" (subtype-tcc) nil nil) proved nil 319 270 nil nil)) (nnrrat_div_negrat_is_nprat 0 (nnrrat_div_negrat_is_nprat-1 nil 3237052399 3307982280 ("" (subtype-tcc) nil nil) proved nil 346 320 nil nil)) (nprat_plus_nprat_is_nprat 0 (nprat_plus_nprat_is_nprat-1 nil 3237052399 3307982281 ("" (subtype-tcc) nil nil) proved nil 205 190 nil nil)) (nprat_times_nprat_is_nnrat 0 (nprat_times_nprat_is_nnrat-1 nil 3237052399 3307982281 ("" (subtype-tcc) nil nil) proved nil 363 310 nil nil)) (nprat_div_posrat_is_nprat 0 (nprat_div_posrat_is_nprat-1 nil 3237052399 3307982281 ("" (subtype-tcc) nil nil) proved nil 413 390 nil nil)) (nprat_div_negrat_is_nnrat 0 (nprat_div_negrat_is_nnrat-1 nil 3237052399 3307982282 ("" (subtype-tcc) nil nil) proved nil 457 400 nil nil)) (posrat_plus_nnrat_is_posrat 0 (posrat_plus_nnrat_is_posrat-1 nil 3237052399 3307982282 ("" (subtype-tcc) nil nil) proved nil 277 270 nil nil)) (nnrat_plus_posrat_is_posrat 0 (nnrat_plus_posrat_is_posrat-1 nil 3237052399 3307982283 ("" (subtype-tcc) nil nil) proved nil 333 300 nil nil)) (posrat_times_posrat_is_posrat 0 (posrat_times_posrat_is_posrat-1 nil 3237052399 3307982283 ("" (subtype-tcc) nil nil) proved nil 406 390 nil nil)) (posrat_div_posrat_is_posrat 0 (posrat_div_posrat_is_posrat-1 nil 3237052399 3307982284 ("" (subtype-tcc) nil nil) proved nil 488 420 nil nil)) (negrat_plus_negrat_is_negrat 0 (negrat_plus_negrat_is_negrat-1 nil 3237052399 3307982284 ("" (subtype-tcc) nil nil) proved nil 405 340 nil nil)) (negrat_times_negrat_is_posrat 0 (negrat_times_negrat_is_posrat-1 nil 3237052399 3307982284 ("" (subtype-tcc) nil nil) proved nil 562 470 nil nil)) (negrat_div_negrat_is_posrat 0 (negrat_div_negrat_is_posrat-1 nil 3237052399 3307982285 ("" (subtype-tcc) nil nil) proved nil 670 520 nil nil)))(integers (upfrom_TCC1 0 (upfrom_TCC1-1 nil 3237052399 3307982285 ("" (subtype-tcc) nil nil) proved nil 35 30 nil nil)) (above_TCC1 0 (above_TCC1-1 nil 3237052399 3307982285 ("" (lemma "closed_plus") (("" (skosimp) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil) proved nil 164 140 nil nil)) (int_plus_int_is_int 0 (int_plus_int_is_int-1 nil 3237052399 3307982285 ("" (lemma "closed_plus") (("" (propax) nil nil)) nil) proved nil 35 30 nil nil)) (int_minus_int_is_int 0 (int_minus_int_is_int-1 nil 3237052399 3307982286 ("" (lemma "closed_minus") (("" (propax) nil nil)) nil) proved nil 176 110 nil nil)) (int_times_int_is_int 0 (int_times_int_is_int-1 nil 3237052399 3307982286 ("" (lemma "closed_times") (("" (propax) nil nil)) nil) proved nil 131 120 nil nil)) (minus_int_is_int 0 (minus_int_is_int-1 nil 3237052399 3307982286 ("" (lemma "closed_neg") (("" (propax) nil nil)) nil) proved nil 158 140 nil nil)) (minus_nzint_is_nzint 0 (minus_nzint_is_nzint-1 nil 3237052399 3307982286 ("" (subtype-tcc) nil nil) proved nil 180 160 nil nil)) (posint_is_nzint 0 (posint_is_nzint-1 nil 3237052399 3307982286 ("" (subtype-tcc) nil nil) proved nil 192 160 nil nil)) (negint_is_nzint 0 (negint_is_nzint-1 nil 3237052399 3307982287 ("" (subtype-tcc) nil nil) proved nil 292 170 nil nil)) (nzint_times_nzint_is_nzint 0 (nzint_times_nzint_is_nzint-1 nil 3237052399 3307982287 ("" (subtype-tcc) nil nil) proved nil 171 160 nil nil)) (nnint_plus_nnint_is_nnint 0 (nnint_plus_nnint_is_nnint-1 nil 3237052399 3307982287 ("" (subtype-tcc) nil nil) proved nil 252 240 nil nil)) (nnint_times_nnint_is_nnint 0 (nnint_times_nnint_is_nnint-1 nil 3237052399 3307982288 ("" (subtype-tcc) nil nil) proved nil 526 470 nil nil)) (npint_plus_npint_is_npint 0 (npint_plus_npint_is_npint-1 nil 3237052399 3307982289 ("" (subtype-tcc) nil nil) proved nil 985 380 nil nil)) (npint_times_npint_is_nnint 0 (npint_times_npint_is_nnint-1 nil 3237052399 3307982290 ("" (subtype-tcc) nil nil) proved nil 1038 580 nil nil)) (posint_plus_nnint_is_posint 0 (posint_plus_nnint_is_posint-1 nil 3237052399 3307982290 ("" (subtype-tcc) nil nil) proved nil 487 460 nil nil)) (nnint_plus_posint_is_posint 0 (nnint_plus_posint_is_posint-1 nil 3237052399 3307982291 ("" (subtype-tcc) nil nil) proved nil 576 550 nil nil)) (posint_times_posint_is_posint 0 (posint_times_posint_is_posint-1 nil 3237052399 3307982292 ("" (subtype-tcc) nil nil) proved nil 686 650 nil nil)) (negint_plus_negint_is_negint 0 (negint_plus_negint_is_negint-1 nil 3237052399 3307982292 ("" (subtype-tcc) nil nil) proved nil 636 590 nil nil)) (negint_times_negint_is_posint 0 (negint_times_negint_is_posint-1 nil 3237052399 3307982293 ("" (subtype-tcc) nil nil) proved nil 1232 760 nil nil)) (even_int_TCC1 0 (even_int_TCC1-1 nil 3237052399 3307982294 ("" (expand "even?") (("" (inst 1 "0") (("" (assert) nil nil)) nil)) nil) proved nil 828 800 nil nil)) (odd_int_TCC1 0 (odd_int_TCC1-1 nil 3237052399 3307982295 ("" (expand "odd?") (("" (inst 1 "0") (("" (assert) nil nil)) nil)) nil) proved nil 1026 840 nil nil)) (odd_is_nzint 0 (odd_is_nzint-1 nil 3237052399 3307982296 ("" (subtype-tcc) nil nil) proved nil 866 780 nil nil)) (even_plus_even_is_even 0 (even_plus_even_is_even-1 nil 3237052399 3307982298 ("" (grind :if-match nil) (("" (inst 1 "j!1 + j!2") (("" (assert) nil nil)) nil)) nil) proved nil 1520 1300 nil nil)) (even_minus_even_is_even 0 (even_minus_even_is_even-1 nil 3237052399 3307982301 ("" (grind :if-match nil) (("" (inst 1 "j!1 - j!2") (("" (assert) nil nil)) nil)) nil) proved nil 2972 1230 nil nil)) (odd_plus_odd_is_even 0 (odd_plus_odd_is_even-1 nil 3237052399 3307982303 ("" (grind :if-match nil) (("" (inst 1 "1 + j!1 + j!2") (("" (assert) nil nil)) nil)) nil) proved nil 1992 1460 nil nil)) (odd_minus_odd_is_even 0 (odd_minus_odd_is_even-1 nil 3237052399 3307982304 ("" (grind :if-match nil) (("" (inst 1 "j!1 - j!2") (("" (assert) nil nil)) nil)) nil) proved nil 1560 1340 nil nil)) (odd_plus_even_is_odd 0 (odd_plus_even_is_odd-1 nil 3237052399 3307982307 ("" (grind :if-match nil) (("" (inst 1 "j!1 + j!2") (("" (assert) nil nil)) nil)) nil) proved nil 2521 1510 nil nil)) (odd_minus_even_is_odd 0 (odd_minus_even_is_odd-1 nil 3237052399 3307982309 ("" (grind :if-match nil) (("" (inst 1 "j!2 - j!1") (("" (assert) nil nil)) nil)) nil) proved nil 1894 1420 nil nil)) (even_plus_odd_is_odd 0 (even_plus_odd_is_odd-1 nil 3237052399 3307982311 ("" (grind :if-match nil) (("" (inst 1 "j!1 + j!2") (("" (assert) nil nil)) nil)) nil) proved nil 2293 1520 nil nil)) (even_minus_odd_is_odd 0 (even_minus_odd_is_odd-1 nil 3282864786 3307982313 ("" (grind :if-match nil) (("" (inst 1 "j!1 - j!2 - 1") (("" (assert) nil nil)) nil)) nil) proved nil 1542 1430 t shostak)) (even_times_int_is_even 0 (even_times_int_is_even-1 nil 3237052399 3307982314 ("" (grind :if-match nil) (("" (inst 1 "i!1 * j!1") nil nil)) nil) proved nil 1419 1360 nil nil)) (int_times_even_is_even 0 (int_times_even_is_even-1 nil 3237052399 3307982316 ("" (grind :if-match nil) (("" (inst 1 "i!1 * j!1") nil nil)) nil) proved nil 1615 1390 nil nil)) (odd_times_odd_is_odd 0 (odd_times_odd_is_odd-1 nil 3237052399 3307982317 ("" (grind :if-match nil) (("" (inst 1 "j!1 + j!2 + 2 * j!1 * j!2") (("" (assert) nil nil)) nil)) nil) proved nil 1849 1670 nil nil)) (minus_even_is_even 0 (minus_even_is_even-1 nil 3237052399 3307982320 ("" (grind :if-match nil) (("" (inst 1 "-j!1") (("" (assert) nil nil)) nil)) nil) proved nil 2176 1370 nil nil)) (minus_odd_is_odd 0 (minus_odd_is_odd-1 nil 3237052399 3307982321 ("" (grind :if-match nil) (("" (inst 1 "-1 - j!1") (("" (assert) nil nil)) nil)) nil) proved nil 1726 1400 nil nil)))(naturalnumbers (upfrom_nat_is_nat 0 (upfrom_nat_is_nat-1 nil 3237052399 3307982321 ("" (subtype-tcc) nil nil) proved nil 40 30 nil nil)) (upfrom_posnat_is_posnat 0 (upfrom_posnat_is_posnat-1 nil 3237052399 3307982322 ("" (subtype-tcc) nil nil) proved nil 44 40 nil nil)) (above_nat_is_posnat 0 (above_nat_is_posnat-1 nil 3237052399 3307982322 ("" (subtype-tcc) nil nil) proved nil 42 40 nil nil)) (subrange_nat_is_nat 0 (subrange_nat_is_nat-1 nil 3237052399 3307982322 ("" (subtype-tcc) nil nil) proved nil 44 50 nil nil)) (subrange_posnat_is_posnat 0 (subrange_posnat_is_posnat-1 nil 3237052399 3307982322 ("" (subtype-tcc) nil nil) proved nil 46 40 nil nil)) (upto_TCC1 0 (upto_TCC1-1 nil 3237052399 3307982322 ("" (tcc :defs !) nil nil) proved nil 38 40 nil nil)) (pred_TCC1 0 (pred_TCC1-1 nil 3237052399 3307982322 ("" (tcc :defs !) nil nil) proved nil 128 120 nil nil)) (tilde_TCC1 0 (tilde_TCC1-1 nil 3237052399 3307982322 ("" (tcc :defs !) nil nil) proved nil 216 200 nil nil)) (nat_induction 0 (nat_induction-1 nil 3237052399 3307982323 ("" (lemma "wf_induction[nat, (LAMBDA (m,n:nat): m < n)]") (("1" (beta) (("1" (skosimp*) (("1" (inst -1 "p!1") (("1" (split) (("1" (inst -1 "i!1") nil nil) ("2" (skosimp*) (("2" (case "x!1 = 0") (("1" (assert) nil nil) ("2" (inst -1 "x!1 - 1") (("1" (inst -3 "x!1 - 1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (delete 2) (("2" (lemma "wf_nat") (("2" (propax) nil nil)) nil)) nil)) nil) proved nil 490 430 nil nil)) (NAT_induction 0 (NAT_induction-1 nil 3237052399 3307982323 ("" (lemma "nat_induction") (("" (skosimp*) (("" (inst -1 "(LAMBDA (n:nat): (FORALL (m:nat): m <= n IMPLIES p!1(m)))") (("" (split) (("1" (inst -1 "i!1") (("1" (inst -1 "i!1") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -2 "0") (("2" (split) (("1" (assert) nil nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (inst -3 "m!1") (("3" (assert) (("3" (skosimp*) (("3" (inst -1 "k!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 643 570 nil nil)) (even_or_odd 0 (even_or_odd-1 nil 3252307123 3307982326 ("" (case "FORALL (n: nat): even?(n) IFF NOT odd?(n)") (("1" (skosimp) (("1" (case "x!1 >= 0") (("1" (inst -2 "x!1") nil nil) ("2" (inst -1 "-x!1") (("1" (grind :if-match nil) (("1" (inst 3 "-j!1") (("1" (assert) nil nil)) nil) ("2" (inst 2 "-j!2") (("2" (assert) nil nil)) nil) ("3" (inst 4 "-j!1-1") (("3" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (induct "n") (("1" (grind) nil nil) ("2" (grind :if-match nil) nil nil) ("3" (skosimp) (("3" (grind :if-match nil) (("3" (inst 2 "j!2 + 1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2453 2040 t shostak)) (odd_iff_not_even 0 (odd_iff_not_even-1 nil 3307950416 3307982326 ("" (skosimp*) (("" (rewrite "even_or_odd") (("" (assert) nil nil)) nil)) nil) proved nil 47 50 t shostak)) (even_iff_not_odd 0 (even_iff_not_odd-1 nil 3307950458 3307982326 ("" (skosimp*) (("" (rewrite "even_or_odd") nil nil)) nil) proved nil 79 30 t shostak)) (odd_or_even_int 0 (odd_or_even_int-1 nil 3307950482 3307982326 ("" (skosimp*) (("" (rewrite "even_or_odd") nil nil)) nil) proved nil 45 50 t shostak)) (odd_iff_even_succ 0 (odd_iff_even_succ-1 nil 3307950500 3307982327 ("" (skosimp*) (("" (expand "even?") (("" (expand "odd?") (("" (split) (("1" (skosimp*) (("1" (inst + "j!1+1") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst + "j!1-1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 641 590 t shostak)) (even_iff_odd_succ 0 (even_iff_odd_succ-1 nil 3307950534 3307982327 ("" (expand "even?") (("" (expand "odd?") (("" (propax) nil nil)) nil)) nil) proved nil 546 420 t shostak)) (even_plus1 0 (even_plus1-1 nil 3307980590 3307982328 ("" (skosimp) (("" (rewrite "even_iff_odd_succ") (("" (use "odd_iff_not_even") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 419 390 t shostak)) (odd_plus1 0 (odd_plus1-1 nil 3307980758 3307982328 ("" (skosimp) (("" (rewrite "odd_iff_even_succ") (("" (rewrite "even_iff_not_odd") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 829 400 t shostak)) (even_div2 0 (even_div2-1 nil 3307950586 3307982329 ("" (expand "even?") (("" (skosimp*) (("" (replace -1) (("" (assert) nil nil)) nil)) nil)) nil) proved nil 532 460 t shostak)) (odd_div2 0 (odd_div2-1 nil 3307950609 3307982330 ("" (expand "odd?") (("" (skosimp*) (("" (replace -1) (("" (assert) nil nil)) nil)) nil)) nil) proved nil 910 540 t shostak)))(min_nat (min_TCC1 0 (min_TCC1-1 nil 3237052399 3307982331 ("" (inst + "lambda S: epsilon(lambda (n: nat): T_pred(n) AND S(n) AND
                                    FORALL x: S(x) IMPLIES n <= x)") (("" (skolem!) (("" (use "epsilon_ax[nat]") (("" (split -) (("1" (propax) nil nil) ("2" (delete 2) (("2" (assert) (("2" (lemma "wf_nat") (("2" (expand "well_founded?") (("2" (inst - "lambda (x: nat): T_pred(x) AND S!1(x)") (("2" (ground) (("1" (skolem!) (("1" (inst? +) (("1" (assert) (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (delete 2) (("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 663 470 nil nil)) (min_def 0 (min_def-1 nil 3237052399 3307982331 ("" (skolem!) (("" (typepred "min(S!1)") (("" (expand "minimum?") (("" (ground) (("1" (replace*) nil nil) ("2" (inst? -2 :where -4) (("2" (inst? - :where -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 226 180 nil nil)))(real_defs (abs_TCC1 0 (abs_TCC1-1 nil 3237052399 3307982331 ("" (grind) nil nil) proved nil 91 90 nil nil)) (abs_TCC2 0 (abs_TCC2-1 nil 3237052399 3307982331 ("" (grind) nil nil) proved nil 66 60 nil nil)) (nonzero_abs_is_pos 0 (nonzero_abs_is_pos-1 nil 3237052399 3307982331 ("" (subtype-tcc) nil nil) proved nil 221 170 nil nil)) (rat_abs_is_nonneg 0 (rat_abs_is_nonneg-1 nil 3237052399 3307982331 ("" (skosimp) (("" (expand "abs") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved nil 80 80 nil nil)) (nzrat_abs_is_pos 0 (nzrat_abs_is_pos-1 nil 3237052399 3307982332 ("" (subtype-tcc) nil nil) proved nil 175 160 nil nil)) (int_abs_is_nonneg 0 (int_abs_is_nonneg-1 nil 3237052399 3307982332 ("" (skosimp) (("" (expand "abs") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved nil 173 170 nil nil)) (nzint_abs_is_pos 0 (nzint_abs_is_pos-1 nil 3237052399 3307982332 ("" (subtype-tcc) nil nil) proved nil 390 330 nil nil)) (max_TCC1 0 (max_TCC1-1 nil 3237052399 3307982332 ("" (grind) nil nil) proved nil 348 330 nil nil)) (max_TCC2 0 (max_TCC2-1 nil 3237052399 3307982333 ("" (grind) nil nil) proved nil 376 320 nil nil)) (min_TCC1 0 (min_TCC1-1 nil 3237052399 3307982333 ("" (grind) nil nil) proved nil 327 320 nil nil)) (min_TCC2 0 (min_TCC2-1 nil 3237052399 3307982334 ("" (grind) nil nil) proved nil 325 320 nil nil)) (nzreal_max 0 (nzreal_max-1 nil 3237052399 3307982334 ("" (skosimp) (("" (expand "max") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved nil 350 310 nil nil)) (nzreal_min 0 (nzreal_min-1 nil 3237052399 3307982334 ("" (skosimp) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved nil 319 310 nil nil)) (nonneg_real_max 0 (nonneg_real_max-1 nil 3237052399 3307982335 ("" (subtype-tcc) nil nil) proved nil 469 420 nil nil)) (nonneg_real_min 0 (nonneg_real_min-1 nil 3237052399 3307982335 ("" (skosimp) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved nil 469 340 nil nil)) (posreal_max 0 (posreal_max-1 nil 3237052399 3307982336 ("" (subtype-tcc) nil nil) proved nil 597 500 nil nil)) (posreal_min 0 (posreal_min-1 nil 3237052399 3307982336 ("" (subtype-tcc) nil nil) proved nil 547 530 nil nil)) (rat_max 0 (rat_max-1 nil 3237052399 3307982337 ("" (skosimp) (("" (expand "max") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved nil 513 400 nil nil)) (rat_min 0 (rat_min-1 nil 3237052399 3307982337 ("" (skosimp) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved nil 453 440 nil nil)) (nzrat_max 0 (nzrat_max-1 nil 3237052399 3307982338 ("" (subtype-tcc) nil nil) proved nil 1092 660 nil nil)) (nzrat_min 0 (nzrat_min-1 nil 3237052399 3307982339 ("" (subtype-tcc) nil nil) proved nil 965 720 nil nil)) (nonneg_rat_max 0 (nonneg_rat_max-1 nil 3237052399 3307982341 ("" (subtype-tcc) nil nil) proved nil 1218 790 nil nil)) (nonneg_rat_min 0 (nonneg_rat_min-1 nil 3237052399 3307982342 ("" (subtype-tcc) nil nil) proved nil 955 820 nil nil)) (posrat_max 0 (posrat_max-1 nil 3237052399 3307982343 ("" (subtype-tcc) nil nil) proved nil 1037 960 nil nil)) (posrat_min 0 (posrat_min-1 nil 3237052399 3307982344 ("" (subtype-tcc) nil nil) proved nil 1155 1060 nil nil)) (int_max 0 (int_max-1 nil 3237052399 3307982345 ("" (skosimp) (("" (expand "max") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved nil 1078 970 nil nil)) (int_min 0 (int_min-1 nil 3237052399 3307982346 ("" (skosimp) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil) proved nil 1167 1060 nil nil)) (nzint_max 0 (nzint_max-1 nil 3237052399 3307982348 ("" (subtype-tcc) nil nil) proved nil 1942 1450 nil nil)) (nzint_min 0 (nzint_min-1 nil 3237052399 3307982351 ("" (subtype-tcc) nil nil) proved nil 2410 1560 nil nil)) (nat_max 0 (nat_max-1 nil 3237052399 3307982352 ("" (subtype-tcc) nil nil) proved nil 1798 1700 nil nil)) (nat_min 0 (nat_min-1 nil 3237052399 3307982354 ("" (subtype-tcc) nil nil) proved nil 1851 1780 nil nil)) (posint_max 0 (posint_max-1 nil 3237052399 3307982357 ("" (subtype-tcc) nil nil) proved nil 2477 2100 nil nil)) (posint_min 0 (posint_min-1 nil 3237052399 3307982360 ("" (subtype-tcc) nil nil) proved nil 3303 2370 nil nil)) (min_le 0 (min_le-1 nil 3307951039 3307982363 ("" (grind) nil nil) proved nil 2690 2290 t shostak)) (min_lt 0 (min_lt-1 nil 3307951075 3307982366 ("" (grind) nil nil) proved nil 2648 2310 t shostak)) (min_ge 0 (min_ge-1 nil 3307951084 3307982369 ("" (grind) nil nil) proved nil 3020 2360 t shostak)) (min_gt 0 (min_gt-1 nil 3307951093 3307982372 ("" (grind) nil nil) proved nil 3078 2310 t shostak)) (le_min 0 (le_min-1 nil 3307951100 3307982374 ("" (grind) nil nil) proved nil 2397 2260 t shostak)) (lt_min 0 (lt_min-1 nil 3307951109 3307982377 ("" (grind) nil nil) proved nil 2518 2280 t shostak)) (ge_min 0 (ge_min-1 nil 3307951118 3307982380 ("" (grind) nil nil) proved nil 3636 2370 t shostak)) (gt_min 0 (gt_min-1 nil 3307951125 3307982383 ("" (grind) nil nil) proved nil 2545 2280 t shostak)) (max_le 0 (max_le-1 nil 3307951134 3307982385 ("" (grind) nil nil) proved nil 2609 2300 t shostak)) (max_lt 0 (max_lt-1 nil 3307951142 3307982389 ("" (grind) nil nil) proved nil 3406 2300 t shostak)) (max_ge 0 (max_ge-1 nil 3307951149 3307982392 ("" (grind) nil nil) proved nil 3079 2320 t shostak)) (max_gt 0 (max_gt-1 nil 3307951158 3307982394 ("" (grind) nil nil) proved nil 2404 2240 t shostak)) (le_max 0 (le_max-1 nil 3307951168 3307982397 ("" (grind) nil nil) proved nil 2649 2280 t shostak)) (lt_max 0 (lt_max-1 nil 3307951177 3307982400 ("" (grind) nil nil) proved nil 3377 2440 t shostak)) (ge_max 0 (ge_max-1 nil 3307951188 3307982403 ("" (grind) nil nil) proved nil 2818 2240 t shostak)) (gt_max 0 (gt_max-1 nil 3307951197 3307982406 ("" (grind) nil nil) proved nil 2600 2280 t shostak)))(real_props (inv_ne_0 0 (inv_ne_0-1 nil 3237052399 3307982406 ("" (grind) nil nil) proved nil 39 40 nil nil)) (both_sides_plus1 0 (both_sides_plus1-1 nil 3237052399 3307982406 ("" (tcc :defs !) nil nil) proved nil 43 40 nil nil)) (both_sides_plus2 0 (both_sides_plus2-1 nil 3237052399 3307982406 ("" (tcc :defs !) nil nil) proved nil 79 40 nil nil)) (both_sides_minus1 0 (both_sides_minus1-1 nil 3237052399 3307982406 ("" (tcc :defs !) nil nil) proved nil 109 110 nil nil)) (both_sides_minus2 0 (both_sides_minus2-1 nil 3237052399 3307982407 ("" (tcc :defs !) nil nil) proved nil 465 430 nil nil)) (both_sides_times1 0 (both_sides_times1-1 nil 3237052399 3307982407 ("" (grind) nil nil) proved nil 462 330 nil nil)) (both_sides_times2 0 (both_sides_times2-1 nil 3237052399 3307982407 ("" (lemma "both_sides_times1") (("" (skosimp*) (("" (prop) (("1" (inst -2 "n0z!1" "x!1" "y!1") (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved nil 309 290 nil nil)) (both_sides_div1 0 (both_sides_div1-1 nil 3237052399 3307982408 ("" (grind) (("" (lemma "both_sides_times1") (("" (inst -1 "1/n0z!1" "x!1" "y!1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 301 260 nil nil)) (both_sides_div2 0 (both_sides_div2-1 nil 3237052399 3307982408 ("" (grind) (("" (lemma "both_sides_times1") (("" (inst-cp -1 "n0x!1" "n0z!1/n0x!1" "n0z!1/n0y!1") (("" (flatten) (("" (delete -2) (("" (split) (("1" (case "n0z!1 = (n0z!1/n0x!1) * n0x!1") (("1" (replace -1 :dir rl) (("1" (delete -1) (("1" (delete -3) (("1" (inst -2 "n0y!1" "n0z!1" "(n0z!1/n0y!1)*n0x!1") (("1" (flatten) (("1" (delete -2) (("1" (split) (("1" (case "(n0z!1 / n0y!1) * n0x!1 * n0y!1 = n0z!1 * n0x!1") (("1" (replace -1) (("1" (rewrite "both_sides_times2") nil nil)) nil) ("2" (assert) nil nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2 3 4 5) (("2" (use "div_def") (("2" (replace -1) (("2" (use "associative_mult") (("2" (replace -1 :dir rl) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 742 310 nil nil)) (times_plus 0 (times_plus-1 nil 3237052399 3307982409 ("" (grind) nil nil) proved nil 576 430 nil nil)) (times_div1 0 (times_div1-1 nil 3237052399 3307982409 ("" (grind) nil nil) proved nil 336 220 nil nil)) (times_div2 0 (times_div2-1 nil 3237052399 3307982410 ("" (grind) nil nil) proved nil 506 230 nil nil)) (div_times 0 (div_times-1 nil 3237052399 3307982410 ("" (grind) nil nil) proved nil 507 360 nil nil)) (div_eq_zero 0 (div_eq_zero-1 nil 3237052399 3307982411 ("" (grind) (("" (lemma "both_sides_times1") (("" (inst -1 "n0z!1" "x!1/n0z!1" "0") (("" (flatten) (("" (delete -1) (("" (split) (("1" (delete -2) (("1" (assert) (("1" (rewrite "commutative_mult") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 393 380 nil nil)) (div_simp 0 (div_simp-1 nil 3237052399 3307982411 ("" (grind) nil nil) proved nil 38 30 nil nil)) (div_cancel1 0 (div_cancel1-1 nil 3237052399 3307982411 ("" (grind) nil nil) proved nil 176 150 nil nil)) (div_cancel2 0 (div_cancel2-1 nil 3237052399 3307982411 ("" (grind) nil nil) proved nil 141 130 nil nil)) (div_cancel3 0 (div_cancel3-1 nil 3237052399 3307982412 ("" (tcc :defs !) nil nil) proved nil 344 330 nil nil)) (div_cancel4 0 (div_cancel4-1 nil 3243832638 3307982412 ("" (grind) nil nil) proved nil 380 330 t shostak)) (cross_mult 0 (cross_mult-1 nil 3237052399 3307982413 ("" (grind) nil nil) proved nil 491 460 nil nil)) (add_div 0 (add_div-1 nil 3237052399 3307982413 ("" (grind) nil nil) proved nil 463 430 nil nil)) (minus_div1 0 (minus_div1-1 nil 3237052399 3307982414 ("" (grind) nil nil) proved nil 539 480 nil nil)) (minus_div2 0 (minus_div2-1 nil 3237052399 3307982414 ("" (grind) nil nil) proved nil 291 270 nil nil)) (div_distributes 0 (div_distributes-1 nil 3237052399 3307982414 ("" (grind) nil nil) proved nil 273 250 nil nil)) (div_distributes_minus 0 (div_distributes_minus-1 nil 3237052399 3307982414 ("" (grind) nil nil) proved nil 282 260 nil nil)) (div_div1 0 (div_div1-1 nil 3237052399 3307982415 ("" (grind) nil nil) proved nil 290 260 nil nil)) (div_div2 0 (div_div2-1 nil 3237052399 3307982415 ("" (grind) nil nil) proved nil 260 260 nil nil)) (idem_add_is_zero 0 (idem_add_is_zero-1 nil 3237052399 3307982416 ("" (grind) nil nil) proved nil 523 370 nil nil)) (zero_times1 0 (zero_times1-1 nil 3237052399 3307982416 ("" (grind) nil nil) proved nil 36 40 nil nil)) (zero_times2 0 (zero_times2-1 nil 3237052399 3307982416 ("" (grind) nil nil) proved nil 36 40 nil nil)) (zero_times3 0 (zero_times3-1 nil 3237052399 3307982416 ("" (skosimp*) (("" (prop) (("1" (lemma "trichotomy") (("1" (inst-cp -1 "x!1") (("1" (inst -1 "y!1") (("1" (assert) (("1" (prop) (("1" (lemma "posreal_mult_closed") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "posreal_mult_closed") (("2" (inst -1 "-x!1" "y!1") (("2" (assert) nil nil)) nil)) nil) ("3" (lemma "posreal_mult_closed") (("3" (inst -1 "x!1" "-y!1") (("3" (assert) nil nil)) nil)) nil) ("4" (lemma "posreal_mult_closed") (("4" (inst -1 "-x!1" "-y!1") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) proved nil 317 240 nil nil)) (neg_times_neg 0 (neg_times_neg-1 nil 3237052399 3307982416 ("" (grind) nil nil) proved nil 64 60 nil nil)) (zero_is_neg_zero 0 (zero_is_neg_zero-1 nil 3237052399 3307982416 ("" (grind) nil nil) proved nil 139 130 nil nil)) (strict_lt 0 (strict_lt-1 nil 3237052399 3307982416 ("" (grind) nil nil) proved nil 220 160 nil nil)) (trich_lt 0 (trich_lt-1 nil 3237052399 3307982417 ("" (grind) nil nil) proved nil 78 80 nil nil)) (tri_unique_lt1 0 (tri_unique_lt1-1 nil 3237052399 3307982417 ("" (grind) nil nil) proved nil 124 90 nil nil)) (tri_unique_lt2 0 (tri_unique_lt2-1 nil 3237052399 3307982417 ("" (grind) nil nil) proved nil 156 80 nil nil)) (zero_not_lt_zero 0 (zero_not_lt_zero-1 nil 3237052399 3307982417 ("" (grind) nil nil) proved nil 38 30 nil nil)) (neg_lt 0 (neg_lt-1 nil 3237052399 3307982417 ("" (grind) nil nil) proved nil 104 100 nil nil)) (pos_times_lt 0 (pos_times_lt-1 nil 3237052399 3307982417 ("" (grind) (("1" (lemma "posreal_mult_closed") (("1" (case "x!1 = 0") (("1" (assert) nil nil) ("2" (case "y!1 = 0") (("1" (assert) nil nil) ("2" (inst -1 "x!1" "-y!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (case "x!1 = 0") (("1" (assert) nil nil) ("2" (case "y!1 = 0") (("1" (assert) nil nil) ("2" (lemma "posreal_mult_closed") (("2" (inst -1 "-x!1" "y!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (lemma "posreal_mult_closed") (("3" (inst -1 "x!1" "y!1") (("3" (assert) nil nil)) nil)) nil) ("4" (lemma "posreal_mult_closed") (("4" (inst -1 "-x!1" "-y!1") (("4" (assert) nil nil)) nil)) nil)) nil) proved nil 491 410 nil nil)) (neg_times_lt 0 (neg_times_lt-1 nil 3237052399 3307982418 ("" (skosimp*) (("" (lemma "pos_times_lt") (("" (inst -1 "x!1" "-y!1") (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved nil 306 270 nil nil)) (quotient_pos_lt 0 (quotient_pos_lt-1 nil 3237052399 3307982419 ("" (skosimp*) (("" (lemma "inverse_mult") (("" (inst?) (("" (lemma "pos_times_lt") (("" (inst -1 "n0x!1" "1/n0x!1") (("" (replace -2) (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 706 390 nil nil)) (quotient_neg_lt 0 (quotient_neg_lt-1 nil 3237052399 3307982419 ("" (skosimp*) (("" (lemma "quotient_pos_lt") (("" (inst -1 "-n0x!1") (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved nil 653 390 nil nil)) (pos_div_lt 0 (pos_div_lt-1 nil 3237052399 3307982420 ("" (skosimp*) (("" (lemma "pos_times_lt") (("" (inst -1 "x!1" "1/n0y!1") (("" (lemma "quotient_pos_lt") (("" (inst -1 "n0y!1") (("" (lemma "quotient_neg_lt") (("" (inst -1 "n0y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 741 460 nil nil)) (neg_div_lt 0 (neg_div_lt-1 nil 3237052399 3307982421 ("" (skosimp*) (("" (lemma "pos_div_lt") (("" (inst -1 "n0y!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 507 340 nil nil)) (div_mult_pos_lt1 0 (div_mult_pos_lt1-1 nil 3237052399 3307982421 ("" (grind) (("1" (lemma "posreal_mult_closed") (("1" (inst -1 "x!1 - (z!1/py!1)" "py!1") (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "posreal_mult_closed") (("2" (inst -1 "x!1*py!1 - z!1" "1/py!1") (("2" (assert) nil nil)) nil)) nil)) nil) proved nil 912 830 nil nil)) (div_mult_pos_lt2 0 (div_mult_pos_lt2-1 nil 3237052399 3307982422 ("" (lemma "div_mult_pos_lt1") (("" (skosimp) (("" (inst -1 "py!1" "-x!1" "-z!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 482 430 nil nil)) (div_mult_neg_lt1 0 (div_mult_neg_lt1-1 nil 3237052399 3307982422 ("" (lemma "div_mult_pos_lt2") (("" (skosimp) (("" (inst -1 "-ny!1" "-x!1" "z!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 455 440 nil nil)) (div_mult_neg_lt2 0 (div_mult_neg_lt2-1 nil 3237052399 3307982423 ("" (skosimp) (("" (lemma "div_mult_pos_lt1") (("" (inst -1 "-ny!1" "-x!1" "z!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 505 440 nil nil)) (both_sides_plus_lt1 0 (both_sides_plus_lt1-1 nil 3237052399 3307982423 ("" (tcc :defs !) nil nil) proved nil 334 270 nil nil)) (both_sides_plus_lt2 0 (both_sides_plus_lt2-1 nil 3237052399 3307982424 ("" (tcc :defs !) nil nil) proved nil 314 270 nil nil)) (both_sides_minus_lt1 0 (both_sides_minus_lt1-1 nil 3237052399 3307982424 ("" (tcc :defs !) nil nil) proved nil 279 220 nil nil)) (both_sides_minus_lt2 0 (both_sides_minus_lt2-1 nil 3237052399 3307982424 ("" (tcc :defs !) nil nil) proved nil 220 210 nil nil)) (both_sides_times_pos_lt1 0 (both_sides_times_pos_lt1-1 nil 3237052399 3307982425 ("" (grind) (("1" (lemma "posreal_mult_closed") (("1" (inst -1 "(y!1 - x!1) * pz!1" "1/pz!1") (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "posreal_mult_closed") (("2" (inst -1 "y!1-x!1" "pz!1") (("2" (assert) nil nil)) nil)) nil)) nil) proved nil 1185 940 nil nil)) (both_sides_times_pos_lt2 0 (both_sides_times_pos_lt2-1 nil 3237052399 3307982426 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst -1 "pz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 622 550 nil nil)) (both_sides_times_neg_lt1 0 (both_sides_times_neg_lt1-1 nil 3237052399 3307982426 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst -1 "-nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 469 430 nil nil)) (both_sides_times_neg_lt2 0 (both_sides_times_neg_lt2-1 nil 3237052399 3307982428 ("" (lemma "both_sides_times_neg_lt1") (("" (skosimp) (("" (inst -1 "nz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 1114 560 nil nil)) (both_sides_div_pos_lt1 0 (both_sides_div_pos_lt1-1 nil 3237052399 3307982429 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst -1 "1/pz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 1204 460 nil nil)) (both_sides_div_pos_lt2 0 (both_sides_div_pos_lt2-1 nil 3237052399 3307982430 ("" (skosimp*) (("" (lemma "both_sides_times_pos_lt1") (("" (inst -1 "px!1 * py!1" "pz!1 / px!1" "pz!1 / py!1") (("" (assert) (("" (grind) (("1" (case "pz!1 / px!1 * (px!1 * py!1) = pz!1 * py!1") (("1" (replace -1) (("1" (hide -1) (("1" (case "pz!1 / py!1 * (px!1 * py!1) = pz!1 * px!1") (("1" (replace -1) (("1" (hide -1) (("1" (rewrite "both_sides_times_pos_lt2") nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "pz!1 / px!1 * (px!1 * py!1) = pz!1 * py!1") (("1" (case "pz!1 / py!1 * (px!1 * py!1) = pz!1 * px!1") (("1" (replace -1) (("1" (replace -2) (("1" (hide -1 -2) (("1" (lemma "both_sides_times_pos_lt2") (("1" (inst?) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1628 900 nil nil)) (both_sides_div_pos_lt3 0 (both_sides_div_pos_lt3-1 nil 3237052399 3307982431 ("" (skosimp*) (("" (lemma "both_sides_div_pos_lt2") (("" (inst -1 "py!1" "px!1" "-nz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 439 420 nil nil)) (both_sides_div_neg_lt1 0 (both_sides_div_neg_lt1-1 nil 3237052399 3307982431 ("" (lemma "both_sides_div_pos_lt1") (("" (skosimp) (("" (inst -1 "-nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 377 330 nil nil)) (both_sides_div_neg_lt2 0 (both_sides_div_neg_lt2-1 nil 3237052399 3307982432 ("" (lemma "both_sides_div_pos_lt2") (("" (skosimp) (("" (inst -1 "-ny!1" "-nx!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 539 480 nil nil)) (both_sides_div_neg_lt3 0 (both_sides_div_neg_lt3-1 nil 3237052399 3307982432 ("" (lemma "both_sides_div_pos_lt3") (("" (skosimp) (("" (inst -1 "nz!1" "-ny!1" "-nx!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 448 430 nil nil)) (lt_plus_lt1 0 (lt_plus_lt1-1 nil 3237052399 3307982433 ("" (grind) nil nil) proved nil 292 260 nil nil)) (lt_plus_lt2 0 (lt_plus_lt2-1 nil 3237052399 3307982433 ("" (grind) nil nil) proved nil 310 260 nil nil)) (lt_minus_lt1 0 (lt_minus_lt1-1 nil 3237052399 3307982433 ("" (grind) nil nil) proved nil 224 220 nil nil)) (lt_minus_lt2 0 (lt_minus_lt2-1 nil 3237052399 3307982434 ("" (grind) nil nil) proved nil 266 210 nil nil)) (lt_times_lt_pos1 0 (lt_times_lt_pos1-1 nil 3237052399 3307982434 ("" (skosimp*) (("" (case "nnz!1 = 0") (("1" (assert) (("1" (lemma "pos_times_lt") (("1" (inst -1 "y!1" "w!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "both_sides_times_pos_lt1") (("2" (inst-cp -1 "nnz!1" "px!1" "y!1") (("1" (inst -1 "y!1" "nnz!1" "w!1") (("1" (grind) nil nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 706 660 nil nil)) (lt_times_lt_pos2 0 (lt_times_lt_pos2-1 nil 3237052399 3307982435 ("" (skosimp*) (("" (case "nnx!1 = 0") (("1" (assert) (("1" (lemma "pos_times_lt") (("1" (inst -1 "y!1" "w!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "both_sides_times_pos_lt1") (("2" (inst-cp -1 "pz!1" "nnx!1" "y!1") (("2" (inst -1 "y!1" "pz!1" "w!1") (("1" (grind) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 760 670 nil nil)) (lt_div_lt_pos1_TCC1 0 (lt_div_lt_pos1_TCC1-1 nil 3237052399 3307982435 ("" (subtype-tcc) nil nil) proved nil 129 130 nil nil)) (lt_div_lt_pos1 0 (lt_div_lt_pos1-1 nil 3237052399 3307982436 ("" (grind) (("" (delete -5 -6) (("" (lemma "both_sides_div_pos_lt1") (("" (inst -1 "w!1" "px!1" "y!1") (("" (lemma "both_sides_div_pos_lt2") (("" (inst -1 "w!1" "pz!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 504 440 nil nil)) (lt_div_lt_pos2_TCC1 0 (lt_div_lt_pos2_TCC1-1 nil 3237052399 3307982436 ("" (subtype-tcc) nil nil) proved nil 150 120 nil nil)) (lt_div_lt_pos2 0 (lt_div_lt_pos2-1 nil 3237052399 3307982436 ("" (grind) (("" (delete -4 -5) (("" (lemma "both_sides_div_pos_lt1") (("" (inst -1 "w!1" "nnx!1" "y!1") (("" (lemma "both_sides_div_pos_lt2") (("" (inst -1 "w!1" "pz!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 497 430 nil nil)) (lt_times_lt_neg1 0 (lt_times_lt_neg1-1 nil 3237052399 3307982437 ("" (lemma "lt_times_lt_pos1") (("" (skosimp) (("" (inst -1 "-npw!1" "-ny!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 635 520 nil nil)) (lt_times_lt_neg2 0 (lt_times_lt_neg2-1 nil 3237052399 3307982438 ("" (lemma "lt_times_lt_pos2") (("" (skosimp) (("" (inst -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 506 470 nil nil)) (lt_div_lt_neg1_TCC1 0 (lt_div_lt_neg1_TCC1-1 nil 3237052399 3307982438 ("" (subtype-tcc) nil nil) proved nil 126 120 nil nil)) (lt_div_lt_neg1 0 (lt_div_lt_neg1-1 nil 3237052399 3307982439 ("" (lemma "lt_div_lt_pos1") (("" (skosimp) (("" (inst -1 "-ny!1" "-nw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 822 400 nil nil)) (lt_div_lt_neg2_TCC1 0 (lt_div_lt_neg2_TCC1-1 nil 3237052399 3307982439 ("" (subtype-tcc) nil nil) proved nil 152 120 nil nil)) (lt_div_lt_neg2 0 (lt_div_lt_neg2-1 nil 3237052399 3307982439 ("" (lemma "lt_div_lt_pos2") (("" (skosimp) (("" (inst -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 625 400 nil nil)) (total_le 0 (total_le-1 nil 3237052399 3307982440 ("" (tcc :defs !) nil nil) proved nil 510 240 nil nil)) (dich_le 0 (dich_le-1 nil 3237052399 3307982440 ("" (tcc :defs !) nil nil) proved nil 104 70 nil nil)) (zero_le_zero 0 (zero_le_zero-1 nil 3237052399 3307982440 ("" (tcc :defs !) nil nil) proved nil 151 30 nil nil)) (neg_le 0 (neg_le-1 nil 3237052399 3307982440 ("" (tcc :defs !) nil nil) proved nil 104 100 nil nil)) (pos_times_le 0 (pos_times_le-1 nil 3237052399 3307982441 ("" (lemma "pos_times_lt") (("" (skosimp) (("" (case "x!1 = 0") (("1" (grind) nil nil) ("2" (case "y!1 = 0") (("1" (grind) nil nil) ("2" (inst?) (("2" (lemma "zero_times3") (("2" (inst?) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 658 610 nil nil)) (neg_times_le 0 (neg_times_le-1 nil 3237052399 3307982441 ("" (lemma "pos_times_le") (("" (skosimp) (("" (inst -1 "x!1" "-y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 308 300 nil nil)) (quotient_pos_le 0 (quotient_pos_le-1 nil 3237052399 3307982442 ("" (lemma "quotient_pos_lt") (("" (skosimp) (("" (inst?) (("" (lemma "inv_ne_0") (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 370 310 nil nil)) (quotient_neg_le 0 (quotient_neg_le-1 nil 3237052399 3307982442 ("" (lemma "quotient_pos_le") (("" (skosimp) (("" (inst -1 "-n0x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 384 360 nil nil)) (pos_div_le 0 (pos_div_le-1 nil 3237052399 3307982444 ("" (lemma "pos_div_lt") (("" (skosimp) (("" (case "x!1 = 0") (("1" (grind) nil nil) ("2" (inst?) (("2" (lemma "zero_times3") (("2" (inst -1 "x!1" "1/n0y!1") (("2" (lemma "inv_ne_0") (("2" (inst -1 "n0y!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1457 1290 nil nil)) (neg_div_le 0 (neg_div_le-1 nil 3237052399 3307982444 ("" (lemma "pos_div_le") (("" (skosimp) (("" (inst -1 "-n0y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 352 340 nil nil)) (div_mult_pos_le1 0 (div_mult_pos_le1-1 nil 3237052399 3307982445 ("" (lemma "div_mult_pos_lt1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) (("" (case-replace "z!1 = x!1 * py!1") (("1" (assert) (("1" (case-replace "x!1 * py!1 / py!1 = x!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3 4) (("2" (use "div_def") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 742 680 nil nil)) (div_mult_pos_le2 0 (div_mult_pos_le2-1 nil 3237052399 3307982446 ("" (lemma "div_mult_pos_lt2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) (("" (case-replace "z!1 = x!1 * py!1") (("1" (assert) (("1" (case-replace "x!1 * py!1 / py!1 = x!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3 4) (("2" (use "div_def") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 888 690 nil nil)) (div_mult_neg_le1 0 (div_mult_neg_le1-1 nil 3237052399 3307982446 ("" (lemma "div_mult_neg_lt1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) (("" (case-replace "z!1 = x!1 * ny!1") (("1" (assert) (("1" (case-replace "x!1 * ny!1 / ny!1 = x!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3 4) (("2" (use "div_def") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 739 650 nil nil)) (div_mult_neg_le2 0 (div_mult_neg_le2-1 nil 3237052399 3307982447 ("" (lemma "div_mult_neg_lt2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) (("" (case-replace "z!1 = x!1 * ny!1") (("1" (assert) (("1" (case-replace "x!1 * ny!1 / ny!1 = x!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3 4) (("2" (use "div_def") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 800 660 nil nil)) (both_sides_plus_le1 0 (both_sides_plus_le1-1 nil 3237052399 3307982448 ("" (grind) nil nil) proved nil 317 270 nil nil)) (both_sides_plus_le2 0 (both_sides_plus_le2-1 nil 3237052399 3307982448 ("" (grind) nil nil) proved nil 315 260 nil nil)) (both_sides_minus_le1 0 (both_sides_minus_le1-1 nil 3237052399 3307982449 ("" (grind) nil nil) proved nil 661 220 nil nil)) (both_sides_minus_le2 0 (both_sides_minus_le2-1 nil 3237052399 3307982449 ("" (grind) nil nil) proved nil 268 210 nil nil)) (both_sides_times_pos_le1 0 (both_sides_times_pos_le1-1 nil 3237052399 3307982450 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst?) (("" (inst -1 "y!1") (("" (grind) (("" (lemma "both_sides_times1") (("" (inst?) (("" (inst -1 "y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1005 510 nil nil)) (both_sides_times_pos_le2 0 (both_sides_times_pos_le2-1 nil 3237052399 3307982451 ("" (lemma "both_sides_times_pos_le1") (("" (skosimp) (("" (inst -1 "pz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 845 550 nil nil)) (both_sides_times_neg_le1 0 (both_sides_times_neg_le1-1 nil 3237052399 3307982451 ("" (lemma "both_sides_times_pos_le1") (("" (skosimp) (("" (inst -1 "-nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 523 430 nil nil)) (both_sides_times_neg_le2 0 (both_sides_times_neg_le2-1 nil 3237052399 3307982452 ("" (lemma "both_sides_times_neg_le1") (("" (skosimp) (("" (inst -1 "nz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 612 560 nil nil)) (both_sides_div_pos_le1 0 (both_sides_div_pos_le1-1 nil 3237052399 3307982452 ("" (lemma "both_sides_div_pos_lt1") (("" (skosimp) (("" (inst?) (("" (inst -1 "y!1") (("" (grind) (("" (lemma "both_sides_times_pos_le1") (("" (inst -1 "1/pz!1" "x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 298 280 nil nil)) (both_sides_div_pos_le2 0 (both_sides_div_pos_le2-1 nil 3237052399 3307982455 ("" (lemma "both_sides_div_pos_lt2") (("" (skosimp) (("" (inst?) (("" (inst -1 "py!1") (("" (grind) (("" (lemma "both_sides_div2") (("" (inst?) (("" (inst -1 "py!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2842 400 nil nil)) (both_sides_div_pos_le3 0 (both_sides_div_pos_le3-1 nil 3237052399 3307982456 ("" (lemma "both_sides_div_pos_le2") (("" (skosimp) (("" (inst -1 "py!1" "px!1" "-nz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 596 430 nil nil)) (both_sides_div_neg_le1 0 (both_sides_div_neg_le1-1 nil 3237052399 3307982456 ("" (lemma "both_sides_div_pos_le1") (("" (skosimp) (("" (inst -1 "-nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 366 330 nil nil)) (both_sides_div_neg_le2 0 (both_sides_div_neg_le2-1 nil 3237052399 3307982457 ("" (lemma "both_sides_div_pos_le2") (("" (skosimp) (("" (inst -1 "-ny!1" "-nx!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 504 480 nil nil)) (both_sides_div_neg_le3 0 (both_sides_div_neg_le3-1 nil 3237052399 3307982457 ("" (lemma "both_sides_div_pos_le3") (("" (skosimp) (("" (inst -1 "nz!1" "-ny!1" "-nx!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 574 430 nil nil)) (le_plus_le 0 (le_plus_le-1 nil 3237052399 3307982458 ("" (grind) nil nil) proved nil 335 260 nil nil)) (le_minus_le 0 (le_minus_le-1 nil 3237052399 3307982458 ("" (grind) nil nil) proved nil 216 210 nil nil)) (le_times_le_pos 0 (le_times_le_pos-1 nil 3237052399 3307982459 ("" (lemma "lt_times_lt_pos1") (("" (skosimp) (("" (case "nnz!1 = w!1") (("1" (lemma "both_sides_times_pos_le1") (("1" (inst -1 "w!1" "nnx!1" "y!1") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ("2" (inst -1 "nnz!1" "nnx!1" "w!1" "y!1") (("1" (grind) nil nil) ("2" (grind) (("2" (lemma "pos_times_le") (("2" (inst -1 "y!1" "w!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 962 530 nil nil)) (le_div_le_pos_TCC1 0 (le_div_le_pos_TCC1-1 nil 3237052399 3307982459 ("" (grind) nil nil) proved nil 122 120 nil nil)) (le_div_le_pos 0 (le_div_le_pos-1 nil 3237052399 3307982460 ("" (lemma "le_times_le_pos") (("" (skosimp) (("" (inst -1 "nnx!1" "1/w!1" "1/pz!1" "y!1") (("1" (grind) (("1" (rewrite "both_sides_div_pos_le2") nil nil)) nil) ("2" (assert) (("2" (lemma "quotient_pos_lt") (("2" (inst -1 "w!1") (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil) proved nil 1227 670 nil nil)) (le_times_le_neg 0 (le_times_le_neg-1 nil 3237052399 3307982461 ("" (lemma "le_times_le_pos") (("" (skosimp) (("" (inst -1 "-npy!1" "-npw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 555 380 nil nil)) (le_div_le_neg_TCC1 0 (le_div_le_neg_TCC1-1 nil 3237052399 3307982461 ("" (grind) nil nil) proved nil 156 110 nil nil)) (le_div_le_neg 0 (le_div_le_neg-1 nil 3237052399 3307982461 ("" (lemma "le_div_le_pos") (("" (skosimp) (("" (inst -1 "-npy!1" "-nw!1" "-z!1" "-x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 426 380 nil nil)) (strict_gt 0 (strict_gt-1 nil 3237052399 3307982461 ("" (tcc :defs !) nil nil) proved nil 162 160 nil nil)) (trich_gt 0 (trich_gt-1 nil 3237052399 3307982462 ("" (tcc :defs !) nil nil) proved nil 118 80 nil nil)) (tri_unique_gt1 0 (tri_unique_gt1-1 nil 3237052399 3307982462 ("" (tcc :defs !) nil nil) proved nil 81 80 nil nil)) (tri_unique_gt2 0 (tri_unique_gt2-1 nil 3237052399 3307982462 ("" (tcc :defs !) nil nil) proved nil 74 70 nil nil)) (zero_not_gt_zero 0 (zero_not_gt_zero-1 nil 3237052399 3307982462 ("" (tcc :defs !) nil nil) proved nil 36 30 nil nil)) (neg_gt 0 (neg_gt-1 nil 3237052399 3307982462 ("" (tcc :defs !) nil nil) proved nil 105 100 nil nil)) (pos_times_gt 0 (pos_times_gt-1 nil 3237052399 3307982462 ("" (lemma "pos_times_lt") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 461 390 nil nil)) (neg_times_gt 0 (neg_times_gt-1 nil 3237052399 3307982463 ("" (lemma "neg_times_lt") (("" (skosimp) (("" (inst -1 "x!1" "y!1") (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil 432 370 nil nil)) (quotient_pos_gt 0 (quotient_pos_gt-1 nil 3237052399 3307982463 ("" (lemma "quotient_pos_lt") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 316 290 nil nil)) (quotient_neg_gt 0 (quotient_neg_gt-1 nil 3237052399 3307982464 ("" (lemma "quotient_neg_lt") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 315 300 nil nil)) (pos_div_gt 0 (pos_div_gt-1 nil 3237052399 3307982464 ("" (lemma "pos_div_lt") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 479 430 nil nil)) (neg_div_gt 0 (neg_div_gt-1 nil 3237052399 3307982464 ("" (lemma "neg_div_lt") (("" (skosimp) (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil) proved nil 460 440 nil nil)) (div_mult_pos_gt1 0 (div_mult_pos_gt1-1 nil 3237052399 3307982465 ("" (lemma "div_mult_pos_lt1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved nil 478 420 nil nil)) (div_mult_pos_gt2 0 (div_mult_pos_gt2-1 nil 3237052399 3307982466 ("" (lemma "div_mult_pos_lt2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved nil 622 420 nil nil)) (div_mult_neg_gt1 0 (div_mult_neg_gt1-1 nil 3237052399 3307982466 ("" (lemma "div_mult_neg_lt1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved nil 445 430 nil nil)) (div_mult_neg_gt2 0 (div_mult_neg_gt2-1 nil 3237052399 3307982467 ("" (lemma "div_mult_neg_lt2") (("" (skosimp) (("" (grind) nil nil)) nil)) nil) proved nil 692 550 nil nil)) (both_sides_plus_gt1 0 (both_sides_plus_gt1-1 nil 3237052399 3307982467 ("" (grind) nil nil) proved nil 319 260 nil nil)) (both_sides_plus_gt2 0 (both_sides_plus_gt2-1 nil 3237052399 3307982467 ("" (grind) nil nil) proved nil 280 270 nil nil)) (both_sides_minus_gt1 0 (both_sides_minus_gt1-1 nil 3237052399 3307982468 ("" (grind) nil nil) proved nil 272 220 nil nil)) (both_sides_minus_gt2 0 (both_sides_minus_gt2-1 nil 3237052399 3307982468 ("" (grind) nil nil) proved nil 223 210 nil nil)) (both_sides_times_pos_gt1 0 (both_sides_times_pos_gt1-1 nil 3237052399 3307982469 ("" (lemma "both_sides_times_pos_lt1") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 874 430 nil nil)) (both_sides_times_pos_gt2 0 (both_sides_times_pos_gt2-1 nil 3237052399 3307982470 ("" (lemma "both_sides_times_pos_lt2") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 883 440 nil nil)) (both_sides_times_neg_gt1 0 (both_sides_times_neg_gt1-1 nil 3237052399 3307982470 ("" (lemma "both_sides_times_neg_lt1") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 677 440 nil nil)) (both_sides_times_neg_gt2 0 (both_sides_times_neg_gt2-1 nil 3237052399 3307982471 ("" (lemma "both_sides_times_neg_lt2") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 482 420 nil nil)) (both_sides_div_pos_gt1 0 (both_sides_div_pos_gt1-1 nil 3237052399 3307982471 ("" (lemma "both_sides_div_pos_lt1") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 321 270 nil nil)) (both_sides_div_pos_gt2 0 (both_sides_div_pos_gt2-1 nil 3237052399 3307982472 ("" (lemma "both_sides_div_pos_lt2") (("" (skosimp) (("" (inst -1 "py!1" "px!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 339 320 nil nil)) (both_sides_div_pos_gt3 0 (both_sides_div_pos_gt3-1 nil 3237052399 3307982472 ("" (lemma "both_sides_div_pos_lt3") (("" (skosimp) (("" (inst -1 "nz!1" "py!1" "px!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 409 370 nil nil)) (both_sides_div_neg_gt1 0 (both_sides_div_neg_gt1-1 nil 3237052399 3307982472 ("" (lemma "both_sides_div_neg_lt1") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 318 270 nil nil)) (both_sides_div_neg_gt2 0 (both_sides_div_neg_gt2-1 nil 3237052399 3307982473 ("" (lemma "both_sides_div_neg_lt2") (("" (skosimp) (("" (inst -1 "ny!1" "nx!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 393 370 nil nil)) (both_sides_div_neg_gt3 0 (both_sides_div_neg_gt3-1 nil 3237052399 3307982473 ("" (lemma "both_sides_div_neg_lt3") (("" (skosimp) (("" (inst -1 "ny!1" "nx!1" "nz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 383 340 nil nil)) (gt_plus_gt1 0 (gt_plus_gt1-1 nil 3237052399 3307982474 ("" (grind) nil nil) proved nil 363 260 nil nil)) (gt_plus_gt2 0 (gt_plus_gt2-1 nil 3237052399 3307982474 ("" (grind) nil nil) proved nil 312 260 nil nil)) (gt_minus_gt1 0 (gt_minus_gt1-1 nil 3237052399 3307982474 ("" (grind) nil nil) proved nil 269 210 nil nil)) (gt_minus_gt2 0 (gt_minus_gt2-1 nil 3237052399 3307982474 ("" (grind) nil nil) proved nil 222 210 nil nil)) (gt_times_gt_pos1 0 (gt_times_gt_pos1-1 nil 3237052399 3307982475 ("" (lemma "lt_times_lt_pos1") (("" (skosimp) (("" (inst -1 "nnw!1" "py!1" "z!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 464 430 nil nil)) (gt_times_gt_pos2 0 (gt_times_gt_pos2-1 nil 3237052399 3307982476 ("" (lemma "lt_times_lt_pos2") (("" (skosimp) (("" (inst -1 "nny!1" "pw!1" "z!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 1264 430 nil nil)) (gt_div_gt_pos1_TCC1 0 (gt_div_gt_pos1_TCC1-1 nil 3237052399 3307982476 ("" (subtype-tcc) nil nil) proved nil 157 130 nil nil)) (gt_div_gt_pos1 0 (gt_div_gt_pos1-1 nil 3237052399 3307982477 ("" (lemma "lt_div_lt_pos1") (("" (skosimp) (("" (inst -1 "py!1" "pw!1" "z!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 344 280 nil nil)) (gt_div_gt_pos2_TCC1 0 (gt_div_gt_pos2_TCC1-1 nil 3237052399 3307982477 ("" (subtype-tcc) nil nil) proved nil 161 120 nil nil)) (gt_div_gt_pos2 0 (gt_div_gt_pos2-1 nil 3237052399 3307982477 ("" (lemma "lt_div_lt_pos2") (("" (skosimp) (("" (inst -1 "nny!1" "pw!1" "z!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 282 270 nil nil)) (gt_times_gt_neg1 0 (gt_times_gt_neg1-1 nil 3237052399 3307982478 ("" (lemma "lt_times_lt_neg1") (("" (skosimp) (("" (inst -1 "npz!1" "nx!1" "y!1" "w!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 496 440 nil nil)) (gt_times_gt_neg2 0 (gt_times_gt_neg2-1 nil 3237052399 3307982479 ("" (lemma "lt_times_lt_neg2") (("" (skosimp) (("" (inst -1 "npx!1" "nz!1" "y!1" "w!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 854 460 nil nil)) (gt_div_gt_neg1_TCC1 0 (gt_div_gt_neg1_TCC1-1 nil 3237052399 3307982479 ("" (subtype-tcc) nil nil) proved nil 163 120 nil nil)) (gt_div_gt_neg1 0 (gt_div_gt_neg1-1 nil 3237052399 3307982479 ("" (lemma "lt_div_lt_neg1") (("" (skosimp) (("" (inst -1 "nz!1" "nx!1" "y!1" "w!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 543 300 nil nil)) (gt_div_gt_neg2_TCC1 0 (gt_div_gt_neg2_TCC1-1 nil 3237052399 3307982480 ("" (subtype-tcc) nil nil) proved nil 303 110 nil nil)) (gt_div_gt_neg2 0 (gt_div_gt_neg2-1 nil 3237052399 3307982480 ("" (lemma "lt_div_lt_neg2") (("" (skosimp) (("" (inst -1 "npx!1" "nz!1" "y!1" "w!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 375 290 nil nil)) (total_ge 0 (total_ge-1 nil 3252308047 3307982481 ("" (grind) nil nil) proved nil 394 230 t shostak)) (dich_ge 0 (dich_ge-1 nil 3237052399 3307982481 ("" (tcc :defs !) nil nil) proved nil 112 80 nil nil)) (zero_ge_zero 0 (zero_ge_zero-1 nil 3237052399 3307982481 ("" (tcc :defs !) nil nil) proved nil 36 30 nil nil)) (neg_ge 0 (neg_ge-1 nil 3237052399 3307982481 ("" (tcc :defs !) nil nil) proved nil 106 100 nil nil)) (pos_times_ge 0 (pos_times_ge-1 nil 3237052399 3307982481 ("" (lemma "pos_times_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 436 410 nil nil)) (neg_times_ge 0 (neg_times_ge-1 nil 3237052399 3307982482 ("" (lemma "neg_times_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 469 410 nil nil)) (quotient_pos_ge 0 (quotient_pos_ge-1 nil 3237052399 3307982482 ("" (lemma "quotient_pos_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 311 300 nil nil)) (quotient_neg_ge 0 (quotient_neg_ge-1 nil 3237052399 3307982483 ("" (lemma "quotient_neg_le") (("" (skosimp) (("" (grind) nil nil)) nil)) nil) proved nil 407 360 nil nil)) (pos_div_ge 0 (pos_div_ge-1 nil 3237052399 3307982483 ("" (lemma "pos_div_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 447 410 nil nil)) (neg_div_ge 0 (neg_div_ge-1 nil 3237052399 3307982483 ("" (lemma "neg_div_le") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 474 420 nil nil)) (div_mult_pos_ge1 0 (div_mult_pos_ge1-1 nil 3237052399 3307982484 ("" (lemma "div_mult_pos_le2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved nil 472 410 nil nil)) (div_mult_pos_ge2 0 (div_mult_pos_ge2-1 nil 3237052399 3307982484 ("" (lemma "div_mult_pos_le1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved nil 435 420 nil nil)) (div_mult_neg_ge1 0 (div_mult_neg_ge1-1 nil 3237052399 3307982485 ("" (lemma "div_mult_neg_le2") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved nil 472 420 nil nil)) (div_mult_neg_ge2 0 (div_mult_neg_ge2-1 nil 3237052399 3307982485 ("" (lemma "div_mult_neg_le1") (("" (skosimp) (("" (inst?) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved nil 555 420 nil nil)) (both_sides_plus_ge1 0 (both_sides_plus_ge1-1 nil 3237052399 3307982486 ("" (grind) nil nil) proved nil 339 270 nil nil)) (both_sides_plus_ge2 0 (both_sides_plus_ge2-1 nil 3237052399 3307982486 ("" (grind) nil nil) proved nil 317 260 nil nil)) (both_sides_minus_ge1 0 (both_sides_minus_ge1-1 nil 3237052399 3307982486 ("" (grind) nil nil) proved nil 230 220 nil nil)) (both_sides_minus_ge2 0 (both_sides_minus_ge2-1 nil 3237052399 3307982487 ("" (grind) nil nil) proved nil 274 220 nil nil)) (both_sides_times_pos_ge1 0 (both_sides_times_pos_ge1-1 nil 3237052399 3307982487 ("" (lemma "both_sides_times_pos_le1") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 512 420 nil nil)) (both_sides_times_pos_ge2 0 (both_sides_times_pos_ge2-1 nil 3237052399 3307982488 ("" (lemma "both_sides_times_pos_le2") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 485 440 nil nil)) (both_sides_times_neg_ge1 0 (both_sides_times_neg_ge1-1 nil 3237052399 3307982489 ("" (lemma "both_sides_times_neg_le1") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 878 430 nil nil)) (both_sides_times_neg_ge2 0 (both_sides_times_neg_ge2-1 nil 3237052399 3307982489 ("" (lemma "both_sides_times_neg_le2") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 709 450 nil nil)) (both_sides_div_pos_ge1 0 (both_sides_div_pos_ge1-1 nil 3237052399 3307982490 ("" (lemma "both_sides_div_pos_le1") (("" (skosimp) (("" (inst -1 "pz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 470 270 nil nil)) (both_sides_div_pos_ge2 0 (both_sides_div_pos_ge2-1 nil 3237052399 3307982490 ("" (lemma "both_sides_div_pos_le2") (("" (skosimp) (("" (inst -1 "py!1" "px!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 597 340 nil nil)) (both_sides_div_pos_ge3 0 (both_sides_div_pos_ge3-1 nil 3237052399 3307982491 ("" (lemma "both_sides_div_pos_le3") (("" (skosimp) (("" (inst -1 "nz!1" "py!1" "px!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 391 370 nil nil)) (both_sides_div_neg_ge1 0 (both_sides_div_neg_ge1-1 nil 3237052399 3307982491 ("" (lemma "both_sides_div_neg_le1") (("" (skosimp) (("" (inst -1 "nz!1" "y!1" "x!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 322 270 nil nil)) (both_sides_div_neg_ge2 0 (both_sides_div_neg_ge2-1 nil 3237052399 3307982492 ("" (lemma "both_sides_div_neg_le2") (("" (skosimp) (("" (inst -1 "ny!1" "nx!1" "pz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 422 370 nil nil)) (both_sides_div_neg_ge3 0 (both_sides_div_neg_ge3-1 nil 3237052399 3307982492 ("" (lemma "both_sides_div_neg_le3") (("" (skosimp) (("" (inst -1 "ny!1" "nx!1" "nz!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 339 330 nil nil)) (ge_plus_ge 0 (ge_plus_ge-1 nil 3237052399 3307982492 ("" (grind) nil nil) proved nil 309 260 nil nil)) (ge_minus_ge 0 (ge_minus_ge-1 nil 3237052399 3307982493 ("" (grind) nil nil) proved nil 261 220 nil nil)) (ge_times_ge_pos 0 (ge_times_ge_pos-1 nil 3237052399 3307982493 ("" (lemma "le_times_le_pos") (("" (skosimp) (("" (inst -1 "nny!1" "nnw!1" "z!1" "x!1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 333 300 nil nil)) (ge_div_ge_pos_TCC1 0 (ge_div_ge_pos_TCC1-1 nil 3237052399 3307982493 ("" (tcc :defs explicit) nil nil) proved nil 161 120 nil nil)) (ge_div_ge_pos 0 (ge_div_ge_pos-1 nil 3237052399 3307982493 ("" (lemma "le_div_le_pos") (("" (skosimp) (("" (inst -1 "nny!1" "pw!1" "z!1" "x!1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 265 260 nil nil)) (ge_times_ge_neg 0 (ge_times_ge_neg-1 nil 3237052399 3307982494 ("" (lemma "le_times_le_neg") (("" (skosimp) (("" (inst -1 "npz!1" "npx!1" "y!1" "w!1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 345 310 nil nil)) (ge_div_ge_neg_TCC1 0 (ge_div_ge_neg_TCC1-1 nil 3237052399 3307982494 ("" (tcc :defs explicit) nil nil) proved nil 149 100 nil nil)) (ge_div_ge_neg 0 (ge_div_ge_neg-1 nil 3237052399 3307982494 ("" (lemma "le_div_le_neg") (("" (skosimp*) (("" (inst -1 "npx!1" "nz!1" "y!1" "w!1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 275 260 nil nil)) (nonzero_times1 0 (nonzero_times1-1 nil 3237052399 3307982494 ("" (lemma "zero_times3") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 275 230 nil nil)) (nonzero_times2 0 (nonzero_times2-1 nil 3237052399 3307982495 ("" (lemma "zero_times3") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 240 220 nil nil)) (nonzero_times3 0 (nonzero_times3-1 nil 3237052399 3307982495 ("" (lemma "zero_times3") (("" (skosimp) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 231 220 nil nil)) (eq1_gt 0 (eq1_gt-1 nil 3237052399 3307982496 ("" (skosimp) (("" (lemma "div_cancel3") (("" (inst -1 "y!1" "1" "x!1") (("1" (assert) (("1" (hide -3) (("1" (replace -1 :dir rl) (("1" (hide -1) (("1" (lemma "div_mult_pos_gt2") (("1" (inst -1 "y!1" "1" "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "zero_times3") (("2" (inst?) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 671 490 nil nil)) (eq1_ge 0 (eq1_ge-1 nil 3237052399 3307982496 ("" (lemma "eq1_gt") (("" (skosimp) (("" (case "x!1 = 1") (("1" (assert) nil nil) ("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 198 160 nil nil)) (eqm1_gt 0 (eqm1_gt-1 nil 3237052399 3307982496 ("" (skosimp) (("" (lemma "eq1_gt") (("" (inst -1 "x!1" "-y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 233 230 nil nil)) (eqm1_ge 0 (eqm1_ge-1 nil 3237052399 3307982496 ("" (lemma "eq1_ge") (("" (skosimp) (("" (inst -1 "x!1" "-y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 238 240 nil nil)) (eqm1_lt 0 (eqm1_lt-1 nil 3237052399 3307982497 ("" (skosimp) (("" (lemma "eq1_gt") (("" (inst -1 "-x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 275 230 nil nil)) (eqm1_le 0 (eqm1_le-1 nil 3237052399 3307982497 ("" (lemma "eq1_ge") (("" (skosimp) (("" (inst -1 "-x!1" "y!1") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 302 240 nil nil)) (sqrt_1 0 (sqrt_1-1 nil 3237052399 3307982499 ("" (skosimp*) (("" (ground) (("" (case "abs(x!1)>1") (("1" (lemma "eq1_gt") (("1" (inst -1 "abs(x!1)" "abs(x!1)") (("1" (assert) (("1" (expand "abs" 1) (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "div_mult_pos_ge1") (("2" (inst -1 "abs(x!1)" "1" "1") (("1" (ground) (("1" (lemma "eq1_ge") (("1" (inst -1 "1/abs(x!1)" "1/abs(x!1)") (("1" (assert) (("1" (split) (("1" (case "abs(x!1) = 1") (("1" (assert) (("1" (expand "abs" -1) (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (assert) (("2" (rewrite "div_mult_pos_le1") (("2" (expand "abs" 1) (("2" (lift-if) (("2" (prop) (("1" (assert) nil nil) ("2" (assert) (("2" (case "x!1 = 0") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "abs" 1) (("2" (lift-if) (("2" (prop) (("1" (rewrite "div_times") (("1" (assert) nil nil)) nil) ("2" (rewrite "div_times") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "x!1 = 0") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (expand "abs" 2) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "x!1 = 0") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (expand "abs" 2) (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2063 1440 nil nil)) (sqrt_1_lt 0 (sqrt_1_lt-1 nil 3237052399 3307982500 ("" (skosimp*) (("" (case-replace "x!1 * x!1 - 1 < 0") (("1" (hide -2) (("1" (case-replace "x!1 * x!1 - 1 = (x!1 + 1)*(x!1 - 1)") (("1" (hide -1) (("1" (lemma "pos_times_lt") (("1" (inst?) (("1" (assert) (("1" (hide -1) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) proved nil 1197 650 nil nil)) (sqrt_1_le 0 (sqrt_1_le-1 nil 3237052399 3307982501 ("" (skosimp*) (("" (case-replace "x!1 * x!1 - 1 <= 0") (("1" (hide -2) (("1" (case-replace "x!1 * x!1 - 1 = (x!1 + 1)*(x!1 - 1)") (("1" (hide -1) (("1" (lemma "neg_times_le") (("1" (inst?) (("1" (assert) (("1" (hide -2) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) proved nil 997 570 nil nil)) (idem_mult 0 (idem_mult-1 nil 3237052399 3307982502 ("" (skosimp*) (("" (ground) (("" (lemma "div_cancel3") (("" (inst -1 "x!1" "x!1" "x!1") (("" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 500 230 nil nil)) (product_1 0 (product_1-2 "Needed a :flush? t for some reason" 3299954096 3307982502 ("" (skosimp) (("" (case "i!1 = 0") (("1" (grind) nil nil) ("2" (case "j!1 = 0") (("1" (grind) nil nil) ("2" (lemma "eq1_ge") (("2" (inst?) (("2" (lemma "eq1_ge") (("2" (inst -1 "j!1" "i!1") (("2" (assert) (("2" (assert :flush? t) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 419 360 t shostak) (product_1-1 nil 3237052399 3299952691 ("" (skosimp) (("" (case "i!1 = 0") (("1" (grind) nil nil) ("2" (case "j!1 = 0") (("1" (grind) nil nil) ("2" (lemma "eq1_ge") (("2" (inst?) (("2" (lemma "eq1_ge") (("2" (inst -1 "j!1" "i!1") (("2" (assert) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 342 310 nil nil)) (product_m1 0 (product_m1-1 nil 3237052399 3307982503 ("" (skosimp) (("" (lemma "product_1") (("" (inst -1 "i!1" "-j!1") (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 351 300 nil nil)) (triangle 0 (triangle-1 nil 3237052399 3307982503 ("" (grind) nil nil) proved nil 324 300 nil nil)) (abs_mult 0 (abs_mult-1 nil 3237052399 3307982504 ("" (skosimp) (("" (lemma "neg_times_lt") (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 943 860 nil nil)) (abs_div 0 (abs_div-1 nil 3237052399 3307982505 ("" (skosimp*) (("" (lemma "pos_div_gt") (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil) proved nil 734 610 nil nil)) (abs_abs 0 (abs_abs-1 nil 3237052399 3307982505 ("" (skosimp*) (("" (expand "abs") (("" (lift-if) (("" (ground) nil nil)) nil)) nil)) nil) proved nil 388 90 nil nil)) (abs_square 0 (abs_square-1 nil 3237052399 3307982506 ("" (skosimp*) (("" (expand "abs") (("" (propax) nil nil)) nil)) nil) proved nil 430 50 nil nil)) (abs_limits 0 (abs_limits-1 nil 3237052399 3307982506 ("" (grind) nil nil) proved nil 386 300 nil nil)) (axiom_of_archimedes 0 (axiom_of_archimedes-2 "" 3299954306 3307982507 ("" (lemma "real_complete") (("" (inst -1 "{x:real|EXISTS (z : int) : z=x}") (("1" (grind :if-match nil) (("1" (inst -4 "y!1 - 1") (("1" (reduce :if-match nil) (("1" (inst - "s!1 + 1") (("1" (assert) nil nil) ("2" (inst 1 "1 + s!1") (("2" (assert) (("2" (lemma "int_plus_int_is_int") (("2" (inst?) (("2" (assert) (("2" (lemma "rat_plus_rat_is_rat") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reduce) nil nil)) nil) ("2" (delete 2) (("2" (grind) (("2" (inst - "0") (("2" (assert) (("2" (inst 1 "0") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1182 960 t shostak) (axiom_of_archimedes-1 nil 3237052399 3299952701 ("" (lemma "real_complete") (("" (inst -1 "{x:real|EXISTS (z : int) : z=x}") (("1" (grind :if-match nil) (("1" (inst -4 "y!1 - 1") (("1" (reduce :if-match nil) (("1" (inst - "s!1 + 1") (("1" (assert) nil nil) ("2" (lemma "int_plus_int_is_int") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (reduce) nil nil)) nil) ("2" (delete 2) (("2" (grind) (("2" (inst - "0") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 1039 620 nil nil)) (archimedean 0 (archimedean-1 nil 3237052399 3307982508 ("" (skolem!) (("" (lemma "axiom_of_archimedes" ("x" "1/px!1")) (("" (skolem!) (("" (assert) (("" (inst + "i!1") (("" (rewrite "div_mult_pos_lt1") (("" (rewrite "div_mult_pos_lt1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 744 680 nil nil)) (real_lt_is_strict_total_order 0 (real_lt_is_strict_total_order-1 nil 3252221044 3307982509 ("" (grind) nil nil) proved nil 604 180 t shostak)) (real_le_is_total_order 0 (real_le_is_total_order-1 nil 3252221044 3307982509 ("" (grind) nil nil) proved nil 257 210 t shostak)) (real_gt_is_strict_total_order 0 (real_gt_is_strict_total_order-1 nil 3252221044 3307982509 ("" (grind) nil nil) proved nil 341 170 t shostak)) (real_ge_is_total_order 0 (real_ge_is_total_order-1 nil 3252221044 3307982510 ("" (grind) nil nil) proved nil 383 220 t shostak)))(rational_props (rational_pred_ax2 0 (rational_pred_ax2-1 nil 3243832709 3307982510 ("" (skosimp) (("" (lemma "rational_pred_ax") (("" (inst?) (("" (skosimp) (("" (case "n0j!1 > 0") (("1" (inst 1 "i!1" "n0j!1") (("1" (assert) nil nil)) nil) ("2" (inst 2 "-i!1" "-n0j!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 683 380 t shostak)) (density_positive 0 (density_positive-1 nil 3237052399 3307982512 ("" (skosimp) (("" (assert) (("" (lemma "archimedean" ("px" "y!1 - x!1")) (("" (skolem!) (("" (lemma "posreal_mult_closed" ("x" "y!1" "y" "n!1")) (("" (ground) (("" (lemma "wf_nat") (("" (expand "well_founded?") (("" (inst -1 "LAMBDA (n : nat) : y!1 * n!1 <= n") (("" (reduce :if-match nil) (("1" (auto-rewrite "div_mult_pos_lt1" "div_mult_pos_lt2") (("1" (inst + "(y!2 - 1)/n!1") (("1" (assert) (("1" (inst - "y!2 -1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (lemma "axiom_of_archimedes" ("x" "y!1 * n!1")) (("2" (skolem!) (("2" (assert) (("2" (inst + "i!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1432 1260 nil nil)) (density 0 (density-1 nil 3237052399 3307982512 ("" (lemma "density_positive") (("" (skosimp) (("" (case "x!1 >= 0") (("1" (inst? -) (("1" (assert) nil nil)) nil) ("2" (lemma "axiom_of_archimedes" ("x" "-x!1")) (("2" (skosimp) (("2" (inst -2 "i!1 + x!1" "i!1 + y!1") (("2" (assert) (("2" (skosimp) (("2" (inst 2 "r!1 - i!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 511 440 nil nil)))(integer_props (integer_pred_ax 0 (integer_pred_ax-1 nil 3237052399 3307982512 ("" (skosimp*) (("" (case "i!1 >= 0") (("1" (inst 1 "i!1") nil nil) ("2" (inst 2 "-i!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved nil 133 120 nil nil)) (div_simple 0 (div_simple-1 nil 3237052399 3307982513 ("" (grind :if-match nil) (("" (inst 2 "i!1/n0j!1") (("" (assert) nil nil)) nil)) nil) proved nil 679 610 nil nil)) (lub_nat_TCC1 0 (lub_nat_TCC1-1 nil 3237052399 3307982513 ("" (subtype-tcc) nil nil) proved nil 188 170 nil nil)) (lub_nat 0 (lub_nat-2 "" 3299954571 3307982515 ("" (induct "m") (("1" (skosimp*) (("1" (expand "upper_bound?") (("1" (typepred "N!1") (("1" (expand "nonempty?") (("1" (expand "empty?") (("1" (skosimp*) (("1" (expand "member") (("1" (inst 1 "x!1") (("1" (expand "least_upper_bound?") (("1" (split) (("1" (expand "upper_bound?") (("1" (skosimp*) (("1" (inst -2 "s!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "upper_bound?") (("2" (inst -1 "x!1") (("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -1 "N!1") (("2" (assert) (("2" (replace 1) (("2" (assert) (("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (inst 2 "s!1") (("1" (expand "least_upper_bound?") (("1" (split) (("1" (expand "upper_bound?") (("1" (skosimp*) (("1" (inst -1 "s!2") (("1" (assert) (("1" (case "forall (i, j: int): i < j iff i + 1 <= j") (("1" (inst -1 "s!1" "s!2") (("1" (assert) nil nil) ("2" (typepred "s!2") (("2" (expand "extend") (("2" (prop) nil nil)) nil)) nil) ("3" (typepred "s!1") (("3" (expand "extend") (("3" (prop) nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (ground) (("2" (assert :flush? t) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (expand "upper_bound?") (("2" (inst -1 "s!1") nil nil)) nil)) nil)) nil)) nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp) (("3" (skosimp) (("3" (expand "nonempty?") (("3" (expand "empty?") (("3" (typepred "N!1") (("3" (expand "nonempty?") (("3" (expand "empty?") (("3" (skosimp) (("3" (inst -3 "x!1") (("3" (expand "member") (("3" (expand "extend") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp) (("4" (typepred "N!1") (("4" (expand "nonempty?") (("4" (expand "empty?") (("4" (skosimp) (("4" (expand "member") (("4" (inst -2 "x!1") (("4" (expand "extend") (("4" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1444 1160 t shostak) (lub_nat-1 nil 3237052399 3299952708 ("" (induct "m") (("1" (skosimp*) (("1" (expand "upper_bound?") (("1" (typepred "N!1") (("1" (expand "nonempty?") (("1" (expand "empty?") (("1" (skosimp*) (("1" (expand "member") (("1" (inst 1 "x!1") (("1" (expand "least_upper_bound?") (("1" (split) (("1" (expand "upper_bound?") (("1" (skosimp*) (("1" (inst -2 "s!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "upper_bound?") (("2" (inst -1 "x!1") (("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -1 "N!1") (("2" (assert) (("2" (replace 1) (("2" (assert) (("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (inst 2 "s!1") (("1" (expand "least_upper_bound?") (("1" (split) (("1" (expand "upper_bound?") (("1" (skosimp*) (("1" (inst -1 "s!2") (("1" (assert) (("1" (case "forall (i, j: int): i < j iff i + 1 <= j") (("1" (inst -1 "s!1" "s!2") (("1" (assert) nil nil) ("2" (typepred "s!2") (("2" (expand "extend") (("2" (prop) nil nil)) nil)) nil) ("3" (typepred "s!1") (("3" (expand "extend") (("3" (prop) nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (expand "upper_bound?") (("2" (inst -1 "s!1") nil nil)) nil)) nil)) nil)) nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp) (("3" (skosimp) (("3" (expand "nonempty?") (("3" (expand "empty?") (("3" (typepred "N!1") (("3" (expand "nonempty?") (("3" (expand "empty?") (("3" (skosimp) (("3" (inst -3 "x!1") (("3" (expand "member") (("3" (expand "extend") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp) (("4" (typepred "N!1") (("4" (expand "nonempty?") (("4" (expand "empty?") (("4" (skosimp) (("4" (expand "member") (("4" (inst -2 "x!1") (("4" (expand "extend") (("4" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1760 1160 nil nil)) (lub_int_TCC1 0 (lub_int_TCC1-1 nil 3237052399 3307982515 ("" (subtype-tcc) nil nil) proved nil 175 170 nil nil)) (lub_int 0 (lub_int-1 nil 3237052399 3307982517 ("" (skosimp*) (("" (typepred "I!1") (("" (expand "nonempty?") (("" (expand "empty?") (("" (skosimp*) (("" (lemma "lub_nat") (("" (expand "member") (("" (inst - "{n|I!1(n+x!1)}" "i!1-x!1") (("1" (prop) (("1" (skosimp*) (("1" (inst + "n!1+x!1") (("1" (assert) (("1" (expand "least_upper_bound?") (("1" (prop) (("1" (expand "upper_bound?") (("1" (skosimp*) (("1" (assert) (("1" (inst - "s!1-x!1") (("1" (assert) nil nil) ("2" (assert) (("2" (expand "extend") (("2" (split 1) (("1" (flatten) (("1" (typepred "s!1") (("1" (expand "extend") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (prop) (("1" (lemma "rat_minus_rat_is_rat") (("1" (inst?) nil nil)) nil) ("2" (lemma "int_minus_int_is_int") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst - "y!1-x!1") (("2" (assert) (("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (inst?) (("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (typepred "s!1") (("2" (expand "extend" -1) (("2" (prop) (("2" (inst - "s!1+x!1") (("1" (assert) nil nil) ("2" (expand "extend" 1) (("2" (prop) (("1" (lemma "rat_plus_rat_is_rat") (("1" (inst?) nil nil)) nil) ("2" (lemma "int_plus_int_is_int") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (expand "upper_bound?") (("2" (inst -2 "x!1") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("3" (expand "nonempty?") (("3" (expand "empty?") (("3" (inst -1 "0") (("3" (expand "member") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1667 1370 nil nil)) (glb_nat 0 (glb_nat-1 nil 3237052399 3307982519 ("" (lemma "lub_int") (("" (skosimp*) (("" (inst -1 "{i: nonpos_int | N!1(-i)}" "0") (("1" (grind :if-match nil) (("1" (inst 1 "-j!1") (("1" (prop) (("1" (skosimp*) (("1" (inst -3 "-s!1") (("1" (assert) nil nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (assert) (("2" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) (("3" (lemma "minus_rat_is_rat") (("3" (inst -1 "s!1") nil nil)) nil)) nil) ("4" (lemma "minus_int_is_int") (("4" (inst -1 "s!1") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -3) (("2" (skosimp*) (("2" (inst -4 "-y!1") (("2" (prop) (("1" (assert) nil nil) ("2" (skosimp*) (("2" (inst -1 "-s!1") (("1" (assert) nil nil) ("2" (typepred "s!1") (("2" (expand "extend") (("2" (prop) (("1" (lemma "minus_rat_is_rat") (("1" (inst -1 "s!1") nil nil)) nil) ("2" (lemma "minus_int_is_int") (("2" (inst -1 "s!1") (("2" (assert) nil nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "extend") (("2" (typepred "N!1") (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (skosimp*) (("2" (inst -2 "-x!1") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1930 1130 nil nil)) (glb_int 0 (glb_int-1 nil 3237052399 3307982520 ("" (lemma "lub_int") (("" (skosimp*) (("" (inst -1 "{i: int | I!1(-i)}" "-i!1") (("1" (prop) (("1" (skosimp*) (("1" (grind :if-match nil) (("1" (inst 1 "-j!1") (("1" (prop) (("1" (skosimp*) (("1" (inst -1 "-s!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2) (("2" (typepred "s!1") (("2" (expand "extend") (("2" (assert) (("2" (prop) (("1" (assert) nil nil) ("2" (lemma "minus_rat_is_rat") (("2" (inst -1 "s!1") nil nil)) nil) ("3" (lemma "minus_int_is_int") (("3" (inst -1 "s!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -3 "-y!1") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "-s!1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3) (("2" (typepred "s!1") (("2" (expand "extend") (("2" (assert) (("2" (ground) (("1" (lemma "minus_rat_is_rat") (("1" (inst -1 "s!1") nil nil)) nil) ("2" (lemma "minus_int_is_int") (("2" (inst -1 "s!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind :if-match nil) (("2" (inst -4 "-s!1") (("1" (assert) nil nil) ("2" (hide -1 -2 -3 2) (("2" (typepred "s!1") (("2" (expand "extend") (("2" (ground) (("1" (lemma "minus_rat_is_rat") (("1" (inst -1 "s!1") nil nil)) nil) ("2" (lemma "minus_int_is_int") (("2" (inst -1 "s!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (typepred "I!1") (("2" (grind :if-match nil) (("2" (inst -3 "-x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1794 990 nil nil)))(floor_ceil (floor_exists 0 (floor_exists-1 nil 3237052399 3307982521 ("" (skosimp*) (("" (lemma "lub_int") (("" (lemma "axiom_of_archimedes") (("" (inst?) (("" (skosimp*) (("" (inst - "{i|i<=x!1}" "i!1") (("1" (prop) (("1" (expand "least_upper_bound?") (("1" (skolem-typepred) (("1" (inst?) (("1" (prop) (("1" (expand "upper_bound?") (("1" (inst - "j!1+1") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "upper_bound?") (("2" (skolem-typepred) (("2" (expand "extend") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite "nonempty_exists") (("2" (lemma "axiom_of_archimedes") (("2" (inst - "abs(x!1)") (("2" (skosimp*) (("2" (inst + "-i!2") (("2" (expand "abs") (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 979 790 nil nil)) (ceiling_exists 0 (ceiling_exists-1 nil 3237052399 3307982522 ("" (skosimp*) (("" (case "integer?(x!1)") (("1" (inst?) (("1" (assert) nil nil) ("2" (assert) (("2" (expand "integer?") (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (lemma "floor_exists") (("2" (inst?) (("2" (skosimp*) (("2" (inst + "i!1+1") (("2" (assert) (("2" (expand "integer?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 255 250 nil nil)) (floor_TCC1 0 (floor_TCC1-1 nil 3237052399 3307982522 ("" (inst + "lambda x: choose( {i: integer | i <= x & x < 1 + i})") (("" (expand "nonempty?") (("" (expand "empty?") (("" (expand "member") (("" (lemma "floor_exists") (("" (skosimp*) (("" (inst?) (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 595 520 nil nil)) (fractional_TCC1 0 (fractional_TCC1-1 nil 3237052399 3307982523 ("" (tcc) nil nil) proved nil 264 260 nil nil)) (ceiling_TCC1 0 (ceiling_TCC1-1 nil 3237052399 3307982523 ("" (inst + "lambda x: choose( {i: integer | x <= i & i < x + 1})") (("" (expand "nonempty?") (("" (expand "empty?") (("" (expand "member") (("" (lemma "ceiling_exists") (("" (skosimp*) (("" (inst - "x!1") (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 272 220 nil nil)) (floor_def 0 (floor_def-1 nil 3237052399 3307982524 ("" (grind) nil nil) proved nil 532 510 nil nil)) (ceiling_def 0 (ceiling_def-1 nil 3237052399 3307982524 ("" (grind) nil nil) proved nil 456 400 nil nil)) (floor_ceiling_reflect1 0 (floor_ceiling_reflect1-1 nil 3237052399 3307982524 ("" (grind) nil nil) proved nil 208 200 nil nil)) (floor_ceiling_reflect2 0 (floor_ceiling_reflect2-1 nil 3237052399 3307982524 ("" (grind) nil nil) proved nil 205 190 nil nil)) (nonneg_floor_is_nat 0 (nonneg_floor_is_nat-1 nil 3237052399 3307982525 ("" (subtype-tcc) nil nil) proved nil 83 70 nil nil)) (nonneg_ceiling_is_nat 0 (nonneg_ceiling_is_nat-1 nil 3237052399 3307982525 ("" (subtype-tcc) nil nil) proved nil 128 80 nil nil)) (floor_int 0 (floor_int-1 nil 3237052399 3307982525 ("" (grind) nil nil) proved nil 96 90 nil nil)) (ceiling_int 0 (ceiling_int-1 nil 3237052399 3307982525 ("" (grind) nil nil) proved nil 98 100 nil nil)) (floor_plus_int 0 (floor_plus_int-1 nil 3237052399 3307982526 ("" (skolem!) (("" (name "j!1" "floor(x!1+i!1)") (("" (name "k!1" "floor(x!1)") (("" (typepred "floor(i!1 + x!1)") (("" (typepred "floor(x!1)") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 1234 1000 nil nil)) (ceiling_plus_int 0 (ceiling_plus_int-1 nil 3237052399 3307982527 ("" (skolem!) (("" (lemma "ceiling_def") (("" (inst-cp - "x!1+i!1") (("" (flatten) (("" (name "j!1" "ceiling(x!1)") (("" (name "k!1" "ceiling(x!1+i!1)") (("" (replace -1) (("" (replace -2) (("" (inst - "x!1") (("" (replace -2) (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1007 840 nil nil)) (floor_ceiling_nonint 0 (floor_ceiling_nonint-1 nil 3237052399 3307982528 ("" (grind) nil nil) proved nil 348 300 nil nil)) (floor_ceiling_int 0 (floor_ceiling_int-1 nil 3237052399 3307982528 ("" (grind) nil nil) proved nil 129 120 nil nil)) (floor_neg 0 (floor_neg-1 nil 3237052399 3307982528 ("" (skosimp*) (("" (lift-if) (("" (prop) (("1" (rewrite "floor_int") (("1" (rewrite "floor_int") (("1" (assert) nil nil) ("2" (rewrite "closed_neg") (("1" (assert) (("1" (expand "integer?") (("1" (flatten) (("1" (rewrite "closed_neg") nil nil)) nil)) nil)) nil) ("2" (expand "integer?") (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (expand "integer?") (("2" (propax) nil nil)) nil)) nil) ("2" (expand "integer?") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 700 370 nil nil)) (real_parts 0 (real_parts-1 nil 3237052399 3307982529 ("" (expand "fractional") (("" (propax) nil nil)) nil) proved nil 153 120 nil nil)) (floor_plus 0 (floor_plus-2 "" 3237078783 3307982531 ("" (skosimp) (("" (expand "fractional") (("" (lemma "floor_plus_int") (("" (inst -1 "-1 * floor(x!1) - floor(y!1)" "x!1 + y!1") (("" (replace -1) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 2152 1450 t shostak) (floor_plus-1 nil 3237052399 3237078567 ("" (skolem!) (("" (expand "fractional") (("" (assert) nil nil)) nil)) nil) proved nil 690739 197480 nil nil)) (ceiling_plus 0 (ceiling_plus-1 nil 3237052399 3307982533 ("" (skolem!) (("" (expand "fractional") (("" (lemma "ceiling_plus_int") (("" (inst-cp -1 "-floor(x!1) - floor(y!1)" "x!1 + y!1") (("" (replace -2) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 1729 1600 nil nil)) (floor_split 0 (floor_split-1 nil 3237052399 3307982533 ("" (grind) nil nil) proved nil 766 670 nil nil)) (floor_within_1 0 (floor_within_1-1 nil 3237052399 3307982534 ("" (grind) nil nil) proved nil 244 220 nil nil)) (ceiling_within_1 0 (ceiling_within_1-1 nil 3237052399 3307982534 ("" (grind) nil nil) proved nil 267 210 nil nil)) (floor_val 0 (floor_val-2 "" 3299954653 3307982536 ("" (grind :if-match nil) (("" (typepred "floor(i!1/j!1)") (("" (case "j!1 > 0") (("1" (case "i!1/j!1 >= k!1" "i!1/j!1 < k!1 + 1") (("1" (name-replace "q" "i!1/j!1") (("1" (hide -3 -6 -7 -8 -9 1) (("1" (assert) (("1" (assert :flush? t) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide -1 -2 -3 -4 -5 -6 -7 2 3) (("2" (assert) (("2" (use "div_mult_pos_lt1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (hide -1 -2 -3 -4 -5 -7 2 3) (("3" (use "div_mult_pos_ge1") (("3" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved nil 1613 1400 t shostak) (floor_val-1 nil 3237052399 3299952727 ("" (grind :if-match nil) (("" (typepred "floor(i!1/j!1)") (("" (case "j!1 > 0") (("1" (case "i!1/j!1 >= k!1" "i!1/j!1 < k!1 + 1") (("1" (name-replace "q" "i!1/j!1") (("1" (hide -3 -6 -7 -8 -9 1) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (hide -1 -2 -3 -4 -5 -6 -7 2 3) (("2" (assert) (("2" (use "div_mult_pos_lt1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (hide -1 -2 -3 -4 -5 -7 2 3) (("3" (use "div_mult_pos_ge1") (("3" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved nil 1258 1180 nil nil)) (floor_small 0 (floor_small-1 nil 3237052399 3307982538 ("" (skosimp) (("" (lift-if) (("" (prop) (("1" (case "i!1/j!1 < 1") (("1" (assert) nil nil) ("2" (hide 2) (("2" (case "(j!1 - i!1)/j!1 > 0") (("1" (assert) nil nil) ("2" (grind) (("1" (use "pos_div_gt") (("1" (assert) nil nil)) nil) ("2" (use "pos_div_gt") (("2" (assert) nil nil)) nil) ("3" (use "pos_div_gt") (("3" (assert) nil nil)) nil) ("4" (use "pos_div_gt") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "floor(i!1/j!1)") (("2" (case "i!1/j!1 >= -1") (("1" (assert) nil nil) ("2" (hide -1 -2 2 3) (("2" (case "(i!1 + j!1)/j!1 >= 0") (("1" (assert) nil nil) ("2" (hide 2) (("2" (grind :if-match nil) (("1" (use "pos_div_ge") (("1" (assert) nil nil)) nil) ("2" (use "pos_div_ge") (("2" (assert) nil nil)) nil) ("3" (use "pos_div_ge") (("3" (assert) nil nil)) nil) ("4" (use "pos_div_ge") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2325 2060 nil nil)) (floor_eq_0 0 (floor_eq_0-1 nil 3237052399 3307982539 ("" (skosimp) (("" (typepred "floor(x!1)") (("" (assert) nil nil)) nil)) nil) proved nil 888 480 nil nil)) (fractional_plus 0 (fractional_plus-1 nil 3307951383 3307982542 ("" (skosimp*) (("" (lemma "floor_plus" ("x" "x!1" "y" "y!1")) (("" (expand "fractional" 1 1) (("" (replace -1 1) (("" (lemma "real_parts" ("x" "fractional(x!1) + fractional(y!1)")) (("" (hide -2) (("" (lemma "real_parts" ("x" "x!1")) (("" (lemma "real_parts" ("x" "y!1")) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2730 2030 t shostak)) (floor_div 0 (floor_div-1 nil 3307951426 3307982544 ("" (skosimp*) (("" (lemma "floor_def" ("x" "x!1/py!1")) (("" (flatten -1) (("" (split 1) (("1" (assert) (("1" (flatten) (("1" (replace -1) (("1" (rewrite "div_mult_pos_le2" -2) (("1" (rewrite "div_mult_pos_lt1" -3) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (lemma "trich_lt" ("x" "floor(x!1 / py!1)" "y" "i!1")) (("2" (rewrite "div_mult_pos_le2" -4) (("2" (rewrite "div_mult_pos_lt1" -5) (("2" (split -1) (("1" (lemma "both_sides_times_pos_le1" ("y" "i!1" "x" "floor(x!1 / py!1)+1" "pz" "py!1")) (("1" (assert) nil nil)) nil) ("2" (propax) nil nil) ("3" (lemma "both_sides_times_pos_le1" ("x" "i!1+1" "y" "floor(x!1 / py!1)" "pz" "py!1")) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2422 1580 t shostak)) (floor_0 0 (floor_0-1 nil 3307951470 3307982545 ("" (skosimp*) (("" (lemma "floor_div" ("x" "x!1" "py" "1" "i" "0")) (("" (replace -1 1) (("" (assert) nil nil)) nil)) nil)) nil) proved nil 735 610 t shostak)))(exponentiation (expt_TCC1 0 (expt_TCC1-1 nil 3237052399 3307982545 ("" (grind) nil nil) proved nil 135 130 nil nil)) (expt_TCC2 0 (expt_TCC2-1 nil 3237052399 3307982545 ("" (grind) nil nil) proved nil 45 40 nil nil)) (expt_pos_aux 0 (expt_pos_aux-1 nil 3237052399 3307982545 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (rewrite "pos_times_gt") nil nil)) nil)) nil)) nil)) nil) proved nil 184 130 nil nil)) (expt_nonzero_aux 0 (expt_nonzero_aux-1 nil 3237052399 3307982545 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" -2) (("2" (inst?) (("2" (rewrite "zero_times3") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 248 130 nil nil)) (nnreal_expt 0 (nnreal_expt-1 nil 3237052399 3307982546 ("" (induct "n") (("1" (skosimp) (("1" (expand "expt") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst -1 "x!1") (("2" (assert) (("2" (lemma "pos_times_ge") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 408 320 nil nil)) (posreal_expt 0 (posreal_expt-1 nil 3237052399 3307982546 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (inst -1 "x!1") (("2" (expand "expt" +) (("2" (assert) (("2" (lemma "pos_times_gt") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 420 360 nil nil)) (nzreal_expt 0 (nzreal_expt-1 nil 3237052399 3307982547 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" -2) (("2" (inst -1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 356 290 nil nil)) (rat_expt 0 (rat_expt-1 nil 3237052399 3307982547 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (inst -1 "x!1") (("2" (expand "expt" +) (("2" (lemma "rat_times_rat_is_rat") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 608 470 nil nil)) (nnrat_expt 0 (nnrat_expt-1 nil 3237052399 3307982547 ("" (subtype-tcc) nil nil) proved nil 154 140 nil nil)) (posrat_expt 0 (posrat_expt-1 nil 3237052399 3307982548 ("" (subtype-tcc) nil nil) proved nil 198 150 nil nil)) (int_expt 0 (int_expt-1 nil 3237052399 3307982549 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (inst -1 "x!1") (("2" (expand "expt" +) (("2" (lemma "int_times_int_is_int") (("2" (inst -1 "x!1" "expt(x!1, j!1)") nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 951 510 nil nil)) (nat_expt 0 (nat_expt-1 nil 3237052399 3307982549 ("" (subtype-tcc) nil nil) proved nil 269 260 nil nil)) (posnat_expt 0 (posnat_expt-1 nil 3237052399 3307982550 ("" (subtype-tcc) nil nil) proved nil 618 260 nil nil)) (caret_TCC1 0 (caret_TCC1-1 nil 3237052399 3307982550 ("" (grind) nil nil) proved nil 810 400 nil nil)) (caret_TCC2 0 (caret_TCC2-1 nil 3237052399 3307982551 ("" (skolem!) (("" (typepred "i!1") (("" (rewrite "expt_nonzero_aux") nil nil)) nil)) nil) proved nil 374 360 nil nil)) (expt_pos_TCC1 0 (expt_pos_TCC1-1 nil 3237052399 3307982551 ("" (tcc :defs !) nil nil) proved nil 249 230 nil nil)) (expt_pos 0 (expt_pos-1 nil 3237052399 3307982551 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (rewrite "expt_pos_aux") nil nil) ("2" (rewrite "quotient_pos_gt") (("2" (rewrite "expt_pos_aux") nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 452 380 nil nil)) (expt_nonzero_TCC1 0 (expt_nonzero_TCC1-1 nil 3237052399 3307982552 ("" (grind) nil nil) proved nil 256 240 nil nil)) (expt_nonzero 0 (expt_nonzero-1 nil 3237052399 3307982552 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (lemma "expt_nonzero_aux") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "inv_ne_0") (("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 634 530 nil nil)) (nnreal_exp 0 (nnreal_exp-1 nil 3237052399 3307982554 ("" (skolem-typepred) (("" (expand "^") (("" (lift-if) (("" (split 1) (("1" (flatten) (("1" (case-replace "x!1 = 0") (("1" (expand "expt") (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil) ("2" (use "expt_pos_aux") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (case-replace "x!1 = 0") (("1" (expand "expt") (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil) ("2" (use "expt_pos_aux") (("1" (lemma "quotient_pos_gt") (("1" (inst -1 "expt(x!1, -i!1)") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1520 1020 nil nil)) (posreal_exp 0 (posreal_exp-1 nil 3237052399 3307982555 ("" (skolem-typepred) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (use "expt_pos_aux") nil nil) ("2" (use "expt_pos_aux") (("1" (lemma "quotient_pos_gt") (("1" (inst -1 "expt(x!1, -i!1)") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 686 610 nil nil)) (nzreal_exp 0 (nzreal_exp-1 nil 3237052399 3307982556 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (lemma "nzreal_expt") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "nzreal_expt") (("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 965 570 nil nil)) (rat_exp 0 (rat_exp-1 nil 3237052399 3307982556 ("" (skolem-typepred) (("" (expand "^") (("" (propax) nil nil)) nil)) nil) proved nil 527 510 nil nil)) (nnrat_exp 0 (nnrat_exp-1 nil 3237052399 3307982557 ("" (subtype-tcc) nil nil) proved nil 869 340 nil nil)) (posrat_exp_TCC1 0 (posrat_exp_TCC1-1 nil 3237052399 3307982558 ("" (subtype-tcc) nil nil) proved nil 862 260 nil nil)) (posrat_exp 0 (posrat_exp-1 nil 3237052399 3307982559 ("" (subtype-tcc) nil nil) proved nil 1249 330 nil nil)) (int_exp_TCC1 0 (int_exp_TCC1-1 nil 3237052399 3307982560 ("" (subtype-tcc) nil nil) proved nil 605 290 nil nil)) (int_exp 0 (int_exp-1 nil 3237052399 3307982561 ("" (subtype-tcc) nil nil) proved nil 667 300 nil nil)) (nat_exp_TCC1 0 (nat_exp_TCC1-1 nil 3237052399 3307982561 ("" (subtype-tcc) nil nil) proved nil 713 290 nil nil)) (nat_exp 0 (nat_exp-1 nil 3237052399 3307982562 ("" (subtype-tcc) nil nil) proved nil 676 360 nil nil)) (posint_exp_TCC1 0 (posint_exp_TCC1-1 nil 3237052399 3307982563 ("" (subtype-tcc) nil nil) proved nil 741 310 nil nil)) (posint_exp 0 (posint_exp-1 nil 3237052399 3307982563 ("" (subtype-tcc) nil nil) proved nil 500 350 nil nil)) (expt_x0_aux 0 (expt_x0_aux-1 nil 3237052399 3307982564 ("" (tcc :defs !) nil nil) proved nil 484 340 nil nil)) (expt_x1_aux 0 (expt_x1_aux-1 nil 3237052399 3307982564 ("" (tcc :defs !) nil nil) proved nil 431 330 nil nil)) (expt_1n_aux 0 (expt_1n_aux-1 nil 3237052399 3307982565 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (assert) nil nil)) nil)) nil)) nil) proved nil 1254 630 nil nil)) (increasing_expt_aux 0 (increasing_expt_aux-1 nil 3237052399 3307982568 ("" (induct "m") (("1" (skosimp*) (("1" (expand "expt") (("1" (expand "expt") (("1" (expand "expt") (("1" (lemma "both_sides_times_pos_gt1") (("1" (inst -1 "gt1x!1" "gt1x!1" "1") (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (expand "expt" 1) (("2" (lemma "div_mult_pos_gt1") (("2" (inst -1 "gt1x!1" "expt(gt1x!1, j!1 + 2)" "gt1x!1") (("2" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2250 1440 nil nil)) (decreasing_expt_aux 0 (decreasing_expt_aux-1 nil 3237052399 3307982570 ("" (induct "m") (("1" (skosimp) (("1" (expand "expt") (("1" (expand "expt") (("1" (expand "expt") (("1" (lemma "div_mult_pos_lt2") (("1" (inst -1 "lt1x!1" "lt1x!1" "lt1x!1") (("1" (prop) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (expand "expt" +) (("2" (lemma "div_mult_pos_gt2") (("2" (inst -1 "lt1x!1" "expt(lt1x!1, 2 + j!1)" "lt1x!1") (("2" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2612 1480 nil nil)) (expt_1_aux 0 (expt_1_aux-1 nil 3237052399 3307982572 ("" (induct "n") (("1" (skosimp*) (("1" (prop) (("1" (expand "expt") (("1" (expand "expt") (("1" (propax) nil nil)) nil)) nil) ("2" (expand "expt") (("2" (expand "expt") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (inst -1 "px!1") (("2" (expand "expt" +) (("2" (ground) (("2" (case "j!1 = 0") (("1" (replace -1) (("1" (expand "expt") (("1" (expand "expt") (("1" (assert) (("1" (rewrite "sqrt_1") nil nil)) nil)) nil)) nil)) nil) ("2" (case "px!1 > 1") (("1" (lemma "increasing_expt_aux") (("1" (inst -1 "px!1" "j!1-1") (("1" (assert) (("1" (lemma "eq1_gt") (("1" (inst -1 "px!1" "expt(px!1, 1 + j!1)") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (lemma "decreasing_expt_aux") (("2" (inst -1 "px!1" "j!1-1") (("1" (lemma "eq1_gt") (("1" (inst -1 "1/px!1" "1/expt(px!1, 1 + j!1)") (("1" (assert) (("1" (split) (("1" (rewrite "div_mult_pos_lt1") nil nil) ("2" (assert) (("2" (rewrite "div_mult_pos_gt2") nil nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2142 1450 t nil)) (expt_plus_aux 0 (expt_plus_aux-1 nil 3237052399 3307982575 ("" (induct "n") (("1" (skosimp*) (("1" (expand "expt" 1 3) (("1" (propax) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "expt" 1 3) (("2" (expand "expt" 1 1) (("2" (inst -1 "m!1" "n0x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 2157 1090 nil nil)) (expt_minus_aux_TCC1 0 (expt_minus_aux_TCC1-1 nil 3237052399 3307982576 ("" (tcc :defs !) nil nil) proved nil 982 480 nil nil)) (expt_minus_aux 0 (expt_minus_aux-1 nil 3237052399 3307982578 ("" (induct "m") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (case "j!1 + 1 = n!1") (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (expand "expt" 2 1) (("2" (expand "expt" 2 2) (("2" (assert) (("2" (inst?) (("2" (assert) (("2" (replace -1) (("2" (rewrite "times_div1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil) proved nil 1902 1440 nil nil)) (expt_times_aux 0 (expt_times_aux-1 nil 3237052399 3307982580 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" 1 2) (("2" (expand "expt" 1 1) (("2" (lift-if) (("2" (inst -1 "m!1" "n0x!1") (("2" (replace -1 :dir rl) (("2" (prop) (("1" (assert) (("1" (case "m!1 = 0") (("1" (replace -1) (("1" (grind) nil nil)) nil) ("2" (case "j!1 = 0") (("1" (assert) nil nil) ("2" (lemma "posreal_mult_closed") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (case "m!1 = 0") (("1" (grind) nil nil) ("2" (case "j!1 = 0") (("1" (replace -1) (("1" (expand "expt" 3 3) (("1" (expand "expt" 3 2) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (lemma "expt_plus_aux") (("2" (inst -1 "m!1" "m!1 * j!1" "n0x!1") (("2" (replace -1 :dir rl) (("2" (expand "expt" 3 2) (("2" (lift-if) (("2" (assert) (("2" (assert) (("2" (prop) (("2" (lemma "zero_times3") (("2" (inst -1 "m!1" "j!1 + 1") (("2" (replace -2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2317 1540 nil nil)) (expt_divide_aux 0 (expt_divide_aux-1 nil 3237052399 3307982582 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" 1 2) (("2" (inst?) (("2" (replace -1 :dir rl) (("2" (case "expt(n0x!1, j!1 * m!1 + m!1) = expt(n0x!1, m!1) * expt(n0x!1, m!1 * j!1)") (("1" (assert) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (rewrite "expt_plus_aux") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2066 1500 t nil)) (both_sides_expt1_aux 0 (both_sides_expt1_aux-1 nil 3237052399 3307982585 ("" (induct "m") (("1" (skosimp) (("1" (expand "expt") (("1" (expand "expt" 1 1) (("1" (ground) (("1" (case "px!1 > 1") (("1" (lemma "increasing_expt_aux") (("1" (inst -1 "px!1" "n!1-1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "decreasing_expt_aux") (("2" (inst -1 "px!1" "n!1-1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand "expt") (("2" (propax) nil nil)) nil) ("3" (replace -1) (("3" (rewrite "expt_1n_aux") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (expand "expt" 1 1) (("2" (expand "expt" 1 2) (("2" (case "n!1 = 0") (("1" (replace -1) (("1" (ground) (("1" (expand "expt" -1 2) (("1" (case "px!1 >1") (("1" (lemma "increasing_expt_aux") (("1" (inst -1 "px!1" "j!1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "decreasing_expt_aux") (("2" (inst -1 "px!1" "j!1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (rewrite "expt_1n_aux") (("2" (rewrite "expt_1n_aux") nil nil)) nil)) nil)) nil)) nil) ("2" (ground) (("1" (inst -2 "n!1-1" "px!1") (("1" (assert) (("1" (rewrite "both_sides_times2") nil nil)) nil)) nil) ("2" (replace -1) (("2" (rewrite "expt_1n_aux") (("2" (rewrite "expt_1n_aux") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 3231 1600 nil nil)) (both_sides_expt2_aux 0 (both_sides_expt2_aux-1 nil 3237052399 3307982588 ("" (induct "pm") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (skosimp) (("3" (skosimp) (("3" (split) (("1" (expand "expt" +) (("1" (inst -1 "px!1" "py!1") (("1" (ground) (("1" (hide 1) (("1" (hide -2) (("1" (case "FORALL (m:nat), (px, py: posreal): px > py IMPLIES expt(px,m+1) > expt(py, m+1)") (("1" (case "px!1>py!1") (("1" (inst -2 "j!1-1" "px!1" "py!1") (("1" (assert) (("1" (lemma "gt_times_gt_pos1") (("1" (inst -1 "expt(py!1, j!1)" "py!1" "px!1" "expt(px!1, j!1)") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (expand "expt" +) (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (inst -1 "j!1-1" "py!1" "px!1") (("1" (assert) (("1" (lemma "gt_times_gt_pos1") (("1" (inst -1 "expt(px!1, j!1)" "px!1" "py!1" "expt(py!1, j!1)") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (expand "expt" +) (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide -1 2 3) (("2" (induct "m") (("1" (skosimp*) (("1" (expand "expt") (("1" (expand "expt") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (assert) (("2" (expand "expt" +) (("2" (rewrite "gt_times_gt_pos1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "expt") (("2" (expand "expt") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2827 1470 nil nil)) (both_sides_expt_pos_lt_aux 0 (both_sides_expt_pos_lt_aux-1 nil 3237052399 3307982590 ("" (induct "m") (("1" (skosimp) (("1" (expand "expt") (("1" (expand "expt") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -1 "px!1" "py!1") (("2" (expand "expt" 1) (("2" (ground) (("1" (rewrite "lt_times_lt_pos1") nil nil) ("2" (lemma "ge_times_ge_pos") (("2" (inst -1 "expt(py!1, 1 + j!1)" "py!1" "px!1" "expt(px!1, 1 + j!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1839 1130 nil nil)) (both_sides_expt_gt1_lt_aux 0 (both_sides_expt_gt1_lt_aux-1 nil 3237052399 3307982592 ("" (induct "m") (("1" (skosimp*) (("1" (expand "expt") (("1" (expand "expt" 1 1) (("1" (ground) (("1" (expand "expt") (("1" (assert) nil nil)) nil) ("2" (lemma "increasing_expt_aux") (("2" (inst -1 "gt1x!1" "n!1 - 1") (("2" (expand "expt" -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (ground) (("1" (case "n!1 = 0") (("1" (replace -1) (("1" (expand "expt" -2 2) (("1" (lemma "increasing_expt_aux") (("1" (inst -1 "gt1x!1" "j!1") (("1" (expand "expt" -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst -2 "gt1x!1" "n!1-1") (("1" (ground) (("1" (rewrite "both_sides_times_pos_lt2") nil nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (inst -2 "gt1x!1" "n!1-1") (("2" (assert) (("2" (rewrite "both_sides_times_pos_lt2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1998 1440 nil nil)) (both_sides_expt_lt1_lt_aux 0 (both_sides_expt_lt1_lt_aux-1 nil 3237052399 3307982594 ("" (induct "m") (("1" (skosimp*) (("1" (expand "expt" 1 1) (("1" (expand "expt" -1 1) (("1" (ground) (("1" (lemma "decreasing_expt_aux") (("1" (inst -1 "lt1x!1" "n!1-1") (("1" (assert) nil nil) ("2" (expand "expt") (("2" (expand "expt") (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst -1 "lt1x!1" "n!1 - 1") (("1" (ground) (("1" (rewrite "both_sides_times_pos_lt2") nil nil) ("2" (rewrite "both_sides_times_pos_lt2") nil nil)) nil) ("2" (ground) (("2" (expand "expt" 1 2) (("2" (lemma "decreasing_expt_aux") (("2" (inst -1 "lt1x!1" "j!1") (("2" (expand "expt" -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1758 1490 nil nil)) (both_sides_expt_pos_le_aux 0 (both_sides_expt_pos_le_aux-1 nil 3237052399 3307982595 ("" (skosimp) (("" (ground) (("1" (lemma "both_sides_expt_pos_lt_aux") (("1" (inst -1 "m!1" "py!1" "px!1") (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "both_sides_expt_pos_lt_aux") (("2" (inst -1 "m!1" "py!1" "px!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 901 780 nil nil)) (both_sides_expt_gt1_le_aux 0 (both_sides_expt_gt1_le_aux-1 nil 3237052399 3307982596 ("" (skosimp) (("" (lemma "both_sides_expt_gt1_lt_aux") (("" (inst -1 "gt1x!1" "n!1" "m!1") (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil 969 910 nil nil)) (both_sides_expt_lt1_le_aux 0 (both_sides_expt_lt1_le_aux-1 nil 3237052399 3307982597 ("" (lemma "both_sides_expt_lt1_lt_aux") (("" (skosimp) (("" (inst -1 "lt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil 943 690 nil nil)) (both_sides_expt_pos_gt_aux 0 (both_sides_expt_pos_gt_aux-1 nil 3237052399 3307982598 ("" (lemma "both_sides_expt_pos_lt_aux") (("" (skosimp) (("" (inst -1 "m!1" "py!1" "px!1") (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil 874 780 nil nil)) (both_sides_expt_gt1_gt_aux 0 (both_sides_expt_gt1_gt_aux-1 nil 3237052399 3307982598 ("" (lemma "both_sides_expt_gt1_lt_aux") (("" (skosimp) (("" (inst -1 "gt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil 846 700 nil nil)) (both_sides_expt_lt1_gt_aux 0 (both_sides_expt_lt1_gt_aux-1 nil 3237052399 3307982600 ("" (lemma "both_sides_expt_lt1_lt_aux") (("" (skosimp) (("" (inst -1 "lt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil 1627 730 nil nil)) (both_sides_expt_pos_ge_aux 0 (both_sides_expt_pos_ge_aux-1 nil 3237052399 3307982602 ("" (lemma "both_sides_expt_pos_le_aux") (("" (skosimp) (("" (inst -1 "m!1" "py!1" "px!1") (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil 2305 820 nil nil)) (both_sides_expt_gt1_ge_aux 0 (both_sides_expt_gt1_ge_aux-1 nil 3237052399 3307982603 ("" (lemma "both_sides_expt_gt1_le_aux") (("" (skosimp) (("" (inst -1 "gt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil 774 710 nil nil)) (both_sides_expt_lt1_ge_aux 0 (both_sides_expt_lt1_ge_aux-1 nil 3237052399 3307982604 ("" (lemma "both_sides_expt_lt1_le_aux") (("" (skosimp) (("" (inst -1 "lt1x!1" "n!1" "m!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil 796 710 nil nil)) (expt_of_mult 0 (expt_of_mult-1 nil 3237052399 3307982605 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 800 710 nil nil)) (expt_of_div 0 (expt_of_div-1 nil 3237052399 3307982606 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 801 720 nil nil)) (expt_of_inv 0 (expt_of_inv-1 nil 3237052399 3307982607 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 1037 750 nil nil)) (expt_of_abs 0 (expt_of_abs-1 nil 3237052399 3307982609 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) (("2" (replace -1 :hide? t) (("2" (grind) (("1" (use "neg_times_lt") (("1" (assert) nil nil)) nil) ("2" (use "pos_times_lt") (("2" (assert) nil nil)) nil) ("3" (use "pos_times_lt") (("3" (assert) nil nil)) nil) ("4" (use "neg_times_lt") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2266 1700 t nil)) (abs_of_expt_inv 0 (abs_of_expt_inv-1 nil 3237052399 3307982612 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "expt" +) (("2" (inst?) (("2" (assert) (("2" (lemma "div_times") (("2" (inst -1 "abs(n0x!1)" "expt(abs(n0x!1), j!1)" "1" "1") (("2" (replace -1 :dir rl) (("2" (replace -2 :dir rl) (("2" (hide -1 -2) (("2" (grind) (("1" (lemma "quotient_neg_lt") (("1" (inst-cp -1 "n0x!1 * expt(n0x!1, j!1)") (("1" (inst -1 "expt(n0x!1, j!1)") (("1" (assert) (("1" (hide -3 -5) (("1" (lemma "negreal_times_negreal_is_posreal") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "quotient_neg_lt") (("2" (inst-cp -1 "expt(n0x!1, j!1)") (("2" (inst -1 "n0x!1 * expt(n0x!1, j!1)") (("2" (assert) (("2" (hide -2 3) (("2" (lemma "nnreal_times_nnreal_is_nnreal") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (lemma "quotient_neg_lt") (("3" (inst-cp -1 "expt(n0x!1, j!1)") (("3" (inst -1 "n0x!1 * expt(n0x!1, j!1)") (("3" (assert) (("3" (hide 3 4) (("3" (lemma "posreal_mult_closed") (("3" (inst -1 "-n0x!1" "expt(n0x!1, j!1)") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (lemma "quotient_neg_lt") (("4" (inst-cp -1 "expt(n0x!1, j!1)") (("4" (inst -1 "n0x!1 * expt(n0x!1, j!1)") (("4" (assert) (("4" (hide -2 2) (("4" (lemma "posreal_mult_closed") (("4" (inst -1 "n0x!1" "-expt(n0x!1, j!1)") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 3360 2390 nil nil)) (expt_x0_TCC1 0 (expt_x0_TCC1-1 nil 3237052399 3307982613 ("" (grind) nil nil) proved nil 363 340 nil nil)) (expt_x0 0 (expt_x0-1 nil 3237052399 3307982613 ("" (grind) nil nil) proved nil 404 340 nil nil)) (expt_x1_TCC1 0 (expt_x1_TCC1-1 nil 3237052399 3307982614 ("" (tcc :defs !) nil nil) proved nil 356 340 nil nil)) (expt_x1 0 (expt_x1-1 nil 3237052399 3307982614 ("" (grind) nil nil) proved nil 440 340 nil nil)) (expt_x2_TCC1 0 (expt_x2_TCC1-1 nil 3307950059 3307982614 ("" (subtype-tcc) nil nil) proved nil 394 350 nil shostak)) (expt_x2 0 (expt_x2-1 nil 3307951594 3307982615 ("" (grind) nil nil) proved nil 356 350 t shostak)) (expt_x3_TCC1 0 (expt_x3_TCC1-1 nil 3307950060 3307982615 ("" (subtype-tcc) nil nil) proved nil 483 370 nil shostak)) (expt_x3 0 (expt_x3-1 nil 3307951600 3307982616 ("" (grind) nil nil) proved nil 1106 450 t shostak)) (expt_x4_TCC1 0 (expt_x4_TCC1-1 nil 3307950060 3307982617 ("" (subtype-tcc) nil nil) proved nil 924 360 nil shostak)) (expt_x4 0 (expt_x4-1 nil 3307951604 3307982618 ("" (grind) nil nil) proved nil 924 460 t shostak)) (expt_1i 0 (expt_1i-1 nil 3237052399 3307982619 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (prop) (("1" (rewrite "expt_1n_aux") nil nil) ("2" (rewrite "expt_1n_aux") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 725 560 nil nil)) (expt_eq_0_TCC1 0 (expt_eq_0_TCC1-1 nil 3307950060 3307982620 ("" (subtype-tcc) nil nil) proved nil 685 350 nil shostak)) (expt_eq_0 0 (expt_eq_0-1 nil 3307951654 3307982622 ("" (induct "pn") (("1" (skosimp*) (("1" (grind) nil nil)) nil) ("2" (flatten) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (case "j!1 = 0") (("1" (replace -1) (("1" (assert) (("1" (expand "^") (("1" (expand "expt") (("1" (expand "expt") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case-replace "x!1 ^ (1 + j!1) = x!1*x!1^j!1") (("1" (hide -1) (("1" (inst?) (("1" (ground) (("1" (rewrite "nonzero_times1") nil nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2321 1600 t shostak)) (expt_plus_TCC1 0 (expt_plus_TCC1-1 nil 3237052399 3307982623 ("" (tcc :defs !) nil nil) proved nil 391 350 nil nil)) (expt_plus 0 (expt_plus-1 nil 3237052399 3307982625 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (lift-if) (("" (lift-if) (("" (prop) (("1" (rewrite "expt_plus_aux") nil nil) ("2" (assert) nil nil) ("3" (lemma "expt_minus_aux") (("3" (inst -1 "j!1" "-i!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("4" (lemma "cross_mult") (("4" (inst -1 "expt(n0x!1, -(i!1 + j!1))" "expt(n0x!1, -i!1)" "1" "expt(n0x!1, j!1)") (("1" (flatten) (("1" (hide -1) (("1" (replace 2) (("1" (lemma "expt_plus_aux") (("1" (inst -1 "j!1" "-(i!1 + j!1)" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("5" (lemma "expt_minus_aux") (("5" (inst -1 "i!1" "-j!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("6" (assert) (("6" (lemma "cross_mult") (("6" (inst -1 "expt(n0x!1, -(i!1 + j!1))" "expt(n0x!1, -j!1)" "1" "expt(n0x!1, i!1)") (("6" (flatten) (("6" (hide -1) (("6" (split) (("1" (assert) nil nil) ("2" (hide 3) (("2" (lemma "expt_plus_aux") (("2" (inst -1 "i!1" "-(i!1 + j!1)" "n0x!1") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("7" (assert) nil nil) ("8" (case "expt(n0x!1, -(i!1 + j!1)) = expt(n0x!1, -i!1) * expt(n0x!1, -j!1)") (("1" (assert) (("1" (replace -1) (("1" (lemma "div_times") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (lemma "expt_plus_aux") (("2" (inst -1 "-i!1" "-j!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil) ("3" (assert) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2856 2000 nil nil)) (expt_times_TCC1 0 (expt_times_TCC1-1 nil 3237052399 3307982626 ("" (tcc :defs !) nil nil) proved nil 880 380 nil nil)) (expt_times 0 (expt_times-2 "Needed a :flush? t for some reason" 3299952478 3307982630 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (lift-if) (("" (prop) (("1" (rewrite "expt_times_aux") nil nil) ("2" (assert) (("2" (rewrite "pos_times_ge") nil nil)) nil) ("3" (rewrite "pos_times_ge") (("3" (assert) (("3" (grind) nil nil)) nil)) nil) ("4" (lemma "expt_divide_aux") (("4" (inst -1 "-i!1" "j!1" "n0x!1") (("1" (assert) (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("5" (lemma "pos_times_ge") (("5" (inst?) (("5" (assert) (("5" (grind) (("5" (lemma "expt_1n_aux") (("5" (inst?) (("1" (assert) nil nil) ("2" (hide 2) (("2" (assert) (("2" (assert :flush? t) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("6" (case "expt(n0x!1, -(i!1 * j!1)) = expt(expt(n0x!1, i!1), -j!1)") (("1" (assert) nil nil) ("2" (hide 3) (("2" (lemma "expt_times_aux") (("2" (inst -1 "i!1" "-j!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("3" (assert) nil nil) ("4" (propax) nil nil) ("5" (assert) nil nil)) nil) ("7" (lemma "expt_divide_aux") (("7" (inst -1 "-i!1" "-j!1" "n0x!1") (("1" (replace -1 :dir rl) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("8" (lemma "pos_times_ge") (("8" (inst?) (("8" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 4117 1780 t shostak) (expt_times-1 nil 3237052399 3299951941 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (lift-if) (("" (prop) (("1" (rewrite "expt_times_aux") nil nil) ("2" (assert) (("2" (rewrite "pos_times_ge") nil nil)) nil) ("3" (rewrite "pos_times_ge") (("3" (assert) (("3" (grind) nil nil)) nil)) nil) ("4" (lemma "expt_divide_aux") (("4" (inst -1 "-i!1" "j!1" "n0x!1") (("1" (assert) (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("5" (lemma "pos_times_ge") (("5" (inst?) (("5" (assert) (("5" (grind) (("5" (rewrite "expt_1n_aux") (("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("6" (case "expt(n0x!1, -(i!1 * j!1)) = expt(expt(n0x!1, i!1), -j!1)") (("1" (assert) nil nil) ("2" (hide 3) (("2" (lemma "expt_times_aux") (("2" (inst -1 "i!1" "-j!1" "n0x!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("3" (assert) nil nil) ("4" (propax) nil nil) ("5" (assert) nil nil)) nil) ("7" (lemma "expt_divide_aux") (("7" (inst -1 "-i!1" "-j!1" "n0x!1") (("1" (replace -1 :dir rl) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("8" (lemma "pos_times_ge") (("8" (inst?) (("8" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 101723 78680 t nil)) (expt_inverse_TCC1 0 (expt_inverse_TCC1-1 nil 3237052399 3307982631 ("" (grind) nil nil) proved nil 366 350 nil nil)) (expt_inverse 0 (expt_inverse-1 nil 3237052399 3307982632 ("" (skosimp*) (("" (expand "^") (("" (lift-if) (("" (lift-if) (("" (prop) (("1" (grind) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 1154 730 nil nil)) (expt_div_TCC1 0 (expt_div_TCC1-1 nil 3237052399 3307982633 ("" (subtype-tcc) nil nil) proved nil 509 400 nil nil)) (expt_div 0 (expt_div-1 nil 3237052399 3307982634 ("" (skosimp) (("" (lemma "expt_inverse") (("" (inst -1 "j!1" "n0x!1") (("" (lemma "expt_plus") (("" (inst -1 "i!1" "-j!1" "n0x!1") (("" (assert) (("" (replace -1) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 970 840 nil nil)) (both_sides_expt1_TCC1 0 (both_sides_expt1_TCC1-1 nil 3237052399 3307982634 ("" (tcc :defs explicit) nil nil) proved nil 434 350 nil nil)) (both_sides_expt1 0 (both_sides_expt1-1 nil 3237052399 3307982638 ("" (lemma "both_sides_expt1_aux") (("" (skosimp) (("" (expand "^") (("" (lift-if) (("" (split) (("1" (flatten) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (inst -3 "n0i!1 - 1" "n0j!1 - 1" "px!1") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (ground) (("1" (lemma "div_cancel3") (("1" (inst -1 "expt(px!1, -n0j!1)" "1" "expt(px!1, n0i!1)") (("1" (prop) (("1" (hide -1 -3) (("1" (rewrite "expt_plus_aux" :dir rl) (("1" (lemma "expt_1_aux") (("1" (inst -1 "-n0j!1 + n0i!1 - 1" "px!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (rewrite "expt_1n_aux") (("2" (rewrite "expt_1n_aux") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (prop) (("1" (lemma "div_cancel3") (("1" (inst -1 "expt(px!1, -n0i!1)" "1" "expt(px!1, n0j!1)") (("1" (prop) (("1" (hide -1 -3) (("1" (rewrite "expt_plus_aux" :dir rl) (("1" (lemma "expt_1_aux") (("1" (inst -1 "n0j!1 - n0i!1 - 1" "px!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (expand "expt" 1) (("2" (assert) nil nil)) nil) ("3" (replace -1) (("3" (rewrite "expt_1n_aux") (("3" (rewrite "expt_1n_aux") (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (rewrite "cross_mult") (("4" (inst -2 "-n0j!1-1" "-n0i!1-1" "px!1") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("5" (replace -1) (("5" (propax) nil nil)) nil) ("6" (replace -1) (("6" (rewrite "expt_1n_aux") (("6" (rewrite "expt_1n_aux") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 3648 2320 nil nil)) (both_sides_expt2 0 (both_sides_expt2-1 nil 3237052399 3307982640 ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt2_aux") (("" (lift-if) (("" (prop) (("1" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("3" (inst -2 "-n0i!1" "px!1" "py!1") (("1" (assert) (("1" (rewrite "cross_mult") nil nil)) nil) ("2" (assert) nil nil)) nil) ("4" (inst -2 "-n0i!1" "px!1" "py!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2237 850 nil nil)) (pos_expt_gt_TCC1 0 (pos_expt_gt_TCC1-1 nil 3237052399 3307982640 ("" (subtype-tcc) nil nil) proved nil 364 340 nil nil)) (pos_expt_gt 0 (pos_expt_gt-1 nil 3237052399 3307982643 ("" (induct "n") (("1" (skosimp) (("1" (rewrite "expt_x0") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (rewrite "expt_plus") (("2" (rewrite "expt_x1") (("2" (inst?) (("2" (case "FORALL (a, b, c, d: nat): a < c & b < d => a + b < c * d") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "c") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (assert) (("2" (case "a!1 = 0") (("1" (assert) nil nil) ("2" (inst -1 "a!1-1" "b!2" "d!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2259 1650 nil nil)) (expt_ge1 0 (expt_ge1-1 nil 3237052399 3307982645 ("" (induct-and-rewrite "n" 1 "expt_plus" "expt_x0" "expt_x1") (("" (lemma "ge_times_ge_pos") (("" (inst?) (("" (inst - "1" "1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 2037 1290 nil nil)) (both_sides_expt_pos_lt_TCC1 0 (both_sides_expt_pos_lt_TCC1-1 nil 3237052399 3307982645 ("" (tcc :defs explicit) nil nil) proved nil 372 360 nil nil)) (both_sides_expt_pos_lt 0 (both_sides_expt_pos_lt-1 nil 3237052399 3307982646 ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt_pos_lt_aux") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 658 580 nil nil)) (both_sides_expt_gt1_lt_TCC1 0 (both_sides_expt_gt1_lt_TCC1-1 nil 3237052399 3307982646 ("" (tcc :defs explicit) nil nil) proved nil 440 340 nil nil)) (both_sides_expt_gt1_lt 0 (both_sides_expt_gt1_lt-2 "" 3299962553 3307982649 ("" (skosimp*) (("" (ground) (("1" (case "j!1<=i!1") (("1" (case "gt1x!1 ^ j!1 <= gt1x!1 ^ i!1") (("1" (assert) nil nil) ("2" (hide -2 2) (("2" (case "forall (n:nat): gt1x!1^j!1<=gt1x!1^(j!1+n)") (("1" (inst - "i!1-j!1") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst -1 "1" "j!1 + j!2" "gt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "le_times_le_pos") (("2" (inst - "1" "gt1x!1 ^ j!1" "gt1x!1 ^ (j!1 + j!2)" "gt1x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "forall (n:nat): gt1x!1^i!1<gt1x!1^(1+i!1+n)") (("1" (inst - "j!1-(i!1+1)") (("1" (assert) nil nil) ("2" (assert) (("2" (assert :flush? t) nil nil)) nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) (("1" (rewrite "expt_plus") (("1" (rewrite "expt_x1") (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst - "gt1x!1 ^ i!1" "1" "gt1x!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst - "1" "(1 + i!1 + j!2)" "gt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "lt_times_lt_pos1") (("2" (inst - "gt1x!1^i!1" "1" "gt1x!1^(1+i!1+j!2)" "gt1x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 3210 2480 t shostak) (both_sides_expt_gt1_lt-1 nil 3237052399 3299952789 ("" (skosimp*) (("" (ground) (("1" (case "j!1<=i!1") (("1" (case "gt1x!1 ^ j!1 <= gt1x!1 ^ i!1") (("1" (assert) nil nil) ("2" (hide -2 2) (("2" (case "forall (n:nat): gt1x!1^j!1<=gt1x!1^(j!1+n)") (("1" (inst - "i!1-j!1") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst -1 "1" "j!1 + j!2" "gt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "le_times_le_pos") (("2" (inst - "1" "gt1x!1 ^ j!1" "gt1x!1 ^ (j!1 + j!2)" "gt1x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "forall (n:nat): gt1x!1^i!1<gt1x!1^(1+i!1+n)") (("1" (inst - "j!1-(i!1+1)") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) (("1" (rewrite "expt_plus") (("1" (rewrite "expt_x1") (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst - "gt1x!1 ^ i!1" "1" "gt1x!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst - "1" "(1 + i!1 + j!2)" "gt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "lt_times_lt_pos1") (("2" (inst - "gt1x!1^i!1" "1" "gt1x!1^(1+i!1+j!2)" "gt1x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1965 1840 nil nil)) (both_sides_expt_lt1_lt_TCC1 0 (both_sides_expt_lt1_lt_TCC1-1 nil 3237052399 3307982650 ("" (tcc :defs explicit) nil nil) proved nil 635 360 nil nil)) (both_sides_expt_lt1_lt 0 (both_sides_expt_lt1_lt-2 "" 3299962626 3307982653 ("" (skosimp*) (("" (ground) (("1" (case "FORALL (n:nat): lt1x!1^(i!1+n) <= lt1x!1^i!1") (("1" (inst -1 "j!1-i!1") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst - "1" "i!1 + j!2" "lt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "le_times_le_pos") (("2" (inst - "lt1x!1" "lt1x!1^(i!1+j!2)" "lt1x!1^i!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "FORALL (n:nat): lt1x!1^(j!1+n+1) < lt1x!1^j!1") (("1" (inst -1 "i!1 -j!1 -1") (("1" (assert) nil nil) ("2" (assert) (("2" (assert :flush? t) nil nil)) nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) (("1" (rewrite "expt_plus") (("1" (rewrite "expt_x1") (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst -1 "lt1x!1 ^ j!1" "lt1x!1" "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst -1 "1" "1 + j!1 + j!2" "lt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "lt_times_lt_pos1") (("2" (inst -1 "lt1x!1 ^ (j!1 + j!2 + 1)" "lt1x!1" "lt1x!1 ^ j!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 3328 2560 t shostak) (both_sides_expt_lt1_lt-1 nil 3237052399 3299952792 ("" (skosimp*) (("" (ground) (("1" (case "FORALL (n:nat): lt1x!1^(i!1+n) <= lt1x!1^i!1") (("1" (inst -1 "j!1-i!1") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst - "1" "i!1 + j!2" "lt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "le_times_le_pos") (("2" (inst - "lt1x!1" "lt1x!1^(i!1+j!2)" "lt1x!1^i!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "FORALL (n:nat): lt1x!1^(j!1+n+1) < lt1x!1^j!1") (("1" (inst -1 "i!1 -j!1 -1") (("1" (assert) nil nil)) nil) ("2" (hide -1 2) (("2" (induct "n") (("1" (assert) (("1" (rewrite "expt_plus") (("1" (rewrite "expt_x1") (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst -1 "lt1x!1 ^ j!1" "lt1x!1" "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (lemma "expt_plus") (("2" (inst -1 "1" "1 + j!1 + j!2" "lt1x!1") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "expt_x1") (("2" (lemma "lt_times_lt_pos1") (("2" (inst -1 "lt1x!1 ^ (j!1 + j!2 + 1)" "lt1x!1" "lt1x!1 ^ j!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2061 1930 nil nil)) (both_sides_expt_pos_le 0 (both_sides_expt_pos_le-1 nil 3237052399 3307982654 ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt_pos_le_aux") (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil 850 620 nil nil)) (both_sides_expt_gt1_le 0 (both_sides_expt_gt1_le-1 nil 3237052399 3307982655 ("" (skosimp*) (("" (case "i!1 = j!1") (("1" (assert) nil nil) ("2" (lemma "both_sides_expt_gt1_lt") (("2" (inst -1 "gt1x!1" "j!1" "i!1") (("2" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil 765 610 nil nil)) (both_sides_expt_lt1_le 0 (both_sides_expt_lt1_le-1 nil 3237052399 3307982656 ("" (skosimp*) (("" (lemma "both_sides_expt_lt1_lt") (("" (inst -1 "j!1" "i!1" "lt1x!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil 673 590 nil nil)) (both_sides_expt_pos_gt 0 (both_sides_expt_pos_gt-1 nil 3237052399 3307982657 ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt_pos_gt_aux") (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil 867 620 nil nil)) (both_sides_expt_gt1_gt 0 (both_sides_expt_gt1_gt-1 nil 3237052399 3307982657 ("" (skosimp*) (("" (lemma "both_sides_expt_gt1_lt") (("" (inst -1 "gt1x!1" "j!1" "i!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil 615 590 nil nil)) (both_sides_expt_lt1_gt 0 (both_sides_expt_lt1_gt-1 nil 3237052399 3307982658 ("" (skosimp*) (("" (lemma "both_sides_expt_lt1_lt") (("" (inst -1 "j!1" "i!1" "lt1x!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil 773 620 nil nil)) (both_sides_expt_pos_ge 0 (both_sides_expt_pos_ge-1 nil 3237052399 3307982659 ("" (skosimp) (("" (expand "^") (("" (lemma "both_sides_expt_pos_ge_aux") (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil 897 610 nil nil)) (both_sides_expt_gt1_ge 0 (both_sides_expt_gt1_ge-1 nil 3237052399 3307982660 ("" (skosimp*) (("" (lemma "both_sides_expt_gt1_le") (("" (inst -1 "gt1x!1" "j!1" "i!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil 1063 600 nil nil)) (both_sides_expt_lt1_ge 0 (both_sides_expt_lt1_ge-1 nil 3237052399 3307982661 ("" (skosimp*) (("" (lemma "both_sides_expt_lt1_le") (("" (inst -1 "j!1" "i!1" "lt1x!1") (("" (ground) nil nil)) nil)) nil)) nil) proved nil 677 620 nil nil)) (expt_gt1_pos_TCC1 0 (expt_gt1_pos_TCC1-1 nil 3237052399 3307982661 ("" (subtype-tcc) nil nil) proved nil 590 360 nil nil)) (expt_gt1_pos 0 (expt_gt1_pos-1 nil 3237052399 3307982663 ("" (induct "pm") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (skosimp*) (("3" (split) (("1" (rewrite "expt_plus") (("1" (rewrite "expt_x1") (("1" (inst?) (("1" (lemma "both_sides_times_pos_ge1") (("1" (inst -1 "gt1x!1" "gt1x!1 ^ j!1" "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "^") (("2" (expand "expt") (("2" (expand "expt") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1672 1430 nil nil)) (expt_gt1_neg_TCC1 0 (expt_gt1_neg_TCC1-1 nil 3237052399 3307982663 ("" (subtype-tcc) nil nil) proved nil 409 350 nil nil)) (expt_gt1_neg 0 (expt_gt1_neg-1 nil 3237052399 3307982665 ("" (skosimp) (("" (case "gt1x!1^(-pm!1) * gt1x!1^pm!1 < gt1x!1^pm!1") (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst -1 "gt1x!1 ^ pm!1" "gt1x!1 ^ (-pm!1)" "1") (("1" (assert) nil nil)) nil)) nil) ("2" (rewrite "expt_plus" :dir rl) (("2" (hide 2) (("2" (lemma "expt_gt1_pos") (("2" (inst -1 "gt1x!1" "pm!1") (("2" (assert) (("2" (expand "^" 1 1) (("2" (expand "expt") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1533 1410 nil nil)) (expt_gt1_nonpos_TCC1 0 (expt_gt1_nonpos_TCC1-1 nil 3237052399 3307982665 ("" (subtype-tcc) nil nil) proved nil 352 340 nil nil)) (expt_gt1_nonpos 0 (expt_gt1_nonpos-1 nil 3237052399 3307982666 ("" (skosimp) (("" (case "m!1 = 0") (("1" (grind) nil nil) ("2" (lemma "expt_gt1_neg") (("2" (inst -1 "gt1x!1" "m!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 961 750 nil nil)) (mult_expt_TCC1 0 (mult_expt_TCC1-1 nil 3237052399 3307982667 ("" (subtype-tcc) nil nil) proved nil 370 340 nil nil)) (mult_expt 0 (mult_expt-1 nil 3237052399 3307982668 ("" (skosimp) (("" (expand "^") (("" (lift-if) (("" (lemma "expt_of_mult") (("" (prop) (("1" (inst?) nil nil) ("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 950 790 nil nil)) (div_expt_TCC1 0 (div_expt_TCC1-1 nil 3237052399 3307982668 ("" (subtype-tcc) nil nil) proved nil 354 330 nil nil)) (div_expt 0 (div_expt-1 nil 3237052399 3307982669 ("" (skosimp) (("" (expand "^") (("" (lemma "expt_of_div") (("" (lift-if) (("" (prop) (("1" (inst?) nil nil) ("2" (inst?) (("1" (assert) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1156 770 t nil)) (inv_expt 0 (inv_expt-1 nil 3237052399 3307982670 ("" (skosimp) (("" (expand "^") (("" (lift-if) (("" (lemma "expt_of_inv") (("" (prop) (("1" (inst?) nil nil) ("2" (inst?) (("1" (assert) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 984 680 t nil)) (abs_expt_TCC1 0 (abs_expt_TCC1-1 nil 3237052399 3307982671 ("" (subtype-tcc) nil nil) proved nil 465 420 nil nil)) (abs_expt 0 (abs_expt-1 nil 3237052399 3307982673 ("" (skosimp) (("" (expand "^") (("" (lift-if) (("" (lemma "expt_of_abs") (("" (prop) (("1" (instantiate -2 ("i!1" "n0x!1")) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil) ("2" (inst?) (("1" (lemma "abs_div") (("1" (inst -1 "expt(n0x!1, -i!1)" "1") (("1" (replace -1) (("1" (expand "abs" 2 2) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1763 1310 nil nil)) (abs_hat_nat_TCC1 0 (abs_hat_nat_TCC1-1 nil 3307950061 3307982673 ("" (subtype-tcc) nil nil) proved nil 362 340 nil shostak)) (abs_hat_nat_TCC2 0 (abs_hat_nat_TCC2-1 nil 3307950061 3307982673 ("" (subtype-tcc) nil nil) proved nil 455 350 nil shostak)) (abs_hat_nat 0 (abs_hat_nat-1 nil 3307952457 3307982675 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "^") (("2" (expand "expt" +) (("2" (rewrite "abs_mult") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1309 1190 t shostak)) (expt_minus1_abs 0 (expt_minus1_abs-1 nil 3307952835 3307982676 ("" (skosimp*) (("" (case "i!1<0") (("1" (lemma "expt_inverse" ("n0x" "-1" "i" "-i!1")) (("1" (replace -1) (("1" (rewrite "abs_div" 1) (("1" (rewrite "abs_hat_nat" 1 :dir rl) (("1" (expand "abs" 1) (("1" (rewrite "expt_1i") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "abs_hat_nat" 2 :dir rl) (("2" (expand "abs") (("2" (rewrite "expt_1i" 2) nil nil)) nil)) nil)) nil)) nil) proved nil 1537 1300 t shostak)) (even_m1_pow 0 (even_m1_pow-1 nil 3307952866 3307982677 ("" (skosimp*) (("" (expand "even?") (("" (skosimp*) (("" (replace -1) (("" (lemma "expt_times" ("n0x" "-1" "i" "2" "j" "j!1")) (("" (replace -1) (("" (expand "^" 1 1) (("" (expand "expt") (("" (expand "expt") (("" (expand "expt") (("" (rewrite "expt_1i") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 534 490 t shostak)) (not_even_m1_pow 0 (not_even_m1_pow-1 nil 3307952902 3307982678 ("" (skosimp*) (("" (rewrite "even_or_odd") (("" (expand "odd?") (("" (skosimp*) (("" (replace -1) (("" (lemma "expt_plus" ("n0x" "-1" "i" "1" "j" "2*j!1")) (("" (replace -1) (("" (lemma "expt_times" ("n0x" "-1" "i" "2" "j" "j!1")) (("" (replace -1) (("" (expand "^" 1 2) (("" (expand "expt") (("" (expand "expt") (("" (expand "expt") (("" (rewrite "expt_x1") (("" (rewrite "expt_1i") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1510 1120 t shostak)) (expt_lt1_bound1 0 (expt_lt1_bound1-1 nil 3237052399 3307982681 ("" (induct-and-simplify "n") (("" (use "both_sides_times_pos_le2" ("pz" "lt1x!1")) (("" (assert) nil nil)) nil)) nil) proved nil 2554 1180 nil nil)) (expt_lt1_bound2 0 (expt_lt1_bound2-1 nil 3237052399 3307982682 ("" (skolem!) (("" (use "expt_lt1_bound1") (("" (use "expt_1_aux") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 1076 700 nil nil)) (expt_gt1_bound1 0 (expt_gt1_bound1-1 nil 3237052399 3307982683 ("" (skolem 1 ("a!1" _)) (("" (induct-and-simplify "n") (("" (lemma "both_sides_times_pos_le2") (("" (inst -1 "expt(a!1, j!1)" "1" "a!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 1269 1160 nil nil)) (expt_gt1_bound2 0 (expt_gt1_bound2-1 nil 3237052399 3307982685 ("" (skolem!) (("" (use "expt_gt1_bound1" ("n" "pn!1 - 1")) (("" (expand "expt" +) (("" (lemma "both_sides_times_pos_le1") (("" (assert) (("" (inst -1 "gt1x!1" "1" "expt(gt1x!1, pn!1-1)") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1320 1090 nil nil)) (large_expt 0 (large_expt-1 nil 3237052399 3307982687 ("" (skosimp) (("" (assert) (("" (auto-rewrite-theory "sets[real]") (("" (lemma "real_complete" ("S" "{x:real | EXISTS (n : nat) : x = expt(px!1, n)}")) (("1" (hide 1) (("1" (split -1) (("1" (skosimp*) (("1" (expand "least_upper_bound?") (("1" (flatten) (("1" (inst -2 "y!1/px!1") (("1" (case "y!1 > 0") (("1" (ground) (("1" (lemma "both_sides_div_pos_le2" ("px" "1" "py" "px!1" "pz" "y!1")) (("1" (assert) nil nil)) nil) ("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (inst - "s!1*px!1") (("1" (rewrite "div_mult_pos_le2") nil nil) ("2" (typepred "s!1") (("2" (skosimp*) (("2" (inst 1 "n!1+1") (("2" (expand "expt" +) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (delete -2) (("2" (expand "upper_bound?") (("2" (inst - "1") (("1" (assert) nil nil) ("2" (inst 1 "0") (("2" (expand "expt") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (reveal 1) (("2" (skolem!) (("2" (inst 2 "py!1") (("2" (expand "upper_bound?") (("2" (skosimp*) (("2" (typepred "s!1") (("2" (skosimp*) (("2" (inst 1 "n!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -1 "1") (("2" (inst 1 "0") (("2" (expand "expt") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2715 1620 nil nil)) (small_expt 0 (small_expt-1 nil 3237052399 3307982689 ("" (skosimp*) (("" (lemma "large_expt" ("px" "1/px!1")) (("" (rewrite "div_mult_pos_lt2") (("" (assert) (("" (inst -1 "1/py!1") (("" (skolem!) (("" (inst 1 "n!1") (("" (rewrite "expt_of_inv") (("" (rewrite "both_sides_div_pos_lt2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1248 890 nil nil)) (exponent_adjust_TCC1 0 (exponent_adjust_TCC1-1 nil 3237052399 3307982689 ("" (subtype-tcc) nil nil) proved nil 359 330 nil nil)) (exponent_adjust_TCC2 0 (exponent_adjust_TCC2-1 nil 3237052399 3307982690 ("" (subtype-tcc) nil nil) proved nil 918 390 nil nil)) (exponent_adjust_TCC3 0 (exponent_adjust_TCC3-1 nil 3237052399 3307982690 ("" (subtype-tcc) nil nil) proved nil 363 340 nil nil)) (exponent_adjust 0 (exponent_adjust-1 nil 3237052399 3307982692 ("" (skosimp*) (("" (lemma "both_sides_expt_gt1_lt") (("" (inst - "b!1" "i!1 - pm!1" "i!1") (("" (ground) (("" (rewrite "expt_plus") (("" (rewrite "expt_x1") (("" (lemma "both_sides_times_pos_le1") (("" (inst - "b!1 ^ i!1" "2" "b!1") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1816 1350 nil nil)) (exp_of_exists 0 (exp_of_exists-1 nil 3237052399 3307982695 ("" (skosimp*) (("" (lemma "lub_int") (("" (case "py!1<1") (("1" (inst - "{i|b!1^i<=py!1}" "-1") (("1" (prop) (("1" (expand "least_upper_bound?") (("1" (skosimp*) (("1" (hide -2) (("1" (inst + "j!1") (("1" (assert) (("1" (expand "upper_bound?") (("1" (inst - "j!1+1") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "upper_bound?") (("2" (skolem-typepred) (("2" (expand "extend") (("2" (case "s!1>=0") (("1" (lemma "expt_ge1") (("1" (inst?) (("1" (assert) nil nil) ("2" (assert) (("2" (prop) nil nil)) nil)) nil)) nil) ("2" (prop) (("2" (assert) (("2" (case "EXISTS (x:int): 0 > x & x > -1") (("1" (skosimp) (("1" (assert) nil nil)) nil) ("2" (inst 1 "s!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "nonempty_exists") (("2" (lemma "axiom_of_archimedes") (("2" (inst - "1/py!1") (("2" (skosimp*) (("2" (inst + "-i!1") (("2" (rewrite "expt_inverse") (("2" (rewrite "div_mult_pos_le1") (("2" (lemma "pos_expt_gt") (("2" (inst?) (("1" (rewrite "div_mult_pos_lt1") (("1" (lemma "both_sides_times_pos_lt2") (("1" (inst - "py!1" "i!1" "b!1^i!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "axiom_of_archimedes") (("2" (inst?) (("2" (skosimp*) (("2" (inst - "{i|b!1^i<=py!1}" "i!1") (("1" (prop) (("1" (expand "least_upper_bound?") (("1" (skosimp*) (("1" (hide -2) (("1" (inst + "j!1") (("1" (assert) (("1" (expand "upper_bound?") (("1" (inst - "j!1+1") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "upper_bound?") (("2" (skolem-typepred) (("2" (expand "extend") (("2" (prop) (("2" (lemma "pos_expt_gt") (("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "nonempty_exists") (("2" (inst + "0") (("2" (rewrite "expt_x0") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2825 2370 nil nil)))(euclidean_division (mod_TCC1 0 (mod_TCC1-1 nil 3237052399 3307982695 ("" (skolem-typepred) (("" (inst 1 "0") nil nil)) nil) proved nil 76 70 nil nil)) (euclid_nat 0 (euclid_nat-1 nil 3237052399 3307982697 ("" (skolem 1 (_ "b!1")) (("" (induct "a") (("1" (inst + "0" "0") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (case "r!1 = b!1-1") (("1" (inst + "q!1+1" "0") (("1" (assert) nil nil)) nil) ("2" (assert) (("2" (inst + "q!1" "r!1+1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1504 1210 nil nil)) (euclid_int 0 (euclid_int-1 nil 3237052399 3307982698 ("" (skolem!) (("" (case "n!1 >= 0") (("1" (use "euclid_nat" ("a" "n!1")) (("1" (skolem!) (("1" (inst?) nil nil)) nil)) nil) ("2" (assert) (("2" (use "euclid_nat" ("a" "- n!1")) (("2" (skolem!) (("2" (case "r!1 = 0") (("1" (inst + "-q!1" "0") (("1" (assert) nil nil)) nil) ("2" (inst + "- q!1 - 1" "b!1 - r!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1415 1230 nil nil)) (unique_quotient 0 (unique_quotient-2 "" 3299962695 3307982699 ("" (skosimp) (("" (assert) (("" (case "q1!1 > q2!1") (("1" (case "b!1 * (q1!1 - q2!1) = r2!1 - r1!1") (("1" (case "b!1 * (q1!1 - q2!1) >= b!1") (("1" (assert) nil nil) ("2" (lemma "both_sides_times_pos_ge2") (("2" (inst -1 "b!1" "q1!1 - q2!1" "1") (("2" (assert) (("2" (assert :flush? t) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "b!1 * (q2!1 - q1!1) = r1!1 - r2!1") (("1" (case "b!1 * (q2!1 - q1!1) >= b!1") (("1" (assert) nil nil) ("2" (lemma "both_sides_times_pos_ge2") (("2" (inst -1 "b!1" "q2!1 - q1!1" "1") (("2" (assert) (("2" (assert :flush? t) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 1117 900 t shostak) (unique_quotient-1 nil 3237052399 3299952825 ("" (skosimp) (("" (assert) (("" (case "q1!1 > q2!1") (("1" (case "b!1 * (q1!1 - q2!1) = r2!1 - r1!1") (("1" (case "b!1 * (q1!1 - q2!1) >= b!1") (("1" (assert) nil nil) ("2" (lemma "both_sides_times_pos_ge2") (("2" (inst -1 "b!1" "q1!1 - q2!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "b!1 * (q2!1 - q1!1) = r1!1 - r2!1") (("1" (case "b!1 * (q2!1 - q1!1) >= b!1") (("1" (assert) nil nil) ("2" (lemma "both_sides_times_pos_ge2") (("2" (inst -1 "b!1" "q2!1 - q1!1" "1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 858 780 nil nil)) (unique_remainder 0 (unique_remainder-1 nil 3237052399 3307982700 ("" (lemma "unique_quotient") (("" (skosimp) (("" (inst?) (("" (assert) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 1101 630 nil nil)) (unique_division 0 (unique_division-1 nil 3237052399 3307982702 ("" (lemma "unique_quotient") (("" (lemma "unique_remainder") (("" (skosimp) (("" (inst?) (("" (assert) (("" (inst -2 "b!1" "q1!1" "q2!1" "r1!1" "r2!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1632 1160 nil nil)))(divides (mult_divides1 0 (mult_divides1-1 nil 3237052399 3307982702 ("" (subtype-tcc) nil nil) proved nil 294 290 nil nil)) (mult_divides2 0 (mult_divides2-1 nil 3237052399 3307982703 ("" (skosimp) (("" (grind :if-match nil) (("" (inst 1 "n!1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 405 400 nil nil)) (divides_sum 0 (divides_sum-1 nil 3237052399 3307982704 ("" (skosimp) (("" (expand "divides") (("" (skosimp) (("" (skosimp) (("" (inst 1 "x!2 + x!3") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 1539 680 nil nil)) (divides_diff 0 (divides_diff-1 nil 3237052399 3307982705 ("" (skosimp) (("" (expand "divides") (("" (skosimp*) (("" (inst 1 "x!2 - x!3") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 698 650 nil nil)) (divides_opposite 0 (divides_opposite-1 nil 3237052399 3307982706 ("" (skosimp*) (("" (prop) (("1" (expand "divides") (("1" (skosimp*) (("1" (inst 1 "-x!2") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (expand "divides") (("2" (skosimp*) (("2" (inst 1 "-x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 690 640 nil nil)) (opposite_divides 0 (opposite_divides-1 nil 3237052399 3307982707 ("" (skosimp*) (("" (expand "divides") (("" (prop) (("1" (skosimp*) (("1" (inst 1 "-x!2") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst 1 "-x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 809 610 nil nil)) (divides_prod1 0 (divides_prod1-1 nil 3237052399 3307982707 ("" (skosimp*) (("" (expand "divides") (("" (skosimp*) (("" (inst 1 "x!2 * m!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 727 650 nil nil)) (divides_prod2 0 (divides_prod2-1 nil 3237052399 3307982708 ("" (skosimp*) (("" (expand "divides") (("" (skosimp*) (("" (inst 1 "x!2 * m!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 937 650 nil nil)) (divides_prod_elim1 0 (divides_prod_elim1-1 nil 3237052399 3307982711 ("" (skosimp*) (("" (expand "divides") (("" (prop) (("1" (skosimp*) (("1" (inst 1 "x!1") (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst 1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 2153 1420 nil nil)) (divides_prod_elim2 0 (divides_prod_elim2-1 nil 3237052399 3307982712 ("" (skosimp*) (("" (lemma "divides_prod_elim1") (("" (inst -1 "m!1" "n!1" "nz!1") (("" (replace -1) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 1099 690 nil nil)) (divides_reflexive 0 (divides_reflexive-1 nil 3237052399 3307982712 ("" (skosimp*) (("" (expand "divides") (("" (inst 1 "1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 617 440 nil nil)) (divides_transitive 0 (divides_transitive-1 nil 3237052399 3307982713 ("" (skosimp*) (("" (expand "divides") (("" (skosimp*) (("" (inst 1 "x!1 * x!2") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 794 660 nil nil)) (product_one 0 (product_one-2 "" 3299962800 3307982714 ("" (skosimp) (("" (split) (("1" (flatten) (("1" (lemma "eq1_gt") (("1" (lemma "pos_times_lt") (("1" (inst -1 "x!1" "y!1") (("1" (assert) (("1" (split -1) (("1" (flatten) (("1" (case "x!1 > 1") (("1" (inst -4 "x!1" "y!1") (("1" (assert) (("1" (assert :flush? t) nil nil)) nil)) nil) ("2" (case "y!1 > 1") (("1" (inst -4 "y!1" "x!1") (("1" (assert) (("1" (assert :flush? t) nil nil)) nil)) nil) ("2" (assert) (("2" (assert :flush? t) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (case "x!1 < -1") (("1" (inst -4 "-x!1" "-y!1") (("1" (assert) (("1" (assert :flush? t) nil nil)) nil)) nil) ("2" (case "y!1 < -1") (("1" (inst -4 "-y!1" "-x!1") (("1" (assert) (("1" (assert :flush? t) nil nil)) nil)) nil) ("2" (assert) (("2" (assert :flush? t) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (ground) nil nil)) nil)) nil) proved nil 784 670 t shostak) (product_one-1 nil 3237052399 3299952837 ("" (skosimp) (("" (split) (("1" (flatten) (("1" (lemma "eq1_gt") (("1" (lemma "pos_times_lt") (("1" (inst -1 "x!1" "y!1") (("1" (assert) (("1" (split -1) (("1" (flatten) (("1" (case "x!1 > 1") (("1" (inst -4 "x!1" "y!1") (("1" (assert) nil nil)) nil) ("2" (case "y!1 > 1") (("1" (inst -4 "y!1" "x!1") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (case "x!1 < -1") (("1" (inst -4 "-x!1" "-y!1") (("1" (assert) nil nil)) nil) ("2" (case "y!1 < -1") (("1" (inst -4 "-y!1" "-x!1") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (ground) nil nil)) nil)) nil) proved nil 892 700 nil nil)) (mutual_divisors 0 (mutual_divisors-1 nil 3237052399 3307982717 ("" (expand "divides") (("" (skosimp*) (("" (case "n!1 = 0") (("1" (assert) nil nil) ("2" (assert) (("2" (lemma "both_sides_times1" ("n0z" "n!1" "x" "x!1 * x!2" "y" "1")) (("2" (ground) (("2" (rewrite "product_one") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2564 1140 nil nil)) (mutual_divisors_nat 0 (mutual_divisors_nat-1 nil 3237052399 3307982717 ("" (skosimp) (("" (forward-chain "mutual_divisors") (("" (assert) nil nil)) nil)) nil) proved nil 390 370 nil nil)) (one_divides 0 (one_divides-1 nil 3237052399 3307982718 ("" (grind) nil nil) proved nil 782 650 nil nil)) (divides_zero 0 (divides_zero-1 nil 3237052399 3307982718 ("" (grind :if-match all) nil nil) proved nil 637 500 nil nil)) (zero_div_zero 0 (zero_div_zero-1 nil 3237052399 3307982719 ("" (grind :if-match all) nil nil) proved nil 696 630 nil nil)) (divisors_of_one 0 (divisors_of_one-1 nil 3237052399 3307982720 ("" (auto-rewrite "one_divides" "opposite_divides") (("" (reduce) (("" (expand "divides") (("" (skolem!) (("" (use "product_one") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 1130 660 nil nil)) (one_div_one 0 (one_div_one-1 nil 3237052399 3307982721 ("" (skolem!) (("" (rewrite "divisors_of_one") nil nil)) nil) proved nil 383 340 nil nil)) (divisor_smaller 0 (divisor_smaller-2 "" 3299962906 3307982722 ("" (expand "divides") (("" (skosimp*) (("" (assert) (("" (use "pos_times_lt") (("" (ground) (("" (use "both_sides_times_pos_le1" ("pz" "p!1" "x" "1" "y" "x!1")) (("" (assert) (("" (assert :flush? t) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1386 1020 t shostak) (divisor_smaller-1 nil 3237052399 3299952842 ("" (expand "divides") (("" (skosimp*) (("" (assert) (("" (use "pos_times_lt") (("" (ground) (("" (use "both_sides_times_pos_le1" ("pz" "p!1" "x" "1" "y" "x!1")) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1004 890 nil nil)) (divides_next 0 (divides_next-1 nil 3252309122 3307982723 ("" (skolem!) (("" (rewrite "divisors_of_one" :dir rl) (("" (expand "divides") (("" (prop) (("1" (skolem!) (("1" (inst + "x!1 - 1") (("1" (assert) nil nil)) nil)) nil) ("2" (skolem!) (("2" (inst + "x!1 + 1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 895 830 t shostak)) (divides_plus_1 0 (divides_plus_1-1 nil 3252309151 3307982724 ("" (skosimp) (("" (lemma "divides_diff") (("" (inst - "nz!1" "nz!1 + 1" "p1!1") (("" (assert) (("" (rewrite "divisors_of_one") nil nil)) nil)) nil)) nil)) nil) proved nil 633 530 t shostak)))(modulo_arithmetic (rem_TCC1 0 (rem_TCC1-1 nil 3237052399 3307982725 ("" (lemma "euclid_int") (("" (inst 1 "lambda (b: posnat): (lambda (x: int): (epsilon! (r: mod(b)): (EXISTS (q: int): x = r + b * q)))") (("" (skolem!) (("" (inst -1 "b!1" "x!1") (("" (skolem!) (("" (use "epsilon_ax[mod(b!1)]") (("" (prop) (("" (hide 2) (("" (inst 1 "r!1") (("" (inst 1 "q!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1424 1310 nil nil)) (rem_def 0 (rem_def-1 nil 3237052399 3307982729 ("" (skolem!) (("" (case "EXISTS q: x!1 = b!1 * q + rem(b!1)(x!1)") (("1" (ground) (("1" (skosimp*) (("1" (use "unique_remainder") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (delete 2) (("2" (typepred "rem(b!1)(x!1)") (("2" (skosimp) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 3587 2960 nil nil)) (rem_def2 0 (rem_def2-1 nil 3237052399 3307982731 ("" (skolem!) (("" (rewrite "rem_def") (("" (expand "divides") (("" (ground) (("1" (skolem!) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (skolem!) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1910 1300 nil nil)) (rem_def3 0 (rem_def3-1 nil 3237052399 3307982732 ("" (skolem!) (("" (rewrite "rem_def2") (("" (ground) (("1" (rewrite "divides_opposite" :dir rl) nil nil) ("2" (rewrite "divides_opposite" :dir rl) nil nil)) nil)) nil)) nil) proved nil 1216 720 nil nil)) (rem_mod 0 (rem_mod-1 nil 3237052399 3307982733 ("" (auto-rewrite "divides_zero") (("" (skolem!) (("" (rewrite "rem_def2") nil nil)) nil)) nil) proved nil 696 640 nil nil)) (rem_mod2 0 (rem_mod2-1 nil 3237052399 3307982733 ("" (skosimp) (("" (assert) (("" (rewrite "rem_mod") nil nil)) nil)) nil) proved nil 673 590 nil nil)) (rem_zero 0 (rem_zero-1 nil 3237052399 3307982734 ("" (auto-rewrite "divides_zero" "rem_def2") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved nil 679 570 nil nil)) (rem_self 0 (rem_self-1 nil 3237052399 3307982735 ("" (auto-rewrite "divides_reflexive" "rem_def2") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved nil 647 550 nil nil)) (rem_multiple1 0 (rem_multiple1-1 nil 3237052399 3307982735 ("" (auto-rewrite "divides_prod1" "divides_prod2" "divides_reflexive" "rem_def2") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved nil 686 650 nil nil)) (rem_multiple2 0 (rem_multiple2-1 nil 3237052399 3307982736 ("" (auto-rewrite "divides_prod1" "divides_prod2" "divides_reflexive" "rem_def2") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved nil 719 650 nil nil)) (rem_one 0 (rem_one-1 nil 3237052399 3307982737 ("" (skosimp) (("" (rewrite "rem_def") (("" (inst + "0") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 1033 820 nil nil)) (rem_minus_one 0 (rem_minus_one-1 nil 3237052399 3307982738 ("" (skolem!) (("" (rewrite "rem_def") (("" (inst + "-1") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 1260 980 nil nil)) (same_remainder 0 (same_remainder-1 nil 3237052399 3307982740 ("" (skolem!) (("" (name-replace "r!1" "rem(b!1)(y!1)" :hide? nil) (("" (rewrite "rem_def2") (("" (rewrite "rem_def2") (("" (ground) (("1" (use "divides_diff" ("n" "x!1 - r!1" "m" "y!1 - r!1")) (("1" (assert) nil nil)) nil) ("2" (use "divides_sum" ("n" "x!1 - y!1" "m" "y!1 - r!1")) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1544 1070 nil nil)) (rem_rem 0 (rem_rem-1 nil 3237052399 3307982741 ("" (skolem!) (("" (rewrite "same_remainder") (("" (name-replace "r!1" "rem(b!1)(x!1)" :hide? nil) (("" (rewrite "rem_def3") nil nil)) nil)) nil)) nil) proved nil 1259 940 nil nil)) (rem_sum 0 (rem_sum-1 nil 3237052399 3307982743 ("" (auto-rewrite "same_remainder") (("" (skosimp) (("" (assert) (("" (use "divides_sum" ("n" "x!1 - y!1" "m" "z!1 - t!1")) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 1552 1210 nil nil)) (rem_sum1 0 (rem_sum1-1 nil 3237052399 3307982744 ("" (skolem!) (("" (rewrite "same_remainder") (("" (rewrite "rem_def3" :dir rl) nil nil)) nil)) nil) proved nil 1309 1140 nil nil)) (rem_sum2 0 (rem_sum2-1 nil 3237052399 3307982747 ("" (skolem!) (("" (use "rem_sum1" ("x" "y!1" "y" "x!1")) (("" (assert) nil nil)) nil)) nil) proved nil 2765 2060 nil nil)) (rem_diff 0 (rem_diff-1 nil 3237052399 3307982749 ("" (auto-rewrite "same_remainder") (("" (skosimp) (("" (assert) (("" (use "divides_diff" ("n" "x!1 - y!1" "m" "z!1 - t!1")) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 1453 1120 nil nil)) (rem_diff1 0 (rem_diff1-1 nil 3237052399 3307982749 ("" (skolem!) (("" (rewrite "same_remainder") (("" (rewrite "rem_def3" :dir rl) nil nil)) nil)) nil) proved nil 895 810 nil nil)) (rem_diff2 0 (rem_diff2-1 nil 3237052399 3307982752 ("" (skolem!) (("" (rewrite "same_remainder") (("" (rewrite "rem_def2" :dir rl) nil nil)) nil)) nil) proved nil 2500 820 nil nil)) (rem_prod1 0 (rem_prod1-1 nil 3237052399 3307982754 ("" (skolem!) (("" (rewrite "same_remainder") (("" (use "divides_prod1" ("n" "rem(b!1)(x!1) - x!1" "m" "y!1")) (("" (assert) (("" (rewrite "rem_def3" :dir rl) nil nil)) nil)) nil)) nil)) nil) proved nil 1695 1490 nil nil)) (rem_prod2 0 (rem_prod2-1 nil 3237052399 3307982757 ("" (skolem!) (("" (use "rem_prod1" ("x" "y!1" "y" "x!1")) (("" (assert) nil nil)) nil)) nil) proved nil 3720 2220 nil nil)) (rem_prod 0 (rem_prod-1 nil 3237052399 3307982763 ("" (skosimp) (("" (auto-rewrite "rem_prod1" "rem_prod2") (("" (case "rem(b!1)(rem(b!1)(x!1) * rem(b!1)(z!1)) = rem(b!1)(y!1 * t!1)") (("1" (assert) nil nil) ("2" (replace*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 5599 4350 nil nil)) (rem_expt 0 (rem_expt-1 nil 3237052399 3307982765 ("" (skolem 1 ("b!1" _ "x!1" "y!1")) (("" (induct-and-simplify "n" :exclude "rem" :rewrites ("rem_prod")) nil nil)) nil) proved nil 2215 1710 nil nil)) (rem_expt1 0 (rem_expt1-1 nil 3237052399 3307982767 ("" (skolem!) (("" (rewrite "rem_expt") (("" (rewrite "rem_rem") nil nil)) nil)) nil) proved nil 1479 1050 nil nil)) (rem_sum_elim1 0 (rem_sum_elim1-1 nil 3237052399 3307982768 ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved nil 887 740 nil nil)) (rem_sum_elim2 0 (rem_sum_elim2-1 nil 3237052399 3307982769 ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved nil 1019 810 nil nil)) (rem_diff_elim1 0 (rem_diff_elim1-1 nil 3237052399 3307982770 ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) (("" (prop) (("1" (rewrite "divides_opposite" :dir rl) (("1" (assert) nil nil)) nil) ("2" (rewrite "divides_opposite" :dir rl) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 812 740 nil nil)) (rem_diff_elim2 0 (rem_diff_elim2-1 nil 3237052399 3307982771 ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) nil nil)) nil)) nil) proved nil 1188 660 nil nil)) (rem_opposite_elim 0 (rem_opposite_elim-1 nil 3237052399 3307982772 ("" (auto-rewrite "same_remainder") (("" (skolem!) (("" (assert) (("" (rewrite "divides_opposite" :dir rl) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil 1227 740 nil nil)) (ndiv_TCC1 0 (ndiv_TCC1-1 nil 3237052399 3307982774 ("" (inst 1 "lambda (d: [int, posnat]): (epsilon! (q: int): d`1 = rem(d`2)(d`1) + d`2 * q)") (("" (skolem!) (("" (use "epsilon_ax[int]") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 1911 1720 nil nil)) (ndiv_lt 0 (ndiv_lt-1 nil 3237052399 3307982777 ("" (skosimp*) (("" (typepred "ndiv(x!1, b!1)") (("" (case-replace "x!1 - rem(b!1)(x!1) = b!1 * ndiv(x!1, b!1)") (("1" (hide -2) (("1" (case "x!1/b!1 - rem(b!1)(x!1)/b!1 = ndiv(x!1, b!1)") (("1" (hide -2) (("1" (replace -1 * rl) (("1" (hide -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (lemma "both_sides_div1") (("2" (inst -1 "b!1" "x!1 - rem(b!1)(x!1)" "b!1 * ndiv(x!1, b!1)") (("2" (case-replace "b!1 * ndiv(x!1, b!1) / b!1 = ndiv(x!1, b!1)") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved nil 3206 2180 nil nil)) (ndiv_TCC2 0 (ndiv_TCC2-1 nil 3237052399 3307982782 ("" (skosimp*) (("" (lemma "ndiv_lt") (("" (inst?) (("" (case "n!1/b!1 <= n!1") (("1" (assert) (("1" (hide -1) (("1" (typepred "ndiv(n!1, b!1)") (("1" (case "n!1 < rem(b!1)(n!1)") (("1" (lemma "rem_mod2") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (case "b!1 * ndiv(n!1, b!1) >= 0") (("1" (lemma "both_sides_times_pos_ge1") (("1" (inst -1 "b!1" "ndiv(n!1, b!1)" "0") (("1" (replace -1 2 rl t) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide 2) (("2" (hide -1) (("2" (lemma "le_div_le_pos") (("2" (inst -1 "n!1" "1" "b!1" "n!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 4708 2530 nil nil)) (rem_floor 0 (rem_floor-1 nil 3252309244 3307982788 ("" (skolem!) (("" (lemma "rem_def" ("b" "b!1" "x" "x!1" "r" "x!1 - b!1 * floor(x!1 / b!1)")) (("1" (assert) (("1" (inst + "floor(x!1 / b!1)") (("1" (assert) nil nil)) nil)) nil) ("2" (typepred "floor(x!1 / b!1)") (("2" (split) (("1" (both-sides "*" "b!1" -1) (("1" (assert) nil nil)) nil) ("2" (both-sides "*" "b!1" -2) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 5607 3220 t shostak)) (rem_base 0 (rem_base-1 nil 3252309295 3307982797 ("" (skolem!) (("" (expand "divides") (("" (prop) (("1" (typepred "rem(b!1)(x!1)") (("1" (typepred "rem(b!1 + n!1)(x!1 + i!1)") (("1" (skosimp*) (("1" (inst + "q!1 - floor(x!1 / b!1)") (("1" (both-sides "+" "n!1 * floor(x!1 / b!1)") (("1" (assert) (("1" (lemma "commutative_mult") (("1" (inst - "floor(x!1 / b!1)" "n!1") (("1" (replace -1) (("1" (assert) (("1" (lemma "rem_floor") (("1" (inst - "b!1" "x!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (lemma "rem_def2") (("2" (inst - "b!1 + n!1" "i!1 + x!1" "rem(b!1)(x!1)") (("1" (assert) (("1" (expand "divides") (("1" (lemma "rem_floor") (("1" (inst - "b!1" "x!1") (("1" (inst + "x!2 + floor(x!1 / b!1)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 9211 7460 t shostak)) (rem_sum_floor 0 (rem_sum_floor-1 nil 3252309346 3307982806 ("" (skolem!) (("" (use "rem_def") (("1" (assert) (("1" (inst + "floor(x!1 / b!1) + floor((rem(b!1)(x!1) + i!1) / b!1)") (("1" (assert) (("1" (use "commutative_mult") (("1" (replace -1) (("1" (use "rem_floor") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "floor((rem(b!1)(x!1) + i!1) / b!1)") (("2" (split) (("1" (both-sides "*" "b!1" -1) (("1" (assert) nil nil)) nil) ("2" (both-sides "*" "b!1" -2) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 8859 6450 t shostak)) (rem_sum_assoc 0 (rem_sum_assoc-1 nil 3252309412 3307982811 ("" (skolem!) (("" (typepred "rem(b!1)(x!1 + n!1)") (("" (typepred "rem(b!1)(x!1)") (("" (skosimp*) (("" (ground) (("" (use "rem_def2") (("" (assert) (("" (use "rem_floor") (("" (both-sides "-" "rem(b!1)(x!1)" -1) (("" (assert) (("" (replace -1) (("" (expand "divides") (("" (inst + "floor(x!1 / b!1)") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 5807 4540 t shostak)) (rem_add_one 0 (rem_add_one-1 nil 3252309454 3307982814 ("" (skolem!) (("" (use "rem_sum_assoc") (("" (smash) (("" (lemma "rem_def") (("" (inst - "b!1" "x!1" "b!1 - 1") (("" (assert) (("" (skolem!) (("" (replace -1 3) (("" (assert) (("" (lemma "rem_multiple1") (("" (inst - "b!1" "q!1 + 1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2731 2130 t shostak)) (rem_wrap 0 (rem_wrap-1 nil 3252309504 3307982818 ("" (skolem!) (("" (prop) (("1" (use "rem_sum_floor") (("1" (assert) (("1" (lemma "floor_val") (("1" (inst - "rem(b!1)(x!1) + n!1" "b!1" "1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (use "rem_sum_assoc") (("3" (assert) nil nil)) nil)) nil)) nil) proved nil 3977 3440 t shostak)) (rem_wrap_eq 0 (rem_wrap_eq-1 nil 3252309534 3307982820 ("" (skolem!) (("" (use "rem_wrap") (("" (lemma "same_remainder") (("" (inst - "b!1" "n!1 + x!1" "x!1") (("" (smash) nil nil)) nil)) nil)) nil)) nil) proved nil 1991 1650 t shostak)))(subrange_inductions (subrange_induction_TCC1 0 (subrange_induction_TCC1-1 nil 3237052399 3307982820 ("" (assert) (("" (typepred "j") (("" (assert) nil nil)) nil)) nil) proved nil 78 40 nil nil)) (subrange_induction_TCC2 0 (subrange_induction_TCC2-1 nil 3237052399 3307982821 ("" (tcc :defs !) nil nil) proved nil 892 530 nil nil)) (subrange_induction 0 (subrange_induction-1 nil 3237052399 3307982823 ("" (lemma "nat_induction") (("" (skosimp*) (("" (inst -1 "lambda (n:nat): n <= j - i IMPLIES p!1(n+i)") (("1" (prop) (("1" (inst -1 "k!1 - i") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (skosimp*) (("3" (inst -4 "j!1 + i") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 1590 1170 nil nil)) (SUBRANGE_induction 0 (SUBRANGE_induction-1 nil 3237052399 3307982824 ("" (skosimp) (("" (skosimp) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): n <= j - i IMPLIES p!1(n+i)") (("1" (split) (("1" (inst -2 "k!1") (("1" (assert) (("1" (skosimp) (("1" (inst -1 "m!1-i") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -3 "j!1+i") (("1" (assert) (("1" (skosimp) (("1" (inst -1 "m!1-i") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 1052 890 nil nil)))(bounded_int_inductions (upfrom_induction_TCC1 0 (upfrom_induction_TCC1-1 nil 3237052399 3307982824 ("" (subtype-tcc) nil nil) proved nil 32 40 nil nil)) (upfrom_induction_TCC2 0 (upfrom_induction_TCC2-1 nil 3237052399 3307982824 ("" (subtype-tcc) nil nil) proved nil 43 40 nil nil)) (upfrom_induction 0 (upfrom_induction-2 "" 3299963135 3307982825 ("" (lemma "nat_induction") (("" (skosimp*) (("" (inst -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (prop) (("1" (inst -1 "jf!1-m") (("1" (assert) (("1" (assert :flush? t) (("1" (assert :quant-simp? t) nil nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (split) (("1" (inst -5 "j!1+m") (("1" (assert) nil nil)) nil) ("2" (inst 1 "j!1+m") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1125 1010 t shostak) (upfrom_induction-1 nil 3237052399 3299952924 ("" (lemma "nat_induction") (("" (skosimp*) (("" (inst -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (prop) (("1" (inst -1 "jf!1-m") (("1" (assert) nil nil)) nil) ("2" (hide -1) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (split) (("1" (inst -5 "j!1+m") (("1" (assert) nil nil)) nil) ("2" (inst 1 "j!1+m") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1226 880 nil nil)) (UPFROM_induction 0 (UPFROM_induction-2 "" 3299963189 3307982826 ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (prop) (("1" (inst -1 "jf!1-m") (("1" (split) (("1" (assert) nil nil) ("2" (inst 1 "jf!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -4 "j!1+m") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "kf!1-m") (("2" (assert :quant-simp? t) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 758 700 t shostak) (UPFROM_induction-1 nil 3237052399 3299952925 ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)") (("" (prop) (("1" (inst -1 "jf!1-m") (("1" (split) (("1" (assert) nil nil) ("2" (inst 1 "jf!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -4 "j!1+m") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "kf!1-m") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 831 630 nil nil)) (above_induction_TCC1 0 (above_induction_TCC1-1 nil 3237052399 3307982826 ("" (subtype-tcc) nil nil) proved nil 183 170 nil nil)) (above_induction_TCC2 0 (above_induction_TCC2-1 nil 3237052399 3307982827 ("" (subtype-tcc) nil nil) proved nil 398 360 nil nil)) (above_induction 0 (above_induction-2 "" 3299963282 3307982828 ("" (skosimp*) (("" (lemma "nat_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (prop) (("1" (inst -1 "ja!1-m") (("1" (assert) (("1" (assert :quant-simp? t) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (split) (("1" (inst -5 "j!1+m") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (inst 1 "j!1+m") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 1351 1020 t shostak) (above_induction-1 nil 3237052399 3299952927 ("" (skosimp*) (("" (lemma "nat_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (prop) (("1" (inst -1 "ja!1-m") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil) ("3" (skosimp*) (("3" (split) (("1" (inst -5 "j!1+m") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (inst 1 "j!1+m") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 1143 870 nil nil)) (ABOVE_induction 0 (ABOVE_induction-2 "" 3299963342 3307982829 ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (prop) (("1" (inst -1 "ja!1-m") (("1" (split) (("1" (assert) nil nil) ("2" (inst 1 "ja!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -4 "j!1+m") (("1" (assert) (("1" (skosimp*) (("1" (inst -1 "ka!1-m") (("1" (assert :quant-simp? t) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 1024 830 t shostak) (ABOVE_induction-1 nil 3237052399 3299952928 ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)") (("1" (prop) (("1" (inst -1 "ja!1-m") (("1" (split) (("1" (assert) nil nil) ("2" (inst 1 "ja!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -4 "j!1+m") (("1" (assert) (("1" (skosimp*) (("1" (inst -1 "ka!1-m") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 947 700 nil nil)))(bounded_nat_inductions (upto_induction_TCC1 0 (upto_induction_TCC1-1 nil 3237052399 3307982829 ("" (subtype-tcc) nil nil) proved nil 36 40 nil nil)) (upto_induction_TCC2 0 (upto_induction_TCC2-1 nil 3237052399 3307982830 ("" (subtype-tcc) nil nil) proved nil 640 530 nil nil)) (upto_induction 0 (upto_induction-1 nil 3237052399 3307982830 ("" (skosimp*) (("" (lemma "nat_induction") (("" (inst -1 "lambda (n:nat): n <= m IMPLIES pt!1(n)") (("" (prop) (("1" (inst -1 "jt!1") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (inst -4 "j!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 650 620 nil nil)) (UPTO_induction 0 (UPTO_induction-1 nil 3237052399 3307982831 ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): n <= m IMPLIES pt!1(n)") (("" (prop) (("1" (inst -1 "jt!1") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (inst -3 "j!1") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "kt!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 355 170 nil nil)) (below_induction_TCC1 0 (below_induction_TCC1-1 nil 3237052399 3307982831 ("" (subtype-tcc) nil nil) proved nil 115 40 nil nil)) (below_induction_TCC2 0 (below_induction_TCC2-1 nil 3237052399 3307982832 ("" (subtype-tcc) nil nil) proved nil 1005 570 nil nil)) (below_induction 0 (below_induction-1 nil 3237052399 3307982833 ("" (skosimp*) (("" (lemma "nat_induction") (("" (inst -1 "lambda (n:nat): n < m IMPLIES pb!1(n)") (("" (prop) (("1" (inst -2 "jb!1") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (skosimp*) (("4" (inst -4 "j!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("5" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 805 650 nil nil)) (BELOW_induction 0 (BELOW_induction-1 nil 3237052399 3307982833 ("" (skosimp*) (("" (lemma "NAT_induction") (("" (inst -1 "lambda (n:nat): n < m IMPLIES pb!1(n)") (("" (prop) (("1" (inst -1 "jb!1") (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (inst -3 "j!1") (("2" (assert) (("2" (skosimp*) (("2" (inst -1 "kb!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 227 180 nil nil)))(subrange_type)(int_types)(nat_types)(nat_fun_props (injection_n_to_m 0 (injection_n_to_m-1 nil 3242964223 3307982835 ("" (induct "n") (("1" (assert) nil nil) ("2" (skosimp*) (("2" (typepred "f!1(0)") (("2" (assert) (("2" (hide -1) (("2" (inst -1 "m!1 - 1") (("2" (assert) (("2" (delete 2) (("2" (inst 1 "LAMBDA (x : below[j!1]) : IF f!1(x) = m!1 - 1 THEN f!1(j!1) ELSE f!1(x) ENDIF") (("1" (expand "injective?") (("1" (skosimp) (("1" (lift-if) (("1" (lift-if) (("1" (inst-cp -2 "x1!1" "j!1") (("1" (inst-cp -2 "x2!1" "j!1") (("1" (inst -2 "x1!1" "x2!1") (("1" (assert) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (skosimp) (("3" (expand "injective?") (("3" (inst -2 "x!1" "j!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1769 1390 t shostak)) (injection_n_to_m_var 0 (injection_n_to_m_var-1 nil 3243223197 3307982835 ("" (skolem!) (("" (ground) (("1" (rewrite "injection_n_to_m") nil nil) ("2" (inst + "lambda (i: below(n!1)): i") (("2" (grind) nil nil)) nil)) nil)) nil) proved nil 251 240 t shostak)) (surjection_n_to_m 0 (surjection_n_to_m-1 nil 3242964294 3307982835 ("" (skosimp*) (("" (rewrite "injection_n_to_m") (("" (expand "surjective?") (("" (inst -1 "0") (("" (skosimp) (("" (assert) (("" (inst 1 "inverse(f!1)") (("1" (rewrite "inj_inv") (("1" (inst 1 "x!1") nil nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 322 250 t shostak)) (surjection_n_to_m_var 0 (surjection_n_to_m_var-1 nil 3243223295 3307982836 ("" (skolem!) (("" (apply (then (split) (flatten))) (("1" (forward-chain "surjection_n_to_m") (("1" (assert) (("1" (skosimp) (("1" (typepred "f!1(0)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (inst + "lambda (i: below(n!1)): IF i < m!1 THEN i ELSE 0 ENDIF") (("1" (grind) nil nil) ("2" (reduce) nil nil)) nil)) nil)) nil) proved nil 666 560 t shostak)) (bijection_n_to_m 0 (bijection_n_to_m-1 nil 3242964328 3307982837 ("" (skolem!) (("" (prop) (("1" (expand "bijective?") (("1" (skosimp) (("1" (lemma "injection_n_to_m" ("n" "n!1" "m" "m!1")) (("1" (lemma "surjection_n_to_m" ("n" "n!1" "m" "m!1")) (("1" (split) (("1" (assert) (("1" (inst?) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "LAMBDA (x : below[n!1]) : x") (("1" (grind) nil nil) ("2" (skolem!) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 690 440 t shostak)) (injection_n_to_m2 0 (injection_n_to_m2-1 nil 3243223324 3307982839 ("" (skolem!) (("" (ground) (("1" (lemma "injection_n_to_m" ("n" "n!1+1" "m" "m!1+1")) (("1" (assert) (("1" (skolem!) (("1" (inst + "lambda (i : below(1 + n!1)) : f!1(i)") (("1" (grind :if-match nil) (("1" (inst? :where +) (("1" (assert) nil nil)) nil)) nil) ("2" (skolem!) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "lambda (i : upto(n!1)): i") (("2" (grind) nil nil)) nil)) nil)) nil) proved nil 2054 1010 t shostak)) (surjection_n_to_m2 0 (surjection_n_to_m2-1 nil 3243223349 3307982841 ("" (skolem!) (("" (ground) (("1" (lemma "surjection_n_to_m" ("n" "n!1+1" "m" "m!1+1")) (("1" (assert) (("1" (skolem!) (("1" (inst + "lambda (i: below(1 + n!1)): f!1(i)") (("1" (grind :if-match nil) (("1" (inst? -) (("1" (skolem!) (("1" (inst?) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "lambda (i : upto(n!1)): IF i <= m!1 THEN i ELSE 0 ENDIF") (("2" (grind) nil nil)) nil)) nil)) nil) proved nil 1715 1100 t shostak)) (bijection_n_to_m2 0 (bijection_n_to_m2-1 nil 3243223474 3307982842 ("" (skolem!) (("" (ground) (("1" (expand "bijective?") (("1" (skosimp) (("1" (lemma "injection_n_to_m2" ("n" "n!1" "m" "m!1")) (("1" (lemma "surjection_n_to_m2" ("n" "n!1" "m" "m!1")) (("1" (ground) (("1" (inst?) nil nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "lambda (i : upto(n!1)): i") (("2" (grind) nil nil)) nil)) nil)) nil) proved nil 929 450 t shostak)) (surj_equiv_inj 0 (surj_equiv_inj-1 nil 3243223495 3307982845 ("" (skolem!) (("" (case "n!1 = 0") (("1" (grind) nil nil) ("2" (ground) (("1" (use "surjection_n_to_m" ("n" "n!1 - 1" "m" "n!1")) (("1" (assert) (("1" (expand* "surjective?" "injective?") (("1" (skosimp) (("1" (inst + "lambda (i : below(n!1 - 1)): IF i < x1!1 THEN f!1(i) ELSE f!1(i+1) ENDIF") (("1" (assert) (("1" (skolem!) (("1" (inst - "y!1") (("1" (skolem!) (("1" (case "x!1 = x1!1") (("1" (inst + "IF x2!1 < x!1 THEN x2!1 ELSE x2!1-1 ENDIF") (("1" (smash) nil nil) ("2" (ground) nil nil) ("3" (ground) nil nil)) nil) ("2" (inst + "IF x!1 < x1!1 THEN x!1 ELSE x!1 - 1 ENDIF") (("1" (smash) nil nil) ("2" (ground) nil nil) ("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "injection_n_to_m" ("n" "n!1" "m" "n!1-1")) (("2" (assert) (("2" (expand* "injective?" "surjective?") (("2" (skolem!) (("2" (inst + "lambda (i : below(n!1)) : IF f!1(i) = n!1 - 1 THEN y!1 ELSE f!1(i) ENDIF") (("1" (assert) (("1" (skosimp) (("1" (inst? - :where +) (("1" (smash) (("1" (inst + "x2!1") (("1" (assert) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (skosimp) (("3" (inst? +) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2929 2220 t shostak)) (inj_equiv_bij 0 (inj_equiv_bij-1 nil 3243223527 3307982845 ("" (skolem!) (("" (expand "bijective?") (("" (ground) (("" (rewrite "surj_equiv_inj") nil nil)) nil)) nil)) nil) proved nil 125 130 t shostak)) (surj_equiv_bij 0 (surj_equiv_bij-1 nil 3243223548 3307982845 ("" (skolem!) (("" (expand "bijective?") (("" (ground) (("" (rewrite "surj_equiv_inj") nil nil)) nil)) nil)) nil) proved nil 164 120 t shostak)) (surj_equiv_inj2 0 (surj_equiv_inj2-1 nil 3243223572 3307982847 ("" (skolem!) (("" (lemma "surj_equiv_inj" ("n" "n!1+1" "f" "lambda (i : below(n!1 + 1)): f!1(i)")) (("1" (expand* "surjective?" "injective?") (("1" (reduce :if-match nil) (("1" (inst? -4 :where +) (("1" (assert) nil nil)) nil) ("2" (inst? -2) (("2" (skolem!) (("2" (inst? +) nil nil)) nil)) nil) ("3" (inst - "y!1") (("3" (skolem!) (("3" (inst + "x!1") nil nil)) nil)) nil) ("4" (inst? - :where +) (("4" (assert) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (assert) nil nil)) nil)) nil)) nil) proved nil 2263 1900 t shostak)) (inj_equiv_bij2 0 (inj_equiv_bij2-1 nil 3243223596 3307982847 ("" (skolem!) (("" (expand "bijective?") (("" (ground) (("" (rewrite "surj_equiv_inj2") nil nil)) nil)) nil)) nil) proved nil 151 130 t shostak)) (surj_equiv_bij2 0 (surj_equiv_bij2-1 nil 3243223623 3307982848 ("" (skolem!) (("" (expand "bijective?") (("" (ground) (("" (rewrite "surj_equiv_inj2") nil nil)) nil)) nil)) nil) proved nil 167 110 t shostak)))(finite_sets (finite_set_TCC1 0 (finite_set_TCC1-1 nil 3243832506 3307982848 ("" (expand "is_finite") (("" (inst 1 "0" "LAMBDA (s: (emptyset[T])): 0") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) proved nil 252 170 t shostak)) (is_finite_surj 0 (is_finite_surj-1 nil 3243836561 3307982849 ("" (skosimp*) (("" (prop) (("1" (skosimp) (("1" (grind :if-match nil) (("1" (inst 1 "N!1" "lambda (x: (s!1)): epsilon! (n: below[N!1]): x = f!1(n)") (("1" (skosimp) (("1" (use "epsilon_ax[below[N!1]]" :if-match all) (("1" (prop) (("1" (grind) nil nil) ("2" (inst -2 "x1!1") (("2" (skosimp) (("2" (inst 1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (inst -2 "x2!1") (("3" (skosimp) (("3" (inst 1 "x!1") (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (inst -1 "x1!1") (("4" (skosimp) (("4" (inst 1 "x!1") (("4" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (inst -1 "x1!1") (("2" (skosimp) (("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil) ("2" (case "empty?(s!1)") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (case "empty?(s!1)") (("1" (expand "empty?") (("1" (inst 1 "0" "lambda (n: below[0]): epsilon! (x: (s!1)): true") (("1" (hide -2) (("1" (grind :if-match nil) (("1" (inst -2 "y!1") nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand "is_finite") (("2" (skosimp) (("2" (grind :if-match nil) (("2" (inst 1 "N!1" "lambda (n : below[N!1]): epsilon!(x : (s!1)) : n = f!1(x)") (("1" (skolem-typepred) (("1" (inst 1 "f!1(y!1)") (("1" (use "epsilon_ax[(s!1)]") (("1" (prop) (("1" (inst -4 "y!1" "epsilon(LAMBDA (x: (s!1)): f!1(y!1) = f!1(x))") (("1" (assert) nil nil) ("2" (inst 1 "y!1") nil nil)) nil) ("2" (inst 1 "y!1") nil nil)) nil) ("2" (inst 1 "y!1") nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1566 1210 t nil)) (finite_subset 0 (finite_subset-1 nil 3243836755 3307982850 ("" (grind :if-match nil) (("" (inst 1 "N!1" "lambda (x: (s!1)): f!1(x)") (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil) ("2" (typepred "x2!1") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil) ("3" (typepred "x1!1") (("3" (inst?) (("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (inst? -4) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 417 290 t shostak)) (finite_intersection 0 (finite_intersection-1 nil 3243836807 3307982850 ("" (grind :if-match nil) (("" (inst 1 "N!1" "lambda (x: (intersection(A!1, B!1))): f!1(x)") (("1" (skolem-typepred) (("1" (inst?) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) proved nil 554 440 t shostak)) (finite_add 0 (finite_add-1 nil 3243836836 3307982855 ("" (grind :if-match nil) (("" (inst 1 "N!1 + 1" "lambda (x: (add(x!1, A!1))): if x = x!1 then N!1 else f!1(x) endif") (("1" (grind :if-match nil) (("1" (inst -4 "x1!1" "x2!1") (("1" (assert) nil nil)) nil)) nil) ("2" (grind :if-match nil) nil nil) ("3" (grind :if-match nil) nil nil)) nil)) nil) proved nil 4406 1150 t shostak)) (nonempty_finite_is_nonempty 0 (nonempty_finite_is_nonempty-1 nil 3243832507 3307982855 ("" (grind) nil nil) proved nil 46 40 t shostak)) (finite_singleton 0 (finite_singleton-1 nil 3243832507 3307982855 ("" (skosimp) (("" (expand "is_finite") (("" (inst 1 "1" "LAMBDA (x: (singleton[T](x!1))): 0") (("" (grind) nil nil)) nil)) nil)) nil) proved nil 217 170 t shostak)) (finite_union 0 (finite_union-1 nil 3243832507 3307982857 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (skosimp) (("" (inst 1 "N!1 + N!2" "LAMBDA (x : (union(A!1, B!1))) : IF A!1(x) THEN f!1(x) ELSE N!1 + f!2(x) ENDIF") (("1" (grind) nil nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (delete -) (("3" (grind) nil nil)) nil) ("4" (skosimp) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2364 1880 t shostak)) (finite_intersection1 0 (finite_intersection1-3 nil 3243834683 3307982858 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (intersection[T](s!1, A!1))): f!1(x)") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (expand "intersection") (("1" (expand "member") (("1" (flatten) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "intersection") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 381 220 t nil) (finite_intersection1-2 nil 3243834664 nil ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (intersection[T](S!1, A!1))): f!1(x)") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (expand "intersection") (("1" (expand "member") (("1" (flatten) (("1" (inst?) (("1" (assert) nil))))))))))))) ("2" (skolem-typepred) (("2" (expand "intersection") (("2" (expand "member") (("2" (assert) nil)))))))))))))) nil) unchecked nil nil nil nil nil) (finite_intersection1-1 nil 3243832507 3243834318 ("" (postpone) nil nil) unfinished nil 128464 4090 t shostak)) (finite_intersection2 0 (finite_intersection2-1 nil 3243832507 3307982858 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (intersection[T](A!1, s!1))): f!1(x)") (("1" (expand "injective?") (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil) ("2" (typepred "x2!1") (("2" (expand "intersection") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (typepred "x1!1") (("3" (expand "intersection") (("3" (expand "member") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "intersection") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 277 200 t shostak)) (finite_difference 0 (finite_difference-1 nil 3243832507 3307982859 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x :(difference[T](A!1, s!1))): f!1(x)") (("1" (expand "injective?") (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil) ("2" (typepred "x2!1") (("2" (expand "difference") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (typepred "x1!1") (("3" (expand "difference") (("3" (expand "member") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "difference") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 427 220 t shostak)) (nonempty_finite_union1 0 (nonempty_finite_union1-1 nil 3243832507 3307982859 ("" (subtype-tcc) nil nil) proved nil 758 620 t shostak)) (nonempty_finite_union2 0 (nonempty_finite_union2-1 nil 3243832507 3307982860 ("" (subtype-tcc) nil nil) proved nil 771 610 t shostak)) (nonempty_add_finite 0 (nonempty_add_finite-1 nil 3243832507 3307982861 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (split) (("1" (inst 1 "N!1+1" "lambda (x: (add[T](x!1, A!1))): if x = x!1 then N!1 else f!1(x) endif") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (lift-if) (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (inst -4 "x1!1" "x2!1") (("1" (assert) nil nil) ("2" (expand "add") (("2" (assert) (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil) ("3" (expand "add") (("3" (expand "member") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (assert) nil nil)) nil)) nil) ("3" (skolem-typepred) (("3" (flatten) (("3" (assert) (("3" (expand "add") (("3" (expand "member") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "empty?") (("2" (inst -1 "x!1") (("2" (expand "member") (("2" (expand "add") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1250 740 t shostak)) (finite_remove 0 (finite_remove-1 nil 3243832507 3307982862 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (remove[T](x!1, A!1))): f!1(x)") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (inst?) (("1" (expand "remove") (("1" (expand "member") (("1" (assert) nil nil)) nil)) nil) ("2" (expand "remove") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "remove") (("2" (expand "member") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 418 220 t shostak)) (finite_rest 0 (finite_rest-1 nil 3243832507 3307982862 ("" (skolem-typepred) (("" (expand "is_finite") (("" (skosimp) (("" (inst 1 "N!1" "lambda (x: (rest[T](A!1))): f!1(x)") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (inst?) (("1" (expand "rest") (("1" (assert) (("1" (hide -1) (("1" (prop) (("1" (expand "empty?") (("1" (skosimp) (("1" (expand "member") (("1" (expand "remove") (("1" (expand "member") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "rest") (("2" (assert) (("2" (hide -2) (("2" (prop) (("2" (expand "remove") (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "rest") (("2" (assert) (("2" (prop) (("2" (expand "remove") (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 358 230 t shostak)) (finite_emptyset 0 (finite_emptyset-1 nil 3243832507 3307982863 ("" (expand "is_finite") (("" (inst 1 "0" "LAMBDA (x:(emptyset[T])): 0") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (expand "emptyset") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "emptyset") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) proved nil 202 140 t shostak)) (nonempty_singleton_finite 0 (nonempty_singleton_finite-1 nil 3243832507 3307982863 ("" (subtype-tcc) nil nil) proved nil 97 80 t shostak)) (finite_full 0 (finite_full-1 nil 3243836878 3307982863 ("" (grind :if-match nil) (("1" (inst 1 "N!1" "g!1") (("1" (grind) nil nil)) nil) ("2" (inst 1 "N!1" "f!1") (("2" (grind) nil nil)) nil)) nil) proved nil 711 520 t shostak)) (finite_type_set 0 (finite_type_set-1 nil 3243836911 3307982864 ("" (grind :if-match nil) (("" (inst 1 "N!1" "g!1") (("" (grind) nil nil)) nil)) nil) proved nil 471 310 t shostak)) (finite_complement 0 (finite_complement-1 nil 3243836931 3307982864 ("" (grind :if-match nil) (("" (inst 1 "N!1" "g!1") (("" (grind :if-match nil) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 431 320 t shostak)) (inj_set_TCC1 0 (inj_set_TCC1-1 nil 3243832508 3307982865 ("" (subtype-tcc) nil nil) proved nil 323 300 t shostak)) (inj_Card 0 (inj_Card-1 nil 3243836968 3307982865 ("" (skosimp) (("" (expand "Card") (("" (rewrite "min_def") (("" (expand "minimum?") (("" (flatten) (("" (expand "inj_set") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 272 230 t shostak)) (reduce_inj_TCC1 0 (reduce_inj_TCC1-1 nil 3243832508 3307982865 ("" (subtype-tcc) nil nil) proved nil 80 80 t shostak)) (reduce_inj 0 (reduce_inj-1 nil 3243836998 3307982866 ("" (skosimp) (("" (grind :if-match nil) (("" (inst 2 "LAMBDA (x : (S!1)) : IF f!1(x) = p!1 - 1 THEN y!1 ELSE f!1(x) ENDIF") (("1" (skosimp) (("1" (inst -2 "x1!1" "x2!1") (("1" (lift-if) (("1" (lift-if) (("1" (assert) (("1" (prop) (("1" (inst?) nil nil) ("2" (inst 3 "x2!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (skosimp) (("3" (inst 2 "x!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 659 570 t shostak)) (Card_injection 0 (Card_injection-1 nil 3243837042 3307982866 ("" (skosimp*) (("" (expand "Card") (("" (typepred "min(inj_set(S!1))") (("" (inst?) (("" (assert) (("" (expand "inj_set") (("" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 428 360 t shostak)) (Card_surjection 0 (Card_surjection-1 nil 3243837068 3307982867 ("" (skosimp*) (("" (name "CS" "Card(S!1)") (("" (replace -1) (("" (forward-chain "inj_Card") (("" (skolem!) (("" (rewrite "injection_n_to_m") (("" (copy -3) (("" (expand "surjective?" -1) (("" (inst -1 "0") (("" (skosimp*) (("" (inst 1 "f!2 o inverse(f!1)") (("1" (hide -3 2) (("1" (forward-chain "inj_inv[(S!1),below[n!1]]") (("1" (hide -4) (("1" (grind :if-match nil :exclude inverse) (("1" (inst -6 "epsilon! (x: (S!1)): f!1(x) = x1!1" "epsilon! (x: (S!1)): f!1(x) = x2!1") (("1" (inst -3 "x1!1" "x2!1") (("1" (assert) (("1" (expand "inverse") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1162 940 t shostak)) (Card_bijection 0 (Card_bijection-1 nil 3243837106 3307982868 ("" (skolem!) (("" (prop) (("1" (forward-chain "inj_Card") (("1" (skolem!) (("1" (inst?) (("1" (expand "bijective?") (("1" (assert) (("1" (case "n!1 = 0") (("1" (delete -2 -3) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (forward-chain "reduce_inj") (("2" (forward-chain "Card_injection") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "bijective?") (("2" (skosimp) (("2" (lemma "Card_injection" ("S" "S!1" "n" "n!1")) (("2" (split) (("1" (lemma "Card_surjection" ("S" "S!1" "n" "n!1")) (("1" (ground) (("1" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 815 580 t shostak)) (Card_disj_union 0 (Card_disj_union-1 nil 3243837140 3307982872 ("" (skosimp) (("" (name-replace "N1" "Card(S!1)" :hide? nil) (("" (name-replace "N2" "Card(S2!1)" :hide? nil) (("" (auto-rewrite "Card_bijection") (("" (do-rewrite) (("" (skosimp*) (("" (inst 1 "LAMBDA (x : (union(S!1, S2!1))) : IF S!1(x) THEN f!2(x) ELSE N1 + f!1(x) ENDIF") (("1" (expand "bijective?") (("1" (prop) (("1" (delete -2 -4) (("1" (grind) nil nil)) nil) ("2" (delete -1 -3) (("2" (grind :if-match nil) (("2" (inst -3 "y!1") (("1" (skolem!) (("1" (inst? 1) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (inst -2 "y!1 - N1") (("2" (skolem!) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (delete -1 -2) (("3" (grind) nil nil)) nil) ("4" (skosimp) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 3857 2790 t shostak)) (card_TCC1 0 (card_TCC1-1 nil 3243832508 3307982872 ("" (inst 1 "(LAMBDA S: Card(S))") nil nil) proved nil 106 50 t shostak)) (card_def 0 (card_def-1 nil 3243837211 3307982872 ("" (skosimp*) (("" (assert) nil nil)) nil) proved nil 54 50 t shostak)) (card_emptyset 0 (card_emptyset-1 nil 3242964880 3307982873 ("" (rewrite "card_def") (("" (rewrite "Card_bijection") (("" (inst 1 "LAMBDA (x : {x: T | FALSE}) : 0") (("1" (expand "bijective?") (("1" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (typepred "x1!1") (("1" (expand "emptyset") (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "emptyset") (("2" (propax) nil nil)) nil)) nil) ("3" (skosimp*) nil nil)) nil)) nil)) nil) proved nil 365 190 t shostak)) (empty_card 0 (empty_card-1 nil 3242964945 3307982873 ("" (skolem!) (("" (prop) (("1" (rewrite "emptyset_is_empty?[T]") (("1" (replace -1) (("1" (use "card_emptyset") nil nil)) nil)) nil) ("2" (rewrite "card_def") (("2" (rewrite "Card_bijection") (("2" (skolem!) (("2" (delete -) (("2" (grind) (("2" (typepred "f!1(x!1)") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 255 190 t shostak)) (card_empty? 0 (card_empty?-1 nil 3242964970 3307982873 ("" (skosimp*) (("" (rewrite "empty_card") nil nil)) nil) proved nil 75 70 t shostak)) (card_is_0 0 (card_is_0-1 nil 3242964987 3307982873 ("" (skosimp*) (("" (rewrite "card_empty?") (("" (rewrite "emptyset_is_empty?") nil nil)) nil)) nil) proved nil 78 70 t shostak)) (nonempty_card 0 (nonempty_card-1 nil 3242965012 3307982873 ("" (skosimp) (("" (expand "nonempty?") (("" (rewrite "empty_card") (("" (ground) nil nil)) nil)) nil)) nil) proved nil 125 70 t shostak)) (card_singleton 0 (card_singleton-1 nil 3242965037 3307982874 ("" (skosimp*) (("" (rewrite "card_def") (("" (rewrite "Card_bijection") (("" (inst 1 "LAMBDA (y : (singleton(x!1))) : 0") (("" (grind) (("" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 450 260 t shostak)) (card_one 0 (card_one-1 nil 3242965057 3307982874 ("" (skosimp*) (("" (rewrite "card_def") (("" (prop) (("1" (rewrite "Card_bijection") (("1" (skolem!) (("1" (grind :if-match nil) (("1" (inst -2 "0") (("1" (skolem!) (("1" (inst? 1) (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (ground) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "card_def" :dir rl) (("2" (rewrite "card_singleton") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 417 350 t shostak)) (card_disj_union 0 (card_disj_union-1 nil 3242965085 3307982874 ("" (skosimp*) (("" (rewrite "card_def") (("" (rewrite "card_def") (("" (rewrite "card_def") (("" (rewrite "Card_disj_union") nil nil)) nil)) nil)) nil)) nil) proved nil 219 160 t shostak)) (card_diff_subset 0 (card_diff_subset-1 nil 3242965107 3307982875 ("" (skosimp) (("" (forward-chain "union_diff_subset") (("" (lemma "card_disj_union") (("" (inst?) (("" (assert) (("" (rewrite "difference_disjoint") nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 425 360 t shostak)) (card_subset 0 (card_subset-1 nil 3242965128 3307982875 ("" (skosimp) (("" (forward-chain "card_diff_subset") (("" (assert) nil nil)) nil)) nil) proved nil 299 290 t shostak)) (card_plus 0 (card_plus-1 nil 3242965147 3307982877 ("" (auto-rewrite "union_subset1[T]" "intersection_subset1[T]") (("" (skolem!) (("" (lemma "card_diff_subset") (("" (inst-cp -1 "A!1" "union(A!1, B!1)") (("" (rewrite "diff_union_inter[T]") (("" (inst? -1) (("" (ground) (("" (rewrite "intersection_commutative" 1) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1573 1410 t shostak)) (card_union 0 (card_union-1 nil 3242965170 3307982878 ("" (skosimp*) (("" (lemma "card_plus") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil) proved nil 1350 1090 t shostak)) (card_add 0 (card_add-1 nil 3242965190 3307982880 ("" (skosimp*) (("" (lift-if) (("" (prop) (("1" (rewrite "member_add") (("1" (assert) nil nil) ("2" (expand "member") (("2" (propax) nil nil)) nil)) nil) ("2" (rewrite "add_as_union") (("2" (rewrite "singleton" :dir rl) (("2" (rewrite "union_commutative") (("2" (rewrite "card_disj_union") (("1" (rewrite "card_singleton") (("1" (assert) (("1" (expand "singleton") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (rewrite "singleton_disjoint") (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1759 1380 t shostak)) (card_add_gt0 0 (card_add_gt0-1 nil 3299963376 3307982881 ("" (skosimp) (("" (rewrite "card_add") (("" (lift-if) (("" (prop) (("1" (use "nonempty_card") (("1" (assert) (("1" (expand "nonempty?") (("1" (expand "empty?") (("1" (inst -1 "x!1") (("1" (expand "member") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 1221 800 t shostak)) (card_remove 0 (card_remove-1 nil 3242965278 3307982882 ("" (skolem!) (("" (lift-if) (("" (prop) (("1" (rewrite "remove_as_difference") (("1" (rewrite "card_diff_subset") (("1" (rewrite "card_singleton") nil nil) ("2" (lemma "singleton_subset[T]") (("2" (inst?) (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "member_remove") (("1" (assert) nil nil) ("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 826 540 t shostak)) (card_rest 0 (card_rest-1 nil 3242965301 3307982883 ("" (skosimp) (("" (expand "rest") (("" (rewrite "card_remove") (("1" (lemma "choose_member[T]") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (expand "nonempty?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) proved nil 432 350 t shostak)) (same_card_subset 0 (same_card_subset-1 nil 3242965321 3307982883 ("" (skosimp) (("" (case "EXISTS x : member(x, B!1) AND subset?(A!1, remove(x, B!1))") (("1" (skosimp) (("1" (expand "member") (("1" (forward-chain "card_subset") (("1" (rewrite "card_remove") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (apply-extensionality :hide? t) (("2" (grind :exclude "Card" :if-match nil) (("1" (inst? -) (("1" (assert) nil nil)) nil) ("2" (inst? +) (("2" (assert) (("2" (skosimp) (("2" (assert) (("2" (inst - "x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 577 480 t shostak)) (smaller_card_subset 0 (smaller_card_subset-1 nil 3242965352 3307982884 ("" (skosimp) (("" (forward-chain "card_subset") (("" (case-replace "A!1 = B!1") (("1" (assert) nil nil) ("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) proved nil 544 340 t shostak)) (card_1_has_1 0 (card_1_has_1-1 nil 3242965373 3307982884 ("" (skosimp*) (("" (use "card_empty?") (("" (iff) (("" (flatten) (("" (assert) (("" (expand "empty?") (("" (skosimp*) (("" (expand "member") (("" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 114 110 t shostak)) (card_2_has_2 0 (card_2_has_2-1 nil 3242965395 3307982885 ("" (skosimp*) (("" (lemma "card_1_has_1") (("" (inst?) (("" (assert) (("" (skosimp*) (("" (lemma "card_1_has_1") (("" (inst -1 "remove(x!1,S!1)") (("" (rewrite "card_remove") (("" (lift-if) (("" (assert) (("" (skosimp*) (("" (expand "remove") (("" (expand "member") (("" (flatten) (("" (inst 2 "x!1" "x!2") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 938 320 t shostak)) (card_intersection_le 0 (card_intersection_le-1 nil 3242965417 3307982885 ("" (skosimp*) (("" (case "subset?(intersection(A!1, B!1),A!1) AND
                    subset?(intersection(A!1, B!1),B!1)") (("1" (flatten) (("1" (lemma "card_subset") (("1" (split 1) (("1" (inst -1 "intersection(A!1, B!1)" "A!1") (("1" (assert) nil nil)) nil) ("2" (inst -1 "intersection(A!1, B!1)" "B!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "subset?") (("2" (expand "intersection") (("2" (expand "member") (("2" (split 1) (("1" (skosimp*) nil nil) ("2" (skosimp*) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 462 190 t shostak)) (card_bij 0 (card_bij-1 nil 3242965441 3307982886 ("" (skosimp*) (("" (rewrite "card_def") (("" (rewrite "Card_bijection") nil nil)) nil)) nil) proved nil 219 160 t shostak)) (card_bij_inv 0 (card_bij_inv-1 nil 3307953160 3307982887 ("" (skosimp*) (("" (lemma "card_bij[T]") (("" (inst?) (("" (case-replace "N!1 = 0") (("1" (ground) (("1" (inst 1 "LAMBDA (n: below[N!1]): epsilon(S!1)") (("1" (expand "bijective?") (("1" (expand "injective?") (("1" (expand "surjective?") (("1" (split 1) (("1" (skolem-typepred) nil nil) ("2" (skolem-typepred) (("2" (rewrite "card_empty?") (("2" (hide -2) (("2" (expand "empty?") (("2" (expand "member") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) nil nil) ("3" (skolem-typepred) nil nil)) nil) ("2" (skolem-typepred) (("2" (expand "bijective?") (("2" (flatten) (("2" (expand "surjective?") (("2" (rewrite "card_empty?") (("2" (expand "empty?" 1) (("2" (expand "member") (("2" (skosimp) (("2" (inst -2 "x!1") (("2" (skolem-typepred) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (ground) (("1" (hide -2) (("1" (skosimp) (("1" (inst + "inverse(f!1)") (("1" (lemma "bijective_inverse_is_bijective[(S!1),below(N!1)]") (("1" (inst?) nil nil) ("2" (assert) (("2" (use "nonempty_card") (("2" (assert) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (skosimp*) (("2" (expand "member") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "nonempty_card") (("2" (assert) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (expand "member") (("2" (skosimp*) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (skosimp*) (("2" (inst + "inverse(f!1)") (("1" (lemma "bijective_inverse_is_bijective[below(N!1),(S!1)]") (("1" (inst?) nil nil) ("2" (expand "bijective?") (("2" (flatten) (("2" (expand "surjective?") (("2" (inst -2 "choose(S!1)") (("1" (skosimp*) (("1" (inst + "x!1") nil nil)) nil) ("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (expand "member") (("2" (inst 1 "0") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "0") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1132 820 t shostak)) (bij_exists 0 (bij_exists-1 nil 3242965457 3307982887 ("" (skosimp*) (("" (lemma "card_bij") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil) proved nil 179 110 t shostak)) (finite_pred 0 (finite_pred-1 nil 3307981117 3307982888 ("" (expand "fullset") (("" (expand "is_finite") (("" (skosimp*) (("" (inst 1 "N!1" "(LAMBDA (x: {x: T | P!1(x)}): f!1(x))") (("" (expand "injective?") (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 522 190 t shostak)) (finite_pred2 0 (finite_pred2-1 nil 3307981300 3307982888 ("" (grind) nil nil) proved nil 455 330 t shostak)) (card_implies_TCC1 0 (card_implies_TCC1-1 nil 3307950062 3307983731 ("" (skosimp) (("" (rewrite "finite_pred") nil nil)) nil) proved nil 63755 1240 t shostak)) (card_implies_TCC2 0 (card_implies_TCC2-1 nil 3307950062 3307983755 ("" (skosimp) (("" (rewrite "finite_pred") nil nil)) nil) proved nil 14067 310 t shostak)) (card_implies 0 (card_implies-1 nil 3307981157 3307982890 ("" (skosimp*) (("" (case "subset?({x: T | P1!1(x)},{x: T | P2!1(x)})") (("1" (lemma "card_subset[T]") (("1" (inst?) (("1" (assert) nil nil) ("2" (hide -1 -3 2) (("2" (rewrite "finite_pred") nil nil)) nil) ("3" (rewrite "finite_pred") nil nil)) nil)) nil) ("2" (hide -1 2) (("2" (expand "subset?") (("2" (expand "member") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 235 160 t shostak)) (finite_induction 0 (finite_induction-1 nil 3307981389 3307982890 ("" (grind) nil nil) proved nil 344 290 t shostak)))(restrict_set_props (restrict_finite 0 (restrict_finite-1 nil 3249347110 3307982890 ("" (skosimp) (("" (expand "is_finite") (("" (skolem!) (("" (inst + "N!1" "LAMBDA (x: (restrict[T, S, bool](a!1))): f!1(x)") (("1" (expand "injective?") (("1" (skosimp :preds? t) (("1" (expand "restrict") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "restrict") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 258 220 nil nil)) (finite_restrict 0 (finite_restrict-1 nil 3249347110 3307982891 ("" (skolem!) (("" (use "restrict_finite") (("" (assert) nil nil)) nil)) nil) proved nil 177 70 t nil)) (empty_restrict 0 (empty_restrict-1 nil 3249347110 3307982891 ("" (subtype-tcc) nil nil) proved nil 175 120 t nil)) (card_restrict 0 (card_restrict-2 "Fix for 3.2" 3307984009 3307984009 ("" (skolem!) (("" (case "empty?(restrict[T, S, bool](a!1))") (("1" (rewrite "empty_card[S]") (("1" (assert) nil nil)) nil) ("2" (expand* "empty?" "member") (("2" (skolem!) (("2" (use "injection_n_to_m_var") (("2" (use "card_bij[S]") (("2" (lemma "card_bij[T]" ("N" "card(a!1)" "S" "a!1")) (("2" (assert) (("2" (skosimp*) (("2" (use "bij_inv_is_bij[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]]") (("1" (assert) (("1" (inst + "LAMBDA (x: below(card(restrict[T, S, bool](a!1)))): f!1(inverse(f!2)(x))") (("1" (expand "bijective?" (-1 -2)) (("1" (expand "injective?") (("1" (skosimp) (("1" (inst - "x1!1" "x2!1") (("1" (inst - "inverse(f!2)(x1!1)" "inverse(f!2)(x2!1)") (("1" (assert) nil nil) ("2" (typepred "inverse[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]](f!2)(x2!1)") (("1" (expand "restrict") (("1" (inst + "x!1") nil nil)) nil) ("2" (inst + "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (typepred "inverse[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]](f!2)(x!2)") (("1" (expand "restrict") (("1" (propax) nil nil)) nil) ("2" (inst + "x!1") nil nil)) nil)) nil) ("3" (skolem!) (("3" (inst + "x!1") nil nil)) nil)) nil)) nil) ("2" (inst + "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 214825 5790 t shostak) (card_restrict-1 nil 3249390068 3307982893 ("" (skolem!) (("" (case "empty?(restrict[T, S, bool](a!1))") (("1" (rewrite "empty_card[S]") (("1" (assert) nil nil)) nil) ("2" (expand* "empty?" "member") (("2" (skolem!) (("2" (use "injection_n_to_m_var") (("2" (use "card_bij[S]") (("2" (lemma "card_bij[T]" ("N" "card(a!1)" "S" "a!1")) (("2" (assert) (("2" (skosimp*) (("2" (use "bij_inv_is_bij[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]]") (("1" (assert) (("1" (inst + "LAMBDA (x: below(card(restrict[T, S, bool](a!1)))): f!1(inverse(f!2)(x))") (("1" (expand "bijective?" (-1 -2)) (("1" (expand "injective?") (("1" (skosimp) (("1" (inst - "x1!1" "x2!1") (("1" (inst - "inverse(f!2)(x1!1)" "inverse(f!2)(x2!1)") (("1" (assert) nil nil) ("2" (typepred "inverse[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]](f!2)(x2!1)") (("1" (expand "restrict") (("1" (propax) nil nil)) nil) ("2" (inst + "x!1") nil nil)) nil) ("3" (typepred "inverse[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]](f!2)(x1!1)") (("1" (expand "restrict") (("1" (propax) nil nil)) nil) ("2" (inst + "x!1") nil nil)) nil) ("4" (inst + "x!1") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (typepred "inverse[(restrict[T, S, bool](a!1)), below[card(restrict[T, S, bool](a!1))]](f!2)(x!2)") (("1" (expand "restrict") (("1" (propax) nil nil)) nil) ("2" (inst + "x!1") nil nil)) nil)) nil) ("3" (skolem!) (("3" (inst + "x!1") nil nil)) nil)) nil)) nil) ("2" (inst + "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1840 1130 t shostak)))(extend_set_props (finite_extension 0 (finite_extension-1 nil 3249327215 3307982894 ("" (grind) nil nil) proved nil 845 680 t nil)) (finite_extend 0 (finite_extend-1 nil 3249327215 3307982894 ("" (lemma "finite_extension") (("" (skolem-typepred) (("" (inst?) (("" (prop) nil nil)) nil)) nil)) nil) proved nil 44 40 nil nil)) (empty_extend 0 (empty_extend-1 nil 3249327215 3307982894 ("" (skolem-typepred) (("" (expand* "empty?" "member" "extend") (("" (skolem!) (("" (prop) (("" (inst?) nil nil)) nil)) nil)) nil)) nil) proved nil 122 70 nil nil)) (nonempty_extend 0 (nonempty_extend-1 nil 3249327215 3307982894 ("" (skolem-typepred) (("" (expand* "nonempty?" "empty?" "member" "extend") (("" (skolem-typepred) (("" (inst?) (("" (prop) nil nil)) nil)) nil)) nil)) nil) proved nil 94 90 nil nil)) (singleton_extend 0 (singleton_extend-1 nil 3249327215 3307982894 ("" (skolem-typepred) (("" (expand* "extend" "singleton?") (("" (skolem!) (("" (inst + "x!1") (("" (skolem-typepred) (("" (assert) (("" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 152 110 t nil)) (card_extend 0 (card_extend-1 nil 3249389673 3307982895 ("" (skolem!) (("" (use "bij_exists[S]") (("" (use "card_bij[T]") (("" (assert) (("" (skolem!) (("" (inst + "f!1") (("1" (expand* "bijective?" "injective?" "surjective?") (("1" (prop) (("1" (skosimp :preds? t) (("1" (expand "extend") (("1" (prop) (("1" (assert) (("1" (inst - "x1!1" "x2!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst -2 "y!1") (("2" (skolem!) (("2" (inst + "x!1") (("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "extend") (("2" (skolem!) (("2" (prop) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 709 610 t shostak)))(function_image_aux (finite_image 0 (finite_image-1 nil 3249929301 3307982896 ("" (skolem-typepred) (("" (expand* "image" "is_finite") (("" (skolem!) (("" (inst + "N!1" "LAMBDA (z: ({y: R | EXISTS (x: (S!1)): y = f!1(x)})): f!2(choose({d: (S!1) | f!1(d) = z}))") (("1" (expand "injective?") (("1" (skosimp* :preds? t) (("1" (inst - "choose({d: (S!1) | f!1(d) = x1!1})" "choose({d: (S!1) | f!1(d) = x2!1})") (("1" (assert) nil nil) ("2" (expand* "nonempty?" "empty?" "member") (("2" (inst - "x!2") (("2" (assert) nil nil)) nil)) nil) ("3" (expand* "nonempty?" "empty?" "member") (("3" (inst - "x!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand* "nonempty?" "empty?" "member") (("2" (skosimp* :preds? t) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 577 450 t shostak)) (card_image 0 (card_image-2 nil 3250016405 3307982898 ("" (skolem!) (("" (use "injection_n_to_m_var") (("" (use "card_bij[R]") (("" (lemma "card_bij[D]" ("N" "card(S!1)" "S" "S!1")) (("" (assert) (("" (case "EXISTS (f: [(image(f!1, S!1)) -> (S!1)]): injective?(f)") (("1" (skosimp*) (("1" (lemma "composition_injective[below(card(image(f!1, S!1))), (image(f!1, S!1)), (S!1)]") (("1" (inst - "LAMBDA (x: below[card(image(f!1, S!1))]): choose({r: (image(f!1, S!1)) | f!4(r) = x})" "f!2") (("1" (lemma "composition_injective[below(card(image(f!1, S!1))), (S!1), below(card(S!1))]") (("1" (inst - "f!2 o (LAMBDA (x: below[card(image(f!1, S!1))]): choose({r: (image(f!1, S!1)) | f!4(r) = x}))" "f!3") (("1" (inst + "f!3 o (f!2 o (LAMBDA (x: below[card(image(f!1, S!1))]): choose({r: (image(f!1, S!1)) | f!4(r) = x})))") (("1" (expand "bijective?" -5) (("1" (skosimp) (("1" (expand* "nonempty?" "empty?" "member" "surjective?") (("1" (inst -7 "x!1") (("1" (skolem!) (("1" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "bijective?" -3) (("2" (flatten) nil nil)) nil) ("3" (expand "bijective?" -4) (("3" (skosimp) (("3" (expand* "nonempty?" "empty?" "member" "surjective?") (("3" (inst -6 "x!1") (("3" (skolem!) (("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "injective?" 1) (("2" (skosimp :preds? t) (("2" (typepred "choose[(image(f!1, S!1))]({r: (image[D, R](f!1, S!1)) | f!4(r) = x1!1})") (("1" (typepred "choose[(image(f!1, S!1))]({r: (image[D, R](f!1, S!1)) | f!4(r) = x2!1})") (("1" (expand "image" (-1 -3)) (("1" (skosimp*) (("1" (assert) nil nil)) nil)) nil) ("2" (expand "bijective?" -8) (("2" (flatten) (("2" (expand* "nonempty?" "empty?" "member" "surjective?") (("2" (inst -10 "x2!1") (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "bijective?" -6) (("2" (flatten) (("2" (expand* "nonempty?" "empty?" "member" "surjective?") (("2" (inst -8 "x1!1") (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "bijective?" -3) (("3" (skosimp) (("3" (expand* "nonempty?" "empty?" "member" "surjective?") (("3" (inst -5 "x!1") (("3" (skolem!) (("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "LAMBDA (r: (image(f!1, S!1))): choose({d: (S!1) | f!1(d) = r})") (("1" (expand "injective?" 1) (("1" (skosimp :preds? t) (("1" (expand "image" -) (("1" (skosimp*) (("1" (typepred "choose({d: (S!1) | f!1(d) = x1!1})") (("1" (typepred "choose({d: (S!1) | f!1(d) = x2!1})") (("1" (assert) (("1" (assert) nil nil)) nil) ("2" (expand* "nonempty?" "empty?" "member") (("2" (inst - "x!2") (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand* "nonempty?" "empty?" "member") (("2" (inst - "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand* "image" "nonempty?" "empty?" "member") (("2" (skolem!) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2531 1810 t nil)) (card_injective_image 0 (card_injective_image-1 nil 3250016633 3307982900 ("" (skolem-typepred) (("" (use "card_image") (("" (lemma "injection_n_to_m_var") (("" (inst - "card(image(inj!1, S!1))" "card(S!1)") (("" (assert) (("" (case "EXISTS (f: [below(card(S!1)) -> (S!1)]): injective?(f)") (("1" (use "bij_exists[R]") (("1" (expand "bijective?") (("1" (skosimp*) (("1" (lemma "composition_injective[below(card(S!1)), (S!1), (image(inj!1, S!1))]") (("1" (inst - "f!2" "restrict[D, (S!1), R](inj!1)") (("1" (use "composition_injective[below(card(S!1)), (image(inj!1, S!1)), below(card(image(inj!1, S!1)))]") (("1" (inst?) (("1" (skolem!) (("1" (expand* "restrict" "image") (("1" (inst?) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (expand* "restrict" "image") (("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (split) (("1" (skolem!) (("1" (expand* "restrict" "image") (("1" (inst?) nil nil)) nil)) nil) ("2" (expand "restrict") (("2" (expand "injective?" (-5 1)) (("2" (skosimp) (("2" (inst - "x1!1" "x2!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "bij_exists[D]") (("2" (skolem!) (("2" (expand "bijective?") (("2" (flatten) (("2" (inst + "LAMBDA (n: below(card(S!1))): choose({d: (S!1) | f!1(d) = n})") (("1" (expand "injective?") (("1" (skosimp :preds? t) (("1" (typepred "choose({d: (S!1) | f!1(d) = x1!1})") (("1" (typepred "choose({d: (S!1) | f!1(d) = x2!1})") (("1" (assert) nil nil) ("2" (expand* "nonempty?" "empty?" "member" "surjective?") (("2" (inst -7 "x2!1") (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (expand* "nonempty?" "empty?" "member" "surjective?") (("2" (inst -5 "x1!1") (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (expand* "nonempty?" "empty?" "member" "surjective?") (("2" (inst -3 "n!1") (("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1888 1410 t shostak)) (bijective_image_TCC1 0 (bijective_image_TCC1-1 nil 3249929500 3307982900 ("" (expand* "fullset" "image") (("" (skosimp*) (("" (inst?) nil nil)) nil)) nil) proved nil 67 60 t shostak)) (bijective_image 0 (bijective_image-1 nil 3249929533 3307982900 ("" (skolem-typepred) (("" (expand* "bijective?" "injective?" "surjective?") (("" (smash) (("" (skolem-typepred) (("" (expand* "fullset" "image") (("" (skolem!) (("" (inst?) (("" (inst? +) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 178 130 t shostak)))(function_iterate (iterate_TCC1 0 (iterate_TCC1-1 nil 3237052399 3307982900 ("" (tcc :defs !) nil nil) proved nil 132 120 nil nil)) (iterate_TCC2 0 (iterate_TCC2-1 nil 3237052399 3307982901 ("" (tcc :defs !) nil nil) proved nil 197 30 nil nil)) (iterate_add 0 (iterate_add-1 nil 3237052399 3307982902 ("" (induct "m") (("1" (skosimp) (("1" (expand "iterate" 1 1) (("1" (expand "o") (("1" (apply-extensionality) nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (expand "iterate" 1 1) (("2" (expand "iterate" 1 3) (("2" (inst -1 "f!1" "n!1") (("2" (expand "o") (("2" (apply-extensionality) (("2" (replace -1 :dir rl) (("2" (beta) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1312 720 nil nil)) (iterate_add_applied 0 (iterate_add_applied-1 nil 3237052399 3307982903 ("" (induct-and-simplify "m") nil nil) proved nil 1159 950 nil nil)) (iterate_add_one 0 (iterate_add_one-1 nil 3237052399 3307982904 ("" (induct-and-simplify "n") nil nil) proved nil 1083 770 nil nil)) (iterate_mult 0 (iterate_mult-1 nil 3237052399 3307982907 ("" (induct "m") (("1" (induct "n") (("1" (skosimp) (("1" (expand "iterate") (("1" (propax) nil nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (inst?) (("2" (expand "iterate" 1 1) (("2" (apply-extensionality) (("2" (replace -1) (("2" (expand "iterate" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (induct "n" :name "NAT_induction") (("2" (skosimp) (("2" (skosimp) (("2" (case "j!2 = 0") (("1" (replace -1) (("1" (expand "iterate" 1 1) (("1" (expand "iterate" 1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (expand "iterate" 2 1) (("2" (expand "iterate" 2 4) (("2" (apply-extensionality 2) (("2" (hide 3) (("2" (inst-cp -1 "j!2-1") (("2" (assert) (("2" (inst? -2) (("2" (replace -2) (("2" (lemma "iterate_add") (("2" (inst -1 "f!1" "1+j!1" "-1 - j!1 + j!1 * j!2 + j!2") (("1" (expand "o") (("1" (case "iterate(f!1, 1 + j!1)(iterate(f!1, -1 - j!1 + j!1 * j!2 + j!2)(x!1)) = iterate(f!1, j!1 * j!2 + j!2)(x!1)") (("1" (hide -2) (("1" (replace -1) (("1" (expand "iterate" 1 1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (replace -1 :dir rl) (("2" (beta) (("2" (propax) nil nil)) nil)) nil) ("3" (hide -1 -2 -3 -4 2) (("3" (case "j!1 * j!2 >= j!1") (("1" (assert) nil nil) ("2" (assert) (("2" (case "j!1 = 0") (("1" (assert) nil nil) ("2" (lemma "div_mult_pos_ge2") (("2" (inst -1 "j!1" "j!2" "j!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (case "j!1 * j!2 >= j!1") (("1" (assert) nil nil) ("2" (lemma "div_mult_pos_ge2") (("2" (inst -1 "j!1" "j!2" "j!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2399 2140 nil nil)) (iterate_invariant 0 (iterate_invariant-1 nil 3237052399 3307982907 ("" (induct "n") (("1" (skosimp*) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) proved nil 262 200 nil nil)))(sequences (insert_TCC1 0 (insert_TCC1-1 nil 3237052399 3307982907 ("" (tcc :defs !) nil nil) proved nil 355 170 nil nil)) (insert_delete 0 (insert_delete-1 nil 3237052399 3307982908 ("" (skolem 1 ("n!1" "seq!1")) (("" (expand "insert") (("" (apply-extensionality 1) (("1" (delete 2) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (expand "delete") (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split) (("1" (flatten) (("1" (expand "nth") (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (expand "delete") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (apply-extensionality 4) nil nil)) nil)) nil)) nil)) nil) proved nil 591 470 nil nil)) (add_first_rest 0 (add_first_rest-1 nil 3237052399 3307982909 ("" (skolem 1 ("seq!1")) (("" (expand "add") (("" (expand "insert") (("" (apply-extensionality 1) (("1" (delete 2) (("1" (lift-if) (("1" (prop) (("1" (expand "first") (("1" (expand "nth") (("1" (assert) nil nil)) nil)) nil) ("2" (expand "rest") (("2" (expand "suffix") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (apply-extensionality 3) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 673 270 nil nil)) (sequence_induction 0 (sequence_induction-1 nil 3237052399 3307982909 ("" (lemma "nat_induction") (("" (skosimp) (("" (inst -1 "(lambda (n:nat): p!1(nth(seq!1, n)))") (("" (assert) (("" (split) (("1" (assert) (("1" (expand "every") (("1" (propax) nil nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 88 90 nil nil)))(seq_functions)(finite_sequences (empty_seq_TCC1 0 (empty_seq_TCC1-1 nil 3237052399 3307982909 ("" (existence-tcc) nil nil) proved nil 50 50 nil nil)) (oh_TCC1 0 (oh_TCC1-1 nil 3237052399 3307982909 ("" (tcc :defs !) nil nil) proved nil 218 160 nil nil)) (oh_TCC2 0 (oh_TCC2-1 nil 3237052399 3307982911 ("" (tcc :defs !) nil nil) proved nil 1829 580 nil nil)) (caret_TCC1 0 (caret_TCC1-1 nil 3237052399 3307982913 ("" (grind :if-match nil) nil nil) proved nil 2324 840 nil nil)) (caret_TCC2 0 (caret_TCC2-1 nil 3237052399 3307982914 ("" (tcc :defs explicit) nil nil) proved nil 684 440 nil nil)) (caret_TCC3 0 (caret_TCC3-1 nil 3237052399 3307982916 ("" (skosimp) (("" (beta) (("" (lift-if) (("" (assert) (("" (ground) (("" (expand "min") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2113 890 nil nil)) (extract1_TCC1 0 (extract1_TCC1-1 nil 3237052399 3307982916 ("" (tcc :defs !) nil nil) proved nil 49 30 nil nil)) (o_assoc 0 (o_assoc-1 nil 3237052399 3307982922 ("" (skosimp) (("" (expand "o") (("" (apply-extensionality) (("1" (hide 2) (("1" (lift-if) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skosimp) (("2" (assert) nil nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp) (("3" (assert) nil nil)) nil)) nil) ("4" (hide 2) (("4" (skosimp) (("4" (assert) nil nil)) nil)) nil) ("5" (hide 2) (("5" (skosimp) (("5" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 6216 4140 nil nil)))(ordstruct)(ordinals (lessp_TCC1 0 (lessp_TCC1-1 nil 3237052399 3307982923 ("" (grind) nil nil) proved nil 742 630 nil nil)) (lessp_TCC2 0 (lessp_TCC2-1 nil 3237052399 3307982924 ("" (skosimp*) (("" (replace -1) (("" (expand "size") (("" (expand "reduce" 3 2) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 669 560 nil nil)) (ordinal?_TCC1 0 (ordinal?_TCC1-1 nil 3237052399 3307982924 ("" (skosimp*) (("" (replace -1) (("" (expand "size") (("" (expand "reduce" 1 2) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 602 540 nil nil)) (ordinal?_TCC2 0 (ordinal?_TCC2-1 nil 3237052399 3332252998 ("" (skosimp*) (("" (replace -2) (("" (expand "size") (("" (expand "reduce" 1 2) (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 17727 1310 t nil)) (ordinal_TCC1 0 (ordinal_TCC1-1 nil 3237052399 3307982925 ("" (inst 1 "zero") (("" (assert) (("" (expand "ordinal?") (("" (propax) nil nil)) nil)) nil)) nil) proved nil 83 30 nil nil)) (ordinal_irreflexive 0 (ordinal_irreflexive-1 nil 3237052399 3307982925 ("" (induct "r") (("1" (assert) nil nil) ("2" (flatten) (("2" (expand "<") (("2" (propax) nil nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) (("3" (expand "<" -4) (("3" (split -4) (("1" (assert) (("1" (expand "ordinal?" -3) (("1" (propax) nil nil)) nil)) nil) ("2" (expand "ordinal?" -4) (("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 128 130 nil nil)) (ordinal_antisym 0 (ordinal_antisym-1 nil 3237052399 3307982926 ("" (induct "r") (("1" (assert) nil nil) ("2" (flatten) (("2" (skosimp*) (("2" (expand "<") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (induct "s") (("1" (assert) nil nil) ("2" (flatten) (("2" (expand "<" -2) (("2" (propax) nil nil)) nil)) nil) ("3" (skosimp) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (expand "<" -6) (("3" (split -6) (("1" (inst -8 "add2_var!2") (("1" (assert) (("1" (expand "<" -7) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "<" -8) (("2" (assert) (("2" (replace -1) (("2" (lemma "ordinal_irreflexive") (("2" (inst -1 "add2_var!2") nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten) (("3" (expand "<" -9) (("3" (replace -1) (("3" (replace -2) (("3" (lemma "ordinal_irreflexive") (("3" (inst-cp -1 "add2_var!2") (("3" (assert) (("3" (inst -12 "add3_var!2") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 466 380 nil nil)) (ordinal_antisymmetric 0 (ordinal_antisymmetric-1 nil 3237052399 3307982926 ("" (skosimp) (("" (expand "<=") (("" (split) (("1" (split) (("1" (lemma "ordinal_antisym") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil) proved nil 93 50 nil nil)) (ordinal_transitive 0 (ordinal_transitive-1 nil 3237052399 3307982927 ("" (induct "s") (("1" (assert) nil nil) ("2" (flatten) (("2" (skosimp) (("2" (expand "<" -2) (("2" (lift-if -2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (skosimp) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (hide -3 -4) (("3" (skosimp) (("3" (expand "<" -4) (("3" (lift-if) (("3" (split -4) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (expand "<" -5) (("2" (lift-if) (("2" (split) (("1" (split) (("1" (flatten) (("1" (expand "<" 2) (("1" (assert) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (expand "<" 3) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split) (("1" (assert) (("1" (prop) (("1" (assert) (("1" (expand "<" 4) (("1" (flatten) (("1" (assert) (("1" (inst -4 "exp(r!1)" "exp(t!1)") (("1" (assert) nil nil) ("2" (assert) (("2" (typepred "t!1") (("2" (expand "ordinal?" -1) (("2" (propax) nil nil)) nil)) nil)) nil) ("3" (typepred "r!1") (("3" (expand "ordinal?" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "<" 4) (("2" (assert) nil nil)) nil) ("3" (expand "<" 4) (("3" (assert) nil nil)) nil) ("4" (expand "<" 5) (("4" (assert) (("4" (inst -4 "exp(r!1)" "exp(t!1)") (("1" (assert) nil nil) ("2" (typepred "t!1") (("2" (expand "ordinal?" -1) (("2" (assert) nil nil)) nil)) nil) ("3" (typepred "r!1") (("3" (expand "ordinal?" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (expand "<" 5) (("5" (assert) nil nil)) nil) ("6" (expand "<" 5) (("6" (assert) nil nil)) nil)) nil)) nil) ("2" (split -5) (("1" (propax) nil nil) ("2" (flatten) (("2" (hide -6) (("2" (prop) (("1" (assert) (("1" (expand "<" 4) (("1" (propax) nil nil)) nil)) nil) ("2" (expand "<" 4) (("2" (assert) nil nil)) nil) ("3" (expand "<" 4) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "<" 3) (("3" (assert) (("3" (hide -4) (("3" (split -4) (("1" (propax) nil nil) ("2" (flatten) (("2" (assert) (("2" (flatten) (("2" (assert) (("2" (split -1) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (assert) (("2" (inst -8 "rest(r!1)" "rest(t!1)") (("1" (assert) nil nil) ("2" (typepred "t!1") (("2" (expand "ordinal?" -1) (("2" (assert) nil nil)) nil)) nil) ("3" (typepred "r!1") (("3" (expand "ordinal?" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1261 1080 nil nil)) (ordinal_trichotomy 0 (ordinal_trichotomy-1 nil 3237052399 3307982928 ("" (induct "r") (("1" (assert) nil nil) ("2" (flatten) (("2" (induct "s") (("1" (assert) nil nil) ("2" (skosimp) (("2" (expand "ordinal?" -3) (("2" (flatten) (("2" (assert) (("2" (expand "<" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skosimp) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (induct "s") (("1" (assert) nil nil) ("2" (flatten) (("2" (expand "<" 3) (("2" (propax) nil nil)) nil)) nil) ("3" (skosimp) (("3" (assert) (("3" (expand "ordinal?" -3) (("3" (flatten) (("3" (assert) (("3" (expand "<" 1) (("3" (flatten) (("3" (expand "<" 5) (("3" (flatten) (("3" (inst -6 "add2_var!2") (("3" (assert) (("3" (replace -6) (("3" (assert) (("3" (hide -3 -4 1 5) (("3" (hide -6 -7) (("3" (inst -5 "add3_var!2") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 863 490 nil nil)) (well_founded_le 0 (well_founded_le-1 nil 3237052399 3307982928 ("" (expand "well_founded?") (("" (lemma "ordinal_induction") (("" (skosimp) (("" (skosimp) (("" (inst -1 "LAMBDA (x:ordinal): NOT p!1(x)") (("" (split) (("1" (inst -1 "y!1") nil nil) ("2" (skosimp) (("2" (inst 1 "r!1") (("2" (skosimp) (("2" (inst -1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((well_founded? const-decl "bool" orders nil)) 108 110 nil nil)))(lex2 (lex2_TCC1 0 (lex2_TCC1-1 nil 3237052399 3307982928 ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved nil 155 110 nil nil)) (lex2_TCC2 0 (lex2_TCC2-1 nil 3237052399 3307982929 ("" (subtype-tcc) nil nil) proved nil 175 100 nil nil)) (lex2_TCC3 0 (lex2_TCC3-1 nil 3237052399 3307982929 ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved nil 130 130 nil nil)) (lex2_TCC4 0 (lex2_TCC4-1 nil 3237052399 3307982929 ("" (subtype-tcc) nil nil) proved nil 130 100 nil nil)) (lex2_TCC5 0 (lex2_TCC5-1 nil 3237052399 3307982929 ("" (grind) nil nil) proved nil 58 50 nil nil)) (lex2_TCC6 0 (lex2_TCC6-1 nil 3237052399 3307982929 ("" (subtype-tcc) nil nil) proved nil 92 90 nil nil)) (lex2_TCC7 0 (lex2_TCC7-1 nil 3237052399 3307982929 ("" (subtype-tcc) nil nil) proved nil 94 90 nil nil)) (lex2_TCC8 0 (lex2_TCC8-1 nil 3237052399 3307982929 ("" (grind) nil nil) proved nil 99 70 nil nil)) (lex2_lt 0 (lex2_lt-1 nil 3237052399 3307982932 ("" (grind) nil nil) proved nil 2682 1940 nil nil)))(list)(list_props (length_TCC1 0 (length_TCC1-1 nil 3237052399 3307982933 ("" (tcc :defs !) nil nil) proved nil 693 540 nil nil)) (member_TCC1 0 (member_TCC1-1 nil 3237052399 3307982933 ("" (tcc :defs !) nil nil) proved nil 389 300 nil nil)) (member_null 0 (member_null-1 nil 3237052399 3307982933 ("" (grind :if-match nil) nil nil) proved nil 83 80 nil nil)) (nth_TCC1 0 (nth_TCC1-1 nil 3237052399 3307982933 ("" (skosimp) (("" (typepred "n!1") (("" (expand "length") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 71 60 nil nil)) (nth_TCC2 0 (nth_TCC2-1 nil 3237052399 3307982934 ("" (skosimp) (("" (typepred "n!1") (("" (expand "length") (("" (assert) nil nil)) nil)) nil)) nil) proved nil 129 80 nil nil)) (nth_TCC3 0 (nth_TCC3-1 nil 3237052399 3307982935 ("" (induct "l") (("1" (skosimp*) (("1" (typepred "n!1") (("1" (expand "length") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) (("2" (typepred "n!1") (("2" (expand "length" -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) (("3" (typepred "n!1") (("3" (expand "length" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 1051 890 nil nil)) (nth_TCC4 0 (nth_TCC4-1 nil 3237052399 3307982935 ("" (induct "l") (("1" (skosimp*) (("1" (typepred "n!1") (("1" (expand "length") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "length" 2 2) (("2" (assert) (("2" (expand "<") (("2" (expand "restrict") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (typepred "n!1") (("3" (expand "length" -1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 827 710 t nil)) (append_TCC1 0 (append_TCC1-1 nil 3237052399 3307982936 ("" (tcc :defs !) nil nil) proved nil 355 280 nil nil)) (append_null 0 (append_null-1 nil 3237052399 3307982936 ("" (induct "l") (("1" (grind) nil nil) ("2" (skosimp) (("2" (expand "append" +) (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil) proved nil 109 110 nil nil)) (append_assoc 0 (append_assoc-1 nil 3237052399 3307982936 ("" (induct-and-simplify "l1") nil nil) proved nil 240 180 nil nil)) (reverse_append 0 (reverse_append-1 nil 3237052399 3307982937 ("" (induct-and-simplify "l1") (("1" (rewrite "append_null") nil nil) ("2" (replace -1) (("2" (rewrite "append_assoc" :dir rl) nil nil)) nil)) nil) proved nil 380 320 nil nil)) (reverse_reverse 0 (reverse_reverse-1 nil 3237052399 3307982937 ("" (induct "l") (("1" (grind) nil nil) ("2" (skosimp) (("2" (expand "reverse" 1 2) (("2" (rewrite "reverse_append") (("2" (expand "reverse" 1 1) (("2" (replace -1) (("2" (expand "reverse" 1 1) (("2" (expand "append" 1 2) (("2" (expand "append" 1 1) (("2" (expand "append" 1 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 195 140 nil nil)) (length_append 0 (length_append-1 nil 3237052399 3307982938 ("" (induct-and-simplify "l1") nil nil) proved nil 1006 720 nil nil)) (length_reverse 0 (length_reverse-1 nil 3237052399 3307982939 ("" (induct-and-simplify "l") (("" (rewrite "length_append") (("" (assert) nil nil)) nil)) nil) proved nil 936 720 nil nil)) (list_rep 0 (list_rep-1 nil 3237052399 3307982939 ("" (assert) nil nil) proved nil 77 40 nil nil)) (every_append 0 (every_append-1 nil 3237052399 3307982939 ("" (induct-and-simplify "l1") nil nil) proved nil 339 280 nil nil)) (every_disjunct1 0 (every_disjunct1-1 nil 3237052399 3307982940 ("" (induct-and-simplify "l") nil nil) proved nil 274 210 nil nil)) (every_disjunct2 0 (every_disjunct2-1 nil 3237052399 3307982940 ("" (induct-and-simplify "l") nil nil) proved nil 224 210 nil nil)) (every_conjunct 0 (every_conjunct-1 nil 3237052399 3307982940 ("" (induct-and-simplify "l") nil nil) proved nil 368 270 nil nil)) (every_member 0 (every_member-1 nil 3237052399 3307982940 ("" (induct-and-simplify "l") (("" (rewrite "every_disjunct2") nil nil)) nil) proved nil 219 170 nil nil)))(map_props (map_list_composition 0 (map_list_composition-1 nil 3237052399 3307982941 ("" (induct "l") (("1" (skosimp) (("1" (expand "map") (("1" (propax) nil nil)) nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (inst?) (("2" (expand "map" +) (("2" (replace -1) (("2" (expand "o" 1 2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 461 200 nil nil)) (map_seq_composition 0 (map_seq_composition-1 nil 3237052399 3307982941 ("" (skosimp) (("" (expand "map") (("" (apply-extensionality) (("" (hide 2) (("" (expand "o") (("" (case "nth((LAMBDA (n: nat): f1!1(nth(s!1, n))), x!1) = f1!1(nth(s!1, x!1))") (("1" (replace -1) (("1" (propax) nil nil)) nil) ("2" (hide 2) (("2" (expand "nth" 1 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 433 240 nil nil)))(more_map_props (map_length 0 (map_length-1 nil 3332188055 3332188134 ("" (induct "l") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "length" +) (("2" (expand "map" 1) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil) proved nil 78773 1470 t shostak)))(filters (filter_TCC1 0 (filter_TCC1-1 nil 3237052399 3307982942 ("" (tcc :defs !) nil nil) proved nil 605 330 nil nil)) (filter_TCC2 0 (filter_TCC2-1 nil 3237052399 3307982943 ("" (skosimp) (("" (replace -1) (("" (expand "length" 2 2) (("" (expand "<") (("" (assert) (("" (expand "restrict") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 523 410 t nil)))(list2finseq (finseq2list_rec_TCC1 0 (finseq2list_rec_TCC1-1 nil 3237052399 3307982943 ("" (tcc :defs explicit) nil nil) proved nil 324 270 nil nil)) (finseq2list_rec_TCC2 0 (finseq2list_rec_TCC2-1 nil 3237052399 3307982943 ("" (tcc :defs !) nil nil) proved nil 218 180 nil nil)) (finseq2list_rec_TCC3 0 (finseq2list_rec_TCC3-1 nil 3237052399 3307982943 ("" (tcc :defs !) nil nil) proved nil 47 50 nil nil)) (finseq2list_TCC1 0 (finseq2list_TCC1-1 nil 3237052399 3307982943 ("" (tcc :defs explicit) nil nil) proved nil 34 30 nil nil)))(list2set (list2set_TCC1 0 (list2set_TCC1-1 nil 3237052399 3307982944 ("" (tcc :defs !) nil nil) proved nil 396 290 nil nil)))(disjointness (pairwise_disjoint?_TCC1 0 (pairwise_disjoint?_TCC1-1 nil 3237052399 3307982944 ("" (termination-tcc) nil nil) proved nil 350 330 nil nil)))(character)(strings (fseq_lem 0 (fseq_lem-1 nil 3237052399 3307982947 ("" (induct "l1") (("1" (induct "l2") (("1" (grind) nil nil)) nil) ("2" (skosimp) (("2" (skosimp) (("2" (inst -1 "cdr(l2!1)") (("1" (iff) (("1" (prop) (("1" (assert) (("1" (apply-extensionality) (("1" (expand "list2finseq" -1) (("1" (flatten) (("1" (decompose-equality -2) (("1" (inst -1 "0") (("1" (expand "nth") (("1" (propax) nil nil)) nil) ("2" (expand "length" 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "list2finseq" -1) (("2" (flatten) (("2" (expand "length" -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (expand "list2finseq" -1) (("3" (expand "list2finseq" 3) (("3" (flatten) (("3" (split) (("1" (expand "length" -1) (("1" (assert) (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (apply-extensionality) (("1" (decompose-equality -2) (("1" (inst -1 "x!1+1") (("1" (expand "nth" -1) (("1" (propax) nil nil)) nil) ("2" (assert) (("2" (expand "length" 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (expand "length" -1) (("2" (lift-if) (("2" (split -1) (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skosimp) (("3" (expand "length" -1) (("3" (lift-if) (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (expand "length" -1) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (assert) nil nil)) nil)) nil) ("2" (iff) (("2" (prop) (("1" (expand "list2finseq") (("1" (flatten) (("1" (expand "length" -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 2851 2530 nil nil)) (cons_lem 0 (cons_lem-1 nil 3237052399 3307982947 ("" (grind :if-match nil) (("1" (decompose-equality -) nil nil) ("2" (decompose-equality -) nil nil)) nil) proved nil 257 200 t nil)) (char_lem 0 (char_lem-1 nil 3237052399 3307982947 ("" (grind :if-match nil) (("" (apply-extensionality :hide? t) nil nil)) nil) proved nil 200 120 nil nil)))(lift)(union)(mucalculus (lfp_induction 0 (lfp_induction-1 nil 3252401360 3307982948 ("" (grind :if-match nil) (("" (inst -3 "p!1") (("" (assert) nil nil)) nil)) nil) proved ((member const-decl "bool" sets nil)) 313 180 t shostak)) (gfp_induction 0 (gfp_induction-1 nil 3252401454 3307982948 ("" (grind :if-match nil) (("" (inst 1 "p!1") (("" (assert) nil nil)) nil)) nil) proved ((member const-decl "bool" sets nil)) 171 150 t shostak)))(ctlops (EG_TCC1 0 (EG_TCC1-1 nil 3242699046 3307982949 ("" (grind) nil nil) proved nil 646 180 t shostak)) (EU_TCC1 0 (EU_TCC1-1 nil 3242699046 3307982949 ("" (grind :if-match nil) (("" (inst 2 "v!1") (("" (assert) (("" (inst -1 "v!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 269 210 t shostak)))(fairctlops (fairEG_TCC1 0 (fairEG_TCC1-1 nil 3242699046 3307982950 ("" (grind :if-match nil) (("" (inst -2 "p!1") (("" (assert) (("" (skosimp*) (("" (prop) (("1" (skosimp*) (("1" (inst -6 "s!2") (("1" (assert) (("1" (flatten) (("1" (inst -5 "v!1") (("1" (inst 2 "v!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -5 "s!2") (("2" (assert) (("2" (flatten) (("2" (inst 3 "v!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil)) 831 460 t shostak)))(Fairctlops (CheckFair_TCC1 0 (CheckFair_TCC1-1 nil 3237052399 3307982950 ("" (termination-tcc) nil nil) proved nil 451 350 nil nil)) (FairEG_TCC1 0 (FairEG_TCC1-1 nil 3242699046 3307982952 ("" (induct "Fflist") (("1" (grind) nil nil) ("2" (grind :if-match nil) (("2" (inst -3 "p!1") (("2" (assert) (("2" (skosimp*) (("2" (inst -4 "s!2") (("2" (assert) (("2" (flatten) (("2" (prop) (("2" (skosimp*) (("2" (inst -5 "N!1" "f!1") (("2" (inst -5 "p1!1" "p2!1") (("2" (assert) (("2" (replace -6) (("2" (inst -5 "v!1") (("2" (assert) (("2" (inst 2 "v!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil)) 1355 780 t shostak)))(bit (bit_cases 0 (bit_cases-1 nil 3242701078 3307982952 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 173 40 t shostak)))(bv)(exp2 (exp2_TCC1 0 (exp2_TCC1-1 nil 3242699046 3307982952 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 88 90 t shostak)) (exp2_TCC2 0 (exp2_TCC2-1 nil 3242699046 3307982952 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 191 100 t shostak)) (exp2_TCC3 0 (exp2_TCC3-1 nil 3242699046 3307982953 ("" (induct-and-simplify "n") nil nil) proved nil 659 620 t shostak)) (exp2_def 0 (exp2_def-1 nil 3242701800 3307982954 ("" (induct-and-simplify "n") nil nil) proved nil 995 860 t shostak)) (exp2_pos 0 (exp2_pos-1 nil 3242701810 3307982955 ("" (induct-and-simplify "n") nil nil) proved nil 776 660 t shostak)) (exp2_n 0 (exp2_n-1 nil 3242701817 3307982956 ("" (induct-and-simplify "n") nil nil) proved nil 1421 1310 t shostak)) (exp2_sum 0 (exp2_sum-1 nil 3242701824 3307982959 ("" (induct-and-simplify "n") nil nil) proved nil 2798 2220 t shostak)) (exp2_minus_TCC1 0 (exp2_minus_TCC1-1 nil 3242699046 3307982959 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 205 200 t shostak)) (exp2_minus 0 (exp2_minus-1 nil 3242701829 3307982963 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp) (("2" (induct-and-simplify "k") nil nil)) nil)) nil) proved nil 3311 2330 t shostak)) (exp2_strictpos 0 (exp2_strictpos-1 nil 3242701904 3307982963 ("" (induct-and-simplify "n") nil nil) proved nil 740 680 t shostak)) (exp2_lt 0 (exp2_lt-1 nil 3242701912 3307982966 ("" (induct "m") (("1" (grind) nil nil) ("2" (skosimp) (("2" (induct-and-simplify "n") nil nil)) nil)) nil) proved nil 2067 1850 t shostak)) (exp_prop 0 (exp_prop-1 nil 3242701951 3307982967 ("" (skosimp*) (("" (rewrite "exp2_sum") (("" (lemma "both_sides_times_pos_le1") (("" (inst -1 "exp2(m!1)" "x1!1" "exp2(n!1)-1") (("" (assert) nil nil)) nil)) nil)) nil)) nil) proved nil 1100 1050 t shostak)))(bv_concat_def (oh_TCC1 0 (oh_TCC1-1 nil 3242699046 3307982967 ("" (grind) nil nil) proved nil 481 430 t shostak)))(bv_bitwise (bv_OR 0 (bv_OR-1 nil 3242702892 3307982967 ("" (grind) nil nil) proved nil 72 70 t shostak)) (bv_AND 0 (bv_AND-1 nil 3242702898 3307982967 ("" (grind) nil nil) proved nil 64 60 t shostak)) (bv_IFF 0 (bv_IFF-1 nil 3242702904 3307982967 ("" (grind) nil nil) proved nil 147 70 t shostak)) (bv_XOR 0 (bv_XOR-1 nil 3242702908 3307982968 ("" (grind) nil nil) proved nil 206 90 t shostak)) (bv_NOT 0 (bv_NOT-1 nil 3242702912 3307982968 ("" (grind) nil nil) proved nil 67 70 t shostak)))(bv_nat (bv2nat_rec_TCC1 0 (bv2nat_rec_TCC1-1 nil 3242699046 3307982968 ("" (grind) nil nil) proved nil 208 160 t shostak)) (bv2nat_rec_TCC2 0 (bv2nat_rec_TCC2-1 nil 3242699046 3307982968 ("" (grind) nil nil) proved nil 163 150 t shostak)) (bv2nat_rec_TCC3 0 (bv2nat_rec_TCC3-1 nil 3242699046 3307982968 ("" (grind) nil nil) proved nil 162 160 t shostak)) (bv2nat_rec_TCC4 0 (bv2nat_rec_TCC4-1 nil 3242699046 3307982969 ("" (grind) nil nil) proved nil 41 40 t shostak)) (bv2nat_rec_TCC5 0 (bv2nat_rec_TCC5-1 nil 3242699046 3307982969 ("" (grind) nil nil) proved nil 680 500 t shostak)) (bv_lem 0 (bv_lem-1 nil 3242703392 3307982969 ("" (skosimp) (("" (assert) nil nil)) nil) proved nil 42 40 t shostak)) (bv2nat_rec_bound 0 (bv2nat_rec_bound-1 nil 3242703427 3307982972 ("" (induct-and-rewrite "n" 1 "bv2nat_rec" "exp2") (("" (lemma "bv_lem") (("" (inst - "jt!1" "bv!1") (("" (expand "^") (("" (expand "b2n") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) proved nil 2982 2120 t shostak)) (bv2nat_TCC1 0 (bv2nat_TCC1-1 nil 3242699046 3307982972 ("" (grind) nil nil) proved nil 35 30 t shostak)) (bv2nat_TCC2 0 (bv2nat_TCC2-1 nil 3242699046 3307982972 ("" (skosimp*) (("" (rewrite "bv2nat_rec_bound") nil nil)) nil) proved nil 109 70 t shostak)) (bv2nat_inj_rec 0 (bv2nat_inj_rec-1 nil 3242703463 3307982976 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (assert) (("2" (expand "bv2nat_rec" +) (("2" (expand "^") (("2" (inst - "bv1!1" "bv2!1") (("2" (bddsimp) (("1" (skosimp*) (("1" (inst?) (("1" (assert) (("1" (expand "b2n") (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst -4 "jt!1") (("2" (assert) nil nil)) nil) ("3" (hide 2 3) (("3" (lemma "bv2nat_rec_bound") (("3" (inst-cp - "jt!1" "bv1!1") (("3" (inst - "jt!1" "bv2!1") (("3" (lemma "bv_lem") (("3" (inst-cp - "jt!1" "bv1!1") (("3" (inst - "jt!1" "bv2!1") (("3" (expand "b2n") (("3" (lift-if) (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (skosimp*) (("4" (inst?) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 3039 2650 t shostak)) (bv2nat_surj_rec 0 (bv2nat_surj_rec-1 nil 3242703513 3307982980 ("" (induct "n" 1 "upto_induction[N]") (("1" (skosimp*) (("1" (typepred "y!1") (("1" (grind) (("1" (inst 1 "fill[N](FALSE)") nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (typepred "y!1") (("2" (expand "exp2") (("2" (expand "bv2nat_rec" +) (("2" (case "FORALL bv,(b:bit),(n:below(N)),(m:{n1:below(N)|n<=n1}):
                   bv2nat_rec(n,bv)=bv2nat_rec(n,bv with [(m):=b])") (("1" (case "y!1<exp2(jt!1)") (("1" (inst -5 "y!1") (("1" (skosimp*) (("1" (inst + "bv!1 with [(jt!1):= FALSE]") (("1" (inst?) (("1" (expand "^") (("1" (assert) (("1" (assert) (("1" (expand "b2n") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst -4 "y!1-exp2(jt!1)") (("1" (expand "^") (("1" (skosimp*) (("1" (inst + "bv!1 with [(jt!1):= TRUE]") (("1" (inst?) (("1" (expand "b2n") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 3) (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (induct-and-rewrite "n" 1 "bv2nat_rec" "^") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 4011 3270 t shostak)) (bv2nat_inj 0 (bv2nat_inj-1 nil 3242703551 3307982980 ("" (expand "bv2nat") (("" (skolem 1 ("x!1" "y!1")) (("" (rewrite "bv2nat_inj_rec") (("" (flatten) (("" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) proved nil 175 110 t shostak)) (bv2nat_surj 0 (bv2nat_surj-1 nil 3242703576 3307982980 ("" (expand "bv2nat") (("" (skolem!) (("" (rewrite "bv2nat_surj_rec") nil nil)) nil)) nil) proved nil 85 80 t shostak)) (bv2nat_bij 0 (bv2nat_bij-1 nil 3242703599 3307982980 ("" (expand "bijective?") (("" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (rewrite "bv2nat_inj") nil nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (rewrite "bv2nat_surj") nil nil)) nil)) nil)) nil)) nil) proved nil 205 100 t shostak)) (bv2nat_rec_fill_F 0 (bv2nat_rec_fill_F-1 nil 3242703627 3307982982 ("" (induct-and-rewrite "n" 1 "bv2nat_rec" "fill" "^" "b2n") nil nil) proved nil 1900 1200 t shostak)) (bv2nat_rec_fill_T 0 (bv2nat_rec_fill_T-1 nil 3242703658 3307982984 ("" (induct-and-rewrite "n" 1 "bv2nat_rec" "fill" "^" "b2n") (("1" (expand "exp2") (("1" (propax) nil nil)) nil) ("2" (expand "exp2" 1 2) (("2" (assert) nil nil)) nil)) nil) proved nil 1910 1610 t shostak)) (bv2nat_fill_F 0 (bv2nat_fill_F-1 nil 3242703711 3307982984 ("" (expand "bv2nat") (("" (rewrite "bv2nat_rec_fill_F") nil nil)) nil) proved nil 58 60 t shostak)) (bv2nat_fill_T 0 (bv2nat_fill_T-1 nil 3242703727 3307982984 ("" (expand "bv2nat") (("" (rewrite "bv2nat_rec_fill_T") nil nil)) nil) proved nil 105 60 t shostak)) (bv2nat_eq0 0 (bv2nat_eq0-1 nil 3242703746 3307982984 ("" (skosimp*) (("" (rewrite "bv2nat_inj") (("" (hide 2) (("" (rewrite "bv2nat_fill_F") nil nil)) nil)) nil)) nil) proved nil 184 190 t shostak)) (bv2nat_eq_max 0 (bv2nat_eq_max-1 nil 3242703767 3307982985 ("" (skosimp*) (("" (rewrite "bv2nat_inj") (("" (hide 2) (("" (rewrite "bv2nat_fill_T") nil nil)) nil)) nil)) nil) proved nil 294 220 t shostak)) (bv2nat_top_bit_TCC1 0 (bv2nat_top_bit_TCC1-1 nil 3242699047 3307982985 ("" (grind) nil nil) proved nil 89 90 t shostak)) (bv2nat_top_bit_TCC2 0 (bv2nat_top_bit_TCC2-1 nil 3242699047 3307982986 ("" (grind) nil nil) proved nil 744 710 t shostak)) (bv2nat_top_bit_TCC3 0 (bv2nat_top_bit_TCC3-1 nil 3242699047 3307982986 ("" (grind) nil nil) proved nil 799 740 t shostak)) (bv2nat_top_bit 0 (bv2nat_top_bit-1 nil 3242703785 3307982988 ("" (skosimp*) (("" (expand "^") (("" (expand "bv2nat") (("" (expand "bv2nat_rec") (("" (lift-if) (("" (assert) (("" (lemma "bv_lem") (("" (inst?) (("" (prop) (("1" (expand "b2n") (("1" (expand "^") (("1" (assert) nil nil)) nil)) nil) ("2" (expand "b2n") (("2" (expand "^") (("2" (assert) (("2" (rewrite "bv2nat_rec_bound") nil nil)) nil)) nil)) nil) ("3" (expand "b2n") (("3" (expand "^") (("3" (lift-if) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 1365 1110 t shostak)) (bv2nat_topbit_TCC1 0 (bv2nat_topbit_TCC1-1 nil 3242699047 3307982988 ("" (grind) nil nil) proved nil 93 90 t shostak)) (bv2nat_topbit 0 (bv2nat_topbit-1 nil 3242703825 3307982988 ("" (skosimp*) (("" (lemma "bv2nat_top_bit") (("" (inst?) (("" (assert) (("" (ground) nil nil)) nil)) nil)) nil)) nil) proved nil 177 170 t shostak)) (nat2bv_TCC1 0 (nat2bv_TCC1-1 nil 3242699047 3307982988 ("" (inst 1 "inverse(bv2nat)") (("" (skosimp*) (("" (lemma "bijective_inverse[bvec[N],below(exp2(N))]") (("" (inst -1 "inverse[bvec[N], below(exp2(N))](bv2nat)(x1!1)" "x1!1" "bv2nat") (("1" (ground) nil nil) ("2" (hide 2) (("2" (lemma "bv2nat_bij") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 215 170 t shostak)) (nat2bv_def 0 (nat2bv_def-1 nil 3242703848 3307982989 ("" (apply-extensionality 1 :hide? t) (("1" (typepred "nat2bv(x!1)") (("1" (expand "inverse") (("1" (lemma "epsilon_ax[bvec[N]]") (("1" (inst?) (("1" (split -1) (("1" (rewrite "bv2nat_inj") nil nil) ("2" (hide 2) (("2" (inst 1 "nat2bv(x!1)") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "inverse") (("2" (lemma "epsilon_ax[bvec[N]]") (("2" (inst?) (("2" (split -1) (("1" (propax) nil nil) ("2" (hide 2) (("2" (inst 1 "nat2bv(x1!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 610 410 t shostak)) (nat2bv_bij 0 (nat2bv_bij-1 nil 3242703876 3307982989 ("" (lemma "bv2nat_bij") (("" (rewrite "nat2bv_def") (("" (rewrite "bij_inv_is_bij") nil nil)) nil)) nil) proved nil 101 60 t shostak)) (nat2bv_inv 0 (nat2bv_inv-1 nil 3242703899 3307982989 ("" (skosimp*) (("" (typepred "nat2bv(bv2nat(bv!1))") (("" (rewrite "bv2nat_inj") nil nil)) nil)) nil) proved nil 55 50 t shostak)) (nat2bv_rew 0 (nat2bv_rew-1 nil 3242703922 3307982989 ("" (skosimp*) (("" (typepred "nat2bv(val!1)") (("" (prop) (("1" (assert) nil nil) ("2" (rewrite "bv2nat_inj") nil nil)) nil)) nil)) nil) proved nil 151 150 t shostak)) (bv2nat_inv 0 (bv2nat_inv-1 nil 3242703948 3307982989 ("" (skosimp*) (("" (assert) nil nil)) nil) proved nil 51 50 t shostak)))(empty_bv)(bv_caret (caret_TCC1 0 (caret_TCC1-1 nil 3242699047 3307982990 ("" (subtype-tcc) nil nil) proved nil 429 390 t shostak)) (caret_TCC2 0 (caret_TCC2-1 nil 3242699047 3307982991 ("" (subtype-tcc) nil nil) proved nil 1189 860 t shostak)) (bv_caret_all_TCC1 0 (bv_caret_all_TCC1-1 nil 3242699047 3307982991 ("" (subtype-tcc) nil nil) proved nil 199 100 t shostak)) (bv_caret_all_TCC2 0 (bv_caret_all_TCC2-1 nil 3242699047 3307982991 ("" (subtype-tcc) nil nil) proved nil 85 80 t shostak)) (bv_caret_all 0 (bv_caret_all-1 nil 3242704209 3307982992 ("" (skosimp*) (("" (expand "^") (("" (apply-extensionality 1 :hide? t) nil nil)) nil)) nil) proved nil 103 110 t shostak)) (bv_caret_ii_0_TCC1 0 (bv_caret_ii_0_TCC1-1 nil 3242699047 3307982992 ("" (subtype-tcc) nil nil) proved nil 69 40 t shostak)) (bv_caret_ii_0 0 (bv_caret_ii_0-1 nil 3242704230 3307982992 ("" (skosimp*) (("" (expand "^") (("" (propax) nil nil)) nil)) nil) proved nil 351 170 t shostak)) (bv_caret_elim_TCC1 0 (bv_caret_elim_TCC1-1 nil 3242699047 3307982993 ("" (subtype-tcc) nil nil) proved nil 562 470 t shostak)) (bv_caret_elim_TCC2 0 (bv_caret_elim_TCC2-1 nil 3242699047 3307982993 ("" (subtype-tcc) nil nil) proved nil 528 480 t shostak)) (bv_caret_elim 0 (bv_caret_elim-1 nil 3242704247 3307982994 ("" (skosimp*) (("" (expand "^") (("" (propax) nil nil)) nil)) nil) proved nil 858 730 t shostak)))(infinite_sets_def (infinite_nonempty 0 (infinite_nonempty-1 nil 3249344193 3307982994 ("" (skolem-typepred) (("" (expand "nonempty?") (("" (rewrite "emptyset_is_empty?[T]") (("" (assert) nil nil)) nil)) nil)) nil) proved ((nonempty? const-decl "bool" sets nil) (infinite_set type-eq-decl nil infinite_sets_def nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil infinite_sets_def nil)) 55 60 t nil)) (infinite_add 0 (infinite_add-1 nil 3249344193 3307982994 ("" (skolem-typepred) (("" (use "member_add[T]") (("" (assert) (("" (lemma "finite_remove[T]") (("" (inst - "add(t!1, Inf!1)" "t!1") (("" (use "remove_add_member[T]") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((finite_remove judgement-tcc nil finite_sets nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (finite_set type-eq-decl nil finite_sets nil) (infinite_set type-eq-decl nil infinite_sets_def nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil infinite_sets_def nil)) 173 110 nil nil)) (infinite_remove 0 (infinite_remove-1 nil 3249344193 3307982995 ("" (skolem-typepred) (("" (use "member_remove[T]") (("" (assert) (("" (lemma "finite_add[T]") (("" (inst - "remove(t!1, Inf!1)" "t!1") (("" (forward-chain "add_remove_member[T]") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((finite_add formula-decl nil finite_sets nil) (remove const-decl "set" sets nil) (finite_set type-eq-decl nil finite_sets nil) (infinite_set type-eq-decl nil infinite_sets_def nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil infinite_sets_def nil)) 157 100 nil nil)) (infinite_superset 0 (infinite_superset-1 nil 3249344193 3307982995 ("" (skosimp :preds? t) (("" (forward-chain "finite_subset[T]") nil nil)) nil) proved ((finite_subset formula-decl nil finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (T formal-type-decl nil infinite_sets_def nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (infinite_set type-eq-decl nil infinite_sets_def nil)) 59 60 t nil)) (infinite_union_left 0 (infinite_union_left-1 nil 3249344193 3307982995 ("" (skolem-typepred) (("" (expand* "union" "member" "is_finite") (("" (skolem-typepred) (("" (inst + "N!1" "restrict[({x: T | Inf!1(x) OR S!1(x)}), (Inf!1), below[N!1]](f!1)") (("" (expand* "injective?" "restrict") (("" (skosimp* :preds? t) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (union const-decl "set" sets nil) (infinite_set type-eq-decl nil infinite_sets_def nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil infinite_sets_def nil)) 375 310 nil nil)) (infinite_union_right 0 (infinite_union_right-1 nil 3249344193 3307982995 ("" (skolem-typepred) (("" (use "union_commutative[T]") (("" (use "infinite_union_left") (("" (assert) nil nil)) nil)) nil)) nil) proved ((infinite_union_left judgement-tcc nil infinite_sets_def nil) (infinite_set type-eq-decl nil infinite_sets_def nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil infinite_sets_def nil)) 160 120 nil nil)) (infinite_union 0 (infinite_union-1 nil 3249344193 3307982995 ("" (skosimp) (("" (use "finite_union[T]") nil nil)) nil) proved ((set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (finite_union judgement-tcc nil finite_sets nil) (T formal-type-decl nil infinite_sets_def nil)) 62 50 t nil)) (infinite_intersection 0 (infinite_intersection-1 nil 3249344193 3307982995 ("" (skosimp) (("" (use "finite_intersection1[T]") (("" (use "finite_intersection2[T]") (("" (assert) nil nil)) nil)) nil)) nil) proved ((finite_intersection1 judgement-tcc nil finite_sets nil) (T formal-type-decl nil infinite_sets_def nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (finite_intersection2 judgement-tcc nil finite_sets nil)) 82 80 t nil)) (infinite_difference 0 (infinite_difference-1 nil 3249344193 3307982997 ("" (skolem-typepred) (("" (expand* "difference" "member" "is_finite" "injective?") (("" (skosimp*) (("" (inst + "N!1 + N!2" "LAMBDA (s: (Inf!1)): IF Fin!1(s) THEN f!1(s) + N!2 ELSE f!2(s) ENDIF") (("1" (skosimp) (("1" (smash) (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (inst? -3) (("2" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (skosimp) nil nil) ("4" (skosimp) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (difference const-decl "set" sets nil) (infinite_set type-eq-decl nil infinite_sets_def nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil infinite_sets_def nil)) 1317 1170 t nil)) (infinite_rest 0 (infinite_rest-1 nil 3249344193 3307982997 ("" (skolem-typepred) (("" (expand "rest") (("" (prop) (("" (use "add_remove_member[T]") (("" (expand "member") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((rest const-decl "set" sets nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (infinite_set type-eq-decl nil infinite_sets_def nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil infinite_sets_def nil)) 163 160 nil nil)) (infinite_fullset 0 (infinite_fullset-1 nil 3249344193 3307982997 ("" (flatten) (("" (skolem!) (("" (lemma "finite_subset[T]" ("A" "fullset[T]" "s" "S!1")) (("1" (expand* "subset?" "fullset" "member") nil nil) ("2" (propax) nil nil)) nil)) nil)) nil) proved ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (finite_subset formula-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (fullset const-decl "set" sets nil) (T formal-type-decl nil infinite_sets_def nil)) 112 70 t nil)))(finite_sets_of_sets (powerset_natfun_rec_TCC1 0 (powerset_natfun_rec_TCC1-1 nil 3242842726 3307982998 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (surjective? const-decl "bool" functions nil)) 677 390 t shostak)) (powerset_natfun_rec_TCC2 0 (powerset_natfun_rec_TCC2-2 "" 3332190247 3332253092 ("" (skolem-typepred) (("" (flatten) (("" (assert) nil nil)) nil)) nil) proved ((powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (bijective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 3982 600 t shostak) (powerset_natfun_rec_TCC2-1 nil 3242842733 3307982998 ("" (skolem-typepred) (("" (hide -1 -2 -3) (("" (flatten) (("" (lemma "empty_card[T]") (("" (inst -1 "A!1") (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (bijective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 276 260 t shostak)) (powerset_natfun_rec_TCC3 0 (powerset_natfun_rec_TCC3-1 nil 3242843028 3307983000 ("" (grind) (("" (lemma "empty_card[T]") (("" (inst -1 "A!1") (("" (grind) nil nil)) nil)) nil)) nil) proved ((empty_card formula-decl nil finite_sets nil) (empty? const-decl "bool" sets nil) (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (surjective? const-decl "bool" functions nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 2070 1610 t shostak)) (powerset_natfun_rec_TCC4 0 (powerset_natfun_rec_TCC4-1 nil 3242843036 3307983002 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (injective? const-decl "bool" functions nil) (subset? const-decl "bool" sets nil) (surjective? const-decl "bool" functions nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (inverse const-decl "D" function_inverse nil) (member const-decl "bool" sets nil)) 1535 580 t shostak)) (powerset_natfun_rec_TCC5 0 (powerset_natfun_rec_TCC5-1 nil 3242962925 3307983002 ("" (grind) nil nil) proved ((inverse const-decl "D" function_inverse nil) (member const-decl "bool" sets nil)) 162 90 t shostak)) (powerset_natfun_rec_TCC6 0 (powerset_natfun_rec_TCC6-1 nil 3242962925 3307983004 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (TRUE const-decl "bool" booleans nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (surjective? const-decl "bool" functions nil) (subset? const-decl "bool" sets nil) (injective? const-decl "bool" functions nil) (inverse const-decl "D" function_inverse nil) (member const-decl "bool" sets nil)) 2391 1910 t shostak)) (powerset_natfun_rec_bound 0 (powerset_natfun_rec_bound-1 nil 3242966710 3307983006 ("" (skolem 1 ("A!1" _ "f!1" "B!1")) (("" (induct-and-simplify "n") nil nil)) nil) proved ((member const-decl "bool" sets nil) (inverse const-decl "D" function_inverse nil) (upto_induction formula-decl nil bounded_nat_inductions nil) (T formal-type-decl nil finite_sets_of_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (powerset_natfun_rec def-decl "nat" finite_sets_of_sets nil) (powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (bijective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil)) 1812 1640 t shostak)) (powerset_natfun_TCC1 0 (powerset_natfun_TCC1-1 nil 3242843042 3307983007 ("" (skosimp) (("" (use "Card_bijection[T]") (("" (inst -1 "A!1" "card(A!1)") (("" (rewrite "card_def") (("" (assert) (("" (skosimp) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Card_bijection formula-decl nil finite_sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (card_def formula-decl nil finite_sets nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 441 400 t shostak)) (powerset_natfun_TCC2 0 (powerset_natfun_TCC2-1 nil 3242843103 3307983007 ("" (grind) nil nil) proved ((choose const-decl "(p)" sets nil)) 55 50 t shostak)) (powerset_natfun_TCC3 0 (powerset_natfun_TCC3-1 nil 3242933158 3307983007 ("" (skosimp) (("" (beta) (("" (lemma "powerset_natfun_rec_bound") (("" (inst?) (("" (hide 2) (("" (use "Card_bijection[T]") (("" (inst -1 "A!1" "card(A!1)") (("" (rewrite "card_def") (("" (assert) (("" (skosimp) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (bijective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (powerset_natfun_rec_bound formula-decl nil finite_sets_of_sets nil)) 528 480 t shostak)) (powerset_natfun_inj_rec_TCC1 0 (powerset_natfun_inj_rec_TCC1-1 nil 3242962926 3307983008 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (surjective? const-decl "bool" functions nil)) 666 410 t shostak)) (powerset_natfun_inj_rec_TCC2 0 (powerset_natfun_inj_rec_TCC2-2 "" 3332564344 3332564344 ("" (skolem-typepred) (("" (flatten) (("" (lemma "nonempty_card[T]") (("" (inst?) (("" (assert) (("" (expand "nonempty?") (("" (expand "empty?") (("" (skolem-typepred) (("" (expand "member") (("" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 256308 1820 t shostak) (powerset_natfun_inj_rec_TCC2-1 nil 3242962926 3307983009 ("" (grind) nil nil) proved ((nonempty? const-decl "bool" sets nil) (x!1 skolem-const-decl "T" finite_sets_of_sets nil) (A!1 skolem-const-decl "finite_set[T]" finite_sets_of_sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty_card formula-decl nil finite_sets nil) (powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (bijective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 1297 970 t shostak)) (powerset_natfun_inj_rec 0 (powerset_natfun_inj_rec-1 nil 3242959167 3307983018 ("" (skolem 1 ("A!1" _ "f!1" "B1!1" "B2!1")) (("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skosimp) (("3" (expand "powerset_natfun_rec" +) (("3" (split 1) (("1" (flatten) (("1" (skosimp) (("1" (case-replace "m!1 = jt!1") (("1" (assert) (("1" (expand "member") (("1" (lemma "powerset_natfun_rec_bound") (("1" (inst-cp -1 "A!1" "jt!1" "f!1" "B1!1") (("1" (inst -1 "A!1" "jt!1" "f!1" "B2!1") (("1" (assert) (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (split -4) (("1" (inst -1 "m!1") (("1" (assert) nil nil)) nil) ("2" (replace 1) (("2" (assert) (("2" (expand "member") (("2" (lemma "powerset_natfun_rec_bound") (("2" (inst-cp -1 "A!1" "jt!1" "f!1" "B1!1") (("2" (inst -1 "A!1" "jt!1" "f!1" "B2!1") (("2" (assert) (("2" (hide 4) (("2" (lift-if) (("2" (prop) (("1" (assert) (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (lift-if) (("2" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("3" (lift-if) (("3" (ground) nil nil)) nil) ("4" (lift-if) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (split -4) (("1" (inst -2 "jt!1") (("1" (assert) (("1" (grind) nil nil)) nil)) nil) ("2" (skosimp) (("2" (inst -2 "m!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide -1 1) (("4" (grind) (("4" (lemma "empty_card[T]") (("4" (inst -1 "A!1") (("4" (grind) nil nil)) nil)) nil)) nil)) nil) ("5" (hide -1 1) (("5" (grind) (("5" (lemma "empty_card[T]") (("5" (inst -1 "A!1") (("5" (grind) nil nil)) nil)) nil)) nil)) nil) ("6" (hide -1 1) (("6" (grind) nil nil)) nil) ("7" (hide -1 1) (("7" (grind) nil nil)) nil)) nil)) nil) proved ((< const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil) (pred type-eq-decl nil defined_types nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (below type-eq-decl nil naturalnumbers nil) (bijective? const-decl "bool" functions nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (powerset_natfun_rec def-decl "nat" finite_sets_of_sets nil) (member const-decl "bool" sets nil) (inverse const-decl "D" function_inverse nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (upto_induction formula-decl nil bounded_nat_inductions nil) (powerset_natfun_rec_bound formula-decl nil finite_sets_of_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" sets nil) (empty_card formula-decl nil finite_sets nil)) 8497 4780 t shostak)) (powerset_natfun_inj 0 (powerset_natfun_inj-1 nil 3242962518 3307983022 ("" (lemma "powerset_natfun_inj_rec") (("" (skosimp) (("" (skosimp) (("" (expand "powerset_natfun") (("" (inst? -1) (("1" (assert) (("1" (apply-extensionality) (("1" (expand "member") (("1" (hide -2) (("1" (hide 2) (("1" (name-replace "f" "choose(bijective?[(A!1), below(card(A!1))])") (("1" (inst -1 "f(x!1)") (("1" (assert) (("1" (typepred "f") (("1" (expand "inverse") (("1" (case "A!1(x!1)") (("1" (case-replace "(epsilon! (x: (A!1)): f(x) = f(x!1)) = x!1") (("1" (iff) (("1" (expand "restrict") (("1" (propax) nil nil)) nil)) nil) ("2" (expand "restrict") (("2" (hide -3 2) (("2" (use "epsilon_ax[(A!1)]") (("1" (split) (("1" (expand "bijective?") (("1" (flatten) (("1" (expand "injective?") (("1" (inst?) (("1" (assert) nil nil) ("2" (inst 1 "x!1") nil nil) ("3" (skosimp) nil nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil) ("2" (skosimp) nil nil) ("3" (inst 1 "x!1") nil nil)) nil)) nil)) nil) ("3" (inst 1 "x!1") nil nil) ("4" (skosimp) nil nil)) nil) ("2" (hide -1 -2) (("2" (typepred "B1!1") (("2" (typepred "B2!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "f") (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil) ("3" (typepred "B1!1") (("3" (typepred "B2!1") (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (lemma "Card_bijection[T]") (("2" (inst -1 "A!1" "card(A!1)") (("2" (rewrite "card_def") (("2" (assert) (("2" (skosimp) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (lemma "Card_bijection[T]") (("2" (inst -1 "A!1" "card(A!1)") (("2" (rewrite "card_def") (("2" (assert) (("2" (skosimp) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((powerset_natfun const-decl "below(exp2(card(A)))" finite_sets_of_sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (below type-eq-decl nil nat_types nil) (card_def formula-decl nil finite_sets nil) (Card_bijection formula-decl nil finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (TRUE const-decl "bool" booleans nil) (subset? const-decl "bool" sets nil) (inverse const-decl "D" function_inverse nil) (surjective? const-decl "bool" functions nil) (powerset const-decl "setofsets" sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (bijective? const-decl "bool" functions nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (powerset_natfun_inj_rec formula-decl nil finite_sets_of_sets nil)) 3904 1930 t shostak)) (powerset_finite 0 (powerset_finite-1 nil 3242843110 3307983023 ("" (use "powerset_natfun_inj") (("" (skosimp) (("" (expand "is_finite") (("" (inst 1 "exp2(card(A!1))" "powerset_natfun(A!1)") (("" (expand "injective?") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (T formal-type-decl nil finite_sets_of_sets nil) (set type-eq-decl nil sets nil) (finite_set type-eq-decl nil finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (Card const-decl "nat" finite_sets nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (below type-eq-decl nil naturalnumbers nil) (powerset_natfun const-decl "below(exp2(card(A)))" finite_sets_of_sets nil) (choose const-decl "(p)" sets nil) (injective? const-decl "bool" functions nil) (is_finite const-decl "bool" finite_sets nil) (powerset_natfun_inj formula-decl nil finite_sets_of_sets nil)) 1058 560 t shostak)) (Union_finite 0 (Union_finite-1 nil 3252521570 3307983033 ("" (skolem!) (("" (expand "every") (("" (prop) (("1" (lemma "finite_subset[set[T]]") (("1" (inst - "powerset(Union(SS!1))" "SS!1") (("1" (grind) nil nil) ("2" (use "powerset_finite") nil nil)) nil)) nil) ("2" (skolem!) (("2" (lemma "finite_subset[T]") (("2" (inst - "Union(SS!1)" "x!1") (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (case "FORALL (n: nat), (B: setofsets[T]): (EXISTS (f: [(B) -> below[n]]): injective?(f)) AND (FORALL (b: (B)): is_finite(b)) => is_finite(Union(B))") (("1" (expand "is_finite" -2) (("1" (skolem!) (("1" (inst - "N!1" "SS!1") (("1" (prop) (("1" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (delete -1 -2 2) (("2" (induct "n") (("1" (skosimp*) (("1" (expand "is_finite" +) (("1" (inst + "1" "LAMBDA (b: (Union(B!1))): 0") (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (expand "Union") (("1" (skosimp*) (("1" (typepred "f!1(a!1)") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (case "EXISTS (b: (B!1)): f!1(b) = j!1") (("1" (skolem!) (("1" (inst - "remove(b!1, B!1)") (("1" (prop) (("1" (inst - "b!1") (("1" (expand "is_finite") (("1" (skosimp*) (("1" (inst + "N!1 + N!2" "LAMBDA (c: (Union(B!1))): IF b!1(c) THEN N!1 + f!3(c) ELSE f!2(c) ENDIF") (("1" (expand "injective?") (("1" (skosimp :preds? t) (("1" (expand "Union") (("1" (skosimp*) (("1" (smash) (("1" (inst -6 "x1!1" "x2!1") (("1" (assert) nil nil)) nil) ("2" (inst - "x1!1" "x2!1") (("1" (assert) nil nil) ("2" (expand* "remove" "member" "Union") (("2" (inst + "a!2") nil nil)) nil) ("3" (expand* "remove" "member" "Union") (("3" (inst + "a!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (skosimp :preds? t) (("3" (expand* "remove" "member" "Union") (("3" (skolem!) (("3" (inst + "a!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("4" (skosimp) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "LAMBDA (c: (remove(b!1, B!1))): f!1(c)") (("1" (expand "injective?") (("1" (skosimp :preds? t) (("1" (expand* "remove" "member") (("1" (flatten) (("1" (inst - "x1!1" "x2!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand* "remove" "member" "injective?") (("2" (flatten) (("2" (inst - "b!1" "c!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (skolem-typepred) (("3" (expand* "remove" "member") (("3" (flatten) nil nil)) nil)) nil)) nil) ("3" (skolem-typepred) (("3" (expand* "remove" "member") (("3" (flatten) (("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst - "B!1") (("2" (prop) (("2" (inst + "f!1") (("1" (expand "injective?") (("1" (propax) nil nil)) nil) ("2" (skolem!) (("2" (inst + "x1!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat_induction formula-decl nil naturalnumbers nil) (TRUE const-decl "bool" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (remove const-decl "set" sets nil) (/= const-decl "boolean" notequal nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets_of_sets nil) (finite_subset formula-decl nil finite_sets nil) (powerset_finite judgement-tcc nil finite_sets_of_sets nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (powerset const-decl "setofsets" sets nil) (Union const-decl "set" sets nil)) 9713 3260 t shostak)) (Union_infinite 0 (Union_infinite-1 nil 3252521819 3307983033 ("" (skolem!) (("" (use "Union_finite") (("" (expand* "every" "some") (("" (smash) (("1" (skolem!) (("1" (inst - "x!1") nil nil)) nil) ("2" (skolem!) (("2" (inst + "x!1") nil nil)) nil)) nil)) nil)) nil)) nil) proved ((Union_finite formula-decl nil finite_sets_of_sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets_of_sets nil)) 273 190 t shostak)) (Intersection_finite 0 (Intersection_finite-1 nil 3252521839 3307983034 ("" (expand* "every" "is_finite" "nonempty?" "empty?" "member") (("" (skosimp*) (("" (inst - "x!1") (("" (skolem!) (("" (inst + "N!1" "LAMBDA (a: (Intersection(SS!1))): f!1(a)") (("1" (expand "injective?") (("1" (skosimp :preds? t) (("1" (expand "Intersection") (("1" (inst - "x!1") (("1" (inst - "x!1") (("1" (inst - "x1!1" "x2!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "Intersection") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((injective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (Intersection const-decl "set" sets nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (is_finite const-decl "bool" finite_sets nil)) 572 480 t shostak)) (Intersection_infinite 0 (Intersection_infinite-1 nil 3252521879 3307983034 ("" (expand* "every" "is_finite") (("" (skosimp*) (("" (inst + "N!1" "LAMBDA (a: (Intersection(SS!1))): f!1(a)") (("1" (expand "injective?") (("1" (skosimp :preds? t) (("1" (expand "Intersection") (("1" (inst - "x!1") (("1" (inst - "x!1") (("1" (inst - "x1!1" "x2!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (expand "Intersection") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((injective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (T formal-type-decl nil finite_sets_of_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (set type-eq-decl nil sets nil) (Intersection const-decl "set" sets nil) (is_finite const-decl "bool" finite_sets nil)) 349 270 t shostak)) (Complement_finite 0 (Complement_finite-1 nil 3252521922 3307983035 ("" (skolem!) (("" (expand* "Complement" "is_finite" "injective?") (("" (prop) (("1" (skolem!) (("1" (inst + "N!1" "LAMBDA (a: (SS!1)): f!1(complement(a))") (("1" (skosimp) (("1" (inst - "complement(x1!1)" "complement(x2!1)") (("1" (assert) (("1" (rewrite "complement_equal") nil nil)) nil) ("2" (inst + "x2!1") nil nil) ("3" (inst + "x1!1") nil nil)) nil)) nil) ("2" (skolem!) (("2" (inst?) nil nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst + "N!1" "LAMBDA (c: ({a: set[T] | EXISTS (b: (SS!1)): a = complement(b)})): f!1(complement(c))") (("1" (skosimp :preds? t) (("1" (skosimp*) (("1" (inst - "complement(x1!1)" "complement(x2!1)") (("1" (assert) (("1" (rewrite "complement_equal") nil nil)) nil) ("2" (lemma "complement_complement[T]") (("2" (inst - "b!2") (("2" (assert) nil nil)) nil)) nil) ("3" (lemma "complement_complement[T]") (("3" (inst - "b!1") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp* :preds? t) (("2" (use "complement_complement[T]") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((is_finite const-decl "bool" finite_sets nil) (injective? const-decl "bool" functions nil) (Complement const-decl "setofsets[T]" sets_lemmas nil) (complement_complement formula-decl nil sets_lemmas nil) (NOT const-decl "[bool -> bool]" booleans nil) (complement_equal formula-decl nil sets_lemmas nil) (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (T formal-type-decl nil finite_sets_of_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (complement const-decl "set" sets nil)) 605 390 t shostak)) (Complement_is_finite 0 (Complement_is_finite-1 nil 3252221181 3307983035 ("" (skolem!) (("" (rewrite "Complement_finite") nil nil)) nil) proved ((Complement_finite formula-decl nil finite_sets_of_sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil)) 42 40 t shostak)) (Complement_infinite 0 (Complement_infinite-1 nil 3252522256 3307983035 ("" (skolem!) (("" (use "Complement_finite") (("" (prop) nil nil)) nil)) nil) proved ((Complement_finite formula-decl nil finite_sets_of_sets nil) (setofsets type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil finite_sets_of_sets nil)) 52 50 t shostak)) (Complement_is_infinite 0 (Complement_is_infinite-1 nil 3252221181 3307983035 ("" (skolem!) (("" (rewrite "Complement_infinite") nil nil)) nil) proved ((Complement_infinite formula-decl nil finite_sets_of_sets nil) (T formal-type-decl nil finite_sets_of_sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (setof type-eq-decl nil defined_types nil) (setofsets type-eq-decl nil sets nil) (set type-eq-decl nil sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (is_finite const-decl "bool" finite_sets nil) (infinite_set type-eq-decl nil infinite_sets_def nil)) 41 40 t shostak)))(EquivalenceClosure (EquivClos_TCC1 0 (EquivClos_TCC1-1 nil 3243015830 3307983035 ("" (skosimp*) (("" (expand "equivalence?") (("" (expand "EquivClos") (("" (prop) (("1" (expand "reflexive?") (("1" (skosimp*) (("1" (typepred "S!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "reflexive?") (("1" (inst?) nil))))))))))))) ("2" (expand "symmetric?") (("2" (skosimp*) (("2" (typepred "S!1") (("2" (expand "equivalence?") (("2" (flatten) (("2" (inst?) (("2" (prop) (("2" (expand "symmetric?") (("2" (inst -3 "x!1" "y!1") (("2" (assert) nil))))))))))))))))))) ("3" (expand "transitive?") (("3" (skosimp*) (("3" (typepred "S!1") (("3" (expand "equivalence?") (("3" (flatten) (("3" (inst?) (("3" (inst?) (("3" (prop) (("3" (expand "transitive?") (("3" (inst -5 "x!1" "y!1" "z!1") (("3" (assert) nil)))))))))))))))))))))))))))) nil) proved ((equivalence? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PRED type-eq-decl nil defined_types nil) (T formal-type-decl nil EquivalenceClosure nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 299 210 nil nil)) (EquivClosSuperset 0 (EquivClosSuperset-1 nil 3243015830 3307983035 ("" (skosimp*) (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivClos") (("" (skosimp*) (("" (expand "subset?") (("" (inst?) (("" (expand "member") (("" (assert) nil)))))))))))))))))) nil) proved ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil EquivalenceClosure nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil)) 131 90 nil nil)) (EquivClosMonotone 0 (EquivClosMonotone-1 nil 3243015830 3307983036 ("" (skosimp*) (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivClos") (("" (skosimp*) (("" (typepred "S!2") (("" (inst -3 "S!2") (("" (assert) (("" (expand "subset?") (("" (expand "member") (("" (skosimp*) (("" (inst?) (("" (inst?) (("" (assert) nil)))))))))))))))))))))))))))) nil) proved ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil EquivalenceClosure nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil)) 135 120 nil nil)) (EquivClosLeast 0 (EquivClosLeast-1 nil 3243015830 3307983036 ("" (skosimp*) (("" (expand "subset?" 1) (("" (skosimp*) (("" (expand "member") (("" (expand "EquivClos") (("" (inst?) (("" (assert) nil)))))))))))) nil) proved ((subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil EquivalenceClosure nil) (equivalence type-eq-decl nil relations nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil)) 133 90 nil nil)) (EquivClosIdempotent 0 (EquivClosIdempotent-1 nil 3243015830 3307983036 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (iff) (("" (prop) (("1" (lemma "EquivClosLeast") (("1" (inst -1 "EquivClos(R!1)" "EquivClos(R!1)") (("1" (assert) (("1" (expand "subset?") (("1" (expand "member") (("1" (prop) (("1" (inst?) (("1" (assert) nil))) ("2" (skosimp*) nil))))))))))))) ("2" (lemma "EquivClosSuperset") (("2" (inst -1 "EquivClos(R!1)") (("2" (expand "subset?") (("2" (inst -1 "(x!1, x!2)") (("2" (assert) (("2" (expand "member") (("2" (propax) nil)))))))))))))))))))) nil) proved ((T formal-type-decl nil EquivalenceClosure nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (EquivClosLeast formula-decl nil EquivalenceClosure nil) (EquivClosSuperset formula-decl nil EquivalenceClosure nil)) 265 220 nil nil)) (EquivalenceCharacterization 0 (EquivalenceCharacterization-1 nil 3243015830 3307983036 ("" (skosimp*) (("" (prop) (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (prop) (("1" (lemma "EquivClosSuperset") (("1" (inst?) (("1" (expand "subset?") (("1" (expand "member") (("1" (inst?) (("1" (assert) nil))))))))))) ("2" (lemma "EquivClosLeast") (("2" (inst -1 "S!1" "S!1") (("2" (assert) (("2" (prop) (("1" (expand "subset?") (("1" (expand "member") (("1" (inst?) (("1" (assert) nil))))))) ("2" (expand "subset?") (("2" (expand "member") (("2" (skosimp*) nil))))))))))))))))))) ("2" (assert) nil)))) nil) proved ((EquivClosLeast formula-decl nil EquivalenceClosure nil) (EquivClosSuperset formula-decl nil EquivalenceClosure nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil EquivalenceClosure nil)) 269 220 nil nil)))(QuotientDefinition (EquivClassNonEmpty 0 (EquivClassNonEmpty-1 nil 3243015830 3307983036 ("" (skosimp*) (("" (expand "nonempty?") (("" (expand "empty?") (("" (expand "member") (("" (expand "EquivClass") (("" (inst -1 "x!1") (("" (typepred "S!1") (("" (expand "equivalence?") (("" (expand "reflexive?") (("" (flatten) (("" (inst -1 "x!1") nil)))))))))))))))))))) nil) proved ((nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (T formal-type-decl nil QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (empty? const-decl "bool" sets nil)) 121 70 nil nil)) (EquivClassEq 0 (EquivClassEq-1 nil 3243015830 3307983037 ("" (skosimp*) (("" (typepred "S!1") (("" (expand "EquivClass") (("" (prop) (("1" (case "S!1(x!1, y!1) = (LAMBDA (z: T): S!1(x!1, z))(y!1)") (("1" (replace -2) (("1" (assert) (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "reflexive?") (("1" (inst -3 "y!1") (("1" (assert) nil))))))))))))) ("2" (assert) nil))) ("2" (apply-extensionality :hide? t) (("2" (iff) (("2" (prop) (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (inst -4 "x!1" "y!1") (("1" (assert) (("1" (inst -5 "y!1" "x!1" "x!2") (("1" (assert) nil))))))))))))))) ("2" (expand "equivalence?") (("2" (flatten) (("2" (expand "transitive?") (("2" (inst -5 "x!1" "y!1" "x!2") (("2" (assert) nil)))))))))))))))))))))) nil) proved ((equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (T formal-type-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (reflexive? const-decl "bool" relations nil) (= const-decl "[T, T -> boolean]" equalities nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (EquivClass const-decl "set[T]" QuotientDefinition nil)) 389 330 nil nil)) (repEC_TCC1 0 (repEC_TCC1-1 nil 3243663393 3307983037 ("" (skosimp) (("" (grind) (("" (typepred "S!1") (("" (expand "equivalence?") (("" (flatten) (("" (hide -2 -3) (("" (expand "reflexive?") (("" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((EquivClass const-decl "set[T]" QuotientDefinition nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (T formal-type-decl nil QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil)) 152 110 t shostak)) (EquivClassChoose 0 (EquivClassChoose-1 nil 3243015830 3307983037 ("" (skosimp*) (("" (use "EquivClassNonEmpty") (("" (expand "repEC") (("" (typepred "choose(EquivClass(S!1)(x!1))") (("1" (expand "EquivClass") (("1" (propax) nil nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil) proved ((EquivClassNonEmpty formula-decl nil QuotientDefinition nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil QuotientDefinition nil) (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (set type-eq-decl nil sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (repEC const-decl "T" QuotientDefinition nil)) 186 160 t nil)) (ChooseEquivClassChoose 0 (ChooseEquivClassChoose-1 nil 3243015830 3307983037 ("" (skosimp*) (("" (use "EquivClassNonEmpty") (("" (use "EquivClassEq") (("" (use "EquivClassChoose") (("" (assert) (("" (typepred "S!1") (("" (expand "equivalence?") (("" (expand "symmetric?") (("" (flatten) (("" (inst -2 "x!1" "repEC(S!1)(x!1)") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((EquivClassNonEmpty formula-decl nil QuotientDefinition nil) (repEC const-decl "T" QuotientDefinition nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil QuotientDefinition nil) (EquivClassChoose formula-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil) (symmetric? const-decl "bool" relations nil) (EquivClassEq formula-decl nil QuotientDefinition nil)) 169 130 t nil)) (rep_TCC1 0 (rep_TCC1-1 nil 3243663393 3307983038 ("" (skosimp) (("" (grind) (("" (typepred "P!1") (("" (skosimp) (("" (expand "EquivClass") (("" (decompose-equality) (("" (inst -1 "x!1") (("" (inst -2 "x!1") (("" (assert) (("" (replace -1) (("" (hide -1) (("" (typepred "S!1") (("" (expand "equivalence?") (("" (flatten) (("" (hide -2 -3) (("" (expand "reflexive?") (("" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (reflexive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil QuotientDefinition nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (Quotient type-eq-decl nil QuotientDefinition nil)) 195 130 t shostak)) (rep_is_repEC_TCC1 0 (rep_is_repEC_TCC1-1 nil 3243663393 3307983038 ("" (skosimp) (("" (inst 1 "x!1") nil nil)) nil) proved ((T formal-type-decl nil QuotientDefinition nil)) 40 40 t shostak)) (rep_is_repEC 0 (rep_is_repEC-1 nil 3243664057 3307983038 ("" (grind) nil nil) proved ((choose const-decl "(p)" sets nil) (rep const-decl "T" QuotientDefinition nil) (repEC const-decl "T" QuotientDefinition nil)) 131 130 t shostak)) (rep_lemma 0 (rep_lemma-1 nil 3245191776 3307983038 ("" (grind :if-match nil) (("" (use "epsilon_ax[T]") (("1" (grind :if-match nil) (("1" (inst 1 "x!1") (("1" (inst? -1) nil nil)) nil)) nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil) proved ((TRUE const-decl "bool" booleans nil) (epsilon_ax formula-decl nil epsilons nil) (pred type-eq-decl nil defined_types nil) (set type-eq-decl nil sets nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (T formal-type-decl nil QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (rep const-decl "T" QuotientDefinition nil) (choose const-decl "(p)" sets nil)) 286 230 t shostak)) (quotient_map_surjective 0 (quotient_map_surjective-1 nil 3243015830 3307983038 ("" (skosimp*) (("" (expand "surjective?") (("" (skosimp*) (("" (typepred "y!1") (("" (skosimp*) (("" (inst?) (("" (expand "quotient_map") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((surjective? const-decl "bool" functions nil) (Quotient type-eq-decl nil QuotientDefinition nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (T formal-type-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 73 70 t nil)))(KernelDefinition (EquivalenceKernel_TCC1 0 (EquivalenceKernel_TCC1-1 nil 3243663393 3307983039 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" KernelDefinition nil) (X1 formal-subtype-decl nil KernelDefinition nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (equivalence? const-decl "bool" relations nil)) 597 170 t shostak)) (PreservesEqClosure 0 (PreservesEqClosure-1 nil 3243664201 3307983040 ("" (skosimp*) (("" (expand "PreservesEq") (("" (apply-extensionality :hide? t) (("" (iff) (("" (prop) (("1" (lemma "EquivClosLeast[X1]") (("1" (inst?) (("1" (assert) (("1" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") nil nil)) nil)) nil)) nil) ("2" (lemma "EquivClosSuperset[X1]") (("2" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("2" (inst?) (("2" (lemma "subset_transitive[[X1, X1]]") (("2" (inst -1 "restrict[[X, X], [X1, X1], bool](R!1)" "EquivClos(restrict[[X, X], [X1, X1], boolean](R!1))" "EquivalenceKernel(x!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (EquivClosSuperset formula-decl nil EquivalenceClosure nil) (subset_transitive formula-decl nil sets_lemmas nil) (EquivClosLeast formula-decl nil EquivalenceClosure nil) (restrict_extend formula-decl nil extend nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (subset? const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil) (Y formal-type-decl nil KernelDefinition nil) (X1 formal-subtype-decl nil KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" KernelDefinition nil) (boolean nonempty-type-decl nil booleans nil) (X formal-type-decl nil KernelDefinition nil)) 1502 1290 t shostak)) (PreservesEq_is_preserving 0 (PreservesEq_is_preserving-1 nil 3244148904 3307983041 ("" (grind) (("" (apply-extensionality :hide? t) nil nil)) nil) proved ((bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (PreservesEq const-decl "bool" KernelDefinition nil) (restrict const-decl "R" restrict nil) (= const-decl "[T, T -> boolean]" equalities nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (X formal-type-decl nil KernelDefinition nil) (boolean nonempty-type-decl nil booleans nil) (X1_pred const-decl "[X -> boolean]" KernelDefinition nil) (X1 formal-subtype-decl nil KernelDefinition nil) (Y formal-type-decl nil KernelDefinition nil)) 438 370 t shostak)))(QuotientKernelProperties (Kernel_quotient_map 0 (Kernel_quotient_map-1 nil 3243015830 3307983042 ("" (skosimp*) (("" (expand "quotient_map") (("" (apply-extensionality :hide? t) (("1" (expand "EquivalenceKernel") (("1" (use "EquivClassEq[X1]") (("1" (assert) (("1" (iff) (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil) proved ((quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (Quotient type-eq-decl nil QuotientDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X formal-type-decl nil QuotientKernelProperties nil)) 615 200 t nil)) (PreservesEq_quotient_map 0 (PreservesEq_quotient_map-1 nil 3243665917 3307983043 ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (use "EquivClassEq[X1]") (("" (assert) (("" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (X formal-type-decl nil QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (FALSE const-decl "bool" booleans nil) (restrict_extend formula-decl nil extend nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 1474 1040 t shostak)) (quotient_map_is_Quotient_EqivalenceRespecting 0 (quotient_map_is_Quotient_EqivalenceRespecting-3 nil 3244167432 3307983043 ("" (skosimp*) (("" (expand "PreservesEq") (("" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (use "EquivClassEq[X1]") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (FALSE const-decl "bool" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X formal-type-decl nil QuotientKernelProperties nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (restrict_extend formula-decl nil extend nil)) 198 150 t nil) (quotient_map_is_Quotient_EqivalenceRespecting-2 nil 3244167419 nil ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (use "EquivClassEq") (("" (assert) nil)))))))))))))))) nil) unchecked nil nil nil nil nil) (quotient_map_is_Quotient_EqivalenceRespecting-1 nil 3243663394 3244166838 ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (use "EquivClassEq") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished ((PreservesEq const-decl "bool" KernelDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (X formal-type-decl nil QuotientKernelProperties nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 73 50 t shostak)) (Kernel_ECquotient_map_TCC1 0 (Kernel_ECquotient_map_TCC1-1 nil 3243663394 3307983043 ("" (skosimp) (("" (expand "quotient_map") (("" (lemma "EquivalenceCharacterization[X1]") (("" (inst -1 "S!1") (("" (assert) (("" (replace -1 :dir rl) (("" (inst 1 "x1!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EquivalenceCharacterization formula-decl nil EquivalenceClosure nil) (X formal-type-decl nil QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil)) 78 70 t shostak)) (Kernel_ECquotient_map 0 (Kernel_ECquotient_map-1 nil 3243666194 3307983044 ("" (skosimp) (("" (expand "quotient_map") (("" (apply-extensionality :hide? t) (("1" (expand "EquivalenceKernel") (("1" (use "EquivClassEq[X1]") (("1" (assert) (("1" (iff) (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst?) (("2" (lemma "EquivalenceCharacterization[X1]") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (EquivalenceCharacterization formula-decl nil EquivalenceClosure nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (EquivClos const-decl "equivalence[T]" EquivalenceClosure nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (ECQuotient type-eq-decl nil QuotientDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X formal-type-decl nil QuotientKernelProperties nil)) 323 270 t shostak)) (PreservesEq_ECquotient_map 0 (PreservesEq_ECquotient_map-1 nil 3243666401 3307983045 ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (skosimp*) (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (use "EquivClassEq[X1]") (("" (assert) (("" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (X formal-type-decl nil QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (FALSE const-decl "bool" booleans nil) (restrict_extend formula-decl nil extend nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)) 1202 1040 t shostak)) (quotient_map_is_ECQuotient_EqivalenceRespecting 0 (quotient_map_is_ECQuotient_EqivalenceRespecting-1 nil 3243663394 3307983045 ("" (skosimp) (("" (prop) (("1" (skosimp) (("1" (lemma "Kernel_ECquotient_map_TCC1") (("1" (inst -1 "S!1" "x1!1") nil nil)) nil)) nil) ("2" (expand "PreservesEq") (("2" (expand "subset?") (("2" (skosimp*) (("2" (expand "member") (("2" (rewrite "restrict_extend[[X, X], [X1, X1], bool, FALSE]") (("2" (expand "EquivalenceKernel") (("2" (expand "quotient_map") (("2" (use "EquivClassEq[X1]") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Kernel_ECquotient_map_TCC1 subtype-tcc nil QuotientKernelProperties nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (X1 formal-subtype-decl nil QuotientKernelProperties nil) (X1_pred const-decl "[X -> boolean]" QuotientKernelProperties nil) (boolean nonempty-type-decl nil booleans nil) (X formal-type-decl nil QuotientKernelProperties nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (FALSE const-decl "bool" booleans nil) (restrict_extend formula-decl nil extend nil) (PreservesEq const-decl "bool" KernelDefinition nil)) 298 240 t shostak)))(QuotientSubDefinition (quotient_sub_map_TCC1 0 (quotient_sub_map_TCC1-1 nil 3245525335 3307983047 ("" (grind :exclude "rep" :if-match nil) (("" (inst 1 "x!1") nil nil)) nil) proved ((reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientSubDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" QuotientSubDefinition nil) (X1 formal-subtype-decl nil QuotientSubDefinition nil)) 1350 1240 t shostak)))(QuotientExtensionProperties (lift_TCC1 0 (lift_TCC1-1 nil 3245193421 3307983049 ("" (grind :exclude "rep" :if-match nil) (("" (inst 1 "x!1") nil nil)) nil) proved ((reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientExtensionProperties nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" QuotientExtensionProperties nil) (X1 formal-subtype-decl nil QuotientExtensionProperties nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (QuotientSub type-eq-decl nil QuotientSubDefinition nil) (Y formal-type-decl nil QuotientExtensionProperties nil)) 2705 2220 t shostak)) (lift_TCC2 0 (lift_TCC2-1 nil 3245525012 3307983053 ("" (grind :exclude "rep" :if-match nil) (("" (use "rep_lemma[X]" :if-match all) (("" (expand "EquivClass" -1 1) (("" (inst -6 "(x!1, rep(S!1)(EquivClass(S!1)(x!1)))") (("1" (assert) nil nil) ("2" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil) proved ((rep_lemma formula-decl nil QuotientDefinition nil) (rep const-decl "T" QuotientDefinition nil) (Quotient type-eq-decl nil QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientExtensionProperties nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" QuotientExtensionProperties nil) (X1 formal-subtype-decl nil QuotientExtensionProperties nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (QuotientSub type-eq-decl nil QuotientSubDefinition nil) (Y formal-type-decl nil QuotientExtensionProperties nil)) 3507 2430 t shostak)) (lift_commutation 0 (lift_commutation-1 nil 3243666489 3307983056 ("" (grind :exclude "rep" :if-match nil) (("" (apply-extensionality :hide? t) (("" (use "rep_lemma[X]") (("" (expand "EquivClass" -1) (("" (inst -6 "(x!1, rep(S!1)({z: X | S!1(x!1, z)}))") (("1" (assert) (("1" (expand "EquivClass" 1) (("1" (assert) nil nil)) nil)) nil) ("2" (inst -5 "(x!1, rep(S!1)({z: X | S!1(x!1, z)}))") (("1" (assert) nil nil) ("2" (inst 1 "x!1") (("2" (expand "EquivClass" 1) (("2" (propax) nil nil)) nil)) nil)) nil) ("3" (inst 1 "x!1") (("3" (expand "EquivClass" 1) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (QuotientSub type-eq-decl nil QuotientSubDefinition nil) (O const-decl "T3" function_props nil) (lift const-decl "Y" QuotientExtensionProperties nil) (quotient_sub_map const-decl "QuotientSub(S)" QuotientSubDefinition nil) (rep const-decl "T" QuotientDefinition nil) (Quotient type-eq-decl nil QuotientDefinition nil) (rep_lemma formula-decl nil QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientExtensionProperties nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (X1_pred const-decl "[X -> boolean]" QuotientExtensionProperties nil) (X1 formal-subtype-decl nil QuotientExtensionProperties nil) (Y formal-type-decl nil QuotientExtensionProperties nil)) 2991 2650 t shostak)) (lift_unicity 0 (lift_unicity-1 nil 3243666688 3307983057 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (typepred "x!1") (("" (skosimp*) (("" (case "h!1(x!1) = g!1(x!2)") (("1" (replace -1) (("1" (hide -1 -3) (("1" (expand "lift") (("1" (replace -1) (("1" (hide -1) (("1" (use "rep_lemma[X]") (("1" (grind :exclude "rep" :if-match nil) (("1" (typepred "g!1") (("1" (expand "PreservesEq") (("1" (expand "subset?") (("1" (expand "member") (("1" (expand "EquivalenceKernel") (("1" (expand "restrict") (("1" (inst -1 "(x!2, rep(S!1)(EquivClass[X](S!1)(x!2)))") (("1" (assert) nil nil) ("2" (typepred "S!1") (("2" (expand "PreservesEq") (("2" (expand "subset?") (("2" (expand "member") (("2" (expand "EquivalenceKernel") (("2" (expand "restrict") (("2" (inst -2 "(x!2, rep(S!1)(EquivClass[X](S!1)(x!2)))") (("1" (assert) nil nil) ("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (replace -2 1 rl) (("2" (hide -2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((X formal-type-decl nil QuotientExtensionProperties nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (X1_pred const-decl "[X -> boolean]" QuotientExtensionProperties nil) (X1 formal-subtype-decl nil QuotientExtensionProperties nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (QuotientSub type-eq-decl nil QuotientSubDefinition nil) (Y formal-type-decl nil QuotientExtensionProperties nil) (lift const-decl "Y" QuotientExtensionProperties nil) (O const-decl "T3" function_props nil) (quotient_sub_map const-decl "QuotientSub(S)" QuotientSubDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (Quotient type-eq-decl nil QuotientDefinition nil) (rep const-decl "T" QuotientDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (rep_lemma formula-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil)) 685 560 t shostak)))(QuotientDistributive (EqualityExtension_is_equivalence 0 (EqualityExtension_is_equivalence-1 nil 3245193423 3307983057 ("" (grind :if-match nil) (("1" (forward-chain -3) nil nil) ("2" (forward-chain -2) nil nil) ("3" (inst? -1) nil nil)) nil) proved ((Y formal-type-decl nil QuotientDistributive nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (EqualityExtension const-decl "set[[[X, Y], [X, Y]]]" QuotientDistributive nil)) 423 350 t shostak)) (EqualityExtensionPreservesEq 0 (EqualityExtensionPreservesEq-1 nil 3245193857 3307983058 ("" (grind :exclude "rep" :if-match nil) (("" (use "EquivClassEq[X]") (("" (assert) nil nil)) nil)) nil) proved ((EquivClassEq formula-decl nil QuotientDefinition nil) (Y formal-type-decl nil QuotientDistributive nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (EqualityExtension const-decl "set[[[X, Y], [X, Y]]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 567 480 t shostak)) (QuotientDistributive_TCC1 0 (QuotientDistributive_TCC1-1 nil 3245193423 3307983058 ("" (grind :exclude "rep" :if-match nil) (("" (apply-extensionality :hide? t) (("" (forward-chain -2) (("" (iff) (("" (prop) (("1" (forward-chain -4) nil nil) ("2" (hide -2) (("2" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((set type-eq-decl nil sets nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (Y formal-type-decl nil QuotientDistributive nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (EqualityExtension const-decl "set[[[X, Y], [X, Y]]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 510 450 t shostak)) (QuotientDistributive_TCC2 0 (QuotientDistributive_TCC2-1 nil 3245193423 3307983058 ("" (grind :exclude "rep" :if-match nil) (("1" (rewrite "restrict_full[[[X, Y], [X, Y]], bool]") (("1" (inst? 1) nil nil)) nil) ("2" (rewrite "restrict_full[[[X, Y], [X, Y]], bool]") (("2" (inst? 1) nil nil)) nil)) nil) proved ((EqualityExtension const-decl "set[[[X, Y], [X, Y]]]" QuotientDistributive nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (PreservesEq const-decl "bool" KernelDefinition nil)) 102 90 t shostak)) (QuotientDistributive 0 (QuotientDistributive-1 nil 3245193912 3307983062 ("" (skosimp*) (("" (expand "bijective?") (("" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (expand "lift") (("1" (expand "rep") (("1" (flatten) (("1" (typepred "x1!1" "x2!1") (("1" (skosimp*) (("1" (case "nonempty?(x1!1)") (("1" (case "nonempty?(x2!1)") (("1" (name-replace "ch1" "choose(x1!1)") (("1" (name-replace "ch2" "choose(x2!1)") (("1" (typepred "ch1" "ch2") (("1" (replace*) (("1" (hide -3 -4 -5 -6) (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "EqualityExtension") (("1" (flatten) (("1" (assert) (("1" (iff) (("1" (lemma "Kernel_quotient_map[X, X]") (("1" (inst?) (("1" (case "EquivalenceKernel[X, X, Quotient[X](S!1)](quotient_map(S!1))(ch1`1, ch2`1)") (("1" (replace -2) (("1" (hide -2) (("1" (assert) (("1" (smash) (("1" (typepred "S!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (hide -1 -6 -8 -10 -11 -12) (("1" (inst-cp -1 "ch1`1" "ch2`1") (("1" (assert) (("1" (hide -4) (("1" (inst -1 "x!1`1" "ch1`1") (("1" (assert) (("1" (hide -5) (("1" (inst-cp -3 "x!2`1" "ch2`1" "ch1`1") (("1" (assert) (("1" (inst-cp -3 "x!2`1" "ch1`1" "x!1`1") (("1" (assert) (("1" (inst -3 "x!2`1" "x!1`1" "x!3") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -3 -5 -7 -8 -9) (("2" (typepred "S!1") (("2" (expand "equivalence?") (("2" (flatten) (("2" (hide -1) (("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (inst -1 "x!2`1" "ch2`1") (("2" (assert) (("2" (hide -6) (("2" (inst-cp -2 "x!1`1" "ch1`1" "ch2`1") (("2" (assert) (("2" (hide -4 -6) (("2" (inst-cp -2 "x!1`1" "ch2`1" "x!2`1") (("2" (assert) (("2" (hide -1 -4) (("2" (inst -1 "x!1`1" "x!2`1" "x!3") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "EquivalenceKernel") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -3) (("2" (hide -1 -2 -3 -4 -5 2) (("2" (grind) (("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (hide -1 -2 -3 -4 2) (("2" (grind) (("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (typepred "y!1`1") (("2" (skosimp*) (("2" (case "nonempty?(y!1`1)") (("1" (inst 1 "EquivClass[[X, Y]](EqualityExtension(S!1))(choose(y!1`1), y!1`2)") (("1" (expand "lift") (("1" (expand "rep") (("1" (case "nonempty?(EquivClass[[X, Y]](EqualityExtension(S!1))(choose(y!1`1), y!1`2))") (("1" (name-replace "ch" "choose(EquivClass[[X, Y]](EqualityExtension(S!1))(choose(y!1`1), y!1`2))") (("1" (typepred "ch") (("1" (hide -2 -3) (("1" (expand "EquivClass") (("1" (expand "EqualityExtension") (("1" (flatten) (("1" (name-replace "ch1" "choose(y!1`1)") (("1" (typepred "ch1") (("1" (replace -4 -1) (("1" (assert) (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (replace -4) (("1" (hide -3 -4) (("1" (assert) (("1" (typepred "S!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (prop) (("1" (expand "transitive?") (("1" (inst-cp -4 "x!1" "ch1" "ch`1") (("1" (assert) (("1" (hide -2 -3 -6 -7) (("1" (inst -2 "x!1" "ch`1" "x!2") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (inst-cp -3 "ch1" "ch`1") (("2" (assert) (("2" (hide -7) (("2" (inst -3 "x!1" "ch1") (("2" (assert) (("2" (hide -2 -6) (("2" (inst-cp -4 "ch`1" "ch1" "x!1") (("2" (assert) (("2" (hide -2 -3) (("2" (inst -2 "ch`1" "x!1" "x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "ch`1") (("2" (apply-extensionality :hide? t) (("2" (expand "EquivClass") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (grind) (("2" (inst -1 "(epsilon(y!1`1), y!1`2)") (("1" (assert) (("1" (typepred "S!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "reflexive?") (("1" (inst?) (("1" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil) ("3" (propax) nil nil)) nil)) nil)) nil) ("2" (inst?) nil nil)) nil) ("2" (replace -1) (("2" (hide -1 2) (("2" (grind) (("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (pred type-eq-decl nil defined_types nil) (epsilon const-decl "T" epsilons nil) (TRUE const-decl "bool" booleans nil) (injective? const-decl "bool" functions nil) (lift const-decl "Y" QuotientExtensionProperties nil) (Kernel_quotient_map formula-decl nil QuotientKernelProperties nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (choose const-decl "(p)" sets nil) (reflexive? const-decl "bool" relations nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientDistributive nil) (Y formal-type-decl nil QuotientDistributive nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (EqualityExtension const-decl "set[[[X, Y], [X, Y]]]" QuotientDistributive nil) (Quotient type-eq-decl nil QuotientDefinition nil) (rep const-decl "T" QuotientDefinition nil)) 3630 2270 t shostak)) (RelExtension_TCC1 0 (RelExtension_TCC1-2 "" 3332191104 3332191104 ("" (grind :exclude "rep" :if-match nil) (("1" (forward-chain -6) nil nil) ("2" (forward-chain -3) nil nil) ("3" (forward-chain -5) nil nil) ("4" (forward-chain -2) nil nil) ("5" (inst? -4) nil nil) ("6" (inst? -1) nil nil)) nil) proved nil 452855 2590 t shostak) (RelExtension_TCC1-1 nil 3245193424 3307983063 ("" (grind :exclude "rep" :if-match nil) (("1" (forward-chain -3) nil nil) ("2" (forward-chain -6) nil nil) ("3" (forward-chain -2) nil nil) ("4" (forward-chain -5) nil nil) ("5" (inst? -1) nil nil) ("6" (inst? -4) nil nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence type-eq-decl nil relations nil) (Y formal-type-decl nil QuotientDistributive nil) (equivalence? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 1460 920 t shostak)) (RelExtensionPreservesEq 0 (RelExtensionPreservesEq-1 nil 3245194382 3307983064 ("" (grind :if-match nil) (("1" (use "EquivClassEq[Y]") (("1" (assert) nil nil)) nil) ("2" (use "EquivClassEq[X]") (("2" (assert) nil nil)) nil)) nil) proved ((EquivClassEq formula-decl nil QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (Y formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (X formal-type-decl nil QuotientDistributive nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (RelExtension const-decl "equivalence[[X, Y]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 821 680 t shostak)) (RelQuotientDistributive_TCC1 0 (RelQuotientDistributive_TCC1-1 nil 3245193424 3307983065 ("" (grind :exclude "rep" :if-match nil) (("1" (apply-extensionality :hide? t) (("1" (hide -4 -5 -6 -7) (("1" (forward-chain -2) (("1" (iff) (("1" (prop) (("1" (forward-chain -4) nil nil) ("2" (hide -2) (("2" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (apply-extensionality :hide? t) (("2" (hide -1 -2 -3 -4 -8) (("2" (forward-chain -1) (("2" (iff) (("2" (prop) (("1" (forward-chain -3) nil nil) ("2" (hide -2) (("2" (forward-chain -2) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((set type-eq-decl nil sets nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (Y formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (X formal-type-decl nil QuotientDistributive nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (RelExtension const-decl "equivalence[[X, Y]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 1128 940 t shostak)) (RelQuotientDistributive_TCC2 0 (RelQuotientDistributive_TCC2-1 nil 3245193424 3307983066 ("" (grind :exclude "rep" :if-match nil) (("1" (rewrite "restrict_full[[[X, Y], [X, Y]], bool]") (("1" (inst?) nil nil)) nil) ("2" (rewrite "restrict_full[[[X, Y], [X, Y]], bool]") (("2" (inst?) nil nil)) nil)) nil) proved ((RelExtension const-decl "equivalence[[X, Y]]" QuotientDistributive nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (PreservesEq const-decl "bool" KernelDefinition nil)) 103 100 t shostak)) (RelQuotientDistributive 0 (RelQuotientDistributive-1 nil 3245194514 3307983071 ("" (skosimp*) (("" (expand "bijective?") (("" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (expand "lift") (("1" (flatten) (("1" (typepred "x1!1" "x2!1") (("1" (skosimp*) (("1" (case "nonempty?(x1!1)") (("1" (case "nonempty?(x2!1)") (("1" (expand "rep") (("1" (name-replace "ch1" "choose(x1!1)") (("1" (name-replace "ch2" "choose(x2!1)") (("1" (typepred "ch1" "ch2") (("1" (replace -5) (("1" (hide -5) (("1" (replace -5) (("1" (hide -5) (("1" (hide -3 -4) (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "RelExtension") (("1" (flatten) (("1" (assert) (("1" (iff) (("1" (lemma "Kernel_quotient_map[X, X]") (("1" (lemma "Kernel_quotient_map[Y, Y]") (("1" (inst?) (("1" (inst?) (("1" (case "EquivalenceKernel[X, X, Quotient[X](S!1)](quotient_map(S!1))(ch1`1, ch2`1)") (("1" (case "EquivalenceKernel[Y, Y, Quotient[Y](R!1)](quotient_map(R!1))(ch1`2, ch2`2)") (("1" (replace -3) (("1" (replace -4) (("1" (hide -3 -4) (("1" (assert) (("1" (smash) (("1" (typepred "R!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (hide -1 -5 -6 -8 -10 -12 -13) (("1" (inst-cp -1 "ch1`2" "ch2`2") (("1" (assert) (("1" (hide -4) (("1" (inst -1 "x!1`2" "ch1`2") (("1" (assert) (("1" (hide -5) (("1" (inst-cp -3 "x!2`2" "ch2`2" "ch1`2") (("1" (assert) (("1" (hide -6 -2) (("1" (inst-cp -2 "x!2`2" "ch1`2" "x!1`2") (("1" (assert) (("1" (hide -4 -1) (("1" (inst -1 "x!2`2" "x!1`2" "x!4") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -4 -6 -8 -9 -10) (("2" (typepred "S!1") (("2" (expand "equivalence?") (("2" (flatten) (("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (hide -1) (("2" (inst-cp -1 "ch1`1" "ch2`1") (("2" (assert) (("2" (hide -4) (("2" (inst -1 "x!1`1" "ch1`1") (("2" (assert) (("2" (hide -5) (("2" (inst-cp -3 "x!2`1" "ch2`1" "ch1`1") (("2" (assert) (("2" (hide -6 -2) (("2" (inst-cp -2 "x!2`1" "ch1`1" "x!1`1") (("2" (assert) (("2" (hide -4 -1) (("2" (inst -1 "x!2`1" "x!1`1" "x!3") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -2 -3 -5 -7 -9 -10) (("3" (typepred "R!1") (("3" (expand "equivalence?") (("3" (flatten) (("3" (hide -1) (("3" (expand "symmetric?") (("3" (expand "transitive?") (("3" (inst -1 "x!2`2" "ch2`2") (("3" (assert) (("3" (hide -6) (("3" (inst-cp -2 "x!1`2" "ch1`2" "ch2`2") (("3" (assert) (("3" (hide -6 -4) (("3" (inst-cp -2 "x!1`2" "ch2`2" "x!2`2") (("3" (assert) (("3" (hide -4 -1) (("3" (inst -1 "x!1`2" "x!2`2" "x!4") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide -1 -4 -6 -8 -9 -10) (("4" (typepred "S!1") (("4" (expand "equivalence?") (("4" (flatten) (("4" (expand "symmetric?") (("4" (expand "transitive?") (("4" (hide -1) (("4" (inst -1 "x!2`1" "ch2`1") (("4" (assert) (("4" (hide -6) (("4" (inst-cp -2 "x!1`1" "ch1`1" "ch2`1") (("4" (assert) (("4" (hide -6 -4) (("4" (inst-cp -2 "x!1`1" "ch2`1" "x!2`1") (("4" (assert) (("4" (hide -4 -1) (("4" (inst -1 "x!1`1" "x!2`1" "x!3") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "EquivalenceKernel") (("2" (propax) nil nil)) nil)) nil) ("2" (expand "EquivalenceKernel") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -3) (("2" (hide -1 -2 -3 -4 -5 2) (("2" (grind) (("1" (typepred "R!1") (("1" (grind) nil nil)) nil) ("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (hide -1 -2 -3 -4 2) (("2" (grind) (("1" (typepred "R!1") (("1" (grind) nil nil)) nil) ("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (typepred "y!1`1") (("2" (typepred "y!1`2") (("2" (skosimp*) (("2" (case "nonempty?(y!1`1)") (("1" (case "nonempty?(y!1`2)") (("1" (inst 1 "EquivClass[[X, Y]](RelExtension(S!1,R!1))(choose(y!1`1), choose(y!1`2))") (("1" (case "nonempty?(EquivClass[[X, Y]]
                                             (RelExtension(S!1, R!1))(choose(y!1`1), choose(y!1`2)))") (("1" (expand "lift") (("1" (expand "rep") (("1" (name-replace "ch" "choose(EquivClass[[X, Y]]
                                            (RelExtension(S!1, R!1))(choose(y!1`1), choose(y!1`2)))") (("1" (typepred "ch") (("1" (expand "EquivClass") (("1" (expand "RelExtension") (("1" (flatten) (("1" (name-replace "ch1" "choose(y!1`1)") (("1" (name-replace "ch2" "choose(y!1`2)") (("1" (typepred "ch1" "ch2") (("1" (replace -8 -2) (("1" (replace -9 -1) (("1" (assert) (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (apply-extensionality :hide? t) (("1" (replace -9 1) (("1" (assert) (("1" (iff) (("1" (hide -2 -4 -5 -6 -7 -8 -9) (("1" (typepred "S!1") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (prop) (("1" (hide -2) (("1" (inst-cp -2 "x!2" "ch1" "ch`1") (("1" (assert) (("1" (hide -4 -5) (("1" (inst -2 "x!2" "ch`1" "x!3") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst-cp -2 "ch1" "ch`1") (("2" (assert) (("2" (hide -6) (("2" (inst -2 "x!2" "ch1") (("2" (assert) (("2" (hide -5) (("2" (inst-cp -4 "ch`1" "ch1" "x!2") (("2" (assert) (("2" (hide -3 -2) (("2" (inst -2 "ch`1" "x!2" "x!3") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (apply-extensionality :hide? t) (("2" (replace -8 1) (("2" (assert) (("2" (iff) (("2" (typepred "R!1") (("2" (expand "equivalence?") (("2" (flatten) (("2" (hide -1 -4 -6 -8 -9 -10 -11 -12) (("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (prop) (("1" (hide -2) (("1" (inst-cp -2 "x!1" "ch2" "ch`2") (("1" (assert) (("1" (hide -4 -5) (("1" (inst -2 "x!1" "ch`2" "x!3") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst-cp -2 "ch2" "ch`2") (("2" (assert) (("2" (hide -6) (("2" (inst -2 "x!1" "ch2") (("2" (assert) (("2" (hide -5) (("2" (inst-cp -4 "ch`2" "ch2" "x!1") (("2" (assert) (("2" (hide -3 -2) (("2" (inst -2 "ch`2" "x!1" "x!3") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand "EquivClass") (("3" (inst 1 "ch`2") nil nil)) nil) ("4" (expand "EquivClass") (("4" (inst 1 "ch`1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "nonempty?" 1) (("2" (expand "empty?") (("2" (expand "member") (("2" (expand "EquivClass" -1) (("2" (expand "RelExtension" -1) (("2" (inst -1 "(choose(y!1`1), choose(y!1`2))") (("2" (typepred "S!1" "R!1") (("2" (expand "equivalence?") (("2" (flatten) (("2" (hide -2 -3 -5 -6) (("2" (expand "reflexive?") (("2" (inst?) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (propax) nil nil) ("4" (propax) nil nil)) nil) ("2" (expand "EquivClass" 1) (("2" (expand "RelExtension" 1) (("2" (inst 1 "(choose(y!1`1), choose(y!1`2))") nil nil)) nil)) nil)) nil) ("2" (hide -1 -3 2) (("2" (replace -1) (("2" (hide -1) (("2" (grind) (("2" (typepred "R!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -2 1) (("2" (hide -1 -2 2) (("2" (grind) (("2" (typepred "S!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (lift const-decl "Y" QuotientExtensionProperties nil) (Quotient type-eq-decl nil QuotientDefinition nil) (RelExtension const-decl "equivalence[[X, Y]]" QuotientDistributive nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (Y formal-type-decl nil QuotientDistributive nil) (X formal-type-decl nil QuotientDistributive nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (reflexive? const-decl "bool" relations nil) (rep const-decl "T" QuotientDefinition nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (Kernel_quotient_map formula-decl nil QuotientKernelProperties nil) (choose const-decl "(p)" sets nil)) 4886 3700 t shostak)) (FunExtension_TCC1 0 (FunExtension_TCC1-1 nil 3245193424 3307983072 ("" (grind :exclude "rep" :if-match nil) (("1" (typepred "F!1(x!2)") (("1" (inst?) (("1" (inst?) (("1" (grind :exclude "rep" :if-match nil) (("1" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil) ("2" (inst?) (("2" (typepred "F!1(x!2)") (("2" (grind :exclude "rep" :if-match nil) (("2" (forward-chain -2) nil nil)) nil)) nil)) nil) ("3" (typepred "F!1(x!2)") (("3" (grind :exclude "rep" :if-match nil) (("3" (inst? -1) nil nil)) nil)) nil)) nil) proved ((equivalence type-eq-decl nil relations nil) (X formal-type-decl nil QuotientDistributive nil) (PRED type-eq-decl nil defined_types nil) (Y formal-type-decl nil QuotientDistributive nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (equivalence? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 1067 610 t shostak)) (FunExtensionPreservesEq 0 (FunExtensionPreservesEq-2 "Fix for 3.2" 3307984197 3307984197 ("" (grind) (("" (apply-extensionality :hide? t) (("1" (apply-extensionality :hide? t) (("1" (inst?) (("1" (iff) (("1" (typepred "F!1(x!2)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (prop) (("1" (inst -2 "x!1`1(x!2)" "x!1`2(x!2)") (("1" (assert) (("1" (forward-chain -3) nil nil)) nil)) nil) ("2" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst? 1) nil nil)) nil) ("3" (skolem!) (("3" (inst? 1) nil nil)) nil)) nil)) nil) proved nil 131114 3650 t shostak) (FunExtensionPreservesEq-1 nil 3245194994 3307983073 ("" (grind) (("" (apply-extensionality :hide? t) (("" (apply-extensionality :hide? t) (("" (inst?) (("" (iff) (("" (typepred "F!1(x!2)") (("" (expand "equivalence?") (("" (flatten) (("" (hide -1) (("" (expand "symmetric?") (("" (expand "transitive?") (("" (prop) (("1" (inst -2 "x!1`1(x!2)" "x!1`2(x!2)") (("1" (assert) (("1" (forward-chain -3) nil nil)) nil)) nil) ("2" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((X formal-type-decl nil QuotientDistributive nil) (Y formal-type-decl nil QuotientDistributive nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (Quotient type-eq-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (FunExtension const-decl "equivalence[[X -> Y]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 1109 660 t shostak)) (FunQuotientDistributive_TCC1 0 (FunQuotientDistributive_TCC1-2 "" 3307985072 3307985072 ("" (grind :exclude "rep" :if-match nil) (("" (apply-extensionality :hide? t) (("1" (inst?) (("1" (typepred "F!1(x!2)") (("1" (apply-extensionality :hide? t) (("1" (flatten) (("1" (forward-chain -2) (("1" (iff) (("1" (prop) (("1" (forward-chain -4) nil nil) ("2" (hide -2) (("2" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem!) (("2" (inst?) nil nil)) nil) ("3" (skolem!) (("3" (inst?) nil nil)) nil)) nil)) nil) proved nil 50203 3100 t shostak) (FunQuotientDistributive_TCC1-1 nil 3245193424 3307983074 ("" (grind :exclude "rep" :if-match nil) (("" (apply-extensionality :hide? t) (("" (inst?) (("" (typepred "F!1(x!2)") (("" (apply-extensionality :hide? t) (("" (flatten) (("" (forward-chain -2) (("" (iff) (("" (prop) (("1" (forward-chain -4) nil nil) ("2" (hide -2) (("2" (forward-chain -3) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((X formal-type-decl nil QuotientDistributive nil) (Y formal-type-decl nil QuotientDistributive nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (Quotient type-eq-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (FunExtension const-decl "equivalence[[X -> Y]]" QuotientDistributive nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil)) 737 660 t shostak)) (FunQuotientDistributive_TCC2 0 (FunQuotientDistributive_TCC2-1 nil 3245193424 3307983074 ("" (grind :exclude "rep" :if-match nil) (("1" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (inst?) nil nil)) nil) ("2" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("2" (inst?) nil nil)) nil)) nil) proved ((FunExtension const-decl "equivalence[[X -> Y]]" QuotientDistributive nil) (restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (PreservesEq const-decl "bool" KernelDefinition nil)) 103 100 t shostak)) (FunQuotientDistributive 0 (FunQuotientDistributive-2 "Fix for 3.2" 3307985259 3307985259 ("" (skosimp) (("" (lemma "FunExtensionPreservesEq") (("" (expand "bijective?") (("" (inst -1 "F!1") (("" (prop) (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (skosimp*) (("1" (replace -1 :hide? t) (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "FunExtension" 1) (("1" (expand "lift") (("1" (decompose-equality) (("1" (iff) (("1" (prop) (("1" (skosimp*) (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (expand "quotient_map" -2) (("1" (expand "EquivClass" -2) (("1" (decompose-equality) (("1" (inst -1 "x!1(x!4)") (("1" (expand "rep") (("1" (expand "FunExtension") (("1" (expand "PreservesEq") (("1" (expand "subset?") (("1" (expand "member") (("1" (expand "EquivalenceKernel") (("1" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (name-replace "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (name-replace "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (inst -3 "(ch1, ch2)") (("1" (prop) (("1" (decompose-equality) (("1" (inst -1 "x!4") (("1" (decompose-equality) (("1" (typepred "ch1") (("1" (typepred "ch2") (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (inst -3 "x!2(x!4)") (("1" (typepred "F!1(x!4)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (assert) (("1" (inst-cp -1 "x!2(x!4)" "ch2(x!4)") (("1" (assert) (("1" (replace -2) (("1" (hide -2) (("1" (inst -1 "x!1(x!4)" "ch1(x!4)") (("1" (assert) (("1" (replace -1) (("1" (hide -1 -4 -5) (("1" (inst-cp -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("1" (assert) (("1" (hide -3 -4) (("1" (inst -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (expand "EquivClass") (("2" (inst?) nil nil)) nil)) nil) ("3" (hide-all-but 1) (("3" (expand "EquivClass") (("3" (inst?) nil nil)) nil)) nil) ("4" (hide-all-but 1) (("4" (expand "EquivClass") (("4" (inst?) nil nil)) nil)) nil) ("5" (hide-all-but 1) (("5" (expand "EquivClass") (("5" (inst?) nil nil)) nil)) nil)) nil) ("2" (typepred "ch1" "ch2") (("2" (hide 1) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (typepred "F!1(x!4)") (("2" (expand "equivalence?") (("2" (flatten) (("2" (hide -1) (("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (inst -1 "x!1(x!4)" "ch1(x!4)") (("2" (assert) (("2" (replace -1) (("2" (hide -1) (("2" (hide -2) (("2" (inst-cp -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("2" (assert) (("2" (hide -3 -4) (("2" (inst -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst -1 "x!2") (("2" (expand "member") (("2" (skosimp) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst -1 "x!1") (("2" (expand "member") (("2" (skosimp) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind :if-match nil) (("2" (expand "EquivClass" 1) (("2" (expand "FunExtension" 1) (("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil) ("3" (inst 1 "x!1") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (expand "quotient_map") (("2" (expand "EquivClass") (("2" (decompose-equality) (("1" (expand "PreservesEq") (("1" (expand "subset?") (("1" (expand "member") (("1" (expand "FunExtension") (("1" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (expand "EquivalenceKernel") (("1" (expand "rep") (("1" (name-replace "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (name-replace "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (inst -3 "(ch1, ch2)") (("1" (typepred "ch1" "ch2") (("1" (hide -5) (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (inst -3 "ch1(x!4)") (("1" (typepred "F!1(x!4)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "reflexive?") (("1" (inst -1 "ch1(x!4)") (("1" (assert) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (inst-cp -1 "ch2(x!4)" "ch1(x!4)") (("1" (assert) (("1" (hide -6) (("1" (inst -1 "x!2(x!4)" "ch2(x!4)") (("1" (assert) (("1" (hide -5) (("1" (inst-cp -3 "x!1(x!4)" "ch1(x!4)" "ch2(x!4)") (("1" (assert) (("1" (hide -5 -2) (("1" (inst-cp -2 "x!1(x!4)" "ch2(x!4)" "x!2(x!4)") (("1" (assert) (("1" (hide -4 -1) (("1" (forward-chain -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind :if-match nil) (("2" (expand "FunExtension") (("2" (expand "EquivClass") (("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil) ("3" (inst 1 "x!1") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!2") (("2" (apply-extensionality :hide? t) (("2" (expand "FunExtension") (("2" (expand "EquivClass") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("3" (inst 1 "x!2") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil) ("4" (inst 1 "x!1") (("4" (apply-extensionality :hide? t) (("4" (expand "EquivClass") (("4" (propax) nil nil)) nil)) nil)) nil) ("5" (inst 1 "x!1") (("5" (apply-extensionality :hide? t) (("5" (expand "EquivClass") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (expand "surjective?") (("2" (skosimp) (("2" (inst 1 "{ f : [X -> Y] | FORALL (x: X): (y!1(x))(f(x)) }") (("1" (expand "lift") (("1" (apply-extensionality :hide? t) (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "rep") (("1" (name-replace "ch" "choose({f: [X -> Y] | FORALL (x: X): y!1(x)(f(x))})") (("1" (typepred "ch") (("1" (typepred "F!1(x!1)") (("1" (inst -2 "x!1") (("1" (typepred "y!1(x!1)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (decompose-equality) (("1" (inst-cp -1 "x!2") (("1" (inst -1 "ch(x!1)") (("1" (replace -4) (("1" (replace -2) (("1" (hide -2 -4) (("1" (iff) (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -2) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (prop) (("1" (inst -4 "x!3" "ch(x!1)" "x!2") (("1" (assert) nil nil)) nil) ("2" (inst -3 "x!3" "ch(x!1)") (("2" (assert) (("2" (hide -2) (("2" (inst -3 "ch(x!1)" "x!3" "x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind :if-match nil) (("2" (inst -1 "LAMBDA (x: X): choose(y!1(x))") (("1" (skosimp) (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (replace -1) (("1" (beta) (("1" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (propax) nil nil)) nil) ("2" (inst -1 "x!4") (("2" (hide -1 2) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (expand "EquivClass") (("2" (decompose-equality) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (replace -1 :hide? t) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (expand "EquivClass") (("2" (expand "FunExtension") (("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (prop) (("1" (skosimp) (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (decompose-equality) (("1" (name-replace "ch" "choose(y!1(x!3))") (("1" (typepred "ch") (("1" (inst -3 "x!3") (("1" (inst-cp -2 "ch") (("1" (replace -1) (("1" (inst -2 "x!2(x!3)") (("1" (replace -4) (("1" (hide -1 -4) (("1" (typepred "F!1(x!3)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (inst -1 "x!4" "ch") (("1" (assert) (("1" (hide -4) (("1" (inst -2 "ch" "x!4" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -1 "x!3") (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (expand "EquivClass") (("2" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (typepred "F!1(x!3)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1 -2) (("1" (expand "transitive?") (("1" (inst -1 "x!4" "ch" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (expand "EquivClass") (("1" (expand "FunExtension") (("1" (prop) (("1" (skosimp) (("1" (name-replace "ch" "choose(y!1(x!3))") (("1" (typepred "ch") (("1" (inst -2 "x!3") (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (typepred "F!1(x!3)") (("1" (grind :if-match nil) (("1" (hide -1) (("1" (inst -1 "x!4" "ch") (("1" (assert) (("1" (hide -3) (("1" (inst -2 "ch" "x!4" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (inst -2 "x!3") (("2" (replace -1 :hide? t) (("2" (expand "EquivClass") (("2" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (typepred "F!1(x!3)") (("1" (grind :if-match nil) (("1" (hide -1 -2) (("1" (inst -1 "x!4" "ch" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (expand "EquivClass") (("1" (expand "FunExtension") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (prop) (("1" (skosimp) (("1" (name-replace "ch" "choose(y!1(x!2))") (("1" (typepred "ch") (("1" (typepred "y!1(x!2)") (("1" (skosimp) (("1" (inst -3 "x!2") (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (typepred "F!1(x!2)") (("1" (grind :if-match nil) (("1" (hide -1) (("1" (inst -1 "x!3" "ch") (("1" (assert) (("1" (hide -3) (("1" (inst -2 "ch" "x!3" "x!1(x!2)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (inst -2 "x!2") (("2" (name-replace "ch" "choose(y!1(x!2))") (("2" (typepred "ch") (("2" (replace -2 :hide? t) (("2" (expand "EquivClass") (("2" (typepred "F!1(x!2)") (("2" (grind :if-match nil) (("2" (hide -1 -2) (("2" (inst -1 "x!3" "ch" "x!1(x!2)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!1)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!2") (("2" (grind) (("2" (typepred "F!1(x!1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!1)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!2") (("2" (grind) (("2" (typepred "F!1(x!1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 167093 18140 t shostak) (FunQuotientDistributive-1 nil 3245195217 3307983089 ("" (skosimp) (("" (lemma "FunExtensionPreservesEq") (("" (expand "bijective?") (("" (inst -1 "F!1") (("" (prop) (("1" (expand "injective?") (("1" (skolem-typepred) (("1" (skosimp*) (("1" (replace -1 :hide? t) (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "FunExtension" 1) (("1" (expand "lift") (("1" (decompose-equality) (("1" (iff) (("1" (prop) (("1" (skosimp*) (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (expand "quotient_map" -2) (("1" (expand "EquivClass" -2) (("1" (decompose-equality) (("1" (inst -1 "x!1(x!4)") (("1" (expand "rep") (("1" (expand "FunExtension") (("1" (expand "PreservesEq") (("1" (expand "subset?") (("1" (expand "member") (("1" (expand "EquivalenceKernel") (("1" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (name-replace "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (name-replace "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (inst -3 "(ch1, ch2)") (("1" (prop) (("1" (decompose-equality) (("1" (inst -1 "x!4") (("1" (decompose-equality) (("1" (typepred "ch1") (("1" (typepred "ch2") (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (inst -3 "x!2(x!4)") (("1" (typepred "F!1(x!4)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (assert) (("1" (inst-cp -1 "x!2(x!4)" "ch2(x!4)") (("1" (assert) (("1" (replace -2) (("1" (hide -2) (("1" (inst -1 "x!1(x!4)" "ch1(x!4)") (("1" (assert) (("1" (replace -1) (("1" (hide -1 -4 -5) (("1" (inst-cp -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("1" (assert) (("1" (hide -3 -4) (("1" (inst -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "ch1" "ch2") (("2" (hide 1) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (typepred "F!1(x!4)") (("2" (expand "equivalence?") (("2" (flatten) (("2" (hide -1) (("2" (expand "symmetric?") (("2" (expand "transitive?") (("2" (inst -1 "x!1(x!4)" "ch1(x!4)") (("2" (assert) (("2" (replace -1) (("2" (hide -1) (("2" (hide -2) (("2" (inst-cp -1 "x!2(x!4)" "ch2(x!4)" "x!1(x!4)") (("2" (assert) (("2" (hide -3 -4) (("2" (inst -1 "x!2(x!4)" "x!1(x!4)" "x!3(x!4)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst -1 "x!2") (("2" (expand "member") (("2" (skosimp) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (inst -1 "x!1") (("2" (expand "member") (("2" (skosimp) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind :if-match nil) (("2" (expand "EquivClass" 1) (("2" (expand "FunExtension" 1) (("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil) ("3" (inst 1 "x!1") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (expand "quotient_map") (("2" (expand "EquivClass") (("2" (decompose-equality) (("1" (expand "PreservesEq") (("1" (expand "subset?") (("1" (expand "member") (("1" (expand "FunExtension") (("1" (rewrite "restrict_full[[[X -> Y], [X -> Y]], bool]") (("1" (expand "EquivalenceKernel") (("1" (expand "rep") (("1" (name-replace "ch1" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!1(x), z(x))})") (("1" (name-replace "ch2" "choose({z: [X -> Y] | FORALL (x: X): F!1(x)(x!2(x), z(x))})") (("1" (inst -3 "(ch1, ch2)") (("1" (typepred "ch1" "ch2") (("1" (hide -5) (("1" (inst -1 "x!4") (("1" (inst -2 "x!4") (("1" (inst -3 "ch1(x!4)") (("1" (typepred "F!1(x!4)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "reflexive?") (("1" (inst -1 "ch1(x!4)") (("1" (assert) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (inst-cp -1 "ch2(x!4)" "ch1(x!4)") (("1" (assert) (("1" (hide -6) (("1" (inst -1 "x!2(x!4)" "ch2(x!4)") (("1" (assert) (("1" (hide -5) (("1" (inst-cp -3 "x!1(x!4)" "ch1(x!4)" "ch2(x!4)") (("1" (assert) (("1" (hide -5 -2) (("1" (inst-cp -2 "x!1(x!4)" "ch2(x!4)" "x!2(x!4)") (("1" (assert) (("1" (hide -4 -1) (("1" (forward-chain -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind) (("2" (typepred "F!1(x!5)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (grind :if-match nil) (("2" (expand "FunExtension") (("2" (expand "EquivClass") (("2" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil) ("3" (inst 1 "x!1") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!2") (("2" (apply-extensionality :hide? t) (("2" (expand "FunExtension") (("2" (expand "EquivClass") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("3" (inst 1 "x!2") (("3" (apply-extensionality :hide? t) (("3" (expand "FunExtension") (("3" (expand "EquivClass") (("3" (propax) nil nil)) nil)) nil)) nil)) nil) ("4" (inst 1 "x!1") (("4" (apply-extensionality :hide? t) (("4" (expand "EquivClass") (("4" (propax) nil nil)) nil)) nil)) nil) ("5" (inst 1 "x!1") (("5" (apply-extensionality :hide? t) (("5" (expand "EquivClass") (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1) (("2" (expand "surjective?") (("2" (skosimp) (("2" (inst 1 "{ f : [X -> Y] | FORALL (x: X): (y!1(x))(f(x)) }") (("1" (expand "lift") (("1" (apply-extensionality :hide? t) (("1" (expand "quotient_map") (("1" (expand "EquivClass") (("1" (apply-extensionality :hide? t) (("1" (expand "rep") (("1" (name-replace "ch" "choose({f: [X -> Y] | FORALL (x: X): y!1(x)(f(x))})") (("1" (typepred "ch") (("1" (typepred "F!1(x!1)") (("1" (inst -2 "x!1") (("1" (typepred "y!1(x!1)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (decompose-equality) (("1" (inst-cp -1 "x!2") (("1" (inst -1 "ch(x!1)") (("1" (replace -4) (("1" (replace -2) (("1" (hide -2 -4) (("1" (iff) (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -2) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (prop) (("1" (inst -4 "x!3" "ch(x!1)" "x!2") (("1" (assert) nil nil)) nil) ("2" (inst -3 "x!3" "ch(x!1)") (("2" (assert) (("2" (hide -2) (("2" (inst -3 "ch(x!1)" "x!3" "x!2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (grind :if-match nil) (("2" (inst -1 "LAMBDA (x: X): choose(y!1(x))") (("1" (skosimp) (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (replace -1) (("1" (beta) (("1" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (propax) nil nil)) nil) ("2" (inst -1 "x!4") (("2" (hide -1 2) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (expand "EquivClass") (("2" (decompose-equality) (("2" (inst -1 "x!4") (("2" (inst -2 "x!4") (("2" (replace -1 :hide? t) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (expand "EquivClass") (("2" (expand "FunExtension") (("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (prop) (("1" (skosimp) (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (expand "EquivClass") (("1" (decompose-equality) (("1" (name-replace "ch" "choose(y!1(x!3))") (("1" (typepred "ch") (("1" (inst -3 "x!3") (("1" (inst-cp -2 "ch") (("1" (replace -1) (("1" (inst -2 "x!2(x!3)") (("1" (replace -4) (("1" (hide -1 -4) (("1" (typepred "F!1(x!3)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1) (("1" (expand "symmetric?") (("1" (expand "transitive?") (("1" (inst -1 "x!4" "ch") (("1" (assert) (("1" (hide -4) (("1" (inst -2 "ch" "x!4" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 2) (("2" (grind) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (expand "EquivClass") (("2" (decompose-equality) (("2" (inst -1 "x!5") (("2" (inst -2 "x!5") (("2" (replace 1) (("2" (assert) (("2" (hide 2) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst -1 "x!3") (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (expand "EquivClass") (("2" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (typepred "F!1(x!3)") (("1" (expand "equivalence?") (("1" (flatten) (("1" (hide -1 -2) (("1" (expand "transitive?") (("1" (inst -1 "x!4" "ch" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (expand "EquivClass") (("1" (expand "FunExtension") (("1" (prop) (("1" (skosimp) (("1" (name-replace "ch" "choose(y!1(x!3))") (("1" (typepred "ch") (("1" (inst -2 "x!3") (("1" (typepred "y!1(x!3)") (("1" (skosimp) (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (typepred "F!1(x!3)") (("1" (grind :if-match nil) (("1" (hide -1) (("1" (inst -1 "x!4" "ch") (("1" (assert) (("1" (hide -3) (("1" (inst -2 "ch" "x!4" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!4") (("2" (grind) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!3)") (("2" (skosimp) (("2" (inst -2 "x!3") (("2" (replace -1 :hide? t) (("2" (expand "EquivClass") (("2" (name-replace "ch" "choose({z: Y | F!1(x!3)(x!4, z)})") (("1" (typepred "ch") (("1" (typepred "F!1(x!3)") (("1" (grind :if-match nil) (("1" (hide -1 -2) (("1" (inst -1 "x!4" "ch" "x!2(x!3)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "F!1(x!3)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "LAMBDA (x: X): choose(y!1(x))") (("1" (expand "EquivClass") (("1" (expand "FunExtension") (("1" (apply-extensionality :hide? t) (("1" (iff) (("1" (prop) (("1" (skosimp) (("1" (name-replace "ch" "choose(y!1(x!2))") (("1" (typepred "ch") (("1" (typepred "y!1(x!2)") (("1" (skosimp) (("1" (inst -3 "x!2") (("1" (replace -1 :hide? t) (("1" (expand "EquivClass") (("1" (typepred "F!1(x!2)") (("1" (grind :if-match nil) (("1" (hide -1) (("1" (inst -1 "x!3" "ch") (("1" (assert) (("1" (hide -3) (("1" (inst -2 "ch" "x!3" "x!1(x!2)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!3") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (inst -2 "x!2") (("2" (name-replace "ch" "choose(y!1(x!2))") (("1" (typepred "ch") (("1" (replace -2 :hide? t) (("1" (expand "EquivClass") (("1" (typepred "F!1(x!2)") (("1" (grind :if-match nil) (("1" (hide -1 -2) (("1" (inst -1 "x!3" "ch" "x!1(x!2)") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 2) (("2" (grind) (("2" (typepred "y!1(x!2)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!4") (("2" (grind) (("2" (typepred "F!1(x!2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!1)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!2") (("2" (grind) (("2" (typepred "F!1(x!1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (grind) (("2" (typepred "y!1(x!1)") (("2" (skosimp) (("2" (replace -1 :hide? t) (("2" (inst -1 "x!2") (("2" (grind) (("2" (typepred "F!1(x!1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bijective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (FunExtension const-decl "equivalence[[X -> Y]]" QuotientDistributive nil) (Quotient type-eq-decl nil QuotientDefinition nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (rep const-decl "T" QuotientDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (PreservesEq const-decl "bool" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict_full formula-decl nil restrict_props nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (restrict const-decl "R" restrict nil) (lift const-decl "Y" QuotientExtensionProperties nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (Y formal-type-decl nil QuotientDistributive nil) (X formal-type-decl nil QuotientDistributive nil) (FunExtensionPreservesEq formula-decl nil QuotientDistributive nil)) 15557 11380 t shostak)))(QuotientIteration (action_TCC1 0 (action_TCC1-1 nil 3243015883 3307983090 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientIteration nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (Quotient type-eq-decl nil QuotientDefinition nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 541 480 nil nil)) (action_TCC2 0 (action_TCC2-1 nil 3243015883 3307983090 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientIteration nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (Quotient type-eq-decl nil QuotientDefinition nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 620 490 nil nil)) (action_equivalence_is_equivalence 0 (action_equivalence_is_equivalence-1 nil 3243663397 3307983091 ("" (skosimp*) (("" (typepred "S!1" "R!1") (("" (expand "equivalence?") (("" (flatten) (("" (expand "reflexive?") (("" (expand "symmetric?") (("" (expand "transitive?") (("" (expand "action") (("" (prop) (("1" (skosimp*) (("1" (inst? -4) (("1" (inst 1 "x!1") nil nil)) nil)) nil) ("2" (skosimp*) (("2" (inst -6 "EquivClass(S!1)(x!1)" "EquivClass(S!1)(y!1)") (("1" (assert) nil nil) ("2" (inst 1 "y!1") nil nil) ("3" (inst 1 "x!1") nil nil)) nil)) nil) ("3" (skosimp*) (("3" (inst -8 "EquivClass(S!1)(x!1)" "EquivClass(S!1)(y!1)" "EquivClass(S!1)(z!1)") (("1" (assert) nil nil) ("2" (inst 1 "z!1") nil nil) ("3" (inst 1 "y!1") nil nil) ("4" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Quotient type-eq-decl nil QuotientDefinition nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (X formal-type-decl nil QuotientIteration nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (symmetric? const-decl "bool" relations nil) (action const-decl "bool" QuotientIteration nil) (transitive? const-decl "bool" relations nil) (reflexive? const-decl "bool" relations nil)) 439 290 t shostak)) (QuotientAction_TCC1 0 (QuotientAction_TCC1-1 nil 3243015883 3307983096 ("" (grind :exclude "rep" :if-match nil) (("" (apply-extensionality :hide? t) (("" (lemma "PreservesEq_quotient_map[X, X]") (("" (inst?) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (expand "member") (("" (rewrite "restrict_full[[X, X], bool]") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((action const-decl "bool" QuotientIteration nil) (restrict_full formula-decl nil restrict_props nil) (PreservesEq_quotient_map formula-decl nil QuotientKernelProperties nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (X formal-type-decl nil QuotientIteration nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (Quotient type-eq-decl nil QuotientDefinition nil) (PreservesEq const-decl "bool" KernelDefinition nil) (subset? const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (member const-decl "bool" sets nil) (restrict const-decl "R" restrict nil)) 4919 1070 t nil)) (QuotientAction_TCC2 0 (QuotientAction_TCC2-1 nil 3243015883 3307983096 ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (expand "member") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (rewrite "restrict_full[[Quotient[X](S!1), Quotient[X](S!1)], bool]") (("" (rewrite "restrict_full[[X, X], bool]") (("" (prop) (("1" (skosimp*) (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (typepred "x!1`1" "x!1`2") (("2" (expand "lift") (("2" (lemma "EquivClassEq[X]") (("2" (auto-rewrite "EquivClassNonEmpty[X]") (("2" (skosimp*) (("2" (replace -2) (("2" (replace -3) (("2" (inst?) (("1" (assert) (("1" (hide 2) (("1" (expand "action") (("1" (rewrite "restrict_full[[X, X], bool]") (("1" (case "FORALL(x : X) :
                   EquivClass(S!1)(choose(EquivClass[X](S!1)(x))) = EquivClass(S!1)(x)") (("1" (inst-cp -1 "x!2") (("1" (expand "rep") (("1" (replace -2) (("1" (inst -1 "x!3") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (skosimp*) (("2" (lemma "EquivClassEq[X]") (("2" (inst?) (("2" (assert) (("2" (use "EquivClassChoose[X]") (("2" (hide 2) (("2" (typepred "S!1") (("2" (expand "equivalence?") (("2" (expand "symmetric?") (("2" (flatten) (("2" (expand "repEC") (("2" (forward-chain -2) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "restrict_full[[X, X], bool]") (("2" (inst 1 "x!3") nil nil)) nil) ("3" (rewrite "restrict_full[[X, X], bool]") (("3" (assert) nil nil)) nil) ("4" (rewrite "restrict_full[[X, X], bool]") (("4" (inst 1 "x!2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil)) 77 70 t nil)) (QuotientAction_TCC3 0 (QuotientAction_TCC3-2 "Fix for 3.2" 3307986379 3307986379 ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (expand "member") (("" (skosimp*) (("" (rewrite "restrict_full[[Quotient[X](S!1), Quotient[X](S!1)], bool]") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (typepred "x!1`1" "x!1`2") (("" (expand "lift") (("" (lemma "EquivClassEq[X]") (("" (auto-rewrite "EquivClassNonEmpty[X]") (("" (skosimp*) (("" (replace -2) (("" (replace -3) (("" (inst?) (("" (assert) (("" (hide 2) (("" (expand "action") (("" (case "FORALL(x : X) :
                            EquivClass(S!1)(choose(EquivClass[X](S!1)(x))) = EquivClass(S!1)(x)") (("1" (inst-cp -1 "x!2") (("1" (expand "rep") (("1" (replace -2) (("1" (inst -1 "x!3") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (skosimp*) (("2" (lemma "EquivClassEq[X]") (("2" (inst?) (("2" (assert) (("2" (hide 2) (("2" (use "rep_lemma[X]") (("2" (expand "EquivClass") (("2" (expand "rep") (("2" (typepred "S!1") (("2" (expand "equivalence?") (("2" (flatten) (("2" (expand "symmetric?") (("2" (forward-chain -2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (expand "member") (("2" (inst -1 "x!4") (("2" (expand "reflexive?") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved nil 777443 16290 t shostak) (QuotientAction_TCC3-1 nil 3245193427 3307983097 ("" (skosimp*) (("" (expand "PreservesEq") (("" (expand "subset?") (("" (expand "member") (("" (skosimp*) (("" (rewrite "restrict_full[[Quotient[X](S!1), Quotient[X](S!1)], bool]") (("" (expand "EquivalenceKernel") (("" (expand "quotient_map") (("" (typepred "x!1`1" "x!1`2") (("" (expand "lift") (("" (lemma "EquivClassEq[X]") (("" (auto-rewrite "EquivClassNonEmpty[X]") (("" (skosimp*) (("" (replace -2) (("" (replace -3) (("" (inst?) (("1" (assert) (("1" (hide 2) (("1" (expand "action") (("1" (case "FORALL(x : X) :
                   EquivClass(S!1)(choose(EquivClass[X](S!1)(x))) = EquivClass(S!1)(x)") (("1" (inst-cp -1 "x!2") (("1" (expand "rep") (("1" (replace -2) (("1" (inst -1 "x!3") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (skosimp*) (("2" (lemma "EquivClassEq[X]") (("2" (inst?) (("2" (assert) (("2" (use "EquivClassChoose[X]") (("2" (hide 2) (("2" (typepred "S!1") (("2" (expand "equivalence?") (("2" (expand "symmetric?") (("2" (flatten) (("2" (inst -2 "x!4" "choose(EquivClass[X](S!1)(x!4))") (("2" (assert) (("2" (expand "repEC") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((PreservesEq const-decl "bool" KernelDefinition nil) (member const-decl "bool" sets nil) (restrict_full formula-decl nil restrict_props nil) (X formal-type-decl nil QuotientIteration nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (set type-eq-decl nil sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (PRED type-eq-decl nil defined_types nil) (equivalence? const-decl "bool" relations nil) (equivalence type-eq-decl nil relations nil) (Quotient type-eq-decl nil QuotientDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (lift const-decl "Y" QuotientExtensionProperties nil) (rep const-decl "T" QuotientDefinition nil) (action const-decl "bool" QuotientIteration nil) (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (empty? const-decl "bool" sets nil) (reflexive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (rep_lemma formula-decl nil QuotientDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (NOT const-decl "[bool -> bool]" booleans nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil)) 1154 910 t shostak)) (QuotientAction_TCC4 0 (QuotientAction_TCC4-1 nil 3245525352 3307983097 ("" (grind :exclude "rep" :if-match nil) nil nil) proved ((restrict const-decl "R" restrict nil) (member const-decl "bool" sets nil) (EquivalenceKernel const-decl "equivalence[X1]" KernelDefinition nil) (subset? const-decl "bool" sets nil) (PreservesEq const-decl "bool" KernelDefinition nil)) 137 140 t shostak)) (QuotientAction 0 (QuotientAction-1 nil 3243015883 3307983102 ("" (skosimp*) (("" (typepred "S!1" "R!1") (("" (expand "bijective?") (("" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (expand "lift") (("1" (typepred "x1!1" "x2!1") (("1" (auto-rewrite-theories "QuotientDefinition[X]" "QuotientDefinition[Quotient[X](S!1)]") (("1" (skosimp*) (("1" (replace -1) (("1" (replace -2) (("1" (hide -1 -2) (("1" (expand "rep") (("1" (name-replace "ch1" "choose(EquivClass[Quotient[X](S!1)](R!1)(x!1))") (("1" (name-replace "ch2" "choose(EquivClass[Quotient[X](S!1)](R!1)(x!2))") (("1" (typepred "ch1" "ch2") (("1" (skosimp*) (("1" (replace -1) (("1" (replace -3) (("1" (hide -1 -3) (("1" (name-replace "ch3" "choose(EquivClass[X](S!1)(x!3))") (("1" (name-replace "ch4" "choose(EquivClass[X](S!1)(x!4))") (("1" (typepred "ch3" "ch4") (("1" (stop-rewrite "EquivClassEq[X]") (("1" (assert) (("1" (case "EquivClass[X](action(S!1)(R!1))(ch3)(ch3)") (("1" (replace -6) (("1" (hide -6) (("1" (assert) (("1" (expand "action") (("1" (lemma "EquivClassEq[X]") (("1" (inst?) (("1" (prop) (("1" (replace -1) (("1" (hide -1 -2) (("1" (lemma "EquivClassEq[X]") (("1" (inst -1 "S!1" "ch4" "x!4") (("1" (prop) (("1" (replace -1) (("1" (hide -1 -2) (("1" (hide -2 -3) (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "symmetric?") (("1" (inst-cp -8 "EquivClass[X](S!1)(x!4)" "EquivClass(S!1)(ch3)") (("1" (prop) (("1" (hide -2) (("1" (inst -8 "x!2" "EquivClass[X](S!1)(x!4)") (("1" (expand "transitive?") (("1" (inst-cp -9 "x!1" "EquivClass(S!1)(ch3)" "EquivClass[X](S!1)(x!4)") (("1" (assert) (("1" (inst-cp -9 "x!1" "EquivClass[X](S!1)(x!4)" "x!2") (("1" (assert) nil nil) ("2" (expand "reflexive?") (("2" (inst 1 "x!4") nil nil)) nil)) nil)) nil) ("2" (expand "reflexive?") (("2" (inst 1 "x!4") nil nil)) nil) ("3" (expand "reflexive?") (("3" (inst 1 "ch3") nil nil)) nil)) nil)) nil) ("2" (expand "reflexive?") (("2" (inst 1 "x!4") nil nil)) nil)) nil)) nil)) nil) ("2" (expand "reflexive?") (("2" (inst 1 "ch3") nil nil)) nil) ("3" (expand "reflexive?") (("3" (inst 1 "x!4") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "equivalence?") (("2" (expand "symmetric?") (("2" (flatten) (("2" (inst -7 "x!4" "ch4") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 -4 -5 2) (("2" (expand "EquivClass") (("2" (expand "action") (("2" (expand "equivalence?") (("2" (expand "reflexive?") (("2" (flatten) (("2" (inst -4 "EquivClass(S!1)(ch3)") (("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (typepred "y!1") (("2" (skosimp*) (("2" (inst 1 "EquivClass(R!1)(EquivClass(S!1)(x!1))") (("1" (expand "lift") (("1" (expand "quotient_map") (("1" (replace -1) (("1" (lemma "EquivClassEq[X]") (("1" (inst -1 "action(S!1)(R!1)" "_" "_") (("1" (case "nonempty?(EquivClass(R!1)(EquivClass(S!1)(x!1)))") (("1" (expand "rep") (("1" (name-replace "ch1" "choose(EquivClass(R!1)(EquivClass(S!1)(x!1)))") (("1" (typepred "ch1") (("1" (skosimp*) (("1" (case "nonempty?(ch1)") (("1" (name-replace "ch2" "choose(ch1)") (("1" (typepred "ch2") (("1" (inst -6 "ch2" "x!1") (("1" (assert) (("1" (hide 2) (("1" (expand "action" 1) (("1" (expand "EquivClass" -4) (("1" (expand "equivalence?") (("1" (flatten) (("1" (expand "symmetric?") (("1" (inst -11 "LAMBDA (z: X): S!1(x!1, z)" "ch1") (("1" (assert) (("1" (case-replace "EquivClass(S!1)(ch2) = ch1") (("1" (expand "EquivClass" 1) (("1" (propax) nil nil)) nil) ("2" (hide 2) (("2" (hide -2 -4 -5 -6 -10 -11 -12) (("2" (replace -2) (("2" (hide -2) (("2" (assert) (("2" (expand "EquivClass" -1) (("2" (lemma "EquivClassEq[X]") (("2" (inst -1 "S!1" "x!2" "ch2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "x!1") (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (hide -1 -2 -3 -4 -5 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 2) (("2" (grind) nil nil)) nil) ("3" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "EquivClass[X](S!1)(x!1)") (("2" (inst 1 "x!1") nil nil)) nil) ("3" (inst 1 "x!1") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((Quotient type-eq-decl nil QuotientDefinition nil) (EquivClass const-decl "set[T]" QuotientDefinition nil) (= const-decl "[T, T -> boolean]" equalities nil) (set type-eq-decl nil sets nil) (equivalence type-eq-decl nil relations nil) (equivalence? const-decl "bool" relations nil) (PRED type-eq-decl nil defined_types nil) (X formal-type-decl nil QuotientIteration nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (rep const-decl "T" QuotientDefinition nil) (quotient_map const-decl "Quotient(S)" QuotientDefinition nil) (EquivClassEq formula-decl nil QuotientDefinition nil) (reflexive? const-decl "bool" relations nil) (transitive? const-decl "bool" relations nil) (symmetric? const-decl "bool" relations nil) (action const-decl "bool" QuotientIteration nil) (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil) (lift const-decl "Y" QuotientExtensionProperties nil) (injective? const-decl "bool" functions nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil)) 4904 3340 t nil)))(PartialFunctionDefinitions (LPartFun_to_SPartFun_TCC1 0 (LPartFun_to_SPartFun_TCC1-1 nil 3243663400 3307983102 ("" (subtype-tcc) nil nil) proved nil 39 40 t shostak)) (SPartFun_to_LPartFun_to_SPartFun 0 (SPartFun_to_LPartFun_to_SPartFun-1 nil 3243715985 3307983103 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("1" (apply-extensionality :hide? t) (("1" (grind) nil nil)) nil) ("2" (apply-extensionality :hide? t) (("1" (typepred "x!1") (("1" (grind) nil nil)) nil) ("2" (skosimp*) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((X formal-type-decl nil PartialFunctionDefinitions nil) (PRED type-eq-decl nil defined_types nil) (Y formal-type-decl nil PartialFunctionDefinitions nil) (SubsetPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (SPartFun_to_LPartFun const-decl "LiftPartialFunction" PartialFunctionDefinitions nil) (LPartFun_to_SPartFun const-decl "SubsetPartialFunction" PartialFunctionDefinitions nil) (LiftPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (lift type-decl nil lift_adt nil) (boolean nonempty-type-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil)) 829 550 t shostak)) (LPartFun_to_SPartFun_to_LPartFun 0 (LPartFun_to_SPartFun_to_LPartFun-1 nil 3243716027 3307983104 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) (("" (rewrite "lift_up_eta") nil nil)) nil)) nil)) nil) proved ((X formal-type-decl nil PartialFunctionDefinitions nil) (Y formal-type-decl nil PartialFunctionDefinitions nil) (lift type-decl nil lift_adt nil) (LPartFun_to_SPartFun const-decl "SubsetPartialFunction" PartialFunctionDefinitions nil) (SPartFun_to_LPartFun const-decl "LiftPartialFunction" PartialFunctionDefinitions nil) (LiftPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (SubsetPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (PRED type-eq-decl nil defined_types nil) (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil) (boolean nonempty-type-decl nil booleans nil) (lift_up_eta formula-decl nil lift_adt nil)) 213 150 t shostak)))(PartialFunctionComposition (oh_TCC1 0 (oh_TCC1-1 nil 3243015884 3307983104 ("" (subtype-tcc) nil nil) proved nil 260 220 t nil)) (oh_TCC2 0 (oh_TCC2-1 nil 3243015884 3307983104 ("" (subtype-tcc) nil nil) proved nil 285 220 nil nil)) (SPartFun_to_LPartFun_CompositionPreservation 0 (SPartFun_to_LPartFun_CompositionPreservation-1 nil 3243716138 3307983104 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((X formal-type-decl nil PartialFunctionComposition nil) (Z formal-type-decl nil PartialFunctionComposition nil) (lift type-decl nil lift_adt nil) (O const-decl "LiftPartialFunction[X, Z]" PartialFunctionComposition nil) (O const-decl "SubsetPartialFunction[X, Z]" PartialFunctionComposition nil) (Y formal-type-decl nil PartialFunctionComposition nil) (SPartFun_to_LPartFun const-decl "LiftPartialFunction" PartialFunctionDefinitions nil) (LiftPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (SubsetPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (PRED type-eq-decl nil defined_types nil) (CompDom const-decl "PRED[X]" PartialFunctionComposition nil)) 267 230 t shostak)) (LPartFun_to_SPartFun_CompositionPreservation 0 (LPartFun_to_SPartFun_CompositionPreservation-1 nil 3243716183 3307983106 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("1" (apply-extensionality :hide? t) (("1" (grind) nil nil)) nil) ("2" (apply-extensionality :hide? t) (("1" (grind) (("1" (typepred "x!1") (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) proved ((X formal-type-decl nil PartialFunctionComposition nil) (PRED type-eq-decl nil defined_types nil) (Z formal-type-decl nil PartialFunctionComposition nil) (SubsetPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (O const-decl "SubsetPartialFunction[X, Z]" PartialFunctionComposition nil) (O const-decl "LiftPartialFunction[X, Z]" PartialFunctionComposition nil) (Y formal-type-decl nil PartialFunctionComposition nil) (LPartFun_to_SPartFun const-decl "SubsetPartialFunction" PartialFunctionDefinitions nil) (LiftPartialFunction type-eq-decl nil PartialFunctionDefinitions nil) (lift type-decl nil lift_adt nil) (CompDom const-decl "PRED[X]" PartialFunctionComposition nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil)) 1164 970 t shostak)))
