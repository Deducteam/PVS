(|record_prelude_example|
 (|R_prelude_extensionality| "" (GRIND)
  (("" (APPLY-EXTENSIONALITY) NIL)))
 (|r_prelude_TCC1| "" (TCC :DEFS EXPLICIT) NIL)
 (|recform_prelude| "" (APPLY-EXTENSIONALITY)
  (("1" (EXPAND "r_prelude") (("1" (PROPAX) NIL)))
   ("2" (EXPAND "r_prelude") (("2" (ASSERT) NIL))))))(|tuple_prelude_example|
 (|T_prelude_extensionality| "" (GRIND)
  (("" (APPLY-EXTENSIONALITY) NIL)))
 (|t_prelude_TCC1| "" (TCC :DEFS EXPLICIT) NIL)
 (|tupaccess_prelude| "" (ASSERT) NIL)
 (|tupform_prelude| "" (EXPAND "t_prelude")
  (("" (APPLY-EXTENSIONALITY) NIL))))(|strings| (|string_rep_TCC1| "" (SUBTYPE-TCC) NIL)
 (|string_rep_TCC2| "" (SUBTYPE-TCC) NIL)
 (|string_rep| "" (PROPAX) NIL))(|character_adt_reduce|)(|character_adt|)(|list2set| (|list2set_TCC1| "" (TCC :DEFS !) NIL))(|list2finseq| (|finseq2list_rec_TCC1| "" (TCC :DEFS EXPLICIT) NIL)
 (|finseq2list_rec_TCC2| "" (TCC :DEFS !) NIL)
 (|finseq2list_rec_TCC3| "" (TCC :DEFS !) NIL)
 (|finseq2list_TCC1| "" (TCC :DEFS EXPLICIT) NIL))(|filters| (|filter_TCC1| "" (TCC :DEFS !) NIL)
 (|filter_TCC2| "" (SKOSIMP)
  (("" (REPLACE -1)
    (("" (EXPAND "length" 2 2) (("" (ASSERT) NIL))))))))(|map_props|
 (|map_list_composition| "" (INDUCT "l")
  (("1" (SKOSIMP) (("1" (EXPAND "map") (("1" (PROPAX) NIL)))))
   ("2" (SKOSIMP)
    (("2" (SKOSIMP)
      (("2" (INST?)
        (("2" (EXPAND "map" +)
          (("2" (REPLACE -1)
            (("2" (EXPAND "o" 1 2) (("2" (PROPAX) NIL)))))))))))))))
 (|map_seq_composition| "" (SKOSIMP)
  (("" (EXPAND "map")
    (("" (APPLY-EXTENSIONALITY)
      (("" (HIDE 2)
        (("" (EXPAND "o")
          ((""
            (CASE "nth((LAMBDA (n: nat): f1!1(nth(s!1, n))), x!1) = f1!1(nth(s!1, x!1))")
            (("1" (REPLACE -1) (("1" (PROPAX) NIL)))
             ("2" (HIDE 2)
              (("2" (EXPAND "nth" 1 1)
                (("2" (PROPAX) NIL))))))))))))))))))(|list_props| (|length_TCC1| "" (TCC :DEFS !) NIL)
 (|member_TCC1| "" (TCC :DEFS !) NIL)
 (|nth_TCC1| "" (SKOSIMP)
  (("" (TYPEPRED "n!1")
    (("" (EXPAND "length") (("" (ASSERT) NIL)))))))
 (|nth_TCC2| "" (SKOSIMP)
  (("" (TYPEPRED "n!1")
    (("" (EXPAND "length") (("" (ASSERT) NIL)))))))
 (|nth_TCC3| "" (INDUCT "l")
  (("1" (SKOSIMP*)
    (("1" (TYPEPRED "n!1")
      (("1" (EXPAND "length") (("1" (ASSERT) NIL)))))))
   ("2" (SKOSIMP*)
    (("2" (ASSERT)
      (("2" (TYPEPRED "n!1")
        (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL)))))))))
   ("3" (SKOSIMP*)
    (("3" (ASSERT)
      (("3" (TYPEPRED "n!1")
        (("3" (EXPAND "length" -1) (("3" (ASSERT) NIL)))))))))))
 (|nth_TCC4| "" (INDUCT "l")
  (("1" (SKOSIMP*)
    (("1" (TYPEPRED "n!1")
      (("1" (EXPAND "length") (("1" (ASSERT) NIL)))))))
   ("2" (SKOSIMP*)
    (("2" (EXPAND "length" 2 2) (("2" (ASSERT) NIL)))))
   ("3" (SKOSIMP*)
    (("3" (TYPEPRED "n!1")
      (("3" (EXPAND "length" -1) (("3" (ASSERT) NIL)))))))))
 (|append_TCC1| "" (TCC :DEFS !) NIL)
 (|reverse_TCC1| "" (TERMINATION-TCC) NIL)
 (|append_null| "" (INDUCT "l")
  (("1" (GRIND) NIL)
   ("2" (SKOSIMP)
    (("2" (EXPAND "append" +)
      (("2" (REPLACE -1) (("2" (PROPAX) NIL)))))))))
 (|append_assoc| "" (INDUCT "l1")
  (("1" (SKOSIMP)
    (("1" (EXPAND "append" 1 1)
      (("1" (EXPAND "append" 1 3) (("1" (PROPAX) NIL)))))))
   ("2" (SKOSIMP)
    (("2" (SKOSIMP)
      (("2" (EXPAND "append" 1 1)
        (("2" (INST?)
          (("2" (REPLACE -1)
            (("2" (EXPAND "append" 1 4)
              (("2" (EXPAND "append" 1 3)
                (("2" (PROPAX) NIL)))))))))))))))))
 (|reverse_append| "" (INDUCT "l1")
  (("1" (SKOSIMP)
    (("1" (EXPAND "append" 1 1)
      (("1" (EXPAND "reverse" 1 3)
        (("1" (REWRITE "append_null") NIL)))))))
   ("2" (SKOSIMP)
    (("2" (SKOSIMP)
      (("2" (EXPAND "append" 1 1)
        (("2" (EXPAND "reverse" 1 1)
          (("2" (INST?)
            (("2" (REPLACE -1)
              (("2" (REWRITE "append_assoc" :DIR RL)
                (("2" (EXPAND "reverse" 1 4)
                  (("2" (PROPAX) NIL)))))))))))))))))))
 (|reverse_reverse| "" (INDUCT "l")
  (("1" (GRIND) NIL)
   ("2" (SKOSIMP)
    (("2" (EXPAND "reverse" 1 2)
      (("2" (REWRITE "reverse_append")
        (("2" (EXPAND "reverse" 1 1)
          (("2" (REPLACE -1)
            (("2" (EXPAND "reverse" 1 1)
              (("2" (EXPAND "append" 1 2)
                (("2" (EXPAND "append" 1 1)
                  (("2" (EXPAND "append" 1 1)
                    (("2" (PROPAX) NIL)))))))))))))))))))))
 (|list_rep| "" (ASSERT) NIL))(|list_adt_reduce|)(|list_adt_map|)(|list_adt|)(|lex2| (|lex2_TCC1| "" (SUBTYPE-TCC) (("" (GRIND) NIL)))
 (|lex2_TCC2| "" (SUBTYPE-TCC) NIL)
 (|lex2_TCC3| "" (SUBTYPE-TCC) (("" (GRIND) NIL)))
 (|lex2_TCC4| "" (SUBTYPE-TCC) NIL) (|lex2_TCC5| "" (GRIND) NIL)
 (|lex2_TCC6| "" (SUBTYPE-TCC) NIL)
 (|lex2_TCC7| "" (SUBTYPE-TCC) NIL) (|lex2_TCC8| "" (GRIND) NIL)
 (|lex2_lt| "" (GRIND) NIL))(|ordinals| (|lessp_TCC1| "" (GRIND) NIL)
 (|lessp_TCC2| "" (SKOSIMP*)
  (("" (REPLACE -1)
    (("" (EXPAND "size")
      (("" (EXPAND "reduce" 3 2) (("" (ASSERT) NIL)))))))))
 (|ordinal?_TCC1| "" (SKOSIMP*)
  (("" (REPLACE -1)
    (("" (EXPAND "size")
      (("" (EXPAND "reduce" 1 2) (("" (ASSERT) NIL)))))))))
 (|ordinal?_TCC2| "" (SKOSIMP*)
  (("" (REPLACE -1)
    (("" (EXPAND "size")
      (("" (EXPAND "reduce" 1 2) (("" (ASSERT) NIL)))))))))
 (|ordinal_TCC1| "" (INST 1 "zero")
  (("" (ASSERT) (("" (EXPAND "ordinal?") (("" (PROPAX) NIL)))))))
 (|ordinal_irreflexive| "" (INDUCT "r")
  (("1" (ASSERT) NIL)
   ("2" (FLATTEN) (("2" (EXPAND "<") (("2" (PROPAX) NIL)))))
   ("3" (SKOSIMP*)
    (("3" (ASSERT)
      (("3" (EXPAND "<" -4)
        (("3" (SPLIT -4)
          (("1" (ASSERT)
            (("1" (EXPAND "ordinal?" -3) (("1" (PROPAX) NIL)))))
           ("2" (EXPAND "ordinal?" -4)
            (("2" (FLATTEN) (("2" (ASSERT) NIL)))))))))))))))
 (|ordinal_antisym| "" (INDUCT "r")
  (("1" (ASSERT) NIL)
   ("2" (FLATTEN)
    (("2" (SKOSIMP*) (("2" (EXPAND "<") (("2" (ASSERT) NIL)))))))
   ("3" (SKOSIMP)
    (("3" (EXPAND "ordinal?" -3)
      (("3" (FLATTEN)
        (("3" (ASSERT)
          (("3" (INDUCT "s")
            (("1" (ASSERT) NIL)
             ("2" (FLATTEN)
              (("2" (EXPAND "<" -2) (("2" (PROPAX) NIL)))))
             ("3" (SKOSIMP)
              (("3" (EXPAND "ordinal?" -3)
                (("3" (FLATTEN)
                  (("3" (ASSERT)
                    (("3" (EXPAND "<" -6)
                      (("3" (SPLIT -6)
                        (("1" (INST -8 "add2_var!2")
                          (("1" (ASSERT)
                            (("1"
                              (EXPAND "<" -7)
                              (("1" (PROPAX) NIL)))))))
                         ("2" (FLATTEN)
                          (("2" (EXPAND "<" -8)
                            (("2"
                              (ASSERT)
                              (("2"
                                (REPLACE -1)
                                (("2"
                                  (LEMMA "ordinal_irreflexive")
                                  (("2"
                                    (INST -1 "add2_var!2")
                                    NIL)))))))))))
                         ("3" (FLATTEN)
                          (("3" (EXPAND "<" -9)
                            (("3"
                              (REPLACE -1)
                              (("3"
                                (REPLACE -2)
                                (("3"
                                  (LEMMA "ordinal_irreflexive")
                                  (("3"
                                    (INST-CP -1 "add2_var!2")
                                    (("3"
                                      (ASSERT)
                                      (("3"
                                        (INST -12 "add3_var!2")
                                        (("3"
                                          (ASSERT)
                                          NIL)))))))))))))))))))))))))))))))))))))))))
 (|ordinal_antisymmetric| "" (SKOSIMP)
  (("" (EXPAND "<=")
    (("" (SPLIT)
      (("1" (SPLIT)
        (("1" (LEMMA "ordinal_antisym")
          (("1" (INST?) (("1" (ASSERT) NIL)))))
         ("2" (ASSERT) NIL)))
       ("2" (PROPAX) NIL)))))))
 (|ordinal_transitive| "" (INDUCT "s")
  (("1" (ASSERT) NIL)
   ("2" (FLATTEN)
    (("2" (SKOSIMP)
      (("2" (EXPAND "<" -2)
        (("2" (LIFT-IF -2) (("2" (ASSERT) NIL)))))))))
   ("3" (SKOSIMP)
    (("3" (EXPAND "ordinal?" -3)
      (("3" (FLATTEN)
        (("3" (ASSERT)
          (("3" (HIDE -3 -4)
            (("3" (SKOSIMP)
              (("3" (EXPAND "<" -4)
                (("3" (LIFT-IF)
                  (("3" (SPLIT -4)
                    (("1" (FLATTEN)
                      (("1" (EXPAND "<" -5)
                        (("1" (LIFT-IF)
                          (("1" (SPLIT)
                            (("1"
                              (SPLIT)
                              (("1" (FLATTEN) (("1" (PROPAX) NIL)))
                               ("2"
                                (FLATTEN)
                                (("2"
                                  (ASSERT)
                                  (("2"
                                    (EXPAND "<" 3)
                                    (("2" (PROPAX) NIL)))))))))
                             ("2"
                              (FLATTEN)
                              (("2"
                                (SPLIT)
                                (("1" (FLATTEN) (("1" (PROPAX) NIL)))
                                 ("2"
                                  (FLATTEN)
                                  (("2"
                                    (EXPAND "<" 4)
                                    (("2"
                                      (ASSERT)
                                      NIL)))))))))))))))))
                     ("2" (FLATTEN)
                      (("2" (LIFT-IF)
                        (("2" (SPLIT)
                          (("1" (FLATTEN) (("1" (PROPAX) NIL)))
                           ("2" (FLATTEN)
                            (("2"
                              (EXPAND "<" -5)
                              (("2"
                                (LIFT-IF)
                                (("2"
                                  (SPLIT -5)
                                  (("1"
                                    (FLATTEN)
                                    (("1" (PROPAX) NIL)))
                                   ("2"
                                    (FLATTEN)
                                    (("2"
                                      (PROP)
                                      (("1"
                                        (EXPAND "<" 4)
                                        (("1"
                                          (ASSERT)
                                          (("1"
                                            (INST
                                             -4
                                             "exp(r!1)"
                                             "exp(t!1)")
                                            (("1"
                                              (ASSERT)
                                              (("1"
                                                (FLATTEN)
                                                (("1"
                                                  (PROPAX)
                                                  NIL)))))
                                             ("2"
                                              (TYPEPRED "t!1")
                                              (("2"
                                                (EXPAND
                                                 "ordinal?"
                                                 -1)
                                                (("2"
                                                  (FLATTEN)
                                                  (("2"
                                                    (PROPAX)
                                                    NIL)))))))
                                             ("3"
                                              (TYPEPRED "r!1")
                                              (("3"
                                                (EXPAND
                                                 "ordinal?"
                                                 -1)
                                                (("3"
                                                  (FLATTEN)
                                                  (("3"
                                                    (PROPAX)
                                                    NIL)))))))))))))
                                       ("2"
                                        (EXPAND "<" 5)
                                        (("2"
                                          (ASSERT)
                                          (("2"
                                            (FLATTEN)
                                            (("2"
                                              (INST
                                               -4
                                               "exp(r!1)"
                                               "exp(t!1)")
                                              (("1" (ASSERT) NIL)
                                               ("2"
                                                (TYPEPRED "t!1")
                                                (("2"
                                                  (EXPAND
                                                   "ordinal?"
                                                   -1)
                                                  (("2"
                                                    (FLATTEN)
                                                    (("2"
                                                      (PROPAX)
                                                      NIL)))))))
                                               ("3"
                                                (TYPEPRED "r!1")
                                                (("3"
                                                  (EXPAND
                                                   "ordinal?"
                                                   -1)
                                                  (("3"
                                                    (FLATTEN)
                                                    (("3"
                                                      (PROPAX)
                                                      NIL)))))))))))))))
                                       ("3"
                                        (EXPAND "<" 4)
                                        (("3" (ASSERT) NIL)))
                                       ("4"
                                        (EXPAND "<" 5)
                                        (("4" (ASSERT) NIL)))
                                       ("5"
                                        (EXPAND "<" 4)
                                        (("5" (ASSERT) NIL)))
                                       ("6"
                                        (EXPAND "<" 5)
                                        (("6" (ASSERT) NIL)))
                                       ("7"
                                        (EXPAND "<" 4)
                                        (("7" (ASSERT) NIL)))
                                       ("8"
                                        (EXPAND "<" 5)
                                        (("8" (ASSERT) NIL)))
                                       ("9"
                                        (EXPAND "<" 4)
                                        (("9" (ASSERT) NIL)))
                                       ("10"
                                        (EXPAND "<" 5)
                                        (("10" (ASSERT) NIL)))
                                       ("11"
                                        (EXPAND "<" 4)
                                        (("11" (ASSERT) NIL)))
                                       ("12"
                                        (EXPAND "<" 5)
                                        (("12" (ASSERT) NIL)))
                                       ("13"
                                        (EXPAND "<" 4)
                                        (("13" (ASSERT) NIL)))
                                       ("14"
                                        (EXPAND "<" 5)
                                        (("14" (ASSERT) NIL)))
                                       ("15"
                                        (EXPAND "<" 4)
                                        (("15" (ASSERT) NIL)))
                                       ("16"
                                        (EXPAND "<" 5)
                                        (("16" (ASSERT) NIL)))
                                       ("17"
                                        (EXPAND "<" 4)
                                        (("17"
                                          (ASSERT)
                                          (("17"
                                            (FLATTEN)
                                            (("17"
                                              (INST
                                               -9
                                               "rest(r!1)"
                                               "rest(t!1)")
                                              (("1" (ASSERT) NIL)
                                               ("2"
                                                (TYPEPRED "t!1")
                                                (("2"
                                                  (EXPAND
                                                   "ordinal?"
                                                   -1)
                                                  (("2"
                                                    (FLATTEN)
                                                    (("2"
                                                      (PROPAX)
                                                      NIL)))))))
                                               ("3"
                                                (TYPEPRED "r!1")
                                                (("3"
                                                  (EXPAND
                                                   "ordinal?"
                                                   -1)
                                                  (("3"
                                                    (FLATTEN)
                                                    (("3"
                                                      (PROPAX)
                                                      NIL)))))))))))))))
                                       ("18"
                                        (EXPAND "<" 5)
                                        (("18"
                                          (ASSERT)
                                          (("18"
                                            (FLATTEN)
                                            (("18"
                                              (INST
                                               -9
                                               "rest(r!1)"
                                               "rest(t!1)")
                                              (("1" (ASSERT) NIL)
                                               ("2"
                                                (TYPEPRED "t!1")
                                                (("2"
                                                  (EXPAND
                                                   "ordinal?"
                                                   -1)
                                                  (("2"
                                                    (FLATTEN)
                                                    (("2"
                                                      (PROPAX)
                                                      NIL)))))))
                                               ("3"
                                                (TYPEPRED "r!1")
                                                (("3"
                                                  (EXPAND
                                                   "ordinal?"
                                                   -1)
                                                  (("3"
                                                    (FLATTEN)
                                                    (("3"
                                                      (PROPAX)
                                                      NIL)))))))))))))))))))))))))))))))))))))))))))))))))))))
 (|ordinal_trichotomy| "" (INDUCT "r")
  (("1" (ASSERT) NIL)
   ("2" (FLATTEN)
    (("2" (INDUCT "s")
      (("1" (ASSERT) NIL) ("2" (FLATTEN) (("2" (PROPAX) NIL)))
       ("3" (SKOSIMP)
        (("3" (EXPAND "ordinal?" -3)
          (("3" (FLATTEN)
            (("3" (ASSERT)
              (("3" (EXPAND "<" 1) (("3" (PROPAX) NIL)))))))))))))))
   ("3" (SKOSIMP)
    (("3" (EXPAND "ordinal?" -3)
      (("3" (FLATTEN)
        (("3" (ASSERT)
          (("3" (INDUCT "s")
            (("1" (ASSERT) NIL)
             ("2" (FLATTEN)
              (("2" (EXPAND "<" 3) (("2" (PROPAX) NIL)))))
             ("3" (SKOSIMP)
              (("3" (ASSERT)
                (("3" (EXPAND "ordinal?" -3)
                  (("3" (FLATTEN)
                    (("3" (ASSERT)
                      (("3" (EXPAND "<" 1)
                        (("3" (FLATTEN)
                          (("3" (EXPAND "<" 5)
                            (("3"
                              (FLATTEN)
                              (("3"
                                (INST -6 "add2_var!2")
                                (("3"
                                  (ASSERT)
                                  (("3"
                                    (REPLACE -6)
                                    (("3"
                                      (ASSERT)
                                      (("3"
                                        (HIDE -3 -4 1 5)
                                        (("3"
                                          (HIDE -6 -7)
                                          (("3"
                                            (INST -5 "add3_var!2")
                                            (("3"
                                              (ASSERT)
                                              NIL)))))))))))))))))))))))))))))))))))))))))))))
 (|well_founded_le| "" (EXPAND "well_founded?")
  (("" (LEMMA "ordinal_induction")
    (("" (SKOSIMP)
      (("" (SKOSIMP)
        (("" (INST -1 "LAMBDA (x:ordinal): NOT p!1(x)")
          (("" (SPLIT)
            (("1" (BETA) (("1" (INST -1 "y!1") NIL)))
             ("2" (SKOSIMP)
              (("2" (BETA)
                (("2" (INST 1 "r!1")
                  (("2" (SKOSIMP)
                    (("2" (INST -1 "x!1")
                      (("2" (ASSERT) NIL))))))))))))))))))))))))(|ordstruct_adt_reduce|)(|ordstruct_adt|)(|finite_sequences| (|empty_seq_TCC1| "" (EXISTENCE-TCC) NIL)
 (|oh_TCC1| "" (TCC :DEFS !) NIL) (|oh_TCC2| "" (TCC :DEFS !) NIL)
 (|caret_TCC1| "" (TCC :DEFS EXPLICIT) NIL)
 (|caret_TCC2| "" (TCC :DEFS EXPLICIT) NIL)
 (|caret_TCC3| "" (SKOSIMP)
  (("" (LIFT-IF)
    (("" (ASSERT)
      (("" (GROUND)
        (("1" (EXPAND "empty_seq") (("1" (ASSERT) NIL)))
         ("2" (EXPAND "empty_seq") (("2" (ASSERT) NIL)))
         ("3" (EXPAND "min")
          (("3" (LIFT-IF) (("3" (ASSERT) NIL)))))))))))))
 (|extract1_TCC1| "" (TCC :DEFS !) NIL)
 (|o_assoc| "" (SKOSIMP)
  (("" (EXPAND "o")
    (("" (APPLY-EXTENSIONALITY)
      (("1" (HIDE 2)
        (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (GROUND) NIL)))))))
       ("2" (HIDE 2) (("2" (SKOSIMP) (("2" (ASSERT) NIL)))))
       ("3" (HIDE 2) (("3" (SKOSIMP) (("3" (ASSERT) NIL)))))
       ("4" (HIDE 2) (("4" (SKOSIMP) (("4" (ASSERT) NIL)))))
       ("5" (HIDE 2) (("5" (SKOSIMP) (("5" (ASSERT) NIL))))))))))))(|seq_functions|)(|sequences| (|insert_TCC1| "" (TCC :DEFS !) NIL)
 (|insert_delete| "" (SKOLEM 1 ("n!1" "seq!1"))
  (("" (EXPAND "insert")
    (("" (APPLY-EXTENSIONALITY 1)
      (("1" (DELETE 2)
        (("1" (LIFT-IF)
          (("1" (SPLIT)
            (("1" (FLATTEN)
              (("1" (EXPAND "delete")
                (("1" (LIFT-IF) (("1" (ASSERT) NIL)))))))
             ("2" (FLATTEN)
              (("2" (SPLIT)
                (("1" (FLATTEN)
                  (("1" (EXPAND "nth") (("1" (ASSERT) NIL)))))
                 ("2" (FLATTEN)
                  (("2" (EXPAND "delete")
                    (("2" (ASSERT) NIL)))))))))))))))
       ("2" (SKOSIMP*) (("2" (APPLY-EXTENSIONALITY 4) NIL)))))))))
 (|add_first_rest| "" (SKOLEM 1 ("seq!1"))
  (("" (EXPAND "add")
    (("" (EXPAND "insert")
      (("" (APPLY-EXTENSIONALITY 1)
        (("1" (DELETE 2)
          (("1" (LIFT-IF)
            (("1" (PROP)
              (("1" (EXPAND "first")
                (("1" (EXPAND "nth") (("1" (ASSERT) NIL)))))
               ("2" (EXPAND "rest")
                (("2" (EXPAND "suffix") (("2" (PROPAX) NIL)))))))))))
         ("2" (SKOSIMP*)
          (("2" (APPLY-EXTENSIONALITY 3) NIL)))))))))))
 (|sequence_induction| "" (LEMMA "nat_induction")
  (("" (SKOSIMP)
    (("" (INST -1 "(lambda (n:nat): p!1(nth(seq!1, n)))")
      (("" (BETA)
        (("" (ASSERT)
          (("" (SPLIT)
            (("1" (ASSERT)
              (("1" (EXPAND "every") (("1" (PROPAX) NIL)))))
             ("2" (PROPAX) NIL))))))))))))))(|function_iterate| (|iterate_TCC1| "" (TCC :DEFS !) NIL)
 (|iterate_TCC2| "" (TCC :DEFS !) NIL)
 (|iterate_add| "" (INDUCT "m")
  (("1" (SKOSIMP)
    (("1" (EXPAND "iterate" 1 1)
      (("1" (EXPAND "o") (("1" (APPLY-EXTENSIONALITY) NIL)))))))
   ("2" (SKOSIMP)
    (("2" (SKOSIMP)
      (("2" (EXPAND "iterate" 1 1)
        (("2" (EXPAND "iterate" 1 3)
          (("2" (INST -1 "f!1" "n!1")
            (("2" (EXPAND "o")
              (("2" (APPLY-EXTENSIONALITY)
                (("2" (REPLACE -1 :DIR RL)
                  (("2" (BETA)
                    (("2" (PROPAX) NIL)))))))))))))))))))))
 (|iterate_mult| "" (INDUCT "m")
  (("1" (INDUCT "n")
    (("1" (SKOSIMP) (("1" (EXPAND "iterate") (("1" (PROPAX) NIL)))))
     ("2" (SKOSIMP)
      (("2" (SKOSIMP)
        (("2" (INST?)
          (("2" (EXPAND "iterate" 1 1)
            (("2" (APPLY-EXTENSIONALITY)
              (("2" (REPLACE -1)
                (("2" (EXPAND "iterate" 1)
                  (("2" (PROPAX) NIL)))))))))))))))))
   ("2" (SKOSIMP)
    (("2" (INDUCT "n" :NAME "NAT_induction")
      (("2" (SKOSIMP)
        (("2" (SKOSIMP)
          (("2" (CASE "j!2 = 0")
            (("1" (REPLACE -1)
              (("1" (EXPAND "iterate" 1 1)
                (("1" (EXPAND "iterate" 1) (("1" (PROPAX) NIL)))))))
             ("2" (EXPAND "iterate" 2 1)
              (("2" (EXPAND "iterate" 2 4)
                (("2" (APPLY-EXTENSIONALITY 2)
                  (("2" (HIDE 3)
                    (("2" (INST-CP -1 "j!2-1")
                      (("2" (ASSERT)
                        (("2" (INST? -2)
                          (("2" (REPLACE -2)
                            (("2"
                              (LEMMA "iterate_add")
                              (("2"
                                (INST
                                 -1
                                 "f!1"
                                 "1+j!1"
                                 "-1 - j!1 + j!1 * j!2 + j!2")
                                (("1"
                                  (EXPAND "o")
                                  (("1"
                                    (CASE
                                     "iterate(f!1, 1 + j!1)(iterate(f!1, -1 - j!1 + j!1 * j!2 + j!2)(x!1)) = iterate(f!1, j!1 * j!2 + j!2)(x!1)")
                                    (("1"
                                      (HIDE -2)
                                      (("1"
                                        (REPLACE -1)
                                        (("1"
                                          (EXPAND "iterate" 1 1)
                                          (("1" (PROPAX) NIL)))))))
                                     ("2"
                                      (REPLACE -1 :DIR RL)
                                      (("2"
                                        (BETA)
                                        (("2" (PROPAX) NIL)))))
                                     ("3"
                                      (HIDE -1 -2 -3 -4 2)
                                      (("3"
                                        (CASE "j!1 * j!2 >= j!1")
                                        (("1" (ASSERT) NIL)
                                         ("2"
                                          (ASSERT)
                                          (("2"
                                            (CASE "j!1 = 0")
                                            (("1" (ASSERT) NIL)
                                             ("2"
                                              (LEMMA
                                               "div_mult_pos_ge2")
                                              (("2"
                                                (INST
                                                 -1
                                                 "j!1"
                                                 "j!2"
                                                 "j!1")
                                                (("2"
                                                  (ASSERT)
                                                  NIL)))))))))))))))))
                                 ("2"
                                  (HIDE -1 -2 -3 2)
                                  (("2"
                                    (CASE "j!1 * j!2 >= j!1")
                                    (("1" (ASSERT) NIL)
                                     ("2"
                                      (LEMMA "div_mult_pos_ge2")
                                      (("2"
                                        (INST -1 "j!1" "j!2" "j!1")
                                        (("1" (ASSERT) NIL)
                                         ("2"
                                          (ASSERT)
                                          NIL)))))))))))))))))))))))))))))))))))))))))
 (|iterate_invariant| "" (INDUCT "n")
  (("1" (SKOSIMP*) (("1" (GRIND) NIL))) ("2" (GRIND) NIL))))(|nat_types|)(|int_types|)(|subrange_type|)(|bounded_nat_inductions|
 (|upto_induction_TCC1| "" (SUBTYPE-TCC) NIL)
 (|upto_induction_TCC2| "" (SUBTYPE-TCC) NIL)
 (|upto_induction| "" (SKOSIMP*)
  (("" (LEMMA "nat_induction")
    (("" (INST -1 "lambda (n:nat): n <= m IMPLIES pt!1(n)")
      (("" (BETA)
        (("" (PROP)
          (("1" (INST -1 "jt!1") (("1" (ASSERT) NIL)))
           ("2" (SKOSIMP*)
            (("2" (INST -4 "j!1")
              (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))))))))))))))
 (|UPTO_induction| "" (SKOSIMP*)
  (("" (LEMMA "NAT_induction")
    (("" (INST -1 "lambda (n:nat): n <= m IMPLIES pt!1(n)")
      (("" (BETA)
        (("" (PROP)
          (("1" (INST -1 "jt!1") (("1" (ASSERT) NIL)))
           ("2" (SKOSIMP*)
            (("2" (INST -3 "j!1")
              (("2" (ASSERT)
                (("2" (SKOSIMP*)
                  (("2" (INST -1 "kt!1")
                    (("2" (ASSERT) NIL)))))))))))))))))))))
 (|below_induction_TCC1| "" (SUBTYPE-TCC) NIL)
 (|below_induction_TCC2| "" (SUBTYPE-TCC) NIL)
 (|below_induction| "" (SKOSIMP*)
  (("" (LEMMA "nat_induction")
    (("" (INST -1 "lambda (n:nat): n < m IMPLIES pb!1(n)")
      (("" (BETA)
        (("" (PROP)
          (("1" (INST -2 "jb!1") (("1" (ASSERT) NIL)))
           ("2" (ASSERT) NIL) ("3" (ASSERT) NIL)
           ("4" (SKOSIMP*)
            (("4" (INST -4 "j!1")
              (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))))
           ("5" (ASSERT) NIL)))))))))))
 (|BELOW_induction| "" (SKOSIMP*)
  (("" (LEMMA "NAT_induction")
    (("" (INST -1 "lambda (n:nat): n < m IMPLIES pb!1(n)")
      (("" (BETA)
        (("" (PROP)
          (("1" (INST -1 "jb!1") (("1" (ASSERT) NIL)))
           ("2" (SKOSIMP*)
            (("2" (INST -3 "j!1")
              (("2" (ASSERT)
                (("2" (SKOSIMP*)
                  (("2" (INST -1 "kb!1")
                    (("2" (ASSERT) NIL))))))))))))))))))))))(|bounded_int_inductions|
 (|upfrom_induction_TCC1| "" (SUBTYPE-TCC) NIL)
 (|upfrom_induction_TCC2| "" (SUBTYPE-TCC) NIL)
 (|upfrom_induction| "" (LEMMA "nat_induction")
  (("" (SKOSIMP*)
    ((""
      (INST -1
       "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)")
      (("" (BETA)
        (("" (PROP)
          (("1" (INST -1 "jf!1-m")
            (("1" (ASSERT)
              (("1" (INST 1 "jf!1") (("1" (ASSERT) NIL)))))))
           ("2" (HIDE -1) (("2" (ASSERT) NIL)))
           ("3" (SKOSIMP*)
            (("3" (SPLIT)
              (("1" (INST -5 "j!1+m") (("1" (ASSERT) NIL)))
               ("2" (INST 1 "j!1+m")
                (("2" (ASSERT) NIL)))))))))))))))))
 (|UPFROM_induction| "" (SKOSIMP*)
  (("" (LEMMA "NAT_induction")
    ((""
      (INST -1
       "lambda (n:nat): (exists (i:int): (m <= i and n = i - m)) IMPLIES pf!1(n+m)")
      (("" (BETA)
        (("" (PROP)
          (("1" (INST -1 "jf!1-m")
            (("1" (SPLIT)
              (("1" (ASSERT) NIL)
               ("2" (INST 1 "jf!1") (("2" (ASSERT) NIL)))))))
           ("2" (SKOSIMP*)
            (("2" (INST -4 "j!1+m")
              (("2" (ASSERT)
                (("2" (SKOSIMP*)
                  (("2" (INST -1 "kf!1-m")
                    (("2" (ASSERT)
                      (("2" (INST 1 "kf!1")
                        (("2" (ASSERT) NIL)))))))))))))))))))))))))
 (|above_induction_TCC1| "" (SUBTYPE-TCC) NIL)
 (|above_induction_TCC2| "" (SUBTYPE-TCC) NIL)
 (|above_induction| "" (SKOSIMP*)
  (("" (LEMMA "nat_induction")
    ((""
      (INST -1
       "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)")
      (("1" (BETA)
        (("1" (PROP)
          (("1" (INST -1 "ja!1-m")
            (("1" (ASSERT)
              (("1" (INST 1 "ja!1") (("1" (ASSERT) NIL)))))))
           ("2" (SKOSIMP*) (("2" (ASSERT) NIL)))
           ("3" (SKOSIMP*)
            (("3" (SPLIT)
              (("1" (INST -5 "j!1+m")
                (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))
               ("2" (INST 1 "j!1+m") (("2" (ASSERT) NIL)))))))))))
       ("2" (SKOSIMP*) (("2" (ASSERT) NIL)))))))))
 (|ABOVE_induction| "" (SKOSIMP*)
  (("" (LEMMA "NAT_induction")
    ((""
      (INST -1
       "lambda (n:nat): (exists (i:int): (m < i and n = i - m)) IMPLIES pa!1(n+m)")
      (("1" (BETA)
        (("1" (PROP)
          (("1" (INST -1 "ja!1-m")
            (("1" (SPLIT)
              (("1" (ASSERT) NIL)
               ("2" (INST 1 "ja!1") (("2" (ASSERT) NIL)))))))
           ("2" (SKOSIMP*)
            (("2" (INST -4 "j!1+m")
              (("1" (ASSERT)
                (("1" (SKOSIMP*)
                  (("1" (INST -1 "ka!1-m")
                    (("1" (ASSERT)
                      (("1" (INST 1 "ka!1")
                        (("1" (ASSERT) NIL)))))))))))
               ("2" (ASSERT) NIL)))))))))
       ("2" (SKOSIMP*) (("2" (ASSERT) NIL))))))))))(|subrange_inductions| (|subrange_induction_TCC1| "" (ASSERT) NIL)
 (|subrange_induction_TCC2| "" (TCC :DEFS !) NIL)
 (|subrange_induction| "" (LEMMA "nat_induction")
  (("" (SKOSIMP*)
    (("" (INST -1 "lambda (n:nat): n <= j - i IMPLIES p!1(n+i)")
      (("1" (BETA)
        (("1" (PROP)
          (("1" (INST -1 "k!1 - i") (("1" (ASSERT) NIL)))
           ("2" (ASSERT) NIL)
           ("3" (SKOSIMP*)
            (("3" (INST -4 "j!1 + i")
              (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))))))))
       ("2" (SKOSIMP*) (("2" (ASSERT) NIL)))))))))
 (|SUBRANGE_induction| "" (SKOSIMP)
  (("" (SKOSIMP)
    (("" (LEMMA "NAT_induction")
      (("" (INST -1 "lambda (n:nat): n <= j - i IMPLIES p!1(n+i)")
        (("1" (SPLIT)
          (("1" (BETA)
            (("1" (INST -2 "k!1")
              (("1" (ASSERT)
                (("1" (SKOSIMP)
                  (("1" (INST -1 "m!1-i")
                    (("1" (ASSERT) NIL)))))))))))
           ("2" (SKOSIMP)
            (("2" (BETA)
              (("2" (FLATTEN)
                (("2" (INST -3 "j!1+i")
                  (("1" (ASSERT)
                    (("1" (SKOSIMP)
                      (("1" (INST -1 "m!1-i")
                        (("1" (ASSERT) NIL)))))))
                   ("2" (ASSERT) NIL)))))))))))
         ("2" (SKOSIMP) (("2" (ASSERT) NIL))))))))))))(|exponentiation| (|expt_TCC1| "" (GRIND) NIL)
 (|expt_TCC2| "" (GRIND) NIL)
 (|expt_pos_aux| "" (INDUCT "n")
  (("1" (GRIND) NIL)
   ("2" (SKOSIMP*)
    (("2" (EXPAND "expt" +)
      (("2" (INST?) (("2" (REWRITE "pos_times_gt") NIL)))))))))
 (|expt_nonzero_aux| "" (INDUCT "n")
  (("1" (GRIND) NIL)
   ("2" (SKOSIMP*)
    (("2" (EXPAND "expt" -2)
      (("2" (INST?)
        (("2" (REWRITE "zero_times3") (("2" (ASSERT) NIL)))))))))))
 (|expt_TCC3| "" (INDUCT "x2")
  (("1" (GRIND) NIL)
   ("2" (SKOSIMP*)
    (("2" (EXPAND "expt" +)
      (("2" (INST?)
        (("2" (REWRITE "pos_times_ge") (("2" (ASSERT) NIL)))))))))))
 (|expt_TCC4| "" (INDUCT "x2")
  (("1" (GRIND) NIL)
   ("2" (SKOSIMP*)
    (("2" (EXPAND "expt" +)
      (("2" (INST?) (("2" (REWRITE "pos_times_gt") NIL)))))))))
 (|expt_TCC5| "" (INDUCT "x2")
  (("1" (SKOSIMP*)
    (("1" (EXPAND "expt")
      (("1" (TYPEPRED "1:rat") (("1" (PROPAX) NIL)))))))
   ("2" (SKOSIMP*)
    (("2" (EXPAND "expt" +)
      (("2" (REWRITE "rationals.closed_times")
        (("2" (INST?) NIL)))))))))
 (|expt_TCC6| "" (SKOSIMP*) (("" (REWRITE "expt_TCC3") NIL)))
 (|expt_TCC7| "" (SKOSIMP*) (("" (REWRITE "expt_TCC4") NIL)))
 (|expt_TCC8| "" (INDUCT "x2")
  (("1" (SKOSIMP*)
    (("1" (EXPAND "expt")
      (("1" (TYPEPRED "1:int") (("1" (PROPAX) NIL)))))))
   ("2" (SKOSIMP*)
    (("2" (EXPAND "expt" +)
      (("2" (REWRITE "integers.closed_times")
        (("2" (INST?) NIL)))))))))
 (|expt_TCC9| "" (SKOSIMP*) (("" (REWRITE "expt_TCC3") NIL)))
 (|expt_TCC10| "" (SKOSIMP*) (("" (REWRITE "expt_TCC4") NIL)))
 (|caret_TCC1| "" (GRIND) NIL)
 (|caret_TCC2| "" (SKOLEM!)
  (("" (TYPEPRED "i!1")
    (("" (REWRITE "expt_nonzero_aux")
      (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))))))
 (|expt_pos_TCC1| "" (TCC :DEFS !) NIL)
 (|expt_pos| "" (SKOSIMP*)
  (("" (EXPAND "^")
    (("" (LIFT-IF)
      (("" (PROP)
        (("1" (REWRITE "expt_pos_aux") NIL)
         ("2" (REWRITE "quotient_pos_gt")
          (("2" (REWRITE "expt_pos_aux") NIL)))))))))))
 (|expt_nonzero_TCC1| "" (GRIND) NIL)
 (|expt_nonzero| "" (SKOSIMP*)
  (("" (EXPAND "^")
    (("" (LIFT-IF)
      (("" (PROP)
        (("1" (LEMMA "expt_nonzero_aux")
          (("1" (INST?) (("1" (ASSERT) NIL)))))
         ("2" (LEMMA "inv_ne_0")
          (("2" (INST?)
            (("1" (ASSERT) NIL)
             ("2" (REWRITE "expt_nonzero_aux") NIL)
             ("3" (ASSERT) NIL)))))))))))))
 (|caret_TCC3| "" (SKOSIMP*)
  (("" (EXPAND "^")
    (("" (LIFT-IF)
      (("" (PROP)
        (("1" (REWRITE "expt_TCC3") NIL)
         ("2" (REWRITE "quotient_pos_ge")
          (("1" (REWRITE "expt_TCC3") NIL)
           ("2" (TYPEPRED "x2!1")
            (("2" (ASSERT)
              (("2" (REWRITE "expt_nonzero_aux") NIL)))))))))))))))
 (|caret_TCC4| "" (SKOSIMP)
  (("" (EXPAND "^")
    (("" (LIFT-IF)
      (("" (PROP)
        (("1" (REWRITE "expt_TCC4") NIL)
         ("2" (REWRITE "quotient_pos_gt")
          (("2" (ASSERT) NIL)))))))))))
 (|caret_TCC5| "" (SKOSIMP)
  (("" (EXPAND "^")
    (("" (PROP)
      (("1" (REWRITE "expt_TCC5") NIL)
       ("2" (REWRITE "rationals.closed_divides")
        (("2" (TYPEPRED "x2!1")
          (("2" (ASSERT)
            (("2" (REWRITE "expt_nonzero_aux") NIL)))))))))))))
 (|caret_TCC6| "" (SKOSIMP) (("" (REWRITE "caret_TCC3") NIL)))
 (|caret_TCC7| "" (SKOSIMP) (("" (REWRITE "caret_TCC4") NIL)))
 (|caret_TCC8| "" (SKOSIMP*) (("" (ASSERT) NIL)))
 (|caret_TCC9| "" (SKOSIMP*)
  (("" (EXPAND "^") (("" (REWRITE "expt_TCC8") NIL)))))
 (|caret_TCC10| "" (GRIND) NIL)
 (|caret_TCC11| "" (SKOSIMP*) (("" (REWRITE "caret_TCC6") NIL)))
 (|caret_TCC12| "" (TCC :DEFS !) NIL)
 (|caret_TCC13| "" (SKOSIMP*) (("" (REWRITE "caret_TCC7") NIL)))
 (|expt_x0_aux| "" (TCC :DEFS !) NIL)
 (|expt_x1_aux| "" (TCC :DEFS !) NIL)
 (|expt_1n_aux| "" (INDUCT "n")
  (("1" (GRIND) NIL)
   ("2" (SKOSIMP*) (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL)))))))
 (|increasing_expt_aux| "" (INDUCT "m")
  (("1" (SKOSIMP*)
    (("1" (EXPAND "expt")
      (("1" (EXPAND "expt")
        (("1" (EXPAND "expt")
          (("1" (LEMMA "both_sides_times_pos_gt1")
            (("1" (INST -1 "gt1x!1" "gt1x!1" "1")
              (("1" (PROP)
                (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))))))))))))))
   ("2" (SKOSIMP*)
    (("2" (INST?)
      (("2" (EXPAND "expt" 1)
        (("2" (LEMMA "div_mult_pos_gt1")
          (("2" (INST -1 "gt1x!1" "expt(gt1x!1, j!1 + 2)" "gt1x!1")
            (("2" (PROP)
              (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))))))))))))))
 (|decreasing_expt_aux| "" (INDUCT "m")
  (("1" (SKOSIMP)
    (("1" (EXPAND "expt")
      (("1" (EXPAND "expt")
        (("1" (EXPAND "expt")
          (("1" (LEMMA "div_mult_pos_lt2")
            (("1" (INST -1 "lt1x!1" "lt1x!1" "lt1x!1")
              (("1" (PROP) (("1" (ASSERT) NIL)))))))))))))))
   ("2" (SKOSIMP*)
    (("2" (INST?)
      (("2" (EXPAND "expt" +)
        (("2" (LEMMA "div_mult_pos_gt2")
          (("2" (INST -1 "lt1x!1" "expt(lt1x!1, 2 + j!1)" "lt1x!1")
            (("2" (PROP)
              (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))))))))))))))
 (|expt_1_aux| "" (INDUCT "n")
  (("1" (SKOSIMP*)
    (("1" (PROP)
      (("1" (EXPAND "expt")
        (("1" (EXPAND "expt") (("1" (PROPAX) NIL)))))
       ("2" (EXPAND "expt")
        (("2" (EXPAND "expt") (("2" (PROPAX) NIL)))))))))
   ("2" (SKOSIMP)
    (("2" (SKOSIMP)
      (("2" (INST -1 "px!1")
        (("2" (EXPAND "expt" +)
          (("2" (GROUND)
            (("2" (CASE "j!1 = 0")
              (("1" (REPLACE -1)
                (("1" (EXPAND "expt")
                  (("1" (EXPAND "expt")
                    (("1" (ASSERT)
                      (("1" (REWRITE "sqrt_1") NIL)))))))))
               ("2" (CASE "px!1 > 1")
                (("1" (LEMMA "increasing_expt_aux")
                  (("1" (INST -1 "px!1" "j!1-1")
                    (("1" (ASSERT)
                      (("1" (LEMMA "eq1_gt")
                        (("1" (INST -1 "px!1" "expt(px!1, 1 + j!1)")
                          (("1" (ASSERT) NIL)))))))
                     ("2" (ASSERT) NIL)))))
                 ("2" (LEMMA "decreasing_expt_aux")
                  (("2" (INST -1 "px!1" "j!1-1")
                    (("1" (LEMMA "eq1_gt")
                      (("1"
                        (INST -1 "1/px!1" "1/expt(px!1, 1 + j!1)")
                        (("1" (ASSERT)
                          (("1" (SPLIT)
                            (("1" (REWRITE "div_mult_pos_lt1") NIL)
                             ("2"
                              (ASSERT)
                              (("2"
                                (REWRITE "div_mult_pos_gt2")
                                NIL)))
                             ("3"
                              (ASSERT)
                              (("3"
                                (REWRITE "div_times")
                                (("3" (ASSERT) NIL)))))))))))))
                     ("2" (ASSERT) NIL)
                     ("3" (ASSERT) NIL)))))))))))))))))))))
 (|expt_plus_aux| "" (INDUCT "n")
  (("1" (SKOSIMP*) (("1" (EXPAND "expt" 1 3) (("1" (PROPAX) NIL)))))
   ("2" (SKOSIMP*)
    (("2" (EXPAND "expt" 1 3)
      (("2" (EXPAND "expt" 1 1)
        (("2" (INST -1 "m!1" "n0x!1") (("2" (ASSERT) NIL)))))))))))
 (|expt_minus_aux_TCC1| "" (TCC :DEFS !) NIL)
 (|expt_minus_aux_TCC2| "" (SKOSIMP*)
  (("" (LEMMA "expt_nonzero_aux")
    (("" (INST?) (("" (ASSERT) NIL)))))))
 (|expt_minus_aux| "" (INDUCT "m")
  (("1" (GRIND) NIL)
   ("2" (SKOSIMP*)
    (("2" (CASE "j!1 + 1 = n!1")
      (("1" (HIDE -2) (("1" (GRIND) NIL)))
       ("2" (EXPAND "expt" 2 1)
        (("2" (EXPAND "expt" 2 2)
          (("2" (ASSERT)
            (("2" (INST?) (("2" (ASSERT) NIL)))))))))))))
   ("3" (HIDE 2)
    (("3" (SKOSIMP*)
      (("3" (LEMMA "expt_nonzero_aux")
        (("3" (INST?) (("3" (ASSERT) NIL)))))))))
   ("4" (HIDE 2) (("4" (GRIND) NIL)))))
 (|expt_times_aux| "" (INDUCT "n")
  (("1" (GRIND) NIL)
   ("2" (SKOSIMP*)
    (("2" (EXPAND "expt" 1 2)
      (("2" (EXPAND "expt" 1 1)
        (("2" (LIFT-IF)
          (("2" (INST -1 "m!1" "n0x!1")
            (("2" (REPLACE -1 :DIR RL)
              (("2" (PROP)
                (("1" (ASSERT)
                  (("1" (CASE "m!1 = 0")
                    (("1" (REPLACE -1) (("1" (GRIND) NIL)))
                     ("2" (CASE "j!1 = 0")
                      (("1" (ASSERT) NIL)
                       ("2" (LEMMA "posreal_mult_closed")
                        (("2" (INST?) (("2" (ASSERT) NIL)))))))))))
                 ("2" (HIDE -1)
                  (("2" (CASE "m!1 = 0")
                    (("1" (GRIND) NIL)
                     ("2" (CASE "j!1 = 0")
                      (("1" (REPLACE -1)
                        (("1" (EXPAND "expt" 3 3)
                          (("1" (EXPAND "expt" 3 2)
                            (("1" (ASSERT) NIL)))))))
                       ("2" (HIDE 3)
                        (("2" (LEMMA "expt_plus_aux")
                          (("2" (INST -1 "m!1" "m!1 * j!1" "n0x!1")
                            (("2"
                              (REPLACE -1 :DIR RL)
                              (("2"
                                (EXPAND "expt" 3 2)
                                (("2"
                                  (LIFT-IF)
                                  (("2"
                                    (ASSERT)
                                    NIL)))))))))))))))))))))))))))))))))))
 (|expt_divide_aux_TCC1| "" (SKOSIMP*)
  (("" (LEMMA "expt_nonzero_aux")
    (("" (INST?) (("" (ASSERT) NIL)))))))
 (|expt_divide_aux_TCC2| "" (SKOSIMP*)
  (("" (LEMMA "expt_nonzero_aux")
    (("" (INST?) (("" (ASSERT) NIL)))))))
 (|expt_divide_aux| "" (INDUCT "n")
  (("1" (GRIND) NIL)
   ("2" (SKOSIMP*)
    (("2" (EXPAND "expt" 1 2)
      (("2" (INST?)
        (("2" (REPLACE -1 :DIR RL)
          (("2"
            (CASE "expt(n0x!1, j!1 * m!1 + m!1) = expt(n0x!1, m!1) * expt(n0x!1, m!1 * j!1)")
            (("1" (ASSERT) NIL)
             ("2" (HIDE 2)
              (("2" (REWRITE "expt_plus_aux")
                (("2" (ASSERT) NIL)))))))))))))))
   ("3" (HIDE 2)
    (("3" (SKOSIMP*)
      (("3" (LEMMA "expt_nonzero_aux")
        (("3" (INST?) (("3" (ASSERT) NIL)))))))))
   ("4" (HIDE 2)
    (("4" (SKOSIMP*)
      (("4" (LEMMA "expt_nonzero_aux")
        (("4" (INST?) (("4" (ASSERT) NIL)))))))))))
 (|both_sides_expt1_aux| "" (INDUCT "m")
  (("1" (SKOSIMP)
    (("1" (EXPAND "expt")
      (("1" (EXPAND "expt" 1 1)
        (("1" (GROUND)
          (("1" (CASE "px!1 > 1")
            (("1" (LEMMA "increasing_expt_aux")
              (("1" (INST -1 "px!1" "n!1-1")
                (("1" (EXPAND "expt" -1) (("1" (ASSERT) NIL)))))))
             ("2" (LEMMA "decreasing_expt_aux")
              (("2" (INST -1 "px!1" "n!1-1")
                (("1" (EXPAND "expt" -1) (("1" (ASSERT) NIL)))
                 ("2" (ASSERT) NIL)))))))
           ("2" (EXPAND "expt") (("2" (PROPAX) NIL)))
           ("3" (REPLACE -1)
            (("3" (REWRITE "expt_1n_aux") NIL)))))))))))
   ("2" (SKOSIMP)
    (("2" (SKOSIMP)
      (("2" (EXPAND "expt" 1 1)
        (("2" (EXPAND "expt" 1 2)
          (("2" (CASE "n!1 = 0")
            (("1" (REPLACE -1)
              (("1" (GROUND)
                (("1" (EXPAND "expt" -1 2)
                  (("1" (CASE "px!1 >1")
                    (("1" (LEMMA "increasing_expt_aux")
                      (("1" (INST -1 "px!1" "j!1")
                        (("1" (EXPAND "expt" -1)
                          (("1" (ASSERT) NIL)))))))
                     ("2" (LEMMA "decreasing_expt_aux")
                      (("2" (INST -1 "px!1" "j!1")
                        (("1" (EXPAND "expt" -1)
                          (("1" (ASSERT) NIL)))
                         ("2" (ASSERT) NIL)))))))))
                 ("2" (REPLACE -1)
                  (("2" (REWRITE "expt_1n_aux")
                    (("2" (REWRITE "expt_1n_aux") NIL)))))))))
             ("2" (GROUND)
              (("1" (INST -2 "n!1-1" "px!1")
                (("1" (ASSERT)
                  (("1" (GROUND)
                    (("1" (REWRITE "both_sides_times2") NIL)))))))
               ("2" (REPLACE -1)
                (("2" (REWRITE "expt_1n_aux")
                  (("2" (REWRITE "expt_1n_aux")
                    NIL)))))))))))))))))))
 (|both_sides_expt2_aux| "" (INDUCT "pm")
  (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)
   ("3" (SKOSIMP)
    (("3" (SKOSIMP)
      (("3" (SPLIT)
        (("1" (EXPAND "expt" +)
          (("1" (INST -1 "px!1" "py!1")
            (("1" (GROUND)
              (("1" (HIDE 1)
                (("1" (HIDE -2)
                  (("1"
                    (CASE "FORALL (m:nat), (px, py: posreal): px > py IMPLIES expt(px,m+1) > expt(py, m+1)")
                    (("1" (CASE "px!1>py!1")
                      (("1" (INST -2 "j!1-1" "px!1" "py!1")
                        (("1" (ASSERT)
                          (("1" (LEMMA "gt_times_gt_pos1")
                            (("1"
                              (INST
                               -1
                               "expt(py!1, j!1)"
                               "py!1"
                               "px!1"
                               "expt(px!1, j!1)")
                              (("1" (ASSERT) NIL)))))))
                         ("2" (ASSERT)
                          (("2" (EXPAND "expt" +)
                            (("2" (PROPAX) NIL)))))))
                       ("2" (INST -1 "j!1-1" "py!1" "px!1")
                        (("1" (ASSERT)
                          (("1" (LEMMA "gt_times_gt_pos1")
                            (("1"
                              (INST
                               -1
                               "expt(px!1, j!1)"
                               "px!1"
                               "py!1"
                               "expt(py!1, j!1)")
                              (("1" (ASSERT) NIL)))))))
                         ("2" (EXPAND "expt" +)
                          (("2" (ASSERT) NIL)))))))
                     ("2" (HIDE -1 2 3)
                      (("2" (INDUCT "m")
                        (("1" (SKOSIMP*)
                          (("1" (EXPAND "expt")
                            (("1"
                              (EXPAND "expt")
                              (("1" (PROPAX) NIL)))))))
                         ("2" (SKOSIMP*)
                          (("2" (INST?)
                            (("2"
                              (ASSERT)
                              (("2"
                                (EXPAND "expt" +)
                                (("2"
                                  (REWRITE "gt_times_gt_pos1")
                                  NIL)))))))))))))))))))))))))
         ("2" (EXPAND "expt")
          (("2" (EXPAND "expt") (("2" (ASSERT) NIL)))))))))))))
 (|both_sides_expt_pos_lt_aux| "" (INDUCT "m")
  (("1" (SKOSIMP)
    (("1" (EXPAND "expt")
      (("1" (EXPAND "expt") (("1" (PROPAX) NIL)))))))
   ("2" (SKOSIMP*)
    (("2" (INST -1 "px!1" "py!1")
      (("2" (EXPAND "expt" 1)
        (("2" (GROUND)
          (("1" (REWRITE "lt_times_lt_pos1") NIL)
           ("2" (LEMMA "ge_times_ge_pos")
            (("2"
              (INST -1 "expt(py!1, 1 + j!1)" "py!1" "px!1"
               "expt(px!1, 1 + j!1)")
              (("2" (ASSERT) NIL)))))))))))))))
 (|both_sides_expt_gt1_lt_aux| "" (INDUCT "m")
  (("1" (SKOSIMP*)
    (("1" (EXPAND "expt")
      (("1" (EXPAND "expt" 1 1)
        (("1" (GROUND)
          (("1" (EXPAND "expt") (("1" (ASSERT) NIL)))
           ("2" (LEMMA "increasing_expt_aux")
            (("2" (INST -1 "gt1x!1" "n!1 - 1")
              (("2" (EXPAND "expt" -1)
                (("2" (ASSERT) NIL)))))))))))))))
   ("2" (SKOSIMP*)
    (("2" (EXPAND "expt" +)
      (("2" (GROUND)
        (("1" (CASE "n!1 = 0")
          (("1" (REPLACE -1)
            (("1" (EXPAND "expt" -2 2)
              (("1" (LEMMA "increasing_expt_aux")
                (("1" (INST -1 "gt1x!1" "j!1")
                  (("1" (EXPAND "expt" -1)
                    (("1" (ASSERT) NIL)))))))))))
           ("2" (INST -2 "gt1x!1" "n!1-1")
            (("1" (GROUND)
              (("1" (REWRITE "both_sides_times_pos_lt2") NIL)))
             ("2" (ASSERT) NIL)))))
         ("2" (INST -2 "gt1x!1" "n!1-1")
          (("2" (ASSERT)
            (("2" (REWRITE "both_sides_times_pos_lt2")
              NIL)))))))))))))
 (|both_sides_expt_lt1_lt_aux| "" (INDUCT "m")
  (("1" (SKOSIMP*)
    (("1" (EXPAND "expt" 1 1)
      (("1" (EXPAND "expt" 1 1)
        (("1" (GROUND)
          (("1" (LEMMA "decreasing_expt_aux")
            (("1" (INST -1 "lt1x!1" "n!1-1")
              (("1" (ASSERT) NIL)
               ("2" (EXPAND "expt")
                (("2" (EXPAND "expt")
                  (("2" (LIFT-IF)
                    (("2" (ASSERT) NIL)))))))))))))))))))
   ("2" (SKOSIMP*)
    (("2" (EXPAND "expt" +)
      (("2" (INST -1 "lt1x!1" "n!1 - 1")
        (("1" (GROUND)
          (("1" (REWRITE "both_sides_times_pos_lt2") NIL)
           ("2" (REWRITE "both_sides_times_pos_lt2") NIL)))
         ("2" (GROUND)
          (("2" (EXPAND "expt" 1 2)
            (("2" (LEMMA "decreasing_expt_aux")
              (("2" (INST -1 "lt1x!1" "j!1")
                (("2" (EXPAND "expt" -1)
                  (("2" (PROPAX) NIL)))))))))))))))))))
 (|both_sides_expt_pos_le_aux| "" (SKOSIMP)
  (("" (GROUND)
    (("1" (LEMMA "both_sides_expt_pos_lt_aux")
      (("1" (INST -1 "m!1" "py!1" "px!1") (("1" (ASSERT) NIL)))))
     ("2" (LEMMA "both_sides_expt_pos_lt_aux")
      (("2" (INST -1 "m!1" "py!1" "px!1") (("2" (ASSERT) NIL)))))))))
 (|both_sides_expt_gt1_le_aux| "" (SKOSIMP)
  (("" (LEMMA "both_sides_expt_gt1_lt_aux")
    (("" (INST -1 "gt1x!1" "n!1" "m!1")
      (("" (ASSERT) (("" (GROUND) NIL)))))))))
 (|both_sides_expt_lt1_le_aux| ""
  (LEMMA "both_sides_expt_lt1_lt_aux")
  (("" (SKOSIMP)
    (("" (INST -1 "lt1x!1" "n!1" "m!1") (("" (GROUND) NIL)))))))
 (|both_sides_expt_pos_gt_aux| ""
  (LEMMA "both_sides_expt_pos_lt_aux")
  (("" (SKOSIMP)
    (("" (INST -1 "m!1" "py!1" "px!1")
      (("" (ASSERT) (("" (GROUND) NIL)))))))))
 (|both_sides_expt_gt1_gt_aux| ""
  (LEMMA "both_sides_expt_gt1_lt_aux")
  (("" (SKOSIMP)
    (("" (INST -1 "gt1x!1" "n!1" "m!1") (("" (GROUND) NIL)))))))
 (|both_sides_expt_lt1_gt_aux| ""
  (LEMMA "both_sides_expt_lt1_lt_aux")
  (("" (SKOSIMP)
    (("" (INST -1 "lt1x!1" "n!1" "m!1") (("" (GROUND) NIL)))))))
 (|both_sides_expt_pos_ge_aux| ""
  (LEMMA "both_sides_expt_pos_le_aux")
  (("" (SKOSIMP)
    (("" (INST -1 "m!1" "py!1" "px!1")
      (("" (ASSERT) (("" (GROUND) NIL)))))))))
 (|both_sides_expt_gt1_ge_aux| ""
  (LEMMA "both_sides_expt_gt1_le_aux")
  (("" (SKOSIMP)
    (("" (INST -1 "gt1x!1" "n!1" "m!1") (("" (GROUND) NIL)))))))
 (|both_sides_expt_lt1_ge_aux| ""
  (LEMMA "both_sides_expt_lt1_le_aux")
  (("" (SKOSIMP)
    (("" (INST -1 "lt1x!1" "n!1" "m!1") (("" (GROUND) NIL)))))))
 (|expt_x0_TCC1| "" (GRIND) NIL) (|expt_x0| "" (GRIND) NIL)
 (|expt_x1_TCC1| "" (TCC :DEFS !) NIL) (|expt_x1| "" (GRIND) NIL)
 (|expt_1i| "" (SKOSIMP*)
  (("" (EXPAND "^")
    (("" (LIFT-IF)
      (("" (PROP)
        (("1" (REWRITE "expt_1n_aux") NIL)
         ("2" (REWRITE "expt_1n_aux") (("2" (ASSERT) NIL)))))))))))
 (|expt_plus_TCC1| "" (TCC :DEFS !) NIL)
 (|expt_plus| "" (SKOSIMP*)
  (("" (EXPAND "^")
    (("" (LIFT-IF)
      (("" (LIFT-IF)
        (("" (LIFT-IF)
          (("" (PROP)
            (("1" (REWRITE "expt_plus_aux") NIL) ("2" (ASSERT) NIL)
             ("3" (LEMMA "expt_minus_aux")
              (("3" (INST -1 "j!1" "-i!1" "n0x!1")
                (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))))
             ("4" (LEMMA "cross_mult")
              (("4"
                (INST -1 "expt(n0x!1, -(i!1 + j!1))"
                 "expt(n0x!1, -i!1)" "1" "expt(n0x!1, j!1)")
                (("1" (FLATTEN)
                  (("1" (HIDE -1)
                    (("1" (REPLACE 2)
                      (("1" (SPLIT)
                        (("1" (PROPAX) NIL)
                         ("2" (HIDE 3)
                          (("2" (ASSERT)
                            (("2"
                              (LEMMA "expt_plus_aux")
                              (("2"
                                (INST
                                 -1
                                 "j!1"
                                 "-(i!1 + j!1)"
                                 "n0x!1")
                                (("2" (ASSERT) NIL)))))))))))))))))
                 ("2" (LEMMA "expt_nonzero_aux")
                  (("2" (INST?) (("2" (ASSERT) NIL)))))
                 ("3" (ASSERT) NIL)
                 ("4" (ASSERT)
                  (("4" (REWRITE "expt_nonzero_aux") NIL)))
                 ("5" (ASSERT) NIL)))))
             ("5" (LEMMA "expt_minus_aux")
              (("5" (INST -1 "i!1" "-j!1" "n0x!1")
                (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))))
             ("6" (ASSERT)
              (("6" (LEMMA "cross_mult")
                (("6"
                  (INST -1 "expt(n0x!1, -(i!1 + j!1))"
                   "expt(n0x!1, -j!1)" "1" "expt(n0x!1, i!1)")
                  (("1" (FLATTEN)
                    (("1" (HIDE -1)
                      (("1" (SPLIT)
                        (("1" (ASSERT) NIL)
                         ("2" (HIDE 3)
                          (("2" (LEMMA "expt_plus_aux")
                            (("2"
                              (INST -1 "i!1" "-(i!1 + j!1)" "n0x!1")
                              (("2" (ASSERT) NIL)))))))))))))
                   ("2" (REWRITE "expt_nonzero_aux") NIL)
                   ("3" (REWRITE "expt_nonzero_aux") NIL)))))))
             ("7" (ASSERT) NIL)
             ("8"
              (CASE "expt(n0x!1, -(i!1 + j!1)) = expt(n0x!1, -i!1) * expt(n0x!1, -j!1)")
              (("1" (ASSERT) NIL)
               ("2" (HIDE 3)
                (("2" (LEMMA "expt_plus_aux")
                  (("2" (INST -1 "-i!1" "-j!1" "n0x!1")
                    (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)
                     ("3" (ASSERT) NIL)))))))
               ("3" (ASSERT) NIL) ("4" (ASSERT) NIL)
               ("5" (ASSERT) NIL)))))))))))))))
 (|expt_times_TCC1| "" (TCC :DEFS !) NIL)
 (|expt_times_TCC2| "" (SKOSIMP)
  (("" (LEMMA "expt_nonzero") (("" (INST?) (("" (ASSERT) NIL)))))))
 (|expt_times| "" (SKOSIMP*)
  (("" (EXPAND "^")
    (("" (LIFT-IF)
      (("" (LIFT-IF)
        (("" (PROP)
          (("1" (REWRITE "expt_times_aux") NIL)
           ("2" (ASSERT) (("2" (REWRITE "pos_times_ge") NIL)))
           ("3" (REWRITE "pos_times_ge")
            (("3" (ASSERT) (("3" (GRIND) NIL)))))
           ("4" (LEMMA "expt_divide_aux")
            (("4" (INST -1 "-i!1" "j!1" "n0x!1")
              (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))))
           ("5" (LEMMA "pos_times_ge")
            (("5" (INST?)
              (("5" (ASSERT)
                (("5" (GRIND)
                  (("5" (REWRITE "expt_1n_aux")
                    (("5" (ASSERT) NIL)))))))))))
           ("6"
            (CASE "expt(n0x!1, -(i!1 * j!1)) = expt(expt(n0x!1, i!1), -j!1)")
            (("1" (ASSERT) NIL)
             ("2" (HIDE 3)
              (("2" (LEMMA "expt_times_aux")
                (("2" (INST -1 "i!1" "-j!1" "n0x!1")
                  (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))))))
             ("3" (ASSERT) NIL) ("4" (PROPAX) NIL)
             ("5" (ASSERT) NIL)))
           ("7" (LEMMA "expt_divide_aux")
            (("7" (INST -1 "-i!1" "-j!1" "n0x!1")
              (("1" (REPLACE -1 :DIR RL) (("1" (ASSERT) NIL)))
               ("2" (ASSERT) NIL) ("3" (ASSERT) NIL)))))
           ("8" (LEMMA "pos_times_ge")
            (("8" (INST?) (("8" (ASSERT) NIL)))))))))))))))
 (|expt_inverse_TCC1| "" (GRIND) NIL)
 (|expt_inverse_TCC2| "" (SKOSIMP)
  (("" (LEMMA "expt_nonzero") (("" (INST?) (("" (ASSERT) NIL)))))))
 (|expt_inverse| "" (SKOSIMP*)
  (("" (EXPAND "^")
    (("" (LIFT-IF)
      (("" (LIFT-IF)
        (("" (PROP)
          (("1" (GRIND) NIL) ("2" (ASSERT) NIL) ("3" (ASSERT) NIL)
           ("4" (ASSERT) NIL)))))))))))
 (|expt_div_TCC1| "" (SUBTYPE-TCC) NIL)
 (|expt_div| "" (SKOSIMP)
  (("" (LEMMA "expt_inverse")
    (("" (INST -1 "j!1" "n0x!1")
      (("" (LEMMA "expt_plus")
        (("" (INST -1 "i!1" "-j!1" "n0x!1")
          (("" (ASSERT) NIL)))))))))))
 (|both_sides_expt1_TCC1| "" (TCC :DEFS EXPLICIT) NIL)
 (|both_sides_expt1| "" (LEMMA "both_sides_expt1_aux")
  (("" (SKOSIMP)
    (("" (EXPAND "^")
      (("" (LIFT-IF)
        (("" (SPLIT)
          (("1" (FLATTEN)
            (("1" (LIFT-IF)
              (("1" (SPLIT)
                (("1" (FLATTEN)
                  (("1" (INST -3 "n0i!1 - 1" "n0j!1 - 1" "px!1")
                    (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)
                     ("3" (ASSERT) NIL)))))
                 ("2" (FLATTEN)
                  (("2" (GROUND)
                    (("1" (LEMMA "div_cancel3")
                      (("1"
                        (INST -1 "expt(px!1, -n0j!1)" "1"
                         "expt(px!1, n0i!1)")
                        (("1" (PROP)
                          (("1" (HIDE -1 -3)
                            (("1"
                              (REWRITE "expt_plus_aux" :DIR RL)
                              (("1"
                                (LEMMA "expt_1_aux")
                                (("1"
                                  (INST
                                   -1
                                   "-n0j!1 + n0i!1 - 1"
                                   "px!1")
                                  (("1" (ASSERT) NIL)))))))))
                           ("2" (ASSERT) NIL)))))))
                     ("2" (REPLACE -1)
                      (("2" (REWRITE "expt_1n_aux")
                        (("2" (REWRITE "expt_1n_aux")
                          (("2" (ASSERT) NIL)))))))))))))))))
           ("2" (FLATTEN)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (LEMMA "div_cancel3")
                  (("1"
                    (INST -1 "expt(px!1, -n0i!1)" "1"
                     "expt(px!1, n0j!1)")
                    (("1" (PROP)
                      (("1" (HIDE -1 -3)
                        (("1" (REWRITE "expt_plus_aux" :DIR RL)
                          (("1" (LEMMA "expt_1_aux")
                            (("1"
                              (INST -1 "n0j!1 - n0i!1 - 1" "px!1")
                              (("1" (ASSERT) NIL)
                               ("2" (ASSERT) NIL)))))))))))
                     ("2" (ASSERT) NIL)))))
                 ("2" (EXPAND "expt" 1) (("2" (ASSERT) NIL)))
                 ("3" (REPLACE -1)
                  (("3" (REWRITE "expt_1n_aux")
                    (("3" (REWRITE "expt_1n_aux")
                      (("3" (ASSERT) NIL)))))))
                 ("4" (REWRITE "cross_mult")
                  (("4" (INST -2 "-n0j!1-1" "-n0i!1-1" "px!1")
                    (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)
                     ("3" (ASSERT) NIL)))))
                 ("5" (REPLACE -1) (("5" (PROPAX) NIL)))
                 ("6" (REPLACE -1)
                  (("6" (REWRITE "expt_1n_aux")
                    (("6" (REWRITE "expt_1n_aux")
                      NIL)))))))))))))))))))))
 (|both_sides_expt2| "" (SKOSIMP)
  (("" (EXPAND "^")
    (("" (LEMMA "both_sides_expt2_aux")
      (("" (LIFT-IF)
        (("" (PROP)
          (("1" (INST?) (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))
           ("2" (INST?) (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))
           ("3" (INST -2 "-n0i!1" "px!1" "py!1")
            (("1" (ASSERT)
              (("1" (PROP)
                (("1" (ASSERT)
                  (("1" (REWRITE "cross_mult") NIL)))))))
             ("2" (ASSERT) NIL)))
           ("4" (INST -2 "-n0i!1" "px!1" "py!1")
            (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))))))))))))
 (|pos_expt_gt| "" (INDUCT "n")
  (("1" (SKOSIMP) (("1" (REWRITE "expt_x0") (("1" (ASSERT) NIL)))))
   ("2" (SKOSIMP*)
    (("2" (REWRITE "expt_plus")
      (("2" (REWRITE "expt_x1")
        (("2" (INST?)
          (("2"
            (CASE "FORALL (a, b, c, d: nat): a < c & b < d => a + b < c * d")
            (("1" (INST?)
              (("1" (ASSERT) NIL)
               ("2" (ASSERT)
                (("2" (ASSERT)
                  (("2" (TYPEPRED "b!1^j!1")
                    (("2" (PROPAX) NIL)))))))))
             ("2" (HIDE -1 2)
              (("2" (INDUCT "c")
                (("1" (ASSERT) NIL)
                 ("2" (SKOSIMP*)
                  (("2" (ASSERT)
                    (("2" (CASE "a!1 = 0")
                      (("1" (ASSERT) NIL)
                       ("2" (INST -1 "a!1-1" "b!2" "d!1")
                        (("1" (ASSERT) NIL)
                         ("2" (ASSERT) NIL)))))))))))))))))))))))))
 (|expt_ge1| ""
  (INDUCT-AND-REWRITE "n" 1 "expt_plus" "expt_x0" "expt_x1")
  (("" (LEMMA "ge_times_ge_pos")
    (("" (INST?) (("" (INST - "1" "1") (("" (ASSERT) NIL)))))))))
 (|both_sides_expt_pos_lt_TCC1| "" (TCC :DEFS EXPLICIT) NIL)
 (|both_sides_expt_pos_lt| "" (SKOSIMP)
  (("" (EXPAND "^")
    (("" (LEMMA "both_sides_expt_pos_lt_aux")
      (("" (INST?) (("" (ASSERT) NIL)))))))))
 (|both_sides_expt_gt1_lt_TCC1| "" (TCC :DEFS EXPLICIT) NIL)
 (|both_sides_expt_gt1_lt| "" (SKOSIMP*)
  (("" (GROUND)
    (("1" (CASE "j!1<=i!1")
      (("1" (CASE "gt1x!1 ^ j!1 <= gt1x!1 ^ i!1")
        (("1" (ASSERT) NIL)
         ("2" (HIDE -2 2)
          (("2" (CASE "forall (n:nat): gt1x!1^j!1<=gt1x!1^(j!1+n)")
            (("1" (INST - "i!1-j!1") (("1" (ASSERT) NIL)))
             ("2" (HIDE -1 2)
              (("2" (INDUCT "n")
                (("1" (ASSERT) NIL)
                 ("2" (SKOSIMP*)
                  (("2" (LEMMA "expt_plus")
                    (("2" (INST -1 "1" "j!1 + j!2" "gt1x!1")
                      (("2" (REPLACE -1)
                        (("2" (HIDE -1)
                          (("2" (REWRITE "expt_x1")
                            (("2"
                              (LEMMA "le_times_le_pos")
                              (("2"
                                (INST
                                 -
                                 "1"
                                 "gt1x!1 ^ j!1"
                                 "gt1x!1 ^ (j!1 + j!2)"
                                 "gt1x!1")
                                (("2"
                                  (ASSERT)
                                  NIL)))))))))))))))))))))))))))
       ("2" (ASSERT) NIL)))
     ("2" (CASE "forall (n:nat): gt1x!1^i!1<gt1x!1^(1+i!1+n)")
      (("1" (INST - "j!1-(i!1+1)") (("1" (ASSERT) NIL)))
       ("2" (HIDE -1 2)
        (("2" (INDUCT "n")
          (("1" (ASSERT)
            (("1" (REWRITE "expt_plus")
              (("1" (REWRITE "expt_x1")
                (("1" (LEMMA "both_sides_times_pos_lt1")
                  (("1" (INST - "gt1x!1 ^ i!1" "1" "gt1x!1")
                    (("1" (ASSERT) NIL)))))))))))
           ("2" (SKOSIMP*)
            (("2" (LEMMA "expt_plus")
              (("2" (INST - "1" "(1 + i!1 + j!2)" "gt1x!1")
                (("2" (REPLACE -1)
                  (("2" (HIDE -1)
                    (("2" (REWRITE "expt_x1")
                      (("2" (LEMMA "lt_times_lt_pos1")
                        (("2"
                          (INST - "gt1x!1^i!1" "1"
                           "gt1x!1^(1+i!1+j!2)" "gt1x!1")
                          (("2" (ASSERT)
                            NIL)))))))))))))))))))))))))))
 (|both_sides_expt_lt1_lt_TCC1| "" (TCC :DEFS EXPLICIT) NIL)
 (|both_sides_expt_lt1_lt| "" (SKOSIMP*)
  (("" (GROUND)
    (("1" (CASE "FORALL (n:nat): lt1x!1^(i!1+n) <= lt1x!1^i!1")
      (("1" (INST -1 "j!1-i!1") (("1" (ASSERT) NIL)))
       ("2" (HIDE -1 2)
        (("2" (INDUCT "n")
          (("1" (ASSERT) NIL)
           ("2" (SKOSIMP*)
            (("2" (LEMMA "expt_plus")
              (("2" (INST - "1" "i!1 + j!2" "lt1x!1")
                (("2" (REPLACE -1)
                  (("2" (HIDE -1)
                    (("2" (REWRITE "expt_x1")
                      (("2" (LEMMA "le_times_le_pos")
                        (("2"
                          (INST - "lt1x!1" "lt1x!1^(i!1+j!2)"
                           "lt1x!1^i!1" "1")
                          (("2" (ASSERT) NIL)))))))))))))))))))))))
     ("2" (CASE "FORALL (n:nat): lt1x!1^(j!1+n+1) < lt1x!1^j!1")
      (("1" (INST -1 "i!1 -j!1 -1") (("1" (ASSERT) NIL)))
       ("2" (HIDE -1 2)
        (("2" (INDUCT "n")
          (("1" (ASSERT)
            (("1" (REWRITE "expt_plus")
              (("1" (REWRITE "expt_x1")
                (("1" (LEMMA "both_sides_times_pos_lt1")
                  (("1" (INST -1 "lt1x!1 ^ j!1" "lt1x!1" "1")
                    (("1" (ASSERT) NIL)))))))))))
           ("2" (SKOSIMP*)
            (("2" (LEMMA "expt_plus")
              (("2" (INST -1 "1" "1 + j!1 + j!2" "lt1x!1")
                (("2" (REPLACE -1)
                  (("2" (HIDE -1)
                    (("2" (REWRITE "expt_x1")
                      (("2" (LEMMA "lt_times_lt_pos1")
                        (("2"
                          (INST -1 "lt1x!1 ^ (j!1 + j!2 + 1)"
                           "lt1x!1" "lt1x!1 ^ j!1" "1")
                          (("2" (ASSERT)
                            NIL)))))))))))))))))))))))))))
 (|both_sides_expt_pos_le| "" (SKOSIMP)
  (("" (EXPAND "^")
    (("" (LEMMA "both_sides_expt_pos_le_aux")
      (("" (INST?) (("" (GROUND) NIL)))))))))
 (|both_sides_expt_gt1_le| "" (SKOSIMP*)
  (("" (CASE "i!1 = j!1")
    (("1" (ASSERT) NIL)
     ("2" (LEMMA "both_sides_expt_gt1_lt")
      (("2" (INST -1 "gt1x!1" "j!1" "i!1")
        (("2" (GROUND) NIL)))))))))
 (|both_sides_expt_lt1_le| "" (SKOSIMP*)
  (("" (LEMMA "both_sides_expt_lt1_lt")
    (("" (INST -1 "j!1" "i!1" "lt1x!1") (("" (GROUND) NIL)))))))
 (|both_sides_expt_pos_gt| "" (SKOSIMP)
  (("" (EXPAND "^")
    (("" (LEMMA "both_sides_expt_pos_gt_aux")
      (("" (INST?) (("" (GROUND) NIL)))))))))
 (|both_sides_expt_gt1_gt| "" (SKOSIMP*)
  (("" (LEMMA "both_sides_expt_gt1_lt")
    (("" (INST -1 "gt1x!1" "j!1" "i!1") (("" (GROUND) NIL)))))))
 (|both_sides_expt_lt1_gt| "" (SKOSIMP*)
  (("" (LEMMA "both_sides_expt_lt1_lt")
    (("" (INST -1 "j!1" "i!1" "lt1x!1") (("" (GROUND) NIL)))))))
 (|both_sides_expt_pos_ge| "" (SKOSIMP)
  (("" (EXPAND "^")
    (("" (LEMMA "both_sides_expt_pos_ge_aux")
      (("" (INST?) (("" (GROUND) NIL)))))))))
 (|both_sides_expt_gt1_ge| "" (SKOSIMP*)
  (("" (LEMMA "both_sides_expt_gt1_le")
    (("" (INST -1 "gt1x!1" "j!1" "i!1") (("" (GROUND) NIL)))))))
 (|both_sides_expt_lt1_ge| "" (SKOSIMP*)
  (("" (LEMMA "both_sides_expt_lt1_le")
    (("" (INST -1 "j!1" "i!1" "lt1x!1") (("" (GROUND) NIL)))))))
 (|expt_gt1_pos_TCC1| "" (SUBTYPE-TCC) NIL)
 (|expt_gt1_pos| "" (INDUCT "pm")
  (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)
   ("3" (SKOSIMP*)
    (("3" (SPLIT)
      (("1" (REWRITE "expt_plus")
        (("1" (REWRITE "expt_x1")
          (("1" (INST?)
            (("1" (LEMMA "both_sides_times_pos_ge1")
              (("1" (INST -1 "gt1x!1" "gt1x!1 ^ j!1" "1")
                (("1" (ASSERT) NIL)))))))))))
       ("2" (EXPAND "^")
        (("2" (EXPAND "expt")
          (("2" (EXPAND "expt") (("2" (ASSERT) NIL)))))))))))))
 (|expt_gt1_neg_TCC1| "" (SUBTYPE-TCC) NIL)
 (|expt_gt1_neg| "" (SKOSIMP)
  (("" (CASE "gt1x!1^(-pm!1) * gt1x!1^pm!1 < gt1x!1^pm!1")
    (("1" (LEMMA "both_sides_times_pos_lt1")
      (("1" (INST -1 "gt1x!1 ^ pm!1" "gt1x!1 ^ (-pm!1)" "1")
        (("1" (ASSERT) NIL)))))
     ("2" (REWRITE "expt_plus" :DIR RL)
      (("2" (HIDE 2)
        (("2" (LEMMA "expt_gt1_pos")
          (("2" (INST -1 "gt1x!1" "pm!1")
            (("2" (ASSERT)
              (("2" (EXPAND "^" 1 1)
                (("2" (EXPAND "expt")
                  (("2" (ASSERT) NIL)))))))))))))))))))
 (|expt_gt1_nonpos_TCC1| "" (SUBTYPE-TCC) NIL)
 (|expt_gt1_nonpos| "" (SKOSIMP)
  (("" (CASE "m!1 = 0")
    (("1" (GRIND) NIL)
     ("2" (LEMMA "expt_gt1_neg")
      (("2" (INST -1 "gt1x!1" "m!1")
        (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))))))))
 (|exponent_adjust_TCC1| "" (SUBTYPE-TCC) NIL)
 (|exponent_adjust_TCC2| "" (SUBTYPE-TCC) NIL)
 (|exponent_adjust_TCC3| "" (SUBTYPE-TCC) NIL)
 (|exponent_adjust| "" (SKOSIMP*)
  (("" (LEMMA "both_sides_expt_gt1_lt")
    (("" (INST - "b!1" "i!1 - pm!1" "i!1")
      (("" (GROUND)
        (("" (REWRITE "expt_plus")
          (("" (REWRITE "expt_x1")
            (("" (LEMMA "both_sides_times_pos_le1")
              (("" (INST - "b!1 ^ i!1" "2" "b!1")
                (("" (GROUND) NIL)))))))))))))))))
 (|exp_of_exists_TCC1| "" (SUBTYPE-TCC) NIL)
 (|exp_of_exists| "" (SKOSIMP*)
  (("" (LEMMA "lub_int")
    (("" (CASE "py!1<1")
      (("1" (INST - "{i|b!1^i<=py!1}" "-1")
        (("1" (PROP)
          (("1" (EXPAND "least_upper_bound?")
            (("1" (SKOSIMP*)
              (("1" (HIDE -2)
                (("1" (INST + "j!1")
                  (("1" (ASSERT)
                    (("1" (EXPAND "upper_bound?")
                      (("1" (INST - "j!1+1")
                        (("1" (ASSERT) NIL)))))))))))))))
           ("2" (EXPAND "upper_bound?")
            (("2" (SKOLEM-TYPEPRED)
              (("2" (CASE "y!1>=0")
                (("1" (LEMMA "expt_ge1")
                  (("1" (INST?) (("1" (ASSERT) NIL)))))
                 ("2" (ASSERT) NIL)))))))))
         ("2" (REWRITE "nonempty_exists")
          (("2" (LEMMA "axiom_of_archimedes")
            (("2" (INST - "1/py!1")
              (("2" (SKOSIMP*)
                (("2" (INST + "-i!1")
                  (("2" (REWRITE "expt_inverse")
                    (("2" (REWRITE "div_mult_pos_le1")
                      (("1" (LEMMA "pos_expt_gt")
                        (("1" (INST?)
                          (("1" (REWRITE "div_mult_pos_lt1")
                            (("1"
                              (LEMMA "both_sides_times_pos_lt2")
                              (("1"
                                (INST - "py!1" "i!1" "b!1^i!1")
                                (("1" (ASSERT) NIL)))))))
                           ("2" (ASSERT) NIL)))))
                       ("2" (LEMMA "expt_pos")
                        (("2" (INST?)
                          (("2" (ASSERT) NIL)))))))))))))))))))))
       ("2" (LEMMA "axiom_of_archimedes")
        (("2" (INST?)
          (("2" (SKOSIMP*)
            (("2" (INST - "{i|b!1^i<=py!1}" "i!1")
              (("1" (PROP)
                (("1" (EXPAND "least_upper_bound?")
                  (("1" (SKOSIMP*)
                    (("1" (HIDE -2)
                      (("1" (INST + "j!1")
                        (("1" (ASSERT)
                          (("1" (EXPAND "upper_bound?")
                            (("1"
                              (INST - "j!1+1")
                              (("1" (ASSERT) NIL)))))))))))))))
                 ("2" (EXPAND "upper_bound?")
                  (("2" (SKOLEM-TYPEPRED)
                    (("2" (LEMMA "pos_expt_gt")
                      (("2" (INST?)
                        (("1" (ASSERT) NIL)
                         ("2" (ASSERT) NIL)))))))))))
               ("2" (REWRITE "nonempty_exists")
                (("2" (INST + "0")
                  (("2" (REWRITE "expt_x0")
                    (("2" (ASSERT) NIL))))))))))))))))))))))(|floor_ceil|
 (|floor_exists| "" (SKOSIMP*)
  (("" (LEMMA "lub_int")
    (("" (LEMMA "axiom_of_archimedes")
      (("" (INST?)
        (("" (SKOSIMP*)
          (("" (INST - "{i|i<=x!1}" "i!1")
            (("1" (PROP)
              (("1" (EXPAND "least_upper_bound?")
                (("1" (SKOLEM-TYPEPRED)
                  (("1" (INST?)
                    (("1" (PROP)
                      (("1" (EXPAND "upper_bound?")
                        (("1" (INST - "j!1+1")
                          (("1" (ASSERT) NIL)
                           ("2" (ASSERT) NIL)))))))))))))
               ("2" (EXPAND "upper_bound?")
                (("2" (SKOLEM-TYPEPRED) (("2" (ASSERT) NIL)))))))
             ("2" (REWRITE "nonempty_exists")
              (("2" (LEMMA "axiom_of_archimedes")
                (("2" (INST - "abs(x!1)")
                  (("2" (SKOSIMP*)
                    (("2" (INST + "-i!2")
                      (("2" (EXPAND "abs")
                        (("2" (LIFT-IF)
                          (("2" (ASSERT)
                            NIL)))))))))))))))))))))))))))
 (|ceiling_exists| "" (SKOSIMP*)
  (("" (CASE "integer?(x!1)")
    (("1" (INST?)
      (("1" (ASSERT) NIL)
       ("2" (ASSERT)
        (("2" (EXPAND "integer?") (("2" (PROPAX) NIL)))))))
     ("2" (LEMMA "floor_exists")
      (("2" (INST?)
        (("2" (SKOSIMP*)
          (("2" (INST + "i!1+1")
            (("2" (ASSERT)
              (("2" (EXPAND "integer?")
                (("2" (PROPAX) NIL)))))))))))))))))
 (|floor_TCC1| ""
  (INST + "lambda x: choose( {i: integer | i <= x & x < 1 + i})")
  (("" (EXPAND "nonempty?")
    (("" (EXPAND "empty?")
      (("" (EXPAND "member")
        (("" (LEMMA "floor_exists")
          (("" (SKOSIMP*)
            (("" (INST?)
              (("" (SKOSIMP*)
                (("" (INST?) (("" (ASSERT) NIL)))))))))))))))))))
 (|fractional_TCC1| "" (TCC) NIL)
 (|ceiling_TCC1| ""
  (INST + "lambda x: choose( {i: integer | x <= i & i < x + 1})")
  (("" (EXPAND "nonempty?")
    (("" (EXPAND "empty?")
      (("" (EXPAND "member")
        (("" (LEMMA "ceiling_exists")
          (("" (SKOSIMP*)
            (("" (INST - "x!1")
              (("" (SKOSIMP*)
                (("" (INST?) (("" (ASSERT) NIL)))))))))))))))))))
 (|floor_def| "" (GRIND) NIL) (|ceiling_def| "" (GRIND) NIL)
 (|floor_ceiling_reflect1| "" (GRIND) NIL)
 (|floor_ceiling_reflect2| "" (GRIND) NIL)
 (|floor_TCC2| "" (TCC) NIL) (|ceiling_TCC2| "" (TCC) NIL)
 (|floor_int| "" (GRIND) NIL) (|ceiling_int| "" (GRIND) NIL)
 (|floor_plus_int| "" (SKOLEM!)
  (("" (NAME "j!1" "floor(x!1+i!1)")
    (("" (NAME "k!1" "floor(x!1)")
      (("" (TYPEPRED "floor(i!1 + x!1)")
        (("" (TYPEPRED "floor(x!1)") (("" (GROUND) NIL)))))))))))
 (|ceiling_plus_int| "" (SKOLEM!)
  (("" (LEMMA "ceiling_def")
    (("" (INST-CP - "x!1+i!1")
      (("" (FLATTEN)
        (("" (NAME "j!1" "ceiling(x!1)")
          (("" (NAME "k!1" "ceiling(x!1+i!1)")
            (("" (REPLACE -1)
              (("" (REPLACE -2)
                (("" (INST - "x!1")
                  (("" (REPLACE -2)
                    (("" (GROUND) NIL)))))))))))))))))))))
 (|floor_ceiling_nonint| "" (GRIND) NIL)
 (|floor_ceiling_int| "" (GRIND) NIL)
 (|floor_neg| "" (SKOSIMP*)
  (("" (LIFT-IF)
    (("" (PROP)
      (("1" (REWRITE "floor_int")
        (("1" (REWRITE "floor_int")
          (("1" (ASSERT) NIL)
           ("2" (REWRITE "closed_neg")
            (("1" (ASSERT)
              (("1" (EXPAND "integer?")
                (("1" (FLATTEN)
                  (("1" (REWRITE "closed_neg") NIL)))))))
             ("2" (EXPAND "integer?") (("2" (PROPAX) NIL)))))))
         ("2" (EXPAND "integer?") (("2" (PROPAX) NIL)))))
       ("2" (EXPAND "integer?") (("2" (ASSERT) NIL)))))))))
 (|real_parts| "" (EXPAND "fractional") (("" (PROPAX) NIL)))
 (|floor_plus| "" (SKOLEM!)
  (("" (EXPAND "fractional") (("" (ASSERT) NIL)))))
 (|ceiling_plus| "" (SKOLEM!)
  (("" (EXPAND "fractional") (("" (ASSERT) NIL)))))
 (|floor_split| "" (GRIND) NIL) (|floor_within_1| "" (GRIND) NIL)
 (|ceiling_within_1| "" (GRIND) NIL))(|integer_props|
 (|integer_pred_ax| "" (SKOSIMP*)
  (("" (CASE "i!1 >= 0")
    (("1" (INST 1 "i!1") (("1" (ASSERT) NIL)))
     ("2" (INST 2 "-i!1")
      (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))))))
 (|lub_nat_TCC1| "" (SUBTYPE-TCC) NIL)
 (|lub_nat_TCC2| "" (SUBTYPE-TCC) NIL)
 (|lub_nat| "" (INDUCT "m")
  (("1" (SKOSIMP*)
    (("1" (INST + "0")
      (("1" (EXPAND "least_upper_bound?") (("1" (PROPAX) NIL)))
       ("2" (TYPEPRED "N!1")
        (("2" (EXPAND "nonempty?")
          (("2" (EXPAND "empty?")
            (("2" (SKOSIMP*)
              (("2" (EXPAND "member")
                (("2" (EXPAND "upper_bound?")
                  (("2" (INST?) (("2" (ASSERT) NIL)))))))))))))))))))
   ("2" (SKOSIMP*)
    (("2" (INST?)
      (("2" (PROP)
        (("2" (INST + "j!1+1")
          (("1" (EXPAND "least_upper_bound?")
            (("1" (ASSERT)
              (("1" (SKOSIMP*)
                (("1" (EXPAND "upper_bound?")
                  (("1" (SKOSIMP*)
                    (("1" (INST?)
                      (("1" (INST?) (("1" (ASSERT) NIL)))))))))))))))
           ("2" (EXPAND "upper_bound?")
            (("2" (SKOSIMP*)
              (("2" (INST - "y!1") (("2" (ASSERT) NIL)))))))))))))))
   ("3" (HIDE 2)
    (("3" (SKOSIMP*) (("3" (TYPEPRED "n!1") (("3" (INST?) NIL)))))))
   ("4" (SKOLEM-TYPEPRED)
    (("4" (REWRITE "nonempty_member")
      (("4" (EXPAND "member") (("4" (PROPAX) NIL)))))))))
 (|lub_int_TCC1| "" (SUBTYPE-TCC) NIL)
 (|lub_int_TCC2| "" (SUBTYPE-TCC) NIL)
 (|lub_int| "" (SKOSIMP*)
  (("" (TYPEPRED "I!1")
    (("" (EXPAND "nonempty?")
      (("" (EXPAND "empty?")
        (("" (SKOSIMP*)
          (("" (LEMMA "lub_nat")
            (("" (EXPAND "member")
              (("" (INST - "{n|I!1(n+x!1)}" "i!1-x!1")
                (("1" (PROP)
                  (("1" (SKOSIMP*)
                    (("1" (INST + "n!1+x!1")
                      (("1" (ASSERT)
                        (("1" (EXPAND "least_upper_bound?")
                          (("1" (PROP)
                            (("1"
                              (EXPAND "upper_bound?")
                              (("1"
                                (SKOSIMP*)
                                (("1"
                                  (INST - "y!1-x!1")
                                  (("1" (ASSERT) NIL)
                                   ("2" (ASSERT) NIL)))))))
                             ("2"
                              (SKOSIMP*)
                              (("2"
                                (INST - "y!1-x!1")
                                (("1"
                                  (ASSERT)
                                  (("1"
                                    (EXPAND "upper_bound?")
                                    (("1"
                                      (SKOSIMP*)
                                      (("1" (INST?) NIL)))))))
                                 ("2"
                                  (ASSERT)
                                  (("2"
                                    (EXPAND "upper_bound?")
                                    (("2"
                                      (INST?)
                                      NIL)))))))))))))))))))
                   ("2" (EXPAND "upper_bound?")
                    (("2" (SKOSIMP*)
                      (("2" (TYPEPRED "y!1")
                        (("2" (INST - "y!1+x!1")
                          (("2" (ASSERT) NIL)))))))))))
                 ("2" (ASSERT)
                  (("2" (EXPAND "upper_bound?")
                    (("2" (INST - "x!1") (("2" (ASSERT) NIL)))))))
                 ("3" (ASSERT)
                  (("3" (EXPAND "upper_bound?")
                    (("3" (INST - "x!1")
                      (("3" (ASSERT)
                        (("3" (EXPAND "nonempty?")
                          (("3" (EXPAND "empty?")
                            (("3"
                              (INST - "0")
                              (("3"
                                (EXPAND "member")
                                (("3"
                                  (PROPAX)
                                  NIL))))))))))))))))))))))))))))))))))(|rational_props|)(|real_props| (|inv_ne_0| "" (GRIND) NIL)
 (|both_sides_plus1| "" (TCC :DEFS !) NIL)
 (|both_sides_plus2| "" (TCC :DEFS !) NIL)
 (|both_sides_minus1| "" (TCC :DEFS !) NIL)
 (|both_sides_minus2| "" (TCC :DEFS !) NIL)
 (|both_sides_times1| "" (GRIND)
  (("" (DELETE -1 -2)
    ((""
      (CASE "(x!1 * n0z!1) * (1/n0z!1) = (y!1 * n0z!1) * (1/n0z!1)")
      (("1" (ASSERT) NIL)
       ("2" (REPLACE -1) (("2" (PROPAX) NIL)))))))))
 (|both_sides_times2| "" (LEMMA "both_sides_times1")
  (("" (SKOSIMP*)
    (("" (PROP)
      (("1" (INST -2 "n0z!1" "x!1" "y!1")
        (("1" (REPLACE -1) (("1" (ASSERT) NIL)))))
       ("2" (ASSERT) NIL)))))))
 (|both_sides_div1| "" (GRIND)
  (("" (LEMMA "both_sides_times1")
    (("" (INST -1 "1/n0z!1" "x!1" "y!1") (("" (ASSERT) NIL)))))))
 (|both_sides_div2| "" (GRIND)
  (("" (LEMMA "both_sides_times1")
    (("" (INST-CP -1 "n0x!1" "n0z!1/n0x!1" "n0z!1/n0y!1")
      (("" (FLATTEN)
        (("" (DELETE -2)
          (("" (SPLIT)
            (("1" (ASSERT)
              (("1" (CASE "n0z!1 = (n0z!1/n0x!1) * n0x!1")
                (("1" (REPLACE -1 :DIR RL)
                  (("1" (DELETE -1)
                    (("1" (DELETE -3)
                      (("1"
                        (INST -2 "n0y!1" "n0z!1"
                         "(n0z!1/n0y!1)*n0x!1")
                        (("1" (FLATTEN)
                          (("1" (DELETE -2)
                            (("1"
                              (ASSERT)
                              (("1"
                                (SPLIT)
                                (("1"
                                  (ASSERT)
                                  (("1"
                                    (CASE
                                     "(n0z!1 / n0y!1) * n0x!1 * n0y!1 = n0z!1 * n0x!1")
                                    (("1"
                                      (REPLACE -1)
                                      (("1"
                                        (REWRITE "both_sides_times2")
                                        NIL)))
                                     ("2" (ASSERT) NIL)))))
                                 ("2" (PROPAX) NIL)))))))))))))))))
                 ("2" (ASSERT)
                  (("2" (DELETE -1 -2 -3 2)
                    (("2" (REWRITE "commutative_mult") NIL)))))))))
             ("2" (PROPAX) NIL)))))))))))))
 (|times_plus| "" (GRIND) NIL) (|times_div1| "" (GRIND) NIL)
 (|times_div2| "" (GRIND) NIL) (|div_times| "" (GRIND) NIL)
 (|div_eq_zero| "" (GRIND)
  (("" (LEMMA "both_sides_times1")
    (("" (INST -1 "n0z!1" "x!1/n0z!1" "0")
      (("" (FLATTEN)
        (("" (DELETE -1)
          (("" (SPLIT)
            (("1" (DELETE -2)
              (("1" (ASSERT)
                (("1" (REWRITE "commutative_mult")
                  (("1" (ASSERT) NIL)))))))
             ("2" (PROPAX) NIL)))))))))))))
 (|div_simp| "" (GRIND) NIL) (|div_cancel1| "" (GRIND) NIL)
 (|div_cancel2| "" (GRIND) NIL) (|div_cancel3| "" (TCC :DEFS !) NIL)
 (|cross_mult| "" (GRIND)
  (("1" (LEMMA "both_sides_times1")
    (("1" (INST-CP -1 "n0x!1" "x!1/n0x!1" "y!1/n0y!1")
      (("1" (FLATTEN)
        (("1" (DELETE -2)
          (("1" (SPLIT)
            (("1" (REWRITE "commutative_mult" -1)
              (("1" (ASSERT) NIL)))
             ("2" (PROPAX) NIL)))))))))))
   ("2" (LEMMA "both_sides_times1")
    (("2" (INST -1 "1/n0x!1" "x!1*n0y!1" "y!1*n0x!1")
      (("2" (FLATTEN)
        (("2" (DELETE -1)
          (("2" (SPLIT)
            (("1" (ASSERT) NIL) ("2" (PROPAX) NIL)))))))))))))
 (|add_div| "" (GRIND) NIL) (|minus_div1| "" (GRIND) NIL)
 (|minus_div2| "" (GRIND) NIL) (|div_distributes| "" (GRIND) NIL)
 (|div_distributes_minus| "" (GRIND) NIL) (|div_div1| "" (GRIND) NIL)
 (|div_div2| "" (GRIND) NIL) (|idem_add_is_zero| "" (GRIND) NIL)
 (|zero_times1| "" (GRIND) NIL) (|zero_times2| "" (GRIND) NIL)
 (|zero_times3| "" (SKOSIMP*)
  (("" (PROP)
    (("1" (LEMMA "trichotomy")
      (("1" (INST-CP -1 "x!1")
        (("1" (INST -1 "y!1")
          (("1" (ASSERT)
            (("1" (PROP)
              (("1" (LEMMA "posreal_mult_closed")
                (("1" (INST?) (("1" (ASSERT) NIL)))))
               ("2" (LEMMA "posreal_mult_closed")
                (("2" (INST -1 "-x!1" "y!1") (("2" (ASSERT) NIL)))))
               ("3" (LEMMA "posreal_mult_closed")
                (("3" (INST -1 "x!1" "-y!1") (("3" (ASSERT) NIL)))))
               ("4" (LEMMA "posreal_mult_closed")
                (("4" (INST -1 "-x!1" "-y!1")
                  (("4" (ASSERT) NIL)))))))))))))))
     ("2" (ASSERT) NIL) ("3" (ASSERT) NIL)))))
 (|neg_times_neg| "" (GRIND) NIL) (|zero_is_neg_zero| "" (GRIND) NIL)
 (|strict_lt| "" (GRIND) NIL) (|trich_lt| "" (GRIND) NIL)
 (|tri_unique_lt1| "" (GRIND) NIL) (|tri_unique_lt2| "" (GRIND) NIL)
 (|zero_not_lt_zero| "" (GRIND) NIL) (|neg_lt| "" (GRIND) NIL)
 (|pos_times_lt| "" (GRIND)
  (("1" (LEMMA "posreal_mult_closed")
    (("1" (CASE "x!1 = 0")
      (("1" (ASSERT) NIL)
       ("2" (CASE "y!1 = 0")
        (("1" (ASSERT) NIL)
         ("2" (INST -1 "x!1" "-y!1") (("2" (ASSERT) NIL)))))))))
   ("2" (CASE "x!1 = 0")
    (("1" (ASSERT) NIL)
     ("2" (CASE "y!1 = 0")
      (("1" (ASSERT) NIL)
       ("2" (LEMMA "posreal_mult_closed")
        (("2" (INST -1 "-x!1" "y!1") (("2" (ASSERT) NIL)))))))))
   ("3" (LEMMA "posreal_mult_closed")
    (("3" (INST -1 "x!1" "y!1") (("3" (ASSERT) NIL)))))
   ("4" (LEMMA "posreal_mult_closed")
    (("4" (INST -1 "-x!1" "-y!1") (("4" (ASSERT) NIL)))))))
 (|neg_times_lt| "" (SKOSIMP*)
  (("" (LEMMA "pos_times_lt")
    (("" (INST -1 "x!1" "-y!1")
      (("" (ASSERT) (("" (GRIND) NIL)))))))))
 (|quotient_pos_lt| "" (SKOSIMP*)
  (("" (LEMMA "inverse_mult")
    (("" (INST?)
      (("" (LEMMA "pos_times_lt")
        (("" (INST -1 "n0x!1" "1/n0x!1")
          (("" (REPLACE -2)
            (("" (ASSERT) (("" (GROUND) NIL)))))))))))))))
 (|quotient_neg_lt| "" (SKOSIMP*)
  (("" (LEMMA "quotient_pos_lt")
    (("" (INST -1 "-n0x!1") (("" (ASSERT) (("" (GRIND) NIL)))))))))
 (|pos_div_lt| "" (SKOSIMP*)
  (("" (LEMMA "pos_times_lt")
    (("" (INST -1 "x!1" "1/n0y!1")
      (("" (LEMMA "quotient_pos_lt")
        (("" (INST -1 "n0y!1")
          (("" (LEMMA "quotient_neg_lt")
            (("" (INST -1 "n0y!1") (("" (GRIND) NIL)))))))))))))))
 (|neg_div_lt| "" (SKOSIMP*)
  (("" (LEMMA "pos_div_lt")
    (("" (INST -1 "n0y!1" "-x!1") (("" (GRIND) NIL)))))))
 (|div_mult_pos_lt1| "" (GRIND)
  (("1" (LEMMA "posreal_mult_closed")
    (("1" (INST -1 "x!1 - (z!1/py!1)" "py!1") (("1" (ASSERT) NIL)))))
   ("2" (LEMMA "posreal_mult_closed")
    (("2" (INST -1 "x!1*py!1 - z!1" "1/py!1")
      (("2" (ASSERT) NIL)))))))
 (|div_mult_pos_lt2| "" (LEMMA "div_mult_pos_lt1")
  (("" (SKOSIMP)
    (("" (INST -1 "py!1" "-x!1" "-z!1") (("" (GRIND) NIL)))))))
 (|div_mult_neg_lt1_TCC1| "" (TCC :DEFS EXPLICIT) NIL)
 (|div_mult_neg_lt1| "" (LEMMA "div_mult_pos_lt2")
  (("" (SKOSIMP)
    (("" (INST -1 "-ny!1" "-x!1" "z!1") (("" (GRIND) NIL)))))))
 (|div_mult_neg_lt2| "" (SKOSIMP)
  (("" (LEMMA "div_mult_pos_lt1")
    (("" (INST -1 "-ny!1" "-x!1" "z!1") (("" (GRIND) NIL)))))))
 (|both_sides_plus_lt1| "" (TCC :DEFS !) NIL)
 (|both_sides_plus_lt2| "" (TCC :DEFS !) NIL)
 (|both_sides_minus_lt1| "" (TCC :DEFS !) NIL)
 (|both_sides_minus_lt2| "" (TCC :DEFS !) NIL)
 (|both_sides_times_pos_lt1| "" (GRIND)
  (("1" (LEMMA "posreal_mult_closed")
    (("1" (INST -1 "(y!1 - x!1) * pz!1" "1/pz!1")
      (("1" (ASSERT) NIL)))))
   ("2" (LEMMA "posreal_mult_closed")
    (("2" (INST -1 "y!1-x!1" "pz!1") (("2" (ASSERT) NIL)))))))
 (|both_sides_times_pos_lt2| "" (LEMMA "both_sides_times_pos_lt1")
  (("" (SKOSIMP)
    (("" (INST -1 "pz!1" "x!1" "y!1") (("" (GRIND) NIL)))))))
 (|both_sides_times_neg_lt1| "" (LEMMA "both_sides_times_pos_lt1")
  (("" (SKOSIMP)
    (("" (INST -1 "-nz!1" "y!1" "x!1") (("" (GRIND) NIL)))))))
 (|both_sides_times_neg_lt2| "" (LEMMA "both_sides_times_neg_lt1")
  (("" (SKOSIMP)
    (("" (INST -1 "nz!1" "x!1" "y!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_pos_lt1| "" (LEMMA "both_sides_times_pos_lt1")
  (("" (SKOSIMP)
    (("" (INST -1 "1/pz!1" "x!1" "y!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_pos_lt2| "" (SKOSIMP*)
  (("" (LEMMA "both_sides_times_pos_lt1")
    (("" (INST -1 "px!1 * py!1" "pz!1 / px!1" "pz!1 / py!1")
      (("" (ASSERT)
        (("" (GRIND)
          (("1" (CASE "pz!1 / px!1 * (px!1 * py!1) = pz!1 * py!1")
            (("1" (REPLACE -1)
              (("1" (HIDE -1)
                (("1"
                  (CASE "pz!1 / py!1 * (px!1 * py!1) = pz!1 * px!1")
                  (("1" (REPLACE -1)
                    (("1" (HIDE -1)
                      (("1" (REWRITE "both_sides_times_pos_lt2")
                        NIL)))))
                   ("2" (ASSERT) NIL)))))))
             ("2" (ASSERT) NIL)))
           ("2" (CASE "pz!1 / px!1 * (px!1 * py!1) = pz!1 * py!1")
            (("1" (CASE "pz!1 / py!1 * (px!1 * py!1) = pz!1 * px!1")
              (("1" (REPLACE -1)
                (("1" (REPLACE -2)
                  (("1" (HIDE -1 -2)
                    (("1" (LEMMA "both_sides_times_pos_lt2")
                      (("1" (INST?) (("1" (GRIND) NIL)))))))))))
               ("2" (GRIND) NIL)))
             ("2" (GRIND) NIL)))))))))))))
 (|both_sides_div_pos_lt3| "" (SKOSIMP*)
  (("" (LEMMA "both_sides_div_pos_lt2")
    (("" (INST -1 "py!1" "px!1" "-nz!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_neg_lt1| "" (LEMMA "both_sides_div_pos_lt1")
  (("" (SKOSIMP)
    (("" (INST -1 "-nz!1" "y!1" "x!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_neg_lt2| "" (LEMMA "both_sides_div_pos_lt2")
  (("" (SKOSIMP)
    (("" (INST -1 "-ny!1" "-nx!1" "pz!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_neg_lt3| "" (LEMMA "both_sides_div_pos_lt3")
  (("" (SKOSIMP)
    (("" (INST -1 "nz!1" "-ny!1" "-nx!1") (("" (GRIND) NIL)))))))
 (|lt_plus_lt1| "" (GRIND) NIL) (|lt_plus_lt2| "" (GRIND) NIL)
 (|lt_minus_lt1| "" (GRIND) NIL) (|lt_minus_lt2| "" (GRIND) NIL)
 (|lt_times_lt_pos1| "" (SKOSIMP*)
  (("" (CASE "nnz!1 = 0")
    (("1" (ASSERT)
      (("1" (LEMMA "pos_times_lt")
        (("1" (INST -1 "y!1" "w!1") (("1" (ASSERT) NIL)))))))
     ("2" (LEMMA "both_sides_times_pos_lt1")
      (("2" (INST-CP -1 "nnz!1" "px!1" "y!1")
        (("1" (INST -1 "y!1" "nnz!1" "w!1")
          (("1" (GRIND) NIL) ("2" (ASSERT) NIL)))
         ("2" (ASSERT) NIL)))))))))
 (|lt_times_lt_pos2| "" (SKOSIMP*)
  (("" (CASE "nnx!1 = 0")
    (("1" (ASSERT)
      (("1" (LEMMA "pos_times_lt")
        (("1" (INST -1 "y!1" "w!1") (("1" (ASSERT) NIL)))))))
     ("2" (LEMMA "both_sides_times_pos_lt1")
      (("2" (INST-CP -1 "pz!1" "nnx!1" "y!1")
        (("2" (INST -1 "y!1" "pz!1" "w!1")
          (("1" (GRIND) NIL) ("2" (ASSERT) NIL)))))))))))
 (|lt_div_lt_pos1_TCC1| "" (SUBTYPE-TCC) NIL)
 (|lt_div_lt_pos1| "" (GRIND)
  (("" (DELETE -5 -6)
    (("" (LEMMA "both_sides_div_pos_lt1")
      (("" (INST -1 "w!1" "px!1" "y!1")
        (("" (LEMMA "both_sides_div_pos_lt2")
          (("" (INST -1 "w!1" "pz!1" "y!1")
            (("" (GRIND) NIL)))))))))))))
 (|lt_div_lt_pos2_TCC1| "" (SUBTYPE-TCC) NIL)
 (|lt_div_lt_pos2| "" (GRIND)
  (("" (DELETE -4 -5)
    (("" (LEMMA "both_sides_div_pos_lt1")
      (("" (INST -1 "w!1" "nnx!1" "y!1")
        (("" (LEMMA "both_sides_div_pos_lt2")
          (("" (INST -1 "w!1" "pz!1" "y!1")
            (("" (GRIND) NIL)))))))))))))
 (|lt_times_lt_neg1| "" (LEMMA "lt_times_lt_pos1")
  (("" (SKOSIMP)
    (("" (INST -1 "-npw!1" "-ny!1" "-z!1" "-x!1")
      (("" (GRIND) NIL)))))))
 (|lt_times_lt_neg2| "" (LEMMA "lt_times_lt_pos2")
  (("" (SKOSIMP)
    (("" (INST -1 "-npy!1" "-nw!1" "-z!1" "-x!1")
      (("" (GRIND) NIL)))))))
 (|lt_div_lt_neg1_TCC1| "" (SUBTYPE-TCC) NIL)
 (|lt_div_lt_neg1_TCC2| "" (SUBTYPE-TCC) NIL)
 (|lt_div_lt_neg1| "" (LEMMA "lt_div_lt_pos1")
  (("" (SKOSIMP)
    (("" (INST -1 "-ny!1" "-nw!1" "-z!1" "-x!1")
      (("" (GRIND) NIL)))))))
 (|lt_div_lt_neg2_TCC1| "" (SUBTYPE-TCC) NIL)
 (|lt_div_lt_neg2_TCC2| "" (SUBTYPE-TCC) NIL)
 (|lt_div_lt_neg2| "" (LEMMA "lt_div_lt_pos2")
  (("" (SKOSIMP)
    (("" (INST -1 "-npy!1" "-nw!1" "-z!1" "-x!1")
      (("" (GRIND) NIL)))))))
 (|total_le| "" (TCC :DEFS !) NIL) (|dich_le| "" (TCC :DEFS !) NIL)
 (|zero_le_zero| "" (TCC :DEFS !) NIL)
 (|neg_le| "" (TCC :DEFS !) NIL)
 (|pos_times_le| "" (LEMMA "pos_times_lt")
  (("" (SKOSIMP)
    (("" (CASE "x!1 = 0")
      (("1" (GRIND) NIL)
       ("2" (CASE "y!1 = 0")
        (("1" (GRIND) NIL)
         ("2" (INST?)
          (("2" (LEMMA "zero_times3")
            (("2" (INST?) (("2" (GRIND) NIL)))))))))))))))
 (|neg_times_le| "" (LEMMA "pos_times_le")
  (("" (SKOSIMP) (("" (INST -1 "x!1" "-y!1") (("" (GRIND) NIL)))))))
 (|quotient_pos_le| "" (LEMMA "quotient_pos_lt")
  (("" (SKOSIMP)
    (("" (INST?)
      (("" (LEMMA "inv_ne_0")
        (("" (INST?) (("" (GRIND) NIL)))))))))))
 (|quotient_neg_le| "" (LEMMA "quotient_pos_le")
  (("" (SKOSIMP) (("" (INST -1 "-n0x!1") (("" (GRIND) NIL)))))))
 (|pos_div_le| "" (LEMMA "pos_div_lt")
  (("" (SKOSIMP)
    (("" (CASE "x!1 = 0")
      (("1" (GRIND) NIL)
       ("2" (INST?)
        (("2" (LEMMA "zero_times3")
          (("2" (INST -1 "x!1" "1/n0y!1")
            (("2" (LEMMA "inv_ne_0")
              (("2" (INST -1 "n0y!1")
                (("2" (GRIND) NIL)))))))))))))))))
 (|neg_div_le| "" (LEMMA "pos_div_le")
  (("" (SKOSIMP)
    (("" (INST -1 "-n0y!1" "x!1") (("" (GRIND) NIL)))))))
 (|div_mult_pos_le1| "" (LEMMA "div_mult_pos_lt1")
  (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL)))))))))
 (|div_mult_pos_le2| "" (LEMMA "div_mult_pos_lt2")
  (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL)))))))))
 (|div_mult_neg_le1| "" (LEMMA "div_mult_neg_lt1")
  (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL)))))))))
 (|div_mult_neg_le2| "" (LEMMA "div_mult_neg_lt2")
  (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL)))))))))
 (|both_sides_plus_le1| "" (GRIND) NIL)
 (|both_sides_plus_le2| "" (GRIND) NIL)
 (|both_sides_minus_le1| "" (GRIND) NIL)
 (|both_sides_minus_le2| "" (GRIND) NIL)
 (|both_sides_times_pos_le1| "" (LEMMA "both_sides_times_pos_lt1")
  (("" (SKOSIMP)
    (("" (INST?)
      (("" (INST -1 "y!1")
        (("" (GRIND)
          (("" (LEMMA "both_sides_times1")
            (("" (INST?)
              (("" (INST -1 "y!1") (("" (GRIND) NIL)))))))))))))))))
 (|both_sides_times_pos_le2| "" (LEMMA "both_sides_times_pos_le1")
  (("" (SKOSIMP)
    (("" (INST -1 "pz!1" "x!1" "y!1") (("" (GRIND) NIL)))))))
 (|both_sides_times_neg_le1| "" (LEMMA "both_sides_times_pos_le1")
  (("" (SKOSIMP)
    (("" (INST -1 "-nz!1" "y!1" "x!1") (("" (GRIND) NIL)))))))
 (|both_sides_times_neg_le2| "" (LEMMA "both_sides_times_neg_le1")
  (("" (SKOSIMP)
    (("" (INST -1 "nz!1" "x!1" "y!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_pos_le1| "" (LEMMA "both_sides_div_pos_lt1")
  (("" (SKOSIMP)
    (("" (INST?)
      (("" (INST -1 "y!1")
        (("" (GRIND)
          (("" (LEMMA "both_sides_times_pos_le1")
            (("" (INST -1 "1/pz!1" "x!1" "y!1")
              (("" (GRIND) NIL)))))))))))))))
 (|both_sides_div_pos_le2| "" (LEMMA "both_sides_div_pos_lt2")
  (("" (SKOSIMP)
    (("" (INST?)
      (("" (INST -1 "py!1")
        (("" (GRIND)
          (("" (LEMMA "both_sides_div2")
            (("" (INST?)
              (("" (INST -1 "py!1") (("" (GRIND) NIL)))))))))))))))))
 (|both_sides_div_pos_le3| "" (LEMMA "both_sides_div_pos_le2")
  (("" (SKOSIMP)
    (("" (INST -1 "py!1" "px!1" "-nz!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_neg_le1| "" (LEMMA "both_sides_div_pos_le1")
  (("" (SKOSIMP)
    (("" (INST -1 "-nz!1" "y!1" "x!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_neg_le2| "" (LEMMA "both_sides_div_pos_le2")
  (("" (SKOSIMP)
    (("" (INST -1 "-ny!1" "-nx!1" "pz!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_neg_le3| "" (LEMMA "both_sides_div_pos_le3")
  (("" (SKOSIMP)
    (("" (INST -1 "nz!1" "-ny!1" "-nx!1") (("" (GRIND) NIL)))))))
 (|le_plus_le| "" (GRIND) NIL) (|le_minus_le| "" (GRIND) NIL)
 (|le_times_le_pos| "" (LEMMA "lt_times_lt_pos1")
  (("" (SKOSIMP)
    (("" (CASE "nnz!1 = w!1")
      (("1" (LEMMA "both_sides_times_pos_le1")
        (("1" (INST -1 "w!1" "nnx!1" "y!1")
          (("1" (GRIND) NIL) ("2" (GRIND) NIL)))))
       ("2" (INST -1 "nnz!1" "nnx!1" "w!1" "y!1")
        (("1" (GRIND) NIL)
         ("2" (GRIND)
          (("2" (LEMMA "pos_times_le")
            (("2" (INST -1 "y!1" "w!1")
              (("2" (GRIND) NIL)))))))))))))))
 (|le_div_le_pos_TCC1| "" (GRIND) NIL)
 (|le_div_le_pos| "" (LEMMA "le_times_le_pos")
  (("" (SKOSIMP)
    (("" (INST -1 "nnx!1" "1/w!1" "1/pz!1" "y!1")
      (("1" (GRIND) (("1" (REWRITE "both_sides_div_pos_le2") NIL)))
       ("2" (ASSERT)
        (("2" (LEMMA "quotient_pos_lt")
          (("2" (INST -1 "w!1") (("2" (GRIND) NIL)))))))
       ("3" (GRIND) NIL)))))))
 (|le_times_le_neg| "" (LEMMA "le_times_le_pos")
  (("" (SKOSIMP)
    (("" (INST -1 "-npy!1" "-npw!1" "-z!1" "-x!1")
      (("" (GRIND) NIL)))))))
 (|le_div_le_neg_TCC1| "" (GRIND) NIL)
 (|le_div_le_neg_TCC2| "" (TCC :DEFS EXPLICIT) NIL)
 (|le_div_le_neg| "" (LEMMA "le_div_le_pos")
  (("" (SKOSIMP)
    (("" (INST -1 "-npy!1" "-nw!1" "-z!1" "-x!1")
      (("" (GRIND) NIL)))))))
 (|strict_gt| "" (TCC :DEFS !) NIL) (|trich_gt| "" (TCC :DEFS !) NIL)
 (|tri_unique_gt1| "" (TCC :DEFS !) NIL)
 (|tri_unique_gt2| "" (TCC :DEFS !) NIL)
 (|zero_not_gt_zero| "" (TCC :DEFS !) NIL)
 (|neg_gt| "" (TCC :DEFS !) NIL)
 (|pos_times_gt| "" (LEMMA "pos_times_lt")
  (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL)))))))
 (|neg_times_gt| "" (LEMMA "neg_times_lt") (("" (GRIND) NIL)))
 (|quotient_pos_gt| "" (LEMMA "quotient_pos_lt")
  (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL)))))))
 (|quotient_neg_gt| "" (LEMMA "quotient_neg_lt")
  (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL)))))))
 (|pos_div_gt| "" (LEMMA "pos_div_lt")
  (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL)))))))
 (|neg_div_gt| "" (LEMMA "neg_div_lt")
  (("" (SKOSIMP) (("" (INST?) (("" (GROUND) NIL)))))))
 (|div_mult_pos_gt1| "" (LEMMA "div_mult_pos_lt1")
  (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL)))))))))
 (|div_mult_pos_gt2| "" (LEMMA "div_mult_pos_lt2")
  (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL)))))))))
 (|div_mult_neg_gt1| "" (LEMMA "div_mult_neg_lt1")
  (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL)))))))))
 (|div_mult_neg_gt2| "" (LEMMA "div_mult_neg_lt2")
  (("" (SKOSIMP) (("" (GRIND) NIL)))))
 (|both_sides_plus_gt1| "" (GRIND) NIL)
 (|both_sides_plus_gt2| "" (GRIND) NIL)
 (|both_sides_minus_gt1| "" (GRIND) NIL)
 (|both_sides_minus_gt2| "" (GRIND) NIL)
 (|both_sides_times_pos_gt1| "" (LEMMA "both_sides_times_pos_lt1")
  (("" (SKOSIMP)
    (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL)))))))
 (|both_sides_times_pos_gt2| "" (LEMMA "both_sides_times_pos_lt2")
  (("" (SKOSIMP)
    (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL)))))))
 (|both_sides_times_neg_gt1| "" (LEMMA "both_sides_times_neg_lt1")
  (("" (SKOSIMP)
    (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL)))))))
 (|both_sides_times_neg_gt2| "" (LEMMA "both_sides_times_neg_lt2")
  (("" (SKOSIMP)
    (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_pos_gt1| "" (LEMMA "both_sides_div_pos_lt1")
  (("" (SKOSIMP)
    (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_pos_gt2| "" (LEMMA "both_sides_div_pos_lt2")
  (("" (SKOSIMP)
    (("" (INST -1 "py!1" "px!1" "pz!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_pos_gt3| "" (LEMMA "both_sides_div_pos_lt3")
  (("" (SKOSIMP)
    (("" (INST -1 "nz!1" "py!1" "px!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_neg_gt1| "" (LEMMA "both_sides_div_neg_lt1")
  (("" (SKOSIMP)
    (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_neg_gt2| "" (LEMMA "both_sides_div_neg_lt2")
  (("" (SKOSIMP)
    (("" (INST -1 "ny!1" "nx!1" "pz!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_neg_gt3| "" (LEMMA "both_sides_div_neg_lt3")
  (("" (SKOSIMP)
    (("" (INST -1 "ny!1" "nx!1" "nz!1") (("" (GRIND) NIL)))))))
 (|gt_plus_gt1| "" (GRIND) NIL) (|gt_plus_gt2| "" (GRIND) NIL)
 (|gt_minus_gt1| "" (GRIND) NIL) (|gt_minus_gt2| "" (GRIND) NIL)
 (|gt_times_gt_pos1| "" (LEMMA "lt_times_lt_pos1")
  (("" (SKOSIMP)
    (("" (INST -1 "nnw!1" "py!1" "z!1" "x!1") (("" (GRIND) NIL)))))))
 (|gt_times_gt_pos2| "" (LEMMA "lt_times_lt_pos2")
  (("" (SKOSIMP)
    (("" (INST -1 "nny!1" "pw!1" "z!1" "x!1") (("" (GRIND) NIL)))))))
 (|gt_div_gt_pos1_TCC1| "" (SUBTYPE-TCC) NIL)
 (|gt_div_gt_pos1| "" (LEMMA "lt_div_lt_pos1")
  (("" (SKOSIMP)
    (("" (INST -1 "py!1" "pw!1" "z!1" "x!1") (("" (GRIND) NIL)))))))
 (|gt_div_gt_pos2_TCC1| "" (SUBTYPE-TCC) NIL)
 (|gt_div_gt_pos2| "" (LEMMA "lt_div_lt_pos2")
  (("" (SKOSIMP)
    (("" (INST -1 "nny!1" "pw!1" "z!1" "x!1") (("" (GRIND) NIL)))))))
 (|gt_times_gt_neg1| "" (LEMMA "lt_times_lt_neg1")
  (("" (SKOSIMP)
    (("" (INST -1 "npz!1" "nx!1" "y!1" "w!1") (("" (GRIND) NIL)))))))
 (|gt_times_gt_neg2| "" (LEMMA "lt_times_lt_neg2")
  (("" (SKOSIMP)
    (("" (INST -1 "npx!1" "nz!1" "y!1" "w!1") (("" (GRIND) NIL)))))))
 (|gt_div_gt_neg1_TCC1| "" (SUBTYPE-TCC) NIL)
 (|gt_div_gt_neg1_TCC2| "" (SUBTYPE-TCC) NIL)
 (|gt_div_gt_neg1| "" (LEMMA "lt_div_lt_neg1")
  (("" (SKOSIMP)
    (("" (INST -1 "nz!1" "nx!1" "y!1" "w!1") (("" (GRIND) NIL)))))))
 (|gt_div_gt_neg2_TCC1| "" (SUBTYPE-TCC) NIL)
 (|gt_div_gt_neg2_TCC2| "" (SUBTYPE-TCC) NIL)
 (|gt_div_gt_neg2| "" (LEMMA "lt_div_lt_neg2")
  (("" (SKOSIMP)
    (("" (INST -1 "npx!1" "nz!1" "y!1" "w!1") (("" (GRIND) NIL)))))))
 (|strict_ge| "" (TCC :DEFS !) NIL) (|dich_ge| "" (TCC :DEFS !) NIL)
 (|zero_ge_zero| "" (TCC :DEFS !) NIL)
 (|neg_ge| "" (TCC :DEFS !) NIL)
 (|pos_times_ge| "" (LEMMA "pos_times_le")
  (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL)))))))
 (|neg_times_ge| "" (LEMMA "neg_times_le")
  (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL)))))))
 (|quotient_pos_ge| "" (LEMMA "quotient_pos_le")
  (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL)))))))
 (|quotient_neg_ge| "" (LEMMA "quotient_neg_le")
  (("" (SKOSIMP) (("" (GRIND) NIL)))))
 (|pos_div_ge| "" (LEMMA "pos_div_le")
  (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL)))))))
 (|neg_div_ge| "" (LEMMA "neg_div_le")
  (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL)))))))
 (|div_mult_pos_ge1| "" (LEMMA "div_mult_pos_le2")
  (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL)))))))))
 (|div_mult_pos_ge2| "" (LEMMA "div_mult_pos_le1")
  (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL)))))))))
 (|div_mult_neg_ge1| "" (LEMMA "div_mult_neg_le2")
  (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL)))))))))
 (|div_mult_neg_ge2| "" (LEMMA "div_mult_neg_le1")
  (("" (SKOSIMP) (("" (INST?) (("" (INST?) (("" (GRIND) NIL)))))))))
 (|both_sides_plus_ge1| "" (GRIND) NIL)
 (|both_sides_plus_ge2| "" (GRIND) NIL)
 (|both_sides_minus_ge1| "" (GRIND) NIL)
 (|both_sides_minus_ge2| "" (GRIND) NIL)
 (|both_sides_times_pos_ge1| "" (LEMMA "both_sides_times_pos_le1")
  (("" (SKOSIMP)
    (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL)))))))
 (|both_sides_times_pos_ge2| "" (LEMMA "both_sides_times_pos_le2")
  (("" (SKOSIMP)
    (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL)))))))
 (|both_sides_times_neg_ge1| "" (LEMMA "both_sides_times_neg_le1")
  (("" (SKOSIMP)
    (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL)))))))
 (|both_sides_times_neg_ge2| "" (LEMMA "both_sides_times_neg_le2")
  (("" (SKOSIMP)
    (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_pos_ge1| "" (LEMMA "both_sides_div_pos_le1")
  (("" (SKOSIMP)
    (("" (INST -1 "pz!1" "y!1" "x!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_pos_ge2| "" (LEMMA "both_sides_div_pos_le2")
  (("" (SKOSIMP)
    (("" (INST -1 "py!1" "px!1" "pz!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_pos_ge3| "" (LEMMA "both_sides_div_pos_le3")
  (("" (SKOSIMP)
    (("" (INST -1 "nz!1" "py!1" "px!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_neg_ge1| "" (LEMMA "both_sides_div_neg_le1")
  (("" (SKOSIMP)
    (("" (INST -1 "nz!1" "y!1" "x!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_neg_ge2| "" (LEMMA "both_sides_div_neg_le2")
  (("" (SKOSIMP)
    (("" (INST -1 "ny!1" "nx!1" "pz!1") (("" (GRIND) NIL)))))))
 (|both_sides_div_neg_ge3| "" (LEMMA "both_sides_div_neg_le3")
  (("" (SKOSIMP)
    (("" (INST -1 "ny!1" "nx!1" "nz!1") (("" (GRIND) NIL)))))))
 (|ge_plus_ge| "" (GRIND) NIL) (|ge_minus_ge| "" (GRIND) NIL)
 (|ge_times_ge_pos| "" (LEMMA "le_times_le_pos")
  (("" (SKOSIMP)
    (("" (INST -1 "nny!1" "nnw!1" "z!1" "x!1")
      (("" (ASSERT) NIL)))))))
 (|ge_div_ge_pos_TCC1| "" (TCC :DEFS EXPLICIT) NIL)
 (|ge_div_ge_pos| "" (LEMMA "le_div_le_pos")
  (("" (SKOSIMP)
    (("" (INST -1 "nny!1" "pw!1" "z!1" "x!1")
      (("" (ASSERT) NIL)))))))
 (|ge_times_ge_neg| "" (LEMMA "le_times_le_neg")
  (("" (SKOSIMP)
    (("" (INST -1 "npz!1" "npx!1" "y!1" "w!1")
      (("" (ASSERT) NIL)))))))
 (|ge_div_ge_neg_TCC1| "" (TCC :DEFS EXPLICIT) NIL)
 (|ge_div_ge_neg_TCC2| "" (TCC :DEFS EXPLICIT) NIL)
 (|ge_div_ge_neg| "" (LEMMA "le_div_le_neg")
  (("" (SKOSIMP*)
    (("" (INST -1 "npx!1" "nz!1" "y!1" "w!1")
      (("" (ASSERT) NIL)))))))
 (|nonzero_times1| "" (LEMMA "zero_times3")
  (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL)))))))
 (|nonzero_times2| "" (LEMMA "zero_times3")
  (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL)))))))
 (|nonzero_times3| "" (LEMMA "zero_times3")
  (("" (SKOSIMP) (("" (INST?) (("" (GRIND) NIL)))))))
 (|eq1_gt| "" (SKOSIMP)
  (("" (LEMMA "div_cancel3")
    (("" (INST -1 "y!1" "1" "x!1")
      (("1" (ASSERT)
        (("1" (HIDE -3)
          (("1" (REPLACE -1 :DIR RL)
            (("1" (HIDE -1)
              (("1" (LEMMA "div_mult_pos_gt2")
                (("1" (INST -1 "y!1" "1" "1")
                  (("1" (ASSERT) NIL)))))))))))))
       ("2" (LEMMA "zero_times3")
        (("2" (INST?) (("2" (GRIND) NIL)))))))))))
 (|eq1_ge| "" (LEMMA "eq1_gt")
  (("" (SKOSIMP)
    (("" (CASE "x!1 = 1")
      (("1" (ASSERT) NIL) ("2" (INST?) (("2" (ASSERT) NIL)))))))))
 (|eqm1_gt| "" (SKOSIMP)
  (("" (LEMMA "eq1_gt")
    (("" (INST -1 "x!1" "-y!1") (("" (GRIND) NIL)))))))
 (|eqm1_ge| "" (LEMMA "eq1_ge")
  (("" (SKOSIMP) (("" (INST -1 "x!1" "-y!1") (("" (GRIND) NIL)))))))
 (|eqm1_lt| "" (SKOSIMP)
  (("" (LEMMA "eq1_gt")
    (("" (INST -1 "-x!1" "y!1") (("" (GRIND) NIL)))))))
 (|eqm1_le| "" (LEMMA "eq1_ge")
  (("" (SKOSIMP) (("" (INST -1 "-x!1" "y!1") (("" (GRIND) NIL)))))))
 (|sqrt_1| "" (SKOSIMP*)
  (("" (GROUND)
    (("" (CASE "abs(x!1)>1")
      (("1" (LEMMA "eq1_gt")
        (("1" (INST -1 "abs(x!1)" "abs(x!1)")
          (("1" (ASSERT)
            (("1" (EXPAND "abs" 1)
              (("1" (LIFT-IF)
                (("1" (PROP) (("1" (ASSERT) NIL)))))))))))))
       ("2" (LEMMA "div_mult_pos_ge1")
        (("2" (INST -1 "abs(x!1)" "1" "1")
          (("1" (GROUND)
            (("1" (LEMMA "eq1_ge")
              (("1" (INST -1 "1/abs(x!1)" "1/abs(x!1)")
                (("1" (ASSERT)
                  (("1" (SPLIT)
                    (("1" (CASE "abs(x!1) = 1")
                      (("1" (ASSERT)
                        (("1" (EXPAND "abs" -1)
                          (("1" (LIFT-IF) (("1" (ASSERT) NIL)))))))
                       ("2" (ASSERT)
                        (("2" (ASSERT)
                          (("2" (REWRITE "div_mult_pos_le1")
                            (("2"
                              (EXPAND "abs" 1)
                              (("2"
                                (LIFT-IF)
                                (("2"
                                  (PROP)
                                  (("1" (ASSERT) NIL)
                                   ("2"
                                    (ASSERT)
                                    (("2"
                                      (CASE "x!1 = 0")
                                      (("1"
                                        (REPLACE -1)
                                        (("1" (ASSERT) NIL)))
                                       ("2"
                                        (ASSERT)
                                        NIL)))))))))))))))))))
                     ("2" (EXPAND "abs" 1)
                      (("2" (LIFT-IF)
                        (("2" (PROP)
                          (("1" (REWRITE "div_times")
                            (("1" (ASSERT) NIL)))
                           ("2" (REWRITE "div_times")
                            (("2" (ASSERT) NIL)))))))))))))
                 ("2" (CASE "x!1 = 0")
                  (("1" (REPLACE -1) (("1" (ASSERT) NIL)))
                   ("2" (EXPAND "abs" 2)
                    (("2" (LIFT-IF) (("2" (GROUND) NIL)))))))))))))
           ("2" (CASE "x!1 = 0")
            (("1" (REPLACE -1) (("1" (ASSERT) NIL)))
             ("2" (EXPAND "abs" 2)
              (("2" (LIFT-IF) (("2" (GROUND) NIL)))))))))))))))))
 (|idem_mult| "" (SKOSIMP*)
  (("" (GROUND)
    (("" (LEMMA "div_cancel3")
      (("" (INST -1 "x!1" "x!1" "x!1")
        (("" (PROP) (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))))))))))
 (|real_lower_complete_TCC1| "" (SKOSIMP)
  (("" (TYPEPRED "S!1") (("" (GRIND) NIL)))))
 (|real_lower_complete| "" (SKOSIMP*)
  (("" (LEMMA "real_complete")
    (("" (INST -1 "{x:real|S!1(-x)}")
      (("1" (SPLIT)
        (("1" (SKOSIMP*)
          (("1" (EXPAND "least_upper_bound?")
            (("1" (FLATTEN)
              (("1" (INST 1 "-y!2")
                (("1" (EXPAND "greatest_lower_bound?")
                  (("1" (EXPAND "lower_bound?")
                    (("1" (EXPAND "upper_bound?")
                      (("1" (SPLIT)
                        (("1" (SKOSIMP*)
                          (("1" (INST -1 "-y!3")
                            (("1" (ASSERT) NIL)))))
                         ("2" (SKOSIMP*)
                          (("2" (INST -3 "-y!3")
                            (("2"
                              (ASSERT)
                              (("2"
                                (SKOSIMP*)
                                (("2"
                                  (INST -2 "y!4")
                                  (("2"
                                    (ASSERT)
                                    (("2"
                                      (INST -1 "-y!4")
                                      (("2"
                                        (ASSERT)
                                        NIL)))))))))))))))))))))))))))))))
         ("2" (HIDE 2)
          (("2" (EXPAND "lower_bound?")
            (("2" (INST 1 "-y!1")
              (("2" (EXPAND "upper_bound?")
                (("2" (SKOSIMP*)
                  (("2" (INST -1 "-y!2")
                    (("2" (ASSERT) NIL)))))))))))))))
       ("2" (HIDE -1 2)
        (("2" (TYPEPRED "S!1")
          (("2" (EXPAND "nonempty?")
            (("2" (EXPAND "empty?")
              (("2" (SKOSIMP*)
                (("2" (INST -2 "-x!1")
                  (("2" (EXPAND "member")
                    (("2" (ASSERT) NIL)))))))))))))))))))))
 (|product_1| "" (SKOSIMP)
  (("" (CASE "i!1 = 0")
    (("1" (GRIND) NIL)
     ("2" (CASE "j!1 = 0")
      (("1" (GRIND) NIL)
       ("2" (LEMMA "eq1_ge")
        (("2" (INST?)
          (("2" (LEMMA "eq1_ge")
            (("2" (INST -1 "j!1" "i!1")
              (("2" (ASSERT) (("2" (ASSERT) NIL)))))))))))))))))
 (|product_m1| "" (SKOSIMP)
  (("" (LEMMA "product_1")
    (("" (INST -1 "i!1" "-j!1")
      (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) NIL)))))))))))
 (|triangle| "" (GRIND) NIL)
 (|abs_mult| "" (SKOSIMP)
  (("" (LEMMA "neg_times_lt") (("" (INST?) (("" (GRIND) NIL)))))))
 (|abs_limits| "" (GRIND) NIL) (|min_is_le| "" (GRIND) NIL)
 (|max_is_ge| "" (GRIND) NIL) (|min_le_max| "" (GRIND) NIL)
 (|lub_exists_TCC1| "" (SUBTYPE-TCC) NIL)
 (|lub_exists| "" (SKOLEM-TYPEPRED)
  (("" (EXPAND "bounded_above?")
    (("" (LEMMA "real_complete")
      (("" (INST?)
        (("" (ASSERT)
          (("" (REPLACE -2) (("" (ASSERT) NIL)))))))))))))
 (|lub_TCC1| "" (LEMMA "lub_exists")
  ((""
    (INST 1
     "LAMBDA (x: (bounded_above?)): epsilon! (y:real): least_upper_bound?(<=)(y,x)")
    (("1" (SKOSIMP)
      (("1" (INST -1 "x!1")
        (("1" (SKOSIMP)
          (("1" (LEMMA "epsilon_ax[real]")
            (("1" (INST?)
              (("1" (BETA)
                (("1" (REPLACE 1)
                  (("1" (ASSERT) (("1" (INST 1 "x!2") NIL)))))))
               ("2" (TYPEPRED "x!1")
                (("2" (HIDE -1 -3 2) (("2" (GRIND) NIL)))))))))))))))
     ("2" (SKOLEM-TYPEPRED)
      (("2" (HIDE -1 -3) (("2" (GRIND) NIL)))))))))
 (|lub_lem| "" (SKOLEM-TYPEPRED)
  (("" (GROUND)
    (("" (TYPEPRED "lub(SA!1)")
      (("1" (HIDE -3 -4 -5)
        (("1" (EXPAND "least_upper_bound?")
          (("1" (FLATTEN)
            (("1" (INST -2 "x!1")
              (("1" (INST -4 "lub(SA!1)")
                (("1" (ASSERT) (("1" (ASSERT) NIL)))))))))))))
       ("2" (SKOSIMP)
        (("2" (HIDE -1 -2 -3 -5 2) (("2" (GRIND) NIL)))))))))))
 (|glb_exists_TCC1| "" (SUBTYPE-TCC) NIL)
 (|glb_exists| "" (SKOLEM-TYPEPRED)
  (("" (LEMMA "real_lower_complete")
    (("" (INST?)
      (("" (EXPAND "bounded_below?")
        (("" (REPLACE -2) (("" (ASSERT) NIL)))))))))))
 (|glb_TCC1| "" (LEMMA "glb_exists")
  ((""
    (INST 1
     "LAMBDA (x: (bounded_below?)): epsilon! (y:real): greatest_lower_bound?(<=)(y,x)")
    (("1" (SKOLEM-TYPEPRED)
      (("1" (INST -3 "x!1")
        (("1" (LEMMA "epsilon_ax[real]")
          (("1" (INST?)
            (("1" (BETA) (("1" (REPLACE -4) (("1" (ASSERT) NIL)))))
             ("2" (HIDE -1 -3 2) (("2" (GRIND) NIL)))))))))))
     ("2" (HIDE -1)
      (("2" (SKOLEM-TYPEPRED)
        (("2" (HIDE -1) (("2" (GRIND) NIL)))))))))))
 (|glb_lem| "" (SKOLEM-TYPEPRED)
  (("" (GROUND)
    (("" (TYPEPRED "glb(SB!1)")
      (("1" (HIDE -3 -4 -5)
        (("1" (EXPAND "greatest_lower_bound?")
          (("1" (FLATTEN)
            (("1" (INST -2 "x!1")
              (("1" (INST -4 "glb(SB!1)")
                (("1" (ASSERT) (("1" (ASSERT) NIL)))))))))))))
       ("2" (SKOSIMP)
        (("2" (HIDE -1 -2 -3 -5 2) (("2" (GRIND) NIL)))))))))))
 (|axiom_of_archimedes| "" (LEMMA "real_complete")
  (("" (INST -1 "{x:real | integer?(x)}")
    (("1" (SPLIT)
      (("1" (SKOSIMP)
        (("1" (SKOSIMP)
          (("1" (EXPAND "least_upper_bound?")
            (("1" (FLATTEN)
              (("1" (EXPAND "upper_bound?")
                (("1" (INST -2 "y!1-1")
                  (("1" (SPLIT)
                    (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)
                     ("3" (SKOLEM-TYPEPRED)
                      (("3" (INST -2 "y!2 + 1")
                        (("1" (ASSERT) NIL)
                         ("2" (LEMMA "integers.closed_plus")
                          (("2" (INST -1 "1" "y!2")
                            (("1" (GRIND) NIL)
                             ("2" (GRIND) NIL)))))))))))))))))))))))
       ("2" (SKOSIMP)
        (("2" (INST 1 "x!1")
          (("2" (EXPAND "upper_bound?")
            (("2" (SKOSIMP)
              (("2" (INST 2 "y!1")
                (("1" (ASSERT) NIL)
                 ("2" (TYPEPRED "y!1")
                  (("2" (EXPAND "integer?")
                    (("2" (PROPAX) NIL)))))))))))))))))
     ("2" (HIDE 2)
      (("2" (GRIND)
        (("2" (INST -1 "0")
          (("2" (ASSERT) (("2" (GRIND) NIL))))))))))))))(|real_defs| (|abs_TCC1| "" (GRIND) NIL) (|abs_TCC2| "" (GRIND) NIL)
 (|abs_TCC3| "" (GRIND) NIL) (|abs_TCC4| "" (GRIND) NIL)
 (|abs_TCC5| "" (GRIND) NIL) (|abs_TCC6| "" (GRIND) NIL)
 (|abs_TCC7| "" (GRIND) NIL) (|max_TCC1| "" (GRIND) NIL)
 (|max_TCC2| "" (GRIND) NIL) (|min_TCC1| "" (GRIND) NIL)
 (|min_TCC2| "" (GRIND) NIL) (|max_TCC3| "" (GRIND) NIL)
 (|min_TCC3| "" (GRIND) NIL) (|max_TCC4| "" (GRIND) NIL)
 (|min_TCC4| "" (GRIND) NIL) (|max_TCC5| "" (GRIND) NIL)
 (|min_TCC5| "" (GRIND) NIL) (|max_TCC6| "" (GRIND) NIL)
 (|min_TCC6| "" (GRIND) NIL) (|max_TCC7| "" (GRIND) NIL)
 (|min_TCC7| "" (GRIND) NIL) (|max_TCC8| "" (GRIND) NIL)
 (|min_TCC8| "" (GRIND) NIL) (|max_TCC9| "" (GRIND) NIL)
 (|min_TCC9| "" (GRIND) NIL) (|max_TCC10| "" (GRIND) NIL)
 (|min_TCC10| "" (GRIND) NIL) (|max_TCC11| "" (GRIND) NIL)
 (|min_TCC11| "" (GRIND) NIL) (|max_TCC12| "" (GRIND) NIL)
 (|min_TCC12| "" (GRIND) NIL) (|max_TCC13| "" (GRIND) NIL)
 (|min_TCC13| "" (GRIND) NIL))(|naturalnumbers| (|naturalnumber_TCC1| "" (TCC :DEFS !) NIL)
 (|upto_TCC1| "" (TCC :DEFS !) NIL)
 (|plus_TCC1| "" (LEMMA "integers.closed_plus")
  (("" (SKOLEM 1 ("x!1" "y!1"))
    (("" (QUANT?) (("" (ASSERT) NIL)))))))
 (|times_TCC1| "" (LEMMA "rationals.times_TCC3")
  (("" (SKOSIMP*) (("" (INST?) NIL)))))
 (|pred_TCC1| "" (TCC :DEFS !) NIL)
 (|tilde_TCC1| "" (TCC :DEFS !) NIL)
 (|nat_induction| ""
  (LEMMA "wf_induction[nat, (LAMBDA (m,n:nat): m < n)]")
  (("1" (BETA)
    (("1" (SKOSIMP*)
      (("1" (INST -1 "p!1")
        (("1" (SPLIT)
          (("1" (INST -1 "i!1") NIL)
           ("2" (SKOSIMP*)
            (("2" (CASE "x!1 = 0")
              (("1" (ASSERT) NIL)
               ("2" (INST -1 "x!1 - 1")
                (("1" (INST -3 "x!1 - 1")
                  (("1" (ASSERT) NIL) ("2" (ASSERT) NIL)))
                 ("2" (ASSERT) NIL)))))))))))))))
   ("2" (DELETE 2) (("2" (LEMMA "wf_nat") (("2" (PROPAX) NIL)))))))
 (|NAT_induction| "" (LEMMA "nat_induction")
  (("" (SKOSIMP*)
    ((""
      (INST -1
       "(LAMBDA (n:nat): (FORALL (m:nat): m <= n IMPLIES p!1(m)))")
      (("" (BETA)
        (("" (SPLIT)
          (("1" (INST -1 "i!1")
            (("1" (INST -1 "i!1") (("1" (ASSERT) NIL)))))
           ("2" (SKOSIMP*)
            (("2" (INST -2 "0")
              (("2" (SPLIT)
                (("1" (ASSERT) NIL)
                 ("2" (SKOSIMP*) (("2" (ASSERT) NIL)))))))))
           ("3" (SKOSIMP*)
            (("3" (INST -3 "m!1")
              (("3" (ASSERT)
                (("3" (SKOSIMP*)
                  (("3" (INST -1 "k!1")
                    (("3" (ASSERT) NIL))))))))))))))))))))))(|integers| (|nonzero_integer_TCC1| "" (TCC :DEFS !) NIL)
 (SUBTYPE_TCC1 "" (TCC :DEFS !) NIL)
 (|upfrom_TCC1| "" (SUBTYPE-TCC) NIL)
 (|above_TCC1| "" (SUBTYPE-TCC) NIL)
 (|above_TCC2| "" (SUBTYPE-TCC) NIL)
 (|plus_TCC1| "" (LEMMA "closed_plus") (("" (PROPAX) NIL)))
 (|difference_TCC1| "" (SKOSIMP*)
  (("" (LEMMA "closed_minus") (("" (INST?) NIL)))))
 (|times_TCC1| "" (LEMMA "closed_times") (("" (PROPAX) NIL)))
 (|difference_TCC2| "" (SKOSIMP*) (("" (REWRITE "closed_neg") NIL)))
 (|difference_TCC3| "" (SKOSIMP*) (("" (ASSERT) NIL)))
 (|nonneg_int_TCC1| "" (TCC :DEFS !) NIL)
 (|nonpos_int_TCC1| "" (TCC :DEFS !) NIL)
 (|posint_TCC1| "" (TCC :DEFS !) NIL)
 (|posint_TCC2| "" (TCC :DEFS !) NIL)
 (|negint_TCC1| "" (TCC :DEFS !) NIL)
 (|negint_TCC2| "" (TCC :DEFS !) NIL)
 (SUBTYPE_TCC2 "" (TCC :DEFS !) NIL)
 (SUBTYPE_TCC3 "" (TCC :DEFS !) NIL)
 (SUBTYPE_TCC4 "" (TCC :DEFS !) NIL)
 (|times_TCC2| "" (SKOSIMP*) (("" (ASSERT) NIL)))
 (|plus_TCC2| "" (SKOSIMP*) (("" (ASSERT) NIL)))
 (|times_TCC3| "" (SKOSIMP)
  (("" (LEMMA "posreal_mult_closed")
    (("" (INST?) (("" (ASSERT) (("" (ASSERT) NIL)))))))))
 (|even_int_TCC1| "" (EXPAND "even?")
  (("" (INST 1 "0") (("" (ASSERT) NIL)))))
 (|odd_int_TCC1| "" (EXPAND "odd?")
  (("" (INST 1 "0") (("" (ASSERT) NIL)))))
 (SUBTYPE_TCC5 "" (TCC :DEFS EXPLICIT) NIL)
 (|plus_TCC3| "" (SKOSIMP)
  (("" (EXPAND "even?")
    (("" (TYPEPRED "x1!1")
      (("" (TYPEPRED "x2!1")
        (("" (EXPAND "even?")
          (("" (SKOSIMP)
            (("" (SKOSIMP)
              (("" (INST 1 "j!1+j!2")
                (("" (ASSERT) NIL)))))))))))))))))
 (|difference_TCC4| "" (SKOSIMP)
  (("" (TYPEPRED "x1!1")
    (("" (TYPEPRED "x2!1")
      (("" (EXPAND "even?")
        (("" (SKOSIMP*)
          (("" (INST 1 "j!2 - j!1") (("" (ASSERT) NIL)))))))))))))
 (|times_TCC4| "" (SKOSIMP*)
  (("" (TYPEPRED "x1!1")
    (("" (TYPEPRED "x2!1")
      (("" (EXPAND "even?")
        (("" (SKOSIMP*)
          (("" (INST 1 "2 * j!1 * j!2")
            (("" (ASSERT) NIL)))))))))))))
 (|plus_TCC4| "" (SKOSIMP*)
  (("" (TYPEPRED "x1!1")
    (("" (TYPEPRED "x2!1")
      (("" (EXPAND "odd?")
        (("" (EXPAND "even?")
          (("" (SKOSIMP*)
            (("" (INST 1 "j!1 + j!2 + 1")
              (("" (ASSERT) NIL)))))))))))))))
 (|difference_TCC5| "" (SKOSIMP*)
  (("" (TYPEPRED "x1!1")
    (("" (TYPEPRED "x2!1")
      (("" (EXPAND "even?")
        (("" (EXPAND "odd?")
          (("" (SKOSIMP*)
            (("" (INST 1 "j!2 - j!1")
              (("" (ASSERT) NIL)))))))))))))))
 (|times_TCC5| "" (SKOSIMP*)
  (("" (TYPEPRED "x1!1")
    (("" (TYPEPRED "x2!1")
      (("" (EXPAND "odd?")
        (("" (SKOSIMP*)
          (("" (INST 1 "j!1 + j!2 + 2 * j!1 * j!2")
            (("" (ASSERT) NIL)))))))))))))
 (|difference_TCC6| "" (SKOSIMP*)
  (("" (EXPAND "even?")
    (("" (TYPEPRED "x1!1")
      (("" (EXPAND "even?")
        (("" (SKOSIMP*)
          (("" (INST 1 "-j!1") (("" (ASSERT) NIL)))))))))))))
 (|difference_TCC7| "" (SKOSIMP*)
  (("" (TYPEPRED "x1!1")
    (("" (EXPAND "odd?")
      (("" (SKOSIMP*)
        (("" (INST 1 "-j!1 - 1") (("" (ASSERT) NIL))))))))))))(|rationals| (|nonzero_rational_TCC1| "" (TCC :DEFS !) NIL)
 (SUBTYPE_TCC1 "" (TCC :DEFS !) NIL)
 (|plus_TCC1| "" (LEMMA "closed_plus") (("" (PROPAX) NIL)))
 (|difference_TCC1| "" (SKOSIMP) (("" (REWRITE "closed_minus") NIL)))
 (|times_TCC1| "" (LEMMA "closed_times") (("" (PROPAX) NIL)))
 (|divide_TCC1| "" (SKOSIMP) (("" (REWRITE "closed_divides") NIL)))
 (|difference_TCC2| "" (SKOSIMP) (("" (REWRITE "closed_neg") NIL)))
 (|nonneg_rat_TCC1| "" (TCC :DEFS !) NIL)
 (|nonpos_rat_TCC1| "" (TCC :DEFS !) NIL)
 (|posrat_TCC1| "" (TCC :DEFS !) NIL)
 (|posrat_TCC2| "" (TCC :DEFS !) NIL)
 (|negrat_TCC1| "" (TCC :DEFS !) NIL)
 (|negrat_TCC2| "" (TCC :DEFS !) NIL)
 (SUBTYPE_TCC2 "" (TCC :DEFS !) NIL)
 (SUBTYPE_TCC3 "" (TCC :DEFS !) NIL)
 (SUBTYPE_TCC4 "" (TCC :DEFS !) NIL)
 (|times_TCC2| "" (SKOSIMP*)
  (("" (LEMMA "real_types.times_TCC2")
    (("" (INST?) (("" (ASSERT) NIL)))))))
 (|divide_TCC2| "" (LEMMA "times_TCC2")
  (("" (SKOSIMP)
    (("" (INST -1 "x1!1" "1/x2!1")
      (("1" (ASSERT) NIL)
       ("2" (CASE "x2!1 * (1/x2!1) = x2!1 * 0")
        (("1" (ASSERT) NIL)
         ("2" (CASE "1/x2!1 = 0")
          (("1" (REPLACE -1) (("1" (PROPAX) NIL)))
           ("2" (ASSERT) NIL)))))))))))
 (|difference_TCC3| "" (GRIND) NIL)
 (|plus_TCC2| "" (SKOSIMP*) (("" (ASSERT) NIL)))
 (|times_TCC3| "" (SKOSIMP*)
  (("" (REWRITE "real_types.times_TCC1") NIL)))
 (|divide_TCC3| "" (SKOSIMP*)
  (("" (REWRITE "real_types.divide_TCC1") NIL)))
 (|plus_TCC3| "" (SKOSIMP*) (("" (ASSERT) NIL)))
 (|times_TCC4| "" (SKOSIMP*) (("" (ASSERT) NIL)))
 (|divide_TCC4| "" (SKOSIMP)
  (("" (LEMMA "times_TCC4")
    (("" (INST -1 "x1!1" "1/x2!1")
      (("1" (ASSERT) NIL)
       ("2" (HIDE 2)
        (("2" (LEMMA "posreal_mult_closed")
          (("2" (INST -1 "x2!1" "-1/x2!1")
            (("2" (ASSERT)
              (("2" (ASSERT)
                (("2" (CASE "x2!1 * (1/x2!1) = x2!1 * 0")
                  (("1" (ASSERT)
                    (("1" (REWRITE "inverse_mult")
                      (("1" (ASSERT) NIL)))))
                   ("2" (CASE "1/x2!1 = 0")
                    (("1" (REPLACE -1) (("1" (PROPAX) NIL)))
                     ("2" (ASSERT) NIL))))))))))))))))))))))(|real_types| (|nonneg_real_TCC1| "" (GRIND) NIL)
 (|nonpos_real_TCC1| "" (GRIND) NIL) (|posreal_TCC1| "" (GRIND) NIL)
 (|posreal_TCC2| "" (TCC :DEFS !) NIL)
 (|negreal_TCC1| "" (GRIND) NIL)
 (|negreal_TCC2| "" (TCC :DEFS !) NIL)
 (SUBTYPE_TCC1 "" (TCC :DEFS !) NIL)
 (|nonneg_real_add_closed| "" (GRIND) NIL)
 (|nonpos_real_add_closed| "" (GRIND) NIL)
 (|negreal_add_closed| "" (GRIND) NIL)
 (|nonneg_real_mult_closed| "" (GRIND)
  (("" (CASE "nnx!1 = 0")
    (("1" (ASSERT) NIL)
     ("2" (CASE "nny!1 = 0")
      (("1" (ASSERT) NIL)
       ("2" (LEMMA "posreal_mult_closed")
        (("2" (INST?) (("2" (ASSERT) NIL)))))))))))
 (|plus_TCC1| "" (GRIND) NIL)
 (|times_TCC1| "" (GRIND)
  (("" (CASE "x1!1 = 0")
    (("1" (ASSERT) NIL)
     ("2" (CASE "x2!1 = 0")
      (("1" (ASSERT) NIL)
       ("2" (LEMMA "posreal_mult_closed")
        (("2" (INST?) (("2" (ASSERT) NIL)))))))))))
 (|divide_TCC1| "" (GRIND)
  (("" (CASE "x1!1 = 0")
    (("1" (ASSERT) NIL)
     ("2" (CASE "x2!1 * -(x1!1 / x2!1) > 0")
      (("1" (ASSERT) NIL)
       ("2" (ASSERT)
        (("2" (LEMMA "posreal_mult_closed")
          (("2" (HIDE 2 3)
            (("2" (INST?) (("2" (ASSERT) NIL)))))))))))))))
 (|times_TCC2| "" (GRIND)
  (("" (LEMMA "posreal_mult_closed")
    (("" (CASE "x1!1 > 0")
      (("1" (CASE "x2!1 > 0")
        (("1" (INST?) (("1" (ASSERT) NIL)))
         ("2" (INST -2 "x1!1" "-x2!1") (("2" (ASSERT) NIL)))))
       ("2" (CASE "x2!1 > 0")
        (("1" (INST -2 "-x1!1" "x2!1") (("1" (ASSERT) NIL)))
         ("2" (INST -1 "-x1!1" "-x2!1") (("2" (ASSERT) NIL)))))))))))
 (|divide_TCC2| "" (SKOSIMP)
  (("" (CASE "x1!1/x2!1 * x2!1 = 0 * x2!1")
    (("1" (HIDE -2)
      (("1" (REWRITE "div_def")
        (("1" (LEMMA "associative_mult")
          (("1" (INST -1 "x1!1" "1/x2!1" "x2!1")
            (("1" (REPLACE -1 :DIR RL)
              (("1" (HIDE -1)
                (("1" (LEMMA "commutative_mult")
                  (("1" (INST -1 "1/x2!1" "x2!1")
                    (("1" (REPLACE -1)
                      (("1" (HIDE -1)
                        (("1" (LEMMA "inverse_mult")
                          (("1" (INST -1 "x2!1")
                            (("1"
                              (REPLACE -1)
                              (("1"
                                (ASSERT)
                                NIL)))))))))))))))))))))))))))
     ("2" (REPLACE -1) (("2" (PROPAX) NIL)))))))
 (|difference_TCC1| "" (GRIND) NIL) (|plus_TCC2| "" (GRIND) NIL)
 (|times_TCC3| "" (GRIND)
  (("" (LEMMA "posreal_mult_closed")
    (("" (INST?) (("" (ASSERT) NIL)))))))
 (|divide_TCC3| "" (SKOSIMP*)
  (("" (LEMMA "divide_TCC1")
    (("" (INST?)
      (("" (ASSERT)
        (("" (LEMMA "divide_TCC2")
          (("" (INST?) (("" (ASSERT) NIL))))))))))))))(|real_axioms| (|commutative_add| "" (GRIND) NIL)
 (|associative_add| "" (GRIND) NIL) (|identity_add| "" (GRIND) NIL)
 (|inverse_add| "" (GRIND) NIL) (|minus_add| "" (GRIND) NIL)
 (|commutative_mult| "" (GRIND) NIL)
 (|associative_mult| "" (GRIND) NIL) (|identity_mult| "" (GRIND) NIL)
 (|inverse_mult| "" (GRIND) NIL) (|div_def| "" (GRIND) NIL)
 (|distributive| "" (GRIND) NIL)
 (|posreal_add_closed| "" (GRIND) NIL) (|posreal_neg| "" (GRIND) NIL)
 (|trichotomy| "" (GRIND) NIL) (|real_complete_TCC1| "" (GRIND) NIL))(|reals| (|nonzero_real_TCC1| "" (GRIND) NIL)
 (|reals_totally_ordered| "" (GRIND) NIL))(|numbers|)(|operator_defs|)(|relational_composition|)(|relation_defs|)(|function_props2|
 (|assoc| "" (SKOLEM 1 ("f!1" "g!1" "h!1"))
  (("" (EXPAND "o") (("" (PROPAX) NIL))))))(|function_props|
 (|image_composition| "" (GRIND)
  (("" (APPLY-EXTENSIONALITY) (("" (GRIND) NIL)))))
 (|preserves_composition| "" (GRIND) NIL)
 (|inverts_composition1| "" (GRIND) NIL)
 (|inverts_composition2| "" (GRIND) NIL))(|function_image| (|image_inverse_image| "" (GRIND) NIL)
 (|inverse_image_image| "" (GRIND) NIL)
 (|image_subset| "" (GRIND) NIL)
 (|inverse_image_subset| "" (GRIND) NIL)
 (|image_union| "" (GRIND)
  (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (GRIND) NIL)))))))
 (|image_intersection| "" (GRIND) NIL)
 (|inverse_image_union| "" (GRIND) (("" (APPLY-EXTENSIONALITY) NIL)))
 (|inverse_image_intersection| "" (GRIND)
  (("" (APPLY-EXTENSIONALITY) NIL)))
 (|inverse_image_complement| "" (GRIND)
  (("" (APPLY-EXTENSIONALITY) NIL))))(|function_inverse|
 (|surjective_inverse| "" (SKOSIMP)
  (("" (EXPAND "inverse")
    (("" (LEMMA "epsilon_ax[D]")
      (("" (INST -1 "LAMBDA (x:D): f!1(x) = y!1")
        (("" (BETA)
          (("" (PROP)
            (("1" (REPLACE -2)
              (("1" (REPLACE -1) (("1" (PROPAX) NIL)))))
             ("2" (TYPEPRED "f!1")
              (("2" (EXPAND "surjective?")
                (("2" (INST?) NIL)))))))))))))))))
 (|injective_inverse| "" (SKOSIMP)
  (("" (EXPAND "inverse")
    (("" (TYPEPRED "f!1")
      (("" (EXPAND "injective?")
        (("" (LEMMA "epsilon_ax[D]")
          (("" (INST -1 "LAMBDA (x:D): f!1(x) = y!1")
            (("" (PROP)
              (("1" (BETA)
                (("1" (REPLACE -3)
                  (("1" (INST?)
                    (("1" (REPLACE -1) (("1" (PROP) NIL)))))))))
               ("2" (BETA)
                (("2" (INST?)
                  (("2" (REPLACE -2)
                    (("2" (PROPAX) NIL)))))))))))))))))))))
 (|bijective_inverse| "" (SKOSIMP)
  (("" (SPLIT)
    (("1" (REWRITE "surjective_inverse")
      (("1" (TYPEPRED "f!1")
        (("1" (EXPAND "bijective?") (("1" (PROPAX) NIL)))))))
     ("2" (REWRITE "injective_inverse")
      (("2" (TYPEPRED "f!1")
        (("2" (EXPAND "bijective?") (("2" (PROPAX) NIL)))))))))))
 (|bij_inv_is_bij| "" (SKOSIMP*)
  (("" (EXPAND "bijective?")
    (("" (EXPAND "injective?")
      (("" (EXPAND "surjective?")
        (("" (FLATTEN)
          (("" (SPLIT)
            (("1" (SKOSIMP*)
              (("1" (LEMMA "bijective_inverse")
                (("1" (INST?)
                  (("1" (ASSERT)
                    (("1" (EXPAND "inverse" -1)
                      (("1" (LEMMA "epsilon_ax[D]")
                        (("1" (INST?)
                          (("1" (BETA)
                            (("1"
                              (SPLIT)
                              (("1" (ASSERT) NIL)
                               ("2" (INST -4 "x2!1") NIL)))))))))))))
                   ("2" (EXPAND "bijective?")
                    (("2" (EXPAND "injective?")
                      (("2" (ASSERT)
                        (("2" (REPLACE -2)
                          (("2" (EXPAND "surjective?")
                            (("2" (PROPAX) NIL)))))))))))))))))
             ("2" (SKOSIMP*)
              (("2" (INST 1 "f!1(y!1)")
                (("2" (REWRITE "injective_inverse")
                  (("2" (EXPAND "injective?")
                    (("2" (PROPAX) NIL)))))))))))))))))))))
 (|surj_right| "" (GRIND)
  (("" (LEMMA "epsilon_ax[D]")
    (("" (INST?)
      (("" (BETA)
        (("" (SPLIT) (("1" (PROPAX) NIL) ("2" (INST?) NIL)))))))))))
 (|inj_left| "" (SKOSIMP)
  (("" (PROP)
    (("1" (GRIND)
      (("1" (LEMMA "epsilon_ax[D]")
        (("1" (INST?)
          (("1" (BETA)
            (("1" (ASSERT) (("1" (INST 1 "x!1") NIL)))))))))))
     ("2" (EXPAND "left_inverse?")
      (("2" (EXPAND "inverse")
        (("2" (EXPAND "injective?")
          (("2" (SKOSIMP)
            (("2" (INST-CP -1 "x1!1")
              (("2" (INST -1 "x2!1")
                (("2" (ASSERT)
                  (("2" (REPLACE -3)
                    (("2" (ASSERT) NIL)))))))))))))))))))))
 (|inj_inv| "" (SKOSIMP)
  (("" (EXPAND "surjective?")
    (("" (EXPAND "injective?")
      (("" (EXPAND "inverse")
        (("" (SKOSIMP)
          (("" (INST-CP -1 "x1!1")
            (("" (INST -1 "x2!1")
              (("" (SKOSIMP)
                (("" (SKOSIMP)
                  (("" (LEMMA "epsilon_ax[D]")
                    (("" (INST-CP -1 "LAMBDA (x:D): f!1(x)=x1!1")
                      (("" (INST -1 "LAMBDA (x:D): f!1(x)=x2!1")
                        (("" (BETA)
                          (("" (PROP)
                            (("1"
                              (REPLACE -5)
                              (("1"
                                (REPLACE -1)
                                (("1" (PROPAX) NIL)))))
                             ("2" (INST?) NIL) ("3" (INST?) NIL)
                             ("4"
                              (INST?)
                              NIL)))))))))))))))))))))))))))))
 (|surj_inv| "" (SKOSIMP)
  (("" (EXPAND "surjective?")
    (("" (EXPAND "injective?")
      (("" (SKOSIMP)
        (("" (EXPAND "inverse")
          (("" (INST -1 "y!1" _)
            (("" (INST 1 "f!1(y!1)")
              ((""
                (INST -1 "(epsilon ! (x_5: D): f!1(x_5) = f!1(y!1))")
                (("" (PROP)
                  (("1" (REPLACE -1)
                    (("1" (REPLACE -1 :DIR RL)
                      (("1" (REPLACE -1 :DIR RL)
                        (("1" (PROPAX) NIL)))))))
                   ("2" (LEMMA "epsilon_ax[D]")
                    (("2" (INST?)
                      (("2" (BETA)
                        (("2" (PROP)
                          (("1" (REPLACE -1) (("1" (PROPAX) NIL)))
                           ("2" (INST 1 "y!1")
                            NIL))))))))))))))))))))))))))))(|sets_lemmas|
 (|extensionality| "" (SKOLEM!)
  (("" (FLATTEN)
    (("" (APPLY-EXTENSIONALITY)
      (("" (INST?)
        (("" (EXPAND "member")
          (("" (IFF) (("" (PROPAX) NIL)))))))))))))
 (|emptyset_is_empty?| "" (SKOLEM!)
  (("" (EXPAND "empty?")
    (("" (EXPAND "emptyset")
      (("" (EXPAND "member")
        (("" (PROP)
          (("1" (APPLY-EXTENSIONALITY)
            (("1" (INST?) (("1" (REPLACE 2) (("1" (PROPAX) NIL)))))))
           ("2" (SKOLEM!)
            (("2" (REPLACE -1)
              (("2" (BETA) (("2" (PROPAX) NIL)))))))))))))))))
 (|empty_no_members| "" (GRIND)
  (("" (EXPAND "member")
    (("" (EXPAND "emptyset") (("" (PROPAX) NIL)))))))
 (|nonempty_member| "" (TCC) NIL)
 (|fullset_member| "" (GRIND)
  (("" (EXPAND "member")
    (("" (EXPAND "fullset") (("" (PROPAX) NIL)))))))
 (|nonempty_exists| "" (EXPAND "nonempty?")
  (("" (EXPAND "empty?")
    (("" (EXPAND "member")
      (("" (SKOSIMP*)
        (("" (SPLIT)
          (("1" (SKOSIMP*) (("1" (INST * "x!1") NIL)))
           ("2" (FLATTEN)
            (("2" (SKOLEM * "x!1")
              (("2" (INST * "x!1")
                (("2" (ASSERT) NIL)))))))))))))))))
 (|subset_reflexive| "" (GRIND) NIL)
 (|subset_antisymmetric| "" (SKOSIMP)
  (("" (EXPAND "subset?")
    (("" (EXPAND "member")
      (("" (APPLY-EXTENSIONALITY)
        (("" (INST?)
          (("" (INST?)
            (("" (PROP)
              (("1" (IFF) (("1" (PROP) NIL)))
               ("2" (IFF) (("2" (PROP) NIL)))))))))))))))))
 (|subset_transitive| "" (GRIND) NIL)
 (|subset_partial_order| "" (EXPAND "partial_order?")
  (("" (EXPAND "preorder?")
    (("" (EXPAND "reflexive?")
      (("" (PROP)
        (("1" (SKOSIMP)
          (("1" (EXPAND "subset?")
            (("1" (EXPAND "member") (("1" (SKOSIMP) NIL)))))))
         ("2" (EXPAND "transitive?")
          (("2" (SKOSIMP)
            (("2" (EXPAND "subset?")
              (("2" (SKOSIMP)
                (("2" (INST?)
                  (("2" (INST?) (("2" (PROP) NIL)))))))))))))
         ("3" (EXPAND "antisymmetric?")
          (("3" (SKOSIMP)
            (("3" (EXPAND "subset?")
              (("3" (APPLY-EXTENSIONALITY)
                (("3" (INST?)
                  (("3" (INST?)
                    (("3" (EXPAND "member")
                      (("3" (IFF)
                        (("3" (PROP) NIL)))))))))))))))))))))))))
 (|subset_emptyset| "" (GRIND) NIL) (|subset_fullset| "" (GRIND) NIL)
 (|union_idempotent| "" (SKOSIMP)
  (("" (EXPAND "union")
    (("" (APPLY-EXTENSIONALITY)
      (("" (EXPAND "member") (("" (IFF) (("" (PROP) NIL)))))))))))
 (|union_commutative| "" (SKOSIMP)
  (("" (EXPAND "union")
    (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (PROP) NIL)))))))))
 (|union_associative| "" (SKOSIMP)
  (("" (EXPAND "union")
    (("" (APPLY-EXTENSIONALITY)
      (("" (EXPAND "member") (("" (IFF) (("" (PROP) NIL)))))))))))
 (|union_empty| "" (SKOSIMP)
  (("" (EXPAND "union")
    (("" (APPLY-EXTENSIONALITY)
      (("" (EXPAND "member")
        (("" (EXPAND "emptyset") (("" (PROPAX) NIL)))))))))))
 (|union_full| "" (SKOSIMP)
  (("" (EXPAND "fullset")
    (("" (EXPAND "union")
      (("" (APPLY-EXTENSIONALITY)
        (("" (EXPAND "member") (("" (PROPAX) NIL)))))))))))
 (|union_subset1| "" (SKOSIMP)
  (("" (EXPAND "subset?")
    (("" (EXPAND "union")
      (("" (SKOSIMP)
        (("" (EXPAND "member") (("" (PROP) NIL)))))))))))
 (|union_subset2| "" (SKOSIMP)
  (("" (EXPAND "subset?")
    (("" (EXPAND "union")
      (("" (APPLY-EXTENSIONALITY)
        (("" (INST?)
          (("" (IFF)
            (("" (EXPAND "member") (("" (PROP) NIL)))))))))))))))
 (|intersection_idempotent| "" (SKOSIMP)
  (("" (EXPAND "intersection")
    (("" (APPLY-EXTENSIONALITY)
      (("" (EXPAND "member") (("" (IFF) (("" (PROP) NIL)))))))))))
 (|intersection_commutative| "" (SKOSIMP)
  (("" (EXPAND "intersection")
    (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (PROP) NIL)))))))))
 (|intersection_associative| "" (SKOSIMP)
  (("" (EXPAND "intersection")
    (("" (APPLY-EXTENSIONALITY)
      (("" (EXPAND "member") (("" (IFF) (("" (PROP) NIL)))))))))))
 (|intersection_empty| "" (SKOSIMP)
  (("" (EXPAND "intersection")
    (("" (EXPAND "emptyset")
      (("" (APPLY-EXTENSIONALITY)
        (("" (EXPAND "member") (("" (PROPAX) NIL)))))))))))
 (|intersection_full| "" (SKOSIMP)
  (("" (EXPAND "intersection")
    (("" (EXPAND "fullset")
      (("" (EXPAND "member") (("" (APPLY-EXTENSIONALITY) NIL)))))))))
 (|intersection_subset1| "" (SKOSIMP)
  (("" (EXPAND "intersection")
    (("" (EXPAND "subset?")
      (("" (SKOSIMP)
        (("" (EXPAND "member") (("" (PROP) NIL)))))))))))
 (|intersection_subset2| "" (SKOSIMP)
  (("" (EXPAND "intersection")
    (("" (EXPAND "subset?")
      (("" (APPLY-EXTENSIONALITY)
        (("" (EXPAND "member")
          (("" (INST?) (("" (IFF) (("" (PROP) NIL)))))))))))))))
 (|distribute_intersection_union| "" (SKOSIMP)
  (("" (EXPAND "intersection")
    (("" (EXPAND "union")
      (("" (EXPAND "member")
        (("" (APPLY-EXTENSIONALITY)
          (("" (IFF) (("" (PROP) NIL)))))))))))))
 (|distribute_union_intersection| "" (SKOSIMP)
  (("" (EXPAND "intersection")
    (("" (EXPAND "union")
      (("" (EXPAND "member")
        (("" (APPLY-EXTENSIONALITY)
          (("" (IFF) (("" (PROP) NIL)))))))))))))
 (|complement_emptyset| "" (EXPAND "complement")
  (("" (EXPAND "emptyset")
    (("" (EXPAND "fullset")
      (("" (EXPAND "member") (("" (PROPAX) NIL)))))))))
 (|complement_fullset| "" (EXPAND "complement")
  (("" (EXPAND "emptyset")
    (("" (EXPAND "fullset")
      (("" (EXPAND "member") (("" (PROPAX) NIL)))))))))
 (|complement_complement| "" (SKOSIMP)
  (("" (EXPAND "complement")
    (("" (APPLY-EXTENSIONALITY)
      (("" (EXPAND "member") (("" (PROPAX) NIL)))))))))
 (|subset_complement| "" (SKOSIMP)
  (("" (EXPAND "complement")
    (("" (EXPAND "subset?")
      (("" (EXPAND "member")
        (("" (PROP)
          (("1" (SKOSIMP) (("1" (INST?) (("1" (PROP) NIL)))))
           ("2" (SKOSIMP)
            (("2" (INST?) (("2" (PROP) NIL)))))))))))))))
 (|demorgan1| "" (GRIND)
  (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (GRIND) NIL)))))))
 (|demorgan2| "" (GRIND)
  (("" (APPLY-EXTENSIONALITY) (("" (IFF) (("" (GRIND) NIL)))))))
 (|difference_emptyset1| "" (SKOSIMP)
  (("" (EXPAND "difference")
    (("" (EXPAND "emptyset")
      (("" (EXPAND "member") (("" (APPLY-EXTENSIONALITY) NIL)))))))))
 (|difference_emptyset2| "" (SKOSIMP)
  (("" (EXPAND "difference")
    (("" (EXPAND "emptyset")
      (("" (EXPAND "member") (("" (PROPAX) NIL)))))))))
 (|difference_fullset1| "" (SKOSIMP)
  (("" (EXPAND "difference")
    (("" (EXPAND "emptyset")
      (("" (EXPAND "fullset")
        (("" (EXPAND "member") (("" (PROPAX) NIL)))))))))))
 (|difference_fullset2| "" (SKOSIMP)
  (("" (EXPAND "difference")
    (("" (EXPAND "fullset")
      (("" (EXPAND "complement")
        (("" (APPLY-EXTENSIONALITY)
          (("" (EXPAND "member") (("" (PROPAX) NIL)))))))))))))
 (|difference_intersection| "" (SKOSIMP)
  (("" (EXPAND "difference")
    (("" (EXPAND "intersection")
      (("" (EXPAND "complement")
        (("" (EXPAND "member") (("" (PROPAX) NIL)))))))))))
 (|difference_difference1| "" (SKOSIMP)
  (("" (EXPAND "difference")
    (("" (EXPAND "member")
      (("" (EXPAND "union")
        (("" (EXPAND "member")
          (("" (APPLY-EXTENSIONALITY)
            (("" (IFF) (("" (PROP) NIL)))))))))))))))
 (|difference_difference2| "" (SKOSIMP)
  (("" (EXPAND "difference")
    (("" (EXPAND "union")
      (("" (EXPAND "intersection")
        (("" (EXPAND "member")
          (("" (APPLY-EXTENSIONALITY)
            (("" (IFF) (("" (PROP) NIL)))))))))))))))
 (|member_add| "" (SKOSIMP*)
  (("" (EXPAND "add")
    (("" (APPLY-EXTENSIONALITY)
      (("" (HIDE 2)
        (("" (IFF)
          (("" (EXPAND "member") (("" (GROUND) NIL)))))))))))))
 (|member_remove| "" (SKOSIMP*)
  (("" (APPLY-EXTENSIONALITY)
    (("" (HIDE 3)
      (("" (EXPAND "remove")
        (("" (EXPAND "member")
          (("" (IFF) (("" (GROUND) NIL)))))))))))))
 (|choose_rest_TCC1| "" (GRIND) NIL)
 (|choose_rest| "" (SKOSIMP*)
  (("" (APPLY-EXTENSIONALITY)
    (("1" (HIDE 3)
      (("1" (EXPAND "add")
        (("1" (HIDE 2)
          (("1" (IFF)
            (("1" (SPLIT)
              (("1" (FLATTEN)
                (("1" (EXPAND "member")
                  (("1" (SPLIT)
                    (("1" (ASSERT) NIL)
                     ("2" (EXPAND "rest")
                      (("2" (EXPAND "remove")
                        (("2" (FLATTEN)
                          (("2" (EXPAND "member")
                            (("2" (PROPAX) NIL)))))))))))))))
               ("2" (FLATTEN)
                (("2" (EXPAND "member")
                  (("2" (EXPAND "rest")
                    (("2" (EXPAND "remove")
                      (("2" (EXPAND "member")
                        (("2" (ASSERT) NIL)))))))))))))))))))))
     ("2" (EXPAND "nonempty?") (("2" (PROPAX) NIL)))))))
 (|choose_member| "" (GRIND)
  (("" (REWRITE "epsilon_ax[T]")
    (("1" (INST?) NIL) ("2" (INST 1 "x!1") NIL)))))
 (|choose_not_member| "" (SKOSIMP*)
  (("" (EXPAND "member")
    (("" (EXPAND "rest")
      (("" (ASSERT)
        (("" (EXPAND "remove") (("" (PROPAX) NIL)))))))))))
 (|rest_not_equal| "" (SKOSIMP)
  (("" (EXPAND "rest")
    (("" (REPLACE 1)
      (("" (EXPAND "remove")
        (("" (EXPAND "empty?")
          (("" (SKOSIMP)
            (("" (EXPAND "member")
              (("" (TYPEPRED "choose(a!1)")
                (("1" (REPLACE -3 -1 :DIR RL)
                  (("1" (BETA)
                    (("1" (FLATTEN)
                      (("1" (REPLACE -2) (("1" (PROPAX) NIL)))))))))
                 ("2" (GRIND) NIL)))))))))))))))))
 (|rest_member| "" (TCC :DEFS !) NIL)
 (|choose_add_TCC1| "" (TCC :DEFS EXPLICIT) NIL)
 (|choose_add| "" (GRIND)
  (("" (TYPEPRED " choose(add(x!1, a!1))")
    (("1" (EXPAND "add" -1 1)
      (("1" (EXPAND "member")
        (("1" (EXPAND "choose") (("1" (PROPAX) NIL)))))))
     ("2" (INST -1 "x!1") (("2" (FLATTEN) (("2" (PROPAX) NIL)))))))))
 (|choose_rest_or_TCC1| "" (TCC :DEFS !) NIL)
 (|choose_rest_or| "" (TCC :DEFS !) NIL)
 (|choose_singleton_TCC1| "" (TCC :DEFS !) NIL)
 (|choose_singleton| "" (SKOSIMP*)
  (("" (TYPEPRED "choose(singleton(x!1))")
    (("1" (EXPAND "singleton") (("1" (PROPAX) NIL)))
     ("2" (HIDE 2) (("2" (GRIND) NIL)))))))
 (|rest_singleton| "" (SKOSIMP*)
  (("" (APPLY-EXTENSIONALITY)
    (("" (HIDE 2)
      (("" (EXPAND "rest")
        (("" (EXPAND "singleton")
          (("" (EXPAND "remove")
            (("" (LIFT-IF)
              (("" (EXPAND "emptyset")
                (("" (PROP)
                  (("1" (EXPAND "empty?")
                    (("1" (INST -1 "x!1")
                      (("1" (EXPAND "member")
                        (("1" (PROPAX) NIL)))))))
                   ("2" (IFF)
                    (("2" (SPLIT)
                      (("1" (ASSERT)
                        (("1" (FLATTEN)
                          (("1" (EXPAND "member")
                            (("1"
                              (TYPEPRED "choose({y:T|y=x!1})")
                              (("1" (ASSERT) NIL)
                               ("2"
                                (HIDE -1 2 3)
                                (("2" (GRIND) NIL)))))))))))
                       ("2" (ASSERT) NIL)))))))))))))))))))))))
 (|rest_empty_lem| "" (SKOSIMP*)
  (("" (EXPAND "extend")
    (("" (APPLY-EXTENSIONALITY)
      (("1" (HIDE 3)
        (("1" (LIFT-IF)
          (("1" (EXPAND "singleton")
            (("1" (EXPAND "empty?")
              (("1" (SKOSIMP*)
                (("1" (EXPAND "member")
                  (("1" (SPLIT)
                    (("1" (FLATTEN)
                      (("1" (TYPEPRED "choose(a!1)")
                        (("1" (INST -4 "x!1")
                          (("1" (EXPAND "rest")
                            (("1"
                              (EXPAND "remove")
                              (("1"
                                (EXPAND "member")
                                (("1" (ASSERT) NIL)))))))))
                         ("2" (HIDE -1 -2 -3 2)
                          (("2" (GRIND) NIL)))))))
                     ("2" (FLATTEN)
                      (("2" (PROPAX) NIL)))))))))))))))))
       ("2" (SKOSIMP*)
        (("2" (EXPAND "nonempty?") (("2" (PROPAX) NIL))))))))))))(|sets|
 (|choose_TCC1| "" (SKOLEM-TYPEPRED)
  (("" (GRIND) (("" (INST 1 "x!1") NIL)))))
 (|choose_TCC2| "" (SKOLEM-TYPEPRED)
  (("" (GRIND)
    (("" (REWRITE "epsilon_ax[T]") (("" (INST 1 "x!1") NIL)))))))
 (|rest_TCC1| "" (SKOLEM!)
  (("" (FLATTEN) (("" (EXPAND "nonempty?") (("" (PROPAX) NIL))))))))(|epsilons|)(|measure_induction|
 (|measure_induction| ""
  (LEMMA "wf_induction[T,(LAMBDA (x, y: T): m(x) < m(y))]")
  (("1" (SKOSIMP*)
    (("1" (INST -1 "p!1")
      (("1" (SPLIT)
        (("1" (INST -1 "x!1") NIL)
         ("2" (BETA) (("2" (PROPAX) NIL)))))))))
   ("2" (HIDE 2)
    (("2" (EXPAND "well_founded?")
      (("2" (TYPEPRED "<")
        (("2" (EXPAND "well_founded?")
          (("2" (SKOSIMP*)
            (("2"
              (INST -1
               "(LAMBDA (y:M): (exists (z:T): m(z) = y AND p!1(z)))")
              (("2" (SPLIT)
                (("1" (SKOSIMP*)
                  (("1" (TYPEPRED "y!2")
                    (("1" (SKOSIMP*)
                      (("1" (INST 1 "z!1")
                        (("1" (SKOSIMP*)
                          (("1" (INST -3 "m(x!1)")
                            (("1" (ASSERT) NIL)
                             ("2"
                              (INST 1 "x!1")
                              (("2" (ASSERT) NIL)))))))))))))))
                 ("2" (BETA)
                  (("2" (INST 2 "y!1")
                    (("2" (SKOSIMP*)
                      (("2" (INST 1 "m(y!1)")
                        (("2" (INST 1 "y!1")
                          (("2" (ASSERT)
                            NIL))))))))))))))))))))))))))))(|wf_induction|
 (|wf_induction| "" (SKOSIMP)
  (("" (SKOSIMP)
    (("" (TYPEPRED "<")
      (("" (EXPAND "well_founded?")
        (("" (INST -1 "{z:T|NOT p!1(z)}")
          (("" (ASSERT)
            (("" (SPLIT)
              (("1" (SKOSIMP)
                (("1" (INST -2 "y!1")
                  (("1" (SPLIT)
                    (("1" (TYPEPRED "y!1") (("1" (PROPAX) NIL)))
                     ("2" (SKOSIMP)
                      (("2" (INST -2 "y!2") NIL)))))))))
               ("2" (INST 1 "x!1") NIL))))))))))))))))(|orders|)(|relations|)(|identity| (I_TCC1 "" (GRIND) NIL))(|extend_bool|)(|extend|
 (|restrict_extend| "" (GRIND) (("" (APPLY-EXTENSIONALITY) NIL))))(|restrict| (|injective_restrict| "" (GRIND) NIL))(|functions|
 (|extensionality| "" (SKOLEM!)
  (("" (FLATTEN) (("" (APPLY-EXTENSIONALITY) NIL)))))
 (|congruence| "" (GRIND) NIL)
 (|eta| "" (SKOLEM!) (("" (APPLY-EXTENSIONALITY) NIL))))(|if_props| (|lift_if1| "" (GRIND) NIL) (|lift_if2| "" (GRIND) NIL))(|equality_props| (|IF_true| "" (GRIND) NIL)
 (|IF_false| "" (GRIND) NIL) (|IF_same| "" (GRIND) NIL)
 (|reflexivity_of_equals| "" (SKOLEM!) NIL)
 (|transitivity_of_equals| "" (SKOLEM!)
  (("" (FLATTEN) (("" (REPLACE -1) (("" (PROPAX) NIL)))))))
 (|symmetry_of_equals| "" (SKOLEM!)
  (("" (FLATTEN) (("" (REPLACE -1) (("" (PROPAX) NIL))))))))(|exists1|
 (|unique_lem| "" (SKOLEM!)
  (("" (FLATTEN)
    (("" (EXPAND "unique?")
      (("" (SKOLEM!)
        (("" (FLATTEN)
          (("" (INST-CP -1 "x!1")
            (("" (INST -1 "y!1")
              (("" (INST - "x!1" "y!1")
                (("" (PROP) NIL)))))))))))))))))
 (|exists1_lem| "" (SKOLEM!)
  (("" (FLATTEN) (("" (EXPAND "exists1") (("" (PROP) NIL))))))))(|defined_types|)(|quantifier_props|
 (|not_exists| "" (SKOLEM!)
  (("" (IFF)
    (("" (PROP)
      (("1" (SKOLEM!) (("1" (INST?) NIL)))
       ("2" (SKOLEM!) (("2" (INST?) NIL)))))))))
 (|exists_not| "" (GRIND) NIL) (|exists_or| "" (GRIND) NIL)
 (|exists_implies| "" (GRIND) NIL) (|exists_and| "" (GRIND) NIL)
 (|not_forall| "" (GRIND) NIL) (|forall_not| "" (GRIND) NIL)
 (|forall_and| "" (GRIND) NIL) (|forall_or| "" (GRIND) NIL))(|xor_def| (|xor_def| "" (GRIND) NIL))(|boolean_props| (|bool_exclusive| "" (IFF) (("" (PROP) NIL)))
 (|bool_inclusive| "" (SKOLEM!)
  (("" (PROP) (("" (IFF) (("" (PROP) NIL)))))))
 (|not_def| "" (SKOLEM!)
  (("" (LIFT-IF)
    (("" (PROP)
      (("1" (IFF) (("1" (PROP) NIL)))
       ("2" (IFF) (("2" (PROP) NIL)))))))))
 (|and_def| "" (SKOLEM!) (("" (IFF) (("" (PROP) NIL)))))
 (|syand_def| "" (PROPAX) NIL)
 (|or_def| "" (SKOLEM!) (("" (IFF) (("" (PROP) NIL)))))
 (|implies_def| "" (SKOLEM!) (("" (IFF) (("" (PROP) NIL)))))
 (|syimplies_def| "" (PROPAX) NIL) (|when_def| "" (SKOLEM!) NIL)
 (|iff_def| "" (SKOLEM!) (("" (IFF) (("" (PROP) NIL)))))
 (|syiff_def| "" (PROPAX) NIL) (|excluded_middle| "" (GRIND) NIL))(|if_def|
 (IF_TCC1 "" (INST 1 "LAMBDA (x: [boolean, T, T]): PROJ_2(x)") NIL))(|notequal|)(|equalities|)(|booleans|)