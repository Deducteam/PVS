(stdlang)
(stdexc)
(stdcatch
 (catch_list_lift_TCC1 0
  (catch_list_lift_TCC1-1 nil 3729453539 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   shostak
   (catch_list_lift termination
    "stdcatch.catch_list_lift(stdcatch.r, stdcatch.f1, stdcatch.f2)"
    "nil"))))
(stdprog)
(stdglobal)
(stdpvs)
(stdstr
 (pad_TCC1 0
  (pad_TCC1-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak (pad subtype "(number_fields.-)(stdstr.n, 1)" "nat")))
 (pad_TCC2 0
  (pad_TCC2-1 nil 3729453539 ("" (termination-tcc) nil nil) nil shostak
   (pad termination
    "stdstr.pad((number_fields.-)(stdstr.n, 1), stdstr.s)" "nil"))))
(stdio)
(stdmath
 (SIN_TCC1 0
  (SIN_TCC1-1 nil 3729453539
   ("" (inst 1 "lambda (x: real): 0") nil nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak
   (SIN existence ""
    "[real -> {x: reals.real | booleans.AND(reals.<=(, x), reals.<=(x, 1))}]")))
 (RANDOM_TCC1 0
  (RANDOM_TCC1-1 nil 3729453539 ("" (inst 1 "0") nil nil)
   ((<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak
   (RANDOM existence "" "{y: real_types.nnreal | reals.<=(y, 1)}")))
 (NRANDOM_TCC1 0
  (NRANDOM_TCC1-1 nil 3729453539
   ("" (inst 1 "lambda (x: posnat): 0") nil nil)
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak
   (NRANDOM existence ""
    "[n: posnat -> {y: naturalnumbers.nat | reals.<(y, n)}]")))
 (SQRT_TCC1 0
  (SQRT_TCC1-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak (SQRT subtype "stdmath.x" "nnreal")))
 (LOG_TCC1 0
  (LOG_TCC1-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak (LOG subtype "stdmath.x" "posreal")))
 (TAN_TCC1 0
  (TAN_TCC1-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil))
   shostak (TAN subtype "stdmath.COS(stdmath.x)" "nznum"))))
(stdfmap
 (fmap_TCC1 0
  (fmap_TCC1-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Stream nonempty-type-decl nil stdio nil)
    (IStream_pred const-decl "[Stream -> boolean]" stdio nil)
    (IStream nonempty-type-from-decl nil stdio nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak (fmap subtype "(number_fields.-)(stdfmap.n, 1)" "nat")))
 (fmap_TCC2 0
  (fmap_TCC2-1 nil 3729453539 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (ClosedStream const-decl "ExceptionTag[string]" stdio nil)
    (emptystr const-decl "string" stdstr nil)
    (fname const-decl "string" stdio nil)
    (make_exc const-decl "Exception" stdexc nil)
    (eof? const-decl "bool" stdio nil))
   shostak
   (fmap termination
    "stdfmap.fmap(stdfmap.f, stdfmap.fread, stdfmap.nt, stdfmap.st, (number_fields.-)(stdfmap.n, 1))"
    "nil"))))
(stdindent)
(stdtokenizer
 (set_error_TCC1 0
  (set_error_TCC1-1 nil 3729453539 ("" (subtype-tcc) nil nil) nil
   shostak
   (set_error subtype
    "stdtokenizer.t WITH [`error := stdtokenizer.code]"
    "stdtokenizer.TokenizerOfLength(stdtokenizer.t`length)")))
 (last_token_TCC1 0
  (last_token_TCC1-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (last_token subtype "(number_fields.-)(stdtokenizer.t`pos, 1)"
    "nat")))
 (peek_TCC1 0
  (peek_TCC1-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (peek subtype
    "(number_fields.-)((number_fields.+)(stdtokenizer.t`pos, stdtokenizer.n), 1)"
    "nat")))
 (tostr_TCC1 0
  (tostr_TCC1-1 nil 3729453539 ("" (subtype-tcc) nil nil) nil shostak
   (tostr subtype
    "(number_fields.-)(stdtokenizer.t`length, stdtokenizer.i)"
    "naturalnumber")))
 (tostr_TCC2 0
  (tostr_TCC2-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Tokenizer type-eq-decl nil stdtokenizer nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (tostr subtype "(number_fields.+)(stdtokenizer.i, 1)"
    "naturalnumbers.upto(stdtokenizer.t`length)")))
 (tostr_TCC3 0
  (tostr_TCC3-1 nil 3729453539 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (tostr termination
    "stdtokenizer.tostr(stdtokenizer.t, (number_fields.+)(stdtokenizer.i, 1))"
    "nil")))
 (tostr_TCC4 0
  (tostr_TCC4-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (Tokenizer type-eq-decl nil stdtokenizer nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (tostr subtype "(number_fields.+)(stdtokenizer.i, 1)"
    "naturalnumbers.upto(stdtokenizer.t`length)")))
 (tostr_TCC5 0
  (tostr_TCC5-1 nil 3729453539 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (tostr termination
    "stdtokenizer.tostr(stdtokenizer.t, (number_fields.+)(stdtokenizer.i, 1))"
    "nil")))
 (add_token_TCC1 0
  (add_token_TCC1-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (add_token subtype "stdtokenizer.t`pos"
    "naturalnumbers.upto((number_fields.+)(1, stdtokenizer.n))")))
 (line_tokenizer_TCC1 0
  (line_tokenizer_TCC1-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Stream nonempty-type-decl nil stdio nil)
    (IStream_pred const-decl "[Stream -> boolean]" stdio nil)
    (IStream nonempty-type-from-decl nil stdio nil)
    (fopenin const-decl "IStream" stdio nil))
   shostak
   (line_tokenizer subtype "stdtokenizer.myt`pos"
    "naturalnumbers.upto((number_fields.+)(1, stdtokenizer.n))")))
 (line_tokenizer_TCC2 0
  (line_tokenizer_TCC2-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((fopenin const-decl "IStream" stdio nil)
    (skip const-decl "void" stdlang nil)
    (fclose const-decl "void" stdio nil)
    (prog const-decl
          "T"
     stdprog nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (line_tokenizer subtype
    "stdprog[[Tokenizer, numfield]].prog(stdio.fclose(stdtokenizer.g), (stdtokenizer.nt, (number_fields.+)(stdtokenizer.l, 1)))"
    "[Tokenizer, nat]")))
 (consume_TCC1 0
  (consume_TCC1-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eot? const-decl "bool" stdtokenizer nil)
    (NoError const-decl "nat" stdtokenizer nil))
   shostak
   (consume subtype
    "(number_fields.+)(stdtokenizer.t`pos, stdtokenizer.n)"
    "naturalnumbers.upto(stdtokenizer.t`length)")))
 (go_back_TCC1 0
  (go_back_TCC1-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (go_back subtype "(number_fields.-)(stdtokenizer.t`pos, 1)"
    "naturalnumbers.upto(stdtokenizer.t`length)")))
 (pos_go_next 0
  (pos_go_next-1 nil 3729458312 ("" (grind) nil nil)
   ((NoError const-decl "nat" stdtokenizer nil)
    (eot? const-decl "bool" stdtokenizer nil)
    (EndOfTokenizer const-decl "nat" stdtokenizer nil)
    (consume const-decl "TokenizerOfLength(t`length)" stdtokenizer
     nil))
   shostak))
 (accept_word_TCC1 0
  (accept_word_TCC1-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (eot? const-decl "bool" stdtokenizer nil)
    (NoError const-decl "nat" stdtokenizer nil))
   shostak
   (accept_word subtype "(number_fields.+)(stdtokenizer.t`pos, 1)"
    "naturalnumbers.upto(stdtokenizer.t`length)")))
 (pos_accept_word 0
  (pos_accept_word-1 nil 3729458331 ("" (grind) nil nil)
   ((NoError const-decl "nat" stdtokenizer nil)
    (eot? const-decl "bool" stdtokenizer nil)
    (EndOfTokenizer const-decl "nat" stdtokenizer nil)
    (ExpectingWord const-decl "nat" stdtokenizer nil)
    (ExpectingTestWord const-decl "nat" stdtokenizer nil)
    (accept_word const-decl "TokenizerOfLength(t`length)" stdtokenizer
     nil))
   shostak))
 (accept_int_TCC1 0
  (accept_int_TCC1-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (eot? const-decl "bool" stdtokenizer nil)
    (NoError const-decl "nat" stdtokenizer nil))
   shostak
   (accept_int subtype "(number_fields.+)(stdtokenizer.t`pos, 1)"
    "naturalnumbers.upto(stdtokenizer.t`length)")))
 (pos_accept_int 0
  (pos_accept_int-1 nil 3729458350 ("" (grind) nil nil)
   ((NoError const-decl "nat" stdtokenizer nil)
    (eot? const-decl "bool" stdtokenizer nil)
    (EndOfTokenizer const-decl "nat" stdtokenizer nil)
    (ExpectingInt const-decl "nat" stdtokenizer nil)
    (ExpectingTestInt const-decl "nat" stdtokenizer nil)
    (accept_int const-decl "TokenizerOfLength(t`length)" stdtokenizer
     nil))
   shostak))
 (accept_real_TCC1 0
  (accept_real_TCC1-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (eot? const-decl "bool" stdtokenizer nil)
    (NoError const-decl "nat" stdtokenizer nil))
   shostak
   (accept_real subtype "(number_fields.+)(stdtokenizer.t`pos, 1)"
    "naturalnumbers.upto(stdtokenizer.t`length)")))
 (pos_accept_real 0
  (pos_accept_real-1 nil 3729458358 ("" (grind) nil nil)
   ((NoError const-decl "nat" stdtokenizer nil)
    (eot? const-decl "bool" stdtokenizer nil)
    (EndOfTokenizer const-decl "nat" stdtokenizer nil)
    (ExpectingReal const-decl "nat" stdtokenizer nil)
    (ExpectingTestReal const-decl "nat" stdtokenizer nil)
    (accept_real const-decl "TokenizerOfLength(t`length)" stdtokenizer
     nil))
   shostak))
 (std_mssg_TCC1 0
  (std_mssg_TCC1-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (FileNotFound const-decl "nat" stdtokenizer nil))
   shostak
   (std_mssg subtype
    "(number_fields.-)((number_fields.+)(stdtokenizer.t`pos, 1), 1)"
    "nat")))
 (std_mssg_TCC2 0
  (std_mssg_TCC2-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (InvalidToken const-decl "nat" stdtokenizer nil)
    (EndOfTokenizer const-decl "nat" stdtokenizer nil)
    (FileNotFound const-decl "nat" stdtokenizer nil))
   shostak
   (std_mssg subtype
    "(number_fields.-)((number_fields.+)(stdtokenizer.t`pos, 1), 1)"
    "nat")))
 (std_mssg_TCC3 0
  (std_mssg_TCC3-1 nil 3729453539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ExpectingWord const-decl "nat" stdtokenizer nil)
    (InvalidToken const-decl "nat" stdtokenizer nil)
    (EndOfTokenizer const-decl "nat" stdtokenizer nil)
    (FileNotFound const-decl "nat" stdtokenizer nil))
   shostak
   (std_mssg subtype
    "(number_fields.-)((number_fields.+)(stdtokenizer.t`pos, 1), 1)"
    "nat")))
 (std_mssg_TCC4 0
  (std_mssg_TCC4-1 nil 3729453540 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ExpectingTestWord const-decl "nat" stdtokenizer nil)
    (ExpectingWord const-decl "nat" stdtokenizer nil)
    (InvalidToken const-decl "nat" stdtokenizer nil)
    (EndOfTokenizer const-decl "nat" stdtokenizer nil)
    (FileNotFound const-decl "nat" stdtokenizer nil))
   shostak
   (std_mssg subtype
    "(number_fields.-)((number_fields.+)(stdtokenizer.t`pos, 1), 1)"
    "nat")))
 (std_mssg_TCC5 0
  (std_mssg_TCC5-1 nil 3729453540 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ExpectingInt const-decl "nat" stdtokenizer nil)
    (ExpectingTestWord const-decl "nat" stdtokenizer nil)
    (ExpectingWord const-decl "nat" stdtokenizer nil)
    (InvalidToken const-decl "nat" stdtokenizer nil)
    (EndOfTokenizer const-decl "nat" stdtokenizer nil)
    (FileNotFound const-decl "nat" stdtokenizer nil))
   shostak
   (std_mssg subtype
    "(number_fields.-)((number_fields.+)(stdtokenizer.t`pos, 1), 1)"
    "nat")))
 (std_mssg_TCC6 0
  (std_mssg_TCC6-1 nil 3729453540 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ExpectingTestInt const-decl "nat" stdtokenizer nil)
    (ExpectingInt const-decl "nat" stdtokenizer nil)
    (ExpectingTestWord const-decl "nat" stdtokenizer nil)
    (ExpectingWord const-decl "nat" stdtokenizer nil)
    (InvalidToken const-decl "nat" stdtokenizer nil)
    (EndOfTokenizer const-decl "nat" stdtokenizer nil)
    (FileNotFound const-decl "nat" stdtokenizer nil))
   shostak
   (std_mssg subtype
    "(number_fields.-)((number_fields.+)(stdtokenizer.t`pos, 1), 1)"
    "nat")))
 (std_mssg_TCC7 0
  (std_mssg_TCC7-1 nil 3729453540 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ExpectingReal const-decl "nat" stdtokenizer nil)
    (ExpectingTestInt const-decl "nat" stdtokenizer nil)
    (ExpectingInt const-decl "nat" stdtokenizer nil)
    (ExpectingTestWord const-decl "nat" stdtokenizer nil)
    (ExpectingWord const-decl "nat" stdtokenizer nil)
    (InvalidToken const-decl "nat" stdtokenizer nil)
    (EndOfTokenizer const-decl "nat" stdtokenizer nil)
    (FileNotFound const-decl "nat" stdtokenizer nil))
   shostak
   (std_mssg subtype
    "(number_fields.-)((number_fields.+)(stdtokenizer.t`pos, 1), 1)"
    "nat")))
 (std_mssg_TCC8 0
  (std_mssg_TCC8-1 nil 3729453540 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ExpectingTestReal const-decl "nat" stdtokenizer nil)
    (ExpectingReal const-decl "nat" stdtokenizer nil)
    (ExpectingTestInt const-decl "nat" stdtokenizer nil)
    (ExpectingInt const-decl "nat" stdtokenizer nil)
    (ExpectingTestWord const-decl "nat" stdtokenizer nil)
    (ExpectingWord const-decl "nat" stdtokenizer nil)
    (InvalidToken const-decl "nat" stdtokenizer nil)
    (EndOfTokenizer const-decl "nat" stdtokenizer nil)
    (FileNotFound const-decl "nat" stdtokenizer nil))
   shostak
   (std_mssg subtype
    "(number_fields.-)((number_fields.+)(stdtokenizer.t`pos, 1), 1)"
    "nat")))
 (tokenizer2str_TCC1 0
  (tokenizer2str_TCC1-1 nil 3729453540 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (tokenizer2str subtype "0"
    "naturalnumbers.upto(stdtokenizer.t`length)"))))
(stdpvsio)
(stdsys)

