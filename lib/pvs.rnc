# RELAX NG compact version of the PVS abstract syntax.
# Check it using
# java -jar ~/src/jing-20030619/bin/jing.jar -c ~/pvs4.1/lib/pvs.rnc foo.xml

# This essentially reflects the classes that define the abstract syntax of
# PVS in Common Lisp.  The CLOS classes are more expressive, so this is not
# a trivial mapping.  Relax NG does not actually have a notion of classes.

# The grammar generally is broken into the following sections:
#   Modules
#   Declarations
#   Type Expressions
#   Expressions
#   Names
#   Proofs

# Many of the classes and attributes of PVSAS exist solely to be able to
# maintain the form of expressions given by the user.  For example, the "="
# in the expression "x = 1" would internally be treated as
# "equalities[numbers.number].=".  This is handled by having a name with
# elements for id, theory-id, actuals, and mappings, as well as a resolution
# that gives the complete form.  Thus the prettyprinter uses the name parts,
# while, e.g., equality testing is done with the resolutions.

# Another use of slots in the PVS classes is to cache values that are costly
# to compute.  For the most part, these are not represented in the RNC

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace xlink = "http://www.w3.org/1999/xlink"

start = [ xlink:type = "simple" ]
  file-content | theory-content | recursive-type | top-proofstate

### Modules

file-content =
  element pvs-file {top-level-content+}

top-level-content = theory-content | recursive-type

theory-content =
  element theory
    {commonattrs,
     id,
     theory-formals-content?,
     assuming-part?,
     theory-part?,
     exporting-content?}

# Recursive types can occur at the top level, or as a declaration.  The
# latter are inline-datatypes, and are the same except that formals are not
# allowed.

recursive-type = datatype-content | codatatype-content

datatype-content =
  element datatype
    {commonattrs,
     id,
     theory-formals-content?,
     importings,
     constructors}

codatatype-content =
  element codatatype
    {commonattrs,
     id,
     theory-formals-content?,
     importings,
     constructors}

constructors = constructor-content+

constructor-content =
  element constructor
    {commonattrs,
     ordnumattr,
     id,
     accessors-content?,
     recognizer-content,
     subtype-id-content?}

ordnumattr =
  attribute ordnum {xsd:integer}?

recognizer-content =
  element recognizer {identifier-token}

accessors-content =
  element accessors {accessor-content+}

subtype-id-content =
  element subtype-id {id}

accessor-content =
  element accessor
    {commonattrs,
     id,
     type-expr}

theory-formals-content =
  element theory-formals {formal*}

formal = importing-content
       | formal-type-decl-content
       | formal-subtype-decl-content
       | formal-const-decl-content
       | formal-theory-decl-content

formal-type-decl-content =
  element formal-type-decl {commonattrs, chainattr, id, nonempty-content}

formal-subtype-decl-content =
  element formal-subtype-decl
   {commonattrs, chainattr, id, nonempty-content, type-expr, type-expr}

formal-const-decl-content =
  element formal-const-decl {id, typed-declaration}

formal-theory-decl-content =
  element formal-theory-decl {commonattrs, chainattr, theory-name-content}

theory-name-content =
  element theory-name {theory-name}

theory-name = id,
              actuals-content?,
              dactuals-content?,
              library-id-content?,
              mappings-content?

actuals-content =
  element actuals {(expr | type-expr | theory-name)+}

actual-content =
  element actual {expr | type-expr | theory-name}

dactuals-content =
  element dactuals {(expr | type-expr | theory-name)+}

dactual-content =
  element dactual {expr | type-expr | theory-name}

library-id-content =
  element library-id {id}

mappings-content =
  element mappings {mapping+}

mapping = mapping-subst-content | mapping-rename-content

mapping-def-content =
  element mapping-def {mapping-lhs-content, mapping-rhs-content}

mapping-subst-content =
  element mapping-subst {mapping-lhs-content, mapping-rhs-content}

mapping-rename-content =
  element mapping-rename {mapping-lhs-content, mapping-rhs-content}

mapping-lhs-content =
  element mapping-lhs {name}

mapping-rhs-content =
  element mapping-rhs {expr-content | type-content | theory-name-content}

importings = importing-content*

importing-content =
  element importing
    {commonattrs,
     chainattr,
     theory-name}

exporting-content =
  element exporting
    {commonattrs,
     exporting-names?,
     exporting-but-names?,
     exporting-kind,
     exporting-theory-names?}

exporting-names =
  element exporting-names {names}

exporting-but-names =
  element exporting-but-names {names}

exporting-kind =
  element exporting-kind {"nil" | "all" | "closure" | "default"}

exporting-theory-names =
  element exporting-theory-names {theory-names}

theory-names = theory-name-content+

assuming-part =
  element assuming {assuming-decl+}

assuming-decl = theory-decl | assumption-content

assumption-content =
  element assumption {formula-decl-attr, id, declaration-attrs, expr}

theory-part = theory-decl+

### Declarations

theory-decl =
   importing-content
 | judgement-decl
 | conversion-content
 | auto-rewrite-content
 | lib-decl-content
 | theory-decl-content
 | type-decl-content
 | enumtype-decl-content
 | type-from-decl-content
 | type-def-decl-content
 | var-decl-content
 | const-decl-content
 | macro-decl-content
 | def-decl-content
 | ind-decl-content
 | coind-decl-content
 | formula-decl-content
 | axiom-decl-content
 | tcc-decl-content
 | inline-recursive-type

decl-formals-content =
   element decl-formals {formal*}

judgement-decl =
   subtype-judgement-content
 | number-judgement-content
 | name-judgement-content
 | application-judgement-content
 | expr-judgement-content
 | recursive-judgement-content

# Order of type-exprs is: declared-subtype, subtype, declared-type, type
subtype-judgement-content =
  element subtype-judgement
   {commonattrs, id?, type-expr, type-expr, type-expr, type-expr}

number-judgement-content =
  element number-judgement {commonattrs, id?, number-expr-content, type-expr, type-expr}

name-judgement-content =
  element name-judgement {commonattrs, id?, name-expr-content, type-expr, type-expr}

application-judgement-content =
   element application-judgement
   {commonattrs, id?, decl-formals-content?, name-expr-content,
      arg-formals-content?, type-expr, type-expr}

expr-judgement-content =
   element expr-judgement
   {commonattrs, id?, decl-formals-content?, name-expr-content,
      arg-formals-content?, expr, type-expr, type-expr}

recursive-judgement-content =
   element recursive-judgement
   {commonattrs, id?, decl-formals-content?, name-expr-content,
      arg-formals-content?, type-expr, type-expr}

conversion-content =
   element conversion-decl
   {conversion-kind-content, declaration-attrs, conversion-attrs, expr}

conversion-attrs =
   attribute key
   {string "CONVERSION" | string "CONVERSION+" |string "CONVERSION-"}

conversion-kind-content =
   element kind {string "add" | string "remove"}

auto-rewrite-content =
  element auto-rewrite
   {declaration-attrs, auto-rewrite-attr?, auto-rewrite-kind, rewrite-name-content+}

auto-rewrite-kind =
   element kind
   {string "add" | string "remove"}

rewrite-name-content =
   element rewrite-name
   {commonattrs, name, rewrite-name-kind?, rewrite-name-spec?, resolution?}

rewrite-name-spec =
   element rewrite-name-spec {type-expr | formula-name}

rewrite-name-kind =
   element kind {string "lazy" | string "eager" | string "macro"}

lib-decl-content =
  element lib-decl {commonattrs, id, path-content}

path-content =
   element path {string}

theory-decl-content =
  element theory-decl {id, typed-declaration, theory-name}

type-decl-content =
  element type-decl
    # The type-value is the given type, the type-expr is its canonical form
    #                              type-value  type-expr
    {type-decl-attrs, decl-formals-content?, id, nonempty-content,
       declaration-attrs}

nonempty-content =
   element nonempty-p {xsd:boolean}

type-from-decl-content =
   element type-from-decl
   {type-decl-attrs, declaration-attrs, id, decl-formals-content?,
      arg-formals-content?, type-expr, type-expr}

var-decl-content =
  element var-decl {id, typed-declaration}

const-decl-content =
  element const-decl {id, decl-formals-content?, arg-formals-content?, typed-declaration, expr?}

arg-formals-content =
   element arg-formals {bindings-content+}

macro-decl-content =
  element macro-decl {id, decl-formals-content?, arg-formals-content?, typed-declaration, expr?}

def-decl-content =
   element def-decl
   {id, decl-formals-content?, arg-formals-content?, typed-declaration,
      def-expr, measure-expr?, order-expr?}

def-expr = expr

measure-expr = expr

order-expr = expr

ind-decl-content =
  element ind-decl
   {id, decl-formals-content?, arg-formals-content?, typed-declaration, expr}

coind-decl-content =
  element coind-decl
   {id, decl-formals-content?, arg-formals-content?, typed-declaration, expr}

formula-decl-content =
  element formula-decl
   {formula-decl-attr, id, declaration-attrs, decl-formals-content?, expr}

axiom-decl-content =
  element axiom-decl
   {formula-decl-attr, id, declaration-attrs, decl-formals-content?, expr}

tcc-decl-content =
  element tcc-decl
   {formula-decl-attr, id, declaration-attrs, decl-formals-content?, expr}

formula-decl-attr =
   attribute kind {formula-name}

formula-name =
   "assumption" | "axiom" | "challenge" | "claim" |
   "conjecture" | "corollary" | "fact" | "formula" | "law" |
   "lemma" | "obligation" | "postulate" | "proposition" |
   "sublemma" | "theorem"

inline-recursive-type = inline-datatype-content | inline-codatatype-content

inline-datatype-content =
   element inline-datatype
   {commonattrs, id, decl-formals-content?, constructors}

inline-codatatype-content =
   element inline-codatatype
   {commonattrs, id, decl-formals-content?, constructors}

enumtype-decl-content =
   element enumtype-decl {declaration-attrs, id, enum-elts-content}

enum-elts-content =
   element enum-elts {id+}

declaration-attrs =
  commonattrs, chainattr?, semicolonattr?

type-decl =
  id, declaration-attrs

type-def-decl-content =
   element type-def-decl {commonattrs, type-def-decl}

type-def-decl =
   type-decl-attrs, id, arg-formals-content?, arg-formals-content?, type-expr, type-expr, contains-content?

type-decl-attrs =
  attribute nonempty-type {boolean}?

contains-content =
  element contains
    {expr}
  
typed-declaration =
  declaration-attrs, declared-type, type-expr

declared-type = type-expr  

### Type Expressions

type-content =
   element type {type-expr}

type-expr = type-name-content
          | type-application-content          
          | expr-as-type-content
          | setsubtype-content
          | function-type-content
          | tuple-type-content
          | cotuple-type-content
          | record-type-content

type-name-content =
  element type-name {commonattrs, name, resolution?}

type-application-content =
  element type-application
   {commonattrs, type-name-content, expr+}

type-parameters-content =
  element type-parameters {expr+}

expr-as-type-content =
  element expr-as-type {commonattrs, expr, type-expr?}

setsubtype-content =
  element setsubtype {commonattrs, type-expr, expr}

function-type-content =
  element function-type {commonattrs, funtype-attrs, domain, type-expr}

funtype-attrs =
   attribute keyword {"ARRAY" | "FUNCTION"}?

domain = type-expr | binding-content

tuple-type-content =
  element tuple-type {commonattrs, domain+}

cotuple-type-content =
  element cotuple-type {type-expr+}

record-type-content =
  element record-type {commonattrs, field-decl-content+}

field-decl-content =
  element field-decl {commonattrs, id, type-expr}


# Expressions

expr-content =
  element expr {exprattrs, expr}

exprattrs =
  commonattrs,
  attribute parens {xsd:integer}?

expr = name-expr-content
     | varname-expr-content
     | number-expr-content
     | string-expr-content
     | list-expr-content
     | record-expr-content
     | tuple-expr-content
     | proj-expr-content
     | field-appl-expr-content
     | proj-appl-expr-content
     | application-expr-content
     | coercion-expr-content
     | if-expr-content
     | lambda-expr-content
     | exists-expr-content
     | forall-expr-content
     | set-expr-content
     | let-expr-content
     | update-expr-content
     | cases-expr-content
     | cond-expr-content
     | table-expr-content

# Keep the type - it may be derived from the resolution, but requires
# substitution
name-expr-content =
   element name-expr {exprattrs, name, type-expr?, resolution?}

varname-expr-content =
   element varname-expr {exprattrs, id, type-expr}

number-expr-content =
  element number-expr {exprattrs, xsd:integer}

string-expr-content =
  element string-expr {exprattrs, string}

list-expr-content =
  element list-expr {exprattrs, expr+}

record-expr-content =
  element record-expr {exprattrs, assignment-content+}

assignments-content =
  element assignments {assignment-content+}

assignment-content =
  element assignment {commonattrs, assignment-args-content, expr}

assignment-args-content =
  element assignment-args {assignment-arg+}

assignment-arg =
  expr | field-assign-content | proj-assign-content

field-assign-content =
  element field-assign {commonattrs, id}

proj-assign-content =
  element proj-assign {commonattrs, xsd:integer}

tuple-expr-content =
  element tuple-expr {commonattrs, expr+}

tuple-content =
  element tuple {expr+}

proj-expr-content =
  element proj-expr {exprattrs, xsd:integer}

field-appl-expr-content =
  element field-appl-expr {exprattrs, id, actuals-content?, dactuals-content?, expr}
  
proj-appl-expr-content =
  element proj-appl-expr {exprattrs, expr, index}

index =
  element index {xsd:integer}

application-expr-content =
  element application {exprattrs, applicationattrs, expr, expr}

applicationattrs =
  attribute infix {boolean}?

coercion-expr-content =
  element coercion-expr {exprattrs, expr-content, type-content}

if-expr-content =
  element if-expr {exprattrs, expr-content, expr-content, expr-content}

lambda-expr-content =
   # declared-type and type-expr for return-type
  element lambda-expr {exprattrs, bindings-content, declared-type?, type-expr?, expr}

exists-expr-content =
  element exists-expr {exprattrs, bindings-content, expr}

forall-expr-content =
  element forall-expr {exprattrs, bindings-content, expr}

bindings-list-content =
  element bindings-list {bindings-content+}

bindings-content =
  element bindings {binding-content+}

binding-content =
  element binding {declaration-attrs, binding-attr, id, type-expr}

binding-attr =
  attribute id { xsd:ID }?,
  attribute parens {xsd:integer}?

set-expr-content =
  element set-expr {exprattrs, bindings-content, expr-content}

let-expr-content =
  element let-expr {exprattrs, let-bindings-content, expr-content}

let-bindings-content =
  element let-bindings {let-binding-content+}

let-binding-content =
  element let-binding {binding-content, expr}

update-expr-content =
  element update-expr {exprattrs, expr, assignments-content}

cases-expr-content =
  element cases-expr {exprattrs, expr, selection-content+}

selections-content =
  element selections {selection-content+}

# constructor, args, expression
selection-content =
  element selection {commonattrs, expr, bindings-content?, expr}

cond-expr-content =
  element cond-expr {exprattrs, cond-content+, cond-else-content?}

cond-content =
   element cond {expr, expr}

cond-else-content =
   element cond-else {expr}

# row-expr, col-expr, row-headings, col-headings, table-entries
# all but the table-entries may be omitted
table-expr-content =
  element table-expr {exprattrs,
                      table-heading-expr-content, table-heading-expr-content,
                      table-headings-content, table-headings-content,
                      table-entries-content}

table-heading-expr-content =
  element table-heading-expr {expr?}

table-headings-content =
  element table-headings {expr*}

table-entries-content =
  element table-entries {row-entries-content+}

row-entries-content =
  element row-entries {expr+}

### Names

names = name+

name = id, theory-id?, library-id?, actuals-content?, dactuals-content?,
       mappings-content?, target?

theory-id = element theory-id {identifier-token}

library-id = element library-id {identifier-token}

target = element target {theory-name}

resolution =
  element resolution {theory-name-content, decl-index}

#declref = element declref {xsd:anyURI}

### Proofstates

top-proofstate =
   element top-proofstate {decl-index, proofstate-content}

proofstate = element proofstate {proofstate-content}

proofstate-content =
   attribute label {text}?,
   attribute comment {text}?,
   attribute status-flag {text}?,
   element rule {rule-content}?,
   element xrule {rule-content}?,
   element sequent {formula}*,
   element subgoal {proofstate}?,
   element done-subgoals {proofstate}*,
   element pending-subgoals {proofstate}*,
   element remaining-subgoals {proofstate}*

formula =
   element formula {expr}

rule-content =
   id,
   element rule-args {rule-arg-content}*

rule-arg-content =
   step | element steps {step}* |
   expr | element exprs {expr}* |
   type-expr | element type-exprs {type-expr}* |
   theory-name | element theory-names {theory-name}* |
   text

step =
   element step {text} | id

### Tokens

id = element id {identifier-token}

boolean = "true" | "false"

identifiers-content =
  element identifiers {commonattrs, identifier-content+}

identifier-content =
  element identifier {commonattrs, identifier-token}

# \p{L} = letters, \i = letters and '_', \d = digits, \? = '?'
identifier-token = xsd:token
#  {pattern = "(\p{L}[\i\d\?]*)|([$&@^~=/\+\-\*<>][^\p{L}\d\(\)\[\]\{\}%,\.:;#'!\?_\|\s]*)"}

### Common Attributes

commonattrs =
  attribute place {place-string}?

chainattr =
  attribute chain-p {boolean}?

semicolonattr =
  attribute semi-colon-p {boolean}

auto-rewrite-attr =
   attribute key
     {string "AUTO_REWRITE" | string "AUTO_REWRITE+" | string "AUTO_REWRITE-"}

place-string = xsd:string {pattern = "\d+ \d+ \d+ \d+"}

## Links

decl-index = element index {xsd:integer}

# attlist.declref &=
#   [ a:defaultValue = "simple" ] attribute xlink:type { "simple" }?,
#   attribute xlink:href { text }?,
#   attribute xlink:role { text }?,
#   attribute xlink:arcrole { text }?,
#   attribute xlink:title { text }?,
#   attribute xlink:show { "new" | "replace" | "embed" | "other" | "none" }?,
#   attribute xlink:actuate { "onLoad" | "onRequest" | "other" | "none" }?

any =
  (element * {
     attribute * { text }*,
     any
   }
   | text)*
