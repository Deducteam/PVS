(bv_arith_minus_rules
 (bv_assoc_obliviation 0
  (bv_assoc_obliviation-1 nil 3341601201 3341601255
   ("" (skolem!)
    (("" (rewrite "bv_add_assoc")
      (("" (rewrite "bv2nat_inj")
        (("" (hide 2)
          (("" (rewrite "bv_add")
            (("" (rewrite "bv_add")
              (("" (rewrite "bv2nat_minus_bv")
                (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bv_add_assoc formula-decl nil bv_arith_nat nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (rng_2s_comp type-eq-decl nil bv_int nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}"
       bv_arithmetic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (bv2nat_minus_bv formula-decl nil bv_arithmetic nil)
    (bv_add formula-decl nil bv_arith_nat nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat_inj formula-decl nil bv_nat nil))
   53610 2330 t shostak))
 (bv_neg_identity 0
  (bv_neg_identity-1 nil 3341601267 3341601285
   ("" (skolem!) (("" (rewrite "bv_double_neg") nil nil)) nil) proved
   ((bv_double_neg formula-decl nil bv_arithmetic nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   17762 270 t shostak))
 (bv_sub_normalization 0
  (bv_sub_normalization-1 nil 3341601288 3341601299
   ("" (expand "-") (("" (propax) nil nil)) nil) proved
   ((- const-decl "bvec[N]" bv_arithmetic nil)) 10593 280 t shostak))
 (bv_neg_distribution 0
  (bv_neg_distribution-1 nil 3341601301 3341601378
   ("" (skolem!) (("" (rewrite "bv_neg_distrib") nil nil)) nil) proved
   ((bv_neg_distrib formula-decl nil bv_arithmetic nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   76508 2960 t shostak))
 (bv_plus_neg_distrib 0
  (bv_plus_neg_distrib-1 nil 3341601380 3341601453
   ("" (skolem!)
    (("" (rewrite "bv2nat_inj")
      (("" (hide 2)
        (("" (rewrite "bv_unary_minus")
          (("" (rewrite "bv_unary_minus")
            (("" (rewrite "bv_plus")
              (("" (rewrite "bv_add_2_consts")
                (("" (rewrite "bv_plus")
                  (("" (rewrite "bv2nat_NOT")
                    (("" (rewrite "bv2nat_NOT")
                      (("" (rewrite "bv_plus")
                        (("" (assert)
                          (("" (rewrite "mod_of_mod_neg")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bv2nat_inj formula-decl nil bv_nat nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (rng_2s_comp type-eq-decl nil bv_int nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}"
       bv_arithmetic nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (bv_unary_minus formula-decl nil bv_arithmetic nil)
    (NOT const-decl "bvec[N]" bv_bitwise nil)
    (bv_plus formula-decl nil bv_arith_nat nil)
    (mod_of_mod_neg formula-decl nil mod nil)
    (bv2nat_NOT formula-decl nil bv_arithmetic nil)
    (bv_add_2_consts formula-decl nil bv_arith_nat nil))
   72753 3650 t shostak))
 (bv_sub_identity_R 0
  (bv_sub_identity_R-1 nil 3341601455 3341601506
   ("" (skolem!)
    (("" (rewrite "bv2nat_inj")
      (("" (rewrite "bv_add")
        (("" (rewrite "bv2nat_minus_bv")
          (("" (rewrite "bv2nat_fill_F") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bv2nat_inj formula-decl nil bv_nat nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (rng_2s_comp type-eq-decl nil bv_int nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}"
       bv_arithmetic nil)
    (below type-eq-decl nil nat_types nil)
    (fill const-decl "bit" bv nil)
    (FALSE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (bv2nat_minus_bv formula-decl nil bv_arithmetic nil)
    (bv2nat_fill_F formula-decl nil bv_nat nil)
    (bv_add formula-decl nil bv_arith_nat nil))
   51269 1370 t shostak))
 (bv_sub_identity_L 0
  (bv_sub_identity_L-1 nil 3341601517 3341601545
   ("" (skolem!)
    (("" (rewrite "bv_add_comm")
      (("" (rewrite "bv_sub_identity_R") nil nil)) nil))
    nil)
   proved
   ((bv_add_comm formula-decl nil bv_arith_nat nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (rng_2s_comp type-eq-decl nil bv_int nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}"
       bv_arithmetic nil)
    (below type-eq-decl nil nat_types nil)
    (fill const-decl "bit" bv nil)
    (FALSE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (bv_sub_identity_R formula-decl nil bv_arith_minus_rules nil))
   27971 650 t shostak))
 (bv_fill_increment_R 0
  (bv_fill_increment_R-1 nil 3341601549 3341601628
   ("" (skolem!)
    (("" (rewrite "bv2nat_inj")
      (("" (rewrite "bv_add")
        (("" (rewrite "bv2nat_minus_bv")
          (("" (rewrite "bv2nat_fill_T")
            (("" (assert)
              (("" (lift-if)
                (("" (assert)
                  (("" (rewrite "bv_plus1")
                    (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bv2nat_inj formula-decl nil bv_nat nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (rng_2s_comp type-eq-decl nil bv_int nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}"
       bv_arithmetic nil)
    (below type-eq-decl nil nat_types nil)
    (fill const-decl "bit" bv nil)
    (TRUE const-decl "bool" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (bv2nat_minus_bv formula-decl nil bv_arithmetic nil)
    (bv_plus1 formula-decl nil bv_arith_nat nil)
    (bv2nat_fill_T formula-decl nil bv_nat nil)
    (bv_add formula-decl nil bv_arith_nat nil))
   79484 2430 t shostak))
 (bv_fill_increment_L 0
  (bv_fill_increment_L-1 nil 3341601643 3341601660
   ("" (skolem!)
    (("" (rewrite "bv_add_comm")
      (("" (rewrite "bv_fill_increment_R") nil nil)) nil))
    nil)
   proved
   ((bv_add_comm formula-decl nil bv_arith_nat nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (rng_2s_comp type-eq-decl nil bv_int nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}"
       bv_arithmetic nil)
    (below type-eq-decl nil nat_types nil)
    (fill const-decl "bit" bv nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (bv_fill_increment_R formula-decl nil bv_arith_minus_rules nil))
   17109 620 t shostak))
 (bv_not_normalization 0
  (bv_not_normalization-1 nil 3341601663 3341601701
   ("" (skolem!)
    (("" (rewrite "bv_unary_minus")
      (("" (assert)
        (("" (rewrite "bv_add_2_consts")
          (("" (rewrite "bv_plus0") nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((bv_unary_minus formula-decl nil bv_arithmetic nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (bv_add_2_consts formula-decl nil bv_arith_nat nil)
    (NOT const-decl "bvec[N]" bv_bitwise nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (bv_plus0 formula-decl nil bv_arith_nat nil))
   38100 1210 t shostak)))

