(bv_caret_concat (caret_fill_TCC1 0 (caret_fill_TCC1-1 nil 3249241288 3249242867 ("" (subtype-tcc) nil nil) proved nil 286 140 nil nil)) (caret_fill_TCC2 0 (caret_fill_TCC2-1 nil 3249241288 3249242867 ("" (subtype-tcc) nil nil) proved nil 285 130 nil nil)) (caret_fill 0 (caret_fill-1 nil 3249241288 3249242869 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil)))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (<= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 1653 780 nil nil)) (caret_concat_bot_TCC1 0 (caret_concat_bot_TCC1-1 nil 3249241288 3249242869 ("" (ground) nil nil) proved nil 290 130 nil nil)) (caret_concat_bot 0 (caret_concat_bot-1 nil 3249241288 3249242871 ("" (skosimp*) (("" (expand "^") (("" (apply-extensionality 1) (("" (hide 2) (("" (expand "o ") (("" (propax) nil)))))))))) nil) proved ((^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (j!1 skolem-const-decl "upto(i!1)" bv_caret_concat nil) (i!1 skolem-const-decl "below(m!1 + n!1)" bv_caret_concat nil) (n!1 skolem-const-decl "posnat" bv_caret_concat nil) (m!1 skolem-const-decl "posnat" bv_caret_concat nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1611 780 nil nil)) (caret_concat_top_TCC1 0 (caret_concat_top_TCC1-1 nil 3249241288 3249242872 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 596 260 nil nil)) (caret_concat_top_TCC2 0 (caret_concat_top_TCC2-1 nil 3249241288 3249242872 ("" (skosimp*) (("" (assert) nil)) nil) proved nil 280 100 nil nil)) (caret_concat_top_TCC3 0 (caret_concat_top_TCC3-1 nil 3249241288 3249242873 ("" (skosimp*) (("" (assert) nil)) nil) proved nil 319 150 nil nil)) (caret_concat_top 0 (caret_concat_top-1 nil 3249241288 3249242875 ("" (skosimp*) (("" (expand "^") (("" (apply-extensionality 1) (("" (hide 2) (("" (expand "o ") (("" (propax) nil)))))))))) nil) proved ((^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (j!1 skolem-const-decl "upto(i!1)" bv_caret_concat nil) (i!1 skolem-const-decl "below(m!1 + n!1)" bv_caret_concat nil) (n!1 skolem-const-decl "posnat" bv_caret_concat nil) (m!1 skolem-const-decl "posnat" bv_caret_concat nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1642 820 nil nil)) (caret_concat_all_TCC1 0 (caret_concat_all_TCC1-1 nil 3249241288 3249242875 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 585 280 nil nil)) (caret_concat_all_TCC2 0 (caret_concat_all_TCC2-1 nil 3249241288 3249242876 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 628 270 nil nil)) (caret_concat_all_TCC3 0 (caret_concat_all_TCC3-1 nil 3249241288 3249242876 ("" (skosimp*) (("" (assert) nil)) nil) proved nil 231 80 nil nil)) (caret_concat_all_TCC4 0 (caret_concat_all_TCC4-1 nil 3249241288 3249242876 ("" (skosimp*) (("" (assert) nil)) nil) proved nil 82 70 nil nil)) (caret_concat_all_TCC5 0 (caret_concat_all_TCC5-1 nil 3249241288 3249242877 ("" (skosimp*) (("" (assert) nil)) nil) proved nil 330 150 nil nil)) (caret_concat_all_TCC6 0 (caret_concat_all_TCC6-1 nil 3249241288 3249242877 ("" (skosimp*) (("" (assert) nil)) nil) proved nil 260 100 nil nil)) (caret_concat_all_TCC7 0 (caret_concat_all_TCC7-1 nil 3249241288 3249242877 ("" (grind) nil nil) proved nil 304 140 nil nil)) (caret_concat_all 0 (caret_concat_all-1 nil 3249241288 3249242882 ("" (skosimp*) (("" (expand "o ") (("" (expand "^") (("" (case "i!1 - j!1 + 1 = i!1 + 1 - j!1") (("1" (apply-extensionality 1) (("1" (hide 2) (("1" (lift-if) (("1" (ground) nil))))) ("2" (hide 2) (("2" (skosimp*) (("2" (assert) nil))))) ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil))))) ("4" (hide 2) (("4" (skosimp*) (("4" (assert) nil))))))) ("2" (hide 2) (("2" (assert) nil)))))))))) nil) proved ((O const-decl "bvec[n + m]" bv_concat_def nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (j!1 skolem-const-decl "upto(i!1)" bv_caret_concat nil) (i!1 skolem-const-decl "below(m!1 + n!1)" bv_caret_concat nil) (n!1 skolem-const-decl "posnat" bv_caret_concat nil) (m!1 skolem-const-decl "posnat" bv_caret_concat nil) (bit type-eq-decl nil bit nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (bvec type-eq-decl nil bv nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)) 4057 1890 nil nil)) (bv_decomposition_TCC1 0 (bv_decomposition_TCC1-1 nil 3249241288 3249242882 ("" (subtype-tcc) nil nil) proved nil 40 40 nil nil)) (bv_decomposition_TCC2 0 (bv_decomposition_TCC2-1 nil 3249241288 3249242882 ("" (subtype-tcc) nil nil) proved nil 193 50 nil nil)) (bv_decomposition_TCC3 0 (bv_decomposition_TCC3-1 nil 3249241288 3249242882 ("" (subtype-tcc) nil nil) proved nil 41 30 nil nil)) (bv_decomposition_TCC4 0 (bv_decomposition_TCC4-1 nil 3249241288 3249242882 ("" (subtype-tcc) nil nil) proved nil 36 40 nil nil)) (bv_decomposition_TCC5 0 (bv_decomposition_TCC5-1 nil 3249241288 3249242883 ("" (subtype-tcc) nil nil) proved nil 216 60 nil nil)) (bv_decomposition 0 (bv_decomposition-1 nil 3249241288 3249242884 ("" (skosimp*) (("" (apply-extensionality 1) (("" (hide 2) (("" (expand "o ") (("" (expand "^") (("" (propax) nil)))))))))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (> const-decl "bool" reals nil) (above nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 984 470 nil nil)) (caret_concat_join_TCC1 0 (caret_concat_join_TCC1-1 nil 3249241288 3249242884 ("" (subtype-tcc) nil nil) proved nil 304 150 nil nil)) (caret_concat_join_TCC2 0 (caret_concat_join_TCC2-1 nil 3249241288 3249242885 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil nat_types nil)) 594 280 nil nil)) (caret_concat_join_TCC3 0 (caret_concat_join_TCC3-1 nil 3249241288 3249242885 ("" (subtype-tcc) nil nil) proved nil 584 270 nil nil)) (caret_concat_join_TCC4 0 (caret_concat_join_TCC4-1 nil 3249241288 3249242886 ("" (subtype-tcc) nil nil) proved nil 338 180 nil nil)) (caret_concat_join 0 (caret_concat_join-1 nil 3249241288 3249242889 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (<= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil nat_types nil) (upto nonempty-type-eq-decl nil nat_types nil) (below type-eq-decl nil naturalnumbers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (j1!1 skolem-const-decl "upto[i1!1]" bv_caret_concat nil) (n!1 skolem-const-decl "posnat" bv_caret_concat nil) (i2!1 skolem-const-decl "below[n!1]" bv_caret_concat nil) (j2!1 skolem-const-decl "upto[i2!1]" bv_caret_concat nil) (i1!1 skolem-const-decl "below[n!1]" bv_caret_concat nil)) 3105 1520 nil nil)) (concat_bottom_TCC1 0 (concat_bottom_TCC1-1 nil 3249241288 3249242889 ("" (assert) nil nil) proved nil 36 30 nil nil)) (concat_bottom_TCC2 0 (concat_bottom_TCC2-1 nil 3249241288 3249242890 ("" (assert) nil nil) proved nil 180 30 nil nil)) (concat_bottom 0 (concat_bottom-1 nil 3249241288 3249242890 ("" (skosimp*) (("" (expand "^") (("" (expand "o") (("" (apply-extensionality 1) nil)))))) nil) proved ((^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (O const-decl "bvec[n + m]" bv_concat_def nil)) 555 210 nil nil)) (concat_top_TCC1 0 (concat_top_TCC1-1 nil 3249241288 3249242890 ("" (assert) nil nil) proved nil 122 120 nil nil)) (concat_top_TCC2 0 (concat_top_TCC2-1 nil 3249241288 3249242891 ("" (assert) nil nil) proved nil 265 110 nil nil)) (concat_top 0 (concat_top-1 nil 3249241288 3249242891 ("" (skosimp*) (("" (expand "o") (("" (expand "^") (("" (apply-extensionality 1) nil)))))) nil) proved ((O const-decl "bvec[n + m]" bv_concat_def nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)) 582 270 nil nil)))
