(BitvectorUtil (bvec_induction 0 (bvec_induction-1 nil 3249114866 3249242700 ("" (skolem!) (("" (flatten) (("" (case "FORALL(n:nat) : FORALL (bv: bvec[N]): bv2nat(bv) = n IMPLIES p!1(bv)") (("1" (skosimp*) (("1" (inst - "bv2nat(bv!1)") (("1" (inst - "bv!1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (induct "n") (("1" (skosimp*) (("1" (rewrite "bv2nat_eq0") nil nil)) nil) ("2" (skosimp*) (("2" (lemma "bv_minus1[N]") (("2" (inst - "bv!1") (("2" (assert) (("2" (replace -3) (("2" (assert) (("2" (inst - "bv!1 - 1") (("2" (assert) (("2" (inst - "bv!1 - 1") (("2" (assert) (("2" (lemma "bv_add_2_consts[N]") (("2" (inst - "bv!1" "-1" "1") (("2" (expand "-" -6) (("2" (replace -1) (("2" (hide -1) (("2" (assert) (("2" (lemma "bv_plus0[N]") (("2" (inst - "bv!1" "0") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((- const-decl "bvec[N]" bv_arith_nat nil) (bv_add_2_consts formula-decl nil bv_arith_nat nil) (bv_plus0 formula-decl nil bv_arith_nat nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (bv_minus1 formula-decl nil bv_arith_nat nil) (bv2nat_eq0 formula-decl nil bv_nat nil) (nat_induction formula-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" BitvectorUtil nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (PRED type-eq-decl nil defined_types nil)) 1616 800 nil nil)) (plus_min_zero_TCC1 0 (plus_min_zero_TCC1-1 nil 3249114866 3249242701 ("" (use "N_size") (("" (assert) nil nil)) nil) proved ((N_size formula-decl nil BitvectorUtil nil)) 187 40 nil nil)) (plus_min_zero 0 (plus_min_zero-1 nil 3249114866 3249242702 ("" (use "N_size") (("" (skosimp*) (("" (case "bv2nat[N](bv!1 + (-bv!1)) = 0") (("1" (lemma "bv2nat_eq0[N]") (("1" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (rewrite "bv_add[N]") (("2" (rewrite "bv2nat_minus_bv[N]") (("2" (reduce) nil nil)) nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil) proved ((bv2nat_minus_bv formula-decl nil bv_arithmetic nil) (bv_add formula-decl nil bv_arith_nat nil) (bv2nat_eq0 formula-decl nil bv_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" BitvectorUtil nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (- const-decl "[numfield -> numfield]" number_fields nil) (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}" bv_arithmetic nil) (N_size formula-decl nil BitvectorUtil nil)) 1244 550 nil nil)) (min_fill_F 0 (min_fill_F-1 nil 3249114866 3249242703 ("" (use "N_size") (("" (lemma "bv_sub_identity_L") (("" (inst - "N" "fill[N](FALSE)") (("1" (rewrite "bv_add_fill_F[N]") nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved ((bv_sub_identity_L formula-decl nil bv_arith_minus_rules nil) (bv_add_fill_F formula-decl nil bv_arith_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (- const-decl "[numfield -> numfield]" number_fields nil) (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}" bv_arithmetic nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" BitvectorUtil nil) (N_size formula-decl nil BitvectorUtil nil)) 655 350 nil nil)) (inc_zero_TCC1 0 (inc_zero_TCC1-1 nil 3249114866 3249242703 ("" (use "N_size") (("" (assert) nil nil)) nil) proved ((N_size formula-decl nil BitvectorUtil nil)) 32 30 nil nil)) (inc_zero 0 (inc_zero-1 nil 3249114866 3249242709 ("" (use "N_size") (("" (skosimp*) (("" (prop) (("1" (lemma "bv_plus1[N]") (("1" (inst - "bv!1") (("1" (lift-if) (("1" (split -) (("1" (flatten) (("1" (lemma "bv2nat_eq0[N]") (("1" (inst - "bv!1+1") (("1" (assert) (("1" (replace -1) (("1" (expand "fill") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (hide 1) (("2" (case-replace "N=1") (("1" (grind) nil nil) ("2" (lemma "bv2nat_lem") (("2" (inst-cp - "N" "bv!1") (("1" (inst - "N" "bv!1+1") (("1" (assert) (("1" (replace*) (("1" (hide -1 -2) (("1" (expand "^" -1 1) (("1" (expand "b2n") (("1" (expand "^" -1 2) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "bv2nat[N](bv!1 + 1) = bv2nat[N](LAMBDA (i: below(N)): (i = 0) OR bv!1(i))") (("1" (use "bv2nat_inj[N]") (("1" (assert) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (case-replace "bv2nat[N](bv!1 + 1) = bv2nat[N](bv!1) + 1") (("1" (hide -1) (("1" (expand "bv2nat") (("1" (case "FORALL(n:below(N+1)) : n > 0 IMPLIES 1 + bv2nat_rec(n, bv!1) =
                                                              bv2nat_rec(n, LAMBDA (i: below(N)): (i = 0) OR bv!1(i))") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (hide 2) (("2" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (case-replace "jb!1=0") (("1" (grind) nil nil) ("2" (assert) (("2" (expand "bv2nat_rec" +) (("2" (replace -2) (("2" (hide -2) (("2" (assert) (("2" (expand "^") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "bv!1+1") (("2" (typepred "mod(1 + bv2nat(bv!1), exp2(N))") (("2" (expand "abs") (("2" (assert) (("2" (case "bv2nat(bv!1) < exp2(N)-1") (("1" (assert) (("1" (expand "mod") (("1" (assert) (("1" (case-replace "floor((1 + bv2nat(bv!1)) / exp2(N)) = 0") (("1" (assert) nil nil) ("2" (hide -2 -3 -4 2) (("2" (case "floor((1 + bv2nat(bv!1)) / exp2(N)) < 1") (("1" (assert) nil nil) ("2" (hide 2) (("2" (case "(1 + bv2nat(bv!1)) / exp2(N) < 1") (("1" (typepred "floor((1 + bv2nat(bv!1)) / exp2(N))") (("1" (assert) (("1" (name-replace "tmp" "floor((1 + bv2nat(bv!1)) / exp2(N))") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (lemma "div_mult_pos_lt1") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (typepred "bv2nat(bv!1)") (("2" (case "bv2nat(bv!1) = exp2(N) - 1") (("1" (hide -2 1) (("1" (rewrite "bv2nat_eq_max") (("1" (expand "fill") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((OR const-decl "[bool, bool -> bool]" booleans nil) (bv2nat_inj formula-decl nil bv_nat nil) (bv2nat_eq_max formula-decl nil bv_nat nil) (posreal nonempty-type-eq-decl nil real_types nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (integer nonempty-type-from-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (below_induction formula-decl nil bounded_nat_inductions nil) (N formal-const-decl "nat" BitvectorUtil nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv_plus1 formula-decl nil bv_arith_nat nil) (bv2nat_rec def-decl "nat" bv_nat nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (above nonempty-type-eq-decl nil integers nil) (bv2nat_lem formula-decl nil bv_arith_caret nil) (= const-decl "[T, T -> boolean]" equalities nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}" bv_arith_nat nil) (fill const-decl "bit" bv nil) (bv2nat_eq0 formula-decl nil bv_nat nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N_size formula-decl nil BitvectorUtil nil)) 6454 3010 nil nil)) (sum_upper_n 0 (sum_upper_n-1 nil 3249114866 3249242711 ("" (skosimp*) (("" (lemma "sigma_split") (("" (inst?) (("" (inst - "n!1") (("" (split) (("1" (replace -1) (("1" (expand "sigma" 1 1) (("1" (reduce) nil nil)) nil)) nil) ("2" (assert) nil nil) ("3" (case-replace "high!1 = n!1") (("1" (expand "sigma") (("1" (reduce) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((sigma_split formula-decl nil sums nil) (= const-decl "[T, T -> boolean]" equalities nil) (sigma def-decl "nat" sums nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1248 640 nil nil)) (bv2nat_upper_n 0 (bv2nat_upper_n-1 nil 3249114866 3249242711 ("" (skosimp*) (("" (rewrite "bv2nat_as_sum[N]") (("" (lemma "sum_upper_n") (("" (inst?) (("" (inst -1 "n!1") (("" (assert) (("" (expand "extend" -1 2) (("" (expand "b2n" -1 2) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bv2nat_as_sum formula-decl nil bv_sum nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" BitvectorUtil nil) (extend const-decl "[nat -> nat]" bv_sum nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (nbit type-eq-decl nil bit nil) (b2n const-decl "nbit" bit nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (sum_upper_n formula-decl nil BitvectorUtil nil)) 802 290 nil nil)) (bv2nat_upperbound 0 (bv2nat_upperbound-1 nil 3249114866 3249242717 ("" (skosimp*) (("" (prop) (("1" (skosimp*) (("1" (lemma "bv2nat_upper_n") (("1" (inst - "bv!1" "k!1") (("1" (assert) (("1" (case "k!1 = n!1") (("1" (assert) nil nil) ("2" (lemma "exp2_lt") (("2" (inst - "k!1" "n!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case-replace "n!1=0") (("1" (case-replace "bv!1 = fill[N](FALSE)") (("1" (rewrite "bv2nat_fill_F") (("1" (expand "exp2") (("1" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality :hide? t) (("2" (inst?) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (case "bv2nat(bv!1) = bv2nat(bv!1^(n!1-1,0))") (("1" (typepred "bv2nat(bv!1 ^ (n!1 - 1, 0))") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (hide 3) (("2" (rewrite "bv2nat_as_sum[N]") (("2" (rewrite "bv2nat_as_sum[n!1]") (("2" (assert) (("2" (lemma "sigma_split") (("2" (inst - "extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii)))" "N-1" "0" "n!1-1") (("2" (assert) (("2" (case-replace "sigma(n!1, N - 1,
                      extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii)))) = 0") (("1" (hide -1) (("1" (replace -1) (("1" (hide -1) (("1" (assert) (("1" (lemma "sigma_restrict_eq") (("1" (inst?) (("1" (assert) (("1" (hide -1 2) (("1" (apply-extensionality :hide? t) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (lemma "sigma_mult") (("2" (inst?) (("2" (inst - 0) (("2" (assert) (("2" (lemma "sigma_restrict_eq") (("2" (inst -1 "LAMBDA (n:nat):
                        0 *
                         extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii)))(n)" "extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii)))" "N-1" "n!1") (("2" (assert) (("2" (hide -1 2) (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (assert) nil nil) ("4" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((bv2nat_upper_n formula-decl nil BitvectorUtil nil) (exp2_lt formula-decl nil exp2 nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" BitvectorUtil nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bv2nat_as_sum formula-decl nil bv_sum nil) (b2n const-decl "nbit" bit nil) (nbit type-eq-decl nil bit nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (extend const-decl "[nat -> nat]" bv_sum nil) (sigma def-decl "nat" sums nil) (restrict const-decl "[nat -> nat]" sums nil) (sigma_restrict_eq formula-decl nil sums nil) (sigma_mult formula-decl nil sums nil) (x!1 skolem-const-decl "nat" BitvectorUtil nil) (sigma_split formula-decl nil sums nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat_fill_F formula-decl nil bv_nat_rules nil)) 5814 2800 nil nil)) (bv2nat_upperbound_caret_TCC1 0 (bv2nat_upperbound_caret_TCC1-1 nil 3249114866 3249242718 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" BitvectorUtil nil) (below type-eq-decl nil naturalnumbers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 288 130 nil nil)) (bv2nat_upperbound_caret_TCC2 0 (bv2nat_upperbound_caret_TCC2-1 nil 3249114866 3249242718 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" BitvectorUtil nil) (below type-eq-decl nil naturalnumbers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 297 140 nil nil)) (bv2nat_upperbound_caret 0 (bv2nat_upperbound_caret-1 nil 3249114866 3249242724 ("" (use "N_size") (("" (skosimp*) (("" (use "bv2nat_upperbound") (("" (assert) (("" (hide -3) (("" (case-replace "n!1=0") (("1" (case-replace "bv!1 = fill[N](FALSE)") (("1" (rewrite "bv2nat_fill_F") nil nil) ("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (rewrite "bv2nat_as_sum[N]") (("2" (lemma "sigma_split") (("2" (inst?) (("2" (inst - "n!1-1") (("2" (assert) (("2" (case-replace "sigma(n!1, N - 1,
                        extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii)))) = 0") (("1" (replace -2) (("1" (hide -) (("1" (assert) (("1" (rewrite "bv2nat_as_sum[n!1]") (("1" (lemma "sigma_restrict_eq") (("1" (inst - "extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii)))" "extend(LAMBDA (ii: below(n!1)):
                            exp2(ii) * b2n((bv!1 ^ (n!1 - 1, 0))(ii)))" "n!1-1" "0") (("1" (assert) (("1" (hide 3) (("1" (apply-extensionality :hide? t) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 3) (("2" (lemma "sigma_mult") (("2" (inst?) (("2" (inst - 0) (("2" (lemma "sigma_restrict_eq") (("2" (inst - "extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii)))" "LAMBDA (n:nat):
                    0 *
                     extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii)))(n)" "N-1" "n!1") (("2" (assert) (("2" (hide -1 2) (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((= const-decl "[T, T -> boolean]" equalities nil) (exp2 def-decl "posnat" exp2 nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bv2nat_fill_F formula-decl nil bv_nat_rules nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (bv2nat_as_sum formula-decl nil bv_sum nil) (extend const-decl "[nat -> nat]" bv_sum nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nbit type-eq-decl nil bit nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (x!1 skolem-const-decl "nat" BitvectorUtil nil) (sigma_mult formula-decl nil sums nil) (sigma_restrict_eq formula-decl nil sums nil) (restrict const-decl "[nat -> nat]" sums nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (sigma def-decl "nat" sums nil) (sigma_split formula-decl nil sums nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" BitvectorUtil nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (bv2nat_upperbound formula-decl nil BitvectorUtil nil) (N_size formula-decl nil BitvectorUtil nil)) 6171 3000 nil nil)) (widen_TCC1 0 (widen_TCC1-1 nil 3249114866 3249242725 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (N formal-const-decl "nat" BitvectorUtil nil) (below type-eq-decl nil naturalnumbers nil)) 482 180 nil nil)) (widen_TCC2 0 (widen_TCC2-1 nil 3249114866 3249242725 ("" (subtype-tcc) nil nil) proved nil 38 30 nil nil)) (bv2int_widen_TCC1 0 (bv2int_widen_TCC1-1 nil 3249114866 3249242725 ("" (use "N_size") (("" (assert) nil nil)) nil) proved ((N_size formula-decl nil BitvectorUtil nil)) 271 110 nil nil)) (bv2int_widen 0 (bv2int_widen-1 nil 3249114866 3249242740 ("" (skosimp*) (("" (use "N_size") (("" (rewrite "bv2int_lem") (("" (rewrite "bv2int_lem") (("" (expand "^") (("" (expand "b2n") (("" (expand "widen" 1 2) (("" (assert) (("" (rewrite "bv2nat_as_sum[N]") (("" (rewrite "bv2nat_as_sum[2*N]") (("" (case "bv!1(N - 1)") (("1" (assert) (("1" (lemma "sigma_split") (("1" (inst -1 "extend(LAMBDA (ii: below(2 * N)):
                                 exp2(ii) * b2n(widen(bv!1)(ii)))" "2*N-1" "0" "N-1") (("1" (assert) (("1" (replace -1) (("1" (hide -1) (("1" (lemma "sigma_restrict_eq") (("1" (inst - "extend(LAMBDA (ii: below(2 * N)):
                                 exp2(ii) * b2n(widen(bv!1)(ii)))" "extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii)))" "N-1" "0") (("1" (split -) (("1" (replace -1) (("1" (hide -1) (("1" (case "sigma(N, 2 * N - 1,
                                              extend(LAMBDA (ii: below(2 * N)):
                                                       exp2(ii) * b2n(widen(bv!1)(ii))))
                                        = exp2(2 * N) - exp2(N)") (("1" (assert) nil nil) ("2" (hide 2) (("2" (case "sigma(N, 2 * N - 1,
                                                   extend(LAMBDA (ii: below(2 * N)):
                                                            exp2(ii) * b2n(widen(bv!1)(ii))))
                                              = sigma(N, 2*N-1, LAMBDA(n:nat) : exp2(n))") (("1" (replace -1) (("1" (hide -1 -2) (("1" (case "FORALL(N:posnat) : sigma(N, 2 * N - 1, LAMBDA (n: nat): exp2(n)) = exp2(2 * N) - exp2(N)") (("1" (inst?) nil nil) ("2" (hide 2) (("2" (induct "N") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (skosimp*) (("3" (case "j!1=0") (("1" (grind) nil nil) ("2" (assert) (("2" (lemma "sigma_split") (("2" (inst - "LAMBDA (n: nat): exp2(n)" "2*j!1-1" "j!1" "j!1") (("2" (assert) (("2" (case "j!1=1") (("1" (grind) nil nil) ("2" (assert) (("2" (expand "sigma" -1 3) (("2" (replace -1) (("2" (hide -1) (("2" (lemma "sigma_split") (("2" (inst - "LAMBDA (n: nat): exp2(n)" "2*j!1+1" "j!1+1" "2*j!1-1") (("2" (assert) (("2" (expand "sigma" -1 3) (("2" (expand "sigma" -1 3) (("2" (replace -1) (("2" (hide -1) (("2" (case " sigma(1 + j!1, 2 * j!1 - 1, LAMBDA (n: nat): exp2(n)) =
                                                                            exp2(2 * j!1) - 2 * exp2(j!1)") (("1" (replace -1) (("1" (hide -1 -2) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (lemma "sigma_restrict_eq") (("2" (inst - "extend(LAMBDA (ii: below(2 * N)):
                                                   exp2(ii) * b2n(widen(bv!1)(ii)))" "LAMBDA (n: nat): exp2(n)" "2*N-1" "N") (("2" (assert) (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (lemma "sigma_split") (("2" (inst -1 "extend(LAMBDA (ii: below(2 * N)):
                                 exp2(ii) * b2n(widen(bv!1)(ii)))" "2*N-1" "0" "N-1") (("2" (assert) (("2" (replace -1) (("2" (hide -1) (("2" (lemma "sigma_mult") (("2" (inst -1 "extend(LAMBDA (ii: below(2 * N)):
                                 exp2(ii) * b2n(widen(bv!1)(ii)))" "2*N-1" "N" "0") (("2" (rewrite "zero_times1") (("2" (lemma "sigma_restrict_eq") (("2" (inst -1 "LAMBDA(n:nat) :0" "extend(LAMBDA (ii: below(2 * N)):
                                  exp2(ii) * b2n(widen(bv!1)(ii)))" "2*N-1" "N") (("2" (split -) (("1" (replace -1) (("1" (replace -2) (("1" (hide -1 -2) (("1" (assert) (("1" (lemma "sigma_restrict_eq") (("1" (inst - "extend(LAMBDA (ii: below(2 * N)):
                                       exp2(ii) * b2n(widen(bv!1)(ii)))" "extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii)))" "N-1" "0") (("1" (assert) (("1" (apply-extensionality :hide? t) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((N_size formula-decl nil BitvectorUtil nil) (b2n const-decl "nbit" bit nil) (sigma_mult formula-decl nil sums nil) (zero_times1 formula-decl nil real_props nil) (extend const-decl "[nat -> nat]" bv_sum nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (nbit type-eq-decl nil bit nil) (sigma_restrict_eq formula-decl nil sums nil) (restrict const-decl "[nat -> nat]" sums nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (sigma def-decl "nat" sums nil) (= const-decl "[T, T -> boolean]" equalities nil) (sigma_split formula-decl nil sums nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (bv2nat_as_sum formula-decl nil bv_sum nil) (^ const-decl "bit" bv nil) (N formal-const-decl "nat" BitvectorUtil nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (widen const-decl "bvec[2 * N]" BitvectorUtil nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (bv2int_lem formula-decl nil bv_int nil) (> const-decl "bool" reals nil)) 14634 7090 nil nil)) (widen_inj 0 (widen_inj-1 nil 3249114866 3249242741 ("" (skosimp*) (("" (iff) (("" (prop) (("1" (expand "widen") (("1" (decompose-equality) (("1" (decompose-equality) (("1" (reduce) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved ((widen const-decl "bvec[2 * N]" BitvectorUtil nil) (bvec type-eq-decl nil bv nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (= const-decl "[T, T -> boolean]" equalities nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" BitvectorUtil nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)) 1211 560 nil nil)) (bv2int_plus_widens 0 (bv2int_plus_widens-1 nil 3249114866 3249242743 ("" (use "N_size") (("" (skosimp*) (("" (rewrite "bv2int_add_combined_rule") (("" (expand "in_rng_2s_comp") (("" (rewrite "bv2int_widen") (("" (rewrite "bv2int_widen") (("" (typepred "bv2int[N](bv1!1)") (("1" (typepred "bv2int[N](bv2!1)") (("1" (expand "minint") (("1" (expand "maxint") (("1" (lemma "exp2_lt") (("1" (inst - "2*N-1" "N") (("1" (assert) (("1" (expand "exp2" -1 1) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((in_rng_2s_comp const-decl "bool" bv_int nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (exp2 def-decl "posnat" exp2 nil) (exp2_lt formula-decl nil exp2 nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (minint const-decl "int" bv_int nil) (<= const-decl "bool" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (bv2int_widen formula-decl nil BitvectorUtil nil) (widen const-decl "bvec[2 * N]" BitvectorUtil nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" BitvectorUtil nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2int_add_combined_rule formula-decl nil bv_arith_int_rules nil) (N_size formula-decl nil BitvectorUtil nil)) 2693 1270 nil nil)) (bv2int_min_widen 0 (bv2int_min_widen-1 nil 3249114866 3249242744 ("" (use "N_size") (("" (skosimp*) (("" (rewrite "bv2int_neg") (("" (rewrite "bv2int_widen") (("" (typepred "bv2int[N](bv!1)") (("1" (expand "minint") (("1" (expand "maxint") (("1" (lemma "exp2_lt") (("1" (inst - "2*N-1" "N-1") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((bv2int_widen formula-decl nil BitvectorUtil nil) (exp2_lt formula-decl nil exp2 nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (minint const-decl "int" bv_int nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (N formal-const-decl "nat" BitvectorUtil nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (widen const-decl "bvec[2 * N]" BitvectorUtil nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (bv2int_neg formula-decl nil bv_arithmetic nil) (> const-decl "bool" reals nil) (N_size formula-decl nil BitvectorUtil nil)) 898 440 nil nil)) (bv2nat_widen_TCC1 0 (bv2nat_widen_TCC1-1 nil 3249114866 3249242744 ("" (use "N_size") (("" (assert) nil nil)) nil) proved ((N_size formula-decl nil BitvectorUtil nil)) 43 40 nil nil)) (bv2nat_widen 0 (bv2nat_widen-1 nil 3249114866 3249242750 ("" (use "N_size") (("" (skosimp*) (("" (lift-if +) (("" (split +) (("1" (flatten) (("1" (case-replace "(widen(bv!1)) = (fill[N](FALSE) o bv!1)") (("1" (rewrite "bv2nat_concat") (("1" (rewrite "bv2nat_fill_F") (("1" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (lemma "bv2nat_upperbound[N]") (("2" (inst?) (("1" (assert) (("1" (apply-extensionality :hide? t) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (case-replace "(widen(bv!1)) = (fill[N](TRUE) o bv!1)") (("1" (rewrite "bv2nat_concat") (("1" (rewrite "bv2nat_fill_T") (("1" (assert) (("1" (lemma "exp2_sum") (("1" (inst - "N" "N") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (lemma "bv2nat_upperbound[N]") (("2" (inst?) (("1" (assert) (("1" (hide 3) (("1" (apply-extensionality :hide? t) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (N formal-const-decl "nat" BitvectorUtil nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (= const-decl "[T, T -> boolean]" equalities nil) (widen const-decl "bvec[2 * N]" BitvectorUtil nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (bv2nat_fill_F formula-decl nil bv_nat_rules nil) (bv2nat_concat formula-decl nil bv_arith_concat nil) (bv2nat_upperbound formula-decl nil BitvectorUtil nil) (x!1 skolem-const-decl "below(2 * N)" BitvectorUtil nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bv2nat_rec def-decl "nat" bv_nat nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (exp2 def-decl "posnat" exp2 nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (TRUE const-decl "bool" booleans nil) (bv2nat_fill_T formula-decl nil bv_nat_rules nil) (exp2_sum formula-decl nil exp2 nil) (NOT const-decl "[bool -> bool]" booleans nil) (N_size formula-decl nil BitvectorUtil nil)) 6002 2790 nil nil)) (bv2nat_widen_null 0 (bv2nat_widen_null-1 nil 3249114866 3249242751 ("" (use "N_size") (("" (skosimp*) (("" (iff) (("" (prop) (("1" (lemma "bv2nat_eq0[2*N]") (("1" (inst?) (("1" (assert) (("1" (case "bv!1 = fill[N](FALSE)") (("1" (replace -1 1) (("1" (rewrite "bv2nat_fill_F") nil nil)) nil) ("2" (hide -2 2) (("2" (decompose-equality) (("2" (decompose-equality) (("2" (expand "fill") (("2" (expand "widen") (("2" (use "N_size") (("2" (inst-cp - "N") (("2" (assert) (("2" (inst - "x!1") (("2" (split) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "bv2nat_eq0[N]") (("2" (inst?) (("2" (assert) (("2" (replace -1) (("2" (hide -1 -2) (("2" (case-replace "(widen(fill[N](FALSE))) = fill[2*N](FALSE)") (("1" (rewrite "bv2nat_fill_F") nil nil) ("2" (hide 2) (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (widen const-decl "bvec[2 * N]" BitvectorUtil nil) (= const-decl "[T, T -> boolean]" equalities nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (bv2nat_fill_F formula-decl nil bv_nat_rules nil) (bv2nat_eq0 formula-decl nil bv_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" BitvectorUtil nil) (N_size formula-decl nil BitvectorUtil nil)) 932 470 nil nil)) (narrow_TCC1 0 (narrow_TCC1-1 nil 3249114866 3249242752 ("" (use "N_size") (("" (assert) nil nil)) nil) proved ((N_size formula-decl nil BitvectorUtil nil)) 85 50 nil nil)) (narrow_TCC2 0 (narrow_TCC2-1 nil 3249114866 3249242752 ("" (use "N_size") (("" (assert) nil nil)) nil) proved ((N_size formula-decl nil BitvectorUtil nil)) 198 40 nil nil)) (bv2int_narrow 0 (bv2int_narrow-1 nil 3249114866 3249242753 ("" (use "N_size") (("" (skosimp*) (("" (expand "narrow") (("" (use "bv2int_of_sign_extension") (("1" (assert) (("1" (hide 2) (("1" (expand "in_rng_2s_comp") (("1" (expand "minint") (("1" (expand "maxint") (("1" (auto-rewrite "exp2") (("1" (reduce) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil) proved ((bv2int_of_sign_extension formula-decl nil bv_arith_int_caret nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (> const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" BitvectorUtil nil) (minint const-decl "int" bv_int nil) (exp2 def-decl "posnat" exp2 nil) (maxint const-decl "int" bv_int nil) (in_rng_2s_comp const-decl "bool" bv_int nil) (narrow const-decl "bvec[N]" BitvectorUtil nil) (N_size formula-decl nil BitvectorUtil nil)) 1040 570 nil nil)) (narrow_int2bv_TCC1 0 (narrow_int2bv_TCC1-1 nil 3249114866 3249242753 ("" (use "N_size") (("" (skosimp*) (("" (expand "minint") (("" (expand "maxint") (("" (lemma "exp2_lt") (("" (inst - "2*N-1" "N-1") (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((maxint const-decl "int" bv_int nil) (N formal-const-decl "nat" BitvectorUtil nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (exp2_lt formula-decl nil exp2 nil) (minint const-decl "int" bv_int nil) (N_size formula-decl nil BitvectorUtil nil)) 395 240 nil nil)) (narrow_int2bv_TCC2 0 (narrow_int2bv_TCC2-1 nil 3249114866 3249242754 ("" (skosimp*) (("" (expand "minint") (("" (expand "maxint") (("" (auto-rewrite "exp2") (("" (reduce) nil nil)) nil)) nil)) nil)) nil) proved ((minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil)) 263 110 nil nil)) (narrow_int2bv 0 (narrow_int2bv-1 nil 3249114866 3249242756 ("" (use "N_size") (("" (skosimp*) (("" (case "bv2int[N](narrow(int2bv[2 * N](k!1))) = bv2int(int2bv[N](k!1))") (("1" (rewrite "bv2int_inj[N]") nil nil) ("2" (hide 2) (("2" (rewrite "bv2int_narrow") (("2" (rewrite "bv2int_inv[2*N]") (("2" (rewrite "bv2int_inv[N]") nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (expand "minint") (("3" (expand "maxint") (("3" (auto-rewrite "exp2") (("3" (reduce) nil nil)) nil)) nil)) nil)) nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (hide 2) (("6" (expand "minint") (("6" (expand "maxint") (("6" (lemma "exp2_lt") (("6" (inst - "2*N-1" "N-1") (("1" (case "k!1 <= exp2(N-1)-1") (("1" (assert) nil nil) ("2" (hide -1 -3 2) (("2" (auto-rewrite "exp2") (("2" (reduce) nil nil)) nil)) nil) ("3" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((- const-decl "[numfield, numfield -> numfield]" number_fields nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (exp2_lt formula-decl nil exp2 nil) (exp2 def-decl "posnat" exp2 nil) (bv2int_inv formula-decl nil bv_int nil) (bv2int_narrow formula-decl nil BitvectorUtil nil) (bv2int_inj formula-decl nil bv_int nil) (> const-decl "bool" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" BitvectorUtil nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (narrow const-decl "bvec[N]" BitvectorUtil nil) (int2bv const-decl "{bv | bv2int(bv) = iv}" bv_int nil) (N_size formula-decl nil BitvectorUtil nil)) 1842 870 nil nil)) (narrow_widen 0 (narrow_widen-1 nil 3249114866 3249242756 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (expand "narrow") (("" (expand "^") (("" (expand "widen") (("" (assert) (("" (reduce) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" BitvectorUtil nil) (below type-eq-decl nil naturalnumbers nil) (widen const-decl "bvec[2 * N]" BitvectorUtil nil) (narrow const-decl "bvec[N]" BitvectorUtil nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)) 367 180 nil nil)) (narrow_plus 0 (narrow_plus-1 nil 3249114866 3249242758 ("" (use "N_size") (("" (skosimp*) (("" (expand "narrow") (("" (rewrite "bv_add_caret") nil nil)) nil)) nil)) nil) proved ((bv_add_caret formula-decl nil bv_arith_caret_rules nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" BitvectorUtil nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (narrow const-decl "bvec[N]" BitvectorUtil nil) (N_size formula-decl nil BitvectorUtil nil)) 1818 900 nil nil)) (narrow_min 0 (narrow_min-1 nil 3249114866 3249242759 ("" (use "N_size") (("" (skosimp*) (("" (expand "narrow") (("" (rewrite "bv_caret_negate") nil nil)) nil)) nil)) nil) proved ((AND const-decl "[bool, bool -> bool]" booleans nil) (bv_caret_negate formula-decl nil bv_arith_int_caret nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" BitvectorUtil nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (below type-eq-decl nil nat_types nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (narrow const-decl "bvec[N]" BitvectorUtil nil) (N_size formula-decl nil BitvectorUtil nil)) 1129 440 nil nil)) (narrow_minus 0 (narrow_minus-1 nil 3249114866 3249242760 ("" (use "N_size") (("" (skosimp*) (("" (expand "-") (("" (rewrite "narrow_plus") (("" (rewrite "narrow_min") nil nil)) nil)) nil)) nil)) nil) proved ((> const-decl "bool" reals nil) (narrow_plus formula-decl nil BitvectorUtil nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (N formal-const-decl "nat" BitvectorUtil nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (- const-decl "[numfield -> numfield]" number_fields nil) (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}" bv_arithmetic nil) (narrow_min formula-decl nil BitvectorUtil nil) (- const-decl "bvec[N]" bv_arithmetic nil) (N_size formula-decl nil BitvectorUtil nil)) 974 510 nil nil)) (narrow_concat 0 (narrow_concat-1 nil 3249114866 3249242761 ("" (use "N_size") (("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil)) nil) proved ((^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (narrow const-decl "bvec[N]" BitvectorUtil nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" BitvectorUtil nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (N_size formula-decl nil BitvectorUtil nil)) 1239 510 nil nil)) (leftshift_zero 0 (leftshift_zero-1 nil 3249114866 3249242762 ("" (grind) nil nil) proved ((left_shift const-decl "bvec[N]" bv_shift nil)) 348 190 nil nil)) (leftshift_inc 0 (leftshift_inc-1 nil 3249114866 3249242764 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" BitvectorUtil nil) (below type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (left_shift const-decl "bvec[N]" bv_shift nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (fill const-decl "bit" bv nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (O const-decl "bvec[n + m]" bv_concat_def nil)) 2466 1150 nil nil)) (bv2nat_leftshift_TCC1 0 (bv2nat_leftshift_TCC1-1 nil 3249114866 3249242764 ("" (subtype-tcc) nil nil) proved nil 205 60 nil nil)) (bv2nat_leftshift 0 (bv2nat_leftshift-1 nil 3249114866 3249242781 ("" (skosimp*) (("" (case-replace "n!1=0") (("1" (grind) nil nil) ("2" (use "bv2nat_upperbound") (("1" (assert) (("1" (hide -2) (("1" (rewrite "bv2nat_as_sum[N]") (("1" (rewrite "bv2nat_as_sum[N]") (("1" (lemma "sigma_mult") (("1" (inst - "extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii)))" "N-1" "0" "exp2(n!1)") (("1" (replace -1 * rl) (("1" (hide -1) (("1" (lemma "sigma_shift") (("1" (inst - "extend(LAMBDA (ii: below(N)):
                           exp2(ii) * b2n(left_shift(n!1, bv!1)(ii)))" "N-1" "0" "n!1") (("1" (lemma "sigma_restrict_eq") (("1" (inst - "LAMBDA (n:nat):
                     extend(LAMBDA (ii: below(N)):
                              exp2(ii) * b2n(left_shift(n!1, bv!1)(ii)))
                           (n + n!1)" "LAMBDA (n:nat):
                     exp2(n!1) *
                      extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii)))(n)" "N-1" "0") (("1" (split -) (("1" (replace -1) (("1" (hide -1) (("1" (replace -1 * rl) (("1" (hide -1) (("1" (assert) (("1" (lemma "sigma_split") (("1" (inst-cp - "extend(LAMBDA (ii: below(N)):
                             exp2(ii) * b2n(left_shift(n!1, bv!1)(ii)))" "N-1" "0" "n!1-1") (("1" (assert) (("1" (replace -2) (("1" (hide -2) (("1" (case-replace "sigma(0, n!1 - 1,
                    extend(LAMBDA (ii: below(N)):
                             exp2(ii) * b2n(left_shift(n!1, bv!1)(ii)))) = 0") (("1" (hide -1) (("1" (assert) (("1" (case "sigma(N, N - 1 + n!1,
                             extend(LAMBDA (ii: below(N)):
                                      exp2(ii) * b2n(left_shift(n!1, bv!1)(ii)))) = 0") (("1" (case-replace "n!1=N-1") (("1" (assert) (("1" (inst - "extend(LAMBDA (ii: below(N)):
                                     exp2(ii) * b2n(left_shift(n!1, bv!1)(ii)))" "2*N-2" "N-1" "N-1") (("1" (assert) nil nil)) nil)) nil) ("2" (inst - "extend(LAMBDA (ii: below(N)):
                                     exp2(ii) * b2n(left_shift(n!1, bv!1)(ii)))" "N-1+n!1" "n!1" "N-1") (("2" (assert) nil nil)) nil)) nil) ("2" (hide -1 3) (("2" (lemma "sigma_mult") (("2" (inst - "extend(LAMBDA (ii: below(N)):
                                 exp2(ii) * b2n(left_shift(n!1, bv!1)(ii)))" "N-1+n!1" "N" "0") (("2" (assert) (("2" (lemma "sigma_restrict_eq") (("2" (inst - "LAMBDA (n:nat):
                          0 *
                           extend(LAMBDA (ii: below(N)):
                                    exp2(ii) * b2n(left_shift(n!1, bv!1)(ii)))
                                 (n)" "extend(LAMBDA (ii: below(N)):
                                 exp2(ii) * b2n(left_shift(n!1, bv!1)(ii)))" "N-1+n!1" "N") (("2" (assert) (("2" (hide -1 2) (("2" (apply-extensionality :hide? t) (("2" (expand "restrict") (("2" (lift-if) (("2" (prop) (("2" (expand "extend") (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 3) (("2" (lemma "sigma_mult") (("2" (inst - "extend(LAMBDA (ii: below(N)):
                               exp2(ii) * b2n(left_shift(n!1, bv!1)(ii)))" "n!1-1" "0" "0") (("2" (lemma "sigma_restrict_eq") (("2" (inst - "LAMBDA (n:nat):
                        0 *
                         extend(LAMBDA (ii: below(N)):
                                  exp2(ii) * b2n(left_shift(n!1, bv!1)(ii)))
                               (n)" "extend(LAMBDA (ii: below(N)):
                               exp2(ii) * b2n(left_shift(n!1, bv!1)(ii)))" "n!1-1" "0") (("2" (assert) (("2" (hide -1 2) (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality :hide? t) (("2" (expand "restrict") (("2" (lift-if) (("2" (prop) (("2" (expand "extend") (("2" (expand "b2n") (("2" (expand "left_shift") (("2" (expand "^") (("2" (expand "o ") (("2" (assert) (("2" (lift-if) (("2" (split +) (("1" (flatten) (("1" (assert) (("1" (prop) (("1" (rewrite "exp2_sum") nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (inst - "x!1") (("2" (assert) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" BitvectorUtil nil) (below type-eq-decl nil naturalnumbers nil) (left_shift const-decl "bvec[N]" bv_shift nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bv2nat_rec def-decl "nat" bv_nat nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (bv2nat_as_sum formula-decl nil bv_sum nil) (sigma_mult formula-decl nil sums nil) (sigma_shift formula-decl nil sums nil) (sigma_restrict_eq formula-decl nil sums nil) (sigma_split formula-decl nil sums nil) (fill const-decl "bit" bv nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (restrict const-decl "[nat -> nat]" sums nil) (sigma def-decl "nat" sums nil) (exp2_sum formula-decl nil exp2 nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nbit type-eq-decl nil bit nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (extend const-decl "[nat -> nat]" bv_sum nil) (n!1 skolem-const-decl "below(N)" BitvectorUtil nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (bv2nat_upperbound formula-decl nil BitvectorUtil nil)) 16422 4940 nil nil)) (bv2nat_rightshift_upperbound 0 (bv2nat_rightshift_upperbound-1 nil 3249114866 3249242791 ("" (skosimp*) (("" (case-replace "n!1=0") (("1" (grind) nil nil) ("2" (rewrite "bv2nat_as_sum[N]") (("2" (rewrite "bv2nat_as_sum[N]") (("2" (lemma "sigma_mult") (("2" (inst - "extend(LAMBDA (ii: below(N)):
                              exp2(ii) * b2n(right_shift(n!1, bv!1)(ii)))" "N-1" "0" "exp2(n!1)") (("2" (replace -1 * rl) (("2" (hide -1) (("2" (lemma "sigma_split") (("2" (case "N - 1 - n!1 >= 0") (("1" (inst - "LAMBDA (n:nat):
                          exp2(n!1) *
                           extend(LAMBDA (ii: below(N)):
                                    exp2(ii) * b2n(right_shift(n!1, bv!1)(ii)))
                                 (n)" "N-1" "0" "N-n!1-1") (("1" (assert) (("1" (case-replace "sigma(N - n!1, N - 1,
                          LAMBDA (n: nat):
                            exp2(n!1) *
                             extend(LAMBDA (ii: below(N)):
                                      exp2(ii) * b2n(right_shift(n!1, bv!1)(ii)))
                                   (n)) = 0") (("1" (assert) (("1" (hide -1) (("1" (replace -2) (("1" (hide -2) (("1" (lemma "sigma_shift") (("1" (inst - "extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii)))" "N-1-n!1" "0" "n!1") (("1" (assert) (("1" (lemma "sigma_restrict_eq") (("1" (inst - "LAMBDA (n:nat):
                               extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii)))
                                     (n + n!1)" "LAMBDA (n: nat):
                              exp2(n!1) *
                               extend(LAMBDA (ii: below(N)):
                                        exp2(ii) * b2n(right_shift(n!1, bv!1)(ii)))
                                     (n)" "N-1-n!1" "0") (("1" (split -) (("1" (replace -1) (("1" (hide -1) (("1" (replace -1 * rl) (("1" (hide -1) (("1" (lemma "sigma_split") (("1" (inst - "extend(LAMBDA (ii: below(N)): exp2(ii) * b2n(bv!1(ii)))" "N-1" "0" "n!1-1") (("1" (assert) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality :hide? t) (("2" (grind) (("2" (rewrite "exp2_sum") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -2 3) (("2" (lemma "sigma_mult") (("2" (inst - "LAMBDA (n: nat):
                              exp2(n!1) *
                               extend(LAMBDA (ii: below(N)):
                                        exp2(ii) * b2n(right_shift(n!1, bv!1)(ii)))
                                     (n)" "N-1" "N-n!1" "0") (("2" (lemma "sigma_restrict_eq") (("2" (inst -1 "LAMBDA (m: nat):
                              0 *
                               (exp2(n!1) *
                                 extend(LAMBDA (ii: below(N)):
                                          exp2(ii) * b2n(right_shift(n!1, bv!1)(ii)))
                                       (m))" "LAMBDA (n: nat):
                              exp2(n!1) *
                               extend(LAMBDA (ii: below(N)):
                                        exp2(ii) * b2n(right_shift(n!1, bv!1)(ii)))
                                     (n)" "N-1" "N-n!1") (("2" (assert) (("2" (hide -1 2) (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 3) (("2" (typepred "n!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" BitvectorUtil nil) (below type-eq-decl nil naturalnumbers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bv2nat_rec def-decl "nat" bv_nat nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (right_shift const-decl "bvec[N]" bv_shift nil) (exp2 def-decl "posnat" exp2 nil) (extend const-decl "[nat -> nat]" bv_sum nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nbit type-eq-decl nil bit nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (sigma_shift formula-decl nil sums nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (fill const-decl "bit" bv nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (exp2_sum formula-decl nil exp2 nil) (restrict const-decl "[nat -> nat]" sums nil) (sigma_restrict_eq formula-decl nil sums nil) (sigma def-decl "nat" sums nil) (NOT const-decl "[bool -> bool]" booleans nil) (sigma_split formula-decl nil sums nil) (sigma_mult formula-decl nil sums nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (bv2nat_as_sum formula-decl nil bv_sum nil)) 10116 4940 nil nil)) (bv2int_rightshift_upperbound 0 (bv2int_rightshift_upperbound-1 nil 3249114866 3249242792 ("" (skosimp*) (("" (expand "bv2int") (("" (lift-if -) (("" (split -) (("1" (flatten) (("1" (assert) (("1" (use "bv2nat_rightshift_upperbound") (("1" (assert) (("1" (reduce) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((bv2int const-decl "rng_2s_comp" bv_int nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" BitvectorUtil nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (bv2nat_rightshift_upperbound formula-decl nil BitvectorUtil nil)) 1233 610 nil nil)) (rightshift_zero 0 (rightshift_zero-1 nil 3249114866 3249242793 ("" (grind) nil nil) proved ((right_shift const-decl "bvec[N]" bv_shift nil)) 339 180 nil nil)) (rightshift_inc 0 (rightshift_inc-1 nil 3249114866 3249242795 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" BitvectorUtil nil) (below type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (right_shift const-decl "bvec[N]" bv_shift nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (fill const-decl "bit" bv nil) (O const-decl "bvec[n + m]" bv_concat_def nil)) 2513 1250 nil nil)) (bv2int_rightshift_pos 0 (bv2int_rightshift_pos-1 nil 3249114866 3249242797 ("" (skosimp*) (("" (expand "bv2int") (("" (lift-if) (("" (split) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (lemma "bv2nat_upperbound") (("2" (inst?) (("1" (assert) (("1" (hide 2 3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (use "N_size") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bv2int const-decl "rng_2s_comp" bv_int nil) (bv2nat_upperbound formula-decl nil BitvectorUtil nil) (N_size formula-decl nil BitvectorUtil nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (fill const-decl "bit" bv nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (NOT const-decl "[bool -> bool]" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (right_shift const-decl "bvec[N]" bv_shift nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" BitvectorUtil nil)) 2087 1000 nil nil)) (leftshift1_add_aux_TCC1 0 (leftshift1_add_aux_TCC1-1 nil 3249114866 3249242797 ("" (subtype-tcc) nil nil) proved nil 35 40 nil nil)) (leftshift1_add_aux_TCC2 0 (leftshift1_add_aux_TCC2-1 nil 3249114866 3249242797 ("" (subtype-tcc) nil nil) proved nil 185 40 nil nil)) (leftshift1_add_aux 0 (leftshift1_add_aux-1 nil 3249114866 3249242799 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "n_cout_rec" 1 1) (("2" (inst?) (("2" (replace -2) (("2" (hide -2) (("2" (expand "n_cout_rec" 1 2) (("2" (expand "left_shift") (("2" (expand "^") (("2" (expand "o ") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (assert) nil nil)) nil) proved ((oba_cout const-decl "bit" bv_adder nil) (fill const-decl "bit" bv nil) (^ const-decl "bit" bv nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (below_induction formula-decl nil bounded_nat_inductions nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (N formal-const-decl "nat" BitvectorUtil nil) (FALSE const-decl "bool" booleans nil) (left_shift const-decl "bvec[N]" bv_shift nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (n_cout_rec def-decl "bit" bv_adder nil) (below type-eq-decl nil nat_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (pred type-eq-decl nil defined_types nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil)) 1907 930 nil nil)) (leftshift1_add 0 (leftshift1_add-1 nil 3249114866 3249242802 ("" (use "N_size") (("" (skosimp*) (("" (rewrite "adder_is_add[N]" :dir rl) (("" (rewrite "adder_is_add[N]" :dir rl) (("" (apply-extensionality :hide? t) (("" (expand "left_shift" 1 1) (("" (expand "fill") (("" (expand "^") (("" (expand "o ") (("" (lift-if) (("" (split) (("1" (flatten) (("1" (case-replace "x!1=0") (("1" (grind) nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (expand "bv_adder") (("2" (case-replace "x!1=1") (("1" (grind) nil nil) ("2" (assert) (("2" (lemma "leftshift1_add_aux") (("2" (inst - "bv1!1" "bv2!1" "x!1-2") (("2" (replace -1) (("2" (hide -1) (("2" (expand "left_shift") (("2" (expand "o ") (("2" (expand "^") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((left_shift const-decl "bvec[N]" bv_shift nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (oba_cout const-decl "bit" bv_adder nil) (n_cout_rec def-decl "bit" bv_adder nil) (/= const-decl "boolean" notequal nil) (leftshift1_add_aux formula-decl nil BitvectorUtil nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (oba_sum const-decl "bit" bv_adder nil) (XOR const-decl "bool" xor_def nil) (^ const-decl "bit" bv nil) (= const-decl "[T, T -> boolean]" equalities nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (bv_adder const-decl "bvec[N]" bv_adder nil) (N formal-const-decl "nat" BitvectorUtil nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (adder_is_add formula-decl nil bv_adder nil) (> const-decl "bool" reals nil) (N_size formula-decl nil BitvectorUtil nil)) 2962 1400 nil nil)) (narrow_rightshift 0 (narrow_rightshift-1 nil 3249114866 3249242806 ("" (use "N_size") (("" (skosimp*) (("" (case "FORALL(n:nat) : n >= N AND n < 2*N IMPLIES NOT BV!1(n)") (("1" (apply-extensionality :hide? t) (("1" (expand "narrow") (("1" (expand "right_shift") (("1" (expand "o ") (("1" (expand "^") (("1" (lift-if) (("1" (split) (("1" (propax) nil nil) ("2" (flatten) (("2" (assert) (("2" (lift-if) (("2" (split) (("1" (flatten) (("1" (assert) (("1" (split +) (("1" (propax) nil nil) ("2" (flatten) (("2" (expand "fill") (("2" (inst - "n!1 + x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (split) (("1" (flatten) (("1" (split) (("1" (flatten) (("1" (expand "fill") (("1" (inst - "n!1 + x!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "fill") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "fill") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "bv2int") (("2" (lift-if) (("2" (split -) (("1" (flatten) (("1" (assert) (("1" (rewrite "bv2nat_as_sum") (("1" (assert) (("1" (skosimp*) (("1" (lemma "sum_upper_n") (("1" (inst - "extend(LAMBDA (ii: below(2 * N)): exp2(ii) * b2n(BV!1(ii)))" "2*N-1" "0" "n!2") (("1" (assert) (("1" (split -) (("1" (assert) (("1" (expand "extend" -1 2) (("1" (expand "b2n" -1 2) (("1" (lemma "exp2_lt") (("1" (inst -1 "n!2" "N") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "FORALL(n:nat, m:posnat) : n<m IMPLIES n <= m-1") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bv2nat_as_sum formula-decl nil bv_sum nil) (extend const-decl "[nat -> nat]" bv_sum nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (nbit type-eq-decl nil bit nil) (b2n const-decl "nbit" bit nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (exp2_lt formula-decl nil exp2 nil) (sum_upper_n formula-decl nil BitvectorUtil nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (narrow const-decl "bvec[N]" BitvectorUtil nil) (right_shift const-decl "bvec[N]" bv_shift nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (fill const-decl "bit" bv nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (N formal-const-decl "nat" BitvectorUtil nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (N_size formula-decl nil BitvectorUtil nil)) 3980 1930 nil nil)))
