(bv_arith_int_caret (bv_sign_of_frag_neg_TCC1 0 (bv_sign_of_frag_neg_TCC1-1 nil 3249241284 3249243103 ("" (subtype-tcc) nil nil) proved ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) 103 100 nil nil)) (bv_sign_of_frag_neg_TCC2 0 (bv_sign_of_frag_neg_TCC2-1 nil 3249241284 3249243103 ("" (subtype-tcc) nil nil) proved ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) 259 100 nil nil)) (bv_sign_of_frag_neg_TCC3 0 (bv_sign_of_frag_neg_TCC3-1 nil 3249241284 3249243104 ("" (subtype-tcc) nil nil) proved ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) 285 120 nil nil)) (bv_sign_of_frag_neg 0 (bv_sign_of_frag_neg-1 nil 3249241284 3249243105 ("" (skosimp*) (("" (lemma "bv2int_top_bit[N!1]") (("" (inst?) (("" (lemma "bv2int_top_bit[N!1-i!1]") (("" (inst?) (("" (expand "^") (("" (ground) nil)))))))))))) nil) proved ((posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2int_top_bit formula-decl nil bv_int nil) (below type-eq-decl nil nat_types nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (^ const-decl "bit" bv nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 1221 600 nil nil)) (bv_sign_of_frag_pos_TCC1 0 (bv_sign_of_frag_pos_TCC1-1 nil 3249241284 3249243105 ("" (subtype-tcc) nil nil) proved ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) 260 110 nil nil)) (bv_sign_of_frag_pos_TCC2 0 (bv_sign_of_frag_pos_TCC2-1 nil 3249241284 3249243105 ("" (subtype-tcc) nil nil) proved ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) 256 110 nil nil)) (bv_sign_of_frag_pos_TCC3 0 (bv_sign_of_frag_pos_TCC3-1 nil 3249241284 3249243106 ("" (subtype-tcc) nil nil) proved ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) 322 130 nil nil)) (bv_sign_of_frag_pos 0 (bv_sign_of_frag_pos-1 nil 3249241284 3249243107 ("" (skosimp*) (("" (lemma "bv2int_top_bit[N!1]") (("" (inst?) (("" (lemma "bv2int_top_bit[N!1-i!1]") (("" (inst?) (("" (expand "^") (("" (ground) nil)))))))))))) nil) proved ((posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2int_top_bit formula-decl nil bv_int nil) (below type-eq-decl nil nat_types nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (^ const-decl "bit" bv nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 1134 510 nil nil)) (bv2int_top_TCC1 0 (bv2int_top_TCC1-1 nil 3249241284 3249243107 ("" (subtype-tcc) nil nil) proved nil 41 40 nil nil)) (bv2int_top_TCC2 0 (bv2int_top_TCC2-1 nil 3249241284 3249243107 ("" (subtype-tcc) nil nil) proved nil 40 40 nil nil)) (bv2int_top_TCC3 0 (bv2int_top_TCC3-1 nil 3249241284 3249243107 ("" (subtype-tcc) nil nil) proved nil 73 70 nil nil)) (bv2int_top 0 (bv2int_top-1 nil 3249241284 3249243112 ("" (skosimp*) (("" (lemma "bv_shift") (("" (inst?) (("" (rewrite "bv2int_lem") (("" (rewrite "bv2int_lem") (("" (replace -1) (("" (hide -1) (("" (expand "b2n") (("" (lift-if) (("" (lift-if) (("" (ground) (("1" (hide -1) (("1" (assert) (("1" (expand "div") (("1" (lemma "floor_plus_int") (("1" (inst -1 "-exp2(N!1-i!1)" "bv2nat(bv!1) / exp2(i!1)") (("1" (assert) (("1" (replace -1 * rl) (("1" (hide -1) (("1" (lemma "exp2_sum") (("1" (inst -1 "N!1-i!1" "i!1") (("1" (assert) nil))))))))))))))))))))) ("2" (hide 2) (("2" (rewrite "bv_caret_elim") nil))) ("3" (hide 2) (("3" (rewrite "bv_caret_elim") nil))) ("4" (expand "div") (("4" (propax) nil)))))))))))))))))))))))) nil) proved ((bv_shift formula-decl nil bv_arith_caret nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bv2int_lem formula-decl nil bv_int nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (b2n const-decl "nbit" bit nil) (bv_caret_elim formula-decl nil bv_caret nil) (div const-decl "integer" div nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (exp2 def-decl "posnat" exp2 nil) (- const-decl "[numfield -> numfield]" number_fields nil) (integer nonempty-type-from-decl nil integers nil) (exp2_sum formula-decl nil exp2 nil) (floor_plus_int formula-decl nil floor_ceil nil) (below type-eq-decl nil nat_types nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 4329 2100 nil nil)) (bv2int_concat_TCC1 0 (bv2int_concat_TCC1-1 nil 3249241284 3249243112 ("" (subtype-tcc) nil nil) proved nil 39 40 nil nil)) (bv2int_concat_TCC2 0 (bv2int_concat_TCC2-1 nil 3249241284 3249243112 ("" (subtype-tcc) nil nil) proved nil 220 40 nil nil)) (bv2int_concat 0 (bv2int_concat-1 nil 3249241284 3249243115 ("" (skosimp*) (("" (lemma "bv2nat_concat") (("" (inst?) (("" (rewrite "bv2int_lem") (("" (rewrite "bv2int_lem") (("" (rewrite "bv2int_lem") (("" (lemma "bv_concat_top_bit") (("" (inst -1 "m!1" "n!1" "bvn!1" "bvm!1") (("" (replace -1 :hide? t) (("" (rewrite "exp2_sum") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bv2nat_concat formula-decl nil bv_arith_concat nil) (bv2int_lem formula-decl nil bv_int nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (exp2_sum formula-decl nil exp2 nil) (bv_concat_top_bit formula-decl nil bv_concat nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 2869 1480 nil nil)) (bv2int_bottom_TCC1 0 (bv2int_bottom_TCC1-1 nil 3249241284 3249243115 ("" (subtype-tcc) nil nil) proved nil 186 40 nil nil)) (bv2int_bottom 0 (bv2int_bottom-1 nil 3249241284 3249243119 ("" (skosimp*) (("" (rewrite "bv2int_lem[i!1+1]") (("" (lemma "bv_bottom") (("" (inst?) (("" (rewrite "bv_caret_elim") (("" (assert) (("" (rewrite "bv2int_lem[N!1]") (("" (case-replace " b2n(bv!1 ^ (N!1 - 1)) = 0") (("1" (assert) nil) ("2" (case-replace " b2n(bv!1 ^ (N!1 - 1)) = 1") (("1" (lemma "exp2_sum") (("1" (inst -1 "N!1-i!1-1" "i!1+1") (("1" (assert) (("1" (replace -1) (("1" (hide -1) (("1" (lemma "mod_sum") (("1" (inst -1 "bv2nat(bv!1)" "exp2(1+i!1)" "-exp2(N!1 - 1 - i!1)") (("1" (assert) nil))))))))))))))) ("2" (assert) nil)))))))))))))))))) nil) proved ((bv2int_lem formula-decl nil bv_int nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil nat_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (nbit type-eq-decl nil bit nil) (= const-decl "[T, T -> boolean]" equalities nil) (exp2_sum formula-decl nil exp2 nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (mod_sum formula-decl nil mod nil) (bv_caret_elim formula-decl nil bv_caret nil) (bv_bottom formula-decl nil bv_arith_caret nil)) 3616 1680 nil nil)) (in_small_rng_TCC1 0 (in_small_rng_TCC1-1 nil 3249241284 3249243119 ("" (subtype-tcc) nil nil) proved ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (in_rng_2s_comp const-decl "bool" bv_int nil)) 320 160 nil nil)) (in_small_rng_TCC2 0 (in_small_rng_TCC2-1 nil 3249241284 3249243120 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (in_rng_2s_comp const-decl "bool" bv_int nil)) 885 370 nil nil)) (in_small_rng_TCC3 0 (in_small_rng_TCC3-1 nil 3249241284 3249243121 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (in_rng_2s_comp const-decl "bool" bv_int nil)) 810 370 nil nil)) (in_small_rng 0 (in_small_rng-1 nil 3249241284 3249243126 ("" (skosimp*) (("" (lemma "bv2int_inj[N!1]") (("" (inst?) (("1" (assert) (("1" (hide 2) (("1" (rewrite "bv2int_concat") (("1" (rewrite "bv_caret_elim") (("1" (rewrite "bv2int_bottom") (("1" (expand "in_rng_2s_comp") (("1" (flatten) (("1" (expand "maxint") (("1" (lemma "bv2int_top_bit[N!1]") (("1" (inst?) (("1" (ground) (("1" (rewrite "bv2int_fill_F[N!1-i!1]") (("1" (assert) (("1" (rewrite "mod_lt_int") (("1" (hide 2) (("1" (expand "exp2" 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "bv2int_fill_T[N!1-i!1]") (("2" (assert) (("2" (rewrite "mod_lt_int") (("1" (assert) nil nil) ("2" (hide 3) (("2" (expand "exp2" 1) (("2" (expand "minint") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil) proved ((posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2int_inj formula-decl nil bv_int nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bv2int_concat formula-decl nil bv_arith_int_caret nil) (bv2int_bottom formula-decl nil bv_arith_int_caret nil) (bv2int_top_bit formula-decl nil bv_int nil) (mod_lt_int formula-decl nil mod nil) (minint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (exp2 def-decl "posnat" exp2 nil) (bv2int_fill_F formula-decl nil bv_int nil) (bv2int_fill_T formula-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (in_rng_2s_comp const-decl "bool" bv_int nil) (bv_caret_elim formula-decl nil bv_caret nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (^ const-decl "bit" bv nil) (fill const-decl "bit" bv nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N!1 skolem-const-decl "posnat" bv_arith_int_caret nil) (below type-eq-decl nil nat_types nil) (i!1 skolem-const-decl "below[N!1]" bv_arith_int_caret nil)) 5090 2400 nil nil)) (in_rng_i_bv2int 0 (in_rng_i_bv2int-1 nil 3249241284 3249243130 ("" (skosimp*) (("" (lemma "in_small_rng") (("" (inst?) (("" (assert) (("" (case "bv2int(bv!1) = bv2int(fill[N!1 - i!1](bv!1 ^ (N!1 - 1)) o bv!1 ^ (i!1 - 1, 0))") (("1" (hide -2) (("1" (rewrite "bv2int_concat") (("1" (case-replace "bv!1 ^ (N!1 - 1) = FALSE") (("1" (rewrite "bv2int_fill_F[N!1-i!1]") (("1" (assert) (("1" (lemma "bit_cases") (("1" (inst -1 "bv!1 ^ (i!1 - 1)") (("1" (expand "b2n") (("1" (lift-if) (("1" (ground) (("1" (expand "^") (("1" (propax) nil))) ("2" (hide -1 -3 -4 1) (("2" (replace -1) (("2" (hide -1) (("2" (expand "in_rng_2s_comp") (("2" (typepred "bv2int(bv!1 ^ (i!1 - 1, 0))") (("2" (expand "minint") (("2" (expand "maxint") (("2" (expand "exp2" -3 1) (("2" (assert) nil))))))))))))))))))))))))))))))) ("2" (case-replace "bv!1 ^ (N!1 - 1) = TRUE") (("1" (rewrite "bv2int_fill_T[N!1-i!1]") (("1" (lemma "bit_cases") (("1" (inst -1 "bv!1 ^ (i!1 - 1)") (("1" (expand "b2n") (("1" (lift-if) (("1" (ground) (("1" (hide -2 -3 1 2 3) (("1" (replace -1) (("1" (hide -1) (("1" (expand "in_rng_2s_comp") (("1" (typepred "bv2int(bv!1 ^ (i!1 - 1, 0))") (("1" (expand "minint") (("1" (expand "maxint") (("1" (expand "exp2" -3 2) (("1" (assert) nil))))))))))))))))) ("2" (expand "^") (("2" (propax) nil))))))))))))))) ("2" (expand "b2n") (("2" (lift-if) (("2" (ground) nil))))))))))))) ("2" (assert) nil)))))))))) nil) proved ((in_small_rng formula-decl nil bv_arith_int_caret nil) (FALSE const-decl "bool" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (exp2 def-decl "posnat" exp2 nil) (in_rng_2s_comp const-decl "bool" bv_int nil) (b2n const-decl "nbit" bit nil) (bit_cases formula-decl nil bit nil) (bv2int_fill_F formula-decl nil bv_int nil) (bv2int_fill_T formula-decl nil bv_int nil) (TRUE const-decl "bool" booleans nil) (bv2int_concat formula-decl nil bv_arith_int_caret nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (fill const-decl "bit" bv nil) (^ const-decl "bit" bv nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (below type-eq-decl nil nat_types nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 3601 1700 nil nil)) (bv_caret_negate 0 (bv_caret_negate-1 nil 3249241284 3249243133 ("" (skosimp*) (("" (rewrite "bv_unary_minus") (("" (rewrite "bv_plus_caret") (("" (case-replace "(NOT bv1!1) ^ (m!1, 0) = NOT (bv1!1 ^ (m!1, 0))") (("1" (hide -1) (("1" (rewrite "bv_unary_minus") nil))) ("2" (hide 2) (("2" (apply-extensionality 1 :hide? t) (("2" (grind) nil)))))))))))) nil) proved ((bv_unary_minus formula-decl nil bv_arithmetic nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (below type-eq-decl nil nat_types nil) (NOT const-decl "bvec[N]" bv_bitwise nil) (bv_plus_caret formula-decl nil bv_arith_caret nil)) 2682 1270 nil nil)) (bv2int_in_rng_i_TCC1 0 (bv2int_in_rng_i_TCC1-1 nil 3249241284 3249243133 ("" (subtype-tcc) nil nil) proved ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (in_rng_2s_comp const-decl "bool" bv_int nil)) 308 150 nil nil)) (bv2int_in_rng_i_TCC2 0 (bv2int_in_rng_i_TCC2-1 nil 3249241284 3249243133 ("" (subtype-tcc) nil nil) proved ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (in_rng_2s_comp const-decl "bool" bv_int nil)) 314 160 nil nil)) (bv2int_in_rng_i_TCC3 0 (bv2int_in_rng_i_TCC3-1 nil 3249241284 3249243134 ("" (subtype-tcc) nil nil) proved ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (in_rng_2s_comp const-decl "bool" bv_int nil)) 337 150 nil nil)) (bv2int_in_rng_i 0 (bv2int_in_rng_i-1 nil 3249241284 3249243136 ("" (skosimp*) (("" (rewrite "bv2int_inj") (("" (hide 2) (("" (lemma "in_rng_i_bv2int") (("" (inst?) (("" (assert) (("" (rewrite "bv2int_concat") (("" (expand "b2n") (("" (lift-if) (("" (rewrite "bv_caret_elim") (("" (prop) (("1" (replace -1) (("1" (rewrite "bv2int_fill_T") (("1" (assert) nil))))) ("2" (case-replace "bv!1 ^ (n!1 - 1) = FALSE") (("1" (rewrite "bv2int_fill_F") (("1" (assert) nil))) ("2" (hide -1 -2 3) (("2" (assert) nil)))))))))))))))))))))))))) nil) proved ((AND const-decl "[bool, bool -> bool]" booleans nil) (bv2int_inj formula-decl nil bv_int nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (^ const-decl "bit" bv nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (in_rng_i_bv2int formula-decl nil bv_arith_int_caret nil) (b2n const-decl "nbit" bit nil) (bv_caret_elim formula-decl nil bv_caret nil) (FALSE const-decl "bool" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (bv2int_fill_F formula-decl nil bv_int nil) (bv2int_fill_T formula-decl nil bv_int nil) (bv2int_concat formula-decl nil bv_arith_int_caret nil)) 2426 1190 nil nil)) (bv2int_in_rng_i_top_TCC1 0 (bv2int_in_rng_i_top_TCC1-1 nil 3249241284 3249243137 ("" (subtype-tcc) nil nil) proved ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (in_rng_2s_comp const-decl "bool" bv_int nil)) 487 160 nil nil)) (bv2int_in_rng_i_top 0 (bv2int_in_rng_i_top-1 nil 3249241284 3249243138 ("" (skosimp*) (("" (lemma "bv2int_in_rng_i") (("" (inst?) (("" (assert) (("" (name-replace bv "fill[N!1 - n!1](bv!1 ^ (n!1 - 1))") (("" (replace -1) (("" (hide -1) (("" (hide -1) (("" (expand "^") (("" (apply-extensionality 1 :hide? t) (("" (expand "o ") (("" (propax) nil)))))))))))))))))))))) nil) proved ((bv2int_in_rng_i formula-decl nil bv_arith_int_caret nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (^ const-decl "bit" bv nil) (fill const-decl "bit" bv nil) (= const-decl "[T, T -> boolean]" equalities nil) (below type-eq-decl nil nat_types nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1462 690 nil nil)) (bv2int_of_sign_extension 0 (bv2int_of_sign_extension-1 nil 3249241284 3249243139 ("" (skosimp*) (("" (lemma "bv2int_in_rng_i") (("" (inst?) (("" (assert) (("" (lemma "sign_extend_lem") (("" (inst -1 "n!1" "bv!1^(n!1-1,0)" "N!1") (("" (rewrite "sign_extend_def") (("" (case "fill[N!1 - n!1](bv!1 ^ (n!1 - 1, 0) ^ (n!1 - 1))
                      o bv!1 ^ (n!1 - 1, 0) = fill[N!1 - n!1](bv!1 ^ (n!1 - 1)) o bv!1 ^ (n!1 - 1, 0)") (("1" (replace -1) (("1" (hide -1) (("1" (replace -2 -1 rl) (("1" (assert) nil))))))) ("2" (hide -1 -2 -3 2) (("2" (expand "^") (("2" (propax) nil)))))))))))))))))))) nil) proved ((bv2int_in_rng_i formula-decl nil bv_arith_int_caret nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (above nonempty-type-eq-decl nil integers nil) (^ const-decl "bit" bv nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (= const-decl "[T, T -> boolean]" equalities nil) (sign_extend_def formula-decl nil bv_extend nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (sign_extend_lem formula-decl nil bv_arith_extend nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1246 590 nil nil)))
