(bv_arith_int_caret
 (bv_sign_of_frag_neg_TCC1 0
  (bv_sign_of_frag_neg_TCC1-1 nil 3341534531 3341534531
   ("" (subtype-tcc) nil nil) proved
   ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) 68 80 nil nil))
 (bv_sign_of_frag_neg_TCC2 0
  (bv_sign_of_frag_neg_TCC2-1 nil 3341534531 3341534531
   ("" (subtype-tcc) nil nil) proved
   ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) 93 60 nil nil))
 (bv_sign_of_frag_neg_TCC3 0
  (bv_sign_of_frag_neg_TCC3-1 nil 3341534531 3341534531
   ("" (subtype-tcc) nil nil) proved
   ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) 134 130 nil nil))
 (bv_sign_of_frag_neg 0
  (bv_sign_of_frag_neg-1 nil 3341534590 3341534653
   ("" (skosimp)
    (("" (use "bv2int_top_bit[N!1]")
      (("" (lemma "bv2int_top_bit[N!1 - i!1]")
        (("" (inst?) (("" (expand "^") (("" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bv2int_top_bit formula-decl nil bv_int nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (^ const-decl "bit" bv nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil))
   63325 1970 t shostak))
 (bv_sign_of_frag_pos_TCC1 0
  (bv_sign_of_frag_pos_TCC1-1 nil 3341534531 3341534531
   ("" (subtype-tcc) nil nil) proved
   ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) 70 70 nil nil))
 (bv_sign_of_frag_pos_TCC2 0
  (bv_sign_of_frag_pos_TCC2-1 nil 3341534531 3341534532
   ("" (subtype-tcc) nil nil) proved
   ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) 100 70 nil nil))
 (bv_sign_of_frag_pos_TCC3 0
  (bv_sign_of_frag_pos_TCC3-1 nil 3341534531 3341534532
   ("" (subtype-tcc) nil nil) proved
   ((bv2nat const-decl "below(exp2(N))" bv_nat nil)) 138 140 nil nil))
 (bv_sign_of_frag_pos 0
  (bv_sign_of_frag_pos-1 nil 3341534656 3341534696
   ("" (skosimp)
    (("" (use "bv2int_top_bit[N!1]")
      (("" (lemma "bv2int_top_bit[N!1 - i!1]")
        (("" (inst?) (("" (expand "^") (("" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bv2int_top_bit formula-decl nil bv_int nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (^ const-decl "bit" bv nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil))
   39852 1540 t shostak))
 (bv2int_top_TCC1 0
  (bv2int_top_TCC1-1 nil 3341534531 3341534532
   ("" (subtype-tcc) nil nil) proved nil 32 30 nil nil))
 (bv2int_top_TCC2 0
  (bv2int_top_TCC2-1 nil 3341534531 3341534532
   ("" (subtype-tcc) nil nil) proved nil 34 30 nil nil))
 (bv2int_top_TCC3 0
  (bv2int_top_TCC3-1 nil 3341534531 3341534532
   ("" (subtype-tcc) nil nil) proved nil 127 100 nil nil))
 (bv2int_top 0
  (bv2int_top-1 nil 3341534698 3341534949
   ("" (skolem!)
    (("" (use "bv_shift")
      (("" (rewrite "bv2int_lem")
        (("" (rewrite "bv2int_lem")
          (("" (replace -1)
            (("" (hide -1)
              (("" (expand "b2n")
                (("" (lift-if)
                  (("" (lift-if)
                    (("" (expand "div" 1 4)
                      (("" (ground)
                        (("1" (hide -1)
                          (("1" (expand "div")
                            (("1" (lemma "floor_plus_int")
                              (("1"
                                (inst
                                 -
                                 "-exp2(N!1 - i!1)"
                                 "bv2nat(bv!1) / exp2(i!1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1 * rl)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (lemma "exp2_sum")
                                        (("1"
                                          (inst - "N!1 - i!1" "i!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "bv_caret_elim") nil nil)
                         ("3" (rewrite "bv_caret_elim") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bv_shift formula-decl nil bv_arith_caret nil)
    (below type-eq-decl nil nat_types nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div const-decl "integer" div nil)
    (bv_caret_elim formula-decl nil bv_caret nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (exp2_sum formula-decl nil exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (exp2 def-decl "posnat" exp2 nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (b2n const-decl "nbit" bit nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (bv2int_lem formula-decl nil bv_int nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   108805 5210 t shostak))
 (bv2int_concat_TCC1 0
  (bv2int_concat_TCC1-1 nil 3341534531 3341534532
   ("" (subtype-tcc) nil nil) proved nil 32 20 nil nil))
 (bv2int_concat_TCC2 0
  (bv2int_concat_TCC2-1 nil 3341534531 3341534532
   ("" (subtype-tcc) nil nil) proved nil 30 30 nil nil))
 (bv2int_concat 0
  (bv2int_concat-1 nil 3341534958 3341535013
   ("" (skolem!)
    (("" (use "bv2nat_concat")
      (("" (rewrite "bv2int_lem")
        (("" (rewrite "bv2int_lem")
          (("" (rewrite "bv2int_lem")
            (("" (lemma "bv_concat_top_bit")
              (("" (inst - "m!1" "n!1" "bvn!1" "bvm!1")
                (("" (rewrite "exp2_sum") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bv2nat_concat formula-decl nil bv_arith_concat nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bv_concat_top_bit formula-decl nil bv_concat nil)
    (exp2_sum formula-decl nil exp2 nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (bv2int_lem formula-decl nil bv_int nil))
   55070 3480 t shostak))
 (bv2int_bottom_TCC1 0
  (bv2int_bottom_TCC1-1 nil 3341534531 3341534532
   ("" (subtype-tcc) nil nil) proved nil 36 40 nil nil))
 (bv2int_bottom 0
  (bv2int_bottom-1 nil 3341535025 3341535342
   ("" (skolem!)
    (("" (rewrite "bv2int_lem[i!1 + 1]")
      (("" (use "bv_bottom")
        (("" (rewrite "bv_caret_elim")
          (("" (assert)
            (("" (rewrite "bv2int_lem[N!1]")
              (("" (assert)
                (("" (lemma "exp2_sum")
                  (("" (inst - "N!1 - i!1 - 1" "i!1 + 1")
                    (("" (assert)
                      (("" (replace -1)
                        (("" (hide -1)
                          (("" (lemma "mod_sum")
                            ((""
                              (inst - "bv2nat(bv!1)" "exp2(1 + i!1)"
                               "-exp2(N!1 - 1 - i!1)")
                              ((""
                                (expand "b2n")
                                ((""
                                  (lift-if)
                                  (("" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bv2int_lem formula-decl nil bv_int nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (bv_caret_elim formula-decl nil bv_caret nil)
    (exp2_sum formula-decl nil exp2 nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil) (b2n const-decl "nbit" bit nil)
    (mod_sum formula-decl nil mod nil)
    (bv_bottom formula-decl nil bv_arith_caret nil))
   63732 4240 t shostak))
 (in_small_rng_TCC1 0
  (in_small_rng_TCC1-1 nil 3341534531 3341534532
   ("" (subtype-tcc) nil nil) proved
   ((bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (in_rng_2s_comp const-decl "bool" bv_int nil))
   228 220 nil nil))
 (in_small_rng_TCC2 0
  (in_small_rng_TCC2-1 nil 3341534531 3341534533
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (in_rng_2s_comp const-decl "bool" bv_int nil))
   416 370 nil nil))
 (in_small_rng_TCC3 0
  (in_small_rng_TCC3-1 nil 3341534531 3341534533
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (in_rng_2s_comp const-decl "bool" bv_int nil))
   383 350 nil nil))
 (in_small_rng 0
  (in_small_rng-1 nil 3341535363 3341535724
   ("" (skosimp)
    (("" (assert)
      (("" (use "bv2int_inj[N!1]")
        (("" (assert)
          (("" (hide 2)
            (("" (rewrite "bv2int_concat")
              (("" (rewrite "bv_caret_elim")
                (("" (rewrite "bv2int_bottom")
                  (("" (expand* "in_rng_2s_comp" "maxint" "minint")
                    (("" (flatten)
                      (("" (use "bv2int_top_bit[N!1]")
                        (("" (ground)
                          (("1" (rewrite "bv2int_fill_F[N!1 - i!1]")
                            (("1" (assert)
                              (("1"
                                (rewrite "mod_lt_int")
                                (("1"
                                  (expand "exp2" 1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "bv2int_fill_T[N!1 - i!1]")
                            (("2" (assert)
                              (("2"
                                (rewrite "mod_lt_int")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (expand "exp2" 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (bv2int_concat formula-decl nil bv_arith_int_caret nil)
    (bv2int_bottom formula-decl nil bv_arith_int_caret nil)
    (mod_lt_int formula-decl nil mod nil)
    (rng_2s_comp type-eq-decl nil bv_int nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2int_fill_F formula-decl nil bv_int nil)
    (bv2int_fill_T formula-decl nil bv_int nil)
    (bv2int_top_bit formula-decl nil bv_int nil)
    (in_rng_2s_comp const-decl "bool" bv_int nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (bv_caret_elim formula-decl nil bv_caret nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (fill const-decl "bit" bv nil) (^ const-decl "bit" bv nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bv2int_inj formula-decl nil bv_int nil))
   73347 5550 t shostak))
 (in_rng_i_bv2int 0
  (in_rng_i_bv2int-1 nil 3341535739 3341535983
   ("" (skosimp)
    (("" (use "in_small_rng")
      (("" (assert)
        ((""
          (case "bv2int(bv!1) = bv2int(fill[N!1 - i!1](bv!1 ^ (N!1 - 1)) o bv!1 ^ (i!1 - 1, 0))")
          (("1" (hide -2)
            (("1" (rewrite "bv2int_concat")
              (("1" (case-replace "bv!1 ^ (N!1 - 1) = FALSE")
                (("1" (rewrite "bv2int_fill_F[N!1 - i!1]")
                  (("1" (assert)
                    (("1" (lemma "bit_cases")
                      (("1" (inst - "bv!1 ^ (i!1 - 1)")
                        (("1" (expand "b2n")
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1"
                                (expand "^")
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (hide -1 -3 -4 1)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (expand "in_rng_2s_comp")
                                      (("2"
                                        (typepred
                                         "bv2int(bv!1 ^ (i!1 - 1, 0))")
                                        (("2"
                                          (expand* "minint" "maxint")
                                          (("2"
                                            (expand "exp2" -3 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case-replace "bv!1 ^ (N!1 - 1) = TRUE")
                  (("1" (rewrite "bv2int_fill_T[N!1 - i!1]")
                    (("1" (lemma "bit_cases")
                      (("1" (inst - "bv!1 ^ (i!1 - 1)")
                        (("1" (expand "b2n")
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1"
                                (hide -2 -3 1 2 3)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (expand "in_rng_2s_comp")
                                      (("1"
                                        (typepred
                                         "bv2int(bv!1 ^ (i!1 - 1, 0))")
                                        (("1"
                                          (expand* "minint" "maxint")
                                          (("1"
                                            (expand "exp2" -3 2)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "^")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "b2n")
                    (("2" (lift-if) (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((in_small_rng formula-decl nil bv_arith_int_caret nil)
    (below type-eq-decl nil nat_types nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "bit" bv nil) (fill const-decl "bit" bv nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil)
    (rng_2s_comp type-eq-decl nil bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (minint const-decl "int" bv_int nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bv2int_concat formula-decl nil bv_arith_int_caret nil)
    (TRUE const-decl "bool" booleans nil)
    (bv2int_fill_T formula-decl nil bv_int nil)
    (bv2int_fill_F formula-decl nil bv_int nil)
    (bit_cases formula-decl nil bit nil)
    (b2n const-decl "nbit" bit nil)
    (in_rng_2s_comp const-decl "bool" bv_int nil)
    (exp2 def-decl "posnat" exp2 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil))
   244761 6620 t shostak))
 (bv_caret_negate 0
  (bv_caret_negate-1 nil 3341536004 3341536115
   ("" (skolem!)
    (("" (rewrite "bv_unary_minus")
      (("" (rewrite "bv_plus_caret")
        ((""
          (case-replace
           "(NOT bv1!1) ^ (m!1, 0) = NOT (bv1!1 ^ (m!1, 0))")
          (("1" (rewrite "bv_unary_minus") nil nil)
           ("2" (grind-with-ext) nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bv_unary_minus formula-decl nil bv_arithmetic nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "bvec[N]" bv_bitwise nil)
    (bv_plus_caret formula-decl nil bv_arith_caret nil))
   38756 2960 t shostak))
 (bv2int_in_rng_i_TCC1 0
  (bv2int_in_rng_i_TCC1-1 nil 3341534531 3341534533
   ("" (subtype-tcc) nil nil) proved
   ((bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (in_rng_2s_comp const-decl "bool" bv_int nil))
   149 150 nil nil))
 (bv2int_in_rng_i_TCC2 0
  (bv2int_in_rng_i_TCC2-1 nil 3341534531 3341534533
   ("" (subtype-tcc) nil nil) proved
   ((bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (in_rng_2s_comp const-decl "bool" bv_int nil))
   212 190 nil nil))
 (bv2int_in_rng_i_TCC3 0
  (bv2int_in_rng_i_TCC3-1 nil 3341534531 3341534534
   ("" (subtype-tcc) nil nil) proved
   ((bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (in_rng_2s_comp const-decl "bool" bv_int nil))
   147 140 nil nil))
 (bv2int_in_rng_i 0
  (bv2int_in_rng_i-1 nil 3341536127 3341536279
   ("" (skosimp)
    (("" (rewrite "bv2int_inj")
      (("" (hide 2)
        (("" (use "in_rng_i_bv2int")
          (("" (assert)
            (("" (rewrite "bv2int_concat")
              (("" (expand "b2n")
                (("" (lift-if)
                  (("" (rewrite "bv_caret_elim")
                    (("" (ground)
                      (("1" (rewrite "bv2int_fill_T")
                        (("1" (assert) nil nil)) nil)
                       ("2" (rewrite "bv2int_fill_F")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bv2int_inj formula-decl nil bv_int nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (below type-eq-decl nil nat_types nil)
    (fill const-decl "bit" bv nil) (^ const-decl "bit" bv nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (in_rng_i_bv2int formula-decl nil bv_arith_int_caret nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bv2int_concat formula-decl nil bv_arith_int_caret nil)
    (bv2int_fill_T formula-decl nil bv_int nil)
    (bv2int_fill_F formula-decl nil bv_int nil)
    (bv_caret_elim formula-decl nil bv_caret nil)
    (b2n const-decl "nbit" bit nil))
   43366 3440 t shostak))
 (bv2int_in_rng_i_top_TCC1 0
  (bv2int_in_rng_i_top_TCC1-1 nil 3341534531 3341534534
   ("" (subtype-tcc) nil nil) proved
   ((bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (in_rng_2s_comp const-decl "bool" bv_int nil))
   175 150 nil nil))
 (bv2int_in_rng_i_top 0
  (bv2int_in_rng_i_top-1 nil 3341536296 3341536376
   ("" (skosimp)
    (("" (use "bv2int_in_rng_i")
      (("" (assert)
        (("" (name-replace bv "fill[N!1 - n!1](bv!1 ^ (n!1 - 1))")
          (("" (replace -1)
            (("" (apply-extensionality :hide? t)
              (("" (expand* "^" "o") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bv2int_in_rng_i formula-decl nil bv_arith_int_caret nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fill const-decl "bit" bv nil) (^ const-decl "bit" bv nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil))
   79874 2650 t shostak))
 (bv2int_of_sign_extension 0
  (bv2int_of_sign_extension-1 nil 3341536389 3341536497
   ("" (skosimp)
    (("" (use "bv2int_in_rng_i")
      (("" (assert)
        (("" (lemma "sign_extend_lem")
          (("" (inst - "n!1" "bv!1 ^ (n!1 - 1, 0)" "N!1")
            (("" (rewrite "sign_extend_def")
              (("" (expand "^") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bv2int_in_rng_i formula-decl nil bv_arith_int_caret nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sign_extend_lem formula-decl nil bv_arith_extend nil)
    (sign_extend_def formula-decl nil bv_extend nil)
    (^ const-decl "bit" bv nil)
    (above nonempty-type-eq-decl nil integers nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil))
   24234 1460 t shostak)))

