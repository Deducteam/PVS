(bv_constants (h0_lem 0 (h0_lem-1 nil 3249241285 3249243095 ("" (apply-extensionality :hide? t) (("" (grind) nil)) nil) proved ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (h0 const-decl "bvec[4]" bv_constants nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (b0 const-decl "[below(1) -> bit]" bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 322 160 nil nil)) (h1_lem 0 (h1_lem-1 nil 3249241285 3249243095 ("" (apply-extensionality :hide? t) (("" (grind) nil)) nil) proved ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (h1 const-decl "bvec[4]" bv_constants nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (b0 const-decl "[below(1) -> bit]" bit nil) (b1 const-decl "[below(1) -> bit]" bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 329 170 nil nil)) (h2_lem 0 (h2_lem-1 nil 3249241285 3249243096 ("" (apply-extensionality :hide? t) (("" (grind) nil)) nil) proved ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (h2 const-decl "bvec[4]" bv_constants nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (b0 const-decl "[below(1) -> bit]" bit nil) (b1 const-decl "[below(1) -> bit]" bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 328 170 nil nil)) (h3_lem 0 (h3_lem-1 nil 3249241285 3249243097 ("" (apply-extensionality :hide? t) (("" (grind) nil)) nil) proved ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (h3 const-decl "bvec[4]" bv_constants nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (b0 const-decl "[below(1) -> bit]" bit nil) (b1 const-decl "[below(1) -> bit]" bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 789 290 nil nil)) (h4_lem 0 (h4_lem-1 nil 3249241285 3249243097 ("" (apply-extensionality :hide? t) (("" (grind) nil)) nil) proved ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (h4 const-decl "bvec[4]" bv_constants nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (b0 const-decl "[below(1) -> bit]" bit nil) (b1 const-decl "[below(1) -> bit]" bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 337 180 nil nil)) (h5_lem 0 (h5_lem-1 nil 3249241285 3249243098 ("" (apply-extensionality :hide? t) (("" (grind) nil)) nil) proved ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (h5 const-decl "bvec[4]" bv_constants nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (b0 const-decl "[below(1) -> bit]" bit nil) (b1 const-decl "[below(1) -> bit]" bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 640 330 nil nil)) (h6_lem 0 (h6_lem-1 nil 3249241285 3249243098 ("" (apply-extensionality :hide? t) (("" (grind) (("1" (postpone) nil) ("2" (postpone) nil) ("3" (postpone) nil)))) nil) proved ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (h6 const-decl "bvec[4]" bv_constants nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (b0 const-decl "[below(1) -> bit]" bit nil) (b1 const-decl "[below(1) -> bit]" bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 896 330 nil nil)) (h7_lem 0 (h7_lem-1 nil 3249241285 3249243099 ("" (apply-extensionality :hide? t) (("" (grind) nil)) nil) proved ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (h7 const-decl "bvec[4]" bv_constants nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (b0 const-decl "[below(1) -> bit]" bit nil) (b1 const-decl "[below(1) -> bit]" bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 335 180 nil nil)) (h8_lem 0 (h8_lem-1 nil 3249241285 3249243099 ("" (apply-extensionality :hide? t) (("" (grind) nil)) nil) proved ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (h8 const-decl "bvec[4]" bv_constants nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (b1 const-decl "[below(1) -> bit]" bit nil) (b0 const-decl "[below(1) -> bit]" bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 331 180 nil nil)) (h9_lem 0 (h9_lem-1 nil 3249241285 3249243100 ("" (apply-extensionality :hide? t) (("" (grind) (("1" (postpone) nil) ("2" (postpone) nil) ("3" (postpone) nil)))) nil) proved ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (h9 const-decl "bvec[4]" bv_constants nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (b1 const-decl "[below(1) -> bit]" bit nil) (b0 const-decl "[below(1) -> bit]" bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 646 330 nil nil)) (hA_lem 0 (hA_lem-1 nil 3249241285 3249243101 ("" (apply-extensionality :hide? t) (("" (grind) (("1" (postpone) nil) ("2" (postpone) nil)))) nil) proved ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (hA const-decl "bvec[4]" bv_constants nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (b1 const-decl "[below(1) -> bit]" bit nil) (b0 const-decl "[below(1) -> bit]" bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 834 340 nil nil)) (hB_lem 0 (hB_lem-1 nil 3249241285 3249243101 ("" (apply-extensionality :hide? t) (("" (grind) (("" (postpone) nil)))) nil) proved ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (hB const-decl "bvec[4]" bv_constants nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (b1 const-decl "[below(1) -> bit]" bit nil) (b0 const-decl "[below(1) -> bit]" bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 337 180 nil nil)) (hC_lem 0 (hC_lem-1 nil 3249241285 3249243102 ("" (apply-extensionality :hide? t) (("" (grind) nil)) nil) proved ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (hC const-decl "bvec[4]" bv_constants nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (b1 const-decl "[below(1) -> bit]" bit nil) (b0 const-decl "[below(1) -> bit]" bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 600 280 nil nil)) (hD_lem 0 (hD_lem-1 nil 3249241285 3249243102 ("" (apply-extensionality :hide? t) (("" (grind) (("1" (postpone) nil) ("2" (postpone) nil)))) nil) proved ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (hD const-decl "bvec[4]" bv_constants nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (b1 const-decl "[below(1) -> bit]" bit nil) (b0 const-decl "[below(1) -> bit]" bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 330 180 nil nil)) (hE_lem 0 (hE_lem-1 nil 3249241285 3249243102 ("" (apply-extensionality :hide? t) (("" (grind) (("1" (postpone) nil) ("2" (postpone) nil)))) nil) proved ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (hE const-decl "bvec[4]" bv_constants nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (b1 const-decl "[below(1) -> bit]" bit nil) (b0 const-decl "[below(1) -> bit]" bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 329 170 nil nil)) (hF_lem 0 (hF_lem-1 nil 3249241285 3249243103 ("" (apply-extensionality :hide? t) (("" (grind) nil)) nil) proved ((bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (hF const-decl "bvec[4]" bv_constants nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (b1 const-decl "[below(1) -> bit]" bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 509 160 nil nil)))
