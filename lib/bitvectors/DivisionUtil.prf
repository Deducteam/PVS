(DivisionUtil
 (leftshift_with_TCC1 0
  (leftshift_with_TCC1-1 nil 3342400478 3342400478
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   133 120 nil nil))
 (leftshift_with_TCC2 0
  (leftshift_with_TCC2-1 nil 3342400478 3342400478
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil))
   181 180 nil nil))
 (leftshift_with 0
  (leftshift_with-1 nil 3342400512 3342400990
   ("" (skosimp)
    (("" (assert)
      (("" (lemma "bv2nat_upperbound[n!1]")
        (("" (inst - "bv!1" "n!1 - 1")
          (("" (assert)
            (("" (inst - "n!1 - 1")
              (("" (assert)
                (("" (hide -2)
                  (("" (rewrite "bv2nat_as_sum[n!1]")
                    (("" (rewrite "bv2nat_as_sum[n!1]")
                      (("" (expand "sigma" 2 2)
                        (("" (assert)
                          (("" (expand "extend" 2 2)
                            (("" (expand "b2n" 2 4)
                              ((""
                                (lemma "sigma_split")
                                ((""
                                  (inst?)
                                  ((""
                                    (inst - 0)
                                    ((""
                                      (assert)
                                      ((""
                                        (expand "sigma" -1 2)
                                        ((""
                                          (expand "extend" -1 2)
                                          ((""
                                            (expand "exp2" -1 3)
                                            ((""
                                              (assert)
                                              ((""
                                                (replace -1)
                                                ((""
                                                  (hide -1)
                                                  ((""
                                                    (lemma
                                                     "sigma_shift")
                                                    ((""
                                                      (inst
                                                       -
                                                       "extend(LAMBDA (ii: below(n!1)): exp2(ii) * b2n(left_shift(1, bv!1) WITH [(0) := b!1](ii)))"
                                                       "n!1 - 2"
                                                       0
                                                       1)
                                                      ((""
                                                        (assert)
                                                        ((""
                                                          (replace -1)
                                                          ((""
                                                            (hide -1)
                                                            ((""
                                                              (use
                                                               "sigma_mult")
                                                              ((""
                                                                (replace
                                                                 -1
                                                                 *
                                                                 rl)
                                                                ((""
                                                                  (hide
                                                                   -1)
                                                                  ((""
                                                                    (lemma
                                                                     "sigma_restrict_eq")
                                                                    ((""
                                                                      (inst
                                                                       -
                                                                       "LAMBDA (n: nat): extend(LAMBDA (ii: below(n!1)): exp2(ii) * b2n(left_shift(1, bv!1) WITH [(0) := b!1](ii)))(1 + n)"
                                                                       "LAMBDA (n: nat): 2 * extend(LAMBDA (ii: below(n!1)): exp2(ii) * b2n(bv!1(ii)))(n)"
                                                                       "n!1 - 2"
                                                                       0)
                                                                      ((""
                                                                        (assert)
                                                                        ((""
                                                                          (hide
                                                                           3)
                                                                          ((""
                                                                            (grind-with-ext)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (b2n const-decl "nbit" bit nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil) (nbit type-eq-decl nil bit nil)
    (sigma_mult formula-decl nil sums nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (restrict const-decl "[nat -> nat]" sums nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (n!1 skolem-const-decl "nat" DivisionUtil nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (sigma_restrict_eq formula-decl nil sums nil)
    (sigma_shift formula-decl nil sums nil)
    (sigma_split formula-decl nil sums nil)
    (extend const-decl "[nat -> nat]" bv_sum nil)
    (sigma def-decl "nat" sums nil)
    (bv2nat_as_sum formula-decl nil bv_sum nil)
    (left_shift const-decl "bvec[N]" bv_shift nil)
    (bv2nat_upperbound formula-decl nil BitvectorUtil nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   145201 8170 t shostak))
 (bv2nat_minus3 0
  (bv2nat_minus3-1 nil 3342401009 3342401046
   ("" (skosimp)
    (("" (expand "-")
      (("" (rewrite "bv_add[n!1]")
        (("" (rewrite "bv2nat_minus_bv[n!1]") (("" (reduce) nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((- const-decl "bvec[N]" bv_arithmetic nil)
    (bv2nat_minus_bv formula-decl nil bv_arithmetic nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}"
       bv_arithmetic nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil)
    (rng_2s_comp type-eq-decl nil bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (minint const-decl "int" bv_int nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bv_add formula-decl nil bv_arith_nat nil))
   36959 1420 t shostak)))

