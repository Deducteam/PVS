(BitvectorMultiplication
 (IMP_BitvectorUtil_TCC1 0
  (IMP_BitvectorUtil_TCC1-1 nil 3342224217 3342224251
   ("" (lemma "N_size") (("" (propax) nil nil)) nil) proved-complete
   ((N_size formula-decl nil BitvectorMultiplication nil)) 5154 140 t
   nil))
 (times_rec_TCC1 0
  (times_rec_TCC1-1 nil 3342224217 3342224217
   ("" (subtype-tcc) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   78 80 nil nil))
 (times_rec_TCC2 0
  (times_rec_TCC2-1 nil 3342224217 3342224217
   ("" (subtype-tcc) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   146 110 nil nil))
 (times_rec_TCC3 0
  (times_rec_TCC3-1 nil 3342224217 3342224217
   ("" (termination-tcc) nil nil) proved-complete nil 58 50 nil nil))
 (times_rec_TCC4 0
  (times_rec_TCC4-1 nil 3342224217 3342224218
   ("" (subtype-tcc) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   143 110 nil nil))
 (times_rec_TCC5 0
  (times_rec_TCC5-1 nil 3342224217 3342224218
   ("" (termination-tcc) nil nil) proved-complete nil 54 50 nil nil))
 (times_rec_zero_right 0
  (times_rec_zero_right-1 nil 3342224295 3342224402
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (expand "times_rec" +)
        (("2" (inst?)
          (("2" (replace -1)
            (("2" (hide -1)
              (("2" (lemma "bv_add_fill_F[N]")
                (("2" (inst - "left_shift(1, fill[N](FALSE))")
                  (("2" (rewrite "bv_add_comm[N]")
                    (("2" (replace -1)
                      (("2" (hide -1) (("2" (grind-with-ext) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((right_shift const-decl "bvec[N]" bv_shift nil)
    (left_shift const-decl "bvec[N]" bv_shift nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (bv_add_comm formula-decl nil bv_arith_nat nil)
    (bv_add_fill_F formula-decl nil bv_arith_nat nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (times_rec def-decl "bvec[N]" BitvectorMultiplication nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   107403 2670 t shostak))
 (times_rec_zero_left 0
  (times_rec_zero_left-1 nil 3342224413 3342891313
   ("" (induct "n")
    (("1" (expand "times_rec") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "times_rec" +)
        (("2" (expand "fill" 1 1)
          (("2"
            (case-replace
             "right_shift(1, fill[N](FALSE)) = fill[N](FALSE)")
            (("1" (inst?)
              (("1" (replace -2)
                (("1" (hide-all-but 1) (("1" (grind-with-ext) nil nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind-with-ext) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (left_shift const-decl "bvec[N]" bv_shift nil)
    (right_shift const-decl "bvec[N]" bv_shift nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (times_rec def-decl "bvec[N]" BitvectorMultiplication nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   96186 2890 t shostak))
 (times_rec_repeat 0
  (times_rec_repeat-1 nil 3342224505 3342224729
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (expand "exp2")
        (("1" (use "bv2nat_eq0[N]")
          (("1" (assert)
            (("1" (replace -1)
              (("1" (rewrite "times_rec_zero_left")
                (("1" (rewrite "times_rec_zero_left") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "times_rec" +)
        (("2" (inst - "right_shift(1, bv1!1)" "bv2!1" "m!1")
          (("2" (use "bv2nat_rightshift_upperbound")
            (("1" (expand "exp2" -1)
              (("1" (expand "exp2" -1)
                (("1" (expand "exp2" -3)
                  (("1" (assert)
                    (("1" (replace -2) (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((right_shift const-decl "bvec[N]" bv_shift nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (left_shift const-decl "bvec[N]" bv_shift nil)
    (fill const-decl "bit" bv nil)
    (bv2nat_rightshift_upperbound formula-decl nil BitvectorUtil nil)
    (bv2nat_eq0 formula-decl nil bv_nat nil)
    (times_rec_zero_left formula-decl nil BitvectorMultiplication nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (times_rec def-decl "bvec[N]" BitvectorMultiplication nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   223465 6000 t shostak))
 (times_zero_first 0
  (times_zero_first-1 nil 3342232363 3342232413
   ("" (skolem!)
    (("" (expand "*") (("" (rewrite "times_rec_zero_left") nil nil))
      nil))
    nil)
   proved-complete
   ((* const-decl "bvec[N]" BitvectorMultiplication nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (times_rec_zero_left formula-decl nil BitvectorMultiplication nil))
   50197 360 t shostak))
 (times_zero_second 0
  (times_zero_second-1 nil 3342232416 3342232434
   ("" (skolem!)
    (("" (expand "*") (("" (rewrite "times_rec_zero_right") nil nil))
      nil))
    nil)
   proved-complete
   ((* const-decl "bvec[N]" BitvectorMultiplication nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (times_rec_zero_right formula-decl nil BitvectorMultiplication
     nil))
   17748 350 t shostak))
 (times_rec_inc_right_TCC1 0
  (times_rec_inc_right_TCC1-1 nil 3342224217 3342224218
   ("" (subtype-tcc) nil nil) proved-complete nil 151 130 nil nil))
 (times_rec_inc_right_TCC2 0
  (times_rec_inc_right_TCC2-1 nil 3342224217 3342224218
   ("" (subtype-tcc) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (below type-eq-decl nil naturalnumbers nil))
   334 300 nil nil))
 (times_rec_inc_right_TCC3 0
  (times_rec_inc_right_TCC3-1 nil 3342224217 3342224218
   ("" (subtype-tcc) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (below type-eq-decl nil naturalnumbers nil))
   304 300 nil nil))
 (times_rec_inc_right 0
  (times_rec_inc_right-1 nil 3342232445 3342891998
   ("" (lemma "N_size")
    (("" (induct "n")
      (("1" (skosimp*)
        (("1" (use "bv_add_fill_F[N]") (("1" (grind) nil nil)) nil))
        nil)
       ("2" (skosimp*)
        (("2" (assert)
          (("2" (expand "times_rec" +)
            (("2" (inst - "right_shift(1, bv1!1)" "bv2!1")
              (("2" (assert)
                (("2" (lift-if -)
                  (("2" (ground)
                    (("1" (use "bv_add_fill_F[N]")
                      (("1" (replace -1)
                        (("1" (replace -3)
                          (("1" (hide -1 -3)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (replace*)
                                  (("1"
                                    (name-replace
                                     "tmp"
                                     "left_shift(1, times_rec(right_shift(1, bv1!1), bv2!1, 0))")
                                    (("1"
                                      (lemma "bv_add_two_consts[N]")
                                      (("1"
                                        (inst - "bv2!1" "tmp" 1 0)
                                        (("1"
                                          (lemma "bv_plus0[N]")
                                          (("1"
                                            (inst - "tmp" 0)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (hide -1 -2 -5)
                                                    (("1"
                                                      (lemma
                                                       "bv2nat_elim[N]")
                                                      (("1"
                                                        (expand*
                                                         "o"
                                                         "^"
                                                         "fill")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "bv2!1 + tmp"
                                                             "LAMBDA (nm: below(N - 1 - jb!1 + (1 + jb!1))): IF nm < 1 + jb!1 THEN TRUE ELSE FALSE ENDIF")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               *
                                                               rl)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (case-replace
                                                                   "bv2nat((LAMBDA (nm: below(N - 1 - jb!1 + (1 + jb!1))): IF nm < 1 + jb!1 THEN TRUE ELSE FALSE ENDIF)) = 1")
                                                                  (("1"
                                                                    (hide
                                                                     2)
                                                                    (("1"
                                                                      (use
                                                                       "bv2nat_lem_rule")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         *
                                                                         rl)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (expand*
                                                                             "b2n"
                                                                             "^")
                                                                            (("1"
                                                                              (lemma
                                                                               "bv2nat_fill_F[N - 1]")
                                                                              (("1"
                                                                                (expand
                                                                                 "fill")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1)
                                  (("2"
                                    (expand* "o" "^" "fill")
                                    (("2"
                                      (lemma "bv_add_fill_F[N]")
                                      (("2"
                                        (inst
                                         -
                                         "left_shift(1, times_rec(right_shift(1, bv1!1), bv2!1, 0))")
                                        (("2"
                                          (expand "fill")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1)
                      (("2" (hide -1)
                        (("2" (lift-if)
                          (("2" (ground)
                            (("1" (rewrite "leftshift1_add")
                              (("1"
                                (lemma "bv_add_two_consts[N]")
                                (("1"
                                  (inst
                                   -
                                   "bv2!1"
                                   "left_shift(1, times_rec(right_shift(1, bv1!1), bv2!1, jb!1)) + left_shift(1, (fill[N - jb!1](FALSE) o right_shift(1, bv1!1) ^ (jb!1 - 1, 0)))"
                                   1
                                   0)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "bv_plus0[N]")
                                      (("1"
                                        (inst
                                         -
                                         "left_shift(1, times_rec(right_shift(1, bv1!1), bv2!1, jb!1)) + left_shift(1, (fill[N - jb!1](FALSE) o right_shift(1, bv1!1) ^ (jb!1 - 1, 0)))"
                                         0)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (hide -1 -2)
                                              (("1"
                                                (rewrite
                                                 "bv_add_assoc")
                                                (("1"
                                                  (rewrite
                                                   "bv_add_const_assoc"
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (case-replace
                                                     "left_shift(1, (fill[N - jb!1](FALSE) o right_shift(1, bv1!1) ^ (jb!1 - 1, 0))) + 1 = fill[N - 1 - jb!1](FALSE) o bv1!1 ^ (jb!1, 0)")
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (case
                                                         "FORALL (b: bvec[N]): NOT b(0) IMPLIES b + 1 = LAMBDA (i: below(N)): i = 0 OR b(i)")
                                                        (("1"
                                                          (grind-with-ext)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (use
                                                               "bv2nat_inj[N]")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (case-replace
                                                                     "bv2nat[N](b!1 + 1) = bv2nat[N](b!1) + 1")
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "bv2nat")
                                                                        (("1"
                                                                          (case
                                                                           "FORALL (n: below(N+1)): n > 0 IMPLIES 1 + bv2nat_rec(n, b!1) = bv2nat_rec(n, LAMBDA (i: below(N)): i = 0 OR b!1(i))")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (induct
                                                                               "n")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (case-replace
                                                                                   "jb!2 = 0")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "bv2nat_rec"
                                                                                       +)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "^")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (typepred
                                                                         "b!1 + 1")
                                                                        (("2"
                                                                          (typepred
                                                                           "mod(1 + bv2nat(b!1), exp2(N))")
                                                                          (("2"
                                                                            (case
                                                                             "bv2nat(b!1) < exp2(N) - 1")
                                                                            (("1"
                                                                              (expand
                                                                               "mod")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "(1 + bv2nat(b!1)) / exp2(N) < 1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (use
                                                                                     "div_mult_pos_lt1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                3))
                                                                              (("2"
                                                                                (typepred
                                                                                 "bv2nat(b!1)")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "bv2nat_eq_max")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "fill")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "leftshift1_add")
                              (("2"
                                (case-replace
                                 "left_shift(1, (fill[N - jb!1](FALSE) o right_shift(1, bv1!1) ^ (jb!1 - 1, 0))) = (fill[N - 1 - jb!1](FALSE) o bv1!1 ^ (jb!1, 0))")
                                (("2"
                                  (hide 3)
                                  (("2" (grind-with-ext) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skosimp) (("3" (assert) nil nil)) nil)
       ("4" (skosimp) (("4" (assert) nil nil)) nil))
      nil))
    nil)
   proved
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (times_rec def-decl "bvec[N]" BitvectorMultiplication nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil)
    (below type-eq-decl nil nat_types nil)
    (fill const-decl "bit" bv nil)
    (FALSE const-decl "bool" booleans nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (bv_add_fill_F formula-decl nil bv_arith_nat nil)
    (right_shift const-decl "bvec[N]" bv_shift nil)
    (leftshift1_add formula-decl nil BitvectorUtil nil)
    (bv_add_const_assoc formula-decl nil bv_arith_nat nil)
    (bv2nat_inj formula-decl nil bv_nat nil)
    (bv2nat_eq_max formula-decl nil bv_nat nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bv_add_assoc formula-decl nil bv_arith_nat nil)
    (bv_add_two_consts formula-decl nil bv_arith_nat nil)
    (bv_plus0 formula-decl nil bv_arith_nat nil)
    (bv2nat_elim formula-decl nil bv_arith_nat nil)
    (bv2nat_lem_rule formula-decl nil bv_arith_nat_caret_rules nil)
    (above nonempty-type-eq-decl nil integers nil)
    (bv2nat_fill_F formula-decl nil bv_nat nil)
    (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil)
    (TRUE const-decl "bool" booleans nil)
    (left_shift const-decl "bvec[N]" bv_shift nil)
    (N_size formula-decl nil BitvectorMultiplication nil))
   646446 25870 t shostak))
 (times_rec_max_inc_right 0
  (times_rec_max_inc_right-1 nil 3342293972 3342294080
   ("" (lemma "N_size")
    (("" (skolem!)
      (("" (rewrite "times_rec_inc_right")
        (("" (assert)
          (("" (expand "o")
            ((""
              (case-replace
               "(LAMBDA (nm: below(0 + N)): (bv1!1 ^ (N - 1, 0))(nm)) = bv1!1")
              (("" (hide 2) (("" (grind-with-ext) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (times_rec_inc_right formula-decl nil BitvectorMultiplication nil)
    (N_size formula-decl nil BitvectorMultiplication nil))
   44108 5980 t shostak))
 (times_rec_max_inc_n_right 0
  (times_rec_max_inc_n_right-1 nil 3342294096 3342294297
   ("" (induct "n")
    (("1" (skolem!)
      (("1" (expand "iterate") (("1" (rewrite "bv_plus0[N]") nil nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "iterate" +)
        (("2" (lemma "times_rec_max_inc_right")
          (("2" (inst - "bv1!1" "bv2!1 + j!1")
            (("2" (rewrite "bv_add_2_consts")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((times_rec_max_inc_right formula-decl nil BitvectorMultiplication
     nil)
    (bv_add_2_consts formula-decl nil bv_arith_nat nil)
    (bv_plus0 formula-decl nil bv_arith_nat nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (iterate def-decl "T" function_iterate nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (times_rec def-decl "bvec[N]" BitvectorMultiplication nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   41002 2170 t shostak))
 (times_rec_iterate 0
  (times_rec_iterate-1 nil 3342294318 3342295086
   ("" (skolem!)
    (("" (lemma "bv2nat_elim[N]")
      (("" (inst - "fill[N](FALSE)" "bv2!1")
        (("" (lemma "bv_add_fill_F[N]")
          (("" (inst - "bv2!1")
            (("" (rewrite "bv_add_comm")
              (("" (replace -1)
                (("" (replace -2 * rl)
                  (("" (hide -1 -2)
                    (("" (rewrite "times_rec_max_inc_n_right")
                      (("" (rewrite "times_rec_zero_right")
                        ((""
                          (case-replace
                           "bv2nat(fill[N](FALSE) + bv2nat(bv2!1)) = bv2nat(bv2!1)")
                          (("" (hide 2)
                            (("" (use "bv_fill_F_plus[N]")
                              ((""
                                (expand "mod")
                                ((""
                                  (assert)
                                  ((""
                                    (hide -1)
                                    ((""
                                      (typepred
                                       "floor(bv2nat(bv2!1) / exp2(N))")
                                      ((""
                                        (use
                                         "div_mult_pos_lt1"
                                         ("x" 1))
                                        (("" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bv2nat_elim formula-decl nil bv_arith_nat nil)
    (bv_add_fill_F formula-decl nil bv_arith_nat nil)
    (bv_add_comm formula-decl nil bv_arith_nat nil)
    (times_rec_max_inc_n_right formula-decl nil BitvectorMultiplication
     nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat nil)
    (bv_fill_F_plus formula-decl nil bv_arith_nat nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (times_rec_zero_right formula-decl nil BitvectorMultiplication nil)
    (FALSE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   69075 3260 t shostak))
 (bv2nat_iterate 0
  (bv2nat_iterate-1 nil 3342295121 3342295182
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (expand "iterate")
        (("1" (rewrite "bv2nat_fill_F") (("1" (assert) nil nil)) nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "iterate" +)
        (("2" (inst?)
          (("2" (assert)
            (("2" (rewrite "bv_add[N]") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((bv_add formula-decl nil bv_arith_nat nil)
    (bv2nat_fill_F formula-decl nil bv_nat_rules nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (iterate def-decl "T" function_iterate nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   61669 2940 t shostak))
 (bv2int_iterate_TCC1 0
  (bv2int_iterate_TCC1-1 nil 3342224217 3342224219
   ("" (subtype-tcc) nil nil) proved-complete nil 126 100 nil nil))
 (bv2int_iterate 0
  (bv2int_iterate-1 nil 3342295187 3342295548
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (expand "iterate")
        (("1" (rewrite "bv2int_fill_F[N]") (("1" (assert) nil nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "iterate" +)
        (("2" (inst?)
          (("2" (ground)
            (("1" (rewrite "bv2int_add[N]")
              (("1" (assert) nil nil)
               ("2" (expand* "in_rng_2s_comp" "minint" "maxint")
                (("2" (assert) nil nil)) nil))
              nil)
             ("2" (use "pos_times_ge") (("2" (assert) nil nil)) nil)
             ("3" (use "neg_times_ge") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*) (("3" (assert) nil nil)) nil)
     ("4" (skosimp) (("4" (assert) nil nil)) nil))
    nil)
   proved-complete
   ((neg_times_ge formula-decl nil real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (bv2int_add formula-decl nil bv_arithmetic nil)
    (in_rng_2s_comp const-decl "bool" bv_int nil)
    (bv2int_fill_F formula-decl nil bv_int nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (iterate def-decl "T" function_iterate nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (exp2 def-decl "posnat" exp2 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (rng_2s_comp type-eq-decl nil bv_int nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil))
   59418 4480 t shostak))
 (iterate_inc 0
  (iterate_inc-1 nil 3342295571 3342295630
   ("" (induct "n")
    (("1" (skolem!)
      (("1" (expand "iterate") (("1" (rewrite "bv_plus0[N]") nil nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "iterate" +)
        (("2" (inst?)
          (("2" (replace -1)
            (("2" (hide -1)
              (("2" (use "bv_add_two_consts[N]")
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((bv_add_two_consts formula-decl nil bv_arith_nat nil)
    (bv_plus0 formula-decl nil bv_arith_nat nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (iterate def-decl "T" function_iterate nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   59588 2840 t shostak))
 (iterate_inc_m 0
  (iterate_inc_m-1 nil 3342295650 3342295944
   ("" (induct "m")
    (("1" (skolem!)
      (("1" (assert)
        (("1" (lemma "bv_plus0[N]")
          (("1"
            (inst-cp -
             "iterate[bvec[N]](LAMBDA (b: bvec[N]): b + bv1!1, n!1)(fill[N](FALSE))"
             0)
            (("1" (replace -2)
              (("1" (hide -2)
                (("1"
                  (case-replace
                   "(LAMBDA (b: bvec[N]): b + (bv1!1 + 0)) = (LAMBDA (b: bvec[N]): b + bv1!1)")
                  (("1" (hide 2) (("1" (grind-with-ext) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (assert)
        (("2" (inst - "bv1!1 + 1" "n!1")
          (("2"
            (case-replace
             "(LAMBDA (b: bvec[N]): b + (bv1!1 + 1 + j!1)) = (LAMBDA (b: bvec[N]): b + (bv1!1 + (1 + j!1)))")
            (("1" (replace -2)
              (("1" (hide -1 -2)
                (("1" (rewrite "iterate_inc")
                  (("1" (rewrite "bv_add_2_consts[N]")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "bv_add_2_consts[N]") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((iterate_inc formula-decl nil BitvectorMultiplication nil)
    (bv_add_2_consts formula-decl nil bv_arith_nat nil)
    (bv_plus0 formula-decl nil bv_arith_nat nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (bv2nat_rec def-decl "nat" bv_nat nil) nil
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FALSE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (iterate def-decl "T" function_iterate nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   100595 5260 t shostak))
 (iterate_modulo 0
  (iterate_modulo-1 nil 3342295976 3342296138
   ("" (skolem!)
    (("" (lemma "iterate_inc_m")
      (("" (inst - "bv2!1" "i!1 * exp2(N)" "bv2nat(-bv2!1)")
        (("" (lemma "bv_plus_wrap[N]")
          ((""
            (inst -
             "iterate[bvec[N]](LAMBDA (b: bvec[N]): b + bv2!1, i!1 * exp2(N))(fill[N](FALSE))"
             "i!1 * bv2nat(-bv2!1)")
            (("" (replace -1)
              (("" (replace -2 + rl)
                (("" (hide -1 -2)
                  (("" (rewrite "bv2nat_elim[N]")
                    (("" (rewrite "plus_min_zero")
                      ((""
                        (case "FORALL (n: nat): fill[N](FALSE) = iterate[bvec[N]](LAMBDA (b: bvec[N]): b + fill[N](FALSE), n)(fill[N](FALSE))")
                        (("1" (inst?) (("1" (assert) nil nil)) nil)
                         ("2" (hide 2)
                          (("2" (induct "n")
                            (("1" (grind) nil nil)
                             ("2" (skosimp)
                              (("2"
                                (expand "iterate" +)
                                (("2"
                                  (rewrite "bv_add_fill_F[N]")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((iterate_inc_m formula-decl nil BitvectorMultiplication nil)
    (bv_plus_wrap formula-decl nil bv_arith_nat nil)
    (plus_min_zero formula-decl nil BitvectorUtil nil)
    (bv_add_fill_F formula-decl nil bv_arith_nat nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (bv2nat_elim formula-decl nil bv_arith_nat nil)
    (FALSE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (iterate def-decl "T" function_iterate nil)
    (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}"
       bv_arithmetic nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil)
    (rng_2s_comp type-eq-decl nil bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (minint const-decl "int" bv_int nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   162327 4230 t shostak))
 (iterate_comm 0
  (iterate_comm-1 nil 3342296153 3342296530
   ("" (lemma "bvec_induction")
    ((""
      (inst -
       "LAMBDA (bv2: bvec[N]): FORALL (bv1: bvec[N]): iterate[bvec[N]](LAMBDA (b: bvec[N]): b + bv1, bv2nat(bv2))(fill[N](FALSE)) = iterate[bvec[N]](LAMBDA (b: bvec[N]): b + bv2, bv2nat(bv1))(fill[N](FALSE))")
      (("" (split)
        (("1" (skolem!) (("1" (inst?) nil nil)) nil)
         ("2" (hide 2)
          (("2" (lemma "bvec_induction")
            (("2"
              (inst -
               "LAMBDA(bv1: bvec[N]): iterate[bvec[N]](LAMBDA (b: bvec[N]): b + bv1, bv2nat(fill[N](FALSE)))(fill[N](FALSE)) = iterate[bvec[N]](LAMBDA (b: bvec[N]): b + fill[N](FALSE), bv2nat(bv1))(fill[N](FALSE))")
              (("2" (ground)
                (("2" (hide 2)
                  (("2" (skosimp)
                    (("2" (rewrite "bv2nat_fill_F[N]")
                      (("2" (expand "iterate" 1 1)
                        (("2" (expand "iterate" -1 1)
                          (("2" (rewrite "bv_plus1[N]")
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("1"
                                  (expand "iterate")
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (expand "iterate" +)
                                  (("2"
                                    (rewrite "bv_add_fill_F[N]")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skosimp*)
            (("3" (rewrite "bv_plus1[N]")
              (("3" (lift-if)
                (("3" (ground)
                  (("1" (expand "iterate" 1 1)
                    (("1" (replace -1)
                      (("1" (lemma "iterate_inc")
                        (("1" (inst - "bv!1" "bv2nat(bv1!1)")
                          (("1" (replace -1)
                            (("1" (hide -1)
                              (("1"
                                (inst - "bv1!1")
                                (("1"
                                  (replace -2 * rl)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (case-replace
                                       "iterate[bvec[N]](LAMBDA (b: bvec[N]): b + bv1!1, (exp2(N) - 1))(fill[N](FALSE)) + bv2nat(bv1!1) = iterate[bvec[N]](LAMBDA (b: bvec[N]): b + bv1!1, exp2(N))(fill[N](FALSE))")
                                      (("1"
                                        (hide -1 -2)
                                        (("1"
                                          (lemma "iterate_modulo")
                                          (("1"
                                            (inst - "bv1!1" 1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2"
                                          (expand "iterate" 1 2)
                                          (("2"
                                            (rewrite "bv2nat_elim[N]")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "iterate" 2 1)
                    (("2" (inst - "bv1!1")
                      (("2" (replace -1)
                        (("2" (hide -1)
                          (("2" (lemma "iterate_inc")
                            (("2" (inst - "bv!1" "bv2nat(bv1!1)")
                              (("2"
                                (replace -1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (rewrite "bv2nat_elim[N]")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (iterate def-decl "T" function_iterate nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil)
    (below type-eq-decl nil nat_types nil)
    (fill const-decl "bit" bv nil)
    (FALSE const-decl "bool" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat nil)
    (iterate_modulo formula-decl nil BitvectorMultiplication nil)
    (bv2nat_elim formula-decl nil bv_arith_nat nil)
    (iterate_inc formula-decl nil BitvectorMultiplication nil)
    (bv2nat_fill_F formula-decl nil bv_nat nil)
    (bv_add_fill_F formula-decl nil bv_arith_nat nil)
    (bv_plus1 formula-decl nil bv_arith_nat nil)
    (bvec_induction formula-decl nil BitvectorUtil nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil))
   376411 8740 t shostak))
 (times_rec_comm 0
  (times_rec_comm-1 nil 3342296596 3342296623
   ("" (skolem!)
    (("" (rewrite "times_rec_iterate")
      (("" (rewrite "times_rec_iterate")
        (("" (rewrite "iterate_comm") nil nil)) nil))
      nil))
    nil)
   proved-complete
   ((times_rec_iterate formula-decl nil BitvectorMultiplication nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (iterate_comm formula-decl nil BitvectorMultiplication nil))
   26977 650 t shostak))
 (times_comm 0
  (times_comm-1 nil 3342296626 3342296673
   ("" (skolem!)
    (("" (expand "*") (("" (rewrite "times_rec_comm") nil nil)) nil))
    nil)
   proved-complete
   ((* const-decl "bvec[N]" BitvectorMultiplication nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (times_rec_comm formula-decl nil BitvectorMultiplication nil))
   46534 1340 t shostak))
 (iterate_min_second 0
  (iterate_min_second-1 nil 3342296683 3342296777
   ("" (induct "n")
    (("1" (skolem!)
      (("1" (expand "iterate") (("1" (rewrite "min_fill_F") nil nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "iterate" +)
        (("2" (inst?)
          (("2" (rewrite "bv_neg_distribution")
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((bv_neg_distribution formula-decl nil bv_arith_minus_rules nil)
    (min_fill_F formula-decl nil BitvectorUtil nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}"
       bv_arithmetic nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil)
    (rng_2s_comp type-eq-decl nil bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (minint const-decl "int" bv_int nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (iterate def-decl "T" function_iterate nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   23520 1560 t shostak))
 (times_rec_min_first 0
  (times_rec_min_first-1 nil 3342296807 3342296834
   ("" (skolem!)
    (("" (rewrite "times_rec_iterate")
      (("" (rewrite "times_rec_iterate")
        (("" (use "iterate_min_second") nil nil)) nil))
      nil))
    nil)
   proved-complete
   ((times_rec_iterate formula-decl nil BitvectorMultiplication nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (rng_2s_comp type-eq-decl nil bv_int nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}"
       bv_arithmetic nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (iterate_min_second formula-decl nil BitvectorMultiplication nil))
   27004 700 t shostak))
 (times_rec_min_second 0
  (times_rec_min_second-1 nil 3342296837 3342296862
   ("" (skolem!)
    (("" (rewrite "times_rec_comm")
      (("" (rewrite "times_rec_min_first")
        (("" (rewrite "times_rec_comm") nil nil)) nil))
      nil))
    nil)
   proved-complete
   ((times_rec_comm formula-decl nil BitvectorMultiplication nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (rng_2s_comp type-eq-decl nil bv_int nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}"
       bv_arithmetic nil)
    (times_rec_min_first formula-decl nil BitvectorMultiplication nil))
   25144 480 t shostak))
 (times_min_first 0
  (times_min_first-1 nil 3342296868 3342296889
   ("" (skolem!)
    (("" (expand "*") (("" (rewrite "times_rec_min_first") nil nil))
      nil))
    nil)
   proved-complete
   ((* const-decl "bvec[N]" BitvectorMultiplication nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (times_rec_min_first formula-decl nil BitvectorMultiplication nil))
   21474 350 t shostak))
 (times_min_second 0
  (times_min_second-1 nil 3342296895 3342296914
   ("" (skolem!)
    (("" (rewrite "times_comm")
      (("" (rewrite "times_min_first")
        (("" (rewrite "times_comm") nil nil)) nil))
      nil))
    nil)
   proved-complete
   ((times_comm formula-decl nil BitvectorMultiplication nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (rng_2s_comp type-eq-decl nil bv_int nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}"
       bv_arithmetic nil)
    (times_min_first formula-decl nil BitvectorMultiplication nil))
   18922 480 t shostak))
 (bv2nat_one 0
  (bv2nat_one-1 nil 3342296929 3342297041
   ("" (lemma "N_size")
    (("" (assert)
      (("" (use "bv2nat_lem_rule")
        (("" (expand* "b2n" "^")
          (("" (expand "one" -1 1)
            (("" (expand "one" -1 1)
              (("" (lemma "bv2nat_fill_F[N - 1]")
                (("" (expand "fill") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (fill const-decl "bit" bv nil)
    (bv2nat_fill_F formula-decl nil bv_nat nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (one const-decl "bvec[N]" BitvectorMultiplication nil)
    (bv2nat_lem_rule formula-decl nil bv_arith_nat_caret_rules nil)
    (N_size formula-decl nil BitvectorMultiplication nil))
   28802 2350 t shostak))
 (bv2int_one 0
  (bv2int_one-1 nil 3342297054 3342297103
   ("" (lemma "N_size")
    (("" (auto-rewrite "bv2nat_one")
      (("" (expand "bv2int") (("" (reduce) nil nil)) nil)) nil))
    nil)
   proved-complete
   ((bv2nat_one formula-decl nil BitvectorMultiplication nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil)
    (N_size formula-decl nil BitvectorMultiplication nil))
   10739 610 t shostak))
 (times_one_first 0
  (times_one_first-1 nil 3342297131 3342297251
   ("" (lemma "N_size")
    (("" (skolem!)
      (("" (expand* "*" "one" "times_rec")
        (("" (assert)
          ((""
            (case-replace
             "left_shift(1, times_rec(right_shift(1, (LAMBDA (k: below(N)): k = 0)), bv!1, N - 1)) = fill[N](FALSE)")
            (("1" (rewrite "bv_add_fill_F[N]") nil nil)
             ("2" (hide -1 2)
              (("2"
                (case-replace
                 "right_shift(1, (LAMBDA (k: below(N)): k = 0)) = fill[N](FALSE)")
                (("1" (hide -1)
                  (("1" (rewrite "times_rec_zero_left")
                    (("1" (grind-with-ext) nil nil)) nil))
                  nil)
                 ("2" (hide 2) (("2" (grind-with-ext) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (times_rec_zero_left formula-decl nil BitvectorMultiplication nil)
    (bv_add_fill_F formula-decl nil bv_arith_nat nil)
    (FALSE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (right_shift const-decl "bvec[N]" bv_shift nil)
    (left_shift const-decl "bvec[N]" bv_shift nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (* const-decl "bvec[N]" BitvectorMultiplication nil)
    (times_rec def-decl "bvec[N]" BitvectorMultiplication nil)
    (one const-decl "bvec[N]" BitvectorMultiplication nil)
    (N_size formula-decl nil BitvectorMultiplication nil))
   120114 2870 t shostak))
 (times_one_second 0
  (times_one_second-1 nil 3342297264 3342297282
   ("" (skolem!)
    (("" (rewrite "times_comm")
      (("" (rewrite "times_one_first") nil nil)) nil))
    nil)
   proved-complete
   ((times_comm formula-decl nil BitvectorMultiplication nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (one const-decl "bvec[N]" BitvectorMultiplication nil)
    (times_one_first formula-decl nil BitvectorMultiplication nil))
   17812 350 t shostak))
 (iterate_zero_add 0
  (iterate_zero_add-1 nil 3342297295 3342297363
   ("" (induct "n")
    (("1" (skolem!)
      (("1" (expand "iterate")
        (("1" (rewrite "bv_add_comm")
          (("1" (rewrite "bv_add_fill_F[N]") nil nil)) nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "iterate" +)
        (("2" (inst?)
          (("2" (replace -1)
            (("2" (hide -1)
              (("2" (rewrite "bv_add_assoc" :dir rl)
                (("2" (rewrite "bv_add_assoc" :dir rl)
                  (("2" (rewrite "bv_add_comm") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((bv_add_assoc formula-decl nil bv_arith_nat nil)
    (bv_add_comm formula-decl nil bv_arith_nat nil)
    (bv_add_fill_F formula-decl nil bv_arith_nat nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (iterate def-decl "T" function_iterate nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   68372 2560 t shostak))
 (times_rec_distr 0
  (times_rec_distr-1 nil 3342297371 3342297574
   ("" (skolem!)
    (("" (rewrite "times_rec_iterate")
      (("" (rewrite "times_rec_iterate")
        (("" (rewrite "times_rec_iterate")
          (("" (rewrite "bv_add[N]")
            (("" (lift-if)
              (("" (ground)
                (("1" (use "iterate_add[bvec[N]]")
                  (("1" (replace -1 1 rl)
                    (("1" (hide -1)
                      (("1" (expand "o")
                        (("1" (lemma "iterate_zero_add")
                          (("1"
                            (inst - "bv1!1"
                             "(iterate(LAMBDA (b: bvec[N]): b + bv1!1, bv2nat(bv3!1))(fill[N](FALSE)))"
                             "bv2nat(bv2!1)")
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "iterate_add[bvec[N]]")
                  (("2"
                    (inst-cp - "LAMBDA (b: bvec[N]): b + bv1!1"
                     "bv2nat(bv2!1) + bv2nat(bv3!1) - exp2(N)"
                     "exp2(N)")
                    (("2" (assert)
                      (("2" (decompose-equality)
                        (("2" (expand "o" -1)
                          (("2" (inst - "fill[N](FALSE)")
                            (("2" (lemma "iterate_modulo")
                              (("2"
                                (inst - "bv1!1" 1)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (replace -2)
                                    (("2"
                                      (hide -1 -2)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (replace -1 + rl)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (expand "o")
                                              (("2"
                                                (lemma
                                                 "iterate_zero_add")
                                                (("2"
                                                  (inst
                                                   -
                                                   "bv1!1"
                                                   "(iterate(LAMBDA (b: bvec[N]): b + bv1!1, bv2nat(bv3!1))(fill[N](FALSE)))"
                                                   "bv2nat(bv2!1)")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((times_rec_iterate formula-decl nil BitvectorMultiplication nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil)
    (iterate_modulo formula-decl nil BitvectorMultiplication nil)
    (iterate_add formula-decl nil function_iterate nil)
    (iterate_zero_add formula-decl nil BitvectorMultiplication nil)
    (iterate def-decl "T" function_iterate nil)
    (below type-eq-decl nil nat_types nil)
    (fill const-decl "bit" bv nil)
    (FALSE const-decl "bool" booleans nil)
    (O const-decl "T3" function_props nil)
    (bv_add formula-decl nil bv_arith_nat nil))
   202843 4440 t shostak))
 (times_distr_right 0
  (times_distr_right-1 nil 3342297606 3342297640
   ("" (skolem!)
    (("" (expand "*") (("" (rewrite "times_rec_distr") nil nil)) nil))
    nil)
   proved-complete
   ((* const-decl "bvec[N]" BitvectorMultiplication nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (times_rec_distr formula-decl nil BitvectorMultiplication nil))
   34734 490 t shostak))
 (times_distr_left 0
  (times_distr_left-1 nil 3342297643 3342297704
   ("" (skolem!)
    (("" (rewrite "times_comm")
      (("" (rewrite "times_distr_right")
        (("" (rewrite "times_comm")
          (("" (case-replace "bv3!1 * bv2!1 = bv2!1 * bv3!1")
            (("" (rewrite "times_comm") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((times_comm formula-decl nil BitvectorMultiplication nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil)
    (* const-decl "bvec[N]" BitvectorMultiplication nil)
    (times_distr_right formula-decl nil BitvectorMultiplication nil))
   61586 1510 t shostak))
 (times_distr_iterate 0
  (times_distr_iterate-1 nil 3342297717 3342297764
   ("" (induct "n")
    (("1" (skolem!)
      (("1" (expand "iterate")
        (("1" (rewrite "times_zero_second") nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "iterate" +)
        (("2" (inst?)
          (("2" (rewrite "times_distr_right") (("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((times_distr_right formula-decl nil BitvectorMultiplication nil)
    (times_zero_second formula-decl nil BitvectorMultiplication nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (fill const-decl "bit" bv nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (iterate def-decl "T" function_iterate nil)
    (* const-decl "bvec[N]" BitvectorMultiplication nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   46833 1660 t shostak))
 (times_assoc 0
  (times_assoc-1 nil 3342297771 3342297813
   ("" (skolem!)
    (("" (expand "*" 1 4)
      (("" (rewrite "times_rec_iterate")
        (("" (rewrite "times_distr_iterate")
          (("" (expand "*" 1 2)
            (("" (rewrite "times_rec_iterate") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((* const-decl "bvec[N]" BitvectorMultiplication nil)
    (times_distr_iterate formula-decl nil BitvectorMultiplication nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" BitvectorMultiplication nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (times_rec_iterate formula-decl nil BitvectorMultiplication nil))
   42255 950 t shostak)))

