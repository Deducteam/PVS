(BitvectorMultiplication (IMP_BitvectorUtil_TCC1 0 (IMP_BitvectorUtil_TCC1-1 nil 3249114872 3249243288 ("" (use "N_size") nil nil) proved ((N_size formula-decl nil BitvectorMultiplication nil)) 22 20 nil nil)) (times_rec_TCC1 0 (times_rec_TCC1-1 nil 3249114872 3249243288 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 61 60 nil nil)) (times_rec_TCC2 0 (times_rec_TCC2-1 nil 3249114872 3249243289 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 281 80 nil nil)) (times_rec_TCC3 0 (times_rec_TCC3-1 nil 3249114872 3249243289 ("" (termination-tcc) nil nil) proved nil 33 30 nil nil)) (times_rec_TCC4 0 (times_rec_TCC4-1 nil 3249114872 3249243289 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 231 80 nil nil)) (times_rec_TCC5 0 (times_rec_TCC5-1 nil 3249114872 3249243289 ("" (termination-tcc) nil nil) proved nil 37 40 nil nil)) (times_rec_zero_right 0 (times_rec_zero_right-1 nil 3249114872 3249243292 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "times_rec" +) (("2" (inst?) (("2" (replace -1) (("2" (hide -1) (("2" (lemma "bv_add_fill_F[N]") (("2" (inst - "left_shift(1, fill[N](FALSE))") (("2" (rewrite "bv_add_comm[N]") (("2" (replace -1) (("2" (hide -1) (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((right_shift const-decl "bvec[N]" bv_shift nil) (left_shift const-decl "bvec[N]" bv_shift nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (bv_add_comm formula-decl nil bv_arith_nat nil) (bv_add_fill_F formula-decl nil bv_arith_nat nil) (nat_induction formula-decl nil naturalnumbers nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (times_rec def-decl "bvec[N]" BitvectorMultiplication nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 2352 1070 nil nil)) (times_rec_zero_left 0 (times_rec_zero_left-1 nil 3249114872 3249243294 ("" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "times_rec" +) (("2" (expand "fill" 1 1) (("2" (case-replace "right_shift(1, fill[N](FALSE)) = fill[N](FALSE)") (("1" (hide -1) (("1" (inst?) (("1" (replace -1) (("1" (hide -1) (("1" (apply-extensionality :hide? t) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((left_shift const-decl "bvec[N]" bv_shift nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (right_shift const-decl "bvec[N]" bv_shift nil) (nat_induction formula-decl nil naturalnumbers nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (times_rec def-decl "bvec[N]" BitvectorMultiplication nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 2255 1130 nil nil)) (times_rec_repeat 0 (times_rec_repeat-1 nil 3249114872 3249243296 ("" (induct "n") (("1" (skosimp*) (("1" (expand "exp2") (("1" (use "bv2nat_eq0[N]") (("1" (assert) (("1" (replace -1) (("1" (rewrite "times_rec_zero_left") (("1" (rewrite "times_rec_zero_left") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "times_rec" +) (("2" (inst - "right_shift(1, bv1!1)" "bv2!1" "m!1") (("2" (use "bv2nat_rightshift_upperbound") (("1" (expand "exp2" -1) (("1" (expand "exp2" -1) (("1" (expand "exp2" -3) (("1" (assert) (("1" (replace -2) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "N=1") (("1" (grind) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((right_shift const-decl "bvec[N]" bv_shift nil) (fill const-decl "bit" bv nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (left_shift const-decl "bvec[N]" bv_shift nil) (bv2nat_rightshift_upperbound formula-decl nil BitvectorUtil nil) (bv2nat_eq0 formula-decl nil bv_nat nil) (times_rec_zero_left formula-decl nil BitvectorMultiplication nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (times_rec def-decl "bvec[N]" BitvectorMultiplication nil) (= const-decl "[T, T -> boolean]" equalities nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 2634 1200 nil nil)) (times_zero_first 0 (times_zero_first-1 nil 3249114872 3249243297 ("" (skosimp*) (("" (expand "*") (("" (rewrite "times_rec_zero_left") nil nil)) nil)) nil) proved ((* const-decl "bvec[N]" BitvectorMultiplication nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (times_rec_zero_left formula-decl nil BitvectorMultiplication nil)) 37 30 nil nil)) (times_zero_second 0 (times_zero_second-1 nil 3249114872 3249243297 ("" (skosimp*) (("" (expand "*") (("" (rewrite "times_rec_zero_right") nil nil)) nil)) nil) proved ((* const-decl "bvec[N]" BitvectorMultiplication nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (times_rec_zero_right formula-decl nil BitvectorMultiplication nil)) 36 40 nil nil)) (times_rec_inc_right_TCC1 0 (times_rec_inc_right_TCC1-1 nil 3249114872 3249243297 ("" (subtype-tcc) nil nil) proved nil 206 50 nil nil)) (times_rec_inc_right_TCC2 0 (times_rec_inc_right_TCC2-1 nil 3249114872 3249243297 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (below type-eq-decl nil naturalnumbers nil)) 344 140 nil nil)) (times_rec_inc_right_TCC3 0 (times_rec_inc_right_TCC3-1 nil 3249114872 3249243297 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (below type-eq-decl nil naturalnumbers nil)) 294 140 nil nil)) (times_rec_inc_right 0 (times_rec_inc_right-1 nil 3249114872 3249243315 ("" (use "N_size") (("" (induct "n") (("1" (skosimp*) (("1" (lemma "bv_add_fill_F[N]") (("1" (inst?) (("1" (replace -1) (("1" (hide -1) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) (("2" (expand "times_rec" +) (("2" (inst - "right_shift(1, bv1!1)" "bv2!1") (("2" (assert) (("2" (lift-if -) (("2" (split -) (("1" (flatten) (("1" (lemma "bv_add_fill_F[N]") (("1" (inst?) (("1" (replace -1) (("1" (hide -1) (("1" (replace -2) (("1" (hide -2) (("1" (lift-if +) (("1" (split +) (("1" (flatten) (("1" (assert) (("1" (replace*) (("1" (name-replace "tmp" "left_shift(1, times_rec(right_shift(1, bv1!1), bv2!1, 0))") (("1" (lemma "bv_add_two_consts[N]") (("1" (inst -1 "bv2!1" "tmp" "1" "0") (("1" (lemma "bv_plus0[N]") (("1" (inst - "tmp" "0") (("1" (replace -1) (("1" (assert) (("1" (replace -2) (("1" (hide -1 -2) (("1" (lemma "bv2nat_elim[N]") (("1" (expand "o ") (("1" (expand "^") (("1" (expand "fill") (("1" (assert) (("1" (inst -1 "bv2!1 + tmp" "(LAMBDA (nm: below(N - 1 - jb!1 + (1 + jb!1))):
                                   IF nm < 1 + jb!1 THEN TRUE ELSE FALSE ENDIF)") (("1" (replace -1 * rl) (("1" (hide -1) (("1" (case-replace "bv2nat((LAMBDA (nm: below(N - 1 - jb!1 + (1 + jb!1))):
                                           IF nm < 1 + jb!1 THEN TRUE ELSE FALSE ENDIF)) = 1") (("1" (hide 2) (("1" (lemma "bv2nat_lem_rule") (("1" (inst?) (("1" (replace -1 * rl) (("1" (hide -1) (("1" (expand "b2n") (("1" (expand "^") (("1" (lemma "bv2nat_fill_F[N-1]") (("1" (expand "fill") (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (replace -1) (("2" (expand "o ") (("2" (expand "^") (("2" (expand "fill") (("2" (lemma "bv_add_fill_F[N]") (("2" (inst - "left_shift(1, times_rec(right_shift(1, bv1!1), bv2!1, 0))") (("2" (expand "fill") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replace -1) (("2" (hide -1) (("2" (lift-if +) (("2" (split +) (("1" (flatten) (("1" (rewrite "leftshift1_add") (("1" (lemma "bv_add_two_consts[N]") (("1" (inst - "bv2!1" "(left_shift(1, times_rec(right_shift(1, bv1!1), bv2!1, jb!1)) +
                                 left_shift(1,
                                            (fill[N - jb!1](FALSE) o
                                              right_shift(1, bv1!1) ^ (jb!1 - 1, 0))))" "1" "0") (("1" (assert) (("1" (lemma "bv_plus0[N]") (("1" (inst - "(left_shift(1, times_rec(right_shift(1, bv1!1), bv2!1, jb!1)) +
                                        left_shift(1,
                                                   (fill[N - jb!1](FALSE) o
                                                     right_shift(1, bv1!1) ^ (jb!1 - 1, 0))))" "0") (("1" (replace -1) (("1" (hide -1) (("1" (replace -1) (("1" (hide -1) (("1" (rewrite "bv_add_assoc") (("1" (rewrite "bv_add_const_assoc" :dir rl) (("1" (case-replace "left_shift(1,
                                                (fill[N - jb!1](FALSE) o
                                                  right_shift(1, bv1!1) ^ (jb!1 - 1, 0)))
                                     + 1 = (fill[N - 1 - jb!1](FALSE) o bv1!1 ^ (jb!1, 0))") (("1" (hide 2) (("1" (case "FORALL(b:bvec[N]) : NOT b(0) IMPLIES b + 1 =
                                                             (LAMBDA(i:below(N)) : (i=0) OR b(i))") (("1" (inst?) (("1" (split -) (("1" (replace -1) (("1" (hide -1) (("1" (apply-extensionality :hide? t) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide 1) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (skosimp*) (("2" (case "bv2nat[N](b!1 + 1) = bv2nat[N](LAMBDA (i: below(N)): (i = 0) OR b!1(i))") (("1" (use "bv2nat_inj[N]") (("1" (assert) nil nil)) nil) ("2" (hide 3) (("2" (case-replace "bv2nat[N](b!1 + 1) = bv2nat[N](b!1) + 1") (("1" (hide -1) (("1" (expand "bv2nat") (("1" (case "FORALL(n:below(N+1)) : n > 0 IMPLIES 1 + bv2nat_rec(n, b!1) =
                                                                      bv2nat_rec(n, LAMBDA (i: below(N)): (i = 0) OR b!1(i))") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (hide 2) (("2" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (case-replace "jb!2=0") (("1" (grind) nil nil) ("2" (assert) (("2" (expand "bv2nat_rec" +) (("2" (replace -2) (("2" (hide -2) (("2" (assert) (("2" (expand "^") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "b!1+1") (("2" (typepred "mod(1 + bv2nat(b!1), exp2(N))") (("2" (expand "abs") (("2" (assert) (("2" (case "bv2nat(b!1) < exp2(N)-1") (("1" (assert) (("1" (expand "mod") (("1" (assert) (("1" (case-replace "floor((1 + bv2nat(b!1)) / exp2(N)) = 0") (("1" (assert) nil nil) ("2" (hide -2 -3 -4 2) (("2" (case "floor((1 + bv2nat(b!1)) / exp2(N)) < 1") (("1" (assert) nil nil) ("2" (hide 2) (("2" (case "(1 + bv2nat(b!1)) / exp2(N) < 1") (("1" (typepred "floor((1 + bv2nat(b!1)) / exp2(N))") (("1" (assert) (("1" (name-replace "tmp" "floor((1 + bv2nat(b!1)) / exp2(N))") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (lemma "div_mult_pos_lt1") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 -3 2) (("2" (typepred "bv2nat(b!1)") (("2" (case "bv2nat(b!1) = exp2(N) - 1") (("1" (hide -2 1) (("1" (rewrite "bv2nat_eq_max") (("1" (expand "fill") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "leftshift1_add") (("2" (case-replace "left_shift(1,
                                          (fill[N - jb!1](FALSE) o
                                            right_shift(1, bv1!1) ^ (jb!1 - 1, 0))) =
                                      (fill[N - 1 - jb!1](FALSE) o bv1!1 ^ (jb!1, 0))") (("1" (hide 3) (("1" (apply-extensionality :hide? t) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (assert) nil nil)) nil) ("4" (skosimp*) (("4" (assert) nil nil)) nil)) nil)) nil) proved ((- const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (times_rec def-decl "bvec[N]" BitvectorMultiplication nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (+ const-decl "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}" bv_arith_nat nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (below_induction formula-decl nil bounded_nat_inductions nil) (bv_add_fill_F formula-decl nil bv_arith_nat nil) (right_shift const-decl "bvec[N]" bv_shift nil) (leftshift1_add formula-decl nil BitvectorUtil nil) (jb!1 skolem-const-decl "below(1 + N)" BitvectorMultiplication nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bv_add_assoc formula-decl nil bv_arith_nat nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bv2nat_eq_max formula-decl nil bv_nat nil) (posreal nonempty-type-eq-decl nil real_types nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (integer nonempty-type-from-decl nil integers nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (bv2nat_rec def-decl "nat" bv_nat nil) (bv2nat_inj formula-decl nil bv_nat nil) (bv_add_const_assoc formula-decl nil bv_arith_nat nil) (left_shift const-decl "bvec[N]" bv_shift nil) (TRUE const-decl "bool" booleans nil) (above nonempty-type-eq-decl nil integers nil) (^ const-decl "bit" bv nil) (bv2nat_fill_F formula-decl nil bv_nat nil) (b2n const-decl "nbit" bit nil) (bv2nat_lem_rule formula-decl nil bv_arith_nat_caret_rules nil) (bv2nat_elim formula-decl nil bv_arith_nat nil) (bv_plus0 formula-decl nil bv_arith_nat nil) (bv_add_two_consts formula-decl nil bv_arith_nat nil) (N_size formula-decl nil BitvectorMultiplication nil)) 17847 8440 nil nil)) (times_rec_max_inc_right 0 (times_rec_max_inc_right-1 nil 3249114872 3249243317 ("" (use "N_size") (("" (skosimp*) (("" (lemma "times_rec_inc_right") (("" (inst?) (("" (replace -1) (("" (hide -1) (("" (assert) (("" (expand "o ") (("" (assert) (("" (case-replace "(LAMBDA (nm: below(0 + N)): (bv1!1 ^ (N - 1, 0))(nm)) = bv1!1") (("" (hide 2) (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (times_rec_inc_right formula-decl nil BitvectorMultiplication nil) (N_size formula-decl nil BitvectorMultiplication nil)) 1571 780 nil nil)) (times_rec_max_inc_n_right 0 (times_rec_max_inc_n_right-1 nil 3249114872 3249243319 ("" (induct "n") (("1" (skosimp*) (("1" (lemma "bv_plus0[N]") (("1" (inst -1 "bv2!1" "0") (("1" (replace -1) (("1" (expand "iterate") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "iterate" 1) (("2" (lemma "times_rec_max_inc_right") (("2" (inst - "bv1!1" "bv2!1+j!1") (("2" (rewrite "bv_add_2_consts") (("2" (replace -1) (("2" (hide -1) (("2" (assert) (("2" (inst?) (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((times_rec_max_inc_right formula-decl nil BitvectorMultiplication nil) (bv_add_2_consts formula-decl nil bv_arith_nat nil) (bv_plus0 formula-decl nil bv_arith_nat nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (iterate def-decl "T" function_iterate nil) (+ const-decl "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}" bv_arith_nat nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (times_rec def-decl "bvec[N]" BitvectorMultiplication nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1819 850 nil nil)) (times_rec_iterate 0 (times_rec_iterate-1 nil 3249114872 3249243321 ("" (skosimp*) (("" (lemma "bv2nat_elim[N]") (("" (inst - "fill[N](FALSE)" "bv2!1") (("" (lemma "bv_add_fill_F[N]") (("" (inst - "bv2!1") (("" (rewrite "bv_add_comm" -1) (("" (replace -1) (("" (hide -1) (("" (replace -1 * rl) (("" (hide -1) (("" (use "times_rec_max_inc_n_right") (("" (replace -1) (("" (hide -1) (("" (rewrite "times_rec_zero_right") (("" (case-replace "bv2nat(fill[N](FALSE) + bv2nat(bv2!1)) = bv2nat(bv2!1)") (("" (hide 2) (("" (lemma " bv_fill_F_plus[N]") (("" (inst?) (("" (expand "mod") (("" (case-replace "floor(bv2nat(bv2!1) / exp2(N)) = 0") (("1" (assert) nil nil) ("2" (hide -1 2) (("2" (typepred "floor(bv2nat(bv2!1) / exp2(N))") (("2" (name-replace "tmp" "floor(bv2nat(bv2!1) / exp2(N))") (("2" (typepred "bv2nat(bv2!1)") (("2" (assert) (("2" (case "bv2nat(bv2!1) / exp2(N) < 1") (("1" (assert) nil nil) ("2" (hide -2 -3 -4 2) (("2" (lemma "div_mult_pos_lt1") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2nat_elim formula-decl nil bv_arith_nat nil) (bv_add_fill_F formula-decl nil bv_arith_nat nil) (bv_add_comm formula-decl nil bv_arith_nat nil) (times_rec_zero_right formula-decl nil BitvectorMultiplication nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (integer nonempty-type-from-decl nil integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (div_mult_pos_lt1 formula-decl nil real_props nil) (posreal nonempty-type-eq-decl nil real_types nil) (bv_fill_F_plus formula-decl nil bv_arith_nat nil) (+ const-decl "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}" bv_arith_nat nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (= const-decl "[T, T -> boolean]" equalities nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (times_rec_max_inc_n_right formula-decl nil BitvectorMultiplication nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 2078 980 nil nil)) (bv2nat_iterate 0 (bv2nat_iterate-1 nil 3249114872 3249243323 ("" (induct "n") (("1" (skosimp*) (("1" (expand "iterate") (("1" (rewrite "bv2nat_fill_F") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "iterate" +) (("2" (inst?) (("2" (assert) (("2" (rewrite "bv_add[N]") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bv_add formula-decl nil bv_arith_nat nil) (bv2nat_fill_F formula-decl nil bv_nat_rules nil) (nat_induction formula-decl nil naturalnumbers nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (iterate def-decl "T" function_iterate nil) (= const-decl "[T, T -> boolean]" equalities nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1814 860 nil nil)) (bv2int_iterate_TCC1 0 (bv2int_iterate_TCC1-1 nil 3249114872 3249243323 ("" (subtype-tcc) nil nil) proved nil 46 40 nil nil)) (bv2int_iterate 0 (bv2int_iterate-1 nil 3249114872 3249243326 ("" (induct "n") (("1" (skosimp*) (("1" (expand "iterate") (("1" (rewrite "bv2int_fill_F[N]") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "iterate" +) (("2" (inst?) (("2" (assert) (("2" (split -) (("1" (rewrite "bv2int_add[N]") (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (expand "in_rng_2s_comp") (("2" (expand "minint") (("2" (expand "maxint") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "bv2int(bv1!1) >= 0") (("1" (assert) (("1" (use "pos_times_ge") (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("3" (case "bv2int(bv1!1) >= 0") (("1" (assert) nil nil) ("2" (assert) (("2" (use "neg_times_ge") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (case "FORALL(k:posnat) : k-1>=0") (("1" (inst?) nil nil) ("2" (assert) nil nil)) nil)) nil) ("4" (case "FORALL(k:posnat) : k-1>=0") (("1" (inst?) nil nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) proved ((in_rng_2s_comp const-decl "bool" bv_int nil) (bv2int_add formula-decl nil bv_arithmetic nil) (pos_times_ge formula-decl nil real_props nil) (neg_times_ge formula-decl nil real_props nil) (bv2int_fill_F formula-decl nil bv_int nil) (nat_induction formula-decl nil naturalnumbers nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (iterate def-decl "T" function_iterate nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (exp2 def-decl "posnat" exp2 nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil)) 3353 1600 nil nil)) (iterate_inc 0 (iterate_inc-1 nil 3249114872 3249243329 ("" (induct "n") (("1" (skosimp*) (("1" (expand "iterate") (("1" (rewrite "bv_plus0[N]") nil nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "iterate" +) (("2" (inst?) (("2" (replace -1) (("2" (hide -1) (("2" (name-replace "c" "iterate[bvec[N]](LAMBDA (b: bvec[N]): b + bv1!1, j!1)(fill[N](FALSE))") (("2" (use "bv_add_two_consts[N]") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bv_add_two_consts formula-decl nil bv_arith_nat nil) (bv_plus0 formula-decl nil bv_arith_nat nil) (nat_induction formula-decl nil naturalnumbers nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (+ const-decl "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}" bv_arith_nat nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (iterate def-decl "T" function_iterate nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 2463 1240 nil nil)) (iterate_inc_m 0 (iterate_inc_m-1 nil 3249114872 3249243334 ("" (induct "m") (("1" (assert) (("1" (skosimp*) (("1" (lemma "bv_plus0[N]") (("1" (inst-cp - "iterate[bvec[N]]
               (LAMBDA (b: bvec[N]): b + bv1!1, n!1)(fill[N](FALSE))" "0") (("1" (replace -2) (("1" (hide -2) (("1" (case-replace "(LAMBDA (b: bvec[N]): b + (bv1!1 + 0)) = (LAMBDA (b: bvec[N]): b + bv1!1)") (("1" (hide 2) (("1" (decompose-equality 1) (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (reduce) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (assert) (("2" (inst - "bv1!1 + 1" "n!1") (("2" (case-replace "(LAMBDA (b: bvec[N]): b + (bv1!1 + 1 + j!1)) =
     (LAMBDA (b: bvec[N]): b + (bv1!1 + (1 + j!1)))") (("1" (replace -2) (("1" (hide -1 -2) (("1" (rewrite "iterate_inc") (("1" (assert) (("1" (rewrite "bv_add_2_consts[N]") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "bv_add_2_consts[N]") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((iterate_inc formula-decl nil BitvectorMultiplication nil) (bv_add_2_consts formula-decl nil bv_arith_nat nil) (bv_plus0 formula-decl nil bv_arith_nat nil) (bv1!1 skolem-const-decl "bvec[N]" BitvectorMultiplication nil) (nat_induction formula-decl nil naturalnumbers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (+ const-decl "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}" bv_arith_nat nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (iterate def-decl "T" function_iterate nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 4871 2350 nil nil)) (iterate_modulo 0 (iterate_modulo-1 nil 3249114872 3249243336 ("" (skosimp*) (("" (lemma "iterate_inc_m") (("" (inst - "bv2!1" "i!1 * exp2(N)" "bv2nat(-bv2!1)") (("" (lemma "bv_plus_wrap[N]") (("" (inst -1 "iterate[bvec[N]]
                       (LAMBDA (b: bvec[N]): b + bv2!1, i!1 * exp2(N))(fill[N](FALSE))" " i!1 * bv2nat(-bv2!1)") (("" (replace -1) (("" (replace -2 1 rl) (("" (hide -1 -2) (("" (rewrite "bv2nat_elim[N]") (("" (rewrite "plus_min_zero") (("" (case "FORALL(n:nat) : fill[N](FALSE) =
                                  iterate[bvec[N]]
                                      (LAMBDA (b: bvec[N]): b + fill[N](FALSE), n)
                                      (fill[N](FALSE))") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (hide 2) (("2" (induct "n") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "iterate" 1) (("2" (rewrite "bv_add_fill_F[N]") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((iterate_inc_m formula-decl nil BitvectorMultiplication nil) (bv_plus_wrap formula-decl nil bv_arith_nat nil) (plus_min_zero formula-decl nil BitvectorUtil nil) (bv_add_fill_F formula-decl nil bv_arith_nat nil) (nat_induction formula-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (bv2nat_elim formula-decl nil bv_arith_nat nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (iterate def-decl "T" function_iterate nil) (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}" bv_arithmetic nil) (- const-decl "[numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 2254 1160 nil nil)) (iterate_comm 0 (iterate_comm-1 nil 3249114872 3249243341 ("" (lemma "bvec_induction") (("" (inst -1 "LAMBDA(bv2:bvec[N]) : FORALL (bv1: bvec[N]):
              iterate[bvec[N]]
                  (LAMBDA (b: bvec[N]): b + bv1, bv2nat(bv2))(fill[N](FALSE))
               =
               iterate[bvec[N]]
                   (LAMBDA (b: bvec[N]): b + bv2, bv2nat(bv1))(fill[N](FALSE))") (("" (split -) (("1" (skosimp*) (("1" (inst?) nil nil)) nil) ("2" (hide 2) (("2" (lemma "bvec_induction") (("2" (inst -1 "LAMBDA(bv1: bvec[N]):
                    iterate[bvec[N]]
                        (LAMBDA (b: bvec[N]): b + bv1, bv2nat(fill[N](FALSE)))
                        (fill[N](FALSE))
                     =
                     iterate[bvec[N]]
                         (LAMBDA (b: bvec[N]): b + fill[N](FALSE), bv2nat(bv1))
                         (fill[N](FALSE))") (("2" (split -) (("1" (propax) nil nil) ("2" (hide 2) (("2" (skosimp*) (("2" (rewrite "bv2nat_fill_F[N]") (("2" (expand "iterate" 1 1) (("2" (expand "iterate" -1 1) (("2" (rewrite "bv_plus1[N]") (("2" (lift-if) (("2" (split) (("1" (flatten) (("1" (expand "iterate") (("1" (propax) nil nil)) nil)) nil) ("2" (flatten) (("2" (expand "iterate" +) (("2" (replace -1 * rl) (("2" (rewrite "bv_add_fill_F[N]") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skosimp*) (("3" (rewrite "bv_plus1[N]") (("3" (lift-if) (("3" (split) (("1" (flatten) (("1" (expand "iterate" 1 1) (("1" (replace -1) (("1" (lemma "iterate_inc") (("1" (inst - "bv!1" "bv2nat(bv1!1)") (("1" (replace -1) (("1" (hide -1) (("1" (inst - "bv1!1") (("1" (replace -2 * rl) (("1" (hide -2) (("1" (case-replace "iterate[bvec[N]]
                             (LAMBDA (b: bvec[N]): b + bv1!1, (exp2(N) - 1))(fill[N](FALSE))
                          + bv2nat(bv1!1) = iterate[bvec[N]]
                             (LAMBDA (b: bvec[N]): b + bv1!1, exp2(N))(fill[N](FALSE))") (("1" (hide -1 -2) (("1" (lemma "iterate_modulo") (("1" (inst -1 "bv1!1" "1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (expand "iterate" 1 2) (("2" (rewrite "bv2nat_elim[N]") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "iterate" 2 1) (("2" (inst -1 "bv1!1") (("2" (replace -1) (("2" (hide -1) (("2" (lemma "iterate_inc") (("2" (inst - "bv!1" "bv2nat(bv1!1)") (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "bv2nat_elim[N]") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (PRED type-eq-decl nil defined_types nil) (= const-decl "[T, T -> boolean]" equalities nil) (iterate def-decl "T" function_iterate nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (iterate_inc formula-decl nil BitvectorMultiplication nil) (bv2nat_elim formula-decl nil bv_arith_nat nil) (iterate_modulo formula-decl nil BitvectorMultiplication nil) (+ const-decl "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}" bv_arith_nat nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (bv2nat_fill_F formula-decl nil bv_nat nil) (bv_add_fill_F formula-decl nil bv_arith_nat nil) (bv_plus1 formula-decl nil bv_arith_nat nil) (bvec_induction formula-decl nil BitvectorUtil nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil)) 4901 2390 nil nil)) (times_rec_comm 0 (times_rec_comm-1 nil 3249114872 3249243342 ("" (skosimp*) (("" (rewrite "times_rec_iterate") (("" (rewrite "times_rec_iterate") (("" (rewrite "iterate_comm") nil nil)) nil)) nil)) nil) proved ((times_rec_iterate formula-decl nil BitvectorMultiplication nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (iterate_comm formula-decl nil BitvectorMultiplication nil)) 334 180 nil nil)) (times_comm 0 (times_comm-1 nil 3249114872 3249243342 ("" (skosimp*) (("" (expand "*") (("" (reduce) (("" (rewrite "times_rec_comm") nil nil)) nil)) nil)) nil) proved ((* const-decl "bvec[N]" BitvectorMultiplication nil) (times_rec_comm formula-decl nil BitvectorMultiplication nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)) 224 60 nil nil)) (iterate_min_second 0 (iterate_min_second-1 nil 3249114872 3249243343 ("" (induct "n") (("1" (skosimp*) (("1" (expand "iterate") (("1" (rewrite "min_fill_F") nil nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "iterate" +) (("2" (inst?) (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "bv_neg_distribution") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bv_neg_distribution formula-decl nil bv_arith_minus_rules nil) (min_fill_F formula-decl nil BitvectorUtil nil) (nat_induction formula-decl nil naturalnumbers nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}" bv_arithmetic nil) (- const-decl "[numfield -> numfield]" number_fields nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (iterate def-decl "T" function_iterate nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1585 810 nil nil)) (times_rec_min_first 0 (times_rec_min_first-1 nil 3249114872 3249243344 ("" (skosimp*) (("" (rewrite "times_rec_iterate") (("" (rewrite "times_rec_iterate") (("" (use "iterate_min_second") nil nil)) nil)) nil)) nil) proved ((times_rec_iterate formula-decl nil BitvectorMultiplication nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (- const-decl "[numfield -> numfield]" number_fields nil) (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}" bv_arithmetic nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (iterate_min_second formula-decl nil BitvectorMultiplication nil)) 563 240 nil nil)) (times_rec_min_second 0 (times_rec_min_second-1 nil 3249114872 3249243344 ("" (skosimp*) (("" (rewrite "times_rec_comm") (("" (rewrite "times_rec_min_first") (("" (rewrite "times_rec_comm") nil nil)) nil)) nil)) nil) proved ((times_rec_comm formula-decl nil BitvectorMultiplication nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (- const-decl "[numfield -> numfield]" number_fields nil) (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}" bv_arithmetic nil) (times_rec_min_first formula-decl nil BitvectorMultiplication nil)) 234 80 nil nil)) (times_min_first 0 (times_min_first-1 nil 3249114872 3249243344 ("" (skosimp*) (("" (expand "*") (("" (rewrite "times_rec_min_first") nil nil)) nil)) nil) proved ((* const-decl "bvec[N]" BitvectorMultiplication nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (times_rec_min_first formula-decl nil BitvectorMultiplication nil)) 57 60 nil nil)) (times_min_second 0 (times_min_second-1 nil 3249114872 3249243345 ("" (skosimp*) (("" (rewrite "times_comm") (("" (rewrite "times_min_first") (("" (rewrite "times_comm") nil nil)) nil)) nil)) nil) proved ((times_comm formula-decl nil BitvectorMultiplication nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (- const-decl "[numfield -> numfield]" number_fields nil) (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}" bv_arithmetic nil) (times_min_first formula-decl nil BitvectorMultiplication nil)) 235 80 nil nil)) (bv2nat_one 0 (bv2nat_one-1 nil 3249114872 3249243346 ("" (use "N_size") (("" (lemma "bv2nat_lem_rule") (("" (inst?) (("1" (expand "b2n") (("1" (expand "^") (("1" (assert) (("1" (expand "one" -1 1) (("1" (expand "one" -1 1) (("1" (lemma "bv2nat_fill_F[N-1]") (("1" (expand "fill") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) proved ((bv2nat_lem_rule formula-decl nil bv_arith_nat_caret_rules nil) (b2n const-decl "nbit" bit nil) (fill const-decl "bit" bv nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bv2nat_fill_F formula-decl nil bv_nat nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (^ const-decl "bit" bv nil) (one const-decl "bvec[N]" BitvectorMultiplication nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (above nonempty-type-eq-decl nil integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (N_size formula-decl nil BitvectorMultiplication nil)) 1241 600 nil nil)) (bv2int_one 0 (bv2int_one-1 nil 3249114872 3249243346 ("" (auto-rewrite "bv2nat_one") (("" (expand "bv2int") (("" (reduce) (("" (typepred "exp2(N - 1)") (("" (use "N_size") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((bv2int const-decl "rng_2s_comp" bv_int nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (> const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (N_size formula-decl nil BitvectorMultiplication nil) (bv2nat_one formula-decl nil BitvectorMultiplication nil)) 338 190 nil nil)) (times_one_first 0 (times_one_first-1 nil 3249114872 3249243349 ("" (use "N_size") (("" (skosimp*) (("" (expand "*") (("" (expand "one") (("" (assert) (("" (expand "times_rec") (("" (case-replace "left_shift(1,
                    times_rec(right_shift(1, (LAMBDA (k: below(N)): k = 0)),
                              bv!1, N - 1)) = fill[N](FALSE)") (("1" (rewrite "bv_add_fill_F[N]") nil nil) ("2" (hide -1 2) (("2" (case-replace "right_shift(1, (LAMBDA (k: below(N)): k = 0)) = fill[N](FALSE)") (("1" (hide -1) (("1" (rewrite "times_rec_zero_left") (("1" (apply-extensionality :hide? t) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((one const-decl "bvec[N]" BitvectorMultiplication nil) (times_rec def-decl "bvec[N]" BitvectorMultiplication nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (times_rec_zero_left formula-decl nil BitvectorMultiplication nil) (bv_add_fill_F formula-decl nil bv_arith_nat nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (right_shift const-decl "bvec[N]" bv_shift nil) (left_shift const-decl "bvec[N]" bv_shift nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (* const-decl "bvec[N]" BitvectorMultiplication nil) (N_size formula-decl nil BitvectorMultiplication nil)) 2446 1180 nil nil)) (times_one_second 0 (times_one_second-1 nil 3249114872 3249243349 ("" (skosimp*) (("" (rewrite "times_comm") (("" (rewrite "times_one_first") nil nil)) nil)) nil) proved ((times_comm formula-decl nil BitvectorMultiplication nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (one const-decl "bvec[N]" BitvectorMultiplication nil) (times_one_first formula-decl nil BitvectorMultiplication nil)) 197 50 nil nil)) (iterate_zero_add 0 (iterate_zero_add-1 nil 3249114872 3249243352 ("" (induct "n") (("1" (skosimp*) (("1" (expand "iterate") (("1" (rewrite "bv_add_comm") (("1" (rewrite "bv_add_fill_F[N]") nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "iterate" +) (("2" (inst?) (("2" (replace -1) (("2" (hide -1) (("2" (rewrite "bv_add_assoc" :dir rl) (("2" (rewrite "bv_add_assoc" :dir rl) (("2" (rewrite "bv_add_comm") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bv_add_assoc formula-decl nil bv_arith_nat nil) (bv_add_comm formula-decl nil bv_arith_nat nil) (bv_add_fill_F formula-decl nil bv_arith_nat nil) (nat_induction formula-decl nil naturalnumbers nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (iterate def-decl "T" function_iterate nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 3019 1470 nil nil)) (times_rec_distr 0 (times_rec_distr-1 nil 3249114872 3249243354 ("" (skosimp*) (("" (rewrite "times_rec_iterate") (("" (rewrite "times_rec_iterate") (("" (rewrite "times_rec_iterate") (("" (rewrite "bv_add[N]") (("" (lift-if) (("" (split) (("1" (flatten) (("1" (lemma "iterate_add[bvec[N]]") (("1" (inst?) (("1" (replace -1 1 rl) (("1" (hide -1) (("1" (expand "o") (("1" (lemma "iterate_zero_add") (("1" (inst - "bv1!1" "(iterate(LAMBDA (b: bvec[N]): b + bv1!1, bv2nat(bv3!1))
                         (fill[N](FALSE)))" "bv2nat(bv2!1)") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lemma "iterate_add[bvec[N]]") (("2" (inst-cp -1 "LAMBDA (b: bvec[N]): b + bv1!1" "bv2nat(bv2!1) + bv2nat(bv3!1) - exp2(N)" "exp2(N)") (("1" (assert) (("1" (decompose-equality -2) (("1" (expand "o" -1) (("1" (inst - "fill[N](FALSE)") (("1" (lemma "iterate_modulo") (("1" (inst -1 "bv1!1" "1") (("1" (replace -1) (("1" (hide -1) (("1" (replace -1) (("1" (hide -1) (("1" (inst?) (("1" (replace -1 2 rl) (("1" (hide -1) (("1" (expand "o") (("1" (lemma "iterate_zero_add") (("1" (inst - "bv1!1" "(iterate(LAMBDA (b: bvec[N]): b + bv1!1, bv2nat(bv3!1))
                                 (fill[N](FALSE)))" "bv2nat(bv2!1)") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((times_rec_iterate formula-decl nil BitvectorMultiplication nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (= const-decl "[T, T -> boolean]" equalities nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (bv2!1 skolem-const-decl "bvec[N]" BitvectorMultiplication nil) (bv3!1 skolem-const-decl "bvec[N]" BitvectorMultiplication nil) (iterate_modulo formula-decl nil BitvectorMultiplication nil) (iterate_zero_add formula-decl nil BitvectorMultiplication nil) (iterate def-decl "T" function_iterate nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (FALSE const-decl "bool" booleans nil) (O const-decl "T3" function_props nil) (iterate_add formula-decl nil function_iterate nil) (bv_add formula-decl nil bv_arith_nat nil)) 2435 1170 nil nil)) (times_distr_right 0 (times_distr_right-1 nil 3249114872 3249243355 ("" (skosimp*) (("" (expand "*") (("" (rewrite "times_rec_distr") nil nil)) nil)) nil) proved ((* const-decl "bvec[N]" BitvectorMultiplication nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (times_rec_distr formula-decl nil BitvectorMultiplication nil)) 324 170 nil nil)) (times_distr_left 0 (times_distr_left-1 nil 3249114872 3249243355 ("" (skosimp*) (("" (rewrite "times_comm") (("" (rewrite "times_distr_right") (("" (rewrite "times_comm") (("" (case-replace "(bv3!1 * bv2!1) = (bv2!1 * bv3!1)") (("" (rewrite "times_comm") nil nil)) nil)) nil)) nil)) nil)) nil) proved ((times_comm formula-decl nil BitvectorMultiplication nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (= const-decl "[T, T -> boolean]" equalities nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (* const-decl "bvec[N]" BitvectorMultiplication nil) (times_distr_right formula-decl nil BitvectorMultiplication nil)) 549 240 nil nil)) (times_distr_iterate 0 (times_distr_iterate-1 nil 3249114872 3249243357 ("" (induct "n") (("1" (skosimp*) (("1" (expand "iterate") (("1" (rewrite "times_zero_second") nil nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "iterate" +) (("2" (inst?) (("2" (rewrite "times_distr_right") (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((times_distr_right formula-decl nil BitvectorMultiplication nil) (times_zero_second formula-decl nil BitvectorMultiplication nil) (nat_induction formula-decl nil naturalnumbers nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (iterate def-decl "T" function_iterate nil) (* const-decl "bvec[N]" BitvectorMultiplication nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1172 540 nil nil)) (times_assoc 0 (times_assoc-1 nil 3249114872 3249243357 ("" (skosimp*) (("" (expand "*" 1 4) (("" (rewrite "times_rec_iterate") (("" (rewrite "times_distr_iterate") (("" (expand "*" 1 2) (("" (rewrite "times_rec_iterate") nil nil)) nil)) nil)) nil)) nil)) nil) proved ((* const-decl "bvec[N]" BitvectorMultiplication nil) (times_distr_iterate formula-decl nil BitvectorMultiplication nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorMultiplication nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (times_rec_iterate formula-decl nil BitvectorMultiplication nil)) 342 180 t nil)))
