(bv_arith_caret (bv_shift_TCC1 0 (bv_shift_TCC1-1 nil 3249241280 3249242933 ("" (auto-rewrite-theory "integers") (("" (assert) nil)) nil) proved nil 226 50 nil nil)) (bv_shift_TCC2 0 (bv_shift_TCC2-1 nil 3249241280 3249242933 ("" (tcc :defs !) nil nil) proved nil 44 40 nil nil)) (bv_shift_TCC3 0 (bv_shift_TCC3-1 nil 3249241280 3249242933 ("" (tcc :defs !) nil nil) proved nil 60 60 nil nil)) (bv_shift 0 (bv_shift-1 nil 3249241280 3249242941 ("" (skosimp*) (("" (case "ss!1 = 0") (("1" (replace -1) (("1" (expand "exp2") (("1" (rewrite "div_by_one") (("1" (rewrite "bv_caret_all[N!1]") (("1" (same-name "bv2nat[N!1-ss!1]" "bv2nat[N!1]") (("1" (assert) nil) ("2" (assert) nil))))))))))) ("2" (expand "^") (("2" (rewrite "bv2nat_as_sum[N!1]") (("2" (lemma "sigma_split") (("2" (inst?) (("2" (inst -1 "ss!1-1") (("1" (assert) (("1" (replace -1) (("1" (hide -1) (("1" (case "sigma(ss!1, N!1 - 1,
                    extend((LAMBDA (ii: below(N!1)): exp2(ii) * b2n(bv!1(ii))))) = 
              exp2(ss!1)*sigma(0, N!1 - 1 - ss!1,
                    extend((LAMBDA (ii: below(N!1-ss!1)): exp2(ii)* b2n(bv!1(ii+ss!1)))))") (("1" (replace -1) (("1" (hide -1) (("1" (lemma "div_sum_nat") (("1" (inst -1 "sigma(0, N!1 - 1 - ss!1,
                        extend((LAMBDA (ii: below(N!1-ss!1)):
                                  exp2(ii) * b2n(bv!1(ii + ss!1)))))" "exp2(ss!1)" "sigma(0, ss!1 - 1,
                  extend((LAMBDA (ii: below(N!1)):
                            exp2(ii) * b2n(bv!1(ii)))))") (("1" (replace -1) (("1" (hide -1) (("1" (case "        div(sigma(0, ss!1 - 1,
                  extend((LAMBDA
                          (ii: below(N!1)):
                            exp2(ii) * b2n(bv!1(ii))))),
            exp2(ss!1)) = 0") (("1" (replace -1) (("1" (hide -1) (("1" (rewrite "bv2nat_as_sum[N!1-ss!1]") (("1" (assert) nil))))))) ("2" (hide 3) (("2" (lemma "div_lt_nat") (("2" (inst?) (("2" (assert) (("2" (hide 2) (("2" (lemma "bv2nat_as_sum[ss!1]") (("2" (inst -1 "(LAMBDA (ii: below(ss!1)): bv!1(ii))") (("2" (case "sigma(0, ss!1 - 1, extend((LAMBDA (ii: below(N!1)): exp2(ii) * b2n(bv!1(ii))))) = bv2nat((LAMBDA (ii: below(ss!1)): bv!1(ii)))") (("1" (replace -1) (("1" (hide -1) (("1" (assert) nil))))) ("2" (hide 2 3) (("2" (replace -1) (("2" (hide -1) (("2" (expand "extend") (("2" (assert) (("2" (rewrite "sigma_restrict_eq") (("1" (hide 2) (("1" (expand "restrict") (("1" (propax) nil))))) ("2" (hide 2) (("2" (skosimp*) (("2" (assert) nil))))))))))))))))))))))))))))))))))))))))))))))) ("2" (assert) (("2" (auto-rewrite-theory "integers") (("2" (hide 3) (("2" (lemma "sigma_shift") (("2" (inst -1 "extend((LAMBDA (ii: below(N!1)): exp2(ii) * b2n(bv!1(ii))))" "N!1-1-ss!1" "0" "ss!1") (("2" (assert) (("2" (replace -1) (("2" (hide -1) (("2" (lemma "sigma_mult") (("2" (inst?) (("2" (assert) (("2" (replace -1 1 rl) (("2" (hide -1) (("2" (rewrite "sigma_restrict_eq") (("2" (hide 2) (("2" (expand "restrict") (("2" (apply-extensionality 1) (("2" (hide 2) (("2" (expand "extend") (("2" (lift-if) (("2" (lemma "exp2_sum") (("2" (inst?) (("2" (expand "b2n") (("2" (lift-if) (("2" (ground) nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (hide 3) (("2" (assert) nil)))))))))))))))) nil) proved ((below type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (exp2 def-decl "posnat" exp2 nil) (bv_caret_all formula-decl nil bv_caret nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (div_by_one formula-decl nil div nil) (bv2nat_as_sum formula-decl nil bv_sum nil) (extend const-decl "[nat -> nat]" bv_sum nil) (nbit type-eq-decl nil bit nil) (b2n const-decl "nbit" bit nil) (sigma_mult formula-decl nil sums nil) (exp2_sum formula-decl nil exp2 nil) (sigma_shift formula-decl nil sums nil) (div_sum_nat formula-decl nil div nil) (integer nonempty-type-from-decl nil integers nil) (div const-decl "integer" div nil) (div_lt_nat formula-decl nil div nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (sigma_restrict_eq formula-decl nil sums nil) (restrict const-decl "[nat -> nat]" sums nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (sigma def-decl "nat" sums nil) (ss!1 skolem-const-decl "below(N!1)" bv_arith_caret nil) (N!1 skolem-const-decl "posnat" bv_arith_caret nil) (sigma_split formula-decl nil sums nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)) 8011 3790 nil nil)) (bv_bottom_TCC1 0 (bv_bottom_TCC1-1 nil 3249241280 3249242941 ("" (tcc :defs !) nil nil) proved nil 74 40 nil nil)) (bv_bottom 0 (bv_bottom-1 nil 3249241280 3249242950 ("" (skosimp*) (("" (case "ss!1 = N!1-1") (("1" (replace -1) (("1" (rewrite "mod_lt_nat") (("1" (rewrite "bv_caret_all[N!1]") (("1" (same-name "bv2nat[ss!1 + 1]" "bv2nat[N!1]") (("1" (assert) nil) ("2" (assert) nil))))))))) ("2" (rewrite "bv2nat_as_sum[N!1]") (("2" (lemma "sigma_split") (("2" (inst -1 "extend((LAMBDA (ii: below(N!1)): exp2(ii) * b2n(bv!1(ii))))" "N!1-1" "0" "ss!1") (("2" (assert) (("2" (replace -1) (("2" (hide -1) (("2" (lemma "sigma_shift") (("2" (inst -1 "extend((LAMBDA (ii: below(N!1)): exp2(ii) * b2n(bv!1(ii))))" "N!1-ss!1-2" "0" "ss!1+1") (("2" (assert) (("2" (replace -1) (("2" (hide -1) (("2" (expand "extend" 2 2) (("2" (case "sigma(0, N!1 - 2 - ss!1,
                    (LAMBDA (n: nat):
                       IF 1 + n + ss!1 < N!1 THEN exp2(1 + n + ss!1)
                           * b2n(bv!1(1 + n + ss!1))
                       ELSE 0
                       ENDIF)) =
              exp2(ss!1+1)*
              sigma(0, N!1 - ss!1 - 2,
                    (LAMBDA
                     (n: nat):
                       IF n + ss!1 + 1 < N!1 THEN exp2(n)
                           * b2n(bv!1(n + ss!1 + 1))
                       ELSE 0
                       ENDIF))") (("1" (replace -1) (("1" (hide -1) (("1" (lemma "mod_sum") (("1" (inst -1 "sigma(0, ss!1, extend((LAMBDA (ii: below(N!1)
):
                            exp2(ii) * b2n(bv!1(ii)))))" "exp2(ss!1 + 1)" "sigma(0, N!1 - ss!1 - 2,
                        (LAMBDA (n: nat):
                           IF n + ss!1 + 1 < N!1 THEN exp2(n)
                               * b2n(bv!1(n + ss!1 + 1))
                           ELSE 0
                           ENDIF))") (("1" (replace -1) (("1" (hide -1) (("1" (rewrite "mod_lt_nat") (("1" (rewrite "bv2nat_as_sum[ss!1+1]") (("1" (rewrite "sigma_restrict_eq") (("1" (hide 2 3) (("1" (expand "restrict") (("1" (apply-extensionality 1) (("1" (hide 2) (("1" (expand "extend") (("1" (lift-if) (("1" (expand "^") (("1" (propax) nil))))))))))))))))))) ("2" (hide 2 3) (("2" (lemma "bv2nat_as_sum[ss!1+1]") (("2" (inst -1 "(LAMBDA (ii: below(ss!1+1)): bv!1(ii))") (("2" (assert) (("2" (case "  sigma(0, ss!1,
            extend((LAMBDA (ii: below(N!1)): exp2(ii) * b2n(bv!1(ii))))) =sigma(0, ss!1,
              extend((LAMBDA (ii: below(ss!1 + 1)):
                        exp2(ii) * b2n(bv!1(ii)))))") (("1" (replace -1) (("1" (hide -1) (("1" (replace -1 + rl) (("1" (hide -1) (("1" (assert) nil))))))))) ("2" (hide -1 2) (("2" (rewrite "sigma_restrict_eq") (("2" (hide 2) (("2" (expand "restrict") (("2" (expand "extend") (("2" (propax) nil))))))))))))))))))))))))))))))))))) ("2" (hide 2 3) (("2" (lemma "sigma_mult") (("2" (inst?) (("2" (replace -1 + rl) (("2" (hide -1) (("2" (assert) (("2" (rewrite "sigma_restrict_eq") (("2" (hide 2) (("2" (expand "restrict") (("2" (apply-extensionality 1) (("1" (hide 2) (("1" (lemma "exp2_sum") (("1" (inst -1 "x!1" "ss!1+1") (("1" (lift-if) (("1" (ground) nil))))))))) ("2" (hide 2) (("2" (skosimp*) (("2" (assert) nil)))))))))))))))))))))))))))))))))))))))))))))))))))))) nil) proved ((- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (below type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (mod_lt_nat formula-decl nil mod nil) (exp2 def-decl "posnat" exp2 nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (bv_caret_all formula-decl nil bv_caret nil) (sigma_split formula-decl nil sums nil) (exp2_sum formula-decl nil exp2 nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (N!1 skolem-const-decl "posnat" bv_arith_caret nil) (ss!1 skolem-const-decl "below(N!1)" bv_arith_caret nil) (sigma_mult formula-decl nil sums nil) (mod_sum formula-decl nil mod nil) (sigma_restrict_eq formula-decl nil sums nil) (restrict const-decl "[nat -> nat]" sums nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (sigma def-decl "nat" sums nil) (sigma_shift formula-decl nil sums nil) (b2n const-decl "nbit" bit nil) (nbit type-eq-decl nil bit nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (extend const-decl "[nat -> nat]" bv_sum nil) (bv2nat_as_sum formula-decl nil bv_sum nil)) 8328 4050 nil nil)) (bv_top_TCC1 0 (bv_top_TCC1-1 nil 3249241280 3249242951 ("" (skosimp*) (("" (typepred "bv2nat[N!1](bv!1)") (("" (expand "div") (("" (lemma "both_sides_div_pos_lt1") (("" (inst?) (("" (inst -1 "exp2(N!1)") (("" (assert) (("" (rewrite "exp2_minus" :dir rl) (("" (assert) nil)))))))))))))))) nil) proved ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (exp2_minus formula-decl nil exp2 nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (div const-decl "integer" div nil)) 845 390 nil nil)) (bv_top 0 (bv_top-1 nil 3249241280 3249242951 ("" (skosimp*) (("" (lemma "bv_shift") (("" (inst?) (("" (replace -1 1 rl) (("" (hide -1) (("" (rewrite "nat2bv_inv[N!1-ss!1]") nil)))))))))) nil) proved ((bv_shift formula-decl nil bv_arith_caret nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nat2bv_inv formula-decl nil bv_nat nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 451 290 nil nil)) (bv_bot 0 (bv_bot-1 nil 3249241280 3249242953 ("" (skosimp*) (("" (lemma "bv_bottom") (("" (inst?) (("" (replace -1 1 rl) (("" (hide -1) (("" (rewrite "nat2bv_inv[nn!1+1]") nil)))))))))) nil) proved ((bv_bottom formula-decl nil bv_arith_caret nil) (nat2bv_inv formula-decl nil bv_nat nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 834 370 nil nil)) (bv_add_subrange 0 (bv_add_subrange-1 nil 3249241280 3249242959 ("" (skosimp*) (("" (rewrite "bv2nat_inj") (("" (hide 2) (("" (rewrite "bv_add_mod[nn!1+1]") (("" (rewrite "bv_bottom") (("" (rewrite "bv_add_mod[N!1]") (("" (rewrite "bv_bottom") (("" (rewrite "bv_bottom") (("" (rewrite "mod_of_mod") (("" (lemma "mod_of_mod") (("" (inst -1 "bv2nat(bv2!1)" "bv2nat(bv1!1)" "exp2(nn!1+1)") (("" (replace -1) (("" (hide -1) (("" (case "bv2nat(bv1!1) + bv2nat(bv2!1) < exp2(N!1)") (("1" (rewrite "mod_lt_nat") (("1" (assert) nil))) ("2" (rewrite "mod_gt") (("2" (lemma "exp2_sum") (("2" (inst -1 "N!1-nn!1-1" "1+nn!1") (("2" (simplify -1) (("2" (replace -1) (("2" (hide -1) (("2" (lemma "mod_sum_pos") (("2" (inst -1 "bv2nat(bv1!1) + bv2nat(bv2!1)" "-exp2(N!1 - 1 - nn!1)" "exp2(1+nn!1)") (("2" (assert) nil)))))))))))))))))))))))))))))))))))))))))))) nil) proved ((bv2nat_inj formula-decl nil bv_nat nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (= const-decl "[T, T -> boolean]" equalities nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (bv_add_mod formula-decl nil bv_arith_nat nil) (mod_lt_nat formula-decl nil mod nil) (exp2_sum formula-decl nil exp2 nil) (- const-decl "[numfield -> numfield]" number_fields nil) (mod_sum_pos formula-decl nil mod nil) (mod_gt formula-decl nil mod nil) (mod_of_mod formula-decl nil mod nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bv_bottom formula-decl nil bv_arith_caret nil)) 6108 2950 nil nil)) (bv_plus_caret 0 (bv_plus_caret-1 nil 3249241280 3249242964 ("" (skosimp*) (("" (rewrite "bv2nat_inj") (("" (hide 2) (("" (rewrite "bv_bottom") (("" (rewrite "bv_plus") (("" (rewrite "bv_plus[nn!1+1]") (("" (rewrite "bv_bottom") (("" (lemma "mod_of_mod") (("" (inst -1 "i!1" "bv2nat(bv1!1)" "exp2(1+nn!1)") (("" (replace -1) (("" (hide -1) (("" (lemma "exp2_sum") (("" (inst -1 "N!1-nn!1-1" "nn!1+1") (("" (simplify -1) (("" (replace -1) (("" (hide -1) (("" (lemma "mod_mult") (("" (inst -1 "bv2nat(bv1!1)+i!1" "exp2(1+nn!1)" "exp2(N!1 - 1 - nn!1)") (("" (assert) nil)))))))))))))))))))))))))))))))))))) nil) proved ((bv2nat_inj formula-decl nil bv_nat nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (= const-decl "[T, T -> boolean]" equalities nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (+ const-decl "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}" bv_arith_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (bv_bottom formula-decl nil bv_arith_caret nil) (mod_of_mod formula-decl nil mod nil) (exp2_sum formula-decl nil exp2 nil) (mod_mult formula-decl nil mod nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bv_plus formula-decl nil bv_arith_nat nil)) 4015 1870 nil nil)) (bv_middle_TCC1 0 (bv_middle_TCC1-1 nil 3249241280 3249242964 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil)) 266 110 nil nil)) (bv_middle_TCC2 0 (bv_middle_TCC2-1 nil 3249241280 3249242964 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil)) 560 250 nil nil)) (bv_middle_TCC3 0 (bv_middle_TCC3-1 nil 3249241280 3249242965 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil)) 402 250 nil nil)) (bv_middle 0 (bv_middle-1 nil 3249241280 3249242969 ("" (skosimp*) (("" (case "bv!1^(i!1,j!1) =  bv!1^(n!1-1,j!1)^(i!1-j!1,0)") (("1" (replace -1) (("1" (hide -1) (("1" (rewrite "bv_bottom") (("1" (rewrite "bv_shift") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality 1 :hide? t) (("2" (grind) nil nil)) nil)) nil) ("3" (assert) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil)) nil)) nil) proved ((^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bv_shift formula-decl nil bv_arith_caret nil) (bv_bottom formula-decl nil bv_arith_caret nil) (i!1 skolem-const-decl "below(n!1)" bv_arith_caret nil) (j!1 skolem-const-decl "below(n!1)" bv_arith_caret nil) (n!1 skolem-const-decl "posnat" bv_arith_caret nil)) 3919 1850 nil nil)) (bv2nat_caret_00_TCC1 0 (bv2nat_caret_00_TCC1-1 nil 3249241280 3249242969 ("" (subtype-tcc) nil nil) proved nil 186 40 nil nil)) (bv2nat_caret_00 0 (bv2nat_caret_00-1 nil 3249241280 3249242970 ("" (skosimp*) (("" (grind) nil)) nil) proved ((bv2nat const-decl "below(exp2(N))" bv_nat nil) (bv2nat_rec def-decl "nat" bv_nat nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (exp2 def-decl "posnat" exp2 nil)) 1247 620 nil nil)) (bv2nat_lem_TCC1 0 (bv2nat_lem_TCC1-1 nil 3249241280 3249242970 ("" (subtype-tcc) nil nil) proved nil 34 30 nil nil)) (bv2nat_lem_TCC2 0 (bv2nat_lem_TCC2-1 nil 3249241280 3249242970 ("" (subtype-tcc) nil nil) proved nil 33 40 nil nil)) (bv2nat_lem_TCC3 0 (bv2nat_lem_TCC3-1 nil 3249241280 3249242970 ("" (subtype-tcc) nil nil) proved nil 33 30 nil nil)) (bv2nat_lem_TCC4 0 (bv2nat_lem_TCC4-1 nil 3249241280 3249242971 ("" (subtype-tcc) nil nil) proved nil 185 20 nil nil)) (bv2nat_lem 0 (bv2nat_lem-1 nil 3249241280 3249242972 ("" (skosimp*) (("" (rewrite "bv_shift") (("" (expand "exp2") (("" (expand "exp2") (("" (lemma "bv_bottom") (("" (inst?) (("" (inst -1 "0") (("" (case "bv2nat(bv!1 ^ (0, 0)) = b2n(bv!1^0)") (("1" (replace -1) (("1" (hide -1) (("1" (replace -1) (("1" (hide -1) (("1" (expand "exp2") (("1" (expand "exp2") (("1" (expand "div") (("1" (expand "mod") (("1" (propax) nil))))))))))))))))) ("2" (hide -1 2) (("2" (rewrite "bv2nat_caret_00") nil)))))))))))))))))) nil) proved ((bv_shift formula-decl nil bv_arith_caret nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (above nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (^ const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (b2n const-decl "nbit" bit nil) (nbit type-eq-decl nil bit nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (div const-decl "integer" div nil) (bv2nat_caret_00 formula-decl nil bv_arith_caret nil) (bv_bottom formula-decl nil bv_arith_caret nil) (exp2 def-decl "posnat" exp2 nil)) 1576 770 nil nil)))
