(bv_arith_caret_rules
 (bv_add_caret_TCC1 0
  (bv_add_caret_TCC1-1 nil 3341508591 3341508591
   ("" (subtype-tcc) nil nil) proved nil 57 60 nil nil))
 (bv_add_caret 0
  (bv_add_caret-1 nil 3341508604 3341508620
   ("" (skosimp) (("" (rewrite "bv_add_subrange") nil nil)) nil) proved
   ((bv_add_subrange formula-decl nil bv_arith_caret nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil))
   16507 1250 t shostak))
 (bv_caret_over_plus 0
  (bv_caret_over_plus-1 nil 3341508625 3341508636
   ("" (skosimp) (("" (rewrite "bv_plus_caret") nil nil)) nil) proved
   ((bv_plus_caret formula-decl nil bv_arith_caret nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil))
   11719 1140 t shostak))
 (bv_odd_even_pc_TCC1 0
  (bv_odd_even_pc_TCC1-1 nil 3341508591 3341508591
   ("" (subtype-tcc) nil nil) proved nil 15 10 nil nil))
 (bv_odd_even_pc 0
  (bv_odd_even_pc-1 nil 3341508639 3341509708
   ("" (skolem!)
    (("" (lemma "bv_plus_caret")
      (("" (inst-cp - "N!1" "nn!1" "bv!1" 0)
        (("" (inst - "N!1" "nn!1 - 1" "bv!1" 0)
          ((""
            (case "bv!1 ^ (0, 0) + nn!1 = bv!1 ^ (0, 0) + (nn!1 - 1)")
            (("1" (hide -2 -3 1)
              (("1"
                (case "bv2nat[1](bv!1 ^ (0, 0) + nn!1) = bv2nat[1](bv!1 ^ (0, 0) + (nn!1 - 1))")
                (("1" (hide -2)
                  (("1" (rewrite "bv_plus[1]")
                    (("1" (rewrite "bv_plus[1]")
                      (("1" (name-replace "BB" "bv2nat(bv!1 ^ (0, 0))")
                        (("1" (expand* "exp2" "exp2" "mod")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil)
             ("2"
              (case "(bv!1 ^ (0, 0) + nn!1) ^ 0 = (bv!1 ^ (0, 0) + (nn!1 - 1)) ^ 0")
              (("1" (hide -2 -3 2)
                (("1" (apply-extensionality :hide? t)
                  (("1" (expand "^") (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (replace -1 + rl)
                (("2" (replace -2 + rl)
                  (("2" (hide -1 -2 2)
                    (("2" (rewrite "bv_caret_elim")
                      (("2" (rewrite "bv_caret_elim")
                        (("2" (expand "^")
                          (("2" (iff) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bv_plus formula-decl nil bv_arith_nat nil)
    (bv_caret_elim formula-decl nil bv_caret nil)
    (below type-eq-decl nil nat_types nil) (^ const-decl "bit" bv nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bv_plus_caret formula-decl nil bv_arith_caret nil))
   3028 2780 t shostak))
 (bv_even_odd_pc 0
  (bv_even_odd_pc-1 nil 3341509729 3341509936
   ("" (skolem!)
    (("" (lemma "bv_plus_caret")
      (("" (inst-cp - "N!1" "-n!1" "bv!1" 0)
        (("" (inst - "N!1" "-n!1 + 1" "bv!1" 0)
          ((""
            (case "bv!1 ^ (0, 0) + -n!1 =  bv!1 ^ (0, 0) + (-n!1 + 1)")
            (("1" (hide -2 -3 1)
              (("1"
                (case "bv2nat(bv!1 ^ (0, 0) + -n!1) = bv2nat(bv!1 ^ (0, 0) + (-n!1 + 1))")
                (("1" (hide -2)
                  (("1" (rewrite "bv_plus[1]")
                    (("1" (rewrite "bv_plus[1]")
                      (("1" (expand* "exp2" "exp2" "mod")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil)
             ("2"
              (case "(bv!1 ^ (0, 0) + -n!1) ^ 0 = (bv!1 ^ (0, 0) + (-n!1 + 1)) ^ 0")
              (("1" (hide -2 -3 2)
                (("1" (apply-extensionality :hide? t)
                  (("1" (expand "^") (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (replace -1 + rl)
                (("2" (replace -2 + rl)
                  (("2" (hide -1 -2 2)
                    (("2" (rewrite "bv_caret_elim")
                      (("2" (rewrite "bv_caret_elim")
                        (("2" (expand "^")
                          (("2" (iff) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bv_plus_caret formula-decl nil bv_arith_caret nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil)
    (bv_caret_elim formula-decl nil bv_caret nil)
    (bv_plus formula-decl nil bv_arith_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (exp2 def-decl "posnat" exp2 nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (+ const-decl
       "{bvn: bvec[N] | bv2nat(bvn) = mod(bv2nat(bv) + i, exp2(N))}"
       bv_arith_nat nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   207222 5170 t shostak))
 (bv_plus_caret_rule_TCC1 0
  (bv_plus_caret_rule_TCC1-1 nil 3341508591 3341508591
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   347 310 nil nil))
 (bv_plus_caret_rule_TCC2 0
  (bv_plus_caret_rule_TCC2-1 nil 3341508591 3341508591
   ("" (subtype-tcc) nil nil) proved nil 48 20 nil nil))
 (bv_plus_caret_rule_TCC3 0
  (bv_plus_caret_rule_TCC3-1 nil 3341508591 3341508591
   ("" (subtype-tcc) nil nil) proved nil 27 30 nil nil))
 (bv_plus_caret_rule 0
  (bv_plus_caret_rule-1 nil 3341509942 3341510026
   ("" (skosimp)
    (("" (assert)
      (("" (use "bv_add_subrange")
        (("" (replace -1 * rl)
          (("" (expand "^") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (bv_add_subrange formula-decl nil bv_arith_caret nil))
   24837 2580 t shostak)))

