(bv_concat (bvconcat_bot0_TCC1 0 (bvconcat_bot0_TCC1-1 nil 3249241276 3249242806 ("" (subtype-tcc) nil nil) proved nil 57 60 nil nil)) (bvconcat_bot0 0 (bvconcat_bot0-1 nil 3249241276 3249242807 ("" (skosimp*) (("" (expand "o ") (("" (apply-extensionality 1) (("" (skosimp*) (("" (replace -1) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((O const-decl "bvec[n + m]" bv_concat_def nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (n!1 skolem-const-decl "nat" bv_concat nil) (m!1 skolem-const-decl "nat" bv_concat nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (bit type-eq-decl nil bit nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (bvec type-eq-decl nil bv nil) (below type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 845 370 nil nil)) (bvconcat_top0_TCC1 0 (bvconcat_top0_TCC1-1 nil 3249241276 3249242807 ("" (subtype-tcc) nil nil) proved nil 57 50 nil nil)) (bvconcat_top0 0 (bvconcat_top0-1 nil 3249241276 3249242808 ("" (skosimp*) (("" (expand "o ") (("" (apply-extensionality 1) (("" (hide 2) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((O const-decl "bvec[n + m]" bv_concat_def nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (n!1 skolem-const-decl "nat" bv_concat nil) (m!1 skolem-const-decl "nat" bv_concat nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (bit type-eq-decl nil bit nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (bvec type-eq-decl nil bv nil) (below type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 816 310 nil nil)) (bv_concat_bot_TCC1 0 (bv_concat_bot_TCC1-1 nil 3249241276 3249242808 ("" (subtype-tcc) nil nil) proved nil 40 40 nil nil)) (bv_concat_bot 0 (bv_concat_bot-1 nil 3249241276 3249242809 ("" (grind) nil nil) proved ((O const-decl "bvec[n + m]" bv_concat_def nil) (^ const-decl "bit" bv nil)) 262 110 nil nil)) (bv_concat_top_TCC1 0 (bv_concat_top_TCC1-1 nil 3249241276 3249242809 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 89 90 nil nil)) (bv_concat_top_TCC2 0 (bv_concat_top_TCC2-1 nil 3249241276 3249242809 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 532 220 nil nil)) (bv_concat_top 0 (bv_concat_top-1 nil 3249241276 3249242810 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (^ const-decl "bit" bv nil)) 656 310 nil nil)) (bv_concat_assoc 0 (bv_concat_assoc-1 nil 3249241276 3249242811 ("" (skosimp*) (("" (apply-extensionality 1) (("" (hide 2) (("" (expand "o ") (("" (lift-if) (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 1095 480 nil nil)) (bv_concat_top_bit_TCC1 0 (bv_concat_top_bit_TCC1-1 nil 3249241276 3249242811 ("" (subtype-tcc) nil nil) proved nil 311 150 nil nil)) (bv_concat_top_bit_TCC2 0 (bv_concat_top_bit_TCC2-1 nil 3249241276 3249242811 ("" (subtype-tcc) nil nil) proved nil 36 30 nil nil)) (bv_concat_top_bit 0 (bv_concat_top_bit-1 nil 3249241276 3249242812 ("" (grind) nil nil) proved ((O const-decl "bvec[n + m]" bv_concat_def nil) (^ const-decl "bit" bv nil)) 391 230 nil nil)))
