(BitvectorTwoComplementDivision (IMP_BitvectorOneComplementDivision_TCC1 0 (IMP_BitvectorOneComplementDivision_TCC1-1 nil 3249114883 3249243677 ("" (use "N_size") nil nil) proved ((N_size formula-decl nil BitvectorTwoComplementDivision nil)) 23 20 nil nil)) (IMP_BitvectorOneComplementDivision_TCC2 0 (IMP_BitvectorOneComplementDivision_TCC2-1 nil 3249114883 3249243677 ("" (assuming-tcc) nil nil) proved nil 116 90 nil nil)) (DIVREM1_eq 0 (DIVREM1_eq-1 nil 3249114883 3249243679 ("" (skosimp*) (("" (use "divrem1_eq[2*N]") (("" (lemma "bv2nat_times[N]") (("" (rewrite -1) (("" (inst?) (("" (assert) (("" (replace -1 -2 rl) (("" (hide -1) (("" (lemma "bv_add[2*N]") (("" (inst?) (("" (assert) (("" (replace -1 -2 rl) (("" (hide -1) (("" (rewrite "bv2nat_inj") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((divrem1_eq formula-decl nil BitvectorOneComplementDivision nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorTwoComplementDivision nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (rem const-decl "bvec[N]" BitvectorOneComplementDivision nil) (* const-decl "bvec[N]" BitvectorMultiplication nil) (bv2nat_inj formula-decl nil bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (bv_add formula-decl nil bv_arith_nat nil) (div const-decl "bvec[N]" BitvectorOneComplementDivision nil) (bv2nat_times formula-decl nil BitvectorMultiplicationWidenNarrow nil)) 1583 810 nil nil)) (div1_cancel 0 (div1_cancel-1 nil 3249114883 3249243682 ("" (use "N_size") (("" (skosimp*) (("" (case "bv2nat(DVS!1) = 0") (("1" (lemma "bv2nat_eq0[2*N]") (("1" (inst?) (("1" (assert) (("1" (replace -1) (("1" (rewrite "times_zero_second") (("1" (rewrite "div1_dvs0") (("1" (rewrite "div1_dvs0") nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "bv2nat(div(BV!1 * DVD!1, BV!1 * DVS!1)) = bv2nat(div(DVD!1, DVS!1)) AND (bv2nat(DVS!1) /= 0 IMPLIES bv2nat(rem(BV!1 * DVD!1, BV!1 * DVS!1)) = bv2nat(BV!1 * rem(DVD!1, DVS!1)))") (("1" (flatten) (("1" (use "bv2nat_inj[2*N]") (("1" (assert) (("1" (hide -1 -2) (("1" (use "bv2nat_inj[2*N]") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 4) (("2" (lemma "divrem1_uniqueness[2*N]") (("2" (inst - "BV!1 * DVD!1" "BV!1 * DVS!1" "bv2nat(div(DVD!1,DVS!1))" "bv2nat(BV!1) * bv2nat(rem(DVD!1,DVS!1))") (("2" (assert) (("2" (split -) (("1" (flatten) (("1" (assert) (("1" (rewrite "bv2nat_times[N]") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (rewrite "bv2nat_times[N]") (("2" (use "rem1_below_dvs[2*N]") (("2" (assert) (("2" (use "both_sides_times_pos_lt2") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (rewrite "bv2nat_times[N]") (("3" (rewrite "bv2nat_times[N]") (("3" (assert) (("3" (lemma "divrem1_eq[2*N]") (("3" (inst?) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((rem const-decl "bvec[N]" BitvectorOneComplementDivision nil) (/= const-decl "boolean" notequal nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (div const-decl "bvec[N]" BitvectorOneComplementDivision nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bv2nat_inj formula-decl nil bv_nat nil) (divrem1_uniqueness formula-decl nil BitvectorOneComplementDivision nil) (divrem1_eq formula-decl nil BitvectorOneComplementDivision nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (both_sides_times_pos_lt2 formula-decl nil real_props nil) (rem1_below_dvs formula-decl nil BitvectorOneComplementDivision nil) (bv2nat_times formula-decl nil BitvectorMultiplicationWidenNarrow nil) (bv2nat_eq0 formula-decl nil bv_nat nil) (times_zero_second formula-decl nil BitvectorMultiplication nil) (div1_dvs0 formula-decl nil BitvectorOneComplementDivision nil) (* const-decl "bvec[N]" BitvectorMultiplication nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorTwoComplementDivision nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (N_size formula-decl nil BitvectorTwoComplementDivision nil)) 3319 1600 nil nil)) (rem_dvs0 0 (rem_dvs0-1 nil 3249114883 3249243683 ("" (use "N_size") (("" (skosimp*) (("" (expand "//") (("" (rewrite "bv2int_fill_F[N]") (("" (assert) (("" (rewrite "rem1_dvs0[N]") (("" (rewrite "rem1_dvs0[N]") (("" (rewrite "bv_double_neg") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bv2int_fill_F formula-decl nil bv_int nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorTwoComplementDivision nil) (rem1_dvs0 formula-decl nil BitvectorOneComplementDivision nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (bv_double_neg formula-decl nil bv_arithmetic nil) (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}" bv_arithmetic nil) (- const-decl "[numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (// const-decl "bvec[N]" BitvectorTwoComplementDivision nil) (N_size formula-decl nil BitvectorTwoComplementDivision nil)) 356 180 nil nil)) (div_dvs0 0 (div_dvs0-1 nil 3249114883 3249243684 ("" (use "N_size") (("" (skosimp*) (("" (expand "/") (("" (rewrite "bv2int_fill_F[N]") (("" (assert) (("" (rewrite "div1_dvs0[N]") (("" (rewrite "div1_dvs0[N]") (("" (lift-if) (("" (split) (("1" (propax) nil nil) ("2" (flatten) (("2" (hide 1) (("2" (case "bv2int[N](-fill[N](TRUE)) = bv2int(one[N])") (("1" (use "bv2int_inj[N]") (("1" (assert) nil nil)) nil) ("2" (hide 2) (("2" (rewrite "bv2int_one") (("2" (rewrite "bv2int_neg[N]") (("2" (rewrite "bv2int_fill_T[N]") (("2" (expand "minint") (("2" (assert) (("2" (typepred "exp2(N - 1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bv2int_fill_F formula-decl nil bv_int nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorTwoComplementDivision nil) (div1_dvs0 formula-decl nil BitvectorOneComplementDivision nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (one const-decl "bvec[N]" BitvectorMultiplication nil) (TRUE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (bv2int_inj formula-decl nil bv_int nil) (bv2int_one formula-decl nil BitvectorMultiplication nil) (bv2int_fill_T formula-decl nil bv_int nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (exp2 def-decl "posnat" exp2 nil) (NOT const-decl "[bool -> bool]" booleans nil) (bv2int_neg formula-decl nil bv_arithmetic nil) (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}" bv_arithmetic nil) (- const-decl "[numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (/ const-decl "bvec[N]" BitvectorTwoComplementDivision nil) (N_size formula-decl nil BitvectorTwoComplementDivision nil)) 849 390 nil nil)) (divrem_dvs1 0 (divrem_dvs1-1 nil 3249114883 3249243684 ("" (use "N_size") (("" (skosimp*) (("" (expand "/") (("" (expand "//") (("" (rewrite "bv2int_one") (("" (assert) (("" (lift-if +) (("" (split +) (("1" (flatten) (("1" (use "divrem1_dvs1[N]") nil nil)) nil) ("2" (flatten) (("2" (use "divrem1_dvs1[N]") (("2" (flatten) (("2" (assert) (("2" (replace*) (("2" (rewrite "bv_double_neg") (("2" (rewrite "min_fill_F[N]") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((// const-decl "bvec[N]" BitvectorTwoComplementDivision nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (divrem1_dvs1 formula-decl nil BitvectorOneComplementDivision nil) (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}" bv_arithmetic nil) (- const-decl "[numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (bv_double_neg formula-decl nil bv_arithmetic nil) (min_fill_F formula-decl nil BitvectorUtil nil) (N formal-const-decl "posnat" BitvectorTwoComplementDivision nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2int_one formula-decl nil BitvectorMultiplication nil) (/ const-decl "bvec[N]" BitvectorTwoComplementDivision nil) (N_size formula-decl nil BitvectorTwoComplementDivision nil)) 630 300 nil nil)) (rem_below_dvs 0 (rem_below_dvs-1 nil 3249114883 3249243696 ("" (use "N_size") (("" (skosimp*) (("" (expand "//") (("" (expand "abs") (("" (lift-if) (("" (split) (("1" (flatten) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (assert) (("1" (use "rem1_below_dvs[N]") (("1" (assert) (("1" (rewrite "bv2nat_minus_bv[N]") (("1" (expand "/=") (("1" (lift-if -) (("1" (split -) (("1" (flatten) (("1" (assert) (("1" (lemma "bv2nat_eq0[N]") (("1" (inst?) (("1" (assert) (("1" (replace -1) (("1" (rewrite "min_fill_F[N]") (("1" (rewrite "rem1_dvs0") (("1" (rewrite "bv2int_fill_F[N]") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (expand "bv2int") (("2" (reduce) (("2" (expand "exp2" -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (use "rem1_below_dvs[N]") (("2" (expand "bv2int") (("2" (reduce) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lift-if +) (("2" (split +) (("1" (flatten) (("1" (assert) (("1" (use "rem1_below_dvs[N]") (("1" (rewrite "bv2nat_minus_bv[N]") (("1" (expand "/=") (("1" (lift-if -) (("1" (split -) (("1" (flatten) (("1" (assert) (("1" (lemma "bv2nat_eq0[N]") (("1" (inst?) (("1" (assert) (("1" (replace -1) (("1" (rewrite "min_fill_F[N]") (("1" (rewrite "rem1_dvs0") (("1" (rewrite "bv2int_fill_F[N]") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (rewrite "bv2int_neg[N]") (("2" (expand "minint") (("2" (expand "bv2int" -2) (("2" (lift-if -) (("2" (split -) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (assert) (("2" (expand "exp2" -2) (("2" (expand "bv2int") (("2" (reduce) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (rewrite "bv2int_neg[N]") (("2" (use "rem1_below_dvs[N]") (("2" (expand "bv2int") (("2" (reduce) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (rem1_below_dvs formula-decl nil BitvectorOneComplementDivision nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorTwoComplementDivision nil) (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}" bv_arithmetic nil) (- const-decl "[numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (bv2nat_minus_bv formula-decl nil bv_arithmetic nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat_eq0 formula-decl nil bv_nat nil) (min_fill_F formula-decl nil BitvectorUtil nil) (bv2int_fill_F formula-decl nil bv_int nil) (rem1_dvs0 formula-decl nil BitvectorOneComplementDivision nil) (/= const-decl "boolean" notequal nil) (bv2int_neg formula-decl nil bv_arithmetic nil) (rem const-decl "bvec[N]" BitvectorOneComplementDivision nil) (// const-decl "bvec[N]" BitvectorTwoComplementDivision nil) (N_size formula-decl nil BitvectorTwoComplementDivision nil)) 12136 5870 nil nil)) (divrem_eq_TCC1 0 (divrem_eq_TCC1-1 nil 3249114883 3249243697 ("" (subtype-tcc) nil nil) proved nil 196 40 nil nil)) (divrem_eq 0 (divrem_eq-1 nil 3249114883 3249243726 ("" (use "N_size") (("" (skosimp*) (("" (expand "/") (("" (expand "//") (("" (case "bv2int(dvd!1) = IF bv2nat(dvd!1) < exp2(N - 1)
                                                          THEN bv2nat(dvd!1)
                                                        ELSE bv2nat(dvd!1) - exp2(N)
                                                        ENDIF") (("1" (case "bv2int(dvs!1) = IF bv2nat(dvs!1) < exp2(N - 1)
                                                                        THEN bv2nat(dvs!1)
                                                                      ELSE bv2nat(dvs!1) - exp2(N)
                                                                      ENDIF") (("1" (case "bv2int[N](dvs!1) = 0") (("1" (assert) (("1" (lift-if -) (("1" (split -) (("1" (flatten) (("1" (assert) (("1" (lemma "bv2nat_eq0[N]") (("1" (inst - "dvs!1") (("1" (assert) (("1" (replace -1) (("1" (rewrite "rem1_dvs0") (("1" (rewrite "rem1_dvs0") (("1" (rewrite "div1_dvs0") (("1" (rewrite "div1_dvs0") (("1" (rewrite "bv2int_neg[N]") (("1" (rewrite "bv2int_fill_T[N]") (("1" (rewrite "bv2int_fill_F[N]") (("1" (rewrite "bv_double_neg") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (lift-if -) (("2" (split -) (("1" (flatten) (("1" (split -) (("1" (flatten) (("1" (assert) (("1" (replace*) (("1" (expand "bv2int" +) (("1" (use "rem1_below_dvs[N]") (("1" (use "div1_below_dvd[N]") (("1" (assert) (("1" (use "divrem1_eq[N]") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (use "rem1_below_dvs[N]") (("2" (use "div1_below_dvd[N]") (("2" (assert) (("2" (rewrite "bv2nat_minus_bv[N]") (("2" (expand "exp2" -1) (("2" (assert) (("2" (expand "bv2int") (("2" (assert) (("2" (rewrite "bv2nat_minus_bv[N]") (("2" (rewrite "bv2nat_minus_bv[N]") (("2" (use "divrem1_eq[N]") (("2" (rewrite "bv2nat_minus_bv[N]") (("2" (assert) (("2" (lift-if +) (("2" (split +) (("1" (flatten) (("1" (assert) (("1" (replace -1) (("1" (assert) (("1" (lift-if +) (("1" (split +) (("1" (flatten) (("1" (assert) (("1" (expand "exp2" -1 1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "exp2" 1 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (lift-if +) (("2" (split +) (("1" (flatten) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (lift-if +) (("2" (split +) (("1" (flatten) (("1" (expand "exp2" -1 1) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (expand "exp2" 1 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (split -) (("1" (flatten) (("1" (assert) (("1" (use "rem1_below_dvs[N]") (("1" (use "div1_below_dvd[N]") (("1" (assert) (("1" (rewrite "bv2nat_minus_bv[N]") (("1" (expand "/=") (("1" (assert) (("1" (use "divrem1_eq[N]") (("1" (assert) (("1" (expand "bv2int") (("1" (rewrite "bv2nat_minus_bv[N]") (("1" (rewrite "bv2nat_minus_bv[N]") (("1" (lift-if +) (("1" (split +) (("1" (flatten) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (lift-if +) (("2" (split +) (("1" (flatten) (("1" (expand "exp2" -1 1) (("1" (assert) nil nil)) nil)) nil) ("2" (flatten) (("2" (expand "exp2" 1 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lemma "rem1_below_dvs[N]") (("2" (inst - "-dvd!1" "-dvs!1") (("2" (lemma "div1_below_dvd[N]") (("2" (inst - "-dvd!1" "-dvs!1") (("2" (rewrite "bv2nat_minus_bv[N]") (("2" (assert) (("2" (lemma "divrem1_eq[N]") (("2" (inst - "-dvd!1" "-dvs!1") (("2" (assert) (("2" (expand "bv2int") (("2" (rewrite "bv2nat_minus_bv[N]") (("2" (rewrite "bv2nat_minus_bv[N]") (("2" (rewrite "bv2nat_minus_bv[N]") (("2" (case-replace "bv2nat(rem[N](-dvd!1, -dvs!1)) = 0") (("1" (assert) (("1" (case "bv2nat(div[N](-dvd!1, -dvs!1)) < exp2(N - 1)") (("1" (assert) nil nil) ("2" (assert) (("2" (expand "exp2" -3) (("2" (case-replace "bv2nat(dvd!1) = exp2(N - 1)") (("1" (assert) (("1" (case-replace "bv2nat(dvs!1) = exp2(N) -1") (("1" (assert) nil nil) ("2" (case-replace "bv2nat[N](div[N](-dvd!1, -dvs!1)) = 0") (("1" (assert) nil nil) ("2" (lemma "gt_times_gt_pos1") (("2" (inst - "1" "exp2(N-1)" "bv2nat[N](div[N](-dvd!1, -dvs!1))" "exp2(N) - bv2nat[N](dvs!1)") (("2" (assert) (("2" (case-replace "exp2(N) = 2 * exp2(N-1)") (("1" (assert) nil nil) ("2" (expand "exp2" 1 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "bv2nat(div[N](-dvd!1, -dvs!1)) < exp2(N - 1)") (("1" (assert) nil nil) ("2" (assert) (("2" (expand "exp2" -2) (("2" (case-replace "bv2nat(dvd!1) = exp2(N - 1)") (("1" (assert) (("1" (case-replace "bv2nat(dvs!1) = exp2(N) -1") (("1" (assert) nil nil) ("2" (case-replace "bv2nat[N](div[N](-dvd!1, -dvs!1)) = 0") (("1" (assert) nil nil) ("2" (lemma "gt_times_gt_pos1") (("2" (inst - "1" "exp2(N-1)" "bv2nat[N](div[N](-dvd!1, -dvs!1))" "exp2(N) - bv2nat[N](dvs!1)") (("2" (assert) (("2" (case-replace "exp2(N) = 2 * exp2(N-1)") (("1" (assert) nil nil) ("2" (expand "exp2" 1 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "bv2int") (("2" (propax) nil nil)) nil)) nil) ("2" (expand "bv2int") (("2" (propax) nil nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((// const-decl "bvec[N]" BitvectorTwoComplementDivision nil) (div1_below_dvd formula-decl nil BitvectorOneComplementDivision nil) (divrem1_eq formula-decl nil BitvectorOneComplementDivision nil) (rem1_below_dvs formula-decl nil BitvectorOneComplementDivision nil) (bv2nat_minus_bv formula-decl nil bv_arithmetic nil) (div const-decl "bvec[N]" BitvectorOneComplementDivision nil) (rem const-decl "bvec[N]" BitvectorOneComplementDivision nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (gt_times_gt_pos1 formula-decl nil real_props nil) (/= const-decl "boolean" notequal nil) (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}" bv_arithmetic nil) (- const-decl "[numfield -> numfield]" number_fields nil) (bv2int_fill_T formula-decl nil bv_int nil) (bv_double_neg formula-decl nil bv_arithmetic nil) (bv2int_fill_F formula-decl nil bv_int nil) (bv2int_neg formula-decl nil bv_arithmetic nil) (below type-eq-decl nil nat_types nil) (fill const-decl "bit" bv nil) (TRUE const-decl "bool" booleans nil) (div1_dvs0 formula-decl nil BitvectorOneComplementDivision nil) (rem1_dvs0 formula-decl nil BitvectorOneComplementDivision nil) (bv2nat_eq0 formula-decl nil bv_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorTwoComplementDivision nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (exp2 def-decl "posnat" exp2 nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (/ const-decl "bvec[N]" BitvectorTwoComplementDivision nil) (N_size formula-decl nil BitvectorTwoComplementDivision nil)) 29354 14310 nil nil)) (divrem_overflow 0 (divrem_overflow-1 nil 3249114883 3249243728 ("" (skosimp*) (("" (expand "/") (("" (expand "//") (("" (assert) (("" (case-replace "-dvs!1 = one") (("1" (use "divrem1_dvs1[N]") (("1" (flatten) (("1" (replace*) (("1" (rewrite "bv2int_neg[N]") (("1" (rewrite "bv2int_neg[N]") (("1" (rewrite "bv2int_fill_F[N]") (("1" (expand "minint") (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (lemma "bv2int_neg[N]") (("2" (inst?) (("2" (expand "minint") (("2" (use "N_size") (("2" (assert) (("2" (replace -3) (("2" (assert) (("2" (expand "bv2int" -2) (("2" (assert) (("2" (lift-if) (("2" (split) (("1" (flatten) (("1" (assert) (("1" (lemma "bv2nat_one[N]") (("1" (use "bv2nat_inj[N]") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((/ const-decl "bvec[N]" BitvectorTwoComplementDivision nil) (N_size formula-decl nil BitvectorTwoComplementDivision nil) (bv2nat_one formula-decl nil BitvectorMultiplication nil) (bv2nat_inj formula-decl nil bv_nat nil) (divrem1_dvs1 formula-decl nil BitvectorOneComplementDivision nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (bv2int_fill_F formula-decl nil bv_int nil) (bv2int_neg formula-decl nil bv_arithmetic nil) (one const-decl "bvec[N]" BitvectorMultiplication nil) (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}" bv_arithmetic nil) (- const-decl "[numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorTwoComplementDivision nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (// const-decl "bvec[N]" BitvectorTwoComplementDivision nil)) 1505 690 nil nil)) (div_sgn 0 (div_sgn-1 nil 3249114883 3249243765 ("" (use "N_size") (("" (skosimp*) (("" (expand "/") (("" (expand "abs") (("" (case "bv2int[N](dvs!1) > 0") (("1" (case "bv2int[N](dvd!1) >= 0") (("1" (assert) (("1" (use "div1_eq0[N]") (("1" (use "div1_below_dvd[N]") (("1" (expand "bv2int") (("1" (reduce) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide 2) (("2" (use "div1_eq0[N]") (("2" (assert) (("2" (use "div1_below_dvd[N]") (("2" (rewrite "bv2nat_minus_bv[N]") (("2" (expand "bv2int") (("2" (lift-if +) (("2" (split +) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (lift-if +) (("2" (split +) (("1" (flatten) (("1" (assert) (("1" (rewrite "bv2nat_minus_bv[N]") (("1" (reduce) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "bv2int[N](dvd!1) >= 0") (("1" (assert) (("1" (assert) (("1" (hide 2) (("1" (use "div1_below_dvd[N]") (("1" (use "div1_eq0[N]") (("1" (rewrite "bv2nat_minus_bv[N]") (("1" (expand "bv2int") (("1" (rewrite "bv2nat_minus_bv[N]") (("1" (reduce) (("1" (expand "exp2" -4 1) (("1" (assert) nil nil)) nil) ("2" (expand "exp2" -4 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "bv2int[N](dvs!1) >= 0") (("1" (hide 5) (("1" (expand "bv2int") (("1" (reduce) nil nil)) nil)) nil) ("2" (assert) (("2" (use "div1_below_dvd[N]") (("2" (use "div1_eq0[N]") (("2" (assert) (("2" (case "bv2nat(-dvs!1) /= 0 ") (("1" (assert) (("1" (rewrite "bv2nat_minus_bv[N]") (("1" (rewrite "bv2nat_minus_bv[N]") (("1" (lift-if -) (("1" (split -) (("1" (expand "bv2int") (("1" (reduce) nil nil)) nil) ("2" (flatten) (("2" (assert) (("2" (expand "bv2int") (("2" (expand "exp2" -2) (("2" (lift-if +) (("2" (split +) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (lift-if +) (("2" (split +) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (assert) (("2" (replace -1) (("2" (case "bv2nat(div[N](-dvd!1, -dvs!1)) < exp2(N - 1)") (("1" (reduce) nil nil) ("2" (assert) (("2" (case-replace "bv2nat[N](div(-dvd!1, -dvs!1)) = exp2(N-1)") (("1" (hide -2 1 3 5) (("1" (use "divrem1_eq[N]") (("1" (replace -2) (("1" (case "exp2(N - 1) * bv2nat(-dvs!1) >= exp2(N)") (("1" (assert) nil nil) ("2" (hide -1) (("2" (case "bv2nat(-dvs!1) >= 2") (("1" (expand "exp2" 1 2) (("1" (assert) (("1" (lemma "both_sides_times_pos_ge1") (("1" (inst - "exp2(N-1)" "bv2nat(-dvs!1)" "2") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (case-replace "bv2nat(-dvs!1) = 1") (("1" (use "bv2nat_one[N]") (("1" (hide -1) (("1" (use "bv2nat_inj[N]") (("1" (assert) (("1" (use "divrem1_dvs1[N]") (("1" (flatten) (("1" (rewrite "bv2nat_minus_bv[N]") (("1" (expand "exp2" -4 1) (("1" (expand "exp2" 7 1) (("1" (case-replace "dvs!1 = -one[N]") (("1" (rewrite "bv2nat_minus_bv[N]") (("1" (assert) (("1" (lemma "bv2nat_one[N]") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (case "bv2nat(-one[N]) = exp2(N) - 1") (("1" (use "bv2nat_inj[N]") (("1" (assert) nil nil)) nil) ("2" (rewrite "bv2nat_minus_bv[N]") (("2" (lemma "bv2nat_one[N]") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -2 2 3 4 5 7) (("2" (expand "/=") (("2" (lemma "bv2nat_eq0[N]") (("2" (inst?) (("2" (assert) (("2" (lemma "bv2nat_minus_bv[N]") (("2" (inst?) (("2" (replace -2) (("2" (rewrite "bv2nat_fill_F[N]") (("2" (expand "bv2int") (("2" (reduce) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (exp2 def-decl "posnat" exp2 nil) (/= const-decl "boolean" notequal nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (divrem1_eq formula-decl nil BitvectorOneComplementDivision nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (both_sides_times_pos_ge1 formula-decl nil real_props nil) (bv2nat_one formula-decl nil BitvectorMultiplication nil) (bv2nat_inj formula-decl nil bv_nat nil) (divrem1_dvs1 formula-decl nil BitvectorOneComplementDivision nil) (one const-decl "bvec[N]" BitvectorMultiplication nil) (bv2nat_fill_F formula-decl nil bv_nat nil) (bv2nat_eq0 formula-decl nil bv_nat nil) (div1_eq0 formula-decl nil BitvectorOneComplementDivision nil) (div1_below_dvd formula-decl nil BitvectorOneComplementDivision nil) (bv2nat_minus_bv formula-decl nil bv_arithmetic nil) (div const-decl "bvec[N]" BitvectorOneComplementDivision nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (- const-decl "[numfield -> numfield]" number_fields nil) (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}" bv_arithmetic nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorTwoComplementDivision nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (/ const-decl "bvec[N]" BitvectorTwoComplementDivision nil) (N_size formula-decl nil BitvectorTwoComplementDivision nil)) 37224 17950 nil nil)) (rem_sgn 0 (rem_sgn-1 nil 3249114883 3249243803 ("" (use "N_size") (("" (skosimp*) (("" (assert) (("" (case "bv2int(dvs!1) = 0") (("1" (expand "bv2int") (("1" (lift-if -) (("1" (split -) (("1" (flatten) (("1" (assert) (("1" (lemma "bv2nat_eq0[N]") (("1" (inst?) (("1" (assert) (("1" (replace -1) (("1" (expand "//") (("1" (rewrite "bv2int_fill_F[N]") (("1" (assert) (("1" (lift-if +) (("1" (rewrite "rem1_dvs0") (("1" (assert) (("1" (rewrite "rem1_dvs0") (("1" (rewrite "bv_double_neg") (("1" (reduce) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (case "NOT (bv2int(dvd!1) = -exp2(N - 1) AND bv2int(dvs!1) = -1)") (("1" (use "div_sgn") (("1" (use "divrem_eq") (("1" (replace 1) (("1" (assert) (("1" (flatten) (("1" (case "(bv2int(dvd!1 / dvs!1) = 0)") (("1" (assert) (("1" (hide 1 2) (("1" (expand "abs") (("1" (expand "bv2int") (("1" (reduce) nil nil)) nil)) nil)) nil)) nil) ("2" (case "(bv2int(dvd!1 / dvs!1) > 0)") (("1" (assert) (("1" (hide 2 3) (("1" (split -) (("1" (flatten) (("1" (assert) (("1" (lemma "rem1_below_dvs[N]") (("1" (inst - "dvd!1" "dvs!1") (("1" (expand "bv2int") (("1" (expand "//") (("1" (reduce) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split 4) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (assert) (("2" (expand "bv2int") (("2" (lift-if -) (("2" (split -) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (assert) (("2" (lift-if -) (("2" (split -) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (assert) (("2" (split -) (("1" (propax) nil nil) ("2" (split -) (("1" (flatten) (("1" (assert) (("1" (expand "//") (("1" (rewrite "bv2nat_minus_bv[N]") (("1" (lemma "rem1_below_dvs[N]") (("1" (inst - "-dvd!1" "-dvs!1") (("1" (assert) (("1" (split -) (("1" (rewrite "bv2nat_minus_bv[N]") (("1" (reduce) nil nil)) nil) ("2" (expand "/=") (("2" (rewrite "bv2nat_minus_bv[N]") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide 3 4) (("2" (split -) (("1" (flatten) (("1" (assert) (("1" (expand "//") (("1" (use "rem1_below_dvs[N]") (("1" (assert) (("1" (split -) (("1" (rewrite "bv2nat_minus_bv[N]") (("1" (expand "bv2int") (("1" (lift-if -) (("1" (split -) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (assert) (("2" (lift-if -) (("2" (split -) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (assert) (("2" (lift-if -) (("2" (split -) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (case-replace "bv2int[N](dvs!1) = 0") (("2" (rewrite "bv2nat_minus_bv[N]") (("2" (expand "bv2int" 1) (("2" (reduce) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (hide 3) (("2" (expand "//") (("2" (use "rem1_below_dvs[N]") (("2" (assert) (("2" (split -) (("1" (expand "bv2int") (("1" (lift-if -) (("1" (split -) (("1" (flatten) (("1" (assert) (("1" (split -) (("1" (assert) nil nil) ("2" (propax) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (split -) (("1" (assert) (("1" (lift-if -) (("1" (split -) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (assert) (("2" (split -) (("1" (flatten) (("1" (assert) (("1" (rewrite "bv2nat_minus_bv[N]") (("1" (reduce) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "bv2int") (("2" (reduce) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (use "divrem_overflow") (("2" (assert) (("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bv2int const-decl "rng_2s_comp" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" BitvectorTwoComplementDivision nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2nat_eq0 formula-decl nil bv_nat nil) (// const-decl "bvec[N]" BitvectorTwoComplementDivision nil) (rem1_dvs0 formula-decl nil BitvectorOneComplementDivision nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (- const-decl "[numfield -> numfield]" number_fields nil) (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}" bv_arithmetic nil) (bv_double_neg formula-decl nil bv_arithmetic nil) (bv2int_fill_F formula-decl nil bv_int nil) (divrem_overflow formula-decl nil BitvectorTwoComplementDivision nil) (div_sgn formula-decl nil BitvectorTwoComplementDivision nil) (rem const-decl "bvec[N]" BitvectorOneComplementDivision nil) (bv2nat_minus_bv formula-decl nil bv_arithmetic nil) (/= const-decl "boolean" notequal nil) (rem1_below_dvs formula-decl nil BitvectorOneComplementDivision nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (/ const-decl "bvec[N]" BitvectorTwoComplementDivision nil) (divrem_eq formula-decl nil BitvectorTwoComplementDivision nil) (NOT const-decl "[bool -> bool]" booleans nil) (exp2 def-decl "posnat" exp2 nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (N_size formula-decl nil BitvectorTwoComplementDivision nil)) 38367 14320 nil nil)) (divrem_uniqueness 0 (divrem_uniqueness-1 nil 3249114883 3249243844 ("" (use "N_size") (("" (skosimp*) (("" (use "divrem_eq") (("" (use "rem_sgn") (("" (use "rem_below_dvs") (("" (use "div_sgn") (("" (replace 1) (("" (assert) (("" (flatten) (("" (lemma "unique_division") (("" (case "(bv2int(dvd!1) > 0)") (("1" (assert) (("1" (expand "abs") (("1" (case "bv2int(dvs!1) < 0") (("1" (assert) (("1" (inst - "-bv2int(dvs!1)" "-q!1" "-bv2int[N](dvd!1 / dvs!1)" "r!1" "bv2int[N](dvd!1 // dvs!1)") (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (inst - "bv2int(dvs!1)" "q!1" "bv2int[N](dvd!1 / dvs!1)" "r!1" "bv2int[N](dvd!1 // dvs!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "(bv2int(dvd!1) < 0)") (("1" (assert) (("1" (expand "abs") (("1" (case "bv2int(dvs!1) < 0") (("1" (assert) (("1" (inst - "-bv2int(dvs!1)" "q!1" "bv2int[N](dvd!1 / dvs!1)" "-r!1" "-bv2int[N](dvd!1 // dvs!1)") (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (inst - "bv2int(dvs!1)" "-q!1" "-bv2int[N](dvd!1 / dvs!1)" "-r!1" "-bv2int[N](dvd!1 // dvs!1)") (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case-replace "bv2int(dvd!1) = 0") (("1" (case-replace "q!1=0") (("1" (reduce) nil nil) ("2" (reduce) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((rem_sgn formula-decl nil BitvectorTwoComplementDivision nil) (div_sgn formula-decl nil BitvectorTwoComplementDivision nil) (unique_division formula-decl nil euclidean_division nil) (dvd!1 skolem-const-decl "bvec[N]" BitvectorTwoComplementDivision nil) (dvs!1 skolem-const-decl "bvec[N]" BitvectorTwoComplementDivision nil) (r!1 skolem-const-decl "int" BitvectorTwoComplementDivision nil) (= const-decl "[T, T -> boolean]" equalities nil) (// const-decl "bvec[N]" BitvectorTwoComplementDivision nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (/ const-decl "bvec[N]" BitvectorTwoComplementDivision nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (rem_below_dvs formula-decl nil BitvectorTwoComplementDivision nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorTwoComplementDivision nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (divrem_eq formula-decl nil BitvectorTwoComplementDivision nil) (N_size formula-decl nil BitvectorTwoComplementDivision nil)) 41198 19480 nil nil)) (div_largest 0 (div_largest-1 nil 3249114883 3249243862 ("" (use "N_size") (("" (skosimp*) (("" (case "(bv2int(dvd!1) = -exp2(N-1) AND bv2int(dvs!1) = -1)") (("1" (flatten) (("1" (replace*) (("1" (expand "abs") (("1" (assert) (("1" (use "divrem_overflow") (("1" (reduce) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "divrem_eq") (("2" (replace 1) (("2" (assert) (("2" (expand "abs") (("2" (use "div_sgn") (("2" (use "rem_sgn") (("2" (use "rem_below_dvs") (("2" (replace*) (("2" (assert) (("2" (expand "abs") (("2" (flatten) (("2" (case "bv2int(dvs!1) > 0") (("1" (assert) (("1" (case "bv2int(dvd!1) > 0") (("1" (assert) (("1" (lift-if -) (("1" (split -) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (case "q!1 >= 0") (("1" (assert) (("1" (rewrite "neg_times_lt") (("1" (case "bv2int(dvs!1) * q!1 < bv2int(dvs!1) * (bv2int[N](dvd!1 / dvs!1) + 1)") (("1" (rewrite "both_sides_times_pos_lt2") nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (rewrite "neg_times_lt") (("2" (case "bv2int(dvs!1) * -q!1 < bv2int(dvs!1) * (bv2int[N](dvd!1 / dvs!1) + 1)") (("1" (rewrite "both_sides_times_pos_lt2") nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case-replace "bv2int(dvd!1) = 0") (("1" (assert) (("1" (rewrite "neg_times_lt") (("1" (replace*) (("1" (case "q!1 >= 0") (("1" (assert) (("1" (rewrite "neg_times_le") nil nil)) nil) ("2" (assert) (("2" (lemma "pos_times_ge") (("2" (inst - "bv2int(dvs!1)" "q!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "bv2int(dvd!1) <= -bv2int(dvs!1)") (("1" (assert) (("1" (case-replace "bv2int(dvd!1 // dvs!1) = 0") (("1" (assert) (("1" (rewrite "neg_times_lt") (("1" (case "q!1 >= 0") (("1" (assert) (("1" (case "bv2int(dvs!1) * q!1 <= bv2int(dvs!1) * -bv2int[N](dvd!1 / dvs!1)") (("1" (rewrite "both_sides_times_pos_le2") nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (case "bv2int(dvs!1) * -q!1 <= bv2int(dvs!1) * -bv2int[N](dvd!1 / dvs!1)") (("1" (rewrite "both_sides_times_pos_le2") nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (rewrite "neg_times_lt") (("2" (case "q!1 >= 0") (("1" (assert) (("1" (case "bv2int(dvs!1) * q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 / dvs!1) + 1)") (("1" (rewrite "both_sides_times_pos_lt2") nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (case "bv2int(dvs!1) * -q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 / dvs!1) + 1)") (("1" (rewrite "both_sides_times_pos_lt2") nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (rewrite "neg_times_lt") (("2" (case "q!1 >= 0") (("1" (assert) (("1" (case "bv2int(dvs!1) * q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 / dvs!1) + 1)") (("1" (rewrite "both_sides_times_pos_lt2") nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (case "bv2int(dvs!1) * -q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 / dvs!1) + 1)") (("1" (rewrite "both_sides_times_pos_lt2") nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "bv2int(dvd!1) > 0") (("1" (assert) (("1" (case-replace "q!1 = 0") (("1" (assert) nil nil) ("2" (rewrite "neg_times_lt") (("2" (case "bv2int(dvd!1) >= -bv2int(dvs!1)") (("1" (assert) (("1" (case "q!1 >= 0") (("1" (assert) (("1" (case "bv2int(dvs!1) * -q!1 < bv2int(dvs!1) * (bv2int[N](dvd!1 / dvs!1) - 1)") (("1" (rewrite "both_sides_times_neg_lt2") nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (case "bv2int(dvs!1) * q!1 < bv2int(dvs!1) * (bv2int[N](dvd!1 / dvs!1) - 1)") (("1" (rewrite "both_sides_times_neg_lt2") nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "q!1 >= 0") (("1" (assert) (("1" (case "bv2int(dvs!1) * -q!1 < bv2int(dvs!1) * (bv2int[N](dvd!1 / dvs!1) - 1)") (("1" (rewrite "both_sides_times_neg_lt2") nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (case "bv2int(dvs!1) * q!1 < bv2int(dvs!1) * (bv2int[N](dvd!1 / dvs!1) - 1)") (("1" (rewrite "both_sides_times_neg_lt2") nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (rewrite "neg_times_lt") (("2" (case-replace "q!1 = 0") (("1" (assert) nil nil) ("2" (case-replace "bv2int(dvd!1) = 0") (("1" (assert) (("1" (replace*) (("1" (case "q!1 >= 0") (("1" (assert) (("1" (lemma "pos_times_ge") (("1" (inst - "bv2int(dvs!1)" "q!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (rewrite "neg_times_le") nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "bv2int(dvd!1) <= bv2int(dvs!1)") (("1" (assert) (("1" (lift-if -) (("1" (split -) (("1" (flatten) (("1" (assert) (("1" (case "q!1 >= 0") (("1" (assert) (("1" (case "bv2int(dvs!1) * -q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 / dvs!1) - 1)") (("1" (rewrite "both_sides_times_neg_lt2") nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (case "bv2int(dvs!1) * q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 / dvs!1) - 1)") (("1" (rewrite "both_sides_times_neg_lt2") nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "q!1 >= 0") (("1" (assert) (("1" (case "bv2int(dvs!1) * -q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 / dvs!1) - 1)") (("1" (rewrite "both_sides_times_neg_lt2") nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (case "bv2int(dvs!1) * q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 / dvs!1) - 1)") (("1" (rewrite "both_sides_times_neg_lt2") nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "q!1 >= 0") (("1" (assert) (("1" (case "bv2int(dvs!1) * -q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 / dvs!1) - 1)") (("1" (rewrite "both_sides_times_neg_lt2") nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (case "bv2int(dvs!1) * q!1 < bv2int(dvs!1) * (-bv2int[N](dvd!1 / dvs!1) - 1)") (("1" (rewrite "both_sides_times_neg_lt2") nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil) proved ((divrem_eq formula-decl nil BitvectorTwoComplementDivision nil) (div_sgn formula-decl nil BitvectorTwoComplementDivision nil) (rem_below_dvs formula-decl nil BitvectorTwoComplementDivision nil) (both_sides_times_neg_lt2 formula-decl nil real_props nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (negreal nonempty-type-eq-decl nil real_types nil) (both_sides_times_pos_le2 formula-decl nil real_props nil) (// const-decl "bvec[N]" BitvectorTwoComplementDivision nil) (pos_times_ge formula-decl nil real_props nil) (neg_times_le formula-decl nil real_props nil) (neg_times_lt formula-decl nil real_props nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (both_sides_times_pos_lt2 formula-decl nil real_props nil) (/ const-decl "bvec[N]" BitvectorTwoComplementDivision nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (rem_sgn formula-decl nil BitvectorTwoComplementDivision nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (divrem_overflow formula-decl nil BitvectorTwoComplementDivision nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" BitvectorTwoComplementDivision nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (<= const-decl "bool" reals nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (exp2 def-decl "posnat" exp2 nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (N_size formula-decl nil BitvectorTwoComplementDivision nil)) 17432 8430 nil nil)))
