(bv_arith_int_rules
 (singleton_int_TCC1 0
  (singleton_int_TCC1-1 nil 3341600834 3341600834
   ("" (subtype-tcc) nil nil) proved nil 26 20 nil nil))
 (singleton_int 0
  (singleton_int-1 nil 3341600852 3341600868 ("" (grind) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (exp2 def-decl "posnat" exp2 nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil))
   16096 600 t shostak))
 (bv2int_add_combined_rule 0
  (bv2int_add_combined_rule-1 nil 3341600870 3341600921
   ("" (skolem!)
    (("" (lift-if)
      (("" (split)
        (("1" (flatten) (("1" (rewrite "bv2int_add") nil nil)) nil)
         ("2" (flatten)
          (("2" (rewrite "bv2int_add_overflow")
            (("2" (lift-if) (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bv2int_add_overflow formula-decl nil bv_overflow nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bv2int_add formula-decl nil bv_arithmetic nil))
   51051 1600 t shostak))
 (bv2int_add_no_overflow 0
  (bv2int_add_no_overflow-1 nil 3341600927 3341600955
   ("" (skosimp) (("" (rewrite "bv2int_add") nil nil)) nil) proved
   ((bv2int_add formula-decl nil bv_arithmetic nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   28198 370 t shostak))
 (bv2int_add_overflow 0
  (bv2int_add_overflow-1 nil 3341600957 3341600967
   ("" (skosimp) (("" (rewrite "bv2int_add_overflow") nil nil)) nil)
   proved
   ((bv2int_add_overflow formula-decl nil bv_overflow nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   10172 400 t shostak))
 (sign_bit_of_unary_minus_TCC1 0
  (sign_bit_of_unary_minus_TCC1-1 nil 3341600834 3341600834
   ("" (subtype-tcc) nil nil) proved nil 26 20 nil nil))
 (sign_bit_of_unary_minus 0
  (sign_bit_of_unary_minus-1 nil 3341600978 3341601148
   ("" (skolem!)
    (("" (use "bv2int_neg[n!1]")
      (("" (lift-if)
        (("" (split +)
          (("1" (flatten)
            (("1" (assert)
              (("1" (lemma "bv2int_top_bit[n!1]")
                (("1" (inst - "-bv!1")
                  (("1" (expand "minint") (("1" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (lemma "bv2int_top_bit[n!1]")
                (("2" (inst-cp - "bv!1")
                  (("2" (inst - "-bv!1") (("2" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bv2int_neg formula-decl nil bv_arithmetic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (minint const-decl "int" bv_int nil)
    (maxint const-decl "int" bv_int nil)
    (rng_2s_comp type-eq-decl nil bv_int nil)
    (bv2int const-decl "rng_2s_comp" bv_int nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "{bvn: bvec[N] |
         bv2int(bvn) =
          IF bv2int(bv) = minint THEN bv2int(bv) ELSE -(bv2int(bv)) ENDIF}"
       bv_arithmetic nil)
    (bv2int_top_bit formula-decl nil bv_int nil))
   170530 2000 t shostak)))

