(bv_bitwise_rules (bv_NOT_NOT 0 (bv_NOT_NOT-1 nil 3249241304 3249243150 ("" (skosimp*) (("" (expand "NOT") (("" (apply-extensionality 1 :hide? t) nil)))) nil) proved ((NOT const-decl "bvec[N]" bv_bitwise nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 74 70 nil nil)) (bv_NOT_caret 0 (bv_NOT_caret-1 nil 3249241304 3249243150 ("" (skosimp*) (("" (grind) nil)) nil) proved ((NOT const-decl "bvec[N]" bv_bitwise nil) (^ const-decl "bit" bv nil)) 70 70 nil nil)) (bv_fill_NOT 0 (bv_fill_NOT-1 nil 3249241304 3249243150 ("" (skosimp*) (("" (apply-extensionality 1 :hide? t) (("" (expand "NOT") (("" (expand "fill") (("" (propax) nil)))))))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (NOT const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 81 80 nil nil)) (bv_AND_fill_normalize 0 (bv_AND_fill_normalize-1 nil 3249241304 3249243151 ("" (skosimp*) (("" (expand "AND") (("" (assert) (("" (apply-extensionality 1 :hide? t) (("" (iff 1) (("" (ground) nil)))))))))) nil) proved ((AND const-decl "bvec[N]" bv_bitwise nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bvec type-eq-decl nil bv nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (bit type-eq-decl nil bit nil) (AND const-decl "[bool, bool -> bool]" booleans nil)) 271 120 nil nil)) (bv_AND_fill_F 0 (bv_AND_fill_F-1 nil 3249241304 3249243151 ("" (skosimp*) (("" (apply-extensionality 1 :hide? t) (("" (grind) nil)))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (AND const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 251 90 nil nil)) (bv_AND_fill_T 0 (bv_AND_fill_T-1 nil 3249241304 3249243151 ("" (skosimp*) (("" (apply-extensionality 1 :hide? t) (("" (grind) nil)))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (TRUE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (AND const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 101 90 nil nil)) (bv_AND_same 0 (bv_AND_same-1 nil 3249241304 3249243151 ("" (skosimp*) (("" (apply-extensionality 1 :hide? t) (("" (grind) nil)))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (AND const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 133 100 nil nil)) (bv_AND_associative 0 (bv_AND_associative-1 nil 3249241304 3249243152 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil)))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (AND const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 114 110 nil nil)) (bv_AND_bv_2eq 0 (bv_AND_bv_2eq-1 nil 3249241304 3249243152 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil)))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (AND const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 268 120 nil nil)) (bv_OR_fill_normalize 0 (bv_OR_fill_normalize-1 nil 3249241304 3249243152 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil)))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (OR const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 270 110 nil nil)) (bv_OR_fill_F 0 (bv_OR_fill_F-1 nil 3249241304 3249243153 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil)))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (OR const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 288 90 nil nil)) (bv_OR_fill_T 0 (bv_OR_fill_T-1 nil 3249241304 3249243153 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil)))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (TRUE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (OR const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 251 100 nil nil)) (bv_OR_bv_eq 0 (bv_OR_bv_eq-1 nil 3249241304 3249243153 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil)))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (OR const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 106 100 nil nil)) (bv_OR_associative 0 (bv_OR_associative-1 nil 3249241304 3249243153 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil)))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (OR const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 268 120 nil nil)) (bv_OR_bv_bv_2eq 0 (bv_OR_bv_bv_2eq-1 nil 3249241304 3249243154 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil)))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (OR const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)) 316 110 nil nil)) (bv_XOR_fill_normalize 0 (bv_XOR_fill_normalize-1 nil 3249241304 3249243154 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil)))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (XOR const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (/= const-decl "boolean" notequal nil) (XOR const-decl "bool" xor_def nil)) 275 120 nil nil)) (bv_XOR_fill_F 0 (bv_XOR_fill_F-1 nil 3249241304 3249243154 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil)))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (XOR const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (/= const-decl "boolean" notequal nil) (XOR const-decl "bool" xor_def nil)) 257 100 nil nil)) (bv_XOR_fill_T 0 (bv_XOR_fill_T-1 nil 3249241304 3249243154 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil)))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (NOT const-decl "bvec[N]" bv_bitwise nil) (TRUE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (XOR const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (/= const-decl "boolean" notequal nil) (XOR const-decl "bool" xor_def nil)) 267 120 nil nil)) (bv_XOR_bv_2eq 0 (bv_XOR_bv_2eq-1 nil 3249241304 3249243155 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) nil)))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (XOR const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (XOR const-decl "bool" xor_def nil)) 260 100 nil nil)) (bv_XOR_associative 0 (bv_XOR_associative-1 nil 3249241304 3249243155 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) (("1" (iff) (("1" (grind) nil nil)) nil) ("2" (iff) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (XOR const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (/= const-decl "boolean" notequal nil) (XOR const-decl "bool" xor_def nil)) 374 180 nil nil)) (bv_XOR_bv_bv_2eq 0 (bv_XOR_bv_bv_2eq-1 nil 3249241304 3249243155 ("" (skosimp*) (("" (apply-extensionality :hide? t) (("" (grind) (("1" (iff) (("1" (grind) nil nil)) nil) ("2" (iff) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (XOR const-decl "bvec[N]" bv_bitwise nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (/= const-decl "boolean" notequal nil) (XOR const-decl "bool" xor_def nil)) 303 150 nil nil)))
