(bv_arith_extend (zero_extend_lem 0 (zero_extend_lem-1 nil 3249241282 3249242893 ("" (skosimp*) (("" (expand "zero_extend") (("" (rewrite "bv2nat_concat") (("" (rewrite "bv2nat_fill_F[k!1-n!1]") (("" (assert) nil)))))))) nil) proved ((zero_extend const-decl "[bvec[N] -> bvec[k]]" bv_extend nil) (bv2nat_fill_F formula-decl nil bv_nat nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (above nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2nat_concat formula-decl nil bv_arith_concat nil)) 960 490 nil nil)) (sign_to_zero_TCC1 0 (sign_to_zero_TCC1-1 nil 3249241282 3249242893 ("" (subtype-tcc) nil nil) proved nil 192 30 nil nil)) (sign_to_zero 0 (sign_to_zero-1 nil 3249241282 3249242894 ("" (skosimp*) (("" (apply-extensionality 1 :hide? t) (("" (expand "sign_extend") (("" (expand "zero_extend") (("" (lift-if 1) (("" (split 1) (("1" (flatten) (("1" (expand "fill") (("1" (expand "^") (("1" (expand "o ") (("1" (lift-if) (("1" (grind) nil))))))))))) ("2" (flatten) (("2" (expand "^") (("2" (expand "fill") (("2" (expand "o ") (("2" (lift-if) (("2" (grind) nil)))))))))))))))))))))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (above nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (zero_extend const-decl "[bvec[N] -> bvec[k]]" bv_extend nil) (NOT const-decl "bvec[N]" bv_bitwise nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (sign_extend const-decl "[bvec[N] -> bvec[k]]" bv_extend nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (fill const-decl "bit" bv nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (^ const-decl "bit" bv nil)) 1004 480 nil nil)) (sign_extend_lem 0 (sign_extend_lem-1 nil 3249241282 3249242896 ("" (skosimp*) (("" (expand "sign_extend") (("" (rewrite "bv2int_concat") (("" (lemma "bit_cases") (("" (inst -1 "bv!1 ^ (n!1 - 1)") (("" (prop) (("1" (replace -1) (("1" (rewrite "bv2int_fill_F[k!1 - n!1]") (("1" (expand "b2n") (("1" (propax) nil))))))) ("2" (replace -1) (("2" (hide -1) (("2" (rewrite "bv2int_fill_T[k!1 - n!1]") (("2" (expand "b2n") (("2" (propax) nil)))))))))))))))))))) nil) proved ((sign_extend const-decl "[bvec[N] -> bvec[k]]" bv_extend nil) (bit_cases formula-decl nil bit nil) (bv2int_fill_F formula-decl nil bv_int nil) (b2n const-decl "nbit" bit nil) (bv2int_fill_T formula-decl nil bv_int nil) (^ const-decl "bit" bv nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (above nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2int_concat formula-decl nil bv_arith_int_concat nil) (AND const-decl "[bool, bool -> bool]" booleans nil)) 1512 730 nil nil)) (zero_extend_lsend_TCC1 0 (zero_extend_lsend_TCC1-1 nil 3249241282 3249242896 ("" (subtype-tcc) nil nil) proved nil 257 60 nil nil)) (zero_extend_lsend 0 (zero_extend_lsend-1 nil 3249241282 3249242897 ("" (skosimp*) (("" (expand "zero_extend_lsend") (("" (rewrite "bv2nat_concat") (("" (assert) (("" (rewrite "bv2nat_fill_F[k!1 - n!1]") nil)))))))) nil) proved ((zero_extend_lsend const-decl "[bvec[N] -> bvec[k]]" bv_extend nil) (bv2nat_fill_F formula-decl nil bv_nat nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (above nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2nat_concat formula-decl nil bv_arith_concat nil)) 929 450 nil nil)) (bv2int_elim_gen_TCC1 0 (bv2int_elim_gen_TCC1-1 nil 3249241282 3249242897 ("" (subtype-tcc) nil nil) proved nil 41 40 nil nil)) (bv2int_elim_gen 0 (bv2int_elim_gen-1 nil 3249241282 3249242899 ("" (skosimp*) (("" (lemma "sign_extend_lem") (("" (inst?) (("" (replace -1 + rl) (("" (rewrite "bv2int_elim[n!1]") nil)))))))) nil) proved ((sign_extend_lem formula-decl nil bv_arith_extend nil) (sign_extend const-decl "[bvec[N] -> bvec[k]]" bv_extend nil) (bv2int_elim formula-decl nil bv_arithmetic nil) (above nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (pos_nat_below type-eq-decl nil bv_arith_extend nil) (< const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1115 490 nil nil)))
