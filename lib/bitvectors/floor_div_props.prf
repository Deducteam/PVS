(floor_div_props (floor_val 0 (floor_val-1 nil 3249241277 3249243046 ("" (skosimp*) (("" (case "j!1 >= 0") (("1" (lemma "both_sides_div_pos_lt1") (("1" (inst -1 "j!1" "i!1" "(k!1 + 1) * j!1") (("1" (lemma "both_sides_div_pos_ge1") (("1" (inst -1 "j!1" "i!1" "k!1 * j!1") (("1" (flatten) (("1" (hide -1 -3) (("1" (assert) (("1" (case "floor(i!1 / j!1) > k!1 - 1 AND floor(i!1 / j!1) < k!1 + 1") (("1" (flatten) (("1" (name-replace "II" "floor(i!1 / j!1)") (("1" (assert) nil))))) ("2" (assert) nil))))))))) ("2" (assert) nil))))) ("2" (assert) nil))))) ("2" (lemma "both_sides_div_neg_lt1") (("2" (inst -1 "j!1" "(k!1 + 1) * j!1" "i!1") (("1" (flatten) (("1" (hide -1) (("1" (lemma "both_sides_div_neg_ge1") (("1" (inst -1 "j!1" "k!1 * j!1" "i!1") (("1" (flatten) (("1" (hide -1) (("1" (assert) nil))))) ("2" (assert) nil))))))))) ("2" (assert) nil)))))))) nil) proved ((nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (> const-decl "bool" reals nil) (j!1 skolem-const-decl "nonzero_integer" floor_div_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (both_sides_div_pos_ge1 formula-decl nil real_props nil) (both_sides_div_pos_lt1 formula-decl nil real_props nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (nonpos_real nonempty-type-eq-decl nil real_types nil) (negreal nonempty-type-eq-decl nil real_types nil) (both_sides_div_neg_ge1 formula-decl nil real_props nil) (both_sides_div_neg_lt1 formula-decl nil real_props nil)) 1170 530 nil nil)) (floor_small 0 (floor_small-1 nil 3249241277 3249243047 ("" (skosimp*) (("" (lemma "pos_div_ge") (("" (inst?) (("" (lift-if) (("" (expand "abs") (("" (lift-if) (("" (ground) (("1" (lemma "floor_val") (("1" (inst -1 "-i!1" "-j!1" "0") (("1" (assert) nil))))) ("2" (lemma "floor_val") (("2" (inst?) (("2" (assert) nil))))) ("3" (lemma "floor_val") (("3" (inst -1 "-i!1" "-j!1" "-1") (("3" (assert) nil))))) ("4" (lemma "floor_val") (("4" (inst -1 "i!1" "j!1" "-1") (("4" (assert) nil)))))))))))))))))) nil) proved ((pos_div_ge formula-decl nil real_props nil) (floor_val formula-decl nil floor_div_props nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (/= const-decl "boolean" notequal nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1557 770 nil nil)) (floor_eq_0 0 (floor_eq_0-1 nil 3249241277 3249243048 ("" (tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil)) 63 60 nil nil)) (is_multiple 0 (is_multiple-1 nil 3249241277 3249243048 ("" (skosimp*) (("" (iff 1) (("" (split 1) (("1" (flatten) (("1" (inst 1 "i!1/j!1") (("1" (assert) nil))))) ("2" (flatten) (("2" (skosimp*) (("2" (assert) nil)))))))))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (int nonempty-type-eq-decl nil integers nil) (i!1 skolem-const-decl "int" floor_div_props nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (j!1 skolem-const-decl "nonzero_integer" floor_div_props nil)) 511 200 nil nil)))
