(bv_rotate
 (rotate_right_TCC1 0
  (rotate_right_TCC1-1 nil 3341450119 3341450119
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_rotate nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil))
   148 110 nil nil))
 (rotate_right_TCC2 0
  (rotate_right_TCC2-1 nil 3341450119 3341450119
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_rotate nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil))
   125 100 nil nil))
 (rotate_right_TCC3 0
  (rotate_right_TCC3-1 nil 3341450119 3341450119
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_rotate nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil))
   129 100 nil nil))
 (rotate_right_TCC4 0
  (rotate_right_TCC4-1 nil 3341450119 3341450119
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_rotate nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil))
   132 110 nil nil))
 (rotate_right_TCC5 0
  (rotate_right_TCC5-1 nil 3341450119 3341450119
   ("" (subtype-tcc) nil nil) proved nil 92 90 nil nil))
 (rotate_left_TCC1 0
  (rotate_left_TCC1-1 nil 3341450119 3341450120
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_rotate nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil))
   175 160 nil nil))
 (rotate_left_TCC2 0
  (rotate_left_TCC2-1 nil 3341450119 3341450120
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_rotate nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil))
   156 140 nil nil))
 (rotate_left_TCC3 0
  (rotate_left_TCC3-1 nil 3341450119 3341450120
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_rotate nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil))
   201 180 nil nil))
 (rot_r1_TCC1 0
  (rot_r1_TCC1-1 nil 3341450119 3341450120 ("" (subtype-tcc) nil nil)
   proved nil 16 20 nil nil))
 (rotate_right_0_TCC1 0
  (rotate_right_0_TCC1-1 nil 3341450119 3341450120
   ("" (subtype-tcc) nil nil) proved nil 17 10 nil nil))
 (rotate_right_0 0
  (rotate_right_0-1 nil 3341450136 3341450246
   ("" (expand "rotate_right") (("" (propax) nil nil)) nil) proved
   ((rotate_right const-decl "bvec[N]" bv_rotate nil)) 110170 290 t
   shostak))
 (rotate_right_lem_TCC1 0
  (rotate_right_lem_TCC1-1 nil 3341450119 3341450121
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_rotate nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil))
   751 660 nil nil))
 (rotate_right_lem 0
  (rotate_right_lem-1 nil 3341450258 3341450297
   ("" (skolem!)
    (("" (expand* "rotate_right" "^" "o")
      (("" (lift-if) (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((^ const-decl "bit" bv nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (rotate_right const-decl "bvec[N]" bv_rotate nil))
   39059 1820 t shostak))
 (rotate_left_0 0
  (rotate_left_0-1 nil 3341450307 3341450311
   ("" (expand "rotate_left") (("" (propax) nil nil)) nil) proved
   ((rotate_left const-decl "bvec[N]" bv_rotate nil)) 3514 160 t
   shostak))
 (rotate_left_lem_TCC1 0
  (rotate_left_lem_TCC1-1 nil 3341450119 3341450121
   ("" (subtype-tcc) nil nil) proved nil 93 90 nil nil))
 (rotate_left_lem_TCC2 0
  (rotate_left_lem_TCC2-1 nil 3341450119 3341450122
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_rotate nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil))
   695 600 nil nil))
 (rotate_left_lem 0
  (rotate_left_lem-1 nil 3341450313 3341450340
   ("" (skolem!)
    (("" (expand* "rotate_left" "^" "o")
      (("" (lift-if) (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((^ const-decl "bit" bv nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (O const-decl "bvec[n + m]" bv_concat_def nil)
    (rotate_left const-decl "bvec[N]" bv_rotate nil))
   27619 1260 t shostak))
 (iterate_rot_r1 0
  (iterate_rot_r1-1 nil 3341450347 3341450843
   ("" (induct "k" :name "upto_induction[N]")
    (("1" (skolem!) (("1" (expand* "iterate" "rotate_right") nil nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "iterate" +)
        (("2" (inst - "bv!1")
          (("2" (replace -2)
            (("2" (hide -2)
              (("2"
                (expand* "rotate_right" "rot_r1" "rotate_right" "^")
                (("2" (lift-if)
                  (("2" (assert)
                    (("2" (expand "o")
                      (("2" (lift-if)
                        (("2" (ground)
                          (("1" (apply-extensionality 2) nil nil)
                           ("2" (replace -1) (("2" (assert) nil nil))
                            nil)
                           ("3" (apply-extensionality 2 :hide? t)
                            (("1" (lift-if) (("1" (ground) nil nil))
                              nil)
                             ("2" (skosimp) (("2" (assert) nil nil))
                              nil)
                             ("3" (skosimp) (("3" (assert) nil nil))
                              nil)
                             ("4" (skosimp) (("4" (assert) nil nil))
                              nil)
                             ("5" (skosimp) (("5" (assert) nil nil))
                              nil)
                             ("6" (skosimp) (("6" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((O const-decl "bvec[n + m]" bv_concat_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (jt!1 skolem-const-decl "upto(N)" bv_rotate nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_rotate nil)
    (rotate_right const-decl "bvec[N]" bv_rotate nil)
    (rot_r1 const-decl "bvec[N]" bv_rotate nil)
    (iterate def-decl "T" function_iterate nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   76911 5840 t shostak))
 (iterate_rot_l1 0
  (iterate_rot_l1-1 nil 3341450855 3341450945
   ("" (induct "k" :name "upto_induction[N]")
    (("1" (skolem!) (("1" (expand* "iterate" "rotate_left") nil nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "iterate" +)
        (("2" (inst - "bv!1")
          (("2" (replace -2)
            (("2" (hide -2)
              (("2" (expand* "rotate_left" "rot_l1" "rotate_left" "^")
                (("2" (lift-if)
                  (("2" (assert)
                    (("2" (expand "o")
                      (("2" (lift-if)
                        (("2" (ground)
                          (("1" (apply-extensionality 2) nil nil)
                           ("2" (replace -1) (("2" (assert) nil nil))
                            nil)
                           ("3" (apply-extensionality 2 :hide? t)
                            (("1" (lift-if) (("1" (ground) nil nil))
                              nil)
                             ("2" (skosimp) (("2" (assert) nil nil))
                              nil)
                             ("3" (skosimp) (("3" (assert) nil nil))
                              nil)
                             ("4" (skosimp) (("4" (assert) nil nil))
                              nil)
                             ("5" (skosimp) (("5" (assert) nil nil))
                              nil)
                             ("6" (skosimp) (("6" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((O const-decl "bvec[n + m]" bv_concat_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (jt!1 skolem-const-decl "upto(N)" bv_rotate nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bv_rotate nil)
    (rotate_left const-decl "bvec[N]" bv_rotate nil)
    (rot_l1 const-decl "bvec[N]" bv_rotate nil)
    (iterate def-decl "T" function_iterate nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   90280 5300 t shostak)))

