(bv_rotate (rotate_right_TCC1 0 (rotate_right_TCC1-1 nil 3249241289 3249242848 ("" (skosimp*) (("" (assert) nil nil)) nil) proved nil 225 70 nil nil)) (rotate_right_TCC2 0 (rotate_right_TCC2-1 nil 3249241289 3249242848 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" bv_rotate nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 108 110 nil nil)) (rotate_right_TCC3 0 (rotate_right_TCC3-1 nil 3249241289 3249242849 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" bv_rotate nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 270 120 nil nil)) (rotate_right_TCC4 0 (rotate_right_TCC4-1 nil 3249241289 3249242849 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" bv_rotate nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 269 120 nil nil)) (rotate_right_TCC5 0 (rotate_right_TCC5-1 nil 3249241289 3249242849 ("" (tcc :defs !) nil nil) proved nil 57 60 nil nil)) (rotate_left_TCC1 0 (rotate_left_TCC1-1 nil 3249241289 3249242849 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" bv_rotate nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 317 130 nil nil)) (rotate_left_TCC2 0 (rotate_left_TCC2-1 nil 3249241289 3249242850 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" bv_rotate nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 283 130 nil nil)) (rotate_left_TCC3 0 (rotate_left_TCC3-1 nil 3249241289 3249242850 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" bv_rotate nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 294 140 nil nil)) (rot_r1_TCC1 0 (rot_r1_TCC1-1 nil 3249241289 3249242850 ("" (tcc :defs !) nil nil) proved nil 30 30 nil nil)) (rotate_right_0_TCC1 0 (rotate_right_0_TCC1-1 nil 3249241289 3249242850 ("" (tcc :defs !) nil nil) proved nil 29 30 nil nil)) (rotate_right_0 0 (rotate_right_0-1 nil 3249241289 3249242850 ("" (skosimp*) (("" (expand "rotate_right") (("" (propax) nil)))) nil) proved ((rotate_right const-decl "bvec[N]" bv_rotate nil)) 63 60 nil nil)) (rotate_right_lem_TCC1 0 (rotate_right_lem_TCC1-1 nil 3249241289 3249242851 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" bv_rotate nil) (below type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 622 310 nil nil)) (rotate_right_lem 0 (rotate_right_lem-1 nil 3249241289 3249242852 ("" (skosimp*) (("" (expand "rotate_right") (("" (expand "^") (("" (expand "o") (("" (lift-if) (("" (lift-if) (("" (assert) nil)))))))))))) nil) proved ((rotate_right const-decl "bvec[N]" bv_rotate nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (^ const-decl "bit" bv nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil)) 1238 590 nil nil)) (rotate_left_0 0 (rotate_left_0-1 nil 3249241289 3249242853 ("" (tcc :defs !) nil nil) proved ((rotate_left const-decl "bvec[N]" bv_rotate nil)) 234 80 nil nil)) (rotate_left_lem_TCC1 0 (rotate_left_lem_TCC1-1 nil 3249241289 3249242853 ("" (skosimp*) (("" (assert) nil)) nil) proved nil 244 90 nil nil)) (rotate_left_lem_TCC2 0 (rotate_left_lem_TCC2-1 nil 3249241289 3249242853 ("" (tcc :defs !) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" bv_rotate nil) (below type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil)) 630 310 nil nil)) (rotate_left_lem 0 (rotate_left_lem-1 nil 3249241289 3249242855 ("" (skosimp*) (("" (lift-if) (("" (expand "rotate_left") (("" (expand "^") (("" (expand "o ") (("" (lift-if) (("" (lift-if) (("" (ground) nil)))))))))))))) nil) proved ((^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (^ const-decl "bit" bv nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (rotate_left const-decl "bvec[N]" bv_rotate nil)) 1297 630 nil nil)) (iterate_rot_r1 0 (iterate_rot_r1-1 nil 3249241289 3249242862 ("" (induct "k" 1 "upto_induction[N]") (("1" (skosimp*) (("1" (expand "iterate") (("1" (expand "rotate_right") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "iterate" +) (("2" (inst -2 "bv!1") (("2" (replace -2) (("2" (hide -2) (("2" (expand "rotate_right") (("2" (expand "rot_r1") (("2" (expand "rotate_right") (("2" (expand "^") (("2" (lift-if) (("2" (assert) (("2" (expand "o") (("2" (lift-if) (("2" (prop) (("1" (assert) nil nil) ("2" (apply-extensionality 2) nil nil) ("3" (replace -1) (("3" (hide -1) (("3" (assert) nil nil)) nil)) nil) ("4" (assert) (("4" (apply-extensionality 2) (("1" (hide 3) (("1" (hide 3) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (hide 2 3) (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skosimp*) (("3" (hide 4) (("3" (assert) nil nil)) nil)) nil) ("4" (skosimp*) (("4" (hide 3) (("4" (assert) nil nil)) nil)) nil) ("5" (skosimp*) (("5" (hide 4) (("5" (assert) nil nil)) nil)) nil) ("6" (skosimp*) (("6" (hide 3) (("6" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (jt!1 skolem-const-decl "upto(N)" bv_rotate nil) (NOT const-decl "[bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (upto_induction formula-decl nil bounded_nat_inductions nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" bv_rotate nil) (rotate_right const-decl "bvec[N]" bv_rotate nil) (rot_r1 const-decl "bvec[N]" bv_rotate nil) (iterate def-decl "T" function_iterate nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 6912 3280 nil nil)) (iterate_rot_l1 0 (iterate_rot_l1-1 nil 3249241289 3249242866 ("" (induct "k" 1 "upto_induction[N]") (("1" (skosimp*) (("1" (expand "iterate") (("1" (expand "rotate_left") (("1" (propax) nil))))))) ("2" (skosimp*) (("2" (expand "iterate" 1) (("2" (apply-extensionality 1) (("2" (hide 2) (("2" (inst?) (("2" (replace -2) (("2" (hide -2) (("2" (expand "rot_l1") (("2" (expand "rotate_left") (("2" (grind) nil)))))))))))))))))))) nil) proved ((jt!1 skolem-const-decl "upto(N)" bv_rotate nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (^ const-decl "bvec[PROJ_1(sp) - PROJ_2(sp) + 1]" bv_caret nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (upto_induction formula-decl nil bounded_nat_inductions nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" bv_rotate nil) (rotate_left const-decl "bvec[N]" bv_rotate nil) (rot_l1 const-decl "bvec[N]" bv_rotate nil) (iterate def-decl "T" function_iterate nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 4637 2250 nil nil)))
