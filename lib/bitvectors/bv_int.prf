(bv_int (minint_TCC1 0 (minint_TCC1-1 nil 3249241277 3249242814 ("" (assert) nil nil) proved nil 46 50 nil nil)) (bv_maxint_to_minint 0 (bv_maxint_to_minint-1 nil 3249241277 3249242815 ("" (expand "maxint") (("" (expand "minint") (("" (assert) nil)))) nil) proved ((minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil)) 224 80 nil nil)) (bv_minint_to_maxint 0 (bv_minint_to_maxint-1 nil 3249241277 3249242815 ("" (expand "maxint") (("" (expand "minint") (("" (assert) nil)))) nil) proved ((minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil)) 75 70 nil nil)) (bv2int_TCC1 0 (bv2int_TCC1-1 nil 3249241277 3249242815 ("" (skosimp*) (("" (expand "minint") (("" (expand "maxint") (("" (assert) nil)))))) nil) proved ((minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil)) 300 120 nil nil)) (bv2int_TCC2 0 (bv2int_TCC2-1 nil 3249241277 3249242816 ("" (skosimp*) (("" (expand "minint") (("" (expand "maxint") (("" (assert) (("" (expand "exp2" 2 2) (("" (assert) nil)))))))))) nil) proved ((minint const-decl "int" bv_int nil) (exp2 def-decl "posnat" exp2 nil) (maxint const-decl "int" bv_int nil)) 563 250 nil nil)) (bv2int_inj 0 (bv2int_inj-1 nil 3249241277 3249242816 ("" (skosimp *) (("" (rewrite "bv2nat_inj") (("" (expand "bv2int") (("" (lift-if) (("" (lift-if) (("" (ground) nil)))))))))) nil) proved ((bv2nat_inj formula-decl nil bv_nat nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil)) 393 240 nil nil)) (bv2int_surj 0 (bv2int_surj-1 nil 3249241277 3249242818 ("" (skosimp*) (("" (expand "bv2int") (("" (lemma "bv2nat_surj") (("" (typepred "iv!1") (("" (expand "maxint") (("" (expand "minint") (("" (case-replace "iv!1 >= 0") (("1" (inst?) (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil))))) ("2" (hide 2) (("2" (expand "exp2" 1) (("2" (assert) nil))))))) ("2" (inst -3 "iv!1+exp2(N)") (("1" (skosimp*) (("1" (inst?) (("1" (assert) (("1" (lift-if) (("1" (ground) (("1" (replace -4) (("1" (hide -3 -4 1) (("1" (expand "exp2" -1 1) (("1" (assert) nil))))))))))))))))) ("2" (hide 3) (("2" (assert) (("2" (expand "exp2" 1) (("2" (assert) nil)))))))))))))))))))))) nil) proved ((bv2int const-decl "rng_2s_comp" bv_int nil) (NOT const-decl "[bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (minint const-decl "int" bv_int nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (exp2 def-decl "posnat" exp2 nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (iv!1 skolem-const-decl "rng_2s_comp" bv_int nil) (below type-eq-decl nil naturalnumbers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (bv2nat_surj formula-decl nil bv_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" bv_int nil)) 1507 700 nil nil)) (bv2int_bij 0 (bv2int_bij-1 nil 3249241277 3249242818 ("" (expand "bijective?") (("" (prop) (("1" (expand "injective?") (("1" (skosimp*) (("1" (rewrite "bv2int_inj") nil))))) ("2" (expand "surjective?") (("2" (skosimp*) (("2" (rewrite "bv2int_surj") nil)))))))) nil) proved ((bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" bv_int nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2int_inj formula-decl nil bv_int nil) (injective? const-decl "bool" functions nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bv2int_surj formula-decl nil bv_int nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil)) 238 80 nil nil)) (bv2int_lem_TCC1 0 (bv2int_lem_TCC1-1 nil 3249241277 3249242818 ("" (tcc) nil nil) proved nil 54 50 nil nil)) (bv2int_lem 0 (bv2int_lem-1 nil 3249241277 3249242819 ("" (skosimp*) (("" (expand "bv2int") (("" (lift-if) (("" (lemma "bv2nat_top_bit") (("" (inst -1 "bv!1") (("" (expand "b2n") (("" (ground) nil)))))))))))) nil) proved ((bv2int const-decl "rng_2s_comp" bv_int nil) (N formal-const-decl "posnat" bv_int nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2nat_top_bit formula-decl nil bv_nat nil) (b2n const-decl "nbit" bit nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 872 410 nil nil)) (bv2int_fill_F 0 (bv2int_fill_F-1 nil 3249241277 3249242819 ("" (rewrite "bv2int_lem") (("" (rewrite "bv2nat_fill_F") (("" (grind) nil)))) nil) proved ((bv2nat_fill_F formula-decl nil bv_nat nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (exp2 def-decl "posnat" exp2 nil) (FALSE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" bv_int nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2int_lem formula-decl nil bv_int nil)) 661 350 nil nil)) (bv2int_fill_T 0 (bv2int_fill_T-1 nil 3249241277 3249242820 ("" (rewrite "bv2int_lem") (("" (rewrite "bv2nat_fill_T") (("" (grind) nil)))) nil) proved ((bv2nat_fill_T formula-decl nil bv_nat nil) (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil) (exp2 def-decl "posnat" exp2 nil) (TRUE const-decl "bool" booleans nil) (fill const-decl "bit" bv nil) (below type-eq-decl nil nat_types nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" bv_int nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2int_lem formula-decl nil bv_int nil)) 866 350 nil nil)) (bv2int_top_bit 0 (bv2int_top_bit-1 nil 3249241277 3249242821 ("" (skosimp*) (("" (rewrite "bv2int_lem") (("" (lemma "bv2nat_top_bit") (("" (inst?) (("" (expand "b2n") (("" (ground) nil)))))))))) nil) proved ((bv2int_lem formula-decl nil bv_int nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" bv_int nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_top_bit formula-decl nil bv_nat nil)) 793 360 nil nil)) (bv2int_topbit 0 (bv2int_topbit-1 nil 3249241277 3249242821 ("" (skosimp*) (("" (lemma "bv2int_top_bit") (("" (inst?) (("" (ground) nil)))))) nil) proved ((bv2int_top_bit formula-decl nil bv_int nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" bv_int nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 120 110 nil nil)) (int2bv_TCC1 0 (int2bv_TCC1-1 nil 3249241277 3249242822 ("" (inst 1 "(LAMBDA (iv: rng_2s_comp): inverse(bv2int)(iv))") (("" (skosimp*) (("" (lemma "bijective_inverse[bvec[N],rng_2s_comp]") (("" (inst -1 "inverse(bv2int)(iv!1)" "iv!1" "bv2int") (("1" (ground) nil) ("2" (hide 2) (("2" (lemma "bv2int_bij") (("2" (propax) nil)))))))))))) nil) proved ((bijective? const-decl "bool" functions nil) (bv2int_bij formula-decl nil bv_int nil) (bijective_inverse formula-decl nil function_inverse nil) (inverse const-decl "D" function_inverse nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" bv_int nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 264 100 nil nil)) (int2bv_def 0 (int2bv_def-1 nil 3249241277 3249242822 ("" (apply-extensionality 1 :hide? t) (("1" (typepred "int2bv(x!1)") (("1" (expand "inverse") (("1" (lemma "epsilon_ax[bvec[N]]") (("1" (inst?) (("1" (split -1) (("1" (beta) (("1" (rewrite "bv2int_inj") nil nil)) nil) ("2" (hide 2) (("2" (inst 1 "int2bv(x!1)") (("2" (beta) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "inverse") (("2" (lemma "epsilon_ax[bvec[N]]") (("2" (inst?) (("2" (split -1) (("1" (beta) (("1" (propax) nil nil)) nil) ("2" (hide 2) (("2" (inst 1 "int2bv(x1!1)") (("2" (beta) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (epsilon_ax formula-decl nil epsilons nil) (bv2int_inj formula-decl nil bv_int nil) (epsilon const-decl "T" epsilons nil) (pred type-eq-decl nil defined_types nil) (inverse const-decl "D" function_inverse nil) (int2bv const-decl "{bv | bv2int(bv) = iv}" bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" bv_int nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 604 250 nil nil)) (int2bv_bij 0 (int2bv_bij-1 nil 3249241277 3249242822 ("" (rewrite "int2bv_def") (("" (rewrite "bij_inv_is_bij[bvec[N],rng_2s_comp]") (("" (hide 2) (("" (rewrite "bv2int_bij") nil)))))) nil) proved ((bij_inv_is_bij formula-decl nil function_inverse nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" bv_int nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (bv2int_bij formula-decl nil bv_int nil) (int2bv_def formula-decl nil bv_int nil)) 56 50 nil nil)) (bv2int_inv 0 (bv2int_inv-1 nil 3249241277 3249242823 ("" (skolem!) (("" (lemma "surj_right" ("f" "bv2int")) (("" (expand "right_inverse?") (("" (assert) nil)))))) nil) proved ((bv2int const-decl "rng_2s_comp" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" bv_int nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (surj_right formula-decl nil function_inverse nil) (right_inverse? const-decl "bool" function_inverse nil)) 221 60 nil nil)) (int2bv_inv 0 (int2bv_inv-1 nil 3249241277 3249242823 ("" (skosimp*) (("" (typepred "int2bv(bv2int(bv!1))") (("" (rewrite "bv2int_inj") nil)))) nil) proved ((int2bv const-decl "{bv | bv2int(bv) = iv}" bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" bv_int nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (bv2int_inj formula-decl nil bv_int nil)) 43 40 nil nil)) (int2bv_2nat_TCC1 0 (int2bv_2nat_TCC1-1 nil 3249241277 3249242823 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (minint const-decl "int" bv_int nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (exp2 def-decl "posnat" exp2 nil)) 545 240 nil nil)) (int2bv_2nat_TCC2 0 (int2bv_2nat_TCC2-1 nil 3249241277 3249242824 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (minint const-decl "int" bv_int nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (maxint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (exp2 def-decl "posnat" exp2 nil)) 652 300 nil nil)) (int2bv_2nat 0 (int2bv_2nat-1 nil 3249241277 3249242826 ("" (skolem-typepred) (("" (lemma "bv2int_inj") (("" (inst?) (("1" (prop) (("1" (hide 2) (("1" (rewrite "bv2int_inv") (("1" (lift-if) (("1" (prop) (("1" (expand "bv2int") (("1" (rewrite "bv2nat_inv[N]") (("1" (expand "maxint") (("1" (assert) nil))))))) ("2" (expand "bv2int") (("2" (rewrite "bv2nat_inv[N]") (("2" (rewrite "exp2") (("2" (grind :exclude "exp2") nil))))))))))))))))) ("2" (hide 2) (("2" (rewrite "exp2") (("2" (grind :exclude "exp2") nil))))) ("3" (hide 2) (("3" (rewrite "exp2") (("3" (grind :exclude "exp2") nil)))))))))) nil) proved ((bv2int_inj formula-decl nil bv_int nil) (bv2int_inv formula-decl nil bv_int nil) (bv2nat_inv formula-decl nil bv_nat nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (int2bv const-decl "{bv | bv2int(bv) = iv}" bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (>= const-decl "bool" reals nil) (ii!1 skolem-const-decl "rng_2s_comp" bv_int nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (N formal-const-decl "posnat" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (minint const-decl "int" bv_int nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 1829 900 nil nil)))
