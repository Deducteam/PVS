(bv_sum
 (bv2nat_rec_as_sum_TCC1 0
  (bv2nat_rec_as_sum_TCC1-1 nil 3341434761 3341434762
   ("" (subtype-tcc) nil nil) proved nil 13 20 nil nil))
 (bv2nat_rec_as_sum 0
  (bv2nat_rec_as_sum-1 nil 3341434774 3341435018
   ("" (auto-rewrite ("bv2nat_rec" "sigma" "extend" "^"))
    (("" (induct "n" 1 nil)
      (("1" (skosimp*) (("1" (assert) nil nil)) nil)
       ("2" (skosimp*)
        (("2" (assert) (("2" (grind :if-match best) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma def-decl "nat" sums nil)
    (extend const-decl "[nat -> nat]" bv_sum nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil) (nbit type-eq-decl nil bit nil)
    (b2n const-decl "nbit" bit nil)
    (N formal-const-decl "nat" bv_sum nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (^ const-decl "bit" bv nil))
   43863 4720 t shostak))
 (bv2nat_as_sum_TCC1 0
  (bv2nat_as_sum_TCC1-1 nil 3341434761 3341434762
   ("" (subtype-tcc) nil nil) proved nil 42 40 nil nil))
 (bv2nat_as_sum 0
  (bv2nat_as_sum-1 nil 3341435031 3341435102
   ("" (skolem!)
    (("" (lift-if)
      (("" (expand "bv2nat")
        (("" (expand "bv2nat_rec" 1 1)
          (("" (ground)
            (("" (use "bv2nat_rec_as_sum") (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat_rec_as_sum formula-decl nil bv_sum nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "nat" bv_sum nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil))
   21682 1090 t shostak)))

