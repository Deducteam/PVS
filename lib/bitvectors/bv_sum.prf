(bv_sum (bv2nat_rec_as_sum_TCC1 0 (bv2nat_rec_as_sum_TCC1-1 nil 3249241275 3249242834 ("" (tcc :defs !) nil nil) proved nil 35 40 nil nil)) (bv2nat_rec_as_sum 0 (bv2nat_rec_as_sum-1 nil 3249241275 3249242839 ("" (auto-rewrite :names ("bv2nat_rec" "sigma" "extend" "^")) (("" (induct "n" 1 nil) (("1" (skosimp*) (("1" (assert) nil))) ("2" (skosimp*) (("2" (assert) (("2" (lift-if) (("2" (apply (then* (assert) (bddsimp) (skosimp*) (if (let* ((var (quote "n")) (fnum (quote 1)) (rewrites (quote ("bv2nat_rec" "sigma" "extend"))) (name (quote nil)) (defs (quote nil)) (if-match (quote best)) (theories (quote nil))) if-match) (inst? :if-match best) (skip)) (lift-if)) "Applying assert, propositional simplification, instantiation,
skolemization, and if-lifting") nil)))))))))) nil) proved ((< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (= const-decl "[T, T -> boolean]" equalities nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (bv2nat_rec def-decl "nat" bv_nat nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (sigma def-decl "nat" sums nil) (extend const-decl "[nat -> nat]" bv_sum nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (nbit type-eq-decl nil bit nil) (b2n const-decl "nbit" bit nil) (N formal-const-decl "nat" bv_sum nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (below_induction formula-decl nil bounded_nat_inductions nil) (^ const-decl "bit" bv nil)) 4533 2190 nil nil)) (bv2nat_as_sum_TCC1 0 (bv2nat_as_sum_TCC1-1 nil 3249241276 3249242839 ("" (tcc) nil nil) proved nil 45 40 nil nil)) (bv2nat_as_sum 0 (bv2nat_as_sum-1 nil 3249241276 3249242840 ("" (skosimp*) (("" (lift-if) (("" (expand "bv2nat") (("" (ground) (("1" (expand "bv2nat_rec") (("1" (propax) nil))) ("2" (lemma "bv2nat_rec_as_sum") (("2" (inst?) (("2" (assert) nil)))))))))))) nil) proved ((bv2nat_rec def-decl "nat" bv_nat nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (N formal-const-decl "nat" bv_sum nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (bv2nat_rec_as_sum formula-decl nil bv_sum nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil)) 576 260 nil nil)))
