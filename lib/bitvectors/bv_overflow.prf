(bv_overflow (overflow_then_eq_TCC1 0 (overflow_then_eq_TCC1-1 nil 3249241286 3249243070 ("" (subtype-tcc) nil nil) proved ((N formal-const-decl "posnat" bv_overflow nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (in_rng_2s_comp const-decl "bool" bv_int nil) (overflow const-decl "bool" bv_overflow nil)) 572 260 nil nil)) (overflow_then_eq 0 (overflow_then_eq-1 nil 3249241286 3249243071 ("" (skosimp*) (("" (lemma "bv2int_topbit") (("" (inst?) (("" (lemma "bv2int_topbit") (("" (inst -1 "bv2!1") (("" (expand "overflow") (("" (expand "in_rng_2s_comp") (("" (ground) nil)))))))))))))) nil) proved ((N formal-const-decl "posnat" bv_overflow nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2int_topbit formula-decl nil bv_int nil) (overflow const-decl "bool" bv_overflow nil) (in_rng_2s_comp const-decl "bool" bv_int nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 916 460 nil nil)) (bv2int_overflow_nat 0 (bv2int_overflow_nat-1 nil 3249241286 3249243075 ("" (skosimp*) (("" (expand "in_rng_2s_comp") (("" (expand "bv2int" 2) (("" (lemma "bv_add[N]") (("" (inst?) (("" (replace -1) (("" (hide -1) (("" (lift-if) (("" (lift-if) (("" (lift-if) (("" (assert) (("" (expand "minint") (("" (expand "maxint") (("" (expand "bv2int") (("" (lift-if) (("" (ground) (("" (hide 2 3) (("" (case "exp2(N) = 2*exp2(N-1)") (("1" (assert) nil) ("2" (hide 2 3 4 5 6) (("2" (expand "exp2" 1 1) (("2" (propax) nil)))))))))))))))))))))))))))))))))))))))) nil) proved ((in_rng_2s_comp const-decl "bool" bv_int nil) (N formal-const-decl "posnat" bv_overflow nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv_add formula-decl nil bv_arith_nat nil) (minint const-decl "int" bv_int nil) (= const-decl "[T, T -> boolean]" equalities nil) (exp2 def-decl "posnat" exp2 nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (maxint const-decl "int" bv_int nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (bv2int const-decl "rng_2s_comp" bv_int nil)) 3083 1500 nil nil)) (bv_not_in_rng_int_TCC1 0 (bv_not_in_rng_int_TCC1-1 nil 3249241286 3249243075 ("" (subtype-tcc) nil nil) proved ((N formal-const-decl "posnat" bv_overflow nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (minint const-decl "int" bv_int nil) (maxint const-decl "int" bv_int nil) (in_rng_2s_comp const-decl "bool" bv_int nil)) 575 270 nil nil)) (bv_not_in_rng_int 0 (bv_not_in_rng_int-1 nil 3249241286 3249243077 ("" (skosimp*) (("" (rewrite "bv2int_overflow_nat") (("" (hide 1) (("" (lemma "bv2int_lem") (("" (inst?) (("" (lemma "bv2int_lem") (("" (inst -1 "bv2!1") (("" (expand "^") (("" (assert) nil)))))))))))))))) nil) proved ((bv2int_overflow_nat formula-decl nil bv_overflow nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" bv_overflow nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (bv2int_lem formula-decl nil bv_int nil) (^ const-decl "bit" bv nil)) 1451 640 nil nil)) (bv2int_add_overflow 0 (bv2int_add_overflow-1 nil 3249241286 3249243078 ("" (skosimp*) (("" (lemma "bv_not_in_rng_int") (("" (inst?) (("" (assert) (("" (lemma "overflow_then_eq") (("" (inst -1 "bv1!1" "bv2!1") (("" (expand "overflow") (("" (expand "^") (("" (replace -2) (("" (hide -2) (("" (lift-if) (("" (lemma "bv2int_topbit[N]") (("" (inst?) (("" (lemma "bv2int_topbit[N]") (("" (inst -1 "bv2!1") (("" (expand "b2n") (("" (lift-if) (("" (lift-if) (("" (expand "^") (("" (assert) (("" (ground) nil)))))))))))))))))))))))))))))))))))))))) nil) proved ((bv_not_in_rng_int formula-decl nil bv_overflow nil) (^ const-decl "bit" bv nil) (bv2int_topbit formula-decl nil bv_int nil) (b2n const-decl "nbit" bit nil) (overflow const-decl "bool" bv_overflow nil) (overflow_then_eq formula-decl nil bv_overflow nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" bv_overflow nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1816 860 nil nil)) (bv_sum_limits 0 (bv_sum_limits-1 nil 3249241286 3249243079 ("" (skosimp*) (("" (prop) (("1" (lemma "le_plus_le") (("1" (inst -1 "maxint" "bv2int(bv1!1)" "maxint" "bv2int(bv2!1)") (("1" (assert) nil))))) ("2" (lemma "ge_plus_ge") (("2" (inst -1 "minint" "bv2int(bv1!1)" "minint" "bv2int(bv2!1)") (("2" (assert) nil)))))))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (N formal-const-decl "posnat" bv_overflow nil) (maxint const-decl "int" bv_int nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (bit type-eq-decl nil bit nil) (bvec type-eq-decl nil bv nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (minint const-decl "int" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (le_plus_le formula-decl nil real_props nil) (ge_plus_ge formula-decl nil real_props nil)) 606 290 nil nil)) (bv_bits_for_overflow_TCC1 0 (bv_bits_for_overflow_TCC1-1 nil 3249241286 3249243079 ("" (subtype-tcc) nil nil) proved nil 206 50 nil nil)) (bv_bits_for_overflow 0 (bv_bits_for_overflow-1 nil 3249241286 3249243080 ("" (skosimp*) (("" (lemma "bv2int_topbit[N]") (("" (inst-cp -1 "bv1!1") (("" (inst-cp -1 "bv2!1") (("" (inst -1 "bv1!1+bv2!1") (("" (lemma "bv2int_add") (("" (inst?) (("" (expand "overflow") (("" (assert) (("" (hide -6) (("" (replace -2) (("" (hide -2) (("" (replace -3) (("" (hide -3) (("" (iff 1) (("" (ground) nil)))))))))))))))))))))))))))))) nil) proved ((N formal-const-decl "posnat" bv_overflow nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2int_topbit formula-decl nil bv_int nil) (bv2int_add formula-decl nil bv_arithmetic nil) (overflow const-decl "bool" bv_overflow nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 930 460 nil nil)) (bv_overflow_bits_ne 0 (bv_overflow_bits_ne-1 nil 3249241286 3249243086 ("" (skosimp*) (("" (lemma "bv2int_topbit[N]") (("" (inst-cp -1 "bv1!1") (("" (inst-cp -1 "bv2!1") (("" (inst -1 "bv1!1+bv2!1") (("" (case "bv2int(bv1!1 + bv2!1) = bv2int(bv1!1) + bv2int(bv2!1) 
                          + 2* exp2(N) * b2n(bv1!1(N - 1)) - exp2(N)") (("1" (replace -1) (("1" (hide -1) (("1" (expand "^") (("1" (expand "b2n") (("1" (lift-if) (("1" (lemma "bv_sum_limits") (("1" (inst?) (("1" (expand "overflow") (("1" (expand "in_rng_2s_comp") (("1" (expand "minint") (("1" (expand "maxint") (("1" (case "exp2(N) = 2*exp2(N-1)") (("1" (ground) nil) ("2" (hide -1 -2 -3 -4 -5 2) (("2" (expand "exp2" 1 1) (("2" (lift-if) (("2" (ground) nil))))))))))))))))))))))))))))))) ("2" (hide -1 -2 -5) (("2" (lemma "bv2int_add_overflow") (("2" (inst?) (("2" (expand "overflow") (("2" (flatten) (("2" (assert) (("2" (replace -1) (("2" (hide -1) (("2" (lift-if) (("2" (expand "b2n") (("2" (lift-if) (("2" (expand "^") (("2" (expand "in_rng_2s_comp") (("2" (ground) nil))))))))))))))))))))))))))) ("3" (assert) nil)))))))))))) nil) proved ((N formal-const-decl "posnat" bv_overflow nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bv2int_topbit formula-decl nil bv_int nil) (b2n const-decl "nbit" bit nil) (nbit type-eq-decl nil bit nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (bv2int const-decl "rng_2s_comp" bv_int nil) (rng_2s_comp type-eq-decl nil bv_int nil) (maxint const-decl "int" bv_int nil) (minint const-decl "int" bv_int nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bv_sum_limits formula-decl nil bv_overflow nil) (overflow const-decl "bool" bv_overflow nil) (in_rng_2s_comp const-decl "bool" bv_int nil) (^ const-decl "bit" bv nil) (bv2int_add_overflow formula-decl nil bv_overflow nil) (+ const-decl "{bv: bvec[N] |
         bv2nat(bv) =
          IF bv2nat(bv1) + bv2nat(bv2) < exp2(N)
            THEN bv2nat(bv1) + bv2nat(bv2)
          ELSE bv2nat(bv1) + bv2nat(bv2) - exp2(N)
          ENDIF}" bv_arith_nat nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (numfield nonempty-type-eq-decl nil number_fields nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (= const-decl "[T, T -> boolean]" equalities nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 5726 2740 nil nil)) (bv_overflow_def 0 (bv_overflow_def-1 nil 3249241286 3249243087 ("" (skosimp*) (("" (iff 1) (("" (prop) (("1" (lemma "overflow_then_eq") (("1" (inst?) (("1" (assert) nil))))) ("2" (lemma "bv_overflow_bits_ne") (("2" (inst?) (("2" (assert) nil))))) ("3" (rewrite "bv_bits_for_overflow") nil)))))) nil) proved ((bv_bits_for_overflow formula-decl nil bv_overflow nil) (bv_overflow_bits_ne formula-decl nil bv_overflow nil) (overflow_then_eq formula-decl nil bv_overflow nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (N formal-const-decl "posnat" bv_overflow nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 337 180 nil nil)))
