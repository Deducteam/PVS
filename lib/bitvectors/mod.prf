(mod (ml3 0 (ml3-1 nil 3249241277 3249243007 ("" (skosimp*) (("" (expand "abs") (("" (lift-if) (("" (ground) (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst -1 "m!1" "floor(i!1 / m!1)" "i!1 / m!1") (("1" (flatten) (("1" (assert) nil))))))) ("2" (typepred "floor(i!1 / m!1)") (("2" (lemma "both_sides_times_pos_lt1") (("2" (inst -1 "m!1" "i!1 / m!1" " 1 + floor(i!1 / m!1)") (("2" (flatten) (("2" (hide -1) (("2" (assert) nil)))))))))))))))))) nil) proved ((abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (> const-decl "bool" reals nil) (posreal nonempty-type-eq-decl nil real_types nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (integer nonempty-type-from-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil) (NOT const-decl "[bool -> bool]" booleans nil)) 1231 620 nil nil)) (ml4 0 (ml4-1 nil 3249241277 3249243009 ("" (skosimp*) (("" (expand "abs") (("" (lift-if) (("" (ground) (("1" (typepred "floor(-i!1 / m!1)") (("1" (lemma "both_sides_times_pos_lt1") (("1" (inst -1 "m!1" "-i!1 / m!1" "1 + floor(-i!1 / m!1)") (("1" (flatten) (("1" (hide -1) (("1" (assert) nil))))))))))) ("2" (lemma "both_sides_times_pos_lt1") (("2" (inst -1 "m!1" "floor(-i!1 / m!1)" "-i!1 / m!1") (("2" (flatten) (("2" (hide -1) (("2" (assert) nil)))))))))))))))) nil) proved ((abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil)) 1231 600 nil nil)) (mod_TCC1 0 (mod_TCC1-1 nil 3249241277 3249243011 ("" (skosimp*) (("" (case "j!1 >= 0") (("1" (lemma "ml3") (("1" (inst?) (("1" (expand "abs") (("1" (lift-if) (("1" (ground) nil))))) ("2" (assert) nil))))) ("2" (lemma "ml4") (("2" (inst -1 "i!1" "-j!1") (("1" (expand "abs") (("1" (lift-if) (("1" (ground) nil))))) ("2" (assert) nil)))))))) nil) proved ((nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (> const-decl "bool" reals nil) (j!1 skolem-const-decl "nonzero_integer" mod nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (ml3 formula-decl nil mod nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (ml4 formula-decl nil mod nil)) 1886 930 nil nil)) (mod_pos 0 (mod_pos-1 nil 3249241277 3249243012 ("" (skosimp*) (("" (typepred "mod(i!1,m!1)") (("" (tcc) (("" (lemma "both_sides_times_pos_le1") (("" (inst -1 "m!1" "floor(i!1 / m!1)" "i!1/m!1") (("" (assert) nil)))))))))) nil) proved ((posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (both_sides_times_pos_le1 formula-decl nil real_props nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (integer nonempty-type-from-decl nil integers nil) (posreal nonempty-type-eq-decl nil real_types nil)) 1292 650 nil nil)) (mod_TCC2 0 (mod_TCC2-1 nil 3249241277 3249243013 ("" (skosimp) (("" (rewrite "mod_pos") nil)) nil) proved ((mod_pos formula-decl nil mod nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil)) 205 50 nil nil)) (mod_even 0 (mod_even-1 nil 3249241277 3249243013 ("" (skosimp*) (("" (expand "mod") (("" (rewrite "floor_int") (("" (assert) nil)))))) nil) proved ((mod const-decl "{k | abs(k) < abs(j)}" mod nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (integer nonempty-type-from-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (floor_int formula-decl nil floor_ceil nil)) 593 280 nil nil)) (mod_neg 0 (mod_neg-1 nil 3249241277 3249243015 ("" (auto-rewrite-theory "integers") (("" (skosimp*) (("" (lift-if) (("" (expand "mod") (("" (case "-i!1/j!1 = -(i!1/j!1)") (("1" (replace -1) (("1" (hide -1) (("1" (ground) (("1" (rewrite "floor_int") (("1" (assert) nil))) ("2" (rewrite "floor_neg") (("2" (lift-if) (("2" (ground) (("2" (case "integer_pred(--(i!1/j!1))") (("1" (assert) nil) ("2" (assert) nil))))))))))))))) ("2" (assert) nil)))))))))) nil) proved ((mod const-decl "{k | abs(k) < abs(j)}" mod nil) (integer nonempty-type-from-decl nil integers nil) (floor_int formula-decl nil floor_ceil nil) (closed_neg formula-decl nil integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonzero_integer nonempty-type-eq-decl nil integers nil)) 1340 680 nil nil)) (mod_neg_d 0 (mod_neg_d-1 nil 3249241277 3249243017 ("" (auto-rewrite-theory "integers") (("" (skosimp*) (("" (lift-if) (("" (expand "mod") (("" (case "i!1/-j!1=-(i!1/j!1)") (("1" (replace -1) (("1" (hide -1) (("1" (rewrite "floor_neg") (("1" (lift-if) (("1" (ground) (("1" (rewrite "floor_int") (("1" (assert) nil))) ("2" (assert) (("2" (case "integer_pred(--(i!1/j!1))") (("1" (assert) nil) ("2" (assert) nil))))))))))))))) ("2" (assert) nil)))))))))) nil) proved ((mod const-decl "{k | abs(k) < abs(j)}" mod nil) (floor_neg formula-decl nil floor_ceil nil) (integer? const-decl "bool" integers nil) (closed_neg formula-decl nil integers nil) (floor_int formula-decl nil floor_ceil nil) (integer nonempty-type-from-decl nil integers nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nonzero_integer nonempty-type-eq-decl nil integers nil)) 1631 870 nil nil)) (mod_eq_arg 0 (mod_eq_arg-1 nil 3249241277 3249243017 ("" (tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil)) 861 400 nil nil)) (mod_lt 0 (mod_lt-1 nil 3249241277 3249243020 ("" (skosimp*) (("" (lift-if) (("" (expand "mod") (("" (expand "abs") (("" (expand "sgn") (("" (grind) (("1" (rewrite "floor_small") (("1" (lift-if) (("1" (ground) (("1" (rewrite "pos_div_ge") nil))))))) ("2" (rewrite "floor_small") (("2" (lift-if) (("2" (ground) (("2" (rewrite "pos_div_ge") nil))))))) ("3" (rewrite "floor_small") (("3" (lift-if) (("3" (ground) (("3" (rewrite "pos_div_ge") nil))))))) ("4" (rewrite "floor_small") (("4" (lift-if) (("4" (ground) (("4" (rewrite "pos_div_ge") nil)))))))))))))))))) nil) proved ((abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (pos_div_ge formula-decl nil real_props nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (floor_small formula-decl nil floor_div_props nil) (sgn const-decl "int" floor_div_props nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil)) 2976 1370 nil nil)) (mod_lt_nat 0 (mod_lt_nat-1 nil 3249241277 3249243021 ("" (skosimp*) (("" (rewrite "mod_lt") (("1" (expand "sgn") (("1" (propax) nil))) ("2" (expand "abs") (("2" (propax) nil)))))) nil) proved ((mod_lt formula-decl nil mod nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (sgn const-decl "int" floor_div_props nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 423 270 nil nil)) (mod_lt_int 0 (mod_lt_int-1 nil 3249241277 3249243022 ("" (skosimp*) (("" (rewrite "mod_lt") (("1" (expand "sgn") (("1" (lift-if) (("1" (assert) nil))))) ("2" (expand "abs") (("2" (lift-if (hide 2)) (("2" (ground) nil)))))))) nil) proved ((mod_lt formula-decl nil mod nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (sgn const-decl "int" floor_div_props nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil)) 846 350 nil nil)) (mod_sum_pos 0 (mod_sum_pos-1 nil 3249241277 3249243023 ("" (skosimp*) (("" (expand "mod") (("" (lemma "floor_plus_int") (("" (inst - "k!1*m!1/m!1" "i!1/m!1") (("" (replace -1) (("" (assert) nil)))))))))) nil) proved ((mod const-decl "{k | abs(k) < abs(j)}" mod nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (floor_plus_int formula-decl nil floor_ceil nil)) 1499 730 nil nil)) (mod_gt 0 (mod_gt-1 nil 3249241277 3249243024 ("" (skosimp*) (("" (lemma "mod_sum_pos") (("" (inst -1 "i!1" "-1" "m!1") (("" (replace -1 * rl) (("" (hide -1) (("" (rewrite "mod_lt_int") (("" (lift-if) (("" (assert) nil)))))))))))))) nil) proved ((mod_sum_pos formula-decl nil mod nil) (mod_lt_int formula-decl nil mod nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 602 300 nil nil)) (mod_sum 0 (mod_sum-1 nil 3249241277 3249243025 ("" (skosimp*) (("" (expand "mod") (("" (lemma "floor_plus_int") (("" (inst - "k!1*j!1/j!1" "i!1/j!1") (("" (replace -1) (("" (assert) nil)))))))))) nil) proved ((mod const-decl "{k | abs(k) < abs(j)}" mod nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (int nonempty-type-eq-decl nil integers nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (floor_plus_int formula-decl nil floor_ceil nil)) 1495 710 nil nil)) (mod_sum_nat 0 (mod_sum_nat-1 nil 3249241277 3249243026 ("" (skosimp*) (("" (lift-if) (("" (prop) (("1" (rewrite "mod_lt_nat") nil) ("2" (lemma "mod_sum") (("2" (inst -1 "n1!1+n2!1" "m!1" "-1") (("2" (rewrite "mod_lt_nat") (("2" (assert) nil)))))))))))) nil) proved ((mod_sum formula-decl nil mod nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (mod_lt_nat formula-decl nil mod nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil)) 962 500 nil nil)) (mod_it_is 0 (mod_it_is-1 nil 3249241277 3249243027 ("" (skosimp*) (("" (replace -1) (("" (hide -1) (("" (lemma "mod_sum") (("" (inst - "b!1" "m!1" "c!1") (("" (replace -1) (("" (hide -1) (("" (rewrite "mod_lt") (("1" (lift-if) (("1" (expand "sgn") (("1" (propax) nil))))) ("2" (expand "abs") (("2" (propax) nil)))))))))))))))))) nil) proved ((mod_sum formula-decl nil mod nil) (mod_lt formula-decl nil mod nil) (sgn const-decl "int" floor_div_props nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 666 340 nil nil)) (mod_zero 0 (mod_zero-1 nil 3249241277 3249243028 ("" (tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil)) 717 410 nil nil)) (mod_one 0 (mod_one-1 nil 3249241277 3249243030 ("" (grind) (("1" (rewrite "floor_small") (("1" (lift-if) (("1" (ground) (("1" (rewrite "pos_div_ge") nil))))))) ("2" (rewrite "floor_small") (("2" (lift-if) (("2" (ground) (("2" (rewrite "pos_div_ge") nil)))))))) nil) proved ((floor_small formula-decl nil floor_div_props nil) (pos_div_ge formula-decl nil real_props nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil)) 2068 970 nil nil)) (mod_of_mod 0 (mod_of_mod-1 nil 3249241277 3249243031 ("" (skosimp*) (("" (rewrite "mod") (("" (lemma "mod_sum") (("" (inst - "i!1+k!1" "m!1" "-floor(k!1/m!1)") (("" (assert) nil)))))))) nil) proved ((mod const-decl "{k | abs(k) < abs(j)}" mod nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (integer nonempty-type-from-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (mod_sum formula-decl nil mod nil)) 1002 540 nil nil)) (mod_of_mod_neg 0 (mod_of_mod_neg-1 nil 3249241277 3249243032 ("" (skosimp*) (("" (rewrite "mod") (("" (lemma "mod_sum") (("" (inst - "i!1-k!1" "m!1" "floor(k!1/m!1)") (("" (assert) nil)))))))) nil) proved ((mod const-decl "{k | abs(k) < abs(j)}" mod nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (integer nonempty-type-from-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (mod_sum formula-decl nil mod nil)) 1033 550 nil nil)) (mod_inj_plus 0 (mod_inj_plus-1 nil 3249241277 3249243034 ("" (skosimp*) (("" (case "a!1 + n!1 < m!1") (("1" (case "a!1 + c!1 < m!1") (("1" (rewrite "mod_lt_nat") (("1" (rewrite "mod_lt_nat") (("1" (assert) nil))))) ("2" (rewrite "mod_lt_nat") (("2" (rewrite "mod_gt") (("2" (assert) nil))))))) ("2" (rewrite "mod_lt_nat") (("1" (assert) nil) ("2" (case "a!1 + c!1 < m!1") (("1" (rewrite "mod_gt") (("1" (rewrite "mod_lt_nat") (("1" (assert) nil))))) ("2" (rewrite "mod_gt") (("2" (rewrite "mod_gt") (("2" (assert) nil)))))))))))) nil) proved ((posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (mod_gt formula-decl nil mod nil) (mod_lt_nat formula-decl nil mod nil)) 1746 810 nil nil)) (mod_inj_minus 0 (mod_inj_minus-1 nil 3249241277 3249243038 ("" (skosimp*) (("" (expand "mod") (("" (rewrite "floor_small") (("1" (rewrite "floor_small") (("1" (grind) nil) ("2" (expand "abs") (("2" (lift-if) (("2" (ground) nil))))))) ("2" (grind) nil)))))) nil) proved ((mod const-decl "{k | abs(k) < abs(j)}" mod nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (floor_small formula-decl nil floor_div_props nil)) 3904 1880 nil nil)) (mod_wrap_around 0 (mod_wrap_around-1 nil 3249241277 3249243039 ("" (skosimp*) (("" (expand "mod") (("" (lemma "floor_val") (("" (inst?) (("" (inst -1 "1") (("" (ground) nil)))))))))) nil) proved ((mod const-decl "{k | abs(k) < abs(j)}" mod nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (/= const-decl "boolean" notequal nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (floor_val formula-decl nil floor_div_props nil)) 1019 550 nil nil)) (mod_wrap_inj 0 (mod_wrap_inj-1 nil 3249241277 3249243043 ("" (skosimp*) (("" (case "abs(n!1-b!1) < abs(m!1)") (("1" (lemma "mod_lt") (("1" (inst -1 "n!1-b!1" "m!1") (("1" (assert) (("1" (lemma "mod_lt") (("1" (inst -1 "n!1+a!1" "m!1") (("1" (lemma "mod_wrap_around") (("1" (inst?) (("1" (expand "sgn") (("1" (lift-if) (("1" (assert) (("1" (expand "abs") (("1" (lift-if) (("1" (ground) nil))))))))))))))))))))))))) ("2" (hide -5) (("2" (grind) nil)))))) nil) proved ((posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (abs const-decl "{n: nonneg_real | n >= m}" real_defs nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (mod_wrap_around formula-decl nil mod nil) (sgn const-decl "int" floor_div_props nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (mod_lt formula-decl nil mod nil)) 3928 1890 nil nil)) (mod_mult 0 (mod_mult-1 nil 3249241277 3249243045 ("" (skosimp*) (("" (expand "mod") (("" (lemma "floor_plus_int") (("" (inst -1 "-floor(i!1 / (mj!1 * m!1)) * mj!1" "i!1/m!1") (("" (assert) nil)))))))) nil) proved ((mod const-decl "{k | abs(k) < abs(j)}" mod nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (integer nonempty-type-from-decl nil integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (floor_plus_int formula-decl nil floor_ceil nil)) 1753 840 nil nil)))
