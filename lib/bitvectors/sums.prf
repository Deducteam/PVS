(sums (sigma_TCC1 0 (sigma_TCC1-1 nil 3249241275 3249242840 ("" (tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 301 110 nil nil)) (sigma_TCC2 0 (sigma_TCC2-1 nil 3249241275 3249242840 ("" (tcc) nil nil) proved nil 39 40 nil nil)) (sigma_mult 0 (sigma_mult-1 nil 3249241275 3249242841 ("" (induct "high") (("1" (skosimp*) (("1" (expand "sigma") (("1" (lift-if) (("1" (ground) nil))))))) ("2" (skosimp*) (("2" (expand "sigma" 1) (("2" (assert) (("2" (inst?) (("2" (replace -1) (("2" (hide -1) (("2" (lift-if) (("2" (ground) nil)))))))))))))))) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (sigma def-decl "nat" sums nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1490 710 nil nil)) (sigma_split 0 (sigma_split-1 nil 3249241275 3249242843 ("" (induct "high") (("1" (skosimp*) (("1" (expand "sigma") (("1" (lift-if) (("1" (ground) nil))))))) ("2" (skosimp*) (("2" (expand "sigma" 1 1) (("2" (expand "sigma" 1 2) (("2" (assert) (("2" (case "j!1=m!1") (("1" (replace -1) (("1" (hide -1) (("1" (assert) nil))))) ("2" (inst -1 "F!1" "low!1" "m!1") (("2" (assert) nil)))))))))))))) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (sigma def-decl "nat" sums nil) (= const-decl "[T, T -> boolean]" equalities nil) (> const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1175 520 nil nil)) (sigma_shift 0 (sigma_shift-1 nil 3249241275 3249242844 ("" (induct "high") (("1" (skosimp*) (("1" (expand "sigma") (("1" (lift-if) (("1" (ground) nil))))))) ("2" (skosimp*) (("2" (expand "sigma" 1) (("2" (lift-if) (("2" (lift-if) (("2" (assert) (("2" (inst?) (("2" (ground) nil)))))))))))))) nil) proved ((nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (sigma def-decl "nat" sums nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 1222 590 nil nil)) (sigma_restrict_eq 0 (sigma_restrict_eq-1 nil 3249241275 3249242846 ("" (induct "high") (("1" (skosimp*) (("1" (expand "sigma") (("1" (expand "restrict") (("1" (lift-if) (("1" (ground) (("1" (case "(LAMBDA (n: nat): IF n > 0 THEN 0 ELSE F!1(n) ENDIF)(low!1)
        = (LAMBDA (n: nat): IF n > 0 THEN 0 ELSE G!1(n) ENDIF)(low!1)") (("1" (hide -2) (("1" (beta -1) (("1" (lift-if) (("1" (ground) nil))))))) ("2" (hide 2 3) (("2" (replace -1) (("2" (propax) nil))))))))))))))))) ("2" (skosimp*) (("2" (expand "sigma" 1) (("2" (lift-if) (("2" (ground) (("1" (replace -1) (("1" (hide -1) (("1" (hide -1) (("1" (expand "restrict") (("1" (case "  (LAMBDA (n: nat): IF n < low!1 OR n > low!1 THEN 0 ELSE F!1(n) ENDIF)(low!1)
        = (LAMBDA (n: nat): IF n < low!1 OR n > low!1 THEN 0 ELSE G!1(n) ENDIF)(low!1)") (("1" (hide -2) (("1" (beta -1) (("1" (ground) nil))))) ("2" (hide 2 3) (("2" (replace -1) (("2" (propax) nil))))))))))))))) ("2" (inst -1 "F!1" "G!1" "low!1") (("2" (split -1) (("1" (assert) (("1" (hide -1) (("1" (expand "restrict") (("1" (case "  (LAMBDA (n: nat): IF n < low!1 OR n > j!1 + 1 THEN 0 ELSE F!1(n) ENDIF)(j!1+1)
        =
        (LAMBDA
         (n: nat): IF n < low!1 OR n > j!1 + 1 THEN 0 ELSE G!1(n) ENDIF)(j!1+1)") (("1" (beta -1) (("1" (hide -2) (("1" (lift-if) (("1" (ground) nil))))))) ("2" (replace -1) (("2" (hide -1 2 3 4) (("2" (beta 1) (("2" (lift-if) (("2" (ground) nil))))))))))))))))) ("2" (hide 3) (("2" (expand "restrict") (("2" (hide 3) (("2" (apply-extensionality 1) (("2" (lift-if) (("2" (ground) (("2" (case " (LAMBDA (n: nat): IF n < low!1 OR n > j!1 + 1 THEN 0 ELSE F!1(n) ENDIF)(x!1)
        =
        (LAMBDA
         (n: nat): IF n < low!1 OR n > j!1 + 1 THEN 0 ELSE G!1(n) ENDIF)(x!1)") (("1" (hide -2) (("1" (beta -1) (("1" (lift-if) (("1" (ground) nil))))))) ("2" (replace -1) (("2" (beta 1) (("2" (assert) nil)))))))))))))))))))))))))))))))) nil) proved ((numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (> const-decl "bool" reals nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (nat_induction formula-decl nil naturalnumbers nil) (sigma def-decl "nat" sums nil) (restrict const-decl "[nat -> nat]" sums nil) (= const-decl "[T, T -> boolean]" equalities nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 2188 1090 nil nil)))
