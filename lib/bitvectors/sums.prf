(sums
 (sigma_TCC1 0
  (sigma_TCC1-1 nil 3341427757 3341427757 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   140 90 nil nil))
 (sigma_TCC2 0
  (sigma_TCC2-1 nil 3341427757 3341427757
   ("" (termination-tcc) nil nil) proved nil 17 20 nil nil))
 (sigma_mult 0
  (sigma_mult-1 nil 3341427788 3341427849
   ("" (induct "high")
    (("1" (skolem!)
      (("1" (expand "sigma")
        (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "sigma" +)
        (("2" (assert)
          (("2" (inst?) (("2" (lift-if) (("2" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "nat" sums nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   60300 2230 t shostak))
 (sigma_split 0
  (sigma_split-1 nil 3341427863 3341427979
   ("" (induct "high")
    (("1" (skosimp)
      (("1" (expand "sigma")
        (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "sigma" + 1)
        (("2" (expand "sigma" + 2)
          (("2" (assert)
            (("2" (inst - "F!1" "low!1" "m!1")
              (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nat_induction formula-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "nat" sums nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   37862 1980 t shostak))
 (sigma_shift 0
  (sigma_shift-1 nil 3341427994 3341428076
   ("" (induct "high")
    (("1" (skolem!)
      (("1" (expand "sigma")
        (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "sigma" +)
        (("2" (lift-if)
          (("2" (lift-if)
            (("2" (assert) (("2" (inst?) (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nat_induction formula-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "nat" sums nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   82003 3950 t shostak))
 (sigma_restrict_eq 0
  (sigma_restrict_eq-1 nil 3341428088 3341429266
   ("" (induct "high")
    (("1" (skosimp)
      (("1" (decompose-equality)
        (("1" (expand* "sigma" "restrict")
          (("1" (inst?) (("1" (lift-if) (("1" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (decompose-equality)
        (("2" (expand "sigma" +)
          (("2" (lift-if)
            (("2" (ground)
              (("1" (expand "restrict")
                (("1" (inst - "low!1") (("1" (ground) nil nil)) nil))
                nil)
               ("2" (inst - "F!1" "G!1" "low!1")
                (("2" (split)
                  (("1" (assert)
                    (("1" (expand "restrict")
                      (("1" (inst - "j!1 + 1") (("1" (ground) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality :hide? t)
                    (("2" (expand "restrict")
                      (("2" (inst - "x!1")
                        (("2" (lift-if) (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (sigma def-decl "nat" sums nil)
    (restrict const-decl "[nat -> nat]" sums nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   1177958 5330 t shostak)))

