(bv_fract (fract_numerator_range_TCC1 0 (fract_numerator_range_TCC1-1 nil 3249241290 3249242812 ("" (ground) nil nil) proved nil 201 50 nil nil)) (bv2fract_range_TCC1 0 (bv2fract_range_TCC1-1 nil 3249241290 3249242813 ("" (tcc) nil nil) proved ((< const-decl "bool" reals nil) (N formal-const-decl "above(1)" bv_fract nil) (above nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (>= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (fract_numerator_range type-eq-decl nil bv_fract nil) (bv2fract_range const-decl "bool" bv_fract nil)) 692 340 nil nil)) (min_pos_fract_TCC1 0 (min_pos_fract_TCC1-1 nil 3249241290 3249242813 ("" (assert) (("" (expand "bv2fract_range") (("" (inst 1 "1") (("" (assert) (("" (expand "exp2") (("" (assert) nil)))))))))) nil) proved ((bv2fract_range const-decl "bool" bv_fract nil) (fract_numerator_range type-eq-decl nil bv_fract nil) (< const-decl "bool" reals nil) (N formal-const-decl "above(1)" bv_fract nil) (above nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (>= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 302 150 nil nil)) (max_pos_fract_TCC1 0 (max_pos_fract_TCC1-1 nil 3249241290 3249242814 ("" (expand "bv2fract_range") (("" (inst 1 "exp2(N-1) - 1") (("1" (assert) nil) ("2" (auto-rewrite-theory "integers") (("2" (assert) nil))) ("3" (assert) nil)))) nil) proved ((N formal-const-decl "above(1)" bv_fract nil) (above nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (- const-decl "[numfield -> numfield]" number_fields nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (fract_numerator_range type-eq-decl nil bv_fract nil) (bv2fract_range const-decl "bool" bv_fract nil)) 505 200 nil nil)) (min_neg_fract_TCC1 0 (min_neg_fract_TCC1-1 nil 3249241290 3249242814 ("" (expand "bv2fract_range") (("" (inst 1 "-1") (("" (assert) (("" (auto-rewrite-theory "integers") (("" (assert) nil)))))))) nil) proved ((number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (>= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (above nonempty-type-eq-decl nil integers nil) (N formal-const-decl "above(1)" bv_fract nil) (< const-decl "bool" reals nil) (fract_numerator_range type-eq-decl nil bv_fract nil) (bv2fract_range const-decl "bool" bv_fract nil)) 285 130 nil nil)) (max_neg_fract_TCC1 0 (max_neg_fract_TCC1-1 nil 3249241290 3249242814 ("" (expand "bv2fract_range") (("" (auto-rewrite-theory "integers") (("" (inst 1 "1 - exp2(N-1)") (("1" (assert) nil) ("2" (assert) nil) ("3" (assert) nil)))))) nil) proved ((fract_numerator_range type-eq-decl nil bv_fract nil) (- const-decl "[numfield -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (above nonempty-type-eq-decl nil integers nil) (N formal-const-decl "above(1)" bv_fract nil) (bv2fract_range const-decl "bool" bv_fract nil)) 349 190 nil nil)))
