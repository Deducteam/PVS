(bv_arith_int_concat (bv2int_concat_TCC1 0 (bv2int_concat_TCC1-1 nil 3249241278 3249243054 ("" (subtype-tcc) nil nil) proved nil 38 40 nil nil)) (bv2int_concat_TCC2 0 (bv2int_concat_TCC2-1 nil 3249241278 3249243054 ("" (subtype-tcc) nil nil) proved nil 35 40 nil nil)) (bv2int_concat 0 (bv2int_concat-1 nil 3249241278 3249243057 ("" (skosimp*) (("" (lemma "bv2nat_concat") (("" (inst?) (("" (rewrite "bv2int_lem") (("" (rewrite "bv2int_lem") (("" (rewrite "bv2int_lem") (("" (lemma "bv_concat_top_bit") (("" (inst - "m!1" "n!1" "bvn!1" "bvm!1") (("" (replace -1 :hide? t) (("" (rewrite "exp2_sum") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((bv2nat_concat formula-decl nil bv_arith_concat nil) (bv2int_lem formula-decl nil bv_int nil) (O const-decl "bvec[n + m]" bv_concat_def nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (exp2_sum formula-decl nil exp2 nil) (bv_concat_top_bit formula-decl nil bv_concat nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) 3053 1470 nil nil)))
