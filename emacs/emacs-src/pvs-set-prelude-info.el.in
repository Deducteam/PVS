;;; This is used to create pvs-prelude-files-and-regions.el, which is just
;;; defines *pvs-files-and-regions* so that extracting prelude theories
;;; (e.g., using M-x vpt) is reasonably quick.

;; --------------------------------------------------------------------
;; PVS
;; Copyright (C) 2006, SRI International.  All Rights Reserved.

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 2
;; of the License, or (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
;; --------------------------------------------------------------------

(defvar start-pvs nil) ; don't need to run pvs, just load the files

(defconst pvs-emacs-system
  (cond ((string-match "Xemacs 21" (emacs-version))
	 'xemacs21)
	((string-match "XEmacs 20" (emacs-version))
	 'xemacs20)
	((string-match "XEmacs 19" (emacs-version))
	 'xemacs19)
	((string-match "Emacs 20" (emacs-version))
	 'emacs20)
	((string-match "Emacs 19" (emacs-version))
	 'emacs19)
	(t
	 (message "Your Emacs version is not known by PVS - assuming Emacs 20")
         'emacs20))
  "The version of Emacs in which PVS is running. Set in go-pvs.el.
   Defined as one of (xemacs21 xemacs20 xemacs19 emacs20 emacs19) and defaults
   to emacs20 if the current version cannot be determined.")

(defconst pvs-path "@PVSPATH@")

(setq load-path
  (append (list pvs-path
		(concat pvs-path "/emacs/emacs-src")
		(concat pvs-path "/emacs/emacs-src/ilisp"))
          load-path))

(defvar region-file
  "emacs/emacs-src/pvs-prelude-files-and-regions.el")

(defun set-prelude-files-and-regions ()
  (pvs-message "Creating pvs-prelude-files-and-regions.el")
  (let* ((files (directory-files "@PVSPATH@/lib"
				 t "^prelude\\.pvs$\\|.*_adt\\.pvs$"))
	 (files-and-regions
	  (mapcar '(lambda (file)
		     (save-excursion
		       (let ((noninteractive t)) ;; Shut up about read-only
			 (set-buffer (find-file-noselect file)))
		       (cons (file-name-nondirectory file) (theory-regions* t))))
	    files)))
    (set-buffer (find-file-noselect (format "@PVSPATH@/%s" region-file)))
    (erase-buffer)
    (insert ";;; Generated from pvs-set-prelude-info.el - do not edit
(defvar *prelude-files-and-regions*
  (mapcar
      '(lambda (x)
	 (cons (format \"%s/lib/%s\" pvs-path (car x)) (cdr x)))
    '")
    (insert (format "%S" files-and-regions))
    (insert "))")
    (write-file (buffer-file-name))))
