
The sorts file contains the support for assigning nonterminal and internal
sorts as well as assigning operator signatures to the various operators of the
language. 

Scott Dietzen, Fri Jul 10 14:11:16 1987

There are two ADT's defined herein: ttypes (for "term types") and opsigs (for
"operator signatures").   






TTYPES -- 

There are different ttypes for each class of terms the SB may generate: 

	-- The first group are for augment base values, that is terms which
	   may be directly inserted in the abstract syntax by the augments
	   (e.g.  {E '+' E^1} <fun-call(`+,E,E^1)>.  

	  mk-id-ttype(symbol)   is-id-ttype(x)  ds-id-ttype(ttype)
	  mk-num-ttype(number)  is-num-ttype(x) ds-num-ttype(ttype)
	  mk-str-ttype(string)  is-str-ttype(x) ds-str-ttype(ttype)
	  mk-lit-ttype(literal) is-lit-ttype(x) ds-lit-ttype(ttype)

Each of the constructors takes a value of the appropriate type, while each of
the destructors returns that value.  (In fact, generally destructors associated
with the various types always return the same arguments the associated
constructor was given.)


	-- Terms of a given simple operator are described by 

	  mk-op-ttype(oper) is-op-ttype(x) ds-op-ttype(ttype)
	  
The constructor takes an OPER (of oper type) as the argument.  


	-- Terms of a given sort. 

	  mk-sort-ttype(symbol) is-sort-ttype(x) ds-sort-ttype(ttype)

The constructor takes a SYMBOL as the argument.  A sort produced by this
function is undefined until an individual enters what term types it stands for
in the sort table (This task is performed by the SB.).


	-- Null ttypes. 

	  mk-null-ttype() is-null-ttype(x)

A special ttype associated with the 'null' keyword used in grammars. 


	-- Elist ttypes.

	  mk-elist-ttype() is-elist-ttype(x)

A special ttype associated with empty lists, e.g. <exps(list())> which is
distinguished from <exps()> because the second will cause a type conflict with
<exps(star)> used in another position while the former will not.


	-- List ttypes.

	  mk-list-ttype(ttype) is-list-ttype(x) ds-list-ttype(ttype)

The constructor takes an existing ttype and produces the type associated with a
list of such ttypes. 


	-- Union ttypes
	
	  mk-union-ttype (ttype*) is-union-ttype(x) ds-union-ttype(ttype)

Here we construct a ttype which is the union of one or more ttypes.  This
is usefull for defining the ttypes associated with a sort.  It is primarily
used internally by the SB. 



-- Other TTYPE functions:  

ttypep
ttype-equal    (Are two ttypes equivalent?  The compaision is flat; Sorts are
		not translated.) 
ttype-overlap? (Is there an overlap between two ttypes that would be a problem,
	  	e.g. for unparsing?  Ttype-overlap translates sort defintions.)
ttype-to-sexp
sexp-to-ttype 




-- Printed representation

Ttypes are displayed with the macro character #t followed by an sexp denoting
the ttype.  See ttype-to-sexp to understand structure. 




OPSIGS --

-- Standard Routines 

	mk-opsig : string x ttype* x ttype  ->  opsig

		string is the language name
		ttype* are the ttypes of the arguments
		ttype is the ttype of the result.

	opsig-lang-name : opsig -> symbol
	opsig-inputs : opsig -> ttype*
	opsig-output : opsig -> ttype*
	

-- Other OPSIG functions: 

opsigp
opsig-equal
opsig-arity  (What is the arity of the operator?)
opsig-to-sexp
sexp-to-opsig



-- Printed representation

Opsigs are displayed with the macro character #> followed by an sexp denoting
the opsig.  The sexp looks like 

	#@( <lang-name>  :=  <ttype*>  :->  <ttype> ).






TABLES of OPSIGS and SORTS


Both opsigs and sorts are maintained in hash tables so they may be easily
accessed.  

SORT TABLES

	make-sort-table (&opt contents) -> hash-table
		Contents is a list of sort-ttype,ttype pairs to be inserted in
		the table. 

	sort-table-insert(sort-ttype, ttype, &opt sort-table, no-warnings)
		Sort-ttype is defined to represent ttype. 
		If sort-table is not specified, inserts are performed on the
		global table only.  Otherwise inserts are done on both the
		local and global table.
		No warnings simply disables warning messages.

	sort-table-delete(sort-ttype &opt sort-table no-warnings)
		The Sort-ttype definition is removed. 
		If sort-table is not specified, deletes are performed on the
		global table only.  Otherwise deletes are done on both the
		local and global table.			
		No warnings simply disables warning messages.
		

	sort-table-lookup (sort-ttype &opt sort-table)
		Look up sort-ttype is the global or local table depending on
		whether or not the optional argument was included. 

	sort-table-contents (&opt sort-table)
		Build a list of the sort-ttype,ttype pairs in the table (use the
		global table if none is provided.) 

	add-ttype-to-sort (ttype sort-ttype &optional sort-table)
		Add the given to ttype to those included in sort-ttype in both
		the given table and local table, or only the global table if no
		local table is provided.  If sort-ttype is not already in the
		sort-table it is inserted. 


OPSIG TABLES


	make-opsig-table (&opt contents) -> hash-table
		Contents is a list of oper,opsig pairs to be inserted in the
		table. 

	opsig-table-insert(oper, opsig, &opt opsig-table, no-warnings)
		Oper is given an operator signature.
		If opsig-table is not specified, inserts are performed on the
		global table only.  Otherwise inserts are done on both the
		local and global table.
		No warnings simply disables warning messages.

	opsig-table-delete(oper &opt opsig-table no-warnings)
		The opsig associated with oper is removed. 
		If opsig-table is not specified, deletes are performed on the
		global table only.  Otherwise deletes are done on both the
		local and global table.			
		No warnings simply disables warning messages.
		

	opsig-table-lookup (oper &opt opsig-table)
		Look up oper is the global or local table depending on
		whether or not the optional argument was included. 

	opsig-table-contents (&opt opsig-table)
		Build a list of the oper,opsig pairs in the table (use the
		global table if none is provided.).






 	

