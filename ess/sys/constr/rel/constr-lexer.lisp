;;; -*- Mode: Lisp; Package: CONSTRG -*-
(in-package "CONSTR-TERM-REP")  ;; creates package for abstract syntax. 

(in-package "CONSTRG")  ;; enters package for generated code.  

(use-package '("NEWATTR" "LANG" "SB-RUNTIME" "SORT" "TERM" "OCC" "OPER"
               "ERGOLISP"))


(export '())

(DEFPARAMETER CONSTR-KEYWORD-LIST
    (QUOTE
     (SBST::|:| SBST::|\|| SBST::= SBST::DATATYPE SBST::ABBREV SBST::==
      SBST::OF SBST::|'| SBST::UNIT SBST::} SBST::{ SBST::} SBST::|,| SBST::{
      SBST::NOT-SATS SBST::SATS SBST::NOT SBST::OR SBST::AND SBST::|#|
      SBST::-> SBST::? SBST::* SBST::|(| SBST::|)|)))
(DEFPARAMETER CONSTR-SINGLE-CHAR-OP-LIST
    (QUOTE (#\} #\{ #\# #\] #\[ #\* #\? #\' #\) #\( #\| #\,)))
(DEFPARAMETER CONSTR-MULTI-CHAR-OP-LIST (QUOTE ((#\= . LEX-=))))
(DEFPARAMETER CONSTR-ALL-OPERATORS-LIST
    (QUOTE
     (SBST::} SBST::{ SBST::|#| SBST::] SBST::[ SBST::* SBST::? SBST::|'|
      SBST::|)| SBST::|(| SBST::|\|| SBST::= SBST::== SBST::|,|)))
(DEFPARAMETER CONSTR-NEW-LINE-COMMENT-CHAR #\%)
(DEFPARAMETER CONSTR-OPEN-COMMENT-CHAR ())
(DEFPARAMETER CONSTR-CLOSE-COMMENT-CHAR ())
(DEFPARAMETER CONSTR-ESCAPE-CHAR ())
(DEFPARAMETER CONSTR-CASE-SENSITIVE ())
(DEFPARAMETER CONSTR-STRING-CHAR #\")
(DEFPARAMETER CONSTR-KEYWORD-CHAR ())
(DEFPARAMETER CONSTR-LITERAL-CHAR ())
(DEFPARAMETER CONSTR-RESTRICTED-CHARS
    (REDUCE #'(LAMBDA (R S) (UNION R S :TEST #'CHAR=))
     (LIST CONSTR-SINGLE-CHAR-OP-LIST
           (IF CONSTR-NEW-LINE-COMMENT-CHAR
               (LIST CONSTR-NEW-LINE-COMMENT-CHAR))
           (IF CONSTR-OPEN-COMMENT-CHAR (LIST CONSTR-OPEN-COMMENT-CHAR))
           (IF CONSTR-CLOSE-COMMENT-CHAR (LIST CONSTR-CLOSE-COMMENT-CHAR))
           (IF CONSTR-ESCAPE-CHAR (LIST CONSTR-ESCAPE-CHAR))
           (IF CONSTR-STRING-CHAR (LIST CONSTR-STRING-CHAR))
           (IF CONSTR-KEYWORD-CHAR (LIST CONSTR-KEYWORD-CHAR))
           (IF CONSTR-LITERAL-CHAR (LIST CONSTR-LITERAL-CHAR)))))
(DEFVAR *CONSTR-KEYWORD-TABLE* ())
(DEFUN INIT-LEXER-AUX (LEXSTREAM)
  (INIT-LEXICAL-READTABLE LEXSTREAM
    :SINGLE-CHAR-OP-LIST CONSTR-SINGLE-CHAR-OP-LIST
    :NEW-LINE-COMMENT-CHAR CONSTR-NEW-LINE-COMMENT-CHAR
    :OPEN-COMMENT-CHAR CONSTR-OPEN-COMMENT-CHAR
    :ESCAPE-CHAR CONSTR-ESCAPE-CHAR
    :MULTI-CHAR-OP-LIST CONSTR-MULTI-CHAR-OP-LIST))

(DEFUN INIT-LEXER (LEXSTREAM)
  (INIT-LEXER-AUX LEXSTREAM)
  (IF CONSTR-STRING-CHAR
      (LEXICAL-MAKE-MACRO LEXSTREAM CONSTR-STRING-CHAR #'READ-SB-STRING))
  (IF CONSTR-KEYWORD-CHAR
      (LEXICAL-MAKE-MACRO LEXSTREAM CONSTR-KEYWORD-CHAR
                          #'READ-KEYWORD-STRING))
  (IF CONSTR-LITERAL-CHAR
      (LEXICAL-MAKE-MACRO LEXSTREAM CONSTR-LITERAL-CHAR #'READ-LITERAL)))

(DEFUN LEX-= (STREAM SYMBOL)
  (DECLARE (IGNORE SYMBOL))
  (LET (HOLDCHAR)
    (SETF HOLDCHAR (LEXICAL-READ-CHAR STREAM :EOF))
    (IF (AND CONSTR-ESCAPE-CHAR (CHAR= HOLDCHAR CONSTR-ESCAPE-CHAR))
        (SETF HOLDCHAR (LEXICAL-READ-CHAR STREAM :EOF)))
    (COND ((CHAR= HOLDCHAR #\=) 'SBST::==)
          (T (LEXICAL-UNREAD-CHAR STREAM) 'SBST::=))))
